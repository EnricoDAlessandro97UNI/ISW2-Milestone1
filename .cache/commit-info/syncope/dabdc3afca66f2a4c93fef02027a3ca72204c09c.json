{"sha":"dabdc3afca66f2a4c93fef02027a3ca72204c09c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhYmRjM2FmY2E2NmYyYTRjOTNmZWYwMjAyN2EzY2E3MjIwNGMwOWM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-10T13:12:48Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-10T13:12:48Z"},"message":"(Fixes issue #43)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a66e174a2999645a25b6a13910c19166d2bd57a5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a66e174a2999645a25b6a13910c19166d2bd57a5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dabdc3afca66f2a4c93fef02027a3ca72204c09c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dabdc3afca66f2a4c93fef02027a3ca72204c09c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dabdc3afca66f2a4c93fef02027a3ca72204c09c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dabdc3afca66f2a4c93fef02027a3ca72204c09c/comments","author":null,"committer":null,"parents":[{"sha":"e0e1dd116337fbe656abcf8fff76da43b331051e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0e1dd116337fbe656abcf8fff76da43b331051e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0e1dd116337fbe656abcf8fff76da43b331051e"}],"stats":{"total":620,"additions":418,"deletions":202},"files":[{"sha":"815483cb63b10a0c30e55cc0c54d79f69ca4fcdb","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":51,"deletions":95,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -14,36 +14,34 @@\n  */\n package org.syncope.core.persistence;\n \n+import java.beans.XMLDecoder;\n+import java.beans.XMLEncoder;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.net.URL;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n import org.identityconnectors.common.IOUtil;\n-import org.identityconnectors.framework.api.APIConfiguration;\n-import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConnectorFacade;\n-import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n-import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n-import org.identityconnectors.framework.api.ConnectorKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.client.to.PropertyTO;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.SyncopeConfiguration;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n-import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n \n /**\n  * Load identity connector instances on application startup.\n@@ -120,114 +118,72 @@ private static synchronized DefaultListableBeanFactory getBeanFactory() {\n         return (DefaultListableBeanFactory) context.getBeanFactory();\n     }\n \n-    private static ConnectorFacade getConnectorFacade(String bundlename,\n-            String bundleversion, String connectorname,\n-            Set<PropertyTO> configuration) throws NotFoundException {\n-\n-        // specify a connector.\n-        ConnectorKey key = new ConnectorKey(\n-                bundlename,\n-                bundleversion,\n-                connectorname);\n-\n-        if (key == null) {\n-            throw new NotFoundException(\"Connector Key\");\n-        }\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n-                    + \"\\nBundle version: \" + key.getBundleVersion()\n-                    + \"\\nBundle class: \" + key.getConnectorName());\n-        }\n-\n-        // get the specified connector.\n-        ConnectorInfo info = getConnectorManager().findConnectorInfo(key);\n+    public static ConnectorFacadeProxy getConnector(final String id)\n+            throws BeansException {\n \n-        if (info == null) {\n-            throw new NotFoundException(\"Connector Info\");\n-        }\n+        return (ConnectorFacadeProxy) getBeanFactory().getBean(id);\n+    }\n \n-        // create default configuration\n-        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n+    public static void registerConnector(final ConnectorInstance instance)\n+            throws NotFoundException {\n \n-        if (apiConfig == null) {\n-            throw new NotFoundException(\"Default API configuration\");\n+        if (getBeanFactory().containsSingleton(instance.getId().toString())) {\n+            removeConnector(instance.getId().toString());\n         }\n \n-        // retrieve the ConfigurationProperties.\n-        ConfigurationProperties properties =\n-                apiConfig.getConfigurationProperties();\n-\n-        if (properties == null) {\n-            throw new NotFoundException(\"Configuration properties\");\n-        }\n+        ConnectorFacadeProxy connector = new ConnectorFacadeProxy(instance);\n \n-        // Print out what the properties are (not necessary)\n         if (LOG.isDebugEnabled()) {\n-            for (String propName : properties.getPropertyNames()) {\n-                LOG.debug(\"\\nProperty Name: \"\n-                        + properties.getProperty(propName).getName()\n-                        + \"\\nProperty Type: \"\n-                        + properties.getProperty(propName).getType());\n-            }\n-        }\n-\n-        // Set all of the ConfigurationProperties needed by the connector.\n-        for (PropertyTO property : configuration) {\n-            properties.setPropertyValue(\n-                    property.getKey(), property.getValue());\n+            LOG.debug(\"Connector \" + connector);\n         }\n \n-        // Use the ConnectorFacadeFactory's newInstance() method to get\n-        // a new connector.\n-        ConnectorFacade connector =\n-                ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n+        getBeanFactory().registerSingleton(\n+                instance.getId().toString(), connector);\n \n-        if (connector == null) {\n-            throw new NotFoundException(\"Connector\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Registered bean \" + instance.getId().toString());\n         }\n-\n-        // Make sure we have set up the Configuration properly\n-        connector.validate();\n-        //connector.test(); //needs a target resource deployed\n-\n-        return connector;\n     }\n \n-    public static ConnectorFacade getConnectorFacade(final String id)\n-            throws BeansException {\n-\n-        return (ConnectorFacade) getBeanFactory().getBean(id);\n+    public static void removeConnector(final String id) {\n+        getBeanFactory().destroySingleton(id);\n     }\n \n-    public static void registerConnectorFacade(final ConnectorInstance instance)\n-            throws NotFoundException {\n+    public static String serializeToXML(Object obj) {\n+        String result = null;\n \n-        if (getBeanFactory().containsSingleton(instance.getId().toString())) {\n-            removeConnectorFacade(instance.getId().toString());\n+        try {\n+            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n+            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n+            encoder.writeObject(obj);\n+            encoder.flush();\n+            encoder.close();\n+\n+            result = URLEncoder.encode(tokenContentOS.toString(), \"UTF-8\");\n+        } catch (Throwable t) {\n+            LOG.error(\"Exception during connector serialization\", t);\n         }\n \n-        ConnectorFacade connector = getConnectorFacade(\n-                instance.getBundleName(),\n-                instance.getVersion(),\n-                instance.getConnectorName(),\n-                (Set<PropertyTO>) ConnectorInstanceDataBinder.buildFromXML(\n-                instance.getXmlConfiguration()));\n+        return result;\n+    }\n+\n+    public static Object buildFromXML(String xml) {\n+        Object result = null;\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Connector instance \" + connector);\n-        }\n+        try {\n+            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n+                    URLDecoder.decode(xml, \"UTF-8\").getBytes());\n \n-        getBeanFactory().registerSingleton(\n-                instance.getId().toString(), connector);\n+            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n+            Object object = decoder.readObject();\n+            decoder.close();\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Registered bean \" + instance.getId().toString());\n+            result = object;\n+        } catch (Throwable t) {\n+            LOG.error(\"Exception during connector deserialization\", t);\n         }\n-    }\n \n-    public static void removeConnectorFacade(final String id) {\n-        getBeanFactory().destroySingleton(id);\n+        return result;\n     }\n \n     @Override\n@@ -242,7 +198,7 @@ public final void contextInitialized(final ServletContextEvent sce) {\n         List<ConnectorInstance> instances = connectorInstanceDAO.findAll();\n         for (ConnectorInstance instance : instances) {\n             try {\n-                registerConnectorFacade(instance);\n+                registerConnector(instance);\n             } catch (NotFoundException e) {\n                 LOG.error(\"While loading connector bundle for instance \"\n                         + instance, e);"},{"sha":"91830052d6d9085df91d6bd6cab64f9109ab44b9","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -15,19 +15,40 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n+import org.hibernate.annotations.CollectionOfElements;\n \n @Entity\n public class ConnectorInstance extends AbstractBaseBean {\n \n+    /**\n+     * Enum of all possible capabilities that a connector instance can expose.\n+     */\n+    public enum Capabitily {\n+\n+        SYNC_CREATE,\n+        ASYNC_CREATE,\n+        SYNC_UPDATE,\n+        ASYNC_UPDATE,\n+        SYNC_DELETE,\n+        ASYNC_DELETE,\n+        SEARCH,\n+        RESOLVE,\n+        ONDEMAND_SYNC,\n+        AUTO_SYNC\n+    }\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n@@ -50,6 +71,12 @@ public class ConnectorInstance extends AbstractBaseBean {\n      */\n     @Column(nullable = false)\n     private String version;\n+    /**\n+     * The set of capabilities supported by this connector instance.\n+     */\n+    @CollectionOfElements(targetElement = Capabitily.class)\n+    @Enumerated(EnumType.STRING)\n+    private Set<Capabitily> capabilities;\n     /**\n      * The main configuration for the connector instance.\n      * This is directly implemented by the Configuration bean class which\n@@ -66,6 +93,10 @@ public class ConnectorInstance extends AbstractBaseBean {\n     mappedBy = \"connector\")\n     private List<TargetResource> resources;\n \n+    public ConnectorInstance() {\n+        capabilities = new HashSet<Capabitily>();\n+    }\n+\n     public String getVersion() {\n         return version;\n     }\n@@ -126,4 +157,23 @@ public boolean removeResource(TargetResource resource) {\n         }\n         return this.resources.remove(resource);\n     }\n+\n+    public boolean addCapability(Capabitily capabitily) {\n+        return capabilities.add(capabitily);\n+    }\n+\n+    public boolean removeCapability(Capabitily capabitily) {\n+        return capabilities.remove(capabitily);\n+    }\n+\n+    public Set<Capabitily> getCapabilities() {\n+        return capabilities;\n+    }\n+\n+    public void setCapabilities(Set<Capabitily> capabilities) {\n+        capabilities.clear();\n+        if (capabilities != null) {\n+            this.capabilities.addAll(capabilities);\n+        }\n+    }\n }"},{"sha":"11fb5b63f0bff67487b1071363c1e9b7ba58a2e0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -23,6 +23,9 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n \n+/**\n+ * Spring-JPA implementation.\n+ */\n @Repository\n public class ConnectorInstanceDAOImpl extends AbstractDAOImpl\n         implements ConnectorInstanceDAO {\n@@ -45,9 +48,9 @@ public final List<ConnectorInstance> findAll() {\n     public final ConnectorInstance save(final ConnectorInstance connector) {\n         ConnectorInstance actual = entityManager.merge(connector);\n         try {\n-            ConnectorInstanceLoader.registerConnectorFacade(actual);\n+            ConnectorInstanceLoader.registerConnector(actual);\n         } catch (NotFoundException e) {\n-            LOG.error(\"While resgistering the connector facade for instance \"\n+            LOG.error(\"While registering the connector for instance \"\n                     + actual, e);\n         }\n \n@@ -58,6 +61,6 @@ public final ConnectorInstance save(final ConnectorInstance connector) {\n     public final void delete(final Long id) {\n         entityManager.remove(find(id));\n \n-        ConnectorInstanceLoader.removeConnectorFacade(id.toString());\n+        ConnectorInstanceLoader.removeConnector(id.toString());\n     }\n }"},{"sha":"3f709abb8e77b7cc69a27a1f2988d9f4d7f02fcd","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -33,7 +33,7 @@ public class SyncopeRoleDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public SyncopeRole find(String name, Long parentId) {\n+    public SyncopeRole find(final String name, final Long parentId) {\n         Query query = null;\n \n         if (parentId != null) {\n@@ -54,22 +54,22 @@ public SyncopeRole find(String name, Long parentId) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public SyncopeRole find(Long id) {\n+    public SyncopeRole find(final Long id) {\n         return entityManager.find(SyncopeRole.class, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<SyncopeRole> findChildren(Long roleId) {\n+    public List<SyncopeRole> findChildren(final Long roleId) {\n         Query query = entityManager.createQuery(\n                 \"SELECT r FROM SyncopeRole r WHERE \"\n                 + \"parent.id=:roleId\");\n         query.setParameter(\"roleId\", roleId);\n         return query.getResultList();\n     }\n \n-    private List<Long> getAncestors(SyncopeRole role,\n-            List<Long> ancestors) {\n+    private List<Long> getAncestors(final SyncopeRole role,\n+            final List<Long> ancestors) {\n \n         ancestors.add(role.getId());\n \n@@ -82,7 +82,7 @@ private List<Long> getAncestors(SyncopeRole role,\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<RoleAttribute> findInheritedAttributes(SyncopeRole role) {\n+    public List<RoleAttribute> findInheritedAttributes(final SyncopeRole role) {\n         if (role.getParent() == null) {\n             return Collections.EMPTY_LIST;\n         }\n@@ -114,7 +114,7 @@ public List<RoleAttribute> findInheritedAttributes(SyncopeRole role) {\n     @Override\n     @Transactional(readOnly = true)\n     public List<RoleDerivedAttribute> findInheritedDerivedAttributes(\n-            SyncopeRole role) {\n+            final SyncopeRole role) {\n \n         if (role.getParent() == null) {\n             return Collections.EMPTY_LIST;\n@@ -152,12 +152,12 @@ public List<SyncopeRole> findAll() {\n     }\n \n     @Override\n-    public SyncopeRole save(SyncopeRole syncopeRole) {\n+    public SyncopeRole save(final SyncopeRole syncopeRole) {\n         return entityManager.merge(syncopeRole);\n     }\n \n     @Override\n-    public void delete(Long id) {\n+    public void delete(final Long id) {\n         SyncopeRole role = find(id);\n         if (id == null) {\n             return;"},{"sha":"fd43eb45430218e57ef32e52acdcf86998f2ab36","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -0,0 +1,232 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.propagation;\n+\n+import java.util.Set;\n+import javassist.NotFoundException;\n+import org.identityconnectors.framework.api.APIConfiguration;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n+import org.identityconnectors.framework.api.ConnectorKey;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.client.to.PropertyTO;\n+import org.syncope.core.persistence.ConnectorInstanceLoader;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+\n+/**\n+ * Intercept calls to ConnectorFacade's methods and check if the correspondant\n+ * connector instance has been configured to allow every single operation:\n+ * if not, simply do nothig.\n+ */\n+public class ConnectorFacadeProxy {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            ConnectorFacadeProxy.class);\n+    /**\n+     * Connector facade wrapped instance.\n+     */\n+    private final ConnectorFacade connector;\n+    /**\n+     * Set of configure connecto instance capabilities.\n+     * @see org.syncope.core.persistence.beans.ConnectorInstance\n+     */\n+    private final Set<ConnectorInstance.Capabitily> capabitilies;\n+\n+    /**\n+     * Use the passed connector instance to build a ConnectorFacade that will\n+     * be used to make all wrapped calls.\n+     *\n+     * @param connectorInstance the connector instance configuration\n+     * @throws NotFoundException when not able to fetch all the required data\n+     * @see ConnectorKey\n+     * @see ConnectorInfo\n+     * @see APIConfiguration\n+     * @see ConfigurationProperties\n+     * @see ConnectorFacade\n+     */\n+    public ConnectorFacadeProxy(final ConnectorInstance connectorInstance)\n+            throws NotFoundException {\n+\n+        // specify a connector.\n+        ConnectorKey key = new ConnectorKey(\n+                connectorInstance.getBundleName(),\n+                connectorInstance.getVersion(),\n+                connectorInstance.getConnectorName());\n+\n+        if (key == null) {\n+            throw new NotFoundException(\"Connector Key\");\n+        }\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n+                    + \"\\nBundle version: \" + key.getBundleVersion()\n+                    + \"\\nBundle class: \" + key.getConnectorName());\n+        }\n+\n+        // get the specified connector.\n+        ConnectorInfo info =\n+                ConnectorInstanceLoader.getConnectorManager().findConnectorInfo(\n+                key);\n+\n+        if (info == null) {\n+            throw new NotFoundException(\"Connector Info\");\n+        }\n+\n+        // create default configuration\n+        APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n+\n+        if (apiConfig == null) {\n+            throw new NotFoundException(\"Default API configuration\");\n+        }\n+\n+        // retrieve the ConfigurationProperties.\n+        ConfigurationProperties properties =\n+                apiConfig.getConfigurationProperties();\n+\n+        if (properties == null) {\n+            throw new NotFoundException(\"Configuration properties\");\n+        }\n+\n+        // Print out what the properties are (not necessary)\n+        if (LOG.isDebugEnabled()) {\n+            for (String propName : properties.getPropertyNames()) {\n+                LOG.debug(\"\\nProperty Name: \"\n+                        + properties.getProperty(propName).getName()\n+                        + \"\\nProperty Type: \"\n+                        + properties.getProperty(propName).getType());\n+            }\n+        }\n+\n+        // Set all of the ConfigurationProperties needed by the connector.\n+        Set<PropertyTO> configuration =\n+                (Set<PropertyTO>) ConnectorInstanceLoader.buildFromXML(\n+                connectorInstance.getXmlConfiguration());\n+        for (PropertyTO property : configuration) {\n+            properties.setPropertyValue(\n+                    property.getKey(), property.getValue());\n+        }\n+\n+        // Use the ConnectorFacadeFactory's newInstance() method to get\n+        // a new connector.\n+        ConnectorFacade connector =\n+                ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n+\n+        if (connector == null) {\n+            throw new NotFoundException(\"Connector\");\n+        }\n+\n+        // Make sure we have set up the Configuration properly\n+        connector.validate();\n+        //connector.test(); //needs a target resource deployed\n+\n+        this.connector = connector;\n+        this.capabitilies = connectorInstance.getCapabilities();\n+    }\n+\n+    public Uid create(final PropagationManager.PropagationMode propagationMode,\n+            final ObjectClass oclass,\n+            final Set<Attribute> attrs,\n+            final OperationOptions options) {\n+\n+        Uid result = null;\n+\n+        if (propagationMode == PropagationManager.PropagationMode.SYNC\n+                ? capabitilies.contains(\n+                ConnectorInstance.Capabitily.SYNC_CREATE)\n+                : capabitilies.contains(\n+                ConnectorInstance.Capabitily.ASYNC_CREATE)) {\n+\n+            result = connector.create(oclass, attrs, options);\n+            if (result == null) {\n+                throw new IllegalStateException(\"Error creating user\");\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public Uid resolveUsername(final ObjectClass objectClass,\n+            final String username,\n+            final OperationOptions options) {\n+\n+        Uid result = null;\n+\n+        if (capabitilies.contains(ConnectorInstance.Capabitily.RESOLVE)) {\n+            result = connector.resolveUsername(objectClass, username, options);\n+        }\n+\n+        return result;\n+    }\n+\n+    public Uid update(final PropagationManager.PropagationMode propagationMode,\n+            final ObjectClass objclass,\n+            final Uid uid,\n+            final Set<Attribute> replaceAttributes,\n+            final OperationOptions options) {\n+\n+        Uid result = uid;\n+\n+        if (propagationMode == PropagationManager.PropagationMode.SYNC\n+                ? capabitilies.contains(\n+                ConnectorInstance.Capabitily.SYNC_UPDATE)\n+                : capabitilies.contains(\n+                ConnectorInstance.Capabitily.ASYNC_UPDATE)) {\n+\n+            result = connector.update(\n+                    objclass, uid, replaceAttributes, options);\n+            if (result == null) {\n+                throw new IllegalStateException(\"Error updating user\");\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public void delete(final PropagationManager.PropagationMode propagationMode,\n+            final ObjectClass objClass,\n+            final Uid uid,\n+            final OperationOptions options) {\n+\n+        if (propagationMode == PropagationManager.PropagationMode.SYNC\n+                ? capabitilies.contains(\n+                ConnectorInstance.Capabitily.SYNC_DELETE)\n+                : capabitilies.contains(\n+                ConnectorInstance.Capabitily.ASYNC_DELETE)) {\n+\n+            connector.delete(objClass, uid, options);\n+        }\n+    }\n+\n+    public void validate() {\n+        connector.validate();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ConnectorFacadeProxy{\"\n+                + \"connector=\" + connector\n+                + \"capabitilies=\" + capabitilies + '}';\n+    }\n+}"},{"sha":"f3cba0a8c281910233ca5fb4a198812ddbb6d2d3","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":33,"deletions":28,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -19,7 +19,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -30,8 +29,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n@@ -42,8 +39,6 @@\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.types.SchemaType;\n import org.syncope.types.SchemaValueType;\n \n@@ -52,6 +47,10 @@\n  */\n public class PropagationManager {\n \n+    public enum PropagationMode {\n+\n+        SYNC, ASYNC\n+    }\n     /**\n      * Logger.\n      */\n@@ -100,7 +99,7 @@ public Set<String> create(SyncopeUser user, Set<String> syncResourceNames)\n         }\n \n         ResourceOperations resourceOperations = new ResourceOperations();\n-        resourceOperations.set(Type.CREATE, resources);\n+        resourceOperations.set(ResourceOperations.Type.CREATE, resources);\n \n         return provision(user, resourceOperations, syncResourceNames);\n     }\n@@ -159,7 +158,7 @@ private Set<String> provision(SyncopeUser user,\n             syncResourceNames = Collections.EMPTY_SET;\n         }\n \n-        for (Type type : ResourceOperations.Type.values()) {\n+        for (ResourceOperations.Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : resourceOperations.get(type)) {\n                 if (syncResourceNames.contains(resource.getName())) {\n                     syncOperations.add(type, resource);\n@@ -175,8 +174,9 @@ private Set<String> provision(SyncopeUser user,\n                     + syncOperations);\n         }\n \n-        for (Type type : ResourceOperations.Type.values()) {\n-            for (TargetResource resource : syncOperations.get(type)) {\n+        for (ResourceOperations.Type resOpeType :\n+                ResourceOperations.Type.values()) {\n+            for (TargetResource resource : syncOperations.get(resOpeType)) {\n                 try {\n                     Map<String, Set<Attribute>> preparedAttributes =\n                             prepareAttributes(user, resource);\n@@ -185,7 +185,8 @@ private Set<String> provision(SyncopeUser user,\n                     Set<Attribute> attributes =\n                             manipulateSyncAttributes(\n                             preparedAttributes.values().iterator().next());\n-                    propagate(resource, type, accountId, attributes);\n+                    propagate(resource, resOpeType, PropagationMode.SYNC,\n+                            accountId, attributes);\n \n                     provisioned.add(resource.getName());\n                 } catch (Throwable t) {\n@@ -205,7 +206,7 @@ private Set<String> provision(SyncopeUser user,\n                     + asyncOperations);\n         }\n \n-        for (Type type : ResourceOperations.Type.values()) {\n+        for (ResourceOperations.Type type : ResourceOperations.Type.values()) {\n             for (TargetResource resource : asyncOperations.get(type)) {\n                 try {\n                     Map<String, Set<Attribute>> preparedAttributes =\n@@ -215,7 +216,8 @@ private Set<String> provision(SyncopeUser user,\n                     Set<Attribute> attributes =\n                             manipulateAsyncAttributes(\n                             preparedAttributes.values().iterator().next());\n-                    propagate(resource, type, accountId, attributes);\n+                    propagate(resource, type, PropagationMode.ASYNC,\n+                            accountId, attributes);\n \n                     provisioned.add(resource.getName());\n                 } catch (Throwable t) {\n@@ -425,13 +427,15 @@ protected Set<Attribute> manipulateAsyncAttributes(\n         return attributes;\n     }\n \n-    private void propagate(TargetResource resource, Type type,\n+    private void propagate(TargetResource resource,\n+            ResourceOperations.Type resourceOperationType,\n+            PropagationMode operationMode,\n             String accountId, Set<Attribute> attrs)\n             throws NoSuchBeanDefinitionException, IllegalStateException {\n \n         ConnectorInstance connectorInstance = resource.getConnector();\n \n-        ConnectorFacade connector = ConnectorInstanceLoader.getConnectorFacade(\n+        ConnectorFacadeProxy connector = ConnectorInstanceLoader.getConnector(\n                 connectorInstance.getId().toString());\n \n         if (connector == null) {\n@@ -444,39 +448,40 @@ private void propagate(TargetResource resource, Type type,\n \n         Uid userUid = null;\n \n-        switch (type) {\n+        switch (resourceOperationType) {\n             case CREATE:\n-                userUid = connector.create(ObjectClass.ACCOUNT, attrs, null);\n+                userUid = connector.create(operationMode,\n+                        ObjectClass.ACCOUNT, attrs, null);\n                 break;\n \n             case UPDATE:\n                 try {\n                     userUid = connector.resolveUsername(\n-                            ObjectClass.ACCOUNT, accountId, null);\n+                            ObjectClass.ACCOUNT,\n+                            accountId,\n+                            null);\n                 } catch (RuntimeException ignore) {\n-                    // ignore exception\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"To be ignored, \"\n+                                + \"when resolving username on connector\",\n+                                ignore);\n+                    }\n                 }\n \n                 if (userUid != null) {\n-                    userUid = connector.update(\n+                    userUid = connector.update(operationMode,\n                             ObjectClass.ACCOUNT, userUid, attrs, null);\n                 } else {\n-                    userUid = connector.create(\n+                    userUid = connector.create(operationMode,\n                             ObjectClass.ACCOUNT, attrs, null);\n                 }\n \n                 break;\n \n             case DELETE:\n-                connector.delete(ObjectClass.ACCOUNT, new Uid(accountId), null);\n+                connector.delete(operationMode,\n+                        ObjectClass.ACCOUNT, new Uid(accountId), null);\n                 break;\n         }\n-\n-        if (userUid == null && type != Type.DELETE) {\n-            LOG.error(\"Error creating / updating user onto resource \"\n-                    + resource);\n-\n-            throw new IllegalStateException(\"Error creating user\");\n-        }\n     }\n }"},{"sha":"522ee7cdbb407253326eaf89e93dbc0202748445","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":4,"deletions":18,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -24,12 +24,9 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnectorBundleTO;\n@@ -41,7 +38,7 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n \n @Controller\n@@ -166,21 +163,10 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/check/{connectorId}\")\n     public ModelAndView check(HttpServletResponse response,\n-            @PathVariable(\"connectorId\") Long connectorId) {\n+            @PathVariable(\"connectorId\") String connectorId) {\n \n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        DefaultListableBeanFactory beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Singleton in bean factory: \"\n-                    + beanFactory.getSingletonNames());\n-        }\n-\n-        ConnectorFacade connector = (ConnectorFacade) beanFactory.getBean(\n-                connectorId.toString());\n+        ConnectorFacadeProxy connector =\n+                ConnectorInstanceLoader.getConnector(connectorId);\n \n         ModelAndView mav = new ModelAndView();\n "},{"sha":"c368cf8e60b2fbf7d21d7169761c816bc24178f2","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":6,"deletions":42,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -14,12 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n-import java.beans.XMLDecoder;\n-import java.beans.XMLEncoder;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n import java.io.UnsupportedEncodingException;\n-import java.net.URLDecoder;\n import java.net.URLEncoder;\n import java.util.Set;\n import org.slf4j.Logger;\n@@ -33,6 +28,7 @@\n import org.syncope.client.to.PropertyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -86,7 +82,7 @@ public ConnectorInstance getConnectorInstance(\n                 connectorTO, connectorInstance, ignoreProperties);\n \n         connectorInstance.setXmlConfiguration(\n-                serializeToXML(\n+                ConnectorInstanceLoader.serializeToXML(\n                 connectorTO.getConfiguration()));\n \n         // Throw composite exception if there is at least one element set\n@@ -140,14 +136,15 @@ public ConnectorInstance updateConnectorInstance(\n                 || connectorTO.getConfiguration().isEmpty()) {\n \n             connectorInstance.setXmlConfiguration(\n-                    serializeToXML(\n+                    ConnectorInstanceLoader.serializeToXML(\n                     connectorTO.getConfiguration()));\n         }\n \n         try {\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(URLEncoder.encode(\n-                        serializeToXML(connectorTO.getConfiguration()),\n+                        ConnectorInstanceLoader.serializeToXML(\n+                        connectorTO.getConfiguration()),\n                         \"UTF-8\"));\n             }\n             // Throw composite exception if there is at least one element set\n@@ -180,44 +177,11 @@ public ConnectorInstanceTO getConnectorInstanceTO(\n                 connectorInstance, connectorInstanceTO, ignoreProperties);\n \n         connectorInstanceTO.setConfiguration(\n-                (Set<PropertyTO>) buildFromXML(\n+                (Set<PropertyTO>) ConnectorInstanceLoader.buildFromXML(\n                 connectorInstance.getXmlConfiguration()));\n \n         connectorInstanceTO.setId(connectorInstance.getId());\n \n         return connectorInstanceTO;\n     }\n-\n-    public static String serializeToXML(Object obj) {\n-        try {\n-            ByteArrayOutputStream tokenContentOS = new ByteArrayOutputStream();\n-            XMLEncoder encoder = new XMLEncoder(tokenContentOS);\n-            encoder.writeObject(obj);\n-            encoder.flush();\n-            encoder.close();\n-\n-            String res = tokenContentOS.toString();\n-\n-            return URLEncoder.encode(res, \"UTF-8\");\n-        } catch (Throwable t) {\n-            LOG.error(\"Exception during connector serialization\", t);\n-            return null;\n-        }\n-    }\n-\n-    public static Object buildFromXML(String xml) {\n-        try {\n-            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n-                    URLDecoder.decode(xml, \"UTF-8\").getBytes());\n-\n-            XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n-            Object object = decoder.readObject();\n-            decoder.close();\n-\n-            return object;\n-        } catch (Throwable t) {\n-            LOG.error(\"Exception during connector deserialization\", t);\n-            return null;\n-        }\n-    }\n }"},{"sha":"ef7b7260109643c422e55c786cf9d17727a6c27c","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -22,9 +22,9 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.PropertyTO;\n+import org.syncope.core.persistence.ConnectorInstanceLoader;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n-import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n \n @Transactional\n@@ -80,7 +80,7 @@ public final void save() throws ClassNotFoundException {\n         conf.add(servicename);\n \n         // serialize configuration\n-        String xmlconf = ConnectorInstanceDataBinder.serializeToXML(conf);\n+        String xmlconf = ConnectorInstanceLoader.serializeToXML(conf);\n \n         assertNotNull(\"xml configuration string is null\", xmlconf);\n \n@@ -110,7 +110,7 @@ public final void save() throws ClassNotFoundException {\n \n         assertNotNull(\"configuration not found\", xmlConfiguration);\n \n-        conf = (Set<PropertyTO>) ConnectorInstanceDataBinder.buildFromXML(\n+        conf = (Set<PropertyTO>) ConnectorInstanceLoader.buildFromXML(\n                 xmlConfiguration);\n \n         assertNotNull(\"configuration retrieving failed\", conf);"},{"sha":"c88293358c6b79a011dfa2d5a27beba50f1f399f","filename":"core/src/test/java/org/syncope/core/test/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -27,6 +27,7 @@\n import org.syncope.client.to.ConnectorInstanceTOs;\n import org.syncope.client.to.PropertyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector;\n \n public class ConnectorInstanceTestITCase extends AbstractTestITCase {\n \n@@ -48,8 +49,7 @@ public void create() {\n         connectorTO.setVersion(\"0.1-SNAPSHOT\");\n \n         // set connector name\n-        connectorTO.setConnectorName(\n-                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\");\n+        connectorTO.setConnectorName(WebServiceConnector.class.getSimpleName());\n \n         // set bundle name\n         connectorTO.setBundleName(\n@@ -144,8 +144,7 @@ public void update() {\n         connectorTO.setVersion(\"0.1-SNAPSHOT\");\n \n         // set connector name\n-        connectorTO.setConnectorName(\n-                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\");\n+        connectorTO.setConnectorName(WebServiceConnector.class.getSimpleName());\n \n         // set bundle name\n         connectorTO.setBundleName("},{"sha":"0408c382dbe4808f491c6baa9ec3a5e45214ef40","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dabdc3afca66f2a4c93fef02027a3ca72204c09c/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=dabdc3afca66f2a4c93fef02027a3ca72204c09c","patch":"@@ -135,18 +135,39 @@\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n                        version=\"0.1-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"ASYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"ASYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"ASYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"RESOLVE\"/>\n \n     <ConnectorInstance id=\"101\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n                        version=\"0.1-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"ASYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"ASYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"ASYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"RESOLVE\"/>\n \n     <ConnectorInstance id=\"102\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n                        version=\"0.1-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"RESOLVE\"/>\n \n     <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>\n     <TargetResource name=\"ws-target-resource-2\" connector_id=\"100\" forceMandatoryConstraint=\"T\"/>"}]}