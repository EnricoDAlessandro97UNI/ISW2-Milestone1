{"sha":"26f7ba0cdac007fc34ae82fab0d1d928963b38cb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI2ZjdiYTBjZGFjMDA3ZmMzNGFlODJmYWIwZDFkOTI4OTYzYjM4Y2I=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-07T16:30:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-07T16:30:17Z"},"message":"[SYNCOPE-262] Switching to PropertyDescriptor for accessing Policy definition fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1429884 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d693d051d15f8664dcc44f75b3ac46744c5228e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7d693d051d15f8664dcc44f75b3ac46744c5228e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/26f7ba0cdac007fc34ae82fab0d1d928963b38cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/26f7ba0cdac007fc34ae82fab0d1d928963b38cb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/26f7ba0cdac007fc34ae82fab0d1d928963b38cb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4b2368930e89d1085b92367683fd2f81f15a1314","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4b2368930e89d1085b92367683fd2f81f15a1314","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4b2368930e89d1085b92367683fd2f81f15a1314"}],"stats":{"total":100,"additions":45,"deletions":55},"files":[{"sha":"b28b4c55b9ac8c0c78da39181daea5d6dc8d3e3e","filename":"console/src/main/java/org/apache/syncope/console/pages/PolicyModalPage.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -103,6 +103,7 @@ public PolicyModalPage(final ModalWindow window, final T policyTO) {\n         form.add(new PolicyBeanPanel(\"panel\", policy));\n \n         final IndicatingAjaxButton submit = new IndicatingAjaxButton(\"apply\", new ResourceModel(\"apply\")) {\n+\n             private static final long serialVersionUID = -958724007591692537L;\n \n             @Override\n@@ -121,21 +122,21 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 } catch (Exception e) {\n                     LOG.error(\"While creating policy\", e);\n \n-                    error(getString(\"operation_error\"));\n+                    error(getString(\"error\") + \":\" + e.getMessage());\n                     target.add(getPage().get(\"feedback\"));\n                 }\n             }\n \n             @Override\n             protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n-\n                 target.add(getPage().get(\"feedback\"));\n             }\n         };\n \n         form.add(submit);\n \n         final IndicatingAjaxButton cancel = new IndicatingAjaxButton(\"cancel\", new ResourceModel(\"cancel\")) {\n+\n             private static final long serialVersionUID = -958724007591692537L;\n \n             @Override\n@@ -188,23 +189,26 @@ private void setPolicySpecification(final PolicyTO policyTO, final AbstractPolic\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 if (!(specification instanceof AccountPolicySpec)) {\n-                    throw new ClassCastException(\"policy is type Account, but spec is not: \" + specification.getClass().getName());\n+                    throw new ClassCastException(\"policy is type Account, but spec is not: \" + specification.getClass().\n+                            getName());\n                 }\n                 ((AccountPolicyTO) policyTO).setSpecification((AccountPolicySpec) specification);\n                 break;\n \n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 if (!(specification instanceof PasswordPolicySpec)) {\n-                    throw new ClassCastException(\"policy is type Password, but spec is not: \" + specification.getClass().getName());\n+                    throw new ClassCastException(\"policy is type Password, but spec is not: \"\n+                            + specification.getClass().getName());\n                 }\n                 ((PasswordPolicyTO) policyTO).setSpecification((PasswordPolicySpec) specification);\n                 break;\n \n             case GLOBAL_SYNC:\n             case SYNC:\n                 if (!(specification instanceof SyncPolicySpec)) {\n-                    throw new ClassCastException(\"policy is type Sync, but spec is not: \" + specification.getClass().getName());\n+                    throw new ClassCastException(\"policy is type Sync, but spec is not: \" + specification.getClass().\n+                            getName());\n                 }\n                 ((SyncPolicyTO) policyTO).setSpecification((SyncPolicySpec) specification);\n "},{"sha":"de0fbce91be97f67a341587d5a6d7f9e86e92298","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":23,"deletions":36,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n+import java.beans.PropertyDescriptor;\n import java.io.Serializable;\n import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n import org.apache.syncope.annotation.SchemaList;\n-import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -53,16 +52,16 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.util.StringUtils;\n+import org.springframework.beans.BeanUtils;\n \n public class PolicyBeanPanel extends Panel {\n \n+    private static final long serialVersionUID = -3035998190456928143L;\n+\n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(PolicyBeanPanel.class);\n-\n-    private static final long serialVersionUID = -3035998190456928143L;\n+    private static final Logger LOG = LoggerFactory.getLogger(PolicyBeanPanel.class);\n \n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n@@ -77,9 +76,6 @@ protected List<String> load() {\n         }\n     };\n \n-    @SpringBean\n-    protected XMLRolesReader xmlRolesReader;\n-\n     public PolicyBeanPanel(final String id, final AbstractPolicySpec policy) {\n         super(id);\n \n@@ -108,16 +104,13 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n \n                 final FieldWrapper field = item.getModelObject();\n \n+                final PropertyDescriptor propDesc = BeanUtils.getPropertyDescriptor(policy.getClass(), field.getName());\n+\n                 item.add(new Label(\"label\", new ResourceModel(field.getName())));\n \n                 final AbstractFieldPanel component;\n-                Method classMethod;\n-\n                 try {\n                     if (field.getType().equals(ConflictResolutionAction.class)) {\n-                        classMethod = policy.getClass().getMethod(\"get\" + StringUtils.capitalize(field.getName()),\n-                                new Class[]{});\n-\n                         component = new AjaxDropDownChoicePanel(\"field\", field.getName(), new PropertyModel(policy,\n                                 field.getName()));\n \n@@ -127,7 +120,7 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                         item.add(component);\n \n                         item.add(getActivationControl(component,\n-                                (Enum<?>) classMethod.invoke(policy, new Object[]{}) != null,\n+                                (Enum<?>) propDesc.getReadMethod().invoke(policy, new Object[]{}) != null,\n                                 ConflictResolutionAction.IGNORE, ConflictResolutionAction.IGNORE));\n \n                     } else if (field.getType().equals(boolean.class) || field.getType().equals(Boolean.class)) {\n@@ -136,10 +129,7 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n \n                         item.add(new Label(\"field\", new Model(null)));\n \n-                    } else if (field.getType().equals(List.class) || field.getType().equals(Set.class)) {\n-                        classMethod = policy.getClass().getMethod(\"get\" + StringUtils.capitalize(field.getName()),\n-                                new Class[]{});\n-\n+                    } else if (Collection.class.isAssignableFrom(field.getType())) {\n                         if (field.getSchemaList() != null) {\n                             final List<String> values = schemas.getObject();\n \n@@ -153,38 +143,35 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n \n                             item.add(component);\n \n-                            item.add(getActivationControl(component, !((List) classMethod.invoke(policy,\n-                                    new Object[]{})).isEmpty(), new ArrayList<String>(), new ArrayList<String>()));\n+                            item.add(getActivationControl(component,\n+                                    !((Collection) propDesc.getReadMethod().invoke(policy, new Object[]{})).isEmpty(),\n+                                    new ArrayList<String>(), new ArrayList<String>()));\n                         } else {\n-                            final FieldPanel panel = new AjaxTextFieldPanel(\"panel\", field.getName(), new Model<String>(null));\n-\n+                            final FieldPanel panel = new AjaxTextFieldPanel(\"panel\", field.getName(),\n+                                    new Model<String>(null));\n                             panel.setRequired(true);\n \n-                            component = new MultiValueSelectorPanel<String>(\"field\", new PropertyModel(policy, field.\n-                                    getName()), panel);\n+                            component = new MultiValueSelectorPanel<String>(\"field\",\n+                                    new PropertyModel(policy, field.getName()), panel);\n \n                             item.add(component);\n \n                             final List<String> reinitializedValue = new ArrayList<String>();\n \n                             reinitializedValue.add(\"\");\n \n-                            item.add(getActivationControl(component, !((List<String>) classMethod.invoke(policy,\n-                                    new Object[]{})).isEmpty(), (Serializable) new ArrayList<String>(),\n-                                    (Serializable) reinitializedValue));\n+                            item.add(getActivationControl(component,\n+                                    !((Collection) propDesc.getReadMethod().invoke(policy, new Object[]{})).isEmpty(),\n+                                    new ArrayList<String>(), (Serializable) reinitializedValue));\n                         }\n                     } else if (field.getType().equals(int.class) || field.getType().equals(Integer.class)) {\n-\n-                        classMethod = policy.getClass().getMethod(\"get\" + StringUtils.capitalize(field.getName()),\n-                                new Class[]{});\n-\n-                        component = new AjaxTextFieldPanel(\"field\", field.getName(), new PropertyModel(policy, field.\n-                                getName()));\n+                        component = new AjaxTextFieldPanel(\"field\", field.getName(),\n+                                new PropertyModel(policy, field.getName()));\n \n                         item.add(component);\n \n                         item.add(getActivationControl(component,\n-                                (Integer) classMethod.invoke(policy, new Object[]{}) > 0, 0, 0));\n+                                (Integer) propDesc.getReadMethod().invoke(policy, new Object[]{}) > 0, 0, 0));\n                     } else {\n                         item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new Model()));\n                         item.add(new Label(\"field\", new Model(null)));"},{"sha":"ae5d9fbda99cbb3206b3888dfd96909fb71fc97a","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -40,7 +40,6 @@ public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n         T policy = null;\n \n         try {\n-\n             switch (type) {\n                 case GLOBAL_ACCOUNT:\n                     try {\n@@ -72,7 +71,6 @@ public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n                 default:\n                     throw new Exception(\"Invalid policy type\");\n             }\n-\n         } catch (Exception ignore) {\n             LOG.error(\"Invalid policy type\", ignore);\n         }"},{"sha":"ee62a7cdc49c2323c88db1fbe2d7cf6007003f92","filename":"console/src/main/resources/org/apache/syncope/console/pages/PolicyModalPage.properties","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -70,17 +70,18 @@ permittedLoginRetries=Maximum number of subsequent failed logins\n #-----------------------------\n # Sync policy specification properties\n #-----------------------------\n-alternativeSearchAttrs=Alternative attributes for local search\n+uAltSearchSchemas=Alternative attributes for local search (users)\n conflictResolutionAction= Conflict resolution action\n #-----------------------------\n \n #-----------------------------\n # Policy Type\n #-----------------------------\n ACCOUNT=Account Policy\n-GLOBAL_ACCOUNT=Account Global Policy\n+GLOBAL_ACCOUNT=Global Account Policy\n PASSWORD=Password Policy\n-GLOBAL_PASSWORD=Password Global Policy\n+GLOBAL_PASSWORD=Global Password Policy\n SYNC=Synchronization Policy\n-GLOBAL_SYNC=Synchronization Global Policy\n+GLOBAL_SYNC=Global Synchronization Policy\n #-----------------------------\n+rAltSearchSchemas=Alternative attributes for local search (roles)"},{"sha":"8dcc63d12bbc10b0039b42dedf688311e251ae19","filename":"console/src/main/resources/org/apache/syncope/console/pages/PolicyModalPage_it.properties","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -68,7 +68,7 @@ permittedLoginRetries=Numero massimo di login consecutivi falliti\n #-----------------------------\n # Sync policy specification properties\n #-----------------------------\n-alternativeSearchAttrs=Attributi alternativi per ricerca locale\n+uAltSearchSchemas=Attributi alternativi per ricerca locale (utenti)\n conflictResolutionAction= Azione di risoluzione dei conflitti\n #-----------------------------\n \n@@ -84,3 +84,5 @@ GLOBAL_SYNC=Policy globale di sincronizzazione\n #-----------------------------\n nonAlphanumericRequired=Carattere non alfanumerico richiesto\n alphanumericRequired=Carattere alfanumerico richiesto\n+rAltSearchSchemas=Attributi alternativi per ricerca locale (ruolii)\n+ttributi alternativi per ricerca locale (ruolii)"},{"sha":"2b13a8a13c59e9842188e2cd9db300a968864337","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Policy.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -24,8 +24,8 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.core.util.XMLSerializer;\n import org.apache.syncope.core.persistence.validation.entity.PolicyCheck;\n+import org.apache.syncope.core.util.XMLSerializer;\n import org.apache.syncope.types.AbstractPolicySpec;\n import org.apache.syncope.types.PolicyType;\n \n@@ -65,11 +65,10 @@ public PolicyType getType() {\n     }\n \n     public <T extends AbstractPolicySpec> T getSpecification() {\n-        return XMLSerializer.<T> deserialize(specification);\n+        return XMLSerializer.<T>deserialize(specification);\n     }\n \n     public <T extends AbstractPolicySpec> void setSpecification(final T policy) {\n-\n-        specification = XMLSerializer.serialize(policy);\n+        specification = XMLSerializer.<T>serialize(policy);\n     }\n }"},{"sha":"0ccbc41c01f46996a1c4c5ed7c07b1d5d9c07d63","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26f7ba0cdac007fc34ae82fab0d1d928963b38cb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=26f7ba0cdac007fc34ae82fab0d1d928963b38cb","patch":"@@ -247,18 +247,17 @@ public PolicyTO read(@PathVariable(\"id\") final Long id)\n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{id}\")\n     public PolicyTO delete(@PathVariable(\"id\") final Long id) throws NotFoundException {\n-\n-        LOG.debug(\"Delete policy\");\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n+\n         PolicyTO policyToDelete = binder.getPolicyTO(policy);\n         policyDAO.delete(id);\n \n         auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,\n                 \"Successfully deleted policy: \" + id);\n-        \n+\n         return policyToDelete;\n     }\n }"}]}