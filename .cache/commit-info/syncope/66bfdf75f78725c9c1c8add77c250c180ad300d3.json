{"sha":"66bfdf75f78725c9c1c8add77c250c180ad300d3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2YmZkZjc1Zjc4NzI1YzljMWM4YWRkNzdjMjUwYzE4MGFkMzAwZDM=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-07-17T10:57:46Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-07-17T10:57:46Z"},"message":"SYNCOPE-112 #comment modified connector bean creation + some selenium tests fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1362443 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5866a5f25ce6101bb149208091e19b2c938f6866","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5866a5f25ce6101bb149208091e19b2c938f6866"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/66bfdf75f78725c9c1c8add77c250c180ad300d3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66bfdf75f78725c9c1c8add77c250c180ad300d3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/66bfdf75f78725c9c1c8add77c250c180ad300d3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66bfdf75f78725c9c1c8add77c250c180ad300d3/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"2596621a12928f0553c70408afa7eea0dc1108ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2596621a12928f0553c70408afa7eea0dc1108ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2596621a12928f0553c70408afa7eea0dc1108ef"}],"stats":{"total":382,"additions":253,"deletions":129},"files":[{"sha":"4fbdbfa1886fc925a77925b39f130e0d03c25620","filename":"client/src/main/java/org/apache/syncope/client/util/ConnConfPropUtils.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2596621a12928f0553c70408afa7eea0dc1108ef/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FConnConfPropUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2596621a12928f0553c70408afa7eea0dc1108ef/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FConnConfPropUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FConnConfPropUtils.java?ref=2596621a12928f0553c70408afa7eea0dc1108ef","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.util;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.syncope.types.ConnConfProperty;\n-\n-/**\n- * Utility class for manipulating connector properties.\n- *\n- */\n-public final class ConnConfPropUtils {\n-\n-    private ConnConfPropUtils() {\n-    }\n-\n-    public static Set<ConnConfProperty> joinConnInstanceProperties(\n-            final Map<String, ConnConfProperty> connectorProp, final Map<String, ConnConfProperty> resourceProp) {\n-\n-        Set<ConnConfProperty> result = new HashSet<ConnConfProperty>();\n-        result.addAll(connectorProp.values());\n-        result.addAll(resourceProp.values());\n-\n-        return result;\n-    }\n-\n-    public static Map<String, ConnConfProperty> getConnConfPropertyMap(final Set<ConnConfProperty> properties) {\n-        Map<String, ConnConfProperty> result;\n-        if (properties == null) {\n-            result = Collections.EMPTY_MAP;\n-        } else {\n-            result = new HashMap<String, ConnConfProperty>();\n-            for (Iterator<ConnConfProperty> item = properties.iterator(); item.hasNext();) {\n-                ConnConfProperty property = item.next();\n-                result.put(property.getSchema().getName(), property);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"77320a193eefa3716d012363fcbceb56bd53b49a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -41,9 +41,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.util.ConnConfPropUtils;\n import org.apache.syncope.console.pages.BaseModalPage;\n import org.apache.syncope.console.pages.ResourceModalPage.ResourceEvent;\n import org.apache.syncope.console.pages.panels.ResourceDetailsPanel.DetailsModEvent;\n@@ -116,13 +114,7 @@ public ResourceConnConfPanel(final String id, final ResourceTO resourceTO, final\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n \n-                ConnInstanceTO connectorTO = connRestClient.read(resourceTO.getConnectorId());\n-\n-                connectorTO.setConfiguration(ConnConfPropUtils.joinConnInstanceProperties(connectorTO.\n-                        getConfigurationMap(),\n-                        ConnConfPropUtils.getConnConfPropertyMap(resourceTO.getConnConfProperties())));\n-\n-                if (connRestClient.check(connectorTO).booleanValue()) {\n+                if (connRestClient.check(resourceTO).booleanValue()) {\n                     info(getString(\"success_connection\"));\n                 } else {\n                     error(getString(\"error_connection\"));"},{"sha":"95c3f3e28a77a1112cd72e870b06177969fdc011","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -28,6 +28,7 @@\n import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n+import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.types.ConnConfProperty;\n@@ -144,7 +145,7 @@ private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> prope\n     }\n \n     /**\n-     * Test connection.\n+     * Test connector connection.\n      *\n      * @param connectorTO connector.\n      * @return Connection status.\n@@ -165,6 +166,23 @@ public Boolean check(final ConnInstanceTO connectorTO) {\n         }\n     }\n \n+    /**\n+     * Test resource connection.\n+     *\n+     * @param connectorTO connector.\n+     * @return Connection status.\n+     */\n+    public Boolean check(final ResourceTO resourceTO) {\n+\n+        try {\n+            return SyncopeSession.get().getRestTemplate().postForObject(\n+                    baseURL + \"resource/check.json\", resourceTO, Boolean.class);\n+        } catch (Exception e) {\n+            LOG.error(\"Connector not found {}\", resourceTO.getConnectorId(), e);\n+            return false;\n+        }\n+    }\n+\n     public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n         List<String> schemaNames = null;\n "},{"sha":"4456eed4a127889122e33face671c744387d41b6","filename":"console/src/test/java/org/apache/syncope/console/ConnInstanceTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -32,7 +32,7 @@ public void browseCreateModal() {\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\" + \"\\\"//input[@name='version:textField']\\\");\", \"30000\");\n \n-        selenium.select(\"//select[@name='bundle:dropDownChoiceField']\", \"label=org.connid.bundles.soap 1.2\");\n+        selenium.select(\"//select[@name='bundle:dropDownChoiceField']\", \"label=org.connid.bundles.soap 1.2.2\");\n \n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n         selenium.click(\"//form/div[@id='tabs']/ul/li[1]/a/span\");\n@@ -55,7 +55,7 @@ public void browseEditModal() {\n \n         assertEquals(\"ConnInstance103\", selenium.getAttribute(\"//input[@name='displayName:textField']/@value\"));\n \n-        assertEquals(\"org.connid.bundles.soap#1.2\", selenium\n+        assertEquals(\"org.connid.bundles.soap#1.2.2\", selenium\n                 .getSelectedValue(\"//select[@name='bundle:dropDownChoiceField']\"));\n \n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");"},{"sha":"4396408bfea9fb3d992b5edefd7ea61c45e80190","filename":"console/src/test/java/org/apache/syncope/console/RoleTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FRoleTestITCase.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -168,7 +168,7 @@ public void deleteRole() {\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//div[@id='navigationPane']\\\");\", \"30000\");\n \n-        selenium.click(\"//div[3]/span/div/div/table[12]/tbody/tr/td[6]/table/tbody/tr/td[2]/a\");\n+        selenium.click(\"//div[3]/span/div/div/table[12]/tbody/tr/td[5]/table/tbody/tr/td[2]/a\");\n \n         selenium.waitForCondition(\"selenium.isElementPresent(\\\"//div/p/span[2]/span/a[3]\\\");\", \"30000\");\n "},{"sha":"14743d14eab13dae3c270b0f0689c93b57d1dd82","filename":"core/src/main/java/org/apache/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":16,"deletions":31,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.init;\n \n-import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n import javassist.NotFoundException;\n@@ -27,6 +26,7 @@\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n+import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.ConnBundleManager;\n import org.apache.syncope.types.ConnConfProperty;\n@@ -54,6 +54,9 @@ public class ConnInstanceLoader {\n     @Autowired\n     private ConnBundleManager connBundleManager;\n \n+    @Autowired\n+    private ResourceDataBinder resourceDataBinder;\n+\n     private DefaultListableBeanFactory getBeanFactory() {\n         ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n \n@@ -71,7 +74,8 @@ private String getBeanName(final ExternalResource resource) {\n      * @return live connector bran for given resource\n      * @throws BeansException in case the connector is not registered in the context\n      */\n-    public ConnectorFacadeProxy getConnector(final ExternalResource resource) throws BeansException, NotFoundException {\n+    public ConnectorFacadeProxy getConnector(final ExternalResource resource)\n+            throws BeansException, NotFoundException {\n \n         // Try to re-create connector bean from underlying resource\n         // (useful for managing failover scenarios)\n@@ -82,32 +86,11 @@ public ConnectorFacadeProxy getConnector(final ExternalResource resource) throws\n         return (ConnectorFacadeProxy) getBeanFactory().getBean(getBeanName(resource));\n     }\n \n-    public ConnectorFacadeProxy createConnectorBean(final ExternalResource resource) throws NotFoundException {\n-\n-        final Set<ConnConfProperty> configuration = new HashSet<ConnConfProperty>();\n-\n-        // to be used to control managed prop (needed by overridden mechanism)\n-        final Set<String> propertyNames = new HashSet<String>();\n-\n-        // get overridden connector configuration properties\n-        for (ConnConfProperty prop : resource.getConfiguration()) {\n-            if (!propertyNames.contains(prop.getSchema().getName())) {\n-                configuration.add(prop);\n-                propertyNames.add(prop.getSchema().getName());\n-            }\n-        }\n-\n-        final ConnInstance connInstance = resource.getConnector();\n-\n-        // get connector configuration properties\n-        for (ConnConfProperty prop : connInstance.getConfiguration()) {\n-            if (!propertyNames.contains(prop.getSchema().getName())) {\n-                configuration.add(prop);\n-                propertyNames.add(prop.getSchema().getName());\n-            }\n-        }\n+    public ConnectorFacadeProxy createConnectorBean(final ExternalResource resource)\n+            throws NotFoundException {\n \n-        return createConnectorBean(connInstance, configuration);\n+        final ConnInstance connInstanceClone = resourceDataBinder.getConnInstance(resource);\n+        return createConnectorBean(resource.getConnector(), connInstanceClone.getConfiguration());\n     }\n \n     /**\n@@ -120,7 +103,8 @@ public ConnectorFacadeProxy createConnectorBean(final ExternalResource resource)\n      * @throws NotFoundException when not able to fetch all the required data.\n      */\n     public ConnectorFacadeProxy createConnectorBean(final ConnInstance connInstance,\n-            final Set<ConnConfProperty> configuration) throws NotFoundException {\n+            final Set<ConnConfProperty> configuration)\n+            throws NotFoundException {\n \n         final ConnInstance connInstanceClone = (ConnInstance) SerializationUtils.clone(connInstance);\n \n@@ -129,7 +113,8 @@ public ConnectorFacadeProxy createConnectorBean(final ConnInstance connInstance,\n         return new ConnectorFacadeProxy(connInstanceClone, connBundleManager);\n     }\n \n-    public void registerConnector(final ExternalResource resource) throws NotFoundException {\n+    public void registerConnector(final ExternalResource resource)\n+            throws NotFoundException {\n \n         final ConnectorFacadeProxy connector = createConnectorBean(resource);\n         LOG.debug(\"Connector to be registered: {}\", connector);\n@@ -160,8 +145,8 @@ public void load() {\n                 LOG.info(\"Registering resource-connector pair {}-{}\", resource, resource.getConnector());\n                 registerConnector(resource);\n             } catch (Exception e) {\n-                LOG.error(\"While registering resource-connector pair {}-{}\", new Object[] { resource,\n-                        resource.getConnector(), e });\n+                LOG.error(\"While registering resource-connector pair {}-{}\", new Object[]{resource,\n+                            resource.getConnector(), e});\n             }\n         }\n "},{"sha":"04ff0d3e4de396b2e431c98a4fa29b96e0db2700","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -27,22 +27,6 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n-import org.identityconnectors.common.l10n.CurrentLocale;\n-import org.identityconnectors.framework.api.ConfigurationProperties;\n-import org.identityconnectors.framework.api.ConnectorInfo;\n-import org.identityconnectors.framework.api.ConnectorInfoManager;\n-import org.identityconnectors.framework.api.ConnectorKey;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -63,7 +47,23 @@\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.identityconnectors.common.l10n.CurrentLocale;\n+import org.identityconnectors.framework.api.ConfigurationProperties;\n+import org.identityconnectors.framework.api.ConnectorInfo;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n \n @Controller\n @RequestMapping(\"/connector\")"},{"sha":"dcc0fd71bf82e9777d2e6a0574595eb5c8dadbe9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":41,"deletions":2,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -51,11 +51,15 @@\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n+import org.apache.syncope.core.rest.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n+import org.apache.syncope.core.util.ConnBundleManager;\n import org.apache.syncope.core.util.ConnObjectUtil;\n+import org.apache.syncope.types.AuditElements;\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditElements.ResourceSubCategory;\n import org.apache.syncope.types.AuditElements.Result;\n+import org.springframework.web.servlet.ModelAndView;\n \n @Controller\n @RequestMapping(\"/resource\")\n@@ -76,6 +80,9 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ResourceDataBinder binder;\n \n+    @Autowired\n+    private ConnInstanceDataBinder connInstancebinder;\n+\n     /**\n      * ConnectorObject util.\n      */\n@@ -85,6 +92,9 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ConnInstanceLoader connLoader;\n \n+    @Autowired\n+    private ConnBundleManager bundleManager;\n+\n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO)\n@@ -131,14 +141,14 @@ public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n-        \n+\n         ResourceTO resourceToDelete = binder.getResourceTO(resource);\n \n         auditManager.audit(Category.resource, ResourceSubCategory.delete, Result.success,\n                 \"Successfully deleted resource: \" + resource.getName());\n \n         resourceDAO.delete(resourceName);\n-        \n+\n         return resourceToDelete;\n     }\n \n@@ -241,4 +251,33 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n \n         return connObjectUtil.getConnObjectTO(connectorObject);\n     }\n+\n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/check\")\n+    @Transactional(readOnly = true)\n+    public ModelAndView check(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO)\n+            throws SyncopeClientCompositeErrorException, NotFoundException {\n+\n+        final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n+\n+        final ConnectorFacadeProxy connector =\n+                new ConnectorFacadeProxy(connInstance, bundleManager);\n+\n+        boolean result;\n+        try {\n+            connector.test();\n+            result = true;\n+\n+            auditManager.audit(Category.connector, AuditElements.ConnectorSubCategory.check, Result.success,\n+                    \"Successfully checked connector: \" + resourceTO);\n+        } catch (Exception ex) {\n+            auditManager.audit(Category.connector, AuditElements.ConnectorSubCategory.check, Result.failure,\n+                    \"Unsuccessful check for connector: \" + resourceTO, ex);\n+\n+            LOG.error(\"Test connection failure {}\", ex);\n+            result = false;\n+        }\n+\n+        return new ModelAndView().addObject(result);\n+    }\n }"},{"sha":"ec8ff3c2a4098e46fc9320e2128f3d2b6842d172","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":66,"deletions":4,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -20,9 +20,12 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import javassist.NotFoundException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -54,18 +57,22 @@ public class ResourceDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] MAPPING_IGNORE_PROPERTIES = { \"id\", \"resource\", \"syncToken\" };\n+    private static final String[] MAPPING_IGNORE_PROPERTIES = {\"id\", \"resource\", \"syncToken\"};\n \n     @Autowired\n-    private ConnInstanceDAO connectorInstanceDAO;\n+    private ConnInstanceDAO connInstanceDAO;\n \n     @Autowired\n     private JexlUtil jexlUtil;\n \n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    public ExternalResource create(final ResourceTO resourceTO) throws SyncopeClientCompositeErrorException {\n+    @Autowired\n+    private ConnInstanceDataBinder connInstancebinder;\n+\n+    public ExternalResource create(final ResourceTO resourceTO)\n+            throws SyncopeClientCompositeErrorException {\n \n         return update(new ExternalResource(), resourceTO);\n     }\n@@ -80,7 +87,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setName(resourceTO.getName());\n \n         if (resourceTO.getConnectorId() != null) {\n-            ConnInstance connector = connectorInstanceDAO.find(resourceTO.getConnectorId());\n+            ConnInstance connector = connInstanceDAO.find(resourceTO.getConnectorId());\n             resource.setConnector(connector);\n \n             if (!connector.getResources().contains(resource)) {\n@@ -312,4 +319,59 @@ public SchemaMappingTO getSchemaMappingTO(SchemaMapping schemaMapping) {\n \n         return schemaMappingTO;\n     }\n+\n+    public ConnInstance getConnInstance(ExternalResource resource)\n+            throws NotFoundException {\n+\n+        final ConnInstance connInstanceClone =\n+                (ConnInstance) org.apache.commons.lang.SerializationUtils.clone(resource.getConnector());\n+\n+        return getConnInstance(connInstanceClone, resource.getConfiguration());\n+    }\n+\n+    public ConnInstance getConnInstance(final ResourceTO resourceTO)\n+            throws NotFoundException {\n+        ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnectorId());\n+\n+        final ConnInstance connInstanceClone =\n+                (ConnInstance) org.apache.commons.lang.SerializationUtils.clone(connInstance);\n+\n+        if (connInstance == null) {\n+            throw new NotFoundException(\"Connector '\" + resourceTO.getConnectorId() + \"'\");\n+        }\n+\n+        return getConnInstance(connInstanceClone, resourceTO.getConnConfProperties());\n+    }\n+\n+    private ConnInstance getConnInstance(\n+            final ConnInstance connInstance, final Set<ConnConfProperty> overridden)\n+            throws NotFoundException {\n+\n+        final Set<ConnConfProperty> configuration = new HashSet<ConnConfProperty>();\n+        final Map<String, ConnConfProperty> overridable = new HashMap<String, ConnConfProperty>();\n+\n+        // add not overridable properties\n+        for (ConnConfProperty prop : connInstance.getConfiguration()) {\n+            if (prop.isOverridable()) {\n+                overridable.put(prop.getSchema().getName(), prop);\n+            } else {\n+                configuration.add(prop);\n+            }\n+        }\n+\n+        // add overridden properties\n+        for (ConnConfProperty prop : overridden) {\n+            if (overridable.containsKey(prop.getSchema().getName()) && !prop.getValues().isEmpty()) {\n+                configuration.add(prop);\n+                overridable.remove(prop.getSchema().getName());\n+            }\n+        }\n+\n+        // add overridable properties not overridden\n+        configuration.addAll(overridable.values());\n+\n+        connInstance.setConfiguration(configuration);\n+\n+        return connInstance;\n+    }\n }"},{"sha":"c58f934157689833248dc710a94b0e0b39d4ab35","filename":"core/src/test/java/org/apache/syncope/core/init/ConnInstanceLoaderTest.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.AbstractTest;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.ConnectorFacadeProxy;\n+import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.ConnBundleManager;\n \n@@ -42,11 +43,15 @@ public class ConnInstanceLoaderTest extends AbstractTest {\n     @Autowired\n     private ConnBundleManager connBundleManager;\n \n+    @Autowired\n+    private ResourceDataBinder resourceDataBinder;\n+\n     @Before\n     public void before() {\n         cil = new ConnInstanceLoader();\n         ReflectionTestUtils.setField(cil, \"resourceDAO\", resourceDAO);\n         ReflectionTestUtils.setField(cil, \"connBundleManager\", connBundleManager);\n+        ReflectionTestUtils.setField(cil, \"resourceDataBinder\", resourceDataBinder);\n \n         // Remove any other connector instance bean set up by\n         // standard ConnInstanceLoader.load()"},{"sha":"fb77ef872b0b5e8555b9e8e36a7bb4957a835fb7","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bfdf75f78725c9c1c8add77c250c180ad300d3/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=66bfdf75f78725c9c1c8add77c250c180ad300d3","patch":"@@ -39,10 +39,12 @@\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.to.ResourceTO;\n+import org.apache.syncope.client.to.SchemaMappingTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.ConnectorCapability;\n+import org.apache.syncope.types.IntMappingType;\n \n public class ConnInstanceTestITCase extends AbstractTest {\n \n@@ -535,4 +537,88 @@ public void getSchemaNames() {\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE112() {\n+\n+        // ----------------------------------------\n+        // Create a new connector\n+        // ----------------------------------------\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+        // set connector version\n+        connectorTO.setVersion(connidSoapVersion);\n+\n+        // set connector name\n+        connectorTO.setConnectorName(WebServiceConnector.class.getName());\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\"org.connid.bundles.soap\");\n+\n+        // set display name\n+        connectorTO.setDisplayName(\"WSSoap\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        ConnConfPropSchema userSchema = new ConnConfPropSchema();\n+        userSchema.setName(\"endpoint\");\n+        userSchema.setType(String.class.getName());\n+        userSchema.setRequired(true);\n+        ConnConfProperty endpoint = new ConnConfProperty();\n+        endpoint.setSchema(userSchema);\n+        endpoint.setValues(Collections.singletonList(\"http://localhost:9080/does_not_work\"));\n+        endpoint.setOverridable(true);\n+\n+        ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n+        keyColumnSchema.setName(\"servicename\");\n+        keyColumnSchema.setType(String.class.getName());\n+        keyColumnSchema.setRequired(true);\n+        ConnConfProperty servicename = new ConnConfProperty();\n+        servicename.setSchema(keyColumnSchema);\n+        servicename.setValues(\n+                Collections.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n+        servicename.setOverridable(false);\n+\n+        conf.add(endpoint);\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.setConfiguration(conf);\n+\n+        assertFalse(restTemplate.postForObject(BASE_URL + \"connector/check.json\", connectorTO, Boolean.class));\n+\n+        connectorTO = restTemplate.postForObject(BASE_URL + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n+        assertNotNull(connectorTO);\n+        // ----------------------------------------\n+\n+        // ----------------------------------------\n+        // create a resourceTO\n+        // ----------------------------------------\n+        String resourceName = \"checkForPropOverriding\";\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setName(resourceName);\n+        resourceTO.setConnectorId(connectorTO.getId());\n+\n+        conf = new HashSet<ConnConfProperty>();\n+        endpoint.setValues(Collections.singletonList(\"http://localhost:9080/wssample/services/provisioning\"));\n+        conf.add(endpoint);\n+\n+        resourceTO.setConnectorConfigurationProperties(conf);\n+\n+        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n+        schemaMappingTO.setExtAttrName(\"uid\");\n+        schemaMappingTO.setIntAttrName(\"userId\");\n+        schemaMappingTO.setIntMappingType(IntMappingType.UserSchema);\n+        schemaMappingTO.setAccountid(true);\n+        resourceTO.addMapping(schemaMappingTO);\n+        // ----------------------------------------\n+\n+        // ----------------------------------------\n+        // Check connection without saving the resource ....\n+        // ----------------------------------------\n+        assertTrue(restTemplate.postForObject(BASE_URL + \"resource/check.json\", resourceTO, Boolean.class));\n+        // ----------------------------------------\n+    }\n }"}]}