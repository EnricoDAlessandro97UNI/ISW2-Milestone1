{"sha":"5119be8c2506d5aaa0965dd085a01756fbd3c91a","node_id":"C_kwDOJfYA1toAKDUxMTliZThjMjUwNmQ1YWFhMDk2NWRkMDg1YTAxNzU2ZmJkM2M5MWE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-09-01T12:04:04Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-09-01T12:04:04Z"},"message":"[SYNCOPE-1694] Refactor ImplementationManager to allow either per-class and per-instance caches (#372)","tree":{"sha":"f6dbeec940f80fe39a74f7a7493faabdc86765a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f6dbeec940f80fe39a74f7a7493faabdc86765a6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5119be8c2506d5aaa0965dd085a01756fbd3c91a","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEJ+0CRBK7hj4Ov3rIwAA2GMIAIXVVWUcocta6/1Osrrk0dxz\nlKuQeBQm50KX6iEI5ryvlFFffDOtq6RgL8PUWkBoTXtVit0Y2CP2mlfRMB4LZKSc\nTvFxNv4XM9N3ZQs2mQK8w5hZttET5ggfVN1YXrYEJnA6gC4JT98M8eHL8fib/T57\nHV4iD1HNjBY6KFSgCJMVhx9t41JvBG1Nxd+bMUjVWFMZZSEosYXjuNNjU/8O9oNL\noQE6A7P9XA+LMt3Ll6j2z6iZfGMm2JzptGdCCgTuyrs1qGh5Zio61WsrIclpzVLP\nPKMmfODU6gH7WXFBfMGeXsthDpQP76iinCRVUYQ5COlG27xrITIjYqROnF3NaVQ=\n=srGo\n-----END PGP SIGNATURE-----\n","payload":"tree f6dbeec940f80fe39a74f7a7493faabdc86765a6\nparent 4014601f040b4a48c46585e4259d968bce554ec8\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1662033844 +0200\ncommitter GitHub <noreply@github.com> 1662033844 +0200\n\n[SYNCOPE-1694] Refactor ImplementationManager to allow either per-class and per-instance caches (#372)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5119be8c2506d5aaa0965dd085a01756fbd3c91a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5119be8c2506d5aaa0965dd085a01756fbd3c91a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5119be8c2506d5aaa0965dd085a01756fbd3c91a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"4014601f040b4a48c46585e4259d968bce554ec8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4014601f040b4a48c46585e4259d968bce554ec8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4014601f040b4a48c46585e4259d968bce554ec8"}],"stats":{"total":1604,"additions":993,"deletions":611},"files":[{"sha":"70c9f4170a004d41b2aca337a9827be7af3dd46d","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/types/ConnectorCapability.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FConnectorCapability.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FConnectorCapability.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FConnectorCapability.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -26,6 +26,7 @@ public enum ConnectorCapability {\n     AUTHENTICATE,\n     CREATE,\n     UPDATE,\n+    UPDATE_DELTA,\n     DELETE,\n     SEARCH,\n     SYNC;"},{"sha":"1a21f400f69c2adcf49537f5577ce9f20bf3b0c1","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -20,6 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyCR;\n@@ -52,6 +54,8 @@\n \n     protected final TemplateUtils templateUtils;\n \n+    protected final Map<String, LogicActions> perContextActions = new ConcurrentHashMap<>();\n+\n     public AbstractAnyLogic(\n             final RealmDAO realmDAO,\n             final AnyTypeDAO anyTypeDAO,\n@@ -63,17 +67,20 @@ public AbstractAnyLogic(\n     }\n \n     protected List<LogicActions> getActions(final Realm realm) {\n-        List<LogicActions> actions = new ArrayList<>();\n+        List<LogicActions> result = new ArrayList<>();\n \n         realm.getActions().forEach(impl -> {\n             try {\n-                actions.add(ImplementationManager.build(impl));\n+                result.add(ImplementationManager.build(\n+                        impl,\n+                        () -> perContextActions.get(impl.getKey()),\n+                        instance -> perContextActions.put(impl.getKey(), instance)));\n             } catch (Exception e) {\n                 LOG.warn(\"While building {}\", impl, e);\n             }\n         });\n \n-        return actions;\n+        return result;\n     }\n \n     @SuppressWarnings(\"unchecked\")"},{"sha":"a9e319466767b5f6698b94cf829419858491baf4","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -225,7 +225,7 @@ public void load() {\n                     classNames.get(IdMImplementationType.PUSH_ACTIONS).add(bd.getBeanClassName());\n                 }\n \n-                if (Validator.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                if (PlainAttrValueValidator.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(IdRepoImplementationType.VALIDATOR).add(bd.getBeanClassName());\n                 }\n "},{"sha":"f686162dae05740dbc9c62c063019383e0e8c5d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/PlainAttrValidationManager.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FPlainAttrValidationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FPlainAttrValidationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FPlainAttrValidationManager.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -21,9 +21,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n-public interface Validator {\n+public interface PlainAttrValidationManager {\n \n-    void setSchema(PlainSchema schema);\n-\n-    void validate(String value, PlainAttrValue attrValue);\n+    void validate(PlainSchema schema, String value, PlainAttrValue attrValue);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/Validator.java"},{"sha":"44d1f21161d71305c1ffb6d669bf2a890988f555","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/PlainAttrValueValidator.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FPlainAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FPlainAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FPlainAttrValueValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.attrvalue.validation;\n+\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+\n+public interface PlainAttrValueValidator {\n+\n+    void validate(PlainSchema schema, String value, PlainAttrValue attrValue);\n+}"},{"sha":"0ceb427afe092bb09897021a693cd95e92d36ee7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n \n public interface AnyUtils {\n@@ -58,5 +59,5 @@ public interface AnyUtils {\n \n     Set<ExternalResource> getAllResources(Any<?> any);\n \n-    void addAttr(String key, PlainSchema schema, String value);\n+    void addAttr(PlainAttrValidationManager validator, String key, PlainSchema schema, String value);\n }"},{"sha":"15376c301620c56db2f052b429c6e6e23849f6d4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n \n public interface PlainAttr<A extends Any<?>> extends Entity {\n \n@@ -30,9 +31,9 @@\n \n     void setSchema(PlainSchema schema);\n \n-    void add(String value, AnyUtils anyUtils);\n+    void add(PlainAttrValidationManager validator, String value, AnyUtils anyUtils);\n \n-    void add(String value, PlainAttrValue attrValue);\n+    void add(PlainAttrValidationManager validator, String value, PlainAttrValue attrValue);\n \n     PlainAttrUniqueValue getUniqueValue();\n \n@@ -41,5 +42,4 @@\n     List<? extends PlainAttrValue> getValues();\n \n     List<String> getValuesAsStrings();\n-\n }"},{"sha":"b638bb10513ac53fc806cba44031f5f92ac08bc1","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/MyJPAJSONPersistenceContext.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n@@ -66,7 +67,8 @@ public AnySearchDAO anySearchDAO(\n             final @Lazy AnyObjectDAO anyObjectDAO,\n             final @Lazy PlainSchemaDAO schemaDAO,\n             final @Lazy EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n \n         return new MyJPAJSONAnySearchDAO(\n                 realmDAO,\n@@ -76,7 +78,8 @@ public AnySearchDAO anySearchDAO(\n                 anyObjectDAO,\n                 schemaDAO,\n                 entityFactory,\n-                anyUtilsFactory);\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     @ConditionalOnMissingBean(name = \"myJPAJSONAuditConfDAO\")"},{"sha":"551b2c859df464237361be9536a285597a8ccf2d","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/PGJPAJSONPersistenceContext.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n@@ -64,19 +65,21 @@ public AnySearchDAO anySearchDAO(\n             final @Lazy UserDAO userDAO,\n             final @Lazy GroupDAO groupDAO,\n             final @Lazy AnyObjectDAO anyObjectDAO,\n-            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy PlainSchemaDAO schemaDAO,\n             final @Lazy EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n \n         return new PGJPAJSONAnySearchDAO(\n                 realmDAO,\n                 dynRealmDAO,\n                 userDAO,\n                 groupDAO,\n                 anyObjectDAO,\n-                plainSchemaDAO,\n+                schemaDAO,\n                 entityFactory,\n-                anyUtilsFactory);\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     @ConditionalOnMissingBean(name = \"pgJPAJSONAuditConfDAO\")"},{"sha":"a76fe028049838aa3e91ef3c8e097c8f406297ef","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -25,6 +25,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -54,9 +55,19 @@ public MyJPAJSONAnySearchDAO(\n             final AnyObjectDAO anyObjectDAO,\n             final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n-\n-        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, schemaDAO, entityFactory, anyUtilsFactory);\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n+\n+        super(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     @Override"},{"sha":"c9a209d8223439f4fd934bc42dcfd5e4fb031bda","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -88,11 +89,21 @@ public PGJPAJSONAnySearchDAO(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final AnyObjectDAO anyObjectDAO,\n-            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n-\n-        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, plainSchemaDAO, entityFactory, anyUtilsFactory);\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n+\n+        super(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     @Override"},{"sha":"0d93175844c072a5c11110faed7484c70024a0dc","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAJSONAttributableValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -29,7 +29,7 @@ public class JPAJSONAttributableValidator extends AbstractValidator<JPAJSONAttri\n     public boolean isValid(final JSONAttributable<?> entity, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        PlainAttrValidator attrValidator = new PlainAttrValidator();\n+        JPAPlainAttrValidator attrValidator = new JPAPlainAttrValidator();\n         PlainAttrValueValidator attrValueValidator = new PlainAttrValueValidator();\n \n         AtomicReference<Boolean> isValid = new AtomicReference<>(Boolean.TRUE);"},{"sha":"b959f52e724616f91996558e0b859de66a849ac9","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -545,7 +545,7 @@ under the License.\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n                 jsonConf='[{\"schema\":{\"name\":\"host\",\"type\":\"java.lang.String\",\"required\":true,\"order\":1,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"localhost\"],\"overridable\":false},{\"schema\":{\"name\":\"port\",\"type\":\"int\",\"required\":false,\"order\":2,\"confidential\":false,\"defaultValues\":[389]},\"values\":[1389],\"overridable\":false},{\"schema\":{\"name\":\"ssl\",\"type\":\"boolean\",\"required\":false,\"order\":3,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"failover\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":4,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"principal\",\"type\":\"java.lang.String\",\"required\":false,\"order\":5,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=admin,ou=system\"],\"overridable\":false},{\"schema\":{\"name\":\"credentials\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":6,\"confidential\":true,\"defaultValues\":[]},\"values\":[\"secret\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContexts\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":true},{\"schema\":{\"name\":\"passwordAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":8,\"confidential\":false,\"defaultValues\":[\"userPassword\"]},\"values\":[\"userpassword\"],\"overridable\":false},{\"schema\":{\"name\":\"accountObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":9,\"confidential\":false,\"defaultValues\":[\"top\",\"person\",\"organizationalPerson\",\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\"],\"overridable\":false},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":10,\"confidential\":false,\"defaultValues\":[\"uid\",\"cn\"]},\"values\":[\"uid\"],\"overridable\":false},{\"schema\":{\"name\":\"accountSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":11,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=*\"],\"overridable\":false},{\"schema\":{\"name\":\"groupObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":12,\"confidential\":false,\"defaultValues\":[\"top\",\"groupOfUniqueNames\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":13,\"confidential\":false,\"defaultValues\":[\"cn\"]},\"values\":[\"cn\"],\"overridable\":false},{\"schema\":{\"name\":\"groupMemberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":14,\"confidential\":false,\"defaultValues\":[\"uniqueMember\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":15,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":16,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"addPrincipalToNewGroups\",\"type\":\"boolean\",\"required\":false,\"order\":17,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"type\":\"java.lang.String\",\"required\":false,\"order\":18,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"SHA\"],\"overridable\":false},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"type\":\"boolean\",\"required\":false,\"order\":19,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"useVlvControls\",\"type\":\"boolean\",\"required\":false,\"order\":20,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"vlvSortAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"uid\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"uidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":22,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"gidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"readSchema\",\"type\":\"boolean\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":24,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":false},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":25,\"confidential\":false,\"defaultValues\":[\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"],\"overridable\":false},{\"schema\":{\"name\":\"attributesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":26,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":27,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":28,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"changeLogBlockSize\",\"type\":\"int\",\"required\":false,\"order\":29,\"confidential\":false,\"defaultValues\":[100]},\"values\":[100],\"overridable\":false},{\"schema\":{\"name\":\"changeNumberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":30,\"confidential\":false,\"defaultValues\":[\"changeNumber\"]},\"values\":[\"changeNumber\"],\"overridable\":false},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"type\":\"boolean\",\"required\":false,\"order\":31,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"type\":\"boolean\",\"required\":false,\"order\":32,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"synchronizePasswords\",\"type\":\"boolean\",\"required\":false,\"order\":33,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"type\":\"java.lang.String\",\"required\":false,\"order\":34,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":35,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":36,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"statusManagementClass\",\"type\":\"java.lang.String\",\"required\":false,\"order\":37,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"],\"overridable\":false},{\"schema\":{\"name\":\"retrievePasswordsWithSearch\",\"type\":\"boolean\",\"required\":false,\"order\":38,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"dnAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":39,\"confidential\":false,\"defaultValues\":[\"entryDN\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":40,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"readTimeout\",\"type\":\"long\",\"required\":false,\"order\":41,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"connectTimeout\",\"type\":\"long\",\"required\":false,\"order\":42,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false}]'\n-                capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\"]'/>\n+                capabilities='[\"CREATE\",\"UPDATE\",\"UPDATE_DELTA\",\"DELETE\",\"SEARCH\"]'/>\n   \n   <ConnInstance id=\"a28abd9b-9f4a-4ef6-a7a8-d19ad2a8f29d\" displayName=\"H2-test2\"\n                 adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n@@ -570,7 +570,7 @@ under the License.\n                 connectorName=\"net.tirasa.connid.bundles.db.scriptedsql.ScriptedSQLConnector\"\n                 displayName=\"Scripted SQL\" version=\"${connid.database.version}\"\n                 jsonConf='[{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScriptFileName&quot;,&quot;displayName&quot;:&quot;updateScriptFileName&quot;,&quot;helpMessage&quot;:&quot;updateScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/UpdateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScript&quot;,&quot;displayName&quot;:&quot;testScript&quot;,&quot;helpMessage&quot;:&quot;testScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;host&quot;,&quot;displayName&quot;:&quot;Host&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Host&lt;/b&gt;&lt;br/&gt;Enter the name of the host where the database is running.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:2,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;localhost&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;port&quot;,&quot;displayName&quot;:&quot;Port&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;TCP Port&lt;/b&gt;&lt;br/&gt;Enter the port number the database server is listening on.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:3,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;3306&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;database&quot;,&quot;displayName&quot;:&quot;Database&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Database&lt;/b&gt;&lt;br/&gt;Enter the name of the database on the database server that contains the table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:6,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScript&quot;,&quot;displayName&quot;:&quot;createScript&quot;,&quot;helpMessage&quot;:&quot;createScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcUrlTemplate&quot;,&quot;displayName&quot;:&quot;JDBC Connection URL&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Connection URL&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver Connection URL.&lt;br/&gt; Oracle template is jdbc:oracle:thin:@[host]:[port(1521)]:[DB].&lt;br/&gt;  MySQL template is jdbc:mysql://[host]:[port(3306)]/[db], for more info, read the JDBC driver documentation.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:11,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;jdbc:mysql://%h:%p/%d&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.url}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jndiProperties&quot;,&quot;displayName&quot;:&quot;Initial JNDI Properties&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Initial JNDI Properties&lt;/b&gt;&lt;br/&gt;Could be empty or enter the JDBC JNDI Initial context factory, context provider in a format: key = value.&quot;,&quot;type&quot;:&quot;[Ljava.lang.String;&quot;,&quot;required&quot;:false,&quot;order&quot;:21,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;enableEmptyString&quot;,&quot;displayName&quot;:&quot;Enable writing empty string&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Enable writing empty string&lt;/b&gt;&lt;br/&gt;Select to enable support for writing an empty strings, instead of a NULL value, in character based columns defined as not-null in the table schema. This option does not influence the way strings are written for Oracle based tables. By default empty strings are written as a NULL value.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:12,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;allNative&quot;,&quot;displayName&quot;:&quot;All native&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;All native&lt;/b&gt;&lt;br/&gt;Select to retrieve all data type of the columns in a native format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:16,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;password&quot;,&quot;displayName&quot;:&quot;User Password&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User Password&lt;/b&gt;&lt;br/&gt;Enter a user account that has permission to access accounts table.&quot;,&quot;type&quot;:&quot;org.identityconnectors.common.security.GuardedString&quot;,&quot;required&quot;:false,&quot;order&quot;:5,&quot;confidential&quot;:true,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.password}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;validConnectionQuery&quot;,&quot;displayName&quot;:&quot;Validate Connection Query&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Validate Connection Query&lt;/b&gt;&lt;br/&gt;There can be specified the check connection alive query. If empty, default implementation will test it using the switch on/off the autocommit. Some select 1 from dummy table could be more efficient.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:17,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;reloadScriptOnExecution&quot;,&quot;displayName&quot;:&quot;reloadScriptOnExecution&quot;,&quot;helpMessage&quot;:&quot;reloadScriptOnExecution&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;true&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;schemaScriptFileName&quot;,&quot;displayName&quot;:&quot;schemaScriptFileName&quot;,&quot;helpMessage&quot;:&quot;schemaScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SchemaScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcDriver&quot;,&quot;displayName&quot;:&quot;JDBC Driver&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Driver&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver class name. Oracle is oracle.jdbc.driver.OracleDriver. MySQL is org.gjt.mm.mysql.Driver.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:10,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;com.mysql.jdbc.Driver&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.driver}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScriptFileName&quot;,&quot;displayName&quot;:&quot;testScriptFileName&quot;,&quot;helpMessage&quot;:&quot;testScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/TestScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;quoting&quot;,&quot;displayName&quot;:&quot;Name Quoting&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Name Quoting&lt;/b&gt;&lt;br/&gt;Select whether database column names for this resource should be quoted, and the quoting characters. By default, database column names are not quoted (None). For other selections (Single, Double, Back, or Brackets), column names will appear between single quotes, double quotes, back quotes, or brackets in the SQL generated to access the database.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:-1,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScriptFileName&quot;,&quot;displayName&quot;:&quot;createScriptFileName&quot;,&quot;helpMessage&quot;:&quot;createScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/CreateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;clearTextPasswordToScript&quot;,&quot;displayName&quot;:&quot;clearTextPasswordToScript&quot;,&quot;helpMessage&quot;:&quot;clearTextPasswordToScript&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;nativeTimestamps&quot;,&quot;displayName&quot;:&quot;Native Timestamps&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Native Timestamps&lt;/b&gt;&lt;br/&gt;Select to retrieve Timestamp data type of the columns in java.sql.Timestamp format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:15,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScript&quot;,&quot;displayName&quot;:&quot;syncScript&quot;,&quot;helpMessage&quot;:&quot;syncScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;autoCommit&quot;,&quot;displayName&quot;:&quot;autoCommit&quot;,&quot;helpMessage&quot;:&quot;autoCommit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;scriptingLanguage&quot;,&quot;displayName&quot;:&quot;scriptingLanguage&quot;,&quot;helpMessage&quot;:&quot;scriptingLanguage&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;GROOVY&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;GROOVY&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;datasource&quot;,&quot;displayName&quot;:&quot;Datasource Path&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Data Source Name/Path&lt;/b&gt;&lt;br/&gt;Enter the JDBC Data Source Name/Path to connect to the Oracle server. If specified, connector will only try to connect using Datasource and ignore other resource parameters specified.&lt;br/&gt;the example value is: &lt;CODE&gt;jdbc/SampleDataSourceName&lt;/CODE&gt;&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:20,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScript&quot;,&quot;displayName&quot;:&quot;deleteScript&quot;,&quot;helpMessage&quot;:&quot;deleteScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;rethrowAllSQLExceptions&quot;,&quot;displayName&quot;:&quot;Rethrow all SQLExceptions&quot;,&quot;helpMessage&quot;:&quot;If this is not checked, SQL statements which throw SQLExceptions with a 0 ErrorCode will be have the exception caught and suppressed. Check it to have exceptions with 0 ErrorCodes rethrown.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:14,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScriptFileName&quot;,&quot;displayName&quot;:&quot;syncScriptFileName&quot;,&quot;helpMessage&quot;:&quot;syncScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SyncScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScript&quot;,&quot;displayName&quot;:&quot;updateScript&quot;,&quot;helpMessage&quot;:&quot;updateScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;user&quot;,&quot;displayName&quot;:&quot;User&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User&lt;/b&gt;&lt;br/&gt;Enter the name of the mandatory Database user with permission to account table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:4,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.username}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScriptFileName&quot;,&quot;displayName&quot;:&quot;deleteScriptFileName&quot;,&quot;helpMessage&quot;:&quot;deleteScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/DeleteScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScriptFileName&quot;,&quot;displayName&quot;:&quot;searchScriptFileName&quot;,&quot;helpMessage&quot;:&quot;searchScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SearchScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScript&quot;,&quot;displayName&quot;:&quot;searchScript&quot;,&quot;helpMessage&quot;:&quot;searchScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]}]'\n-                capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\",\"SYNC\"]'/>\n+                capabilities='[\"CREATE\",\"UPDATE\",\"UPDATE_DELTA\",\"DELETE\",\"SEARCH\",\"SYNC\"]'/>\n   \n   <ConnInstance id=\"44c02549-19c3-483c-8025-4919c3283c37\" bundlename=\"net.tirasa.connid.bundles.rest\"\n                 adminRealm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\""},{"sha":"cf955242302768d9c5fb956c5fdab008c19501aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -79,6 +80,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.persistence.jpa.attrvalue.validation.DefaultPlainAttrValidationManager;\n import org.apache.syncope.core.persistence.jpa.content.KeymasterConfParamLoader;\n import org.apache.syncope.core.persistence.jpa.content.XMLContentExporter;\n import org.apache.syncope.core.persistence.jpa.content.XMLContentLoader;\n@@ -174,6 +176,12 @@ public Validator localValidatorFactoryBean() {\n         return new LocalValidatorFactoryBean();\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public PlainAttrValidationManager plainAttrValidationManager() {\n+        return new DefaultPlainAttrValidationManager();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public CommonEntityManagerFactoryConf commonEMFConf(final PersistenceProperties persistenceProperties) {\n@@ -321,9 +329,17 @@ public AnyMatchDAO anyMatchDAO(\n             final @Lazy AnyObjectDAO anyObjectDAO,\n             final RealmDAO realmDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n-            final AnyUtilsFactory anyUtilsFactory) {\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n \n-        return new JPAAnyMatchDAO(userDAO, groupDAO, anyObjectDAO, realmDAO, plainSchemaDAO, anyUtilsFactory);\n+        return new JPAAnyMatchDAO(\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                realmDAO,\n+                plainSchemaDAO,\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     @ConditionalOnMissingBean\n@@ -355,7 +371,8 @@ public AnySearchDAO anySearchDAO(\n             final @Lazy AnyObjectDAO anyObjectDAO,\n             final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n \n         return new JPAAnySearchDAO(\n                 realmDAO,\n@@ -365,7 +382,8 @@ public AnySearchDAO anySearchDAO(\n                 anyObjectDAO,\n                 schemaDAO,\n                 entityFactory,\n-                anyUtilsFactory);\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"4bcecbb353addec5425f4ad3839f5ba8c7539e6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/AbstractValidator.java","status":"modified","additions":5,"deletions":12,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -19,30 +19,23 @@\n package org.apache.syncope.core.persistence.jpa.attrvalue.validation;\n \n import java.io.Serializable;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public abstract class AbstractValidator implements Validator, Serializable {\n+public abstract class AbstractValidator implements PlainAttrValueValidator, Serializable {\n \n     private static final long serialVersionUID = -5439345166669502493L;\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n-    protected PlainSchema schema;\n-\n-    @Override\n-    public void setSchema(final PlainSchema schema) {\n-        this.schema = schema;\n-    }\n-\n     @Override\n-    public void validate(final String value, final PlainAttrValue attrValue) {\n+    public void validate(final PlainSchema schema, final String value, final PlainAttrValue attrValue) {\n         attrValue.parseValue(schema, value);\n-        doValidate(attrValue);\n+        doValidate(schema, attrValue);\n     }\n \n-    protected abstract void doValidate(PlainAttrValue attrValue);\n+    protected abstract void doValidate(PlainSchema schema, PlainAttrValue attrValue);\n }"},{"sha":"887eefc3dfebcbbb9ccf30a0ac2d09de7184d4b9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/AlwaysTrueValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -20,13 +20,14 @@\n \n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class AlwaysTrueValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 872107345555773183L;\n \n     @Override\n-    protected void doValidate(final PlainAttrValue attrValue) {\n+    protected void doValidate(final PlainSchema schema, final PlainAttrValue attrValue) {\n         Boolean value = attrValue.getValue();\n         if (!value) {\n             throw new InvalidPlainAttrValueException(\"This attribute must be set to \\\"true\\\"\");"},{"sha":"13840dabbe8c7baa5fad7ce7a7897157e693cff4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BasicValidator.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -22,13 +22,14 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class BasicValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = -2606728447694223607L;\n \n     @Override\n-    protected void doValidate(final PlainAttrValue attrValue) {\n+    protected void doValidate(final PlainSchema schema, final PlainAttrValue attrValue) {\n         if (AttrSchemaType.Enum == schema.getType()) {\n             final String[] enumeration = schema.getEnumerationValues().split(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n             final String value = attrValue.getStringValue();\n@@ -42,7 +43,7 @@ protected void doValidate(final PlainAttrValue attrValue) {\n \n             if (!found) {\n                 throw new InvalidPlainAttrValueException(\n-                    '\\'' + value + \"' is not one of: \" + schema.getEnumerationValues());\n+                        '\\'' + value + \"' is not one of: \" + schema.getEnumerationValues());\n             }\n         }\n     }"},{"sha":"bc7d2fdc0005da85f50f6131b5596cc263d58db6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BinaryValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -23,6 +23,7 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.tika.Tika;\n \n public class BinaryValidator extends AbstractValidator {\n@@ -38,7 +39,7 @@ public class BinaryValidator extends AbstractValidator {\n     }\n \n     @Override\n-    protected void doValidate(final PlainAttrValue attrValue) {\n+    protected void doValidate(final PlainSchema schema, final PlainAttrValue attrValue) {\n         // check Binary schemas MIME Type mismatches\n         if (attrValue.getBinaryValue() != null) {\n             byte[] binaryValue = attrValue.getBinaryValue();"},{"sha":"7cc027488eaa447635e70da4b7838e13578ec3cc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/DefaultPlainAttrValidationManager.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FDefaultPlainAttrValidationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FDefaultPlainAttrValidationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FDefaultPlainAttrValidationManager.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.attrvalue.validation;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DefaultPlainAttrValidationManager implements PlainAttrValidationManager {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(DefaultPlainAttrValidationManager.class);\n+\n+    protected static final PlainAttrValueValidator BASIC_VALIDATOR = new BasicValidator();\n+\n+    protected final Map<String, PlainAttrValueValidator> perContextValidators = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public void validate(final PlainSchema schema, final String value, final PlainAttrValue attrValue) {\n+        PlainAttrValueValidator validator = null;\n+\n+        if (schema.getValidator() != null) {\n+            try {\n+                validator = ImplementationManager.build(\n+                        schema.getValidator(),\n+                        () -> perContextValidators.get(schema.getValidator().getKey()),\n+                        instance -> perContextValidators.put(schema.getValidator().getKey(), instance));\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", schema.getValidator(), e);\n+            }\n+        }\n+\n+        if (validator == null) {\n+            validator = BASIC_VALIDATOR;\n+        }\n+\n+        validator.validate(schema, value, attrValue);\n+    }\n+}"},{"sha":"3fa84390fadd7579dc873f352d2494249b580b69","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/EmailAddressValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -22,13 +22,14 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class EmailAddressValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 792457177290331518L;\n \n     @Override\n-    protected void doValidate(final PlainAttrValue attrValue) {\n+    protected void doValidate(final PlainSchema schema, final PlainAttrValue attrValue) {\n         Matcher matcher = Entity.EMAIL_PATTERN.matcher(attrValue.<CharSequence>getValue());\n         if (!matcher.matches()) {\n             throw new InvalidPlainAttrValueException(\"\\\"\" + attrValue.getValue() + \"\\\" is not a valid email address\");"},{"sha":"acb8f6b9b0acd2e3e519c7a66613c8d7f5608c79","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/URLValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FURLValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FURLValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FURLValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -22,13 +22,14 @@\n import java.net.URL;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class URLValidator extends AbstractValidator {\n \n     private static final long serialVersionUID = 792457177290331518L;\n \n     @Override\n-    protected void doValidate(final PlainAttrValue attrValue) {\n+    protected void doValidate(final PlainSchema schema, final PlainAttrValue attrValue) {\n         try {\n             new URL(attrValue.getStringValue());\n         } catch (MalformedURLException e) {"},{"sha":"0443b457617320161131b2b8c9d87e871dff2926","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n@@ -60,7 +61,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.util.CollectionUtils;\n \n public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n@@ -126,6 +126,8 @@ protected static SearchCond buildEffectiveCond(\n \n     protected final AnyUtilsFactory anyUtilsFactory;\n \n+    protected final PlainAttrValidationManager validator;\n+\n     public AbstractAnySearchDAO(\n             final RealmDAO realmDAO,\n             final DynRealmDAO dynRealmDAO,\n@@ -134,7 +136,8 @@ public AbstractAnySearchDAO(\n             final AnyObjectDAO anyObjectDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n             final EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n \n         this.realmDAO = realmDAO;\n         this.dynRealmDAO = dynRealmDAO;\n@@ -144,6 +147,7 @@ public AbstractAnySearchDAO(\n         this.plainSchemaDAO = plainSchemaDAO;\n         this.entityFactory = entityFactory;\n         this.anyUtilsFactory = anyUtilsFactory;\n+        this.validator = validator;\n     }\n \n     protected abstract int doCount(\n@@ -210,7 +214,7 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttrCond cond, final Any\n                     && cond.getType() != AttrCond.Type.ISNULL\n                     && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n-                ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n+                validator.validate(schema, cond.getExpression(), attrValue);\n             }\n         } catch (ValidationException e) {\n             throw new IllegalArgumentException(\"Could not validate expression \" + cond.getExpression());\n@@ -272,7 +276,7 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n                 && computed.getType() != AttrCond.Type.ISNOTNULL) {\n \n             try {\n-                ((JPAPlainSchema) schema).validator().validate(computed.getExpression(), attrValue);\n+                validator.validate(schema, computed.getExpression(), attrValue);\n             } catch (ValidationException e) {\n                 throw new IllegalArgumentException(\"Could not validate expression \" + computed.getExpression());\n             }"},{"sha":"d086fc8ad0417c86f4afbb77e9bf1cb6459aad52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -81,20 +82,24 @@ public class JPAAnyMatchDAO extends AbstractDAO<Any<?>> implements AnyMatchDAO {\n \n     protected final AnyUtilsFactory anyUtilsFactory;\n \n+    protected final PlainAttrValidationManager validator;\n+\n     public JPAAnyMatchDAO(\n             final UserDAO userDAO,\n             final GroupDAO groupDAO,\n             final AnyObjectDAO anyObjectDAO,\n             final RealmDAO realmDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n-            final AnyUtilsFactory anyUtilsFactory) {\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n \n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n         this.anyObjectDAO = anyObjectDAO;\n         this.realmDAO = realmDAO;\n         this.plainSchemaDAO = plainSchemaDAO;\n         this.anyUtilsFactory = anyUtilsFactory;\n+        this.validator = validator;\n     }\n \n     /**\n@@ -171,8 +176,9 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n                 }\n \n                 if (match == null) {\n-                    Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n-                    match = anyCond.map(value -> matches(any, value, not)).orElseGet(() -> cond.getLeaf(AttrCond.class).\n+                    match = cond.getLeaf(AnyCond.class).\n+                            map(value -> matches(any, value, not)).\n+                            orElseGet(() -> cond.getLeaf(AttrCond.class).\n                             map(leaf -> matches(any, leaf, not)).\n                             orElse(null));\n                 }\n@@ -197,12 +203,12 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n         return false;\n     }\n \n-    protected static boolean matches(final Any<?> any, final AnyTypeCond cond, final boolean not) {\n+    protected boolean matches(final Any<?> any, final AnyTypeCond cond, final boolean not) {\n         boolean equals = any.getType().getKey().equals(cond.getAnyTypeKey());\n         return not ? !equals : equals;\n     }\n \n-    protected static boolean matches(\n+    protected boolean matches(\n             final GroupableRelatable<?, ?, ?, ?, ?> any, final RelationshipTypeCond cond, final boolean not) {\n \n         boolean found = any.getRelationships().stream().\n@@ -284,7 +290,7 @@ protected boolean matches(final Any<?> any, final ResourceCond cond, final boole\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    protected static boolean matches(\n+    protected boolean matches(\n             final List<? extends PlainAttrValue> anyAttrValues,\n             final PlainAttrValue attrValue,\n             final PlainSchema schema,\n@@ -374,7 +380,7 @@ protected boolean matches(final Any<?> any, final AttrCond cond, final boolean n\n                             && cond.getType() != AttrCond.Type.ISNULL\n                             && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n-                        ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n+                        validator.validate(schema, cond.getExpression(), attrValue);\n                     }\n                 } catch (ValidationException e) {\n                     LOG.error(\"Could not validate expression '\" + cond.getExpression() + '\\'', e);\n@@ -466,7 +472,7 @@ protected boolean matches(final Any<?> any, final AnyCond cond, final boolean no\n                         && cond.getType() != AttrCond.Type.ISNOTNULL) {\n \n                     try {\n-                        ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n+                        validator.validate(schema, cond.getExpression(), attrValue);\n                     } catch (ValidationException e) {\n                         LOG.error(\"Could not validate expression '\" + cond.getExpression() + '\\'', e);\n                         return false;"},{"sha":"a1bca5e54509bcb779d65ef0f29fc77c6565e13e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -79,9 +80,19 @@ public JPAAnySearchDAO(\n             final AnyObjectDAO anyObjectDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n             final EntityFactory entityFactory,\n-            final AnyUtilsFactory anyUtilsFactory) {\n-\n-        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, plainSchemaDAO, entityFactory, anyUtilsFactory);\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n+\n+        super(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                plainSchemaDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                validator);\n     }\n \n     protected String buildAdminRealmsFilter("},{"sha":"d31abd15d64b866201e2e9b34593958676e7a0ce","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":55,"deletions":16,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -27,6 +27,7 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import javax.persistence.NoResultException;\n import javax.persistence.PersistenceException;\n@@ -38,11 +39,13 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -93,6 +96,10 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     protected final SecurityProperties securityProperties;\n \n+    protected final Map<String, AccountRule> perContextAccountRules = new ConcurrentHashMap<>();\n+\n+    protected final Map<String, PasswordRule> perContextPasswordRules = new ConcurrentHashMap<>();\n+\n     public JPAUserDAO(\n             final AnyUtilsFactory anyUtilsFactory,\n             final PlainSchemaDAO plainSchemaDAO,\n@@ -321,6 +328,42 @@ protected List<AccountPolicy> getAccountPolicies(final User user) {\n         return policies;\n     }\n \n+    protected List<AccountRule> getAccountRules(final AccountPolicy policy) {\n+        List<AccountRule> result = new ArrayList<>();\n+\n+        for (Implementation impl : policy.getRules()) {\n+            try {\n+                ImplementationManager.buildAccountRule(\n+                        impl,\n+                        () -> perContextAccountRules.get(impl.getKey()),\n+                        instance -> perContextAccountRules.put(impl.getKey(), instance)).\n+                        ifPresent(result::add);\n+            } catch (Exception e) {\n+                LOG.warn(\"While building {}\", impl, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    protected List<PasswordRule> getPasswordRules(final PasswordPolicy policy) {\n+        List<PasswordRule> result = new ArrayList<>();\n+\n+        for (Implementation impl : policy.getRules()) {\n+            try {\n+                ImplementationManager.buildPasswordRule(\n+                        impl,\n+                        () -> perContextPasswordRules.get(impl.getKey()),\n+                        instance -> perContextPasswordRules.put(impl.getKey(), instance)).\n+                        ifPresent(result::add);\n+            } catch (Exception e) {\n+                LOG.warn(\"While building {}\", impl, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n@@ -336,15 +379,13 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                     throw new PasswordPolicyException(\"Password mandatory\");\n                 }\n \n-                for (Implementation impl : policy.getRules()) {\n-                    ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> {\n-                        rule.enforce(user);\n+                getPasswordRules(policy).forEach(rule -> {\n+                    rule.enforce(user);\n \n-                        user.getLinkedAccounts().stream().\n-                                filter(account -> account.getPassword() != null).\n-                                forEach(rule::enforce);\n-                    });\n-                }\n+                    user.getLinkedAccounts().stream().\n+                            filter(account -> account.getPassword() != null).\n+                            forEach(rule::enforce);\n+                });\n \n                 boolean matching = false;\n                 if (policy.getHistoryLength() > 0) {\n@@ -419,15 +460,13 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                         });\n             } else {\n                 for (AccountPolicy policy : accountPolicies) {\n-                    for (Implementation impl : policy.getRules()) {\n-                        ImplementationManager.buildAccountRule(impl).ifPresent(rule -> {\n-                            rule.enforce(user);\n+                    getAccountRules(policy).forEach(rule -> {\n+                        rule.enforce(user);\n \n-                            user.getLinkedAccounts().stream().\n-                                    filter(account -> account.getUsername() != null).\n-                                    forEach(rule::enforce);\n-                        });\n-                    }\n+                        user.getLinkedAccounts().stream().\n+                                filter(account -> account.getUsername() != null).\n+                                forEach(rule::enforce);\n+                    });\n \n                     suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n                             && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended();"},{"sha":"0dc8ea096706b33f1bf2c26104d2b9c780b86fb3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -65,11 +66,11 @@ private void checkNonNullSchema() {\n     }\n \n     @Override\n-    public void add(final String value, final PlainAttrValue attrValue) {\n+    public void add(final PlainAttrValidationManager validator, final String value, final PlainAttrValue attrValue) {\n         checkNonNullSchema();\n \n         attrValue.setAttr(this);\n-        getSchema().validator().validate(value, attrValue);\n+        validator.validate(getSchema(), value, attrValue);\n \n         if (getSchema().isUniqueConstraint()) {\n             setUniqueValue((PlainAttrUniqueValue) attrValue);\n@@ -82,7 +83,7 @@ public void add(final String value, final PlainAttrValue attrValue) {\n     }\n \n     @Override\n-    public void add(final String value, final AnyUtils anyUtils) {\n+    public void add(final PlainAttrValidationManager validator, final String value, final AnyUtils anyUtils) {\n         checkNonNullSchema();\n \n         PlainAttrValue attrValue;\n@@ -93,7 +94,7 @@ public void add(final String value, final AnyUtils anyUtils) {\n             attrValue = anyUtils.newPlainAttrValue();\n         }\n \n-        add(value, attrValue);\n+        add(validator, value, attrValue);\n     }\n \n     @Override"},{"sha":"786709523b483f33d425c1cc76cbad2cf648bf2c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -420,7 +421,12 @@ public Set<ExternalResource> getAllResources(final Any<?> any) {\n \n     @Transactional\n     @Override\n-    public void addAttr(final String key, final PlainSchema schema, final String value) {\n+    public void addAttr(\n+            final PlainAttrValidationManager validator,\n+            final String key,\n+            final PlainSchema schema,\n+            final String value) {\n+\n         Any any = dao().find(key);\n \n         Set<AnyTypeClass> typeOwnClasses = new HashSet<>();\n@@ -439,7 +445,7 @@ public void addAttr(final String key, final PlainSchema schema, final String val\n             any.add(attr);\n \n             try {\n-                attr.add(value, this);\n+                attr.add(validator, value, this);\n                 dao().save(any);\n             } catch (InvalidPlainAttrValueException e) {\n                 LOG.error(\"Invalid value for attribute {} and {}: {}\", schema.getKey(), any, value, e);"},{"sha":"3299bd66124230334518280c33584aef627e96af","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -27,18 +27,14 @@\n import javax.persistence.OneToOne;\n import javax.persistence.PrimaryKeyJoinColumn;\n import javax.persistence.Table;\n-import javax.persistence.Transient;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainSchemaCheck;\n-import org.apache.syncope.core.spring.ImplementationManager;\n \n @Entity\n @Table(name = JPAPlainSchema.TABLE)\n@@ -90,9 +86,6 @@ public class JPAPlainSchema extends AbstractSchema implements PlainSchema {\n     @OneToOne\n     private JPAImplementation validator;\n \n-    @Transient\n-    private Validator validatorImpl;\n-\n     @Override\n     public AnyTypeClass getAnyTypeClass() {\n         return anyTypeClass;\n@@ -154,27 +147,6 @@ public void setReadonly(final boolean readonly) {\n         this.readonly = readonly;\n     }\n \n-    public Validator validator() {\n-        if (validatorImpl != null) {\n-            return validatorImpl;\n-        }\n-\n-        if (getValidator() != null) {\n-            try {\n-                validatorImpl = ImplementationManager.build(getValidator());\n-            } catch (Exception e) {\n-                LOG.error(\"While building {}\", getValidator(), e);\n-            }\n-        }\n-\n-        if (validatorImpl == null) {\n-            validatorImpl = new BasicValidator();\n-        }\n-        validatorImpl.setSchema(this);\n-\n-        return validatorImpl;\n-    }\n-\n     @Override\n     public Implementation getValidator() {\n         return validator;"},{"sha":"1a66833a0f9a13b8dc31c4392d0623fd10ed8778","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAPlainAttrValidator.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAPlainAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAPlainAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAPlainAttrValidator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n-public class PlainAttrValidator extends AbstractValidator<PlainAttrCheck, PlainAttr<?>> {\n+public class JPAPlainAttrValidator extends AbstractValidator<PlainAttrCheck, PlainAttr<?>> {\n \n     @Override\n     public boolean isValid(final PlainAttr<?> attr, final ConstraintValidatorContext context) {","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java"},{"sha":"5fe455440062ca959c952ee05f5d2f7c0a92fa00","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrCheck.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -28,7 +28,7 @@\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = PlainAttrValidator.class)\n+@Constraint(validatedBy = JPAPlainAttrValidator.class)\n @Documented\n public @interface PlainAttrCheck {\n "},{"sha":"8c68cdc60867d6ca9b2990497b2ba3edcd6f3768","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -67,6 +68,9 @@ public class PlainAttrTest extends AbstractTest {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n+    @Autowired\n+    private PlainAttrValidationManager validator;\n+\n     @Tag(\"plainAttrTable\")\n     @Test\n     public void findByKey() {\n@@ -98,15 +102,15 @@ public void save() throws ClassNotFoundException {\n \n         Exception thrown = null;\n         try {\n-            attr.add(\"john.doe@gmail.com\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-            attr.add(\"mario.rossi@gmail.com\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+            attr.add(validator, \"john.doe@gmail.com\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+            attr.add(validator, \"mario.rossi@gmail.com\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n         assertNull(thrown);\n \n         try {\n-            attr.add(\"http://www.apache.org\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+            attr.add(validator, \"http://www.apache.org\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n@@ -130,13 +134,13 @@ public void saveWithEnum() throws ClassNotFoundException {\n \n         Exception thrown = null;\n         try {\n-            attribute.add(\"A\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+            attribute.add(validator, \"A\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n         assertNotNull(thrown);\n \n-        attribute.add(\"M\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attribute.add(validator, \"M\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n \n         InvalidEntityException iee = null;\n         try {\n@@ -225,7 +229,7 @@ public void saveWithEncrypted() throws Exception {\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);\n         attr.setSchema(obscureSchema);\n-        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         userDAO.save(user);\n@@ -255,7 +259,7 @@ public void encryptedWithKeyAsSysProp() throws Exception {\n \n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setSchema(obscureWithKeyAsSysprop);\n-        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n \n         assertEquals(Encryptor.getInstance(obscureSchema.getSecretKey()).\n                 encode(\"testvalue\", obscureSchema.getCipherAlgorithm()), attr.getValues().get(0).getStringValue());\n@@ -274,8 +278,8 @@ public void encryptedWithDecodeConversionPattern() throws Exception {\n \n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setSchema(obscureWithDecodeConversionPattern);\n-        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-        \n+        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+\n         assertEquals(Encryptor.getInstance(obscureWithDecodeConversionPattern.getSecretKey()).\n                 encode(\"testvalue\", obscureWithDecodeConversionPattern.getCipherAlgorithm()),\n                 attr.getValues().get(0).getStringValue());\n@@ -302,7 +306,7 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);\n         attr.setSchema(photoSchema);\n-        attr.add(photoB64Value, anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, photoB64Value, anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         userDAO.save(user);"},{"sha":"67fd767e93b0213c1ce289826887a95ac9e42136","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -76,6 +77,9 @@ public class AnySearchTest extends AbstractTest {\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n+    private PlainAttrValidationManager validator;\n+\n     @Test\n     public void searchByDynMembership() {\n         // 1. create role with dynamic membership\n@@ -204,14 +208,14 @@ public void issueSYNCOPE1512() {\n         GPlainAttr title = entityFactory.newEntity(GPlainAttr.class);\n         title.setOwner(group);\n         title.setSchema(plainSchemaDAO.find(\"title\"));\n-        title.add(\"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n+        title.add(validator, \"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n         group.add(title);\n \n         // unique\n         GPlainAttr originalName = entityFactory.newEntity(GPlainAttr.class);\n         originalName.setOwner(group);\n         originalName.setSchema(plainSchemaDAO.find(\"originalName\"));\n-        originalName.add(\"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n+        originalName.add(validator, \"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n         group.add(originalName);\n \n         groupDAO.save(group);"},{"sha":"c45a8329d363c91f29022e2e4de90c6caea691d8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -84,6 +85,9 @@ public class GroupTest extends AbstractTest {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n+    @Autowired\n+    private PlainAttrValidationManager validator;\n+\n     @Test\n     public void saveWithTwoOwners() {\n         assertThrows(InvalidEntityException.class, () -> {\n@@ -205,7 +209,7 @@ public void udynMembership() {\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);\n         attr.setSchema(plainSchemaDAO.find(\"cool\"));\n-        attr.add(\"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         user = userDAO.save(user);\n@@ -304,7 +308,7 @@ public void adynMembership() {\n         APlainAttr attr = entityFactory.newEntity(APlainAttr.class);\n         attr.setOwner(anyObject);\n         attr.setSchema(plainSchemaDAO.find(\"model\"));\n-        attr.add(\"Canon MFC8030\", anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT));\n+        attr.add(validator, \"Canon MFC8030\", anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT));\n         anyObject.add(attr);\n \n         anyObject = anyObjectDAO.save(anyObject);\n@@ -382,14 +386,14 @@ public void issueSYNCOPE1512() {\n         GPlainAttr title = entityFactory.newEntity(GPlainAttr.class);\n         title.setOwner(group);\n         title.setSchema(plainSchemaDAO.find(\"title\"));\n-        title.add(\"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n+        title.add(validator, \"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n         group.add(title);\n \n         // unique\n         GPlainAttr originalName = entityFactory.newEntity(GPlainAttr.class);\n         originalName.setOwner(group);\n         originalName.setSchema(plainSchemaDAO.find(\"originalName\"));\n-        originalName.add(\"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n+        originalName.add(validator, \"syncope's group\", anyUtilsFactory.getInstance(AnyTypeKind.GROUP));\n         group.add(originalName);\n \n         groupDAO.save(group);"},{"sha":"b857573862e1e845fd71dddde64e6a133f863670","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.Query;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -71,6 +72,9 @@ public class RoleTest extends AbstractTest {\n     @Autowired\n     private DelegationDAO delegationDAO;\n \n+    @Autowired\n+    private PlainAttrValidationManager validator;\n+\n     /**\n      * Static copy of {@link org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO} method with same signature:\n      * required for avoiding creating new transaction - good for general use case but bad for the way how\n@@ -106,7 +110,7 @@ public void dynMembership() {\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);\n         attr.setSchema(plainSchemaDAO.find(\"cool\"));\n-        attr.add(\"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         user = userDAO.save(user);"},{"sha":"46c35c87c12bfbb41970bb65e0994a3393955907","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n@@ -96,6 +97,9 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private PlainAttrValidationManager validator;\n+\n     @Test\n     public void delete() {\n         List<UMembership> memberships = groupDAO.findUMemberships(groupDAO.findByName(\"managingDirector\"));\n@@ -169,7 +173,7 @@ public void membershipWithAttrNotAllowed() {\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);\n         attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         // add 'obscure' to user (via 'artDirector' membership): does not work because 'obscure' is from 'other'\n@@ -183,7 +187,7 @@ public void membershipWithAttrNotAllowed() {\n         attr.setOwner(user);\n         attr.setMembership(membership);\n         attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(\"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         try {\n@@ -204,7 +208,7 @@ public void membershipWithAttr() {\n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);\n         attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(\"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"testvalue\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         // add 'obscure' (via 'additional' membership): that group defines type extension with classes 'other' and 'csv'\n@@ -217,7 +221,7 @@ public void membershipWithAttr() {\n         attr.setOwner(user);\n         attr.setMembership(membership);\n         attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(\"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        attr.add(validator, \"testvalue2\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(attr);\n \n         userDAO.save(user);\n@@ -260,7 +264,7 @@ private LinkedAccount newLinkedAccount(final String connObjectKeyValue) {\n         attr.setAccount(account);\n         account.add(attr);\n         attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n-        attr.add(\"testvalue\", anyUtils);\n+        attr.add(validator, \"testvalue\", anyUtils);\n \n         user = userDAO.save(user);\n         entityManager().flush();"},{"sha":"0acb0a151cb466f3152443258ac5381f6eb974ab","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -632,7 +632,7 @@ under the License.\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n                 jsonConf='[{\"schema\":{\"name\":\"host\",\"type\":\"java.lang.String\",\"required\":true,\"order\":1,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"localhost\"],\"overridable\":false},{\"schema\":{\"name\":\"port\",\"type\":\"int\",\"required\":false,\"order\":2,\"confidential\":false,\"defaultValues\":[389]},\"values\":[1389],\"overridable\":false},{\"schema\":{\"name\":\"ssl\",\"type\":\"boolean\",\"required\":false,\"order\":3,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"failover\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":4,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"principal\",\"type\":\"java.lang.String\",\"required\":false,\"order\":5,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=admin,ou=system\"],\"overridable\":false},{\"schema\":{\"name\":\"credentials\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":6,\"confidential\":true,\"defaultValues\":[]},\"values\":[\"secret\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContexts\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":true},{\"schema\":{\"name\":\"passwordAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":8,\"confidential\":false,\"defaultValues\":[\"userPassword\"]},\"values\":[\"userpassword\"],\"overridable\":false},{\"schema\":{\"name\":\"accountObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":9,\"confidential\":false,\"defaultValues\":[\"top\",\"person\",\"organizationalPerson\",\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\"],\"overridable\":false},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":10,\"confidential\":false,\"defaultValues\":[\"uid\",\"cn\"]},\"values\":[\"uid\"],\"overridable\":false},{\"schema\":{\"name\":\"accountSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":11,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=*\"],\"overridable\":false},{\"schema\":{\"name\":\"groupObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":12,\"confidential\":false,\"defaultValues\":[\"top\",\"groupOfUniqueNames\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":13,\"confidential\":false,\"defaultValues\":[\"cn\"]},\"values\":[\"cn\"],\"overridable\":false},{\"schema\":{\"name\":\"groupMemberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":14,\"confidential\":false,\"defaultValues\":[\"uniqueMember\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":15,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":16,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"addPrincipalToNewGroups\",\"type\":\"boolean\",\"required\":false,\"order\":17,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"type\":\"java.lang.String\",\"required\":false,\"order\":18,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"SHA\"],\"overridable\":false},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"type\":\"boolean\",\"required\":false,\"order\":19,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"useVlvControls\",\"type\":\"boolean\",\"required\":false,\"order\":20,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"vlvSortAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"uid\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"uidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":22,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"gidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"readSchema\",\"type\":\"boolean\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":24,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":false},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":25,\"confidential\":false,\"defaultValues\":[\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"],\"overridable\":false},{\"schema\":{\"name\":\"attributesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":26,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":27,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":28,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"changeLogBlockSize\",\"type\":\"int\",\"required\":false,\"order\":29,\"confidential\":false,\"defaultValues\":[100]},\"values\":[100],\"overridable\":false},{\"schema\":{\"name\":\"changeNumberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":30,\"confidential\":false,\"defaultValues\":[\"changeNumber\"]},\"values\":[\"changeNumber\"],\"overridable\":false},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"type\":\"boolean\",\"required\":false,\"order\":31,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"type\":\"boolean\",\"required\":false,\"order\":32,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"synchronizePasswords\",\"type\":\"boolean\",\"required\":false,\"order\":33,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"type\":\"java.lang.String\",\"required\":false,\"order\":34,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":35,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":36,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"statusManagementClass\",\"type\":\"java.lang.String\",\"required\":false,\"order\":37,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"],\"overridable\":false},{\"schema\":{\"name\":\"retrievePasswordsWithSearch\",\"type\":\"boolean\",\"required\":false,\"order\":38,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"dnAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":39,\"confidential\":false,\"defaultValues\":[\"entryDN\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":40,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"readTimeout\",\"type\":\"long\",\"required\":false,\"order\":41,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"connectTimeout\",\"type\":\"long\",\"required\":false,\"order\":42,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false}]'\n-                capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\"]'/>\n+                capabilities='[\"CREATE\",\"UPDATE\",\"UPDATE_DELTA\",\"DELETE\",\"SEARCH\"]'/>\n   \n   <ConnInstance id=\"a28abd9b-9f4a-4ef6-a7a8-d19ad2a8f29d\" displayName=\"H2-test2\"\n                 adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n@@ -657,7 +657,7 @@ under the License.\n                 connectorName=\"net.tirasa.connid.bundles.db.scriptedsql.ScriptedSQLConnector\"\n                 displayName=\"Scripted SQL\" version=\"${connid.database.version}\"\n                 jsonConf='[{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScriptFileName&quot;,&quot;displayName&quot;:&quot;updateScriptFileName&quot;,&quot;helpMessage&quot;:&quot;updateScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/UpdateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScript&quot;,&quot;displayName&quot;:&quot;testScript&quot;,&quot;helpMessage&quot;:&quot;testScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;host&quot;,&quot;displayName&quot;:&quot;Host&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Host&lt;/b&gt;&lt;br/&gt;Enter the name of the host where the database is running.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:2,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;localhost&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;port&quot;,&quot;displayName&quot;:&quot;Port&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;TCP Port&lt;/b&gt;&lt;br/&gt;Enter the port number the database server is listening on.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:3,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;3306&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;database&quot;,&quot;displayName&quot;:&quot;Database&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Database&lt;/b&gt;&lt;br/&gt;Enter the name of the database on the database server that contains the table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:6,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScript&quot;,&quot;displayName&quot;:&quot;createScript&quot;,&quot;helpMessage&quot;:&quot;createScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcUrlTemplate&quot;,&quot;displayName&quot;:&quot;JDBC Connection URL&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Connection URL&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver Connection URL.&lt;br/&gt; Oracle template is jdbc:oracle:thin:@[host]:[port(1521)]:[DB].&lt;br/&gt;  MySQL template is jdbc:mysql://[host]:[port(3306)]/[db], for more info, read the JDBC driver documentation.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:11,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;jdbc:mysql://%h:%p/%d&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.url}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jndiProperties&quot;,&quot;displayName&quot;:&quot;Initial JNDI Properties&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Initial JNDI Properties&lt;/b&gt;&lt;br/&gt;Could be empty or enter the JDBC JNDI Initial context factory, context provider in a format: key = value.&quot;,&quot;type&quot;:&quot;[Ljava.lang.String;&quot;,&quot;required&quot;:false,&quot;order&quot;:21,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;enableEmptyString&quot;,&quot;displayName&quot;:&quot;Enable writing empty string&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Enable writing empty string&lt;/b&gt;&lt;br/&gt;Select to enable support for writing an empty strings, instead of a NULL value, in character based columns defined as not-null in the table schema. This option does not influence the way strings are written for Oracle based tables. By default empty strings are written as a NULL value.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:12,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;allNative&quot;,&quot;displayName&quot;:&quot;All native&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;All native&lt;/b&gt;&lt;br/&gt;Select to retrieve all data type of the columns in a native format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:16,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;password&quot;,&quot;displayName&quot;:&quot;User Password&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User Password&lt;/b&gt;&lt;br/&gt;Enter a user account that has permission to access accounts table.&quot;,&quot;type&quot;:&quot;org.identityconnectors.common.security.GuardedString&quot;,&quot;required&quot;:false,&quot;order&quot;:5,&quot;confidential&quot;:true,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.password}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;validConnectionQuery&quot;,&quot;displayName&quot;:&quot;Validate Connection Query&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Validate Connection Query&lt;/b&gt;&lt;br/&gt;There can be specified the check connection alive query. If empty, default implementation will test it using the switch on/off the autocommit. Some select 1 from dummy table could be more efficient.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:17,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;reloadScriptOnExecution&quot;,&quot;displayName&quot;:&quot;reloadScriptOnExecution&quot;,&quot;helpMessage&quot;:&quot;reloadScriptOnExecution&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;true&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;schemaScriptFileName&quot;,&quot;displayName&quot;:&quot;schemaScriptFileName&quot;,&quot;helpMessage&quot;:&quot;schemaScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SchemaScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;jdbcDriver&quot;,&quot;displayName&quot;:&quot;JDBC Driver&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Driver&lt;/b&gt;&lt;br/&gt;Specify the JDBC Driver class name. Oracle is oracle.jdbc.driver.OracleDriver. MySQL is org.gjt.mm.mysql.Driver.&lt;br/&gt;Could be empty if datasource is provided.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:10,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;com.mysql.jdbc.Driver&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.driver}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;testScriptFileName&quot;,&quot;displayName&quot;:&quot;testScriptFileName&quot;,&quot;helpMessage&quot;:&quot;testScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/TestScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;quoting&quot;,&quot;displayName&quot;:&quot;Name Quoting&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Name Quoting&lt;/b&gt;&lt;br/&gt;Select whether database column names for this resource should be quoted, and the quoting characters. By default, database column names are not quoted (None). For other selections (Single, Double, Back, or Brackets), column names will appear between single quotes, double quotes, back quotes, or brackets in the SQL generated to access the database.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:-1,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;createScriptFileName&quot;,&quot;displayName&quot;:&quot;createScriptFileName&quot;,&quot;helpMessage&quot;:&quot;createScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/CreateScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;clearTextPasswordToScript&quot;,&quot;displayName&quot;:&quot;clearTextPasswordToScript&quot;,&quot;helpMessage&quot;:&quot;clearTextPasswordToScript&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;false&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;nativeTimestamps&quot;,&quot;displayName&quot;:&quot;Native Timestamps&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;Native Timestamps&lt;/b&gt;&lt;br/&gt;Select to retrieve Timestamp data type of the columns in java.sql.Timestamp format from the database table.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:15,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[false]},&quot;overridable&quot;:false,&quot;values&quot;:[false]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScript&quot;,&quot;displayName&quot;:&quot;syncScript&quot;,&quot;helpMessage&quot;:&quot;syncScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;autoCommit&quot;,&quot;displayName&quot;:&quot;autoCommit&quot;,&quot;helpMessage&quot;:&quot;autoCommit&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;scriptingLanguage&quot;,&quot;displayName&quot;:&quot;scriptingLanguage&quot;,&quot;helpMessage&quot;:&quot;scriptingLanguage&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;GROOVY&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;GROOVY&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;datasource&quot;,&quot;displayName&quot;:&quot;Datasource Path&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;JDBC Data Source Name/Path&lt;/b&gt;&lt;br/&gt;Enter the JDBC Data Source Name/Path to connect to the Oracle server. If specified, connector will only try to connect using Datasource and ignore other resource parameters specified.&lt;br/&gt;the example value is: &lt;CODE&gt;jdbc/SampleDataSourceName&lt;/CODE&gt;&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:20,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScript&quot;,&quot;displayName&quot;:&quot;deleteScript&quot;,&quot;helpMessage&quot;:&quot;deleteScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;rethrowAllSQLExceptions&quot;,&quot;displayName&quot;:&quot;Rethrow all SQLExceptions&quot;,&quot;helpMessage&quot;:&quot;If this is not checked, SQL statements which throw SQLExceptions with a 0 ErrorCode will be have the exception caught and suppressed. Check it to have exceptions with 0 ErrorCodes rethrown.&quot;,&quot;type&quot;:&quot;boolean&quot;,&quot;required&quot;:false,&quot;order&quot;:14,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[true]},&quot;overridable&quot;:false,&quot;values&quot;:[true]},{&quot;schema&quot;:{&quot;name&quot;:&quot;syncScriptFileName&quot;,&quot;displayName&quot;:&quot;syncScriptFileName&quot;,&quot;helpMessage&quot;:&quot;syncScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SyncScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;updateScript&quot;,&quot;displayName&quot;:&quot;updateScript&quot;,&quot;helpMessage&quot;:&quot;updateScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]},{&quot;schema&quot;:{&quot;name&quot;:&quot;user&quot;,&quot;displayName&quot;:&quot;User&quot;,&quot;helpMessage&quot;:&quot;&lt;b&gt;User&lt;/b&gt;&lt;br/&gt;Enter the name of the mandatory Database user with permission to account table.&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:4,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${testdb.username}&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;deleteScriptFileName&quot;,&quot;displayName&quot;:&quot;deleteScriptFileName&quot;,&quot;helpMessage&quot;:&quot;deleteScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:false,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/DeleteScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScriptFileName&quot;,&quot;displayName&quot;:&quot;searchScriptFileName&quot;,&quot;helpMessage&quot;:&quot;searchScriptFileName&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[]},&quot;overridable&quot;:true,&quot;values&quot;:[&quot;${conf.directory}/scriptedsql/SearchScript.groovy&quot;]},{&quot;schema&quot;:{&quot;name&quot;:&quot;searchScript&quot;,&quot;displayName&quot;:&quot;searchScript&quot;,&quot;helpMessage&quot;:&quot;searchScript&quot;,&quot;type&quot;:&quot;java.lang.String&quot;,&quot;required&quot;:false,&quot;order&quot;:0,&quot;confidential&quot;:false,&quot;defaultValues&quot;:[&quot;&quot;]},&quot;overridable&quot;:false,&quot;values&quot;:[]}]'\n-                capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\",\"SYNC\"]'/>\n+                capabilities='[\"CREATE\",\"UPDATE\",\"UPDATE_DELTA\",\"DELETE\",\"SEARCH\",\"SYNC\"]'/>\n   \n   <ConnInstance id=\"44c02549-19c3-483c-8025-4919c3283c37\" bundlename=\"net.tirasa.connid.bundles.rest\"\n                 adminRealm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\""},{"sha":"68cc8a56bca231d15809a84e517d7a9f1e9cf795","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -236,7 +236,7 @@ public Set<AttributeDelta> updateDelta(\n \n         Set<AttributeDelta> result = null;\n \n-        if (connInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.UPDATE_DELTA)) {\n             propagationAttempted.set(true);\n \n             Future<Set<AttributeDelta>> future = "},{"sha":"5554f89d87a2884a8aece59efdbb9c01a9b65b5b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.LogOutputStream;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -624,7 +625,8 @@ public PropagationTaskExecutor propagationTaskExecutor(\n             final NotificationManager notificationManager,\n             final AuditManager auditManager,\n             final TaskDataBinder taskDataBinder,\n-            final OutboundMatcher outboundMatcher) {\n+            final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator) {\n \n         return new PriorityPropagationTaskExecutor(\n                 connectorManager,\n@@ -642,6 +644,7 @@ public PropagationTaskExecutor propagationTaskExecutor(\n                 taskUtilsFactory,\n                 entityFactory,\n                 outboundMatcher,\n+                validator,\n                 propagationTaskExecutorAsyncExecutor);\n     }\n \n@@ -837,7 +840,8 @@ public AnyObjectDataBinder anyObjectDataBinder(\n             final VirAttrHandler virAttrHandler,\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n-            final OutboundMatcher outboundMatcher) {\n+            final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator) {\n \n         return new AnyObjectDataBinderImpl(\n                 anyTypeDAO,\n@@ -857,7 +861,8 @@ public AnyObjectDataBinder anyObjectDataBinder(\n                 virAttrHandler,\n                 mappingManager,\n                 intAttrNameParser,\n-                outboundMatcher);\n+                outboundMatcher,\n+                validator);\n     }\n \n     @ConditionalOnMissingBean\n@@ -995,7 +1000,8 @@ public GroupDataBinder groupDataBinder(\n             final VirAttrHandler virAttrHandler,\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n-            final OutboundMatcher outboundMatcher) {\n+            final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator) {\n \n         return new GroupDataBinderImpl(\n                 anyTypeDAO,\n@@ -1016,7 +1022,8 @@ public GroupDataBinder groupDataBinder(\n                 mappingManager,\n                 intAttrNameParser,\n                 outboundMatcher,\n-                searchCondVisitor);\n+                searchCondVisitor,\n+                validator);\n     }\n \n     @ConditionalOnMissingBean\n@@ -1237,6 +1244,7 @@ public UserDataBinder userDataBinder(\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n             final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator,\n             final RoleDAO roleDAO,\n             final SecurityQuestionDAO securityQuestionDAO,\n             final ApplicationDAO applicationDAO,\n@@ -1263,6 +1271,7 @@ public UserDataBinder userDataBinder(\n                 mappingManager,\n                 intAttrNameParser,\n                 outboundMatcher,\n+                validator,\n                 roleDAO,\n                 securityQuestionDAO,\n                 applicationDAO,"},{"sha":"b728ec7759e22bf2d6218758c8b567d38854e678","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -135,6 +136,8 @@ abstract class AbstractAnyDataBinder {\n \n     protected final OutboundMatcher outboundMatcher;\n \n+    protected final PlainAttrValidationManager validator;\n+\n     protected AbstractAnyDataBinder(\n             final AnyTypeDAO anyTypeDAO,\n             final RealmDAO realmDAO,\n@@ -153,7 +156,8 @@ protected AbstractAnyDataBinder(\n             final VirAttrHandler virAttrHandler,\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n-            final OutboundMatcher outboundMatcher) {\n+            final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator) {\n \n         this.anyTypeDAO = anyTypeDAO;\n         this.realmDAO = realmDAO;\n@@ -173,6 +177,7 @@ protected AbstractAnyDataBinder(\n         this.mappingManager = mappingManager;\n         this.intAttrNameParser = intAttrNameParser;\n         this.outboundMatcher = outboundMatcher;\n+        this.validator = validator;\n     }\n \n     protected void setRealm(final Any<?> any, final AnyUR anyUR) {\n@@ -260,7 +265,7 @@ protected void fillAttr(\n                 LOG.debug(\"Null value for {}, ignoring\", schema.getKey());\n             } else {\n                 try {\n-                    attr.add(value, anyUtils);\n+                    attr.add(validator, value, anyUtils);\n                 } catch (InvalidPlainAttrValueException e) {\n                     String valueToPrint = value.length() > 40\n                             ? value.substring(0, 20) + \"...\""},{"sha":"643f2e7c199fbe9886ca0964c2fac6a9c837725b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -93,7 +94,8 @@ public AnyObjectDataBinderImpl(\n             final VirAttrHandler virAttrHandler,\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n-            final OutboundMatcher outboundMatcher) {\n+            final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator) {\n \n         super(anyTypeDAO,\n                 realmDAO,\n@@ -112,7 +114,8 @@ public AnyObjectDataBinderImpl(\n                 virAttrHandler,\n                 mappingManager,\n                 intAttrNameParser,\n-                outboundMatcher);\n+                outboundMatcher,\n+                validator);\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"b49e90a43b80f89dcb128cfa657ce0fa9a8a3899","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -96,7 +97,8 @@ public GroupDataBinderImpl(\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n             final OutboundMatcher outboundMatcher,\n-            final SearchCondVisitor searchCondVisitor) {\n+            final SearchCondVisitor searchCondVisitor,\n+            final PlainAttrValidationManager validator) {\n \n         super(anyTypeDAO,\n                 realmDAO,\n@@ -115,7 +117,8 @@ public GroupDataBinderImpl(\n                 virAttrHandler,\n                 mappingManager,\n                 intAttrNameParser,\n-                outboundMatcher);\n+                outboundMatcher,\n+                validator);\n \n         this.searchCondVisitor = searchCondVisitor;\n     }"},{"sha":"c7dad2ececcdd8bfb8cb2717a4df2b0c03093c1a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n@@ -138,7 +138,7 @@ public void update(final Implementation implementation, final ImplementationTO i\n                     break;\n \n                 case IdRepoImplementationType.VALIDATOR:\n-                    base = Validator.class;\n+                    base = PlainAttrValueValidator.class;\n                     break;\n \n                 case IdRepoImplementationType.RECIPIENTS_PROVIDER:"},{"sha":"b86f460a3a96d3f927e58c31b0b035863e1ea0dc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -352,24 +352,24 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setProvisioningTraceLevel(resourceTO.getProvisioningTraceLevel());\n \n         resource.setPasswordPolicy(resourceTO.getPasswordPolicy() == null\n-                ? null : (PasswordPolicy) policyDAO.find(resourceTO.getPasswordPolicy()));\n+                ? null : policyDAO.<PasswordPolicy>find(resourceTO.getPasswordPolicy()));\n \n         resource.setAccountPolicy(resourceTO.getAccountPolicy() == null\n-                ? null : (AccountPolicy) policyDAO.find(resourceTO.getAccountPolicy()));\n+                ? null : policyDAO.<AccountPolicy>find(resourceTO.getAccountPolicy()));\n \n         if (resource.getPropagationPolicy() != null\n                 && !resource.getPropagationPolicy().getKey().equals(resourceTO.getPropagationPolicy())) {\n \n             propagationTaskExecutor.expireRetryTemplate(resource.getKey());\n         }\n         resource.setPropagationPolicy(resourceTO.getPropagationPolicy() == null\n-                ? null : (PropagationPolicy) policyDAO.find(resourceTO.getPropagationPolicy()));\n+                ? null : policyDAO.<PropagationPolicy>find(resourceTO.getPropagationPolicy()));\n \n         resource.setPullPolicy(resourceTO.getPullPolicy() == null\n-                ? null : (PullPolicy) policyDAO.find(resourceTO.getPullPolicy()));\n+                ? null : policyDAO.<PullPolicy>find(resourceTO.getPullPolicy()));\n \n         resource.setPushPolicy(resourceTO.getPushPolicy() == null\n-                ? null : (PushPolicy) policyDAO.find(resourceTO.getPushPolicy()));\n+                ? null : policyDAO.<PushPolicy>find(resourceTO.getPushPolicy()));\n \n         if (resourceTO.getProvisionSorter() == null) {\n             resource.setProvisionSorter(null);"},{"sha":"15be775af5d1487066b8139bee69c0231e5d4358","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -131,6 +132,7 @@ public UserDataBinderImpl(\n             final MappingManager mappingManager,\n             final IntAttrNameParser intAttrNameParser,\n             final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator,\n             final RoleDAO roleDAO,\n             final SecurityQuestionDAO securityQuestionDAO,\n             final ApplicationDAO applicationDAO,\n@@ -156,7 +158,8 @@ public UserDataBinderImpl(\n                 virAttrHandler,\n                 mappingManager,\n                 intAttrNameParser,\n-                outboundMatcher);\n+                outboundMatcher,\n+                validator);\n \n         this.roleDAO = roleDAO;\n         this.securityQuestionDAO = securityQuestionDAO;"},{"sha":"f16b5d0a8a7f7c64fba34a1b5ce99e3ca33c734e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -121,6 +121,8 @@ public class DefaultNotificationManager implements NotificationManager {\n \n     protected final SearchCondVisitor searchCondVisitor;\n \n+    protected Optional<RecipientsProvider> perContextRecipientsProvider = Optional.empty();\n+\n     public DefaultNotificationManager(\n             final DerSchemaDAO derSchemaDAO,\n             final VirSchemaDAO virSchemaDAO,\n@@ -216,8 +218,11 @@ protected NotificationTask getNotificationTask(\n \n         if (notification.getRecipientsProvider() != null) {\n             try {\n-                RecipientsProvider recipientsProvider =\n-                        ImplementationManager.build(notification.getRecipientsProvider());\n+                RecipientsProvider recipientsProvider = ImplementationManager.build(\n+                        notification.getRecipientsProvider(),\n+                        () -> perContextRecipientsProvider.orElse(null),\n+                        instance -> perContextRecipientsProvider = Optional.of(instance));\n+\n                 recipientEmails.addAll(recipientsProvider.provideRecipients(notification));\n             } catch (Exception e) {\n                 LOG.error(\"While building {}\", notification.getRecipientsProvider(), e);"},{"sha":"f4fcd7ab8e6eaa736ae38785cb68b3bee18c1b53","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -127,6 +129,10 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n \n     protected final OutboundMatcher outboundMatcher;\n \n+    protected final PlainAttrValidationManager validator;\n+\n+    protected final Map<String, PropagationActions> perContextActions = new ConcurrentHashMap<>();\n+\n     public AbstractPropagationTaskExecutor(\n             final ConnectorManager connectorManager,\n             final ConnObjectUtils connObjectUtils,\n@@ -142,7 +148,8 @@ public AbstractPropagationTaskExecutor(\n             final AnyUtilsFactory anyUtilsFactory,\n             final TaskUtilsFactory taskUtilsFactory,\n             final EntityFactory entityFactory,\n-            final OutboundMatcher outboundMatcher) {\n+            final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator) {\n \n         this.connectorManager = connectorManager;\n         this.connObjectUtils = connObjectUtils;\n@@ -159,6 +166,7 @@ public AbstractPropagationTaskExecutor(\n         this.taskUtilsFactory = taskUtilsFactory;\n         this.entityFactory = entityFactory;\n         this.outboundMatcher = outboundMatcher;\n+        this.validator = validator;\n     }\n \n     @Override\n@@ -171,7 +179,10 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n \n         resource.getPropagationActions().forEach(impl -> {\n             try {\n-                result.add(ImplementationManager.build(impl));\n+                result.add(ImplementationManager.build(\n+                        impl,\n+                        () -> perContextActions.get(impl.getKey()),\n+                        instance -> perContextActions.put(impl.getKey(), instance)));\n             } catch (Exception e) {\n                 LOG.error(\"While building {}\", impl, e);\n             }\n@@ -193,7 +204,10 @@ protected Uid doCreate(\n         taskInfo.getResource().getProvision(taskInfo.getAnyType()).\n                 filter(provision -> provision.getUidOnCreate() != null).\n                 ifPresent(provision -> anyUtilsFactory.getInstance(taskInfo.getAnyTypeKind()).addAttr(\n-                taskInfo.getEntityKey(), plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue()));\n+                validator,\n+                taskInfo.getEntityKey(),\n+                plainSchemaDAO.find(provision.getUidOnCreate()),\n+                result.getUidValue()));\n \n         return result;\n     }"},{"sha":"c90a0e9c2f12940882fc9efc2c5796eb9bb10818","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AzurePropagationActions.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -24,6 +24,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -37,6 +39,7 @@\n  *\n  * It ensures to send the configured e-mail address as {@code __NAME__}.\n  */\n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class AzurePropagationActions implements PropagationActions {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AzurePropagationActions.class);"},{"sha":"e36a73ee457db2c210498e6e452eb414054206a2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -30,6 +30,8 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -43,6 +45,7 @@\n  * added a password. The CipherAlgorithm associated with the password must match the password\n  * cipher algorithm property of the DB Connector.\n  */\n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class DBPasswordPropagationActions implements PropagationActions {\n \n     protected static final String CLEARTEXT = \"CLEARTEXT\";"},{"sha":"6bb431bc7826f0286ae8eaae273cdf3f5af1f1d2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationManager.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,9 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import static org.apache.syncope.core.provisioning.api.propagation.PropagationManager.MANDATORY_MISSING_ATTR_NAME;\n-import static org.apache.syncope.core.provisioning.api.propagation.PropagationManager.MANDATORY_NULL_OR_EMPTY_ATTR_NAME;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;"},{"sha":"d1a869fdbe15cc722636341eee7f525c8dedb02b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/GoogleAppsPropagationActions.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -25,6 +25,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.Name;\n@@ -38,6 +40,7 @@\n  *\n  * It ensures to send the configured e-mail address as {@code __NAME__}.\n  */\n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class GoogleAppsPropagationActions implements PropagationActions {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPropagationActions.class);"},{"sha":"9cb4215b3f133f82cd90eddb86b191682d075639","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -43,6 +43,8 @@\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeDeltaBuilder;\n import org.identityconnectors.framework.common.objects.AttributeDeltaUtil;\n@@ -58,6 +60,7 @@\n  *\n  * @see org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions\n  */\n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class LDAPMembershipPropagationActions implements PropagationActions {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipPropagationActions.class);"},{"sha":"eb3cee8806121557c8dc296fce55d12f3dcf1a8c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -30,6 +30,8 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -43,6 +45,7 @@\n  * added a password. The CipherAlgorithm associated with the password must match the password\n  * hash algorithm property of the LDAP Connector.\n  */\n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class LDAPPasswordPropagationActions implements PropagationActions {\n \n     private static final String CLEARTEXT = \"CLEARTEXT\";"},{"sha":"5fb86aa96dc7b7ad3c1d182b2a82d86a7796b599","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -28,6 +28,7 @@\n import java.util.concurrent.Future;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -102,6 +103,7 @@ public PriorityPropagationTaskExecutor(\n             final TaskUtilsFactory taskUtilsFactory,\n             final EntityFactory entityFactory,\n             final OutboundMatcher outboundMatcher,\n+            final PlainAttrValidationManager validator,\n             final ThreadPoolTaskExecutor taskExecutor) {\n \n         super(connectorManager,\n@@ -118,7 +120,8 @@ public PriorityPropagationTaskExecutor(\n                 anyUtilsFactory,\n                 taskUtilsFactory,\n                 entityFactory,\n-                outboundMatcher);\n+                outboundMatcher,\n+                validator);\n         this.taskExecutor = taskExecutor;\n     }\n "},{"sha":"c429d09c1201733b74239f14a7c06e1b4684f813","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -23,6 +23,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.Provision;\n@@ -36,8 +37,10 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+import org.apache.syncope.core.provisioning.api.ProvisionSorter;\n import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -105,6 +108,26 @@ public static String generate(final Collection<ProvisioningReport> results, fina\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n+    protected Optional<ProvisionSorter> perContextProvisionSorter = Optional.empty();\n+\n+    protected ProvisionSorter getProvisionSorter(final T task) {\n+        if (task.getResource().getProvisionSorter() != null) {\n+            try {\n+                return ImplementationManager.build(\n+                        task.getResource().getProvisionSorter(),\n+                        () -> perContextProvisionSorter.orElse(null),\n+                        instance -> perContextProvisionSorter = Optional.of(instance));\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", task.getResource().getProvisionSorter(), e);\n+            }\n+        }\n+\n+        if (perContextProvisionSorter.isEmpty()) {\n+            perContextProvisionSorter = Optional.of(new DefaultProvisionSorter());\n+        }\n+        return perContextProvisionSorter.get();\n+    }\n+\n     /**\n      * Create a textual report of the provisioning operation, based on the trace level.\n      *"},{"sha":"dd5af11ef2743d2fa755ddbcc320c335fe3e2d64","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":34,"deletions":20,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -21,8 +21,10 @@\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.to.Item;\n@@ -106,6 +108,8 @@ public class InboundMatcher {\n \n     protected final AnyUtilsFactory anyUtilsFactory;\n \n+    protected final Map<String, PullCorrelationRule> perContextPullCorrelationRules = new ConcurrentHashMap<>();\n+\n     public InboundMatcher(\n             final UserDAO userDAO,\n             final AnyObjectDAO anyObjectDAO,\n@@ -130,13 +134,6 @@ public InboundMatcher(\n         this.anyUtilsFactory = anyUtilsFactory;\n     }\n \n-    protected List<Implementation> getTransformers(final Item item) {\n-        return item.getTransformers().stream().\n-                map(implementationDAO::find).\n-                filter(Objects::nonNull).\n-                collect(Collectors.toList());\n-    }\n-\n     public Optional<PullMatch> match(\n             final AnyType anyType,\n             final String nameValue,\n@@ -212,6 +209,13 @@ public boolean handle(final ConnectorObject connectorObject) {\n         return result;\n     }\n \n+    protected List<Implementation> getTransformers(final Item item) {\n+        return item.getTransformers().stream().\n+                map(implementationDAO::find).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n+    }\n+\n     public List<PullMatch> matchByConnObjectKeyValue(\n             final Item connObjectKeyItem,\n             final String connObjectKeyValue,\n@@ -353,6 +357,27 @@ protected List<PullMatch> matchByCorrelationRule(\n         return result;\n     }\n \n+    protected Optional<PullCorrelationRule> rule(final ExternalResource resource, final Provision provision) {\n+        Optional<? extends PullCorrelationRuleEntity> correlationRule = resource.getPullPolicy() == null\n+                ? Optional.empty()\n+                : resource.getPullPolicy().getCorrelationRule(provision.getAnyType());\n+\n+        Optional<PullCorrelationRule> rule = Optional.empty();\n+        if (correlationRule.isPresent()) {\n+            Implementation impl = correlationRule.get().getImplementation();\n+            try {\n+                rule = ImplementationManager.buildPullCorrelationRule(\n+                        impl,\n+                        () -> perContextPullCorrelationRules.get(impl.getKey()),\n+                        instance -> perContextPullCorrelationRules.put(impl.getKey(), instance));\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", impl, e);\n+            }\n+        }\n+\n+        return rule;\n+    }\n+\n     /**\n      * Finds internal entities based on external attributes and mapping.\n      *\n@@ -368,18 +393,7 @@ public List<PullMatch> match(\n             final Provision provision,\n             final AnyTypeKind anyTypeKind) {\n \n-        Optional<? extends PullCorrelationRuleEntity> correlationRule = resource.getPullPolicy() == null\n-                ? Optional.empty()\n-                : resource.getPullPolicy().getCorrelationRule(provision.getAnyType());\n-\n-        Optional<PullCorrelationRule> rule = Optional.empty();\n-        if (correlationRule.isPresent()) {\n-            try {\n-                rule = ImplementationManager.buildPullCorrelationRule(correlationRule.get().getImplementation());\n-            } catch (Exception e) {\n-                LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);\n-            }\n-        }\n+        Optional<PullCorrelationRule> rule = rule(resource, provision);\n \n         List<PullMatch> result = List.of();\n         try {\n@@ -470,7 +484,7 @@ public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n \n             case \"name\":\n                 if (orgUnit.isIgnoreCaseMatch()) {\n-                    final String realmName = connObjectKey;\n+                    String realmName = connObjectKey;\n                     result.addAll(realmDAO.findAll().stream().\n                             filter(r -> r.getName().equalsIgnoreCase(realmName)).collect(Collectors.toList()));\n                 } else {"},{"sha":"2c78a12d15b3db49c9bb0af6a6739a0e851e83ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":33,"deletions":13,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -22,8 +22,10 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.Item;\n@@ -35,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -69,6 +72,10 @@ public class OutboundMatcher {\n \n     protected final VirAttrHandler virAttrHandler;\n \n+    protected final Map<String, PropagationActions> perContextActions = new ConcurrentHashMap<>();\n+\n+    protected final Map<String, PushCorrelationRule> perContextPushCorrelationRules = new ConcurrentHashMap<>();\n+\n     public OutboundMatcher(\n             final MappingManager mappingManager,\n             final UserDAO userDAO,\n@@ -90,10 +97,14 @@ protected Optional<PushCorrelationRule> rule(final ExternalResource resource, fi\n \n         Optional<PushCorrelationRule> rule = Optional.empty();\n         if (correlationRule.isPresent()) {\n+            Implementation impl = correlationRule.get().getImplementation();\n             try {\n-                rule = ImplementationManager.buildPushCorrelationRule(correlationRule.get().getImplementation());\n+                rule = ImplementationManager.buildPushCorrelationRule(\n+                        impl,\n+                        () -> perContextPushCorrelationRules.get(impl.getKey()),\n+                        instance -> perContextPushCorrelationRules.put(impl.getKey(), instance));\n             } catch (Exception e) {\n-                LOG.error(\"While building {}\", correlationRule.get().getImplementation(), e);\n+                LOG.error(\"While building {}\", impl, e);\n             }\n         }\n \n@@ -160,6 +171,23 @@ public List<ConnectorObject> match(\n         return result;\n     }\n \n+    protected List<PropagationActions> getPropagationActions(final ExternalResource resource) {\n+        List<PropagationActions> result = new ArrayList<>();\n+\n+        resource.getPropagationActions().forEach(impl -> {\n+            try {\n+                result.add(ImplementationManager.build(\n+                        impl,\n+                        () -> perContextActions.get(impl.getKey()),\n+                        instance -> perContextActions.put(impl.getKey(), instance)));\n+            } catch (Exception e) {\n+                LOG.error(\"While building {}\", impl, e);\n+            }\n+        });\n+\n+        return result;\n+    }\n+\n     @Transactional(readOnly = true)\n     public List<ConnectorObject> match(\n             final Connector connector,\n@@ -169,19 +197,11 @@ public List<ConnectorObject> match(\n             final Optional<String[]> moreAttrsToGet,\n             final Item... linkingItems) {\n \n-        Set<String> matgFromPropagationActions = new HashSet<>();\n-        resource.getPropagationActions().forEach(impl -> {\n-            try {\n-                matgFromPropagationActions.addAll(\n-                        ImplementationManager.<PropagationActions>build(impl).\n-                                moreAttrsToGet(Optional.empty(), provision));\n-            } catch (Exception e) {\n-                LOG.error(\"While building {}\", impl, e);\n-            }\n-        });\n+        Stream<String> matgFromPropagationActions = getPropagationActions(resource).stream().\n+                flatMap(a -> a.moreAttrsToGet(Optional.empty(), provision).stream());\n         Optional<String[]> effectiveMATG = Optional.of(Stream.concat(\n                 moreAttrsToGet.stream().flatMap(Stream::of),\n-                matgFromPropagationActions.stream()).toArray(String[]::new));\n+                matgFromPropagationActions).toArray(String[]::new));\n \n         Optional<PushCorrelationRule> rule = rule(resource, provision);\n "},{"sha":"f077b2c49936ce16c6c658e532c5d0e411617875","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":39,"deletions":32,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n@@ -34,6 +35,7 @@\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -42,6 +44,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -87,11 +90,18 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n+    @Autowired\n+    protected PlainAttrValidationManager validator;\n+\n     protected final Map<String, SyncToken> latestSyncTokens = new HashMap<>();\n \n+    protected ProvisioningProfile<PullTask, PullActions> profile;\n+\n     protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n \n-    protected ProvisioningProfile<PullTask, PullActions> profile;\n+    protected final Map<String, PullActions> perContextActions = new ConcurrentHashMap<>();\n+\n+    protected Optional<ReconFilterBuilder> perContextReconFilterBuilder = Optional.empty();\n \n     @Override\n     public void setLatestSyncToken(final String objectClass, final SyncToken latestSyncToken) {\n@@ -165,22 +175,28 @@ protected void setGroupOwners(final GroupPullResultHandler ghandler) {\n         });\n     }\n \n-    protected List<PullActions> buildPullActions(final PullTask pullTask) {\n-        List<PullActions> actions = new ArrayList<>();\n-        pullTask.getActions().forEach(impl -> {\n+    protected List<PullActions> getPullActions(final List<? extends Implementation> impls) {\n+        List<PullActions> result = new ArrayList<>();\n+\n+        impls.forEach(impl -> {\n             try {\n-                actions.add(ImplementationManager.build(impl));\n+                result.add(ImplementationManager.build(\n+                        impl,\n+                        () -> perContextActions.get(impl.getKey()),\n+                        instance -> perContextActions.put(impl.getKey(), instance)));\n             } catch (Exception e) {\n                 LOG.warn(\"While building {}\", impl, e);\n             }\n         });\n-        return actions;\n-    }\n \n-    protected ReconFilterBuilder buildReconFilterBuilder(final PullTask pullTask)\n-            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        return result;\n+    }\n \n-        return ImplementationManager.build(pullTask.getReconFilterBuilder());\n+    protected ReconFilterBuilder getReconFilterBuilder(final PullTask pullTask) throws ClassNotFoundException {\n+        return ImplementationManager.build(\n+                pullTask.getReconFilterBuilder(),\n+                () -> perContextReconFilterBuilder.orElse(null),\n+                instance -> perContextReconFilterBuilder = Optional.of(instance));\n     }\n \n     protected RealmPullResultHandler buildRealmHandler() {\n@@ -217,10 +233,8 @@ protected String doExecuteProvisioning(\n \n         LOG.debug(\"Executing pull on {}\", pullTask.getResource());\n \n-        List<PullActions> actions = buildPullActions(pullTask);\n-\n         profile = new ProvisioningProfile<>(connector, pullTask);\n-        profile.getActions().addAll(actions);\n+        profile.getActions().addAll(getPullActions(pullTask.getActions()));\n         profile.setDryRun(dryRun);\n         profile.setConflictResolutionAction(pullTask.getResource().getPullPolicy() == null\n                 ? ConflictResolutionAction.IGNORE\n@@ -230,7 +244,7 @@ protected String doExecuteProvisioning(\n         latestSyncTokens.clear();\n \n         if (!profile.isDryRun()) {\n-            for (PullActions action : actions) {\n+            for (PullActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }\n         }\n@@ -244,7 +258,7 @@ protected String doExecuteProvisioning(\n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n \n             Set<String> moreAttrsToGet = new HashSet<>();\n-            actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, orgUnit)));\n+            profile.getActions().forEach(a -> moreAttrsToGet.addAll(a.moreAttrsToGet(profile, orgUnit)));\n             OperationOptions options = MappingUtils.buildOperationOptions(\n                     MappingUtils.getPullItems(orgUnit.getItems().stream()), moreAttrsToGet.toArray(String[]::new));\n \n@@ -274,9 +288,8 @@ protected String doExecuteProvisioning(\n                         break;\n \n                     case FILTERED_RECONCILIATION:\n-                        connector.filteredReconciliation(\n-                                new ObjectClass(orgUnit.getObjectClass()),\n-                                buildReconFilterBuilder(pullTask),\n+                        connector.filteredReconciliation(new ObjectClass(orgUnit.getObjectClass()),\n+                                getReconFilterBuilder(pullTask),\n                                 handler,\n                                 options);\n                         break;\n@@ -295,14 +308,7 @@ protected String doExecuteProvisioning(\n         }\n \n         // ...then provisions for any types\n-        ProvisionSorter provisionSorter = new DefaultProvisionSorter();\n-        if (pullTask.getResource().getProvisionSorter() != null) {\n-            try {\n-                provisionSorter = ImplementationManager.build(pullTask.getResource().getProvisionSorter());\n-            } catch (Exception e) {\n-                LOG.error(\"While building {}\", pullTask.getResource().getProvisionSorter(), e);\n-            }\n-        }\n+        ProvisionSorter provisionSorter = getProvisionSorter(pullTask);\n \n         GroupPullResultHandler ghandler = buildGroupHandler();\n         for (Provision provision : pullTask.getResource().getProvisions().stream().\n@@ -332,7 +338,7 @@ protected String doExecuteProvisioning(\n \n             try {\n                 Set<String> moreAttrsToGet = new HashSet<>();\n-                actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n+                profile.getActions().forEach(a -> moreAttrsToGet.addAll(a.moreAttrsToGet(profile, provision)));\n                 Stream<Item> mapItems = Stream.concat(\n                         MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n                         virSchemaDAO.find(pullTask.getResource().getKey(), anyType.getKey()).stream().\n@@ -362,9 +368,8 @@ protected String doExecuteProvisioning(\n                         break;\n \n                     case FILTERED_RECONCILIATION:\n-                        connector.filteredReconciliation(\n-                                new ObjectClass(provision.getObjectClass()),\n-                                buildReconFilterBuilder(pullTask),\n+                        connector.filteredReconciliation(new ObjectClass(provision.getObjectClass()),\n+                                getReconFilterBuilder(pullTask),\n                                 handler,\n                                 options);\n                         break;\n@@ -385,7 +390,9 @@ protected String doExecuteProvisioning(\n                             && result.getOperation() == ResourceOperation.CREATE\n                             && result.getAnyType().equals(provision.getAnyType())).\n                             forEach(result -> anyUtils.addAttr(\n-                            result.getKey(), plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue()));\n+                            validator,\n+                            result.getKey(),\n+                            plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue()));\n                 }\n             } catch (Throwable t) {\n                 throw new JobExecutionException(\"While pulling from connector\", t);\n@@ -398,7 +405,7 @@ protected String doExecuteProvisioning(\n         }\n \n         if (!profile.isDryRun()) {\n-            for (PullActions action : actions) {\n+            for (PullActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n         }"},{"sha":"18305af5bdc93948f3e59309b4b1122a724213a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":25,"deletions":20,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.MutablePair;\n@@ -38,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -83,6 +85,8 @@ public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n     protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n \n+    protected final Map<String, PushActions> perContextActions = new ConcurrentHashMap<>();\n+\n     protected void reportHandled(final String anyType, final String key) {\n         MutablePair<Integer, String> pair = handled.get(anyType);\n         if (pair == null) {\n@@ -151,6 +155,23 @@ protected GroupPushResultHandler buildGroupHandler() {\n                 createBean(DefaultGroupPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n+    protected List<PushActions> getPushActions(final List<? extends Implementation> impls) {\n+        List<PushActions> result = new ArrayList<>();\n+\n+        impls.forEach(impl -> {\n+            try {\n+                result.add(ImplementationManager.build(\n+                        impl,\n+                        () -> perContextActions.get(impl.getKey()),\n+                        instance -> perContextActions.put(impl.getKey(), instance)));\n+            } catch (Exception e) {\n+                LOG.warn(\"While building {}\", impl, e);\n+            }\n+        });\n+\n+        return result;\n+    }\n+\n     @Override\n     protected String doExecuteProvisioning(\n             final PushTask pushTask,\n@@ -161,25 +182,16 @@ protected String doExecuteProvisioning(\n \n         LOG.debug(\"Executing push on {}\", pushTask.getResource());\n \n-        List<PushActions> actions = new ArrayList<>();\n-        pushTask.getActions().forEach(impl -> {\n-            try {\n-                actions.add(ImplementationManager.build(impl));\n-            } catch (Exception e) {\n-                LOG.warn(\"While building {}\", impl, e);\n-            }\n-        });\n-\n         profile = new ProvisioningProfile<>(connector, pushTask);\n-        profile.getActions().addAll(actions);\n+        profile.getActions().addAll(getPushActions(pushTask.getActions()));\n         profile.setDryRun(dryRun);\n         profile.setConflictResolutionAction(pushTask.getResource().getPushPolicy() == null\n                 ? ConflictResolutionAction.IGNORE\n                 : pushTask.getResource().getPushPolicy().getConflictResolutionAction());\n         profile.setExecutor(executor);\n \n         if (!profile.isDryRun()) {\n-            for (PushActions action : actions) {\n+            for (PushActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }\n         }\n@@ -208,14 +220,7 @@ protected String doExecuteProvisioning(\n         }\n \n         // ...then provisions for any types\n-        ProvisionSorter provisionSorter = new DefaultProvisionSorter();\n-        if (pushTask.getResource().getProvisionSorter() != null) {\n-            try {\n-                provisionSorter = ImplementationManager.build(pushTask.getResource().getProvisionSorter());\n-            } catch (Exception e) {\n-                LOG.error(\"While building {}\", pushTask.getResource().getProvisionSorter(), e);\n-            }\n-        }\n+        ProvisionSorter provisionSorter = getProvisionSorter(pushTask);\n \n         for (Provision provision : pushTask.getResource().getProvisions().stream().\n                 filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n@@ -269,7 +274,7 @@ protected String doExecuteProvisioning(\n         }\n \n         if (!profile.isDryRun() && !interrupt) {\n-            for (PushActions action : actions) {\n+            for (PushActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n         }"},{"sha":"a71163ec3de276b40933d3ddf9070143acf0fcbd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":7,"deletions":22,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,26 +18,25 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -50,7 +49,6 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -75,20 +73,6 @@ public List<ProvisioningReport> pull(\n \n         LOG.debug(\"Executing pull on {}\", resource);\n \n-        List<PullActions> actions = new ArrayList<>();\n-        pullTaskTO.getActions().forEach(key -> {\n-            Implementation impl = implementationDAO.find(key);\n-            if (impl == null || !IdMImplementationType.PULL_ACTIONS.equals(impl.getType())) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n-            } else {\n-                try {\n-                    actions.add(ImplementationManager.build(impl));\n-                } catch (Exception e) {\n-                    LOG.warn(\"While building {}\", impl, e);\n-                }\n-            }\n-        });\n-\n         try {\n             PullTask pullTask = entityFactory.newEntity(PullTask.class);\n             pullTask.setResource(resource);\n@@ -125,10 +109,11 @@ public List<ProvisioningReport> pull(\n             profile = new ProvisioningProfile<>(connector, pullTask);\n             profile.setDryRun(false);\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n-            profile.getActions().addAll(actions);\n+            profile.getActions().addAll(getPullActions(pullTaskTO.getActions().stream().\n+                    map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n             profile.setExecutor(executor);\n \n-            for (PullActions action : actions) {\n+            for (PullActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }\n \n@@ -154,7 +139,7 @@ public List<ProvisioningReport> pull(\n \n             // execute filtered pull\n             Set<String> matg = new HashSet<>(moreAttrsToGet);\n-            actions.forEach(action -> matg.addAll(action.moreAttrsToGet(profile, provision)));\n+            profile.getActions().forEach(a -> matg.addAll(a.moreAttrsToGet(profile, provision)));\n \n             Stream<Item> mapItems = Stream.concat(\n                     MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n@@ -173,7 +158,7 @@ public List<ProvisioningReport> pull(\n                 LOG.error(\"While setting group owners\", e);\n             }\n \n-            for (PullActions action : actions) {\n+            for (PullActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n "},{"sha":"9e67fce043a06536836888b77b6fecda9373f26b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":10,"deletions":27,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,20 +18,19 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n-import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -40,7 +39,6 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -49,28 +47,14 @@ public class SinglePushJobDelegate extends PushJobDelegate implements SyncopeSin\n     @Autowired\n     protected ImplementationDAO implementationDAO;\n \n-    protected List<PushActions> before(\n+    protected void before(\n             final ExternalResource resource,\n             final Connector connector,\n             final PushTaskTO pushTaskTO,\n             final String executor) throws JobExecutionException {\n \n         LOG.debug(\"Executing push on {}\", resource);\n \n-        List<PushActions> actions = new ArrayList<>();\n-        pushTaskTO.getActions().forEach(key -> {\n-            Implementation impl = implementationDAO.find(key);\n-            if (impl == null || !IdMImplementationType.PUSH_ACTIONS.equals(impl.getType())) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n-            } else {\n-                try {\n-                    actions.add(ImplementationManager.build(impl));\n-                } catch (Exception e) {\n-                    LOG.warn(\"While building {}\", impl, e);\n-                }\n-            }\n-        });\n-\n         PushTask pushTask = entityFactory.newEntity(PushTask.class);\n         pushTask.setResource(resource);\n         pushTask.setMatchingRule(pushTaskTO.getMatchingRule() == null\n@@ -84,14 +68,13 @@ protected List<PushActions> before(\n \n         profile = new ProvisioningProfile<>(connector, pushTask);\n         profile.setExecutor(executor);\n-        profile.getActions().addAll(actions);\n+        profile.getActions().addAll(getPushActions(pushTaskTO.getActions().stream().\n+                map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n         profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n-        for (PushActions action : actions) {\n+        for (PushActions action : profile.getActions()) {\n             action.beforeAll(profile);\n         }\n-\n-        return actions;\n     }\n \n     @Override\n@@ -104,7 +87,7 @@ public List<ProvisioningReport> push(\n             final String executor) throws JobExecutionException {\n \n         try {\n-            List<PushActions> actions = before(resource, connector, pushTaskTO, executor);\n+            before(resource, connector, pushTaskTO, executor);\n \n             AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n \n@@ -126,7 +109,7 @@ public List<ProvisioningReport> push(\n \n             doHandle(List.of(any), handler, resource);\n \n-            for (PushActions action : actions) {\n+            for (PushActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n \n@@ -148,14 +131,14 @@ public ProvisioningReport push(\n             final String executor) throws JobExecutionException {\n \n         try {\n-            List<PushActions> actions = before(resource, connector, pushTaskTO, executor);\n+            before(resource, connector, pushTaskTO, executor);\n \n             UserPushResultHandler handler = buildUserHandler();\n             handler.setProfile(profile);\n \n             handler.handle(account, provision);\n \n-            for (PushActions action : actions) {\n+            for (PushActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n "},{"sha":"4d39209061f312ae1b9828f4e329bc8f3c70afd1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"modified","additions":7,"deletions":20,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull.stream;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.Mapping;\n@@ -52,7 +53,6 @@\n import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPullExecutor;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobExecutionException;\n@@ -168,20 +168,6 @@ public List<ProvisioningReport> pull(\n \n         LOG.debug(\"Executing stream pull\");\n \n-        List<PullActions> actions = new ArrayList<>();\n-        pullTaskTO.getActions().forEach(key -> {\n-            Implementation impl = implementationDAO.find(key);\n-            if (impl == null || !IdMImplementationType.PULL_ACTIONS.equals(impl.getType())) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n-            } else {\n-                try {\n-                    actions.add(ImplementationManager.build(impl));\n-                } catch (Exception e) {\n-                    LOG.warn(\"While building {}\", impl, e);\n-                }\n-            }\n-        });\n-\n         try {\n             ExternalResource resource =\n                     externalResource(anyType, keyColumn, columns, conflictResolutionAction, pullCorrelationRule);\n@@ -202,9 +188,10 @@ public List<ProvisioningReport> pull(\n             profile = new ProvisioningProfile<>(connector, pullTask);\n             profile.setDryRun(false);\n             profile.setConflictResolutionAction(conflictResolutionAction);\n-            profile.getActions().addAll(actions);\n+            profile.getActions().addAll(getPullActions(pullTaskTO.getActions().stream().\n+                    map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n \n-            for (PullActions action : actions) {\n+            for (PullActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }\n \n@@ -228,7 +215,7 @@ public List<ProvisioningReport> pull(\n \n             // execute filtered pull\n             Set<String> moreAttrsToGet = new HashSet<>();\n-            actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n+            profile.getActions().forEach(a -> moreAttrsToGet.addAll(a.moreAttrsToGet(profile, provision)));\n \n             Stream<Item> mapItems = Stream.concat(\n                     MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n@@ -246,7 +233,7 @@ public List<ProvisioningReport> pull(\n                 LOG.error(\"While setting group owners\", e);\n             }\n \n-            for (PullActions action : actions) {\n+            for (PullActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n "},{"sha":"7c9c765f85c7b7907def680ae69247d3183c5de2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"modified","additions":6,"deletions":19,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull.stream;\n \n-import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.Provision;\n@@ -44,7 +45,6 @@\n import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPushExecutor;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -128,20 +128,6 @@ public List<ProvisioningReport> push(\n \n         LOG.debug(\"Executing stream push as {}\", executor);\n \n-        List<PushActions> pushActions = new ArrayList<>();\n-        pushTaskTO.getActions().forEach(key -> {\n-            Implementation impl = implementationDAO.find(key);\n-            if (impl == null || !IdMImplementationType.PUSH_ACTIONS.equals(impl.getType())) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n-            } else {\n-                try {\n-                    pushActions.add(ImplementationManager.build(impl));\n-                } catch (Exception e) {\n-                    LOG.warn(\"While building {}\", impl, e);\n-                }\n-            }\n-        });\n-\n         try {\n             ExternalResource resource = externalResource(anyType, columns, propagationActions);\n \n@@ -156,10 +142,11 @@ public List<ProvisioningReport> push(\n \n             profile = new ProvisioningProfile<>(connector, pushTask);\n             profile.setExecutor(executor);\n-            profile.getActions().addAll(pushActions);\n+            profile.getActions().addAll(getPushActions(pushTaskTO.getActions().stream().\n+                    map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n-            for (PushActions action : pushActions) {\n+            for (PushActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }\n \n@@ -181,7 +168,7 @@ public List<ProvisioningReport> push(\n \n             doHandle(anys, handler, resource);\n \n-            for (PushActions action : pushActions) {\n+            for (PushActions action : profile.getActions()) {\n                 action.afterAll(profile);\n             }\n "},{"sha":"46d49cbfdd3ae8495f00176d54758600a8c79951","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -21,8 +21,10 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -49,6 +51,8 @@ public final class MappingUtils {\n \n     private static final Logger LOG = LoggerFactory.getLogger(MappingUtils.class);\n \n+    private static final Map<String, ItemTransformer> PER_CONTEXT_ITEM_TRANSFORMERS = new ConcurrentHashMap<>();\n+\n     public static Optional<Item> getConnObjectKeyItem(final Provision provision) {\n         Mapping mapping = null;\n         if (provision != null) {\n@@ -91,7 +95,10 @@ public static List<ItemTransformer> getItemTransformers(\n         // Then other custom transformers\n         transformers.forEach(impl -> {\n             try {\n-                result.add(ImplementationManager.build(impl));\n+                result.add(ImplementationManager.build(\n+                        impl,\n+                        () -> PER_CONTEXT_ITEM_TRANSFORMERS.get(impl.getKey()),\n+                        instance -> PER_CONTEXT_ITEM_TRANSFORMERS.put(impl.getKey(), instance)));\n             } catch (Exception e) {\n                 LOG.error(\"While building {}\", impl, e);\n             }"},{"sha":"e15ed0c937d1e8d6d000e7557ac02ae4521a23b3","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DefaultMappingManagerTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -84,6 +85,9 @@ public class DefaultMappingManagerTest extends AbstractTest {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private PlainAttrValidationManager validator;\n+\n     @Test\n     public void prepareAttrsForUser() {\n         User bellini = userDAO.findByUsername(\"bellini\");\n@@ -251,7 +255,7 @@ public void issueSYNCOPE1583() {\n         UPlainAttr cool = entityFactory.newEntity(UPlainAttr.class);\n         cool.setOwner(user);\n         cool.setSchema(plainSchemaDAO.find(\"cool\"));\n-        cool.add(\"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n+        cool.add(validator, \"true\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         user.add(cool);\n \n         user = userDAO.save(user);"},{"sha":"7b69fee18035ab60bb4f26646c0c505192410a8b","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java","status":"removed","additions":0,"deletions":250,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4014601f040b4a48c46585e4259d968bce554ec8/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4014601f040b4a48c46585e4259d968bce554ec8/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java?ref=4014601f040b4a48c46585e4259d968bce554ec8","patch":"@@ -1,250 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.spring;\n-\n-import groovy.lang.GroovyClassLoader;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n-import org.apache.syncope.common.lib.policy.AccountRuleConf;\n-import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n-import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n-import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n-import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n-import org.apache.syncope.core.persistence.api.dao.AccountRule;\n-import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n-import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n-import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n-import org.apache.syncope.core.persistence.api.dao.Reportlet;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-\n-public final class ImplementationManager {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationManager.class);\n-\n-    private static final GroovyClassLoader GROOVY_CLASSLOADER = new GroovyClassLoader();\n-\n-    private static final Map<String, Class<?>> CLASS_CACHE = Collections.synchronizedMap(new HashMap<>());\n-\n-    public static Optional<Reportlet> buildReportlet(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException {\n-\n-        switch (impl.getEngine()) {\n-            case GROOVY:\n-                return Optional.of(ImplementationManager.<Reportlet>buildGroovy(impl));\n-\n-            case JAVA:\n-            default:\n-                ReportletConf reportletConf = POJOHelper.deserialize(impl.getBody(), ReportletConf.class);\n-                Class<? extends Reportlet> reportletClass = ApplicationContextProvider.getApplicationContext().\n-                        getBean(ImplementationLookup.class).getReportletClass(reportletConf.getClass());\n-\n-                Reportlet reportlet = buildJavaWithConf(reportletClass);\n-                if (reportlet == null) {\n-                    LOG.warn(\"Could not find matching reportlet for {}\", reportletConf.getClass());\n-                } else {\n-                    reportlet.setConf(reportletConf);\n-                }\n-\n-                return Optional.ofNullable(reportlet);\n-        }\n-    }\n-\n-    public static Optional<AccountRule> buildAccountRule(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException {\n-\n-        switch (impl.getEngine()) {\n-            case GROOVY:\n-                return Optional.of(ImplementationManager.<AccountRule>buildGroovy(impl));\n-\n-            case JAVA:\n-            default:\n-                AccountRuleConf ruleConf = POJOHelper.deserialize(impl.getBody(), AccountRuleConf.class);\n-                Class<? extends AccountRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n-                        getBean(ImplementationLookup.class).getAccountRuleClass(ruleConf.getClass());\n-\n-                AccountRule rule = buildJavaWithConf(ruleClass);\n-                if (rule == null) {\n-                    LOG.warn(\"Could not find matching account rule for {}\", impl.getClass());\n-                } else {\n-                    rule.setConf(ruleConf);\n-                }\n-\n-                return Optional.ofNullable(rule);\n-        }\n-    }\n-\n-    public static Optional<PasswordRule> buildPasswordRule(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException {\n-\n-        switch (impl.getEngine()) {\n-            case GROOVY:\n-                return Optional.of(ImplementationManager.<PasswordRule>buildGroovy(impl));\n-\n-            case JAVA:\n-            default:\n-                PasswordRuleConf ruleConf = POJOHelper.deserialize(impl.getBody(), PasswordRuleConf.class);\n-                Class<? extends PasswordRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n-                        getBean(ImplementationLookup.class).getPasswordRuleClass(ruleConf.getClass());\n-\n-                PasswordRule rule = buildJavaWithConf(ruleClass);\n-                if (rule == null) {\n-                    LOG.warn(\"Could not find matching password rule for {}\", impl.getClass());\n-                } else {\n-                    rule.setConf(ruleConf);\n-                }\n-\n-                return Optional.ofNullable(rule);\n-        }\n-    }\n-\n-    public static Optional<PullCorrelationRule> buildPullCorrelationRule(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException {\n-\n-        switch (impl.getEngine()) {\n-            case GROOVY:\n-                return Optional.of(ImplementationManager.<PullCorrelationRule>buildGroovy(impl));\n-\n-            case JAVA:\n-            default:\n-                PullCorrelationRuleConf ruleConf =\n-                        POJOHelper.deserialize(impl.getBody(), PullCorrelationRuleConf.class);\n-                Class<? extends PullCorrelationRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n-                        getBean(ImplementationLookup.class).getPullCorrelationRuleClass(ruleConf.getClass());\n-\n-                PullCorrelationRule rule = buildJavaWithConf(ruleClass);\n-                if (rule == null) {\n-                    LOG.warn(\"Could not find matching pull correlation rule for {}\", impl.getClass());\n-                } else {\n-                    rule.setConf(ruleConf);\n-                }\n-\n-                return Optional.ofNullable(rule);\n-        }\n-    }\n-\n-    public static Optional<PushCorrelationRule> buildPushCorrelationRule(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException {\n-\n-        switch (impl.getEngine()) {\n-            case GROOVY:\n-                return Optional.of(ImplementationManager.<PushCorrelationRule>buildGroovy(impl));\n-\n-            case JAVA:\n-            default:\n-                PushCorrelationRuleConf ruleConf =\n-                        POJOHelper.deserialize(impl.getBody(), PushCorrelationRuleConf.class);\n-                Class<? extends PushCorrelationRule> ruleClass = ApplicationContextProvider.getApplicationContext().\n-                        getBean(ImplementationLookup.class).getPushCorrelationRuleClass(ruleConf.getClass());\n-\n-                PushCorrelationRule rule = buildJavaWithConf(ruleClass);\n-                if (rule == null) {\n-                    LOG.warn(\"Could not find matching push correlation rule for {}\", impl.getClass());\n-                } else {\n-                    rule.setConf(ruleConf);\n-                }\n-\n-                return Optional.ofNullable(rule);\n-        }\n-    }\n-\n-    public static <T> T build(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n-\n-        switch (impl.getEngine()) {\n-            case GROOVY:\n-                return ImplementationManager.<T>buildGroovy(impl);\n-\n-            case JAVA:\n-            default:\n-                return ImplementationManager.<T>buildJava(impl);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static <T> T buildGroovy(final Implementation impl)\n-            throws InstantiationException, IllegalAccessException {\n-\n-        Class<?> clazz;\n-        if (CLASS_CACHE.containsKey(impl.getKey())) {\n-            clazz = CLASS_CACHE.get(impl.getKey());\n-        } else {\n-            clazz = GROOVY_CLASSLOADER.parseClass(impl.getBody());\n-            CLASS_CACHE.put(impl.getKey(), clazz);\n-        }\n-\n-        return (T) ApplicationContextProvider.getBeanFactory().\n-                createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static <T> T buildJava(final Implementation impl)\n-            throws ClassNotFoundException {\n-\n-        Class<?> clazz;\n-        if (CLASS_CACHE.containsKey(impl.getKey())) {\n-            clazz = CLASS_CACHE.get(impl.getKey());\n-        } else {\n-            clazz = Class.forName(impl.getBody());\n-            CLASS_CACHE.put(impl.getKey(), clazz);\n-        }\n-\n-        return (T) ApplicationContextProvider.getBeanFactory().\n-                createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private static <T> T buildJavaWithConf(final Class<T> clazz) {\n-        if (clazz != null) {\n-            String domainableBeanNameWithConf = AuthContextUtils.getDomain() + clazz.getName();\n-            DefaultListableBeanFactory beanFactory = ApplicationContextProvider.getBeanFactory();\n-\n-            if (beanFactory.containsSingleton(domainableBeanNameWithConf)) {\n-                return (T) beanFactory.getSingleton(domainableBeanNameWithConf);\n-            }\n-\n-            synchronized (beanFactory.getSingletonMutex()) {\n-                if (beanFactory.containsSingleton(domainableBeanNameWithConf)) {\n-                    return (T) beanFactory.getSingleton(domainableBeanNameWithConf);\n-                } else {\n-                    T bean = (T) beanFactory.createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    beanFactory.registerSingleton(domainableBeanNameWithConf, bean);\n-                    return bean;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static Class<?> purge(final String implementation) {\n-        return CLASS_CACHE.remove(implementation);\n-    }\n-\n-    private ImplementationManager() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"9ca5410ce5250f32b06c6bcb5eee3a2fc0b014a4","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/implementation/ImplementationManager.java","status":"added","additions":252,"deletions":0,"changes":252,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring;\n+\n+import groovy.lang.GroovyClassLoader;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+\n+public final class ImplementationManager {\n+\n+    private static final GroovyClassLoader GROOVY_CLASSLOADER = new GroovyClassLoader();\n+\n+    private static final Map<String, Class<?>> CLASS_CACHE = Collections.synchronizedMap(new HashMap<>());\n+\n+    public static Optional<Reportlet> buildReportlet(final Implementation impl) throws ClassNotFoundException {\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(build(impl));\n+\n+            case JAVA:\n+            default:\n+                ReportletConf conf = POJOHelper.deserialize(impl.getBody(), ReportletConf.class);\n+                Class<? extends Reportlet> clazz = ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getReportletClass(conf.getClass());\n+\n+                if (clazz == null) {\n+                    return Optional.empty();\n+                }\n+\n+                Reportlet reportlet = (Reportlet) ApplicationContextProvider.getBeanFactory().\n+                        createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                reportlet.setConf(conf);\n+                return Optional.of(reportlet);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<AccountRule> buildAccountRule(\n+            final Implementation impl,\n+            final Supplier<AccountRule> cacheGetter,\n+            final Consumer<AccountRule> cachePutter)\n+            throws ClassNotFoundException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(build(impl, cacheGetter, cachePutter));\n+\n+            case JAVA:\n+            default:\n+                AccountRuleConf conf = POJOHelper.deserialize(impl.getBody(), AccountRuleConf.class);\n+                Class<AccountRule> clazz = (Class<AccountRule>) ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getAccountRuleClass(conf.getClass());\n+\n+                if (clazz == null) {\n+                    return Optional.empty();\n+                }\n+\n+                AccountRule rule = build(clazz, true, cacheGetter, cachePutter);\n+                rule.setConf(conf);\n+                return Optional.of(rule);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<PasswordRule> buildPasswordRule(\n+            final Implementation impl,\n+            final Supplier<PasswordRule> cacheGetter,\n+            final Consumer<PasswordRule> cachePutter)\n+            throws ClassNotFoundException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(build(impl, cacheGetter, cachePutter));\n+\n+            case JAVA:\n+            default:\n+                PasswordRuleConf conf = POJOHelper.deserialize(impl.getBody(), PasswordRuleConf.class);\n+                Class<PasswordRule> clazz = (Class<PasswordRule>) ApplicationContextProvider.getApplicationContext().\n+                        getBean(ImplementationLookup.class).getPasswordRuleClass(conf.getClass());\n+\n+                if (clazz == null) {\n+                    return Optional.empty();\n+                }\n+\n+                PasswordRule rule = build(clazz, true, cacheGetter, cachePutter);\n+                rule.setConf(conf);\n+                return Optional.of(rule);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<PullCorrelationRule> buildPullCorrelationRule(\n+            final Implementation impl,\n+            final Supplier<PullCorrelationRule> cacheGetter,\n+            final Consumer<PullCorrelationRule> cachePutter)\n+            throws ClassNotFoundException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(build(impl, cacheGetter, cachePutter));\n+\n+            case JAVA:\n+            default:\n+                PullCorrelationRuleConf conf = POJOHelper.deserialize(impl.getBody(), PullCorrelationRuleConf.class);\n+                Class<PullCorrelationRule> clazz =\n+                        (Class<PullCorrelationRule>) ApplicationContextProvider.getApplicationContext().\n+                                getBean(ImplementationLookup.class).getPullCorrelationRuleClass(conf.getClass());\n+\n+                if (clazz == null) {\n+                    return Optional.empty();\n+                }\n+\n+                PullCorrelationRule rule = build(clazz, true, cacheGetter, cachePutter);\n+                rule.setConf(conf);\n+                return Optional.of(rule);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static Optional<PushCorrelationRule> buildPushCorrelationRule(\n+            final Implementation impl,\n+            final Supplier<PushCorrelationRule> cacheGetter,\n+            final Consumer<PushCorrelationRule> cachePutter)\n+            throws ClassNotFoundException {\n+\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                return Optional.of(build(impl, cacheGetter, cachePutter));\n+\n+            case JAVA:\n+            default:\n+                PushCorrelationRuleConf conf = POJOHelper.deserialize(impl.getBody(), PushCorrelationRuleConf.class);\n+                Class<PushCorrelationRule> clazz =\n+                        (Class<PushCorrelationRule>) ApplicationContextProvider.getApplicationContext().\n+                                getBean(ImplementationLookup.class).getPushCorrelationRuleClass(conf.getClass());\n+\n+                if (clazz == null) {\n+                    return Optional.empty();\n+                }\n+\n+                PushCorrelationRule rule = build(clazz, true, cacheGetter, cachePutter);\n+                rule.setConf(conf);\n+                return Optional.of(rule);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> Pair<Class<T>, Boolean> getClass(final Implementation impl) throws ClassNotFoundException {\n+        if (CLASS_CACHE.containsKey(impl.getKey())) {\n+            return Pair.of((Class<T>) CLASS_CACHE.get(impl.getKey()), true);\n+        }\n+\n+        Class<?> clazz;\n+        switch (impl.getEngine()) {\n+            case GROOVY:\n+                clazz = GROOVY_CLASSLOADER.parseClass(impl.getBody());\n+                break;\n+\n+            case JAVA:\n+            default:\n+                clazz = Class.forName(impl.getBody());\n+        }\n+\n+        CLASS_CACHE.put(impl.getKey(), clazz);\n+        return Pair.of((Class<T>) clazz, false);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T build(final Implementation impl) throws ClassNotFoundException {\n+        return (T) ApplicationContextProvider.getBeanFactory().\n+                createBean(getClass(impl).getLeft(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> T build(\n+            final Class<T> clazz,\n+            final boolean classCached,\n+            final Supplier<T> cacheGetter,\n+            final Consumer<T> cachePutter) {\n+\n+        boolean perContext = Optional.ofNullable(clazz.getAnnotation(SyncopeImplementation.class)).\n+                map(ann -> ann.scope() == InstanceScope.PER_CONTEXT).\n+                orElse(true);\n+        T instance = null;\n+        if (perContext && classCached) {\n+            instance = cacheGetter.get();\n+        }\n+        if (instance == null) {\n+            instance = (T) ApplicationContextProvider.getBeanFactory().\n+                    createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+\n+            if (perContext) {\n+                cachePutter.accept(instance);\n+            }\n+        }\n+\n+        return instance;\n+    }\n+\n+    public static <T> T build(final Implementation impl, final Supplier<T> cacheGetter, final Consumer<T> cachePutter)\n+            throws ClassNotFoundException {\n+\n+        Pair<Class<T>, Boolean> clazz = getClass(impl);\n+\n+        return build(clazz.getLeft(), clazz.getRight(), cacheGetter, cachePutter);\n+    }\n+\n+    public static Class<?> purge(final String implementation) {\n+        return CLASS_CACHE.remove(implementation);\n+    }\n+\n+    private ImplementationManager() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"fb76a8330323c2823e871e3e7a0af1438ff9b118","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/implementation/InstanceScope.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FInstanceScope.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FInstanceScope.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FInstanceScope.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.implementation;\n+\n+public enum InstanceScope {\n+    /**\n+     * The declaring Implementation will be instantiated every time it is getting invoked.\n+     */\n+    PER_CALL,\n+    /**\n+     * The declaring Implementation will be instantiated once, by the time of first invocation; such instance will\n+     * not be destroyed until the Spring Context gets refreshed or shut down.\n+     */\n+    PER_CONTEXT\n+\n+}"},{"sha":"30e8ee750c8b4d8430daced0347a4826884311b6","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/implementation/SyncopeImplementation.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FSyncopeImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FSyncopeImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FSyncopeImplementation.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.implementation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface SyncopeImplementation {\n+\n+    InstanceScope scope() default InstanceScope.PER_CONTEXT;\n+}"},{"sha":"daa33514ef76dd112743f6b8240c7ab6a8c8382c","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":27,"deletions":11,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -20,9 +20,13 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n@@ -48,6 +52,8 @@ public class DefaultPasswordGenerator implements PasswordGenerator {\n \n     protected static final int MIN_LENGTH_IF_ZERO = 8;\n \n+    protected final Map<String, PasswordRule> perContextPasswordRules = new ConcurrentHashMap<>();\n+\n     @Transactional(readOnly = true)\n     @Override\n     public String generate(final ExternalResource resource) {\n@@ -60,21 +66,31 @@ public String generate(final ExternalResource resource) {\n         return generate(policies);\n     }\n \n-    @Override\n-    public String generate(final List<PasswordPolicy> policies) {\n-        List<DefaultPasswordRuleConf> ruleConfs = new ArrayList<>();\n+    protected List<PasswordRule> getPasswordRules(final PasswordPolicy policy) {\n+        List<PasswordRule> result = new ArrayList<>();\n \n-        policies.stream().forEach(policy -> policy.getRules().forEach(impl -> {\n+        for (Implementation impl : policy.getRules()) {\n             try {\n-                ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> {\n-                    if (rule.getConf() instanceof DefaultPasswordRuleConf) {\n-                        ruleConfs.add((DefaultPasswordRuleConf) rule.getConf());\n-                    }\n-                });\n+                ImplementationManager.buildPasswordRule(\n+                        impl,\n+                        () -> perContextPasswordRules.get(impl.getKey()),\n+                        instance -> perContextPasswordRules.put(impl.getKey(), instance)).\n+                        ifPresent(result::add);\n             } catch (Exception e) {\n-                LOG.error(\"Invalid {}, ignoring...\", impl, e);\n+                LOG.warn(\"While building {}\", impl, e);\n             }\n-        }));\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String generate(final List<PasswordPolicy> policies) {\n+        List<DefaultPasswordRuleConf> ruleConfs = new ArrayList<>();\n+\n+        policies.stream().forEach(policy -> getPasswordRules(policy).stream().\n+                filter(rule -> rule.getConf() instanceof DefaultPasswordRuleConf).\n+                forEach(rule -> ruleConfs.add((DefaultPasswordRuleConf) rule.getConf())));\n \n         return generate(merge(ruleConfs));\n     }"},{"sha":"3f3f0f87965121e58ea86583053230b04e32bf37","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/ImplementationManagerTest.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -51,8 +51,8 @@ public void concurrentPasswordRuleBuilding() {\n         String body = POJOHelper.serialize(createBaseDefaultPasswordRuleConf());\n \n         assertTimeoutPreemptively(Duration.ofSeconds(30), () -> {\n-            TestImplementation implementation = new TestImplementation();\n-            implementation.setBody(body);\n+            TestImplementation impl = new TestImplementation();\n+            impl.setBody(body);\n             ReentrantLock lock = new ReentrantLock();\n             lock.lock();\n             AtomicInteger runningThreads = new AtomicInteger(0);\n@@ -66,7 +66,11 @@ public void concurrentPasswordRuleBuilding() {\n                             Thread.yield();\n                         }\n                         try {\n-                            ImplementationManager.buildPasswordRule(implementation).orElseThrow();\n+                            ImplementationManager.buildPasswordRule(\n+                                    impl,\n+                                    () -> null,\n+                                    instance -> {\n+                                    }).orElseThrow();\n                         } catch (Exception e) {\n                             errorMessages.add(e.getLocalizedMessage());\n                             errorCount.incrementAndGet();"},{"sha":"757fb34cee3ba69a8ec857b2fcc834b20db4b63a","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/ElasticsearchPersistenceContext.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FElasticsearchPersistenceContext.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa;\n \n import co.elastic.clients.elasticsearch.ElasticsearchClient;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n@@ -56,6 +57,7 @@ public AnySearchDAO anySearchDAO(\n             final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n             final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator,\n             final ElasticsearchClient client,\n             final @Lazy ElasticsearchUtils elasticsearchUtils) {\n \n@@ -68,6 +70,7 @@ public AnySearchDAO anySearchDAO(\n                 schemaDAO,\n                 entityFactory,\n                 anyUtilsFactory,\n+                validator,\n                 client,\n                 elasticsearchUtils);\n     }"},{"sha":"d70d75ef3022f2758fa5cb50b914b9791bc190e8","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -116,10 +117,21 @@ public ElasticsearchAnySearchDAO(\n             final PlainSchemaDAO schemaDAO,\n             final EntityFactory entityFactory,\n             final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator,\n             final ElasticsearchClient client,\n             final ElasticsearchUtils elasticsearchUtils) {\n \n-        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, schemaDAO, entityFactory, anyUtilsFactory);\n+        super(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                validator);\n+\n         this.client = client;\n         this.elasticsearchUtils = elasticsearchUtils;\n     }"},{"sha":"67ddf4d2df141a2d21bcd1d47d16e7d69b9bf003","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToDateItemTransformer.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToDateItemTransformer.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -25,7 +25,10 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n \n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class DateToDateItemTransformer implements ItemTransformer {\n \n     @Override"},{"sha":"03e135e703d275d2beeb42db39e475f954cf6470","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DateToLongItemTransformer.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5119be8c2506d5aaa0965dd085a01756fbd3c91a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5119be8c2506d5aaa0965dd085a01756fbd3c91a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDateToLongItemTransformer.java?ref=5119be8c2506d5aaa0965dd085a01756fbd3c91a","patch":"@@ -25,7 +25,10 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n \n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n public class DateToLongItemTransformer implements ItemTransformer {\n \n     @Override"}]}