{"sha":"e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUwZjUxMmFiODhjYTAyZDc2ZDU3ZjU5ZDNhMjc3MmI4YTQ5OTFhM2I=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-13T09:04:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-13T09:04:06Z"},"message":"[SYNCOPE-172][SYNCOPE-173] Introducing a basic noop role workflow and making the PropagationManager dealing with users and roles\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/DEV_ROLE_PROVISIONING@1408644 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ad13d9d3a36d905d2d756e7ab44ff092b38b0e57","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ad13d9d3a36d905d2d756e7ab44ff092b38b0e57"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ecbac0e8f2203ea305428d46bbbfc4f2ced8cd76","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ecbac0e8f2203ea305428d46bbbfc4f2ced8cd76","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ecbac0e8f2203ea305428d46bbbfc4f2ced8cd76"}],"stats":{"total":1679,"additions":1228,"deletions":451},"files":[{"sha":"7ae391173f9ad522acdff6e3f4610777f1b6922a","filename":"client/src/main/java/org/apache/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -39,12 +39,15 @@ public abstract class AbstractAttributableTO extends ConnObjectTO {\n \n     private Set<String> resources;\n \n+    private List<PropagationTO> propagationTOs;\n+\n     protected AbstractAttributableTO() {\n         super();\n \n         derivedAttributes = new ArrayList<AttributeTO>();\n         virtualAttributes = new ArrayList<AttributeTO>();\n         resources = new HashSet<String>();\n+        propagationTOs = new ArrayList<PropagationTO>();\n     }\n \n     public long getId() {\n@@ -137,4 +140,32 @@ public Set<String> getResources() {\n     public void setResources(final Set<String> resources) {\n         this.resources = resources;\n     }\n+\n+    public boolean addPropagationTO(final PropagationTO status) {\n+        return propagationTOs.add(status);\n+    }\n+\n+    public boolean removePropagationTO(final String resource) {\n+        if (resource != null && getPropagationTOs().isEmpty()) {\n+            final List<PropagationTO> toBeRemoved = new ArrayList<PropagationTO>();\n+\n+            for (PropagationTO propagationTO : getPropagationTOs()) {\n+                if (resource.equals(propagationTO.getResourceName())) {\n+                    toBeRemoved.add(propagationTO);\n+                }\n+            }\n+\n+            return propagationTOs.removeAll(toBeRemoved);\n+        }\n+        return false;\n+    }\n+\n+    public List<PropagationTO> getPropagationTOs() {\n+        return propagationTOs;\n+    }\n+\n+    public void setPropagationTOs(final List<PropagationTO> propagationTOs) {\n+        this.propagationTOs.clear();\n+        this.propagationTOs.addAll(propagationTOs);\n+    }\n }"},{"sha":"f54d3e8a8fdb554e25c67abaafdc8c2ad216a934","filename":"client/src/main/java/org/apache/syncope/client/to/MembershipTO.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.to;\n \n import java.util.Collections;\n+import java.util.List;\n import java.util.Set;\n \n public class MembershipTO extends AbstractAttributableTO {\n@@ -57,10 +58,29 @@ public boolean removeResource(String resource) {\n \n     @Override\n     public Set<String> getResources() {\n-        return Collections.emptySet();\n+        return Collections.EMPTY_SET;\n     }\n \n     @Override\n     public void setResources(Set<String> resources) {\n     }\n+\n+    @Override\n+    public boolean addPropagationTO(PropagationTO status) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removePropagationTO(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<PropagationTO> getPropagationTOs() {\n+        return Collections.EMPTY_LIST;\n+    }\n+\n+    @Override\n+    public void setPropagationTOs(List<PropagationTO> propagationTOs) {\n+    }\n }"},{"sha":"4fcc63749b08d134c46620aec830525d79632f8b","filename":"client/src/main/java/org/apache/syncope/client/to/PropagationTaskTO.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FPropagationTaskTO.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -37,8 +37,12 @@ public class PropagationTaskTO extends TaskTO {\n \n     private String resource;\n \n+    private String objectClassName;\n+\n     private long user;\n \n+    private long role;\n+\n     public String getAccountId() {\n         return accountId;\n     }\n@@ -88,11 +92,27 @@ public void setXmlAttributes(String xmlAttributes) {\n         this.xmlAttributes = xmlAttributes;\n     }\n \n+    public String getObjectClassName() {\n+        return objectClassName;\n+    }\n+\n+    public void setObjectClassName(String objectClassName) {\n+        this.objectClassName = objectClassName;\n+    }\n+\n     public long getUser() {\n         return user;\n     }\n \n     public void setUser(long user) {\n         this.user = user;\n     }\n+\n+    public long getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(long role) {\n+        this.role = role;\n+    }\n }"},{"sha":"743de02ef6915b86e9a5647c94c3c03ea46d9052","filename":"client/src/main/java/org/apache/syncope/client/to/UserTO.java","status":"modified","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -37,8 +37,6 @@ public class UserTO extends AbstractAttributableTO {\n \n     private List<MembershipTO> memberships;\n \n-    private List<PropagationTO> propagationTOs;\n-\n     private String status;\n \n     private String token;\n@@ -59,7 +57,6 @@ public UserTO() {\n         super();\n \n         memberships = new ArrayList<MembershipTO>();\n-        propagationTOs = new ArrayList<PropagationTO>();\n     }\n \n     public String getPassword() {\n@@ -171,35 +168,6 @@ public void setLastLoginDate(Date lastLoginDate) {\n         this.lastLoginDate = lastLoginDate;\n     }\n \n-    public void addPropagationTO(final PropagationTO status) {\n-        propagationTOs.add(status);\n-    }\n-\n-    public void removePropagationTO(final String resource) {\n-        if (resource != null && getPropagationTOs().isEmpty()) {\n-\n-            final List<PropagationTO> toBeRemoved = new ArrayList<PropagationTO>();\n-\n-            for (PropagationTO propagationTO : getPropagationTOs()) {\n-                if (resource.equals(propagationTO.getResourceName())) {\n-                    toBeRemoved.add(propagationTO);\n-                }\n-            }\n-\n-            propagationTOs.removeAll(toBeRemoved);\n-        }\n-    }\n-\n-    public List<PropagationTO> getPropagationTOs() {\n-        return propagationTOs;\n-    }\n-\n-    public void setPropagationTOs(final List<PropagationTO> propagationTOs) {\n-\n-        this.propagationTOs.clear();\n-        this.propagationTOs.addAll(propagationTOs);\n-    }\n-\n     @Override\n     public String toString() {\n         return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {"},{"sha":"5fd738e7ad2ec5c68c3f733227a67e267bdc2ad7","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -67,6 +67,6 @@ public List<String> getMailTemplates()\n     public List<String> getEvents()\n             throws SyncopeClientCompositeErrorException {\n         return Arrays.asList(SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"workflow/tasks.json\", String[].class));\n+                baseURL + \"workflow/tasks/user.json\", String[].class));\n     }\n }"},{"sha":"64e6afbeced57f42e1d95d434129586387d38b52","filename":"console/src/main/java/org/apache/syncope/console/rest/WorkflowRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -29,11 +29,11 @@ public class WorkflowRestClient extends AbstractBaseRestClient {\n     public WorkflowDefinitionTO getDefinition()\n             throws SyncopeClientCompositeErrorException {\n         return SyncopeSession.get().getRestTemplate().getForObject(\n-                baseURL + \"workflow/definition.json\", WorkflowDefinitionTO.class);\n+                baseURL + \"workflow/definition/user.json\", WorkflowDefinitionTO.class);\n     }\n \n     public void updateDefinition(final WorkflowDefinitionTO workflowDef)\n             throws SyncopeClientCompositeErrorException {\n-        SyncopeSession.get().getRestTemplate().put(baseURL + \"/workflow/definition.json\", workflowDef);\n+        SyncopeSession.get().getRestTemplate().put(baseURL + \"workflow/definition/user.json\", workflowDef);\n     }\n }"},{"sha":"d24ed36fc2e0fa9ea342553762468ce3dac72ede","filename":"core/src/main/java/org/apache/syncope/core/init/ContentLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentLoader.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -157,7 +157,7 @@ public void load() {\n         }\n \n         // Can't test uwfAdapter.getClass() because it is @Autowired\n-        if (SpringContextInitializer.isActivitiConfigured()) {\n+        if (SpringContextInitializer.isActivitiEnabledForUsers()) {\n             try {\n                 statement = conn.prepareStatement(\"DELETE FROM ACT_GE_PROPERTY\");\n                 statement.executeUpdate();"},{"sha":"ff469445c9725455d86b6c321284f4fc85ac29b8","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -22,6 +22,7 @@\n import java.io.InputStream;\n import java.util.Properties;\n import javax.servlet.ServletContext;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter;\n import org.slf4j.Logger;\n@@ -83,7 +84,7 @@ public static void initUWFAdapterClassName() throws IOException {\n      *\n      * @return whether Activiti is configured for workflow or not\n      */\n-    public static boolean isActivitiConfigured() {\n+    public static boolean isActivitiEnabledForUsers() {\n         return uwfAdapterClassName != null && uwfAdapterClassName.equals(ActivitiUserWorkflowAdapter.class.getName());\n     }\n \n@@ -99,6 +100,9 @@ public static boolean isActivitiConfigured() {\n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n \n+    @Autowired\n+    private RoleWorkflowAdapter rwfAdapter;\n+\n     @Autowired\n     private LoggerLoader loggerLoader;\n \n@@ -129,5 +133,10 @@ public void afterPropertiesSet() throws Exception {\n                     uwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n             wfLoader.load();\n         }\n+        if (rwfAdapter.getLoaderClass() != null) {\n+            final WorkflowLoader wfLoader = (WorkflowLoader) beanFactory.createBean(\n+                    rwfAdapter.getLoaderClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+            wfLoader.load();\n+        }\n     }\n }"},{"sha":"61af579f11c4b6173b44f6b70a646a9470584e69","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":44,"deletions":1,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -25,6 +25,7 @@\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n import org.apache.syncope.client.util.XMLSerializer;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.validation.entity.PropagationTaskCheck;\n import org.apache.syncope.types.PropagationMode;\n@@ -68,12 +69,20 @@ public class PropagationTask extends Task {\n     @Lob\n     private String xmlAttributes;\n \n+    private String objectClassName;\n+\n     /**\n      * User whose data are propagated.\n      */\n     @ManyToOne\n     private SyncopeUser syncopeUser;\n \n+    /**\n+     * Role whose data are propagated.\n+     */\n+    @ManyToOne\n+    private SyncopeRole syncopeRole;\n+\n     /**\n      * ExternalResource to which the propagation happens.\n      */\n@@ -97,7 +106,7 @@ public void setOldAccountId(String oldAccountId) {\n     }\n \n     public Set<Attribute> getAttributes() {\n-        return XMLSerializer.<Set<Attribute>> deserialize(xmlAttributes);\n+        return XMLSerializer.<Set<Attribute>>deserialize(xmlAttributes);\n     }\n \n     public void setAttributes(final Set<Attribute> attributes) {\n@@ -129,11 +138,45 @@ public void setResource(ExternalResource resource) {\n         this.resource = resource;\n     }\n \n+    public String getObjectClassName() {\n+        return objectClassName;\n+    }\n+\n+    public void setObjectClassName(String objectClassName) {\n+        this.objectClassName = objectClassName;\n+    }\n+\n     public SyncopeUser getSyncopeUser() {\n         return syncopeUser;\n     }\n \n     public void setSyncopeUser(SyncopeUser syncopeUser) {\n         this.syncopeUser = syncopeUser;\n     }\n+\n+    public SyncopeRole getSyncopeRole() {\n+        return syncopeRole;\n+    }\n+\n+    public void setSyncopeRole(SyncopeRole syncopeRole) {\n+        this.syncopeRole = syncopeRole;\n+    }\n+\n+    public <T extends AbstractAttributable> void setSubject(T subject) {\n+        if (subject == null) {\n+            setSyncopeUser(null);\n+            setSyncopeRole(null);\n+        } else if (subject instanceof SyncopeUser) {\n+            setSyncopeUser((SyncopeUser) subject);\n+        } else if (subject instanceof SyncopeRole) {\n+            setSyncopeRole((SyncopeRole) subject);\n+        } else {\n+            throw new IllegalArgumentException(\"Subject expected to be either user or role, found '\"\n+                    + subject.getClass().getName() + \"' instead\");\n+        }\n+    }\n+\n+    public <T extends AbstractAttributable> T getSubject() {\n+        return syncopeUser == null ? (T) syncopeRole : (T) syncopeUser;\n+    }\n }"},{"sha":"cfe4a812b9ab8b797ed2b6e714d7df3f90341e97","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RoleDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -52,5 +52,7 @@ public interface RoleDAO extends DAO {\n \n     SyncopeRole save(SyncopeRole syncopeRole) throws InvalidEntityException;\n \n+    void delete(SyncopeRole role);\n+\n     void delete(Long id);\n }"},{"sha":"8fbb8b4235bf0612cf07c3f7e52b6df95134a436","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -210,12 +210,7 @@ public SyncopeRole save(final SyncopeRole role) {\n     }\n \n     @Override\n-    public void delete(final Long id) {\n-        SyncopeRole role = find(id);\n-        if (role == null) {\n-            return;\n-        }\n-\n+    public void delete(final SyncopeRole role) {\n         for (SyncopeRole roleToBeDeleted : findDescendants(role)) {\n             for (Membership membership : findMemberships(roleToBeDeleted)) {\n                 membership.getSyncopeUser().removeMembership(membership);\n@@ -234,4 +229,14 @@ public void delete(final Long id) {\n             entitlementDAO.delete(EntitlementUtil.getEntitlementNameFromRoleId(roleToBeDeleted.getId()));\n         }\n     }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        SyncopeRole role = find(id);\n+        if (role == null) {\n+            return;\n+        }\n+\n+        delete(role);\n+    }\n }"},{"sha":"34dc8bfca49d859836745a4e62b872d166b14a26","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PropagationTaskValidator.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -34,20 +34,20 @@ public void initialize(final PropagationTaskCheck constraintAnnotation) {\n     }\n \n     @Override\n-    public boolean isValid(final PropagationTask object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final PropagationTask task, final ConstraintValidatorContext context) {\n \n         boolean isValid;\n \n-        if (object == null) {\n+        if (task == null) {\n             isValid = true;\n         } else {\n-            isValid = object.getPropagationMode() != null\n-                    && object.getPropagationOperation() != null\n-                    && !object.getAttributes().isEmpty()\n-                    && object.getResource() != null;\n+            isValid = task.getPropagationMode() != null\n+                    && task.getPropagationOperation() != null\n+                    && !task.getAttributes().isEmpty()\n+                    && task.getResource() != null;\n \n             if (isValid) {\n-                List<TaskExec> executions = object.getExecs();\n+                List<TaskExec> executions = task.getExecs();\n                 for (TaskExec execution : executions) {\n                     try {\n                         PropagationTaskExecStatus.valueOf(execution.getStatus());\n@@ -58,6 +58,11 @@ public boolean isValid(final PropagationTask object, final ConstraintValidatorCo\n                 }\n             }\n \n+            if (isValid && task.getSyncopeUser() != null && task.getSyncopeRole() != null) {\n+                LOG.error(\"Cannot associate either user and role to this task\");\n+                isValid = false;\n+            }\n+\n             if (!isValid) {\n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(EntityViolationType.InvalidPropagationTask.toString())"},{"sha":"db35f789c3bf00ff78bc67cf9675cb1737e370ff","filename":"core/src/main/java/org/apache/syncope/core/policy/AccountPolicyEnforcer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -120,7 +120,7 @@ public void enforce(final AccountPolicySpec policy, final PolicyType type, final\n \n                 // propagate suspension if and only if it is required by policy\n                 if (policy.isPropagateSuspension()) {\n-                    final List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n+                    final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n                             new WorkflowResult<Map.Entry<Long, Boolean>>(\n                             new DefaultMapEntry(updated.getResult(), Boolean.FALSE),\n                             updated.getPropByRes(), updated.getPerformedTasks()));"},{"sha":"baa40e9ee64e5142c99e83ab3f92f087386417e3","filename":"core/src/main/java/org/apache/syncope/core/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":49,"deletions":21,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -28,10 +28,13 @@\n import java.util.Set;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n@@ -77,6 +80,12 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected UserDAO userDAO;\n \n+    /**\n+     * Role DAO.\n+     */\n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n     /**\n      * Task DAO.\n      */\n@@ -130,7 +139,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n         try {\n             connector = connLoader.getConnector(task.getResource());\n \n-            // Try to read user BEFORE any actual operation\n+            // Try to read remote object (user / group) BEFORE any actual operation\n             beforeObj = getRemoteObject(connector, task, false);\n \n             actions.before(task, beforeObj);\n@@ -164,8 +173,8 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                         }\n \n                         // 4. provision entry\n-                        connector.create(task.getPropagationMode(), ObjectClass.ACCOUNT, attributes, null,\n-                                propagationAttempted);\n+                        connector.create(task.getPropagationMode(), new ObjectClass(task.getObjectClassName()),\n+                                attributes, null, propagationAttempted);\n                     } else {\n                         // 1. check if rename is really required\n                         final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n@@ -208,8 +217,8 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n                             LOG.debug(\"Attributes that will be actually propagated for update {}\", strictlyModified);\n \n-                            connector.update(task.getPropagationMode(), ObjectClass.ACCOUNT, beforeObj.getUid(),\n-                                    strictlyModified, null, propagationAttempted);\n+                            connector.update(task.getPropagationMode(), beforeObj.getObjectClass(),\n+                                    beforeObj.getUid(), strictlyModified, null, propagationAttempted);\n                         }\n                     }\n                     break;\n@@ -220,36 +229,44 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n                     } else {\n                         /*\n                          * We must choose here whether to\n-                         *  a. actually delete the provided user from the external resource\n-                         *  b. just update the provided user data onto the external resource\n+                         *  a. actually delete the provided user/role from the external resource\n+                         *  b. just update the provided user/role data onto the external resource\n                          *\n-                         * (a) happens when either there is no user associated with the PropagationTask (this takes\n-                         * place when the task is generated via UserController.delete()) or the provided updated\n-                         * user hasn't the current resource assigned (when the task is generated via\n-                         * UserController.update()).\n+                         * (a) happens when either there is no user/role associated with the PropagationTask \n+                         * (this takes place when the task is generated via REST controller's delete()) or the provided\n+                         * updated user/role hasn't the current resource assigned (when the task is generated via\n+                         * REST Controller0s update()).\n                          *\n-                         * (b) happens when the provided updated user does have the current resource assigned\n-                         * (when the task is generated via UserController.update()): this basically means that\n-                         * before such update, this user used to have the current resource assigned by more than\n-                         * one mean (for example, two different memberships with the same resource).\n+                         * (b) happens when the provided updated user/role does have the current resource assigned\n+                         * (when the task is generated via REST Controller's update()): this basically means that\n+                         * before such update, this user/role used to have the current resource assigned by more than\n+                         * one mean (for example, for users, two different memberships with the same resource).\n                          */\n \n-                        SyncopeUser user = null;\n+                        AbstractAttributable subject = null;\n                         if (task.getSyncopeUser() != null) {\n                             try {\n-                                user = getSyncopeUser(task.getSyncopeUser().getId());\n+                                subject = getSyncopeUser(task.getSyncopeUser().getId());\n                             } catch (NotFoundException e) {\n                                 LOG.warn(\"Requesting to delete a non-existing user from {}\",\n                                         task.getResource().getName(), e);\n                             }\n                         }\n+                        if (task.getSyncopeRole() != null) {\n+                            try {\n+                                subject = getSyncopeRole(task.getSyncopeRole().getId());\n+                            } catch (NotFoundException e) {\n+                                LOG.warn(\"Requesting to delete a non-existing role from {}\",\n+                                        task.getResource().getName(), e);\n+                            }\n+                        }\n \n-                        if (user == null || !user.getResourceNames().contains(task.getResource().getName())) {\n+                        if (subject == null || !subject.getResourceNames().contains(task.getResource().getName())) {\n                             LOG.debug(\"Perform deprovisioning on {}\", task.getResource().getName());\n \n                             connector.delete(\n                                     task.getPropagationMode(),\n-                                    ObjectClass.ACCOUNT,\n+                                    beforeObj.getObjectClass(),\n                                     beforeObj.getUid(),\n                                     null,\n                                     propagationAttempted);\n@@ -258,7 +275,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n                             connector.update(\n                                     task.getPropagationMode(),\n-                                    ObjectClass.ACCOUNT,\n+                                    beforeObj.getObjectClass(),\n                                     beforeObj.getUid(),\n                                     task.getAttributes(),\n                                     null,\n@@ -298,7 +315,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n             propagationAttempted.add(task.getPropagationOperation().name().toLowerCase());\n         } finally {\n-            // Try to read user AFTER any actual operation\n+            // Try to read remote object (user / group) AFTER any actual operation\n             if (connector != null) {\n                 afterObj = getRemoteObject(connector, task, true);\n             }\n@@ -362,6 +379,17 @@ protected SyncopeUser getSyncopeUser(final Long userId)\n         return user;\n     }\n \n+    protected SyncopeRole getSyncopeRole(final Long roleId)\n+            throws NotFoundException {\n+\n+        SyncopeRole role = roleDAO.find(roleId);\n+        if (role == null) {\n+            throw new NotFoundException(\"Role \" + roleId);\n+        }\n+\n+        return role;\n+    }\n+\n     /**\n      * Check whether an execution has to be stored, for a given task.\n      *"},{"sha":"2683f95b428bda6d7f3071aec46a2c5179557af4","filename":"core/src/main/java/org/apache/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -322,16 +322,20 @@ public ConnectorObject getObject(final PropagationMode propagationMode, final Pr\n                 switch (operationType) {\n                     case CREATE:\n                         if (propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE\n-                                ? activeConnInstance.getCapabilities().contains(ConnectorCapability.ONE_PHASE_CREATE)\n-                                : activeConnInstance.getCapabilities().contains(ConnectorCapability.TWO_PHASES_CREATE))) {\n+                                ? activeConnInstance.getCapabilities().\n+                                contains(ConnectorCapability.ONE_PHASE_CREATE)\n+                                : activeConnInstance.getCapabilities().\n+                                contains(ConnectorCapability.TWO_PHASES_CREATE))) {\n \n                             result = connector.getObject(objectClass, uid, options);\n                         }\n                         break;\n                     case UPDATE:\n                         if (propagationMode == null || (propagationMode == PropagationMode.ONE_PHASE\n-                                ? activeConnInstance.getCapabilities().contains(ConnectorCapability.ONE_PHASE_UPDATE)\n-                                : activeConnInstance.getCapabilities().contains(ConnectorCapability.TWO_PHASES_UPDATE))) {\n+                                ? activeConnInstance.getCapabilities().\n+                                contains(ConnectorCapability.ONE_PHASE_UPDATE)\n+                                : activeConnInstance.getCapabilities().\n+                                contains(ConnectorCapability.TWO_PHASES_UPDATE))) {\n \n                             result = connector.getObject(objectClass, uid, options);\n                         }"},{"sha":"81a8abdbc15cefe472557515ba713732ca755feb","filename":"core/src/main/java/org/apache/syncope/core/propagation/DefaultPropagationHandler.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FDefaultPropagationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FDefaultPropagationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FDefaultPropagationHandler.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.propagation;\n+\n+import java.util.List;\n+import org.apache.syncope.client.to.PropagationTO;\n+import org.apache.syncope.core.util.ConnObjectUtil;\n+import org.apache.syncope.types.PropagationTaskExecStatus;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+\n+public class DefaultPropagationHandler implements PropagationHandler {\n+\n+    private final ConnObjectUtil connObjectUtil;\n+\n+    private final List<PropagationTO> propagations;\n+\n+    public DefaultPropagationHandler(final ConnObjectUtil connObjectUtil, final List<PropagationTO> propagations) {\n+        this.connObjectUtil = connObjectUtil;\n+        this.propagations = propagations;\n+    }\n+\n+    @Override\n+    public void handle(final String resourceName, final PropagationTaskExecStatus executionStatus,\n+            final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n+\n+        final PropagationTO propagation = new PropagationTO();\n+        propagation.setResourceName(resourceName);\n+        propagation.setStatus(executionStatus);\n+\n+        if (beforeObj != null) {\n+            propagation.setBeforeObj(connObjectUtil.getConnObjectTO(beforeObj));\n+        }\n+\n+        if (afterObj != null) {\n+            propagation.setAfterObj(connObjectUtil.getConnObjectTO(afterObj));\n+        }\n+\n+        propagations.add(propagation);\n+    }\n+}"},{"sha":"af1204c6880d061ace7c97aa47dba20d089cce6b","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":248,"deletions":103,"changes":351,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -37,12 +37,16 @@\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.rest.data.AbstractAttributableDataBinder;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.NotFoundException;\n@@ -79,10 +83,10 @@ public class PropagationManager {\n     private UserDataBinder userDataBinder;\n \n     /**\n-     * User DAO.\n+     * User DataBinder.\n      */\n     @Autowired\n-    private UserDAO userDAO;\n+    private RoleDataBinder roleDataBinder;\n \n     /**\n      * Resource DAO.\n@@ -96,90 +100,128 @@ public class PropagationManager {\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n+    @Autowired\n+    private ConnObjectUtil connObjectUtil;\n+\n     /**\n      * JEXL engine for evaluating connector's account link.\n      */\n     @Autowired\n     private JexlUtil jexlUtil;\n \n-    protected SyncopeUser getSyncopeUser(final Long userId)\n-            throws NotFoundException {\n-\n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n-        }\n-\n-        return user;\n-    }\n-\n     /**\n      * Create the user on every associated resource.\n      *\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks\n-     * @throws NotFoundException if userId is not found\n+     * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n+    public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n             final String password, final List<AttributeTO> vAttrs)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        return getCreateTaskIds(wfResult, password, vAttrs, null);\n+        return getUserCreateTaskIds(wfResult, password, vAttrs, null);\n     }\n \n     /**\n      * Create the user on every associated resource.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow.\n-     * @param password to be set.\n-     * @param vAttrs virtual attributes to be set.\n-     * @param syncResourceNames external resources performing sync, hence not to be considered for propagation.\n-     * @return list of propagation tasks.\n-     * @throws NotFoundException if userId is not found.\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param password to be set\n+     * @param vAttrs virtual attributes to be set\n+     * @param syncResourceNames external resources performing sync, hence not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n+    public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n             final String password, final List<AttributeTO> vAttrs, final Set<String> syncResourceNames)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = getSyncopeUser(wfResult.getResult().getKey());\n+        SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n             userDataBinder.fillVirtual(user, vAttrs, AttributableUtil.getInstance(AttributableType.USER));\n         }\n+        return getCreateTaskIds(user, password, vAttrs,\n+                wfResult.getResult().getValue(), wfResult.getPropByRes(), syncResourceNames);\n+    }\n+\n+    /**\n+     * Create the role on every associated resource.\n+     *\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param vAttrs virtual attributes to be set\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfResult,\n+            final List<AttributeTO> vAttrs)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        return getRoleCreateTaskIds(wfResult, vAttrs, null);\n+    }\n+\n+    /**\n+     * Create the role on every associated resource.\n+     *\n+     * @param wfResult role to be propagated (and info associated), as per result from workflow\n+     * @param vAttrs virtual attributes to be set\n+     * @param syncResourceNames external resources performing sync, hence not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleCreateTaskIds(final WorkflowResult<Long> wfResult,\n+            final List<AttributeTO> vAttrs, final Set<String> syncResourceNames)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n+        if (vAttrs != null && !vAttrs.isEmpty()) {\n+            roleDataBinder.fillVirtual(role, vAttrs, AttributableUtil.getInstance(AttributableType.ROLE));\n+        }\n+        return getCreateTaskIds(role, null, vAttrs, true, wfResult.getPropByRes(), syncResourceNames);\n+    }\n+\n+    protected List<PropagationTask> getCreateTaskIds(final AbstractAttributable attributable,\n+            final String password, final List<AttributeTO> vAttrs, final Boolean enable,\n+            final PropagationByResource propByRes, final Set<String> syncResourceNames) {\n \n-        final PropagationByResource propByRes = wfResult.getPropByRes();\n         if (propByRes == null || propByRes.isEmpty()) {\n-            return Collections.emptyList();\n+            return Collections.EMPTY_LIST;\n         }\n \n         if (syncResourceNames != null) {\n             propByRes.get(PropagationOperation.CREATE).removeAll(syncResourceNames);\n         }\n \n-        return createTasks(user, password, wfResult.getResult().getValue(), false, propByRes);\n+        return createTasks(attributable, password, enable, false, propByRes);\n     }\n \n     /**\n      * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n      *\n-     * @param user to be propagated.\n-     * @param enable whether user must be enabled or not.\n+     * @param user to be propagated\n+     * @param enable whether user must be enabled or not\n      * @param syncResourceNames external resource names not to be considered for propagation. Use this during sync and\n-     * disable/enable actions limited to the external resources only.\n+     * disable/enable actions limited to the external resources only\n      * @return list of propagation tasks\n-     * @throws NotFoundException if userId is not found\n+     * @throws NotFoundException if user is not found\n      */\n-    public List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Boolean enable,\n+    public List<PropagationTask> getUserUpdateTaskIds(final SyncopeUser user, final Boolean enable,\n             final Set<String> syncResourceNames)\n             throws NotFoundException {\n \n-        return getUpdateTaskIds(user, // SyncopeUser to be updated on external resources\n+        return getUpdateTaskIds(\n+                user, // SyncopeUser to be updated on external resources\n                 null, // no propagation by resources\n+                enable, // status to be propagated\n                 null, // no password\n                 null, // no virtual attributes to be managed\n                 null, // no virtual attributes to be managed\n-                enable, // status to be propagated\n                 syncResourceNames);\n     }\n \n@@ -188,69 +230,114 @@ public List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Bool\n      *\n      * @param wfResult user to be propagated (and info associated), as per result from workflow.\n      * @return list of propagation tasks\n-     * @throws NotFoundException if userId is not found\n+     * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult)\n-            throws NotFoundException {\n+    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        return getUpdateTaskIds(wfResult, null, null, null, null);\n+        return getUserUpdateTaskIds(wfResult, null, null, null, null);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow.\n-     * @param password to be updated.\n-     * @param vAttrsToBeRemoved virtual attributes to be removed.\n-     * @param vAttrsToBeUpdated virtual attributes to be added.\n-     * @return list of propagation tasks.\n-     * @throws NotFoundException if userId is not found.\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param password to be updated\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n+    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n             final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        return getUpdateTaskIds(wfResult, password, vAttrsToBeRemoved, vAttrsToBeUpdated, null);\n+        return getUserUpdateTaskIds(wfResult, password, vAttrsToBeRemoved, vAttrsToBeUpdated, null);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow.\n-     * @param password to be updated.\n-     * @param vAttrsToBeRemoved virtual attributes to be removed.\n-     * @param vAttrsToBeUpdated virtual attributes to be added.\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param password to be updated\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param syncResourceNames external resource names not to be considered for propagation. Use this during sync and\n-     * disable/enable actions limited to the external resources only.\n-     * @return list of propagation tasks.\n-     * @throws NotFoundException if userId is not found.\n+     * disable/enable actions limited to the external resources only\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n+    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n             final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n             final Set<String> syncResourceNames)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = getSyncopeUser(wfResult.getResult().getKey());\n+        SyncopeUser user = userDataBinder.getUserFromId(wfResult.getResult().getKey());\n+        return getUpdateTaskIds(user, password, wfResult.getResult().getValue(),\n+                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), syncResourceNames);\n+    }\n \n-        return getUpdateTaskIds(user, wfResult.getPropByRes(), password, vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.\n-                getResult().getValue(), syncResourceNames);\n+    /**\n+     * Performs update on each resource associated to the role.\n+     *\n+     * @param wfResult role to be propagated (and info associated), as per result from workflow\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleUpdateTaskIds(final WorkflowResult<Long> wfResult,\n+            final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        return getRoleUpdateTaskIds(wfResult, vAttrsToBeRemoved, vAttrsToBeUpdated, null);\n     }\n \n-    private List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final PropagationByResource propByRes,\n-            final String password, final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n-            final Boolean enable, final Set<String> syncResourceNames)\n+    /**\n+     * Performs update on each resource associated to the role.\n+     *\n+     * @param wfResult role to be propagated (and info associated), as per result from workflow\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param syncResourceNames external resource names not to be considered for propagation. Use this during sync and\n+     * disable/enable actions limited to the external resources only\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleUpdateTaskIds(final WorkflowResult<Long> wfResult,\n+            final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n+            final Set<String> syncResourceNames)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeRole role = roleDataBinder.getRoleFromId(wfResult.getResult());\n+        return getUpdateTaskIds(role, null, true,\n+                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), syncResourceNames);\n+    }\n+\n+    protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attributable,\n+            final String password, final Boolean enable,\n+            final Set<String> vAttrsToBeRemoved, final Set<AttributeMod> vAttrsToBeUpdated,\n+            final PropagationByResource propByRes, final Set<String> syncResourceNames)\n             throws NotFoundException {\n \n-        PropagationByResource localPropByRes = userDataBinder.fillVirtual(user, vAttrsToBeRemoved == null\n+        AbstractAttributableDataBinder binder = attributable instanceof SyncopeUser\n+                ? userDataBinder : roleDataBinder;\n+\n+        PropagationByResource localPropByRes = binder.fillVirtual(attributable, vAttrsToBeRemoved == null\n                 ? Collections.EMPTY_SET\n                 : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n                 ? Collections.EMPTY_SET\n                 : vAttrsToBeUpdated, AttributableUtil.getInstance(AttributableType.USER));\n \n-        if (propByRes != null && !propByRes.isEmpty()) {\n-            localPropByRes.merge(propByRes);\n+        if (propByRes == null || propByRes.isEmpty()) {\n+            localPropByRes.addAll(PropagationOperation.UPDATE, attributable.getResourceNames());\n         } else {\n-            localPropByRes.addAll(PropagationOperation.UPDATE, user.getResourceNames());\n+            localPropByRes.merge(propByRes);\n         }\n \n         if (syncResourceNames != null) {\n@@ -259,7 +346,7 @@ private List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Pro\n             localPropByRes.get(PropagationOperation.DELETE).removeAll(syncResourceNames);\n         }\n \n-        return createTasks(user, password, enable, false, localPropByRes);\n+        return createTasks(attributable, password, enable, false, localPropByRes);\n     }\n \n     /**\n@@ -270,11 +357,12 @@ private List<PropagationTask> getUpdateTaskIds(final SyncopeUser user, final Pro\n      * @param userId to be deleted\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getDeleteTaskIds(final Long userId)\n-            throws NotFoundException {\n+    public List<PropagationTask> getUserDeleteTaskIds(final Long userId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        return getDeleteTaskIds(userId, null);\n+        return getUserDeleteTaskIds(userId, null);\n     }\n \n     /**\n@@ -286,47 +374,96 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId)\n      * @param syncResourceName name of external resource performing sync, hence not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given user\n      */\n-    public List<PropagationTask> getDeleteTaskIds(final Long userId, final String syncResourceName)\n-            throws NotFoundException {\n+    public List<PropagationTask> getUserDeleteTaskIds(final Long userId, final String syncResourceName)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeUser user = userDataBinder.getUserFromId(userId);\n+        return getDeleteTaskIds(user, syncResourceName);\n+    }\n \n-        SyncopeUser user = getSyncopeUser(userId);\n+    /**\n+     * Perform delete on each resource associated to the role. It is possible to ask for a mandatory provisioning for\n+     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n+     * the creation fails onto a mandatory resource.\n+     *\n+     * @param roleId to be deleted\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleDeleteTaskIds(final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        return getRoleDeleteTaskIds(roleId, null);\n+    }\n+\n+    /**\n+     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n+     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n+     * the creation fails onto a mandatory resource.\n+     *\n+     * @param roleId to be deleted\n+     * @param syncResourceName name of external resource performing sync, hence not to be considered for propagation\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if role is not found\n+     * @throws UnauthorizedRoleException if caller doesn't own enough entitlements to administer the given role\n+     */\n+    public List<PropagationTask> getRoleDeleteTaskIds(final Long roleId, final String syncResourceName)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeRole role = roleDataBinder.getRoleFromId(roleId);\n+        return getDeleteTaskIds(role, syncResourceName);\n+    }\n+\n+    protected List<PropagationTask> getDeleteTaskIds(final AbstractAttributable attributable,\n+            final String syncResourceName) {\n \n         final PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(PropagationOperation.DELETE, user.getResourceNames());\n+        propByRes.set(PropagationOperation.DELETE, attributable.getResourceNames());\n         if (syncResourceName != null) {\n             propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);\n         }\n-\n-        return createTasks(user, null, false, true, propByRes);\n+        return createTasks(attributable, null, false, true, propByRes);\n     }\n \n     /**\n      * Prepare an attribute to be sent to a connector instance.\n      *\n+     * @param <T> user / role\n      * @param mapItem mapping item for the given attribute\n-     * @param user given user\n+     * @param subject given user\n      * @param password clear-text password\n      * @return account link + prepared attribute\n      * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n-    private Map.Entry<String, Attribute> prepareAttribute(final AbstractMappingItem mapItem, final SyncopeUser user,\n-            final String password)\n+    private <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n+            final AbstractMappingItem mapItem, final T subject, final String password)\n             throws ClassNotFoundException {\n \n         final List<AbstractAttributable> attributables = new ArrayList<AbstractAttributable>();\n \n         switch (mapItem.getIntMappingType().getAttributableType()) {\n             case USER:\n-                attributables.addAll(Collections.singleton(user));\n+                if (subject instanceof SyncopeUser) {\n+                    attributables.addAll(Collections.singleton(subject));\n+                }\n                 break;\n \n             case ROLE:\n-                attributables.addAll(user.getRoles());\n+                if (subject instanceof SyncopeUser) {\n+                    attributables.addAll(((SyncopeUser) subject).getRoles());\n+                }\n+                if (subject instanceof SyncopeRole) {\n+                    attributables.addAll(Collections.singleton(subject));\n+                }\n                 break;\n \n             case MEMBERSHIP:\n-                attributables.addAll(user.getMemberships());\n+                if (subject instanceof SyncopeUser) {\n+                    attributables.addAll(((SyncopeUser) subject).getMemberships());\n+                }\n                 break;\n \n             default:\n@@ -385,26 +522,29 @@ private Map.Entry<String, Attribute> prepareAttribute(final AbstractMappingItem\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n-     * @param user given user\n+     * @param <T> user / role\n+     * @param subject given user / role\n      * @param password clear-text password\n      * @param enable whether user must be enabled or not\n      * @param resource target resource\n+     * @param attrUtil attributable util to get info about subject\n      * @return account link + prepared attributes\n      */\n-    private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser user, final String password,\n-            final Boolean enable, final ExternalResource resource) {\n+    private <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> prepareAttributes(final T subject,\n+            final String password, final Boolean enable, final ExternalResource resource,\n+            final AttributableUtil attrUtil) {\n \n         LOG.debug(\"Preparing resource attributes for {} on resource {} with attributes {}\",\n-                new Object[]{user, resource, user.getAttributes()});\n+                new Object[]{subject, resource, subject.getAttributes()});\n \n         Set<Attribute> attributes = new HashSet<Attribute>();\n         String accountId = null;\n \n-        for (AbstractMappingItem mapping : resource.getUmapping().getItems()) {\n+        for (AbstractMappingItem mapping : attrUtil.getMappingItems(resource)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n             try {\n-                Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(mapping, user, password);\n+                Map.Entry<String, Attribute> preparedAttribute = prepareAttribute(mapping, subject, password);\n \n                 if (preparedAttribute.getKey() != null) {\n                     accountId = preparedAttribute.getKey();\n@@ -438,12 +578,12 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n \n         // Evaluate AccountLink expression\n         String evalAccountLink = null;\n-        if (StringUtils.isNotBlank(resource.getUmapping().getAccountLink())) {\n+        if (StringUtils.isNotBlank(attrUtil.getAccountLink(resource))) {\n             final JexlContext jexlContext = new MapContext();\n-            jexlUtil.addFieldsToContext(user, jexlContext);\n-            jexlUtil.addAttrsToContext(user.getAttributes(), jexlContext);\n-            jexlUtil.addDerAttrsToContext(user.getDerivedAttributes(), user.getAttributes(), jexlContext);\n-            evalAccountLink = jexlUtil.evaluate(resource.getUmapping().getAccountLink(), jexlContext);\n+            jexlUtil.addFieldsToContext(subject, jexlContext);\n+            jexlUtil.addAttrsToContext(subject.getAttributes(), jexlContext);\n+            jexlUtil.addDerAttrsToContext(subject.getDerivedAttributes(), subject.getAttributes(), jexlContext);\n+            evalAccountLink = jexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n         }\n \n         // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),\n@@ -470,17 +610,21 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n     /**\n      * Create propagation tasks.\n      *\n-     * @param user user to be provisioned\n+     * @param <T> user / role\n+     * @param subject user / role to be provisioned\n      * @param password cleartext password to be provisioned\n      * @param enable whether user must be enabled or not\n-     * @param deleteOnResource whether user must be deleted anyway from external resource or not\n+     * @param deleteOnResource whether user / role must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTask> createTasks(final SyncopeUser user, final String password, final Boolean enable,\n-            final boolean deleteOnResource, final PropagationByResource propByRes) {\n+    protected <T extends AbstractAttributable> List<PropagationTask> createTasks(final T subject,\n+            final String password, final Boolean enable, final boolean deleteOnResource,\n+            final PropagationByResource propByRes) {\n+\n+        LOG.debug(\"Provisioning subject {}:\\n{}\", subject, propByRes);\n \n-        LOG.debug(\"Provisioning with user {}:\\n{}\", user, propByRes);\n+        AttributableUtil attrUtil = AttributableUtil.getInstance(subject);\n \n         // Avoid duplicates - see javadoc\n         propByRes.purge();\n@@ -496,15 +640,16 @@ protected List<PropagationTask> createTasks(final SyncopeUser user, final String\n                 } else {\n                     PropagationTask task = new PropagationTask();\n                     task.setResource(resource);\n+                    task.setObjectClassName(connObjectUtil.fromAttributable(subject).getObjectClassValue());\n                     if (!deleteOnResource) {\n-                        task.setSyncopeUser(user);\n+                        task.setSubject(subject);\n                     }\n                     task.setPropagationOperation(operation);\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getName()));\n \n                     Map.Entry<String, Set<Attribute>> preparedAttrs =\n-                            prepareAttributes(user, password, enable, resource);\n+                            prepareAttributes(subject, password, enable, resource, attrUtil);\n                     task.setAccountId(preparedAttrs.getKey());\n                     task.setAttributes(preparedAttrs.getValue());\n "},{"sha":"9e94789836b3aa8f0f1ae009056d0044fc997fd1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":100,"deletions":33,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -19,25 +19,39 @@\n package org.apache.syncope.core.rest.controller;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.client.mod.RoleMod;\n+import org.apache.syncope.client.to.PropagationTO;\n import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.core.audit.AuditManager;\n+import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.propagation.DefaultPropagationHandler;\n+import org.apache.syncope.core.propagation.PropagationException;\n+import org.apache.syncope.core.propagation.PropagationManager;\n+import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.ConnObjectUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;\n+import org.apache.syncope.core.workflow.WorkflowException;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditElements.Result;\n import org.apache.syncope.types.AuditElements.RoleSubCategory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -62,13 +76,28 @@ public class RoleController extends AbstractController {\n     @Autowired\n     private RoleDataBinder dataBinder;\n \n+    @Autowired\n+    private RoleWorkflowAdapter rwfAdapter;\n+\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Autowired\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    /**\n+     * ConnectorObject util.\n+     */\n+    @Autowired\n+    private ConnObjectUtil connObjectUtil;\n+\n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n     @Transactional(readOnly = true)\n     public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (!allowedRoleIds.contains(role.getId())) {\n@@ -87,16 +116,22 @@ public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n     public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+        // Explicit search instead of using dataBinder.getRoleFromId() in order to bypass auth checks - will do here\n+        SyncopeRole role = roleDAO.find(roleId);\n+        if (role == null) {\n+            throw new NotFoundException(\"Role \" + roleId);\n+        }\n \n+        Set<Long> ownedRoleIds;\n         SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n         if (authUser == null) {\n-            throw new NotFoundException(\"Authenticated user \"\n-                    + SecurityContextHolder.getContext().getAuthentication().getName());\n+            ownedRoleIds = Collections.EMPTY_SET;\n+        } else {\n+            ownedRoleIds = authUser.getRoleIds();\n         }\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        allowedRoleIds.addAll(authUser.getRoleIds());\n+        allowedRoleIds.addAll(ownedRoleIds);\n         if (!allowedRoleIds.contains(role.getId())) {\n             throw new UnauthorizedRoleException(role.getId());\n         }\n@@ -113,7 +148,7 @@ public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n     public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (role.getParent() != null && !allowedRoleIds.contains(role.getParent().getId())) {\n@@ -135,8 +170,10 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\n     @Transactional(readOnly = true)\n-    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException {\n-        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -158,6 +195,7 @@ public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) throws N\n     @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n         List<SyncopeRole> roles = roleDAO.findAll();\n+\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n         for (SyncopeRole role : roles) {\n             roleTOs.add(dataBinder.getRoleTO(role));\n@@ -172,7 +210,7 @@ public List<RoleTO> list() {\n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO)\n-            throws SyncopeClientCompositeErrorException, UnauthorizedRoleException {\n+            throws UnauthorizedRoleException, WorkflowException, NotFoundException, PropagationException {\n \n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n@@ -181,53 +219,82 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n             throw new UnauthorizedRoleException(roleTO.getParent());\n         }\n \n-        SyncopeRole role = roleDAO.save(dataBinder.create(roleTO));\n+        WorkflowResult<Long> created = rwfAdapter.create(roleTO);\n+\n+        // Extend the current authentication context to include the role just created\n+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n+        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>(auth.getAuthorities());\n+        authorities.add(new SimpleGrantedAuthority(EntitlementUtil.getEntitlementNameFromRoleId(created.getResult())));\n+        Authentication newAuth = new UsernamePasswordAuthenticationToken(\n+                auth.getPrincipal(), auth.getCredentials(), authorities);\n+        SecurityContextHolder.getContext().setAuthentication(newAuth);\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, roleTO.getVirtualAttributes());\n+\n+        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+\n+        final RoleTO savedTO = dataBinder.getRoleTO(created.getResult());\n+        savedTO.setPropagationTOs(propagations);\n+\n+        LOG.debug(\"About to return created role\\n{}\", savedTO);\n \n         auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n-                \"Successfully created role: \" + role.getId());\n+                \"Successfully created role: \" + savedTO.getId());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return dataBinder.getRoleTO(role);\n+        return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public RoleTO update(@RequestBody final RoleMod roleMod) throws NotFoundException, UnauthorizedRoleException {\n-        LOG.debug(\"Role update called with parameter {}\", roleMod);\n+    public RoleTO update(@RequestBody final RoleMod roleMod)\n+            throws NotFoundException, UnauthorizedRoleException, WorkflowException, PropagationException {\n \n-        SyncopeRole role = dataBinder.getSyncopeRole(roleMod.getId());\n+        LOG.debug(\"Role update called with {}\", roleMod);\n \n-        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        if (!allowedRoleIds.contains(role.getId())) {\n-            throw new UnauthorizedRoleException(role.getId());\n-        }\n+        SyncopeRole role = dataBinder.getRoleFromId(roleMod.getId());\n \n-        dataBinder.update(role, roleMod);\n-        role = roleDAO.save(role);\n+        WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                roleMod.getVirtualAttributesToBeRemoved(), roleMod.getVirtualAttributesToBeUpdated());\n+\n+        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+\n+        final RoleTO updatedTO = dataBinder.getRoleTO(updated.getResult());\n+        updatedTO.setPropagationTOs(propagations);\n \n         auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n                 \"Successfully updated role: \" + role.getId());\n \n-        return dataBinder.getRoleTO(role);\n+        LOG.debug(\"About to return updated role\\n{}\", updatedTO);\n+\n+        return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n-    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException, UnauthorizedRoleException {\n-        SyncopeRole role = dataBinder.getSyncopeRole(roleId);\n+    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException, WorkflowException, PropagationException {\n \n-        RoleTO roleToDelete = dataBinder.getRoleTO(role);\n+        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n \n-        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        if (!allowedRoleIds.contains(role.getId())) {\n-            throw new UnauthorizedRoleException(role.getId());\n-        }\n+        RoleTO roleTO = dataBinder.getRoleTO(role);\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleId);\n+\n+        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+\n+        rwfAdapter.delete(roleId);\n \n         auditManager.audit(Category.role, RoleSubCategory.delete, Result.success,\n-                \"Successfully deleted role: \" + role.getId());\n+                \"Successfully deleted role: \" + roleId);\n \n-        roleDAO.delete(roleId);\n+        LOG.debug(\"Role successfully deleted: {}\", roleId);\n \n-        return roleToDelete;\n+        return roleTO;\n     }\n }"},{"sha":"bbd9a8e6a4d402bacd45e206aeeb321685076991","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":41,"deletions":96,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -38,8 +38,8 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.persistence.dao.UserSearchDAO;\n+import org.apache.syncope.core.propagation.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.PropagationException;\n-import org.apache.syncope.core.propagation.PropagationHandler;\n import org.apache.syncope.core.propagation.PropagationManager;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n@@ -52,8 +52,6 @@\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditElements.Result;\n import org.apache.syncope.types.AuditElements.UserSubCategory;\n-import org.apache.syncope.types.PropagationTaskExecStatus;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -93,7 +91,7 @@ public class UserController {\n     private UserSearchDAO searchDAO;\n \n     @Autowired\n-    private UserDataBinder userDataBinder;\n+    private UserDataBinder dataBinder;\n \n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n@@ -123,7 +121,7 @@ public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Verified password for: \" + username);\n \n-        return new ModelAndView().addObject(userDataBinder.verifyPassword(username, password));\n+        return new ModelAndView().addObject(dataBinder.verifyPassword(username, password));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n@@ -159,9 +157,8 @@ public List<UserTO> list() {\n                 userDAO.findAll(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n \n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n-\n         for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user));\n+            userTOs.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n@@ -180,7 +177,7 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            userTOs.add(userDataBinder.getUserTO(user));\n+            userTOs.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n@@ -195,7 +192,7 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n     public UserTO read(@PathVariable(\"userId\") final Long userId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        UserTO result = userDataBinder.getUserTO(userId);\n+        UserTO result = dataBinder.getUserTO(userId);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + userId);\n@@ -209,7 +206,7 @@ public UserTO read(@PathVariable(\"userId\") final Long userId)\n     public UserTO read(@PathVariable final String username)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        UserTO result = userDataBinder.getUserTO(username);\n+        UserTO result = dataBinder.getUserTO(username);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + username);\n@@ -234,7 +231,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition)\n                 getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(userDataBinder.getUserTO(user));\n+            result.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -262,7 +259,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(userDataBinder.getUserTO(user));\n+            result.add(dataBinder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -291,36 +288,15 @@ public UserTO create(final HttpServletResponse response, @RequestBody final User\n \n         WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(userTO);\n \n-        List<PropagationTask> tasks = propagationManager.getCreateTaskIds(\n+        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n                 created, userTO.getPassword(), userTO.getVirtualAttributes());\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n-\n-        taskExecutor.execute(tasks, new PropagationHandler() {\n-\n-            @Override\n-            public void handle(final String resourceName, final PropagationTaskExecStatus executionStatus,\n-                    final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n-\n-                final PropagationTO propagation = new PropagationTO();\n-                propagation.setResourceName(resourceName);\n-                propagation.setStatus(executionStatus);\n-\n-                if (beforeObj != null) {\n-                    propagation.setBeforeObj(connObjectUtil.getConnObjectTO(beforeObj));\n-                }\n-\n-                if (afterObj != null) {\n-                    propagation.setAfterObj(connObjectUtil.getConnObjectTO(afterObj));\n-                }\n-\n-                propagations.add(propagation);\n-            }\n-        });\n+        taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n-        final UserTO savedTO = userDataBinder.getUserTO(created.getResult().getKey());\n+        final UserTO savedTO = dataBinder.getUserTO(created.getResult().getKey());\n         savedTO.setPropagationTOs(propagations);\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n@@ -341,36 +317,15 @@ public UserTO update(@RequestBody final UserMod userMod)\n \n         WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(updated, userMod.getPassword(), userMod.\n-                getVirtualAttributesToBeRemoved(), userMod.getVirtualAttributesToBeUpdated(), null);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated, userMod.getPassword(),\n+                userMod.getVirtualAttributesToBeRemoved(), userMod.getVirtualAttributesToBeUpdated());\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n-\n-        taskExecutor.execute(tasks, new PropagationHandler() {\n-\n-            @Override\n-            public void handle(final String resourceName, final PropagationTaskExecStatus executionStatus,\n-                    final ConnectorObject before, final ConnectorObject after) {\n-\n-                final PropagationTO propagation = new PropagationTO();\n-                propagation.setResourceName(resourceName);\n-                propagation.setStatus(executionStatus);\n-\n-                if (before != null) {\n-                    propagation.setBeforeObj(connObjectUtil.getConnObjectTO(before));\n-                }\n-\n-                if (after != null) {\n-                    propagation.setAfterObj(connObjectUtil.getConnObjectTO(after));\n-                }\n-\n-                propagations.add(propagation);\n-            }\n-        });\n+        taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n         notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n \n-        final UserTO updatedTO = userDataBinder.getUserTO(updated.getResult().getKey());\n+        final UserTO updatedTO = dataBinder.getUserTO(updated.getResult().getKey());\n         updatedTO.setPropagationTOs(propagations);\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n@@ -515,7 +470,7 @@ public UserTO delete(@PathVariable final String username)\n             throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n         LOG.debug(\"User delete called with {}\", username);\n \n-        UserTO result = userDataBinder.getUserTO(username);\n+        UserTO result = dataBinder.getUserTO(username);\n         long userId = result.getId();\n \n         return doDelete(userId);\n@@ -530,14 +485,16 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"t\n \n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new DefaultMapEntry(updated.getResult(), null), updated.getPropByRes(), updated.getPerformedTasks()));\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                new WorkflowResult<Map.Entry<Long, Boolean>>(new DefaultMapEntry(updated.getResult(), null),\n+                updated.getPropByRes(),\n+                updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n \n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n-        final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n@@ -565,7 +522,7 @@ public List<WorkflowFormTO> getForms() {\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId)\n             throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n \n-        SyncopeUser user = userDataBinder.getUserFromId(userId);\n+        SyncopeUser user = dataBinder.getUserFromId(userId);\n         WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n \n         auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n@@ -597,15 +554,21 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n \n         LOG.debug(\"About to process form {}\", form);\n \n-        WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form, SecurityContextHolder.getContext().\n+        WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n+                SecurityContextHolder.getContext().\n                 getAuthentication().getName());\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new DefaultMapEntry(updated.getResult().getKey(), Boolean.TRUE), updated.getPropByRes(), updated.\n-                getPerformedTasks()), updated.getResult().getValue(), null, null);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                new DefaultMapEntry(updated.getResult().getKey(), Boolean.TRUE),\n+                updated.getPropByRes(),\n+                updated.getPerformedTasks()),\n+                updated.getResult().getValue(),\n+                null,\n+                null);\n         taskExecutor.execute(tasks);\n \n-        final UserTO savedTO = userDataBinder.getUserTO(updated.getResult().getKey());\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult().getKey());\n \n         auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n                 \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n@@ -645,12 +608,12 @@ private UserTO setStatus(final SyncopeUser user, final String token, final Set<S\n             resources.addAll(user.getResourceNames());\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(user, status, resources);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, status, resources);\n \n         taskExecutor.execute(tasks);\n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n-        final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n \n         auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n                 \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());\n@@ -669,37 +632,19 @@ protected UserTO doDelete(final Long userId)\n         // impossible by NotificationManager to fetch required user information\n         notificationManager.createTasks(userId, Collections.singleton(\"delete\"));\n \n-        List<PropagationTask> tasks = propagationManager.getDeleteTaskIds(userId);\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId);\n \n         final UserTO userTO = new UserTO();\n         userTO.setId(userId);\n \n-        taskExecutor.execute(tasks, new PropagationHandler() {\n-\n-            @Override\n-            public void handle(final String resourceName, final PropagationTaskExecStatus executionStatus,\n-                    final ConnectorObject before, final ConnectorObject after) {\n-\n-                final PropagationTO propagation = new PropagationTO();\n-                propagation.setResourceName(resourceName);\n-                propagation.setStatus(executionStatus);\n-\n-                if (before != null) {\n-                    propagation.setBeforeObj(connObjectUtil.getConnObjectTO(before));\n-                }\n-\n-                if (after != null) {\n-                    propagation.setAfterObj(connObjectUtil.getConnObjectTO(after));\n-                }\n-\n-                userTO.addPropagationTO(propagation);\n-            }\n-        });\n+        final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n+        taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+        userTO.setPropagationTOs(propagations);\n \n         uwfAdapter.delete(userId);\n \n         auditManager.audit(Category.user, UserSubCategory.delete, Result.success,\n-                \"Successfully deleted user: \" + userTO.getUsername());\n+                \"Successfully deleted user: \" + userId);\n \n         LOG.debug(\"User successfully deleted: {}\", userId);\n "},{"sha":"7733c30c5f90fa6a440f30b99e1e9df89bcda366","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":54,"deletions":16,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -22,8 +22,10 @@\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n+import org.apache.syncope.core.workflow.WorkflowAdapter;\n import org.apache.syncope.core.workflow.WorkflowException;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.apache.syncope.types.AuditElements.Category;\n import org.apache.syncope.types.AuditElements.Result;\n import org.apache.syncope.types.AuditElements.WorkflowSubCategory;\n@@ -46,39 +48,75 @@ public class WorkflowController extends AbstractController {\n     @Autowired\n     private UserWorkflowAdapter uwfAdapter;\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/definition\")\n-    @Transactional(readOnly = true)\n-    public WorkflowDefinitionTO getDefinition() throws WorkflowException {\n+    @Autowired\n+    private RoleWorkflowAdapter rwfAdapter;\n \n-        WorkflowDefinitionTO result = uwfAdapter.getDefinition();\n+    private WorkflowDefinitionTO getDefinition(final WorkflowAdapter adapter) throws WorkflowException {\n+        WorkflowDefinitionTO result = adapter.getDefinition();\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinition, Result.success,\n-                \"Successfully got workflow definition\");\n+                \"Successfully read workflow definition\");\n \n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/definition\")\n-    public void updateDefinition(@RequestBody final WorkflowDefinitionTO definition)\n+    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/definition/user\")\n+    @Transactional(readOnly = true)\n+    public WorkflowDefinitionTO getUserDefinition() throws WorkflowException {\n+        return getDefinition(uwfAdapter);\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/definition/role\")\n+    @Transactional(readOnly = true)\n+    public WorkflowDefinitionTO getRoleDefinition() throws WorkflowException {\n+        return getDefinition(rwfAdapter);\n+    }\n+\n+    private void updateDefinition(final WorkflowAdapter adapter, final WorkflowDefinitionTO definition)\n             throws NotFoundException, WorkflowException {\n \n-        uwfAdapter.updateDefinition(definition);\n+        adapter.updateDefinition(definition);\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.updateDefinition, Result.success,\n                 \"Successfully updated workflow definition\");\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/tasks\")\n-    public ModelAndView getDefinedTasks() throws WorkflowException {\n+    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/user\")\n+    public void updateUserDefinition(@RequestBody final WorkflowDefinitionTO definition)\n+            throws NotFoundException, WorkflowException {\n+\n+        updateDefinition(uwfAdapter, definition);\n+    }\n \n-        List<String> definedTasks = uwfAdapter.getDefinedTasks();\n+    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/role\")\n+    public void updateRoleDefinition(@RequestBody final WorkflowDefinitionTO definition)\n+            throws NotFoundException, WorkflowException {\n+\n+        updateDefinition(rwfAdapter, definition);\n+    }\n+\n+    private List<String> getDefinedTasks(final WorkflowAdapter adapter) throws WorkflowException {\n+        List<String> definedTasks = adapter.getDefinedTasks();\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinedTasks, Result.success,\n                 \"Successfully got the list of defined workflow tasks: \" + definedTasks.size());\n \n-        return new ModelAndView().addObject(definedTasks);\n+        return definedTasks;\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/tasks/user\")\n+    public ModelAndView getDefinedUserTasks() throws WorkflowException {\n+        return new ModelAndView().addObject(getDefinedTasks(uwfAdapter));\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/tasks/role\")\n+    public ModelAndView getDefinedRoleTasks() throws WorkflowException {\n+        return new ModelAndView().addObject(getDefinedTasks(rwfAdapter));\n     }\n }"},{"sha":"28dee33fcd1c095c967f3a4d5256ac41d44ad393","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest.data;\n \n import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.client.mod.RoleMod;\n import org.apache.syncope.client.to.RoleTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -33,31 +34,46 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Component\n+@Transactional(rollbackFor = {Throwable.class})\n public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    public SyncopeRole getSyncopeRole(final Long roleId) throws NotFoundException {\n+    @Transactional(readOnly = true)\n+    public SyncopeRole getRoleFromId(final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        if (roleId == null) {\n+            throw new NotFoundException(\"Null role id\");\n+        }\n+\n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n             throw new NotFoundException(\"Role \" + roleId);\n         }\n \n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+            throw new UnauthorizedRoleException(role.getId());\n+        }\n         return role;\n     }\n \n-    public SyncopeRole create(final RoleTO roleTO) throws SyncopeClientCompositeErrorException {\n-        SyncopeRole role = new SyncopeRole();\n+    public SyncopeRole create(final SyncopeRole role, final RoleTO roleTO)\n+            throws SyncopeClientCompositeErrorException {\n \n         role.setInheritOwner(roleTO.isInheritOwner());\n \n@@ -225,6 +241,7 @@ public PropagationByResource update(final SyncopeRole role, final RoleMod roleMo\n         return fill(role, roleMod, AttributableUtil.getInstance(AttributableType.ROLE), scce);\n     }\n \n+    @Transactional(readOnly = true)\n     public RoleTO getRoleTO(final SyncopeRole role) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(role.getId());\n@@ -278,4 +295,11 @@ public RoleTO getRoleTO(final SyncopeRole role) {\n \n         return roleTO;\n     }\n+\n+    @Transactional(readOnly = true)\n+    public RoleTO getRoleTO(final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        return getRoleTO(getRoleFromId(roleId));\n+    }\n }"},{"sha":"0f9064aea482f06c0f0aaa370480a489ad74f87c","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -64,7 +64,8 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = {\"latestExecStatus\", \"executions\", \"resource\", \"user\"};\n+    private static final String[] IGNORE_TASK_PROPERTIES = {\n+        \"latestExecStatus\", \"executions\", \"resource\", \"user\", \"role\"};\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n \n@@ -146,26 +147,23 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());\n \n-        switch (taskUtil) {\n-            case SCHED:\n-                task.setJobClassName(taskTO.getJobClassName());\n-                break;\n-\n-            case SYNC:\n-                if (!(taskTO instanceof SyncTaskTO)) {\n-                    throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n-                            getClass().getName());\n-                }\n-                SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n+        if (taskUtil == TaskUtil.SCHED) {\n+            task.setJobClassName(taskTO.getJobClassName());\n+        }\n+        if (taskUtil == TaskUtil.SYNC) {\n+            if (!(taskTO instanceof SyncTaskTO)) {\n+                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n+                        getClass().getName());\n+            }\n+            SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n \n-                ExternalResource resource = resourceDAO.find(syncTaskTO.getResource());\n-                if (resource == null) {\n-                    throw new NotFoundException(\"Resource \" + syncTaskTO.getResource());\n-                }\n-                ((SyncTask) task).setResource(resource);\n+            ExternalResource resource = resourceDAO.find(syncTaskTO.getResource());\n+            if (resource == null) {\n+                throw new NotFoundException(\"Resource \" + syncTaskTO.getResource());\n+            }\n+            ((SyncTask) task).setResource(resource);\n \n-                fill((SyncTask) task, syncTaskTO);\n-                break;\n+            fill((SyncTask) task, syncTaskTO);\n         }\n \n         return task;\n@@ -257,6 +255,9 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n                 if (((PropagationTask) task).getSyncopeUser() != null) {\n                     ((PropagationTaskTO) taskTO).setUser(((PropagationTask) task).getSyncopeUser().getId());\n                 }\n+                if (((PropagationTask) task).getSyncopeRole() != null) {\n+                    ((PropagationTaskTO) taskTO).setRole(((PropagationTask) task).getSyncopeRole().getId());\n+                }\n                 break;\n \n             case SCHED:"},{"sha":"1fc7e67df4311c20e4c76d86d4f5694d9ca76ca0","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncopeSyncResultHanlder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncopeSyncResultHanlder.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -348,7 +348,7 @@ private List<SyncResult> createUser(SyncDelta delta, final boolean dryRun) throw\n \n                 WorkflowResult<Map.Entry<Long, Boolean>> created = uwfAdapter.create(userTO, true, enabled);\n \n-                List<PropagationTask> tasks = propagationManager.getCreateTaskIds(created, userTO.getPassword(),\n+                List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(created, userTO.getPassword(),\n                         userTO.getVirtualAttributes(), Collections.singleton(syncTask.getResource().getName()));\n \n                 taskExecutor.execute(tasks);\n@@ -403,7 +403,7 @@ private List<SyncResult> updateUsers(SyncDelta delta, final List<Long> users, fi\n                     if (!dryRun) {\n                         WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update(userMod);\n \n-                        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(updated,\n+                        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n                                 userMod.getPassword(), userMod.getVirtualAttributesToBeRemoved(),\n                                 userMod.getVirtualAttributesToBeUpdated(),\n                                 Collections.singleton(syncTask.getResource().getName()));\n@@ -459,7 +459,7 @@ private List<SyncResult> deleteUsers(SyncDelta delta, final List<Long> users, fi\n \n                 if (!dryRun) {\n                     try {\n-                        List<PropagationTask> tasks = propagationManager.getDeleteTaskIds(userId,\n+                        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userId,\n                                 syncTask.getResource().getName());\n                         taskExecutor.execute(tasks);\n "},{"sha":"f681f1cd1e0157146b0aa50b35559c3a703c9226","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n@@ -37,6 +38,7 @@\n import org.apache.syncope.core.persistence.beans.membership.MSchema;\n import org.apache.syncope.core.persistence.beans.membership.MVirAttr;\n import org.apache.syncope.core.persistence.beans.membership.MVirSchema;\n+import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.RAttr;\n import org.apache.syncope.core.persistence.beans.role.RAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.role.RAttrValue;\n@@ -46,6 +48,8 @@\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n import org.apache.syncope.core.persistence.beans.role.RVirAttr;\n import org.apache.syncope.core.persistence.beans.role.RVirSchema;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttr;\n import org.apache.syncope.core.persistence.beans.user.UAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n@@ -70,6 +74,25 @@ public static AttributableUtil valueOf(final String name) {\n         return new AttributableUtil(AttributableType.valueOf(name));\n     }\n \n+    public static AttributableUtil getInstance(final AbstractAttributable attributable) {\n+        AttributableType type = null;\n+        if (attributable instanceof SyncopeUser) {\n+            type = AttributableType.USER;\n+        }\n+        if (attributable instanceof SyncopeRole) {\n+            type = AttributableType.ROLE;\n+        }\n+        if (attributable instanceof Membership) {\n+            type = AttributableType.MEMBERSHIP;\n+        }\n+\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"Attributable type not supported: \" + attributable.getClass().getName());\n+        }\n+\n+        return new AttributableUtil(type);\n+    }\n+\n     private AttributableUtil(final AttributableType type) {\n         this.type = type;\n     }\n@@ -78,6 +101,29 @@ public AttributableType getType() {\n         return type;\n     }\n \n+    public String getAccountLink(final ExternalResource resource) {\n+        String result = null;\n+\n+        if (resource != null) {\n+            switch (type) {\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        result = resource.getUmapping().getAccountLink();\n+                    }\n+                    break;\n+                case ROLE:\n+                    if (resource.getRmapping() != null) {\n+                        result = resource.getRmapping().getAccountLink();\n+                    }\n+                    break;\n+                case MEMBERSHIP:\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public <T extends AbstractMappingItem> List<T> getMappingItems(final ExternalResource resource) {\n         List<T> result = Collections.EMPTY_LIST;\n "},{"sha":"0d73bf6317a8d18a709c30ca9ec9abaa05f369ef","filename":"core/src/main/java/org/apache/syncope/core/util/ConnObjectUtil.java","status":"modified","additions":21,"deletions":3,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnObjectUtil.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -71,7 +71,7 @@ public class ConnObjectUtil {\n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtil.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtil.class);\n \n     /**\n      * JEXL engine for evaluating connector's account link.\n@@ -97,6 +97,24 @@ public class ConnObjectUtil {\n     @Autowired\n     private PasswordGenerator pwdGen;\n \n+    public ObjectClass fromAttributable(final AbstractAttributable attributable) {\n+        if (attributable == null\n+                || (!(attributable instanceof SyncopeUser) && !(attributable instanceof SyncopeRole))) {\n+\n+            throw new IllegalArgumentException(\"No ObjectClass could be provided for \" + attributable);\n+        }\n+\n+        ObjectClass result = null;\n+        if (attributable instanceof SyncopeUser) {\n+            result = ObjectClass.ACCOUNT;\n+        }\n+        if (attributable instanceof SyncopeRole) {\n+            result = ObjectClass.GROUP;\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Build an UserTO out of connector object attributes and schema mapping.\n      *\n@@ -371,13 +389,13 @@ public void retrieveVirAttrValues(final AbstractAttributable owner) {\n \n                     final ConnectorFacadeProxy connector = connInstanceLoader.getConnector(resource);\n                     final ConnectorObject connObj =\n-                            connector.getObject(ObjectClass.ACCOUNT, new Uid(accountId), oob.build());\n+                            connector.getObject(fromAttributable(owner), new Uid(accountId), oob.build());\n \n                     if (connObj != null) {\n                         connObj2MapItems.put(connObj, virMapItems);\n                     }\n \n-                    LOG.debug(\"Retrieved remotye object {}\", connObj);\n+                    LOG.debug(\"Retrieved remote object {}\", connObj);\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"Unable to retrieve virtual attribute values on '{}'\", resource.getName(), e);"},{"sha":"310b56a9ad8721a0195ab91f15632684590f2042","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowAdapter.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowAdapter.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.to.WorkflowDefinitionTO;\n+import org.apache.syncope.client.to.WorkflowFormTO;\n+import org.apache.syncope.core.init.WorkflowLoader;\n+import org.apache.syncope.core.util.NotFoundException;\n+\n+public interface WorkflowAdapter {\n+\n+    /**\n+     * Give the class to be instantiated and invoked by SpringContextInitializer for loading anything needed by this\n+     * adapter.\n+     *\n+     * @return null if no init is needed or the WorkflowLoader class for handling initialization\n+     * @see org.apache.syncope.core.init.SpringContextInitializer\n+     */\n+    Class<? extends WorkflowLoader> getLoaderClass();\n+\n+    /**\n+     * Get workflow definition.\n+     *\n+     * @return workflow definition as XML\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowDefinitionTO getDefinition() throws WorkflowException;\n+\n+    /**\n+     * Update workflow definition.\n+     *\n+     * @param definition definition as XML\n+     * @throws NotFoundException definition not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    void updateDefinition(WorkflowDefinitionTO definition) throws NotFoundException, WorkflowException;\n+\n+    /**\n+     * Get list of defined tasks in workflow.\n+     *\n+     * @return list of defined tasks in workflow\n+     * @throws WorkflowException workflow exception\n+     */\n+    List<String> getDefinedTasks() throws WorkflowException;\n+\n+    /**\n+     * Get all defined forms for current workflow process instances.\n+     *\n+     * @return list of defined forms\n+     */\n+    List<WorkflowFormTO> getForms();\n+\n+    /**\n+     * Get form for given workflowId (if present).\n+     *\n+     * @param workflowId workflow id\n+     * @return form (if present), otherwise null\n+     * @throws NotFoundException definition not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowFormTO getForm(String workflowId) throws NotFoundException, WorkflowException;\n+\n+    /**\n+     * Claim a form for a given user.\n+     *\n+     * @param taskId Workflow task to which the form is associated\n+     * @param username claiming username\n+     * @return updated form\n+     * @throws NotFoundException not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowFormTO claimForm(String taskId, String username) throws NotFoundException, WorkflowException;\n+\n+    /**\n+     * Submit a form.\n+     *\n+     * @param form to be submitted\n+     * @param username submitting username\n+     * @return user updated by this form submit\n+     * @throws NotFoundException not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowResult<Map.Entry<Long, String>> submitForm(WorkflowFormTO form, String username)\n+            throws NotFoundException, WorkflowException;\n+}"},{"sha":"83120cbb9a37ae926046c00ed1b4b6c6f619ae0e","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/AbstractRoleWorkflowAdapter.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FAbstractRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FAbstractRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FAbstractRoleWorkflowAdapter.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.role;\n+\n+import org.apache.syncope.client.mod.RoleMod;\n+import org.apache.syncope.core.init.WorkflowLoader;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.rest.data.RoleDataBinder;\n+import org.apache.syncope.core.util.NotFoundException;\n+import org.apache.syncope.core.workflow.WorkflowException;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(rollbackFor = {Throwable.class})\n+public abstract class AbstractRoleWorkflowAdapter implements RoleWorkflowAdapter {\n+\n+    @Autowired\n+    protected RoleDataBinder dataBinder;\n+\n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n+    @Override\n+    public Class<? extends WorkflowLoader> getLoaderClass() {\n+        return null;\n+    }\n+\n+    protected abstract WorkflowResult<Long> doUpdate(SyncopeRole role, RoleMod roleMod)\n+            throws WorkflowException;\n+\n+    @Override\n+    public WorkflowResult<Long> update(final RoleMod roleMod)\n+            throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n+\n+        return doUpdate(dataBinder.getRoleFromId(roleMod.getId()), roleMod);\n+    }\n+\n+    protected abstract void doDelete(SyncopeRole role) throws WorkflowException;\n+\n+    @Override\n+    public void delete(final Long roleId) throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n+        doDelete(dataBinder.getRoleFromId(roleId));\n+    }\n+}"},{"sha":"a6597d2b9f31a9258303070cb664d94c0e4eafcc","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/NoOpRoleWorkflowAdapter.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FNoOpRoleWorkflowAdapter.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.role;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.mod.RoleMod;\n+import org.apache.syncope.client.to.RoleTO;\n+import org.apache.syncope.client.to.WorkflowDefinitionTO;\n+import org.apache.syncope.client.to.WorkflowFormTO;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.util.NotFoundException;\n+import org.apache.syncope.core.workflow.WorkflowException;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+import org.apache.syncope.types.PropagationOperation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Simple implementation basically not involving any workflow engine.\n+ */\n+@Transactional(rollbackFor = {Throwable.class})\n+public class NoOpRoleWorkflowAdapter extends AbstractRoleWorkflowAdapter {\n+\n+    private static final List<String> TASKS = Arrays.asList(new String[]{\"create\", \"update\", \"delete\"});\n+\n+    @Override\n+    public WorkflowResult<Long> create(final RoleTO roleTO)\n+            throws UnauthorizedRoleException, WorkflowException {\n+\n+        SyncopeRole role = new SyncopeRole();\n+        dataBinder.create(role, roleTO);\n+        role = roleDAO.save(role);\n+\n+        final PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(PropagationOperation.CREATE, role.getResourceNames());\n+\n+        return new WorkflowResult<Long>(role.getId(), propByRes, \"create\");\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Long> doUpdate(final SyncopeRole role, final RoleMod roleMod)\n+            throws WorkflowException {\n+\n+        PropagationByResource propByRes = dataBinder.update(role, roleMod);\n+\n+        SyncopeRole updated = roleDAO.save(role);\n+\n+        return new WorkflowResult<Long>(updated.getId(), propByRes, \"update\");\n+    }\n+\n+    @Override\n+    protected void doDelete(final SyncopeRole role)\n+            throws WorkflowException {\n+\n+        roleDAO.delete(role);\n+    }\n+\n+    @Override\n+    public WorkflowResult<Long> execute(RoleTO roleTO, String taskId) throws UnauthorizedRoleException,\n+            NotFoundException, WorkflowException {\n+\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    @Override\n+    public WorkflowDefinitionTO getDefinition()\n+            throws WorkflowException {\n+\n+        return new WorkflowDefinitionTO();\n+    }\n+\n+    @Override\n+    public void updateDefinition(final WorkflowDefinitionTO definition)\n+            throws NotFoundException, WorkflowException {\n+\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public List<String> getDefinedTasks()\n+            throws WorkflowException {\n+\n+        return TASKS;\n+    }\n+\n+    @Override\n+    public List<WorkflowFormTO> getForms() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public WorkflowFormTO getForm(final String workflowId)\n+            throws NotFoundException, WorkflowException {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public WorkflowFormTO claimForm(final String taskId, final String username)\n+            throws NotFoundException, WorkflowException {\n+\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+\n+    @Override\n+    public WorkflowResult<Map.Entry<Long, String>> submitForm(final WorkflowFormTO form, final String username)\n+            throws NotFoundException, WorkflowException {\n+\n+        throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n+    }\n+}"},{"sha":"b70fc2ae6013a43f4f2cc673d4eaaeae4dea6d05","filename":"core/src/main/java/org/apache/syncope/core/workflow/role/RoleWorkflowAdapter.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FRoleWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FRoleWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Frole%2FRoleWorkflowAdapter.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.workflow.role;\n+\n+import org.apache.syncope.client.mod.RoleMod;\n+import org.apache.syncope.client.to.RoleTO;\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n+import org.apache.syncope.core.util.NotFoundException;\n+import org.apache.syncope.core.workflow.WorkflowAdapter;\n+import org.apache.syncope.core.workflow.WorkflowException;\n+import org.apache.syncope.core.workflow.WorkflowResult;\n+\n+/**\n+ * Interface for calling underlying workflow implementations.\n+ */\n+public interface RoleWorkflowAdapter extends WorkflowAdapter {\n+\n+    /**\n+     * Create a role.\n+     *\n+     * @param roleTO role to be created and wether to propagate it as active\n+     * @return role just created\n+     * @throws UnauthorizedRoleException authorization exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowResult<Long> create(RoleTO roleTO) throws UnauthorizedRoleException, WorkflowException;\n+\n+    /**\n+     * Execute a task on a role.\n+     *\n+     * @param roleTO role to be subject to task\n+     * @param taskId to be executed\n+     * @return role just updated\n+     * @throws UnauthorizedRoleException authorization exception\n+     * @throws NotFoundException role not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowResult<Long> execute(RoleTO roleTO, String taskId)\n+            throws UnauthorizedRoleException, NotFoundException, WorkflowException;\n+\n+    /**\n+     * Update a role.\n+     *\n+     * @param roleMod modification set to be performed\n+     * @return role just updated and propagations to be performed\n+     * @throws UnauthorizedRoleException authorization exception\n+     * @throws NotFoundException role not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    WorkflowResult<Long> update(RoleMod roleMod)\n+            throws UnauthorizedRoleException, NotFoundException, WorkflowException;\n+\n+    /**\n+     * Delete a role.\n+     *\n+     * @param roleId role to be deleted\n+     * @throws UnauthorizedRoleException authorization exception\n+     * @throws NotFoundException role not found exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    void delete(Long roleId) throws UnauthorizedRoleException, NotFoundException, WorkflowException;\n+}"},{"sha":"7fea9433a019741f0a429301e90a7b9318cfcce7","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/AbstractUserWorkflowAdapter.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FAbstractUserWorkflowAdapter.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -112,7 +112,6 @@ public WorkflowResult<Long> reactivate(final Long userId)\n \n     @Override\n     public void delete(final Long userId) throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n-\n         doDelete(dataBinder.getUserFromId(userId));\n     }\n }"},{"sha":"ba28ad1ba4daf0f057b0ce9924af3960246f75a9","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/UserWorkflowAdapter.java","status":"modified","additions":4,"deletions":82,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FUserWorkflowAdapter.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -18,33 +18,20 @@\n  */\n package org.apache.syncope.core.workflow.user;\n \n-import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.to.WorkflowDefinitionTO;\n-import org.apache.syncope.client.to.WorkflowFormTO;\n-import org.apache.syncope.core.init.SpringContextInitializer;\n-import org.apache.syncope.core.init.WorkflowLoader;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.NotFoundException;\n+import org.apache.syncope.core.workflow.WorkflowAdapter;\n import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.WorkflowResult;\n \n /**\n  * Interface for calling underlying workflow implementations.\n  */\n-public interface UserWorkflowAdapter {\n-\n-    /**\n-     * Give the class to be instantiated and invoked by SpringContextInitializer for loading anything needed by this\n-     * adapter.\n-     *\n-     * @return null if no init is needed or the WorkflowLoader class for handling initialization\n-     * @see SpringContextInitializer\n-     */\n-    Class<? extends WorkflowLoader> getLoaderClass();\n+public interface UserWorkflowAdapter extends WorkflowAdapter {\n \n     /**\n      * Create an user.\n@@ -73,7 +60,7 @@ WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean disablePw\n      *\n      * @param userTO user to be created and wether to propagate it as active\n      * @param disablePwdPolicyCheck disable password policy check?\n-     * @param enabled specify true/false to force active/supended status.\n+     * @param enabled specify true/false to force active/supended status\n      * @return user just created\n      * @throws UnauthorizedRoleException authorization exception\n      * @throws WorkflowException workflow exception\n@@ -108,7 +95,7 @@ WorkflowResult<Long> activate(Long userId, String token)\n             throws UnauthorizedRoleException, NotFoundException, WorkflowException;\n \n     /**\n-     * Updated an user.\n+     * Update an user.\n      *\n      * @param userMod modification set to be performed\n      * @return user just updated and propagations to be performed\n@@ -160,69 +147,4 @@ WorkflowResult<Map.Entry<Long, Boolean>> update(UserMod userMod)\n      * @throws WorkflowException workflow exception\n      */\n     void delete(Long userId) throws UnauthorizedRoleException, NotFoundException, WorkflowException;\n-\n-    /**\n-     * Get workflow definition.\n-     *\n-     * @return workflow definition as XML\n-     * @throws WorkflowException workflow exception\n-     */\n-    WorkflowDefinitionTO getDefinition() throws WorkflowException;\n-\n-    /**\n-     * Update workflow definition.\n-     *\n-     * @param definition definition as XML\n-     * @throws NotFoundException definition not found exception\n-     * @throws WorkflowException workflow exception\n-     */\n-    void updateDefinition(WorkflowDefinitionTO definition) throws NotFoundException, WorkflowException;\n-\n-    /**\n-     * Get list of defined tasks in workflow.\n-     *\n-     * @return list of defined tasks in workflow\n-     * @throws WorkflowException workflow exception\n-     */\n-    List<String> getDefinedTasks() throws WorkflowException;\n-\n-    /**\n-     * Get all defined forms for current workflow process instances.\n-     *\n-     * @return list of defined forms\n-     */\n-    List<WorkflowFormTO> getForms();\n-\n-    /**\n-     * Get form for given workflowId (if present).\n-     *\n-     * @param workflowId workflow id\n-     * @return form (if present), otherwise null\n-     * @throws NotFoundException definition not found exception\n-     * @throws WorkflowException workflow exception\n-     */\n-    WorkflowFormTO getForm(String workflowId) throws NotFoundException, WorkflowException;\n-\n-    /**\n-     * Claim a form for a given user.\n-     *\n-     * @param taskId Workflow task to which the form is associated\n-     * @param username claiming username\n-     * @return updated form\n-     * @throws NotFoundException not found exception\n-     * @throws WorkflowException workflow exception\n-     */\n-    WorkflowFormTO claimForm(String taskId, String username) throws NotFoundException, WorkflowException;\n-\n-    /**\n-     * Submit a form.\n-     *\n-     * @param form to be submitted\n-     * @param username submitting username\n-     * @return user updated by this form submit\n-     * @throws NotFoundException not found exception\n-     * @throws WorkflowException workflow exception\n-     */\n-    WorkflowResult<Map.Entry<Long, String>> submitForm(WorkflowFormTO form, String username)\n-            throws NotFoundException, WorkflowException;\n }"},{"sha":"cf8be0b337212f46835160bee6e3fa9d6923ed44","filename":"core/src/main/resources/workflow.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fresources%2Fworkflow.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fresources%2Fworkflow.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fworkflow.properties?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n uwfAdapter=org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter\n+rwfAdapter=org.apache.syncope.core.workflow.role.NoOpRoleWorkflowAdapter\n jobExecutorActivate=true"},{"sha":"0826f6420d2ede5a7cb0b539099663d3132861cb","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -28,6 +28,7 @@ under the License.\n   </bean>\n     \n   <bean id=\"uwfAdapter\" class=\"${uwfAdapter}\"/>\n+  <bean id=\"rwfAdapter\" class=\"${rwfAdapter}\"/>\n \n   <bean id=\"syncopeActivitiUserManager\" class=\"org.apache.syncope.core.workflow.user.activiti.SyncopeUserManager\"/>\n   <bean id=\"syncopeActivitiGroupManager\" class=\"org.apache.syncope.core.workflow.user.activiti.SyncopeGroupManager\"/>"},{"sha":"98c15d7391f0debec520fd293a132c39814a6fce","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -320,7 +320,7 @@ public void sync() {\n \n         assertNotNull(userTO);\n         assertEquals(\"test9\", userTO.getUsername());\n-        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"email\").getValues().get(0));\n         assertEquals(\"test9@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n         assertTrue(Integer.valueOf(userTO.getAttributeMap().get(\"fullname\").getValues().get(0)) <= 10);\n@@ -433,7 +433,9 @@ public void reconcile() {\n \n     @Test\n     public void issue196() {\n-        TaskExecTO execution = restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 6);\n+        System.out.println(\"BBBBBBBB\\n\" + execution);\n         assertNotNull(execution);\n         assertEquals(0, execution.getId());\n         assertNotNull(execution.getTask());"},{"sha":"3294494c2aa4e9cd8cac840ed1555abfc9cebf32","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -667,7 +667,7 @@ public void createWithRequiredValueMissing() {\n \n     @Test\n     public void createWithReject() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n \n         UserTO userTO = getSampleTO(\"createWithReject@syncope.apache.org\");\n \n@@ -730,7 +730,7 @@ public void createWithReject() {\n \n     @Test\n     public void createWithApproval() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n@@ -1335,7 +1335,7 @@ public void verifyTaskRegistration() {\n \n     @Test\n     public void createActivate() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n \n         UserTO userTO = getSampleTO(\"createActivate@syncope.apache.org\");\n \n@@ -1363,7 +1363,7 @@ public void createActivate() {\n \n     @Test\n     public void createActivateByUsername() {\n-        Assume.assumeTrue(SpringContextInitializer.isActivitiConfigured());\n+        Assume.assumeTrue(SpringContextInitializer.isActivitiEnabledForUsers());\n \n         UserTO userTO = getSampleTO(\"createActivateByUsername@syncope.apache.org\");\n \n@@ -1401,7 +1401,7 @@ public void suspendReactivate() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         userTO = restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userTO.getId(), UserTO.class);\n \n@@ -1425,7 +1425,7 @@ public void suspendReactivateByUsername() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class, userTO.getUsername());\n@@ -1462,7 +1462,7 @@ public void suspendReactivateOnResource() {\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n \n         assertNotNull(userTO);\n-        assertEquals(SpringContextInitializer.isActivitiConfigured() ? \"active\" : \"created\", userTO.getStatus());\n+        assertEquals(SpringContextInitializer.isActivitiEnabledForUsers() ? \"active\" : \"created\", userTO.getStatus());\n \n         String query = \"?resourceNames=\" + dbTable.getName() + \"&resourceNames=\" + ldap.getName()\n                 + \"&performLocally=true\"; // check also performLocally"},{"sha":"6a6e689c72ca179cf676797f839e083b3cefafb5","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -579,21 +579,21 @@ under the License.\n                 mandatoryCondition=\"false\" password=\"0\"/>\n               \n   <Task DTYPE=\"PropagationTask\" id=\"1\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n-        resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n+        objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n   <TaskExec id=\"1\" task_id=\"1\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"2\" propagationMode=\"ONE_PHASE\" propagationOperation=\"CREATE\"\n-        resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n+        objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"3\" propagationMode=\"TWO_PHASES\" propagationOperation=\"DELETE\"\n-        resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n+        objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" syncopeUser_id=\"1\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n   <Task DTYPE=\"SyncTask\" id=\"4\" name=\"CSV Task\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.sync.SyncJob\"/>\n   <Task DTYPE=\"SchedTask\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.quartz.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n-        resource_name=\"ws-target-resource-nopropagation\" syncopeUser_id=\"1\"\n+        objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" syncopeUser_id=\"1\"\n         xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n   <Task DTYPE=\"SyncTask\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\""},{"sha":"4942f1502a8cecc6e3166dcff60e31841ad85da6","filename":"core/src/test/resources/noopworkflow/workflow.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2Fworkflow.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2Fworkflow.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fnoopworkflow%2Fworkflow.properties?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n uwfAdapter=org.apache.syncope.core.workflow.user.NoOpUserWorkflowAdapter\n-jobExecutorActivate=false\n\\ No newline at end of file\n+rwfAdapter=org.apache.syncope.core.workflow.role.NoOpRoleWorkflowAdapter\n+jobExecutorActivate=false"},{"sha":"05cfa04468cbcf970023e701eaf413d826d41ac8","filename":"core/src/test/resources/workflow.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fresources%2Fworkflow.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e0f512ab88ca02d76d57f59d3a2772b8a4991a3b/core%2Fsrc%2Ftest%2Fresources%2Fworkflow.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fworkflow.properties?ref=e0f512ab88ca02d76d57f59d3a2772b8a4991a3b","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n uwfAdapter=org.apache.syncope.core.workflow.user.activiti.ActivitiUserWorkflowAdapter\n+rwfAdapter=org.apache.syncope.core.workflow.role.NoOpRoleWorkflowAdapter\n jobExecutorActivate=false"}]}