{"sha":"2a1aeb1f7340775efc8c558f37009f072faf7bbf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJhMWFlYjFmNzM0MDc3NWVmYzhjNTU4ZjM3MDA5ZjA3MmZhZjdiYmY=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-04-23T07:52:22Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-04-23T07:52:22Z"},"message":"SYNCOPE-1553: Translate AuthModuleConfs to WA (#176)\n\n* SYNCOPE-1553: map auth module conf to wa properties\r\n\r\n* SYNCOPE-1553: map auth modules to settings\r\n\r\n* SYNCOPE-1553: map auth modules to settings","tree":{"sha":"001e9ccca00cb321aa68b0771a5f673c536f78e1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/001e9ccca00cb321aa68b0771a5f673c536f78e1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a1aeb1f7340775efc8c558f37009f072faf7bbf","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoUk2CRBK7hj4Ov3rIwAAdHIIAJZlbyS5Jq413KuhKpMUWQl2\nDLMj5yXe88OVn3tM1jIICeX/XSsWRtXoepMNG3UWL9pwkkam2vYq3R5R6XvW+To/\nXb9bb7CbNY+tnYq+zvUYqwUH1N3X1WE32z7gA0D9BTUoA/z+NEannbX1b+CWGKj3\npJ0k21w0cj5TJVbitOntc0fXzILYjQHMKhaeCfnrxiseAyyMpr+YPoEKIuexFpym\nHSD666IQvJj/ffJrer4nN0DJis12u/n3NC4BawqeH7vbCXN5euDLu2JUyGY0mS2b\n6g+OCQ76NMNmSeOc+caJIhfmw/4oCAFsDxGC4g9FqsUTYbes8BQPTBFR029AIms=\n=Waos\n-----END PGP SIGNATURE-----\n","payload":"tree 001e9ccca00cb321aa68b0771a5f673c536f78e1\nparent 21860508ec0f42000e27374b322259e0413ff6df\nauthor Misagh Moayyed <mm1844@gmail.com> 1587628342 +0430\ncommitter GitHub <noreply@github.com> 1587628342 +0430\n\nSYNCOPE-1553: Translate AuthModuleConfs to WA (#176)\n\n* SYNCOPE-1553: map auth module conf to wa properties\r\n\r\n* SYNCOPE-1553: map auth modules to settings\r\n\r\n* SYNCOPE-1553: map auth modules to settings"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a1aeb1f7340775efc8c558f37009f072faf7bbf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a1aeb1f7340775efc8c558f37009f072faf7bbf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a1aeb1f7340775efc8c558f37009f072faf7bbf/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"21860508ec0f42000e27374b322259e0413ff6df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21860508ec0f42000e27374b322259e0413ff6df","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/21860508ec0f42000e27374b322259e0413ff6df"}],"stats":{"total":372,"additions":348,"deletions":24},"files":[{"sha":"16bd7041a37090d7cfba8a074bcd22c6fa9d118b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/JDBCAuthModuleConf.java","status":"modified","additions":70,"deletions":1,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1aeb1f7340775efc8c558f37009f072faf7bbf/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1aeb1f7340775efc8c558f37009f072faf7bbf/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FJDBCAuthModuleConf.java?ref=2a1aeb1f7340775efc8c558f37009f072faf7bbf","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.lib.auth;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+\n import javax.xml.bind.annotation.XmlType;\n import java.util.ArrayList;\n import java.util.List;\n@@ -40,7 +41,7 @@ public class JDBCAuthModuleConf extends AbstractAuthModuleConf {\n     /**\n      * Password field/column name to retrieve.\n      */\n-    private String fieldPassword;\n+    private String fieldPassword = \"password\";\n \n     /**\n      * Boolean field that should indicate whether the account is expired.\n@@ -52,6 +53,35 @@ public class JDBCAuthModuleConf extends AbstractAuthModuleConf {\n      */\n     private String fieldDisabled;\n \n+    /**\n+     * The database dialect is a configuration setting for platform independent software (JPA, Hibernate, etc)\n+     * which allows such software to translate its generic SQL statements into vendor specific DDL, DML.\n+     */\n+    private String dialect = \"org.hibernate.dialect.H2Dialect\";\n+\n+    /**\n+     * The JDBC driver used to connect to the database.\n+     */\n+    private String driverClass = \"org.h2.Driver\";\n+\n+    /**\n+     * The database connection URL.\n+     */\n+    private String url = \"jdbc:h2:tcp://localhost:9092/mem:authdb;DB_CLOSE_DELAY=-1\";\n+    \n+    /**\n+     * The database user.\n+     * <p>\n+     * The database user must have sufficient permissions to be able to handle\n+     * schema changes and updates, when needed.\n+     */\n+    private String user = \"sa\";\n+\n+    /**\n+     * The database connection password.\n+     */\n+    private String password = \"sa\";\n+\n     /**\n      * List of column names to fetch as user attributes.\n      */\n@@ -96,4 +126,43 @@ public List<String> getPrincipalAttributeList() {\n         return principalAttributeList;\n     }\n \n+    public String getDialect() {\n+        return dialect;\n+    }\n+\n+    public void setDialect(final String dialect) {\n+        this.dialect = dialect;\n+    }\n+\n+    public String getDriverClass() {\n+        return driverClass;\n+    }\n+\n+    public void setDriverClass(final String driverClass) {\n+        this.driverClass = driverClass;\n+    }\n+\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(final String url) {\n+        this.url = url;\n+    }\n+\n+    public String getUser() {\n+        return user;\n+    }\n+\n+    public void setUser(final String user) {\n+        this.user = user;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n }"},{"sha":"55260bc5652a2786c733d52b7383f1f5f9962a6c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/LDAPAuthModuleConf.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1aeb1f7340775efc8c558f37009f072faf7bbf/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1aeb1f7340775efc8c558f37009f072faf7bbf/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FLDAPAuthModuleConf.java?ref=2a1aeb1f7340775efc8c558f37009f072faf7bbf","patch":"@@ -18,9 +18,16 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n @XmlRootElement(name = \"ldapAuthModuleConf\")\n @XmlType\n public class LDAPAuthModuleConf extends AbstractAuthModuleConf {\n@@ -67,6 +74,11 @@ public class LDAPAuthModuleConf extends AbstractAuthModuleConf {\n \n     private String baseDn;\n \n+    /**\n+     * List of attribute names to fetch as user attributes.\n+     */\n+    private final List<String> principalAttributeList = new ArrayList<>();\n+\n     public String getSearchFilter() {\n         return searchFilter;\n     }\n@@ -123,4 +135,10 @@ public void setBaseDn(final String baseDn) {\n         this.baseDn = baseDn;\n     }\n \n+    @XmlElementWrapper(name = \"principalAttributeList\")\n+    @XmlElement(name = \"principalAttributeList\")\n+    @JsonProperty(\"principalAttributeList\")\n+    public List<String> getPrincipalAttributeList() {\n+        return principalAttributeList;\n+    }\n }"},{"sha":"f8be20a54f19369c4d68fbcdc4aaad80ac268823","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthModuleLogic.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1aeb1f7340775efc8c558f37009f072faf7bbf/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1aeb1f7340775efc8c558f37009f072faf7bbf/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java?ref=2a1aeb1f7340775efc8c558f37009f072faf7bbf","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n-\n import java.lang.reflect.Method;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n@@ -60,7 +59,7 @@ public AuthModuleTO update(final AuthModuleTO authModuleTO) {\n         return binder.getAuthModuleTO(authModuleDAO.save(binder.update(authModule, authModuleTO)));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_LIST + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_LIST + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuthModuleTO> list() {\n         return authModuleDAO.findAll().stream()."},{"sha":"9e8b21b92f27fada49b6fd9e478d5a563ce0dd0d","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1aeb1f7340775efc8c558f37009f072faf7bbf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1aeb1f7340775efc8c558f37009f072faf7bbf/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=2a1aeb1f7340775efc8c558f37009f072faf7bbf","patch":"@@ -63,26 +63,26 @@ under the License.\n   <Implementation id=\"DenyAttrReleasePolicyConf\" type=\"ATTR_RELEASE_CONF\" engine=\"JAVA\"\n                   body='{\"@class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n   <AttrReleasePolicy id=\"219935c7-deb3-40b3-8a9a-683037e523a2\" name=\"DenyAttrReleasePolicy\" description=\"deny attribute release policy policy\"/>\n-  \n+\n   <!-- Authentication modules -->\n-  <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\" \n-              description=\"LDAP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"name\":\"MyLDAPAuthModuleConf\",\"userIdAttribute\":\"uid\",\"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+  <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\"\n+              description=\"LDAP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"name\":\"MyLDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"cn=Directory Manager,dc=example,dc=org\", \"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=people,dc=example,dc=org\",\"subtreeSearch\":true}'/>\n   <AuthModule id=\"4c3ed7e8-7008-11ea-bc55-0242ac130003\" name=\"DefaultJDBCAuthModule\"\n-              description=\"JDBC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"name\":\"MyJDBCAuthModuleConf\", \"sql\":\"SELECT * FROM table WHERE name=?\"}'/>\n+              description=\"JDBC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"name\":\"MyJDBCAuthModuleConf\", \"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n   <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n               description=\"Google Mfa auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\"}'/>\n   <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n-              description=\"OIDC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"www.testurl.com\"}'/>\n+              description=\"OIDC auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"www.testurl.com\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n   <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n-              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"providerName\":\"testProviderName\",\"serviceProviderMetadataPath\":\"file:/etc/metadata\"}'/>\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"keystorePath\":\"file:/etc/metadata/keystore.jks\",\"identityProviderMetadataPath\":\"file:/etc/metadata/idp.xml\", \"serviceProviderMetadataPath\":\"file:/etc/metadata/sp.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n   <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n-              description=\"Jaas auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\"}'/>\n+              description=\"Jaas auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n   <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\"\n-              description=\"Static auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"name\":\"MyStaticAuthModuleConf\",\"users\":{\"user1\": \"testUserPassword123\"}}'/>\n+              description=\"Static auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"name\":\"MyStaticAuthModuleConf\",\"users\":{\"syncope1\": \"$cynop3\"}}'/>\n   <AuthModule id=\"4c3edd60-7008-11ea-bc55-0242ac130003\" name=\"DefaultSyncopeAuthModule\"\n-              description=\"Syncope auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"name\":\"MySyncopeAuthModuleConf\",\"domain\":\"Master\",\"url\":\"http://mydomain.com/syncope/rest\"}'/>\n+              description=\"Syncope auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"name\":\"MySyncopeAuthModuleConf\",\"domain\":\"Master\",\"url\":\"http://localhost:9080/syncope/rest\"}'/>\n   <AuthModule id=\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\" name=\"DefaultRadiusAuthModule\"\n-              description=\"Radius auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"name\":\"MyRadiusAuthModuleConf\",\"protocol\":\"MSCHAPv2\",\"inetAddress\":\"1.2.3.4\", \"sharedSecret\":\"thesecret\"}'/>\n+              description=\"Radius auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"name\":\"MyRadiusAuthModuleConf\",\"protocol\":\"PAP\",\"inetAddress\":\"localhost\", \"sharedSecret\":\"testing123\"}'/>\n   <AuthModule id=\"f6e1288d-50d9-45fe-82ee-597c42242205\" name=\"DefaultU2FAuthModule\"\n               description=\"U2F auth module\" jsonConf='{\"@class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"name\":\"MyU2FAuthModuleConf\",\"expireDevices\":40}'/>\n "},{"sha":"875ac9006c4d6b1e89cbdaad24470ec1d7efa211","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":248,"deletions":10,"changes":258,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1aeb1f7340775efc8c558f37009f072faf7bbf/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1aeb1f7340775efc8c558f37009f072faf7bbf/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=2a1aeb1f7340775efc8c558f37009f072faf7bbf","patch":"@@ -19,6 +19,34 @@\n \n package org.apache.syncope.wa.bootstrap;\n \n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.configuration.CasCoreConfigurationUtils;\n+import org.apereo.cas.configuration.model.support.generic.AcceptAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.jaas.JaasAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.GoogleAuthenticatorMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.U2FMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n+import org.apereo.cas.configuration.model.support.radius.RadiusProperties;\n+import org.apereo.cas.configuration.model.support.syncope.SyncopeAuthenticationProperties;\n+import org.apereo.cas.util.model.TriStateBoolean;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.JaasAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.LDAPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.OIDCAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.RadiusAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.StaticAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n+import org.apache.syncope.common.lib.auth.U2FAuthModuleConf;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.wa.WARestClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -28,8 +56,9 @@\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n \n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n \n @Order\n public class SyncopeWAPropertySourceLocator implements PropertySourceLocator {\n@@ -41,19 +70,228 @@ public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n+    private static void mapSyncopeAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                                 final AuthModuleConf authConf) {\n+        SyncopeAuthModuleConf conf = SyncopeAuthModuleConf.class.cast(authConf);\n+        SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n+        syncopeProps.setName(conf.getName());\n+        syncopeProps.setDomain(conf.getDomain());\n+        syncopeProps.setUrl(conf.getUrl());\n+        casProperties.getAuthn().setSyncope(syncopeProps);\n+    }\n+\n+    private static void mapStaticAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                                final AuthModuleConf authConf) {\n+        StaticAuthModuleConf conf = StaticAuthModuleConf.class.cast(authConf);\n+        AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n+        staticProps.setName(conf.getName());\n+        String users = conf.getUsers().entrySet().stream().\n+            map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n+            collect(Collectors.joining(\",\"));\n+        staticProps.setUsers(users);\n+        casProperties.getAuthn().setAccept(staticProps);\n+    }\n+\n+    private static void mapLdapAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                              final AuthModuleConf authConf) {\n+        LDAPAuthModuleConf ldapConf = LDAPAuthModuleConf.class.cast(authConf);\n+\n+        LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n+        ldapProps.setName(ldapConf.getName());\n+        ldapProps.setBaseDn(ldapConf.getBaseDn());\n+        ldapProps.setBindCredential(ldapConf.getBindCredential());\n+        ldapProps.setSearchFilter(ldapConf.getSearchFilter());\n+        ldapProps.setPrincipalAttributeId(ldapConf.getUserIdAttribute());\n+        ldapProps.setLdapUrl(ldapConf.getLdapUrl());\n+        ldapProps.setSubtreeSearch(ldapConf.isSubtreeSearch());\n+        ldapProps.setPrincipalAttributeList(ldapConf.getPrincipalAttributeList());\n+        casProperties.getAuthn().getLdap().add(ldapProps);\n+    }\n+\n+    private static void mapGoogleMfaAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                                   final AuthModuleConf authConf) {\n+        GoogleMfaAuthModuleConf conf = GoogleMfaAuthModuleConf.class.cast(authConf);\n+\n+        GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n+        props.setName(conf.getName());\n+        props.setIssuer(conf.getIssuer());\n+        props.setCodeDigits(conf.getCodeDigits());\n+        props.setLabel(conf.getLabel());\n+        props.setTimeStepSize(conf.getTimeStepSize());\n+        props.setWindowSize(conf.getWindowSize());\n+\n+        casProperties.getAuthn().getMfa().setGauth(props);\n+    }\n+\n+    private static void mapU2fAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                             final AuthModuleConf authConf) {\n+        U2FAuthModuleConf conf = U2FAuthModuleConf.class.cast(authConf);\n+\n+        U2FMultifactorProperties props = new U2FMultifactorProperties();\n+        props.setName(conf.getName());\n+        props.setExpireDevices(conf.getExpireDevices());\n+        props.setExpireDevicesTimeUnit(TimeUnit.valueOf(conf.getExpireDevicesTimeUnit()));\n+        props.setExpireRegistrations(conf.getExpireRegistrations());\n+        props.setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n+        casProperties.getAuthn().getMfa().setU2f(props);\n+    }\n+\n+    private static void mapJaasAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                              final AuthModuleConf authConf) {\n+        JaasAuthModuleConf conf = JaasAuthModuleConf.class.cast(authConf);\n+        JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n+        props.setName(conf.getName());\n+        props.setLoginConfigType(conf.getLoginConfigType());\n+        props.setKerberosKdcSystemProperty(conf.getKerberosKdcSystemProperty());\n+        props.setKerberosRealmSystemProperty(conf.getKerberosRealmSystemProperty());\n+        props.setLoginConfigType(conf.getLoginConfigurationFile());\n+        props.setRealm(conf.getRealm());\n+        casProperties.getAuthn().getJaas().add(props);\n+    }\n+\n+    private static void mapJdbcAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                              final AuthModuleConf authConf) {\n+        JDBCAuthModuleConf conf = JDBCAuthModuleConf.class.cast(authConf);\n+        QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n+        props.setName(conf.getName());\n+        props.setSql(conf.getSql());\n+        props.setFieldDisabled(conf.getFieldDisabled());\n+        props.setFieldExpired(conf.getFieldExpired());\n+        props.setFieldPassword(conf.getFieldPassword());\n+        props.setDialect(conf.getDialect());\n+        props.setDriverClass(conf.getDriverClass());\n+        props.setPassword(conf.getPassword());\n+        props.setUrl(conf.getUrl());\n+        props.setUser(conf.getUser());\n+        props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n+        casProperties.getAuthn().getJdbc().getQuery().add(props);\n+    }\n+\n+    private static void mapOidcAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                              final AuthModuleConf authConf) {\n+        OIDCAuthModuleConf conf = OIDCAuthModuleConf.class.cast(authConf);\n+        Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n+        props.setId(conf.getId());\n+        props.setCustomParams(conf.getCustomParams());\n+        props.setDiscoveryUri(conf.getDiscoveryUri());\n+        props.setMaxClockSkew(conf.getMaxClockSkew());\n+        props.setClientName(conf.getName());\n+        props.setPreferredJwsAlgorithm(conf.getPreferredJwsAlgorithm());\n+        props.setResponseMode(conf.getResponseMode());\n+        props.setResponseType(conf.getResponseType());\n+        props.setScope(conf.getScope());\n+        props.setSecret(conf.getSecret());\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n+        client.setGeneric(props);\n+        casProperties.getAuthn().getPac4j().getOidc().add(client);\n+    }\n+\n+    private static void mapRadiusAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                                final AuthModuleConf authConf) {\n+        RadiusAuthModuleConf conf = RadiusAuthModuleConf.class.cast(authConf);\n+        RadiusProperties props = new RadiusProperties();\n+        props.setName(conf.getName());\n+\n+        props.getClient().setAccountingPort(conf.getAccountingPort());\n+        props.getClient().setAuthenticationPort(conf.getAuthenticationPort());\n+        props.getClient().setInetAddress(conf.getInetAddress());\n+        props.getClient().setSharedSecret(conf.getSharedSecret());\n+        props.getClient().setSocketTimeout(conf.getSocketTimeout());\n+\n+        props.getServer().setNasIdentifier(conf.getNasIdentifier());\n+        props.getServer().setNasIpAddress(conf.getNasIpAddress());\n+        props.getServer().setNasIpv6Address(conf.getNasIpv6Address());\n+        props.getServer().setNasPort(conf.getNasPort());\n+        props.getServer().setNasPortId(conf.getNasPortId());\n+        props.getServer().setNasPortType(conf.getNasPortType());\n+        props.getServer().setNasRealPort(conf.getNasRealPort());\n+        props.getServer().setProtocol(conf.getProtocol());\n+        props.getServer().setRetries(conf.getRetries());\n+\n+        casProperties.getAuthn().setRadius(props);\n+    }\n+\n+    private static void mapSaml2IdPAuthModuleConf(final CasConfigurationProperties casProperties,\n+                                                  final AuthModuleConf authConf) {\n+        SAML2IdPAuthModuleConf conf = SAML2IdPAuthModuleConf.class.cast(authConf);\n+        Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n+        props.setAcceptedSkew(conf.getAcceptedSkew());\n+        props.setAssertionConsumerServiceIndex(conf.getAssertionConsumerServiceIndex());\n+        props.setAttributeConsumingServiceIndex(conf.getAttributeConsumingServiceIndex());\n+        props.setAuthnContextClassRef(conf.getAuthnContextClassRefs());\n+        props.setAuthnContextComparisonType(conf.getAuthnContextComparisonType());\n+        props.setBlackListedSignatureSigningAlgorithms(conf.getBlackListedSignatureSigningAlgorithms());\n+        props.setDestinationBinding(conf.getDestinationBinding());\n+        props.setIdentityProviderMetadataPath(conf.getIdentityProviderMetadataPath());\n+        props.setKeystoreAlias(conf.getKeystoreAlias());\n+        props.setKeystorePassword(conf.getKeystorePassword());\n+        props.setKeystorePath(conf.getKeystorePath());\n+        props.setMaximumAuthenticationLifetime(conf.getMaximumAuthenticationLifetime());\n+        props.setNameIdPolicyFormat(conf.getNameIdPolicyFormat());\n+        props.setPrivateKeyPassword(conf.getPrivateKeyPassword());\n+        props.setProviderName(conf.getProviderName());\n+        props.setServiceProviderEntityId(conf.getServiceProviderEntityId());\n+        props.setServiceProviderMetadataPath(conf.getServiceProviderMetadataPath());\n+        props.setSignatureAlgorithms(conf.getSignatureAlgorithms());\n+        props.setSignatureCanonicalizationAlgorithm(conf.getSignatureCanonicalizationAlgorithm());\n+        props.setSignatureReferenceDigestMethods(conf.getSignatureReferenceDigestMethods());\n+        props.setPrincipalAttributeId(conf.getUserIdAttribute());\n+        if (StringUtils.isBlank(conf.getNameIdPolicyAllowCreate())) {\n+            props.setNameIdPolicyAllowCreate(TriStateBoolean.UNDEFINED);\n+        } else {\n+            props.setNameIdPolicyAllowCreate(TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n+        }\n+        casProperties.getAuthn().getPac4j().getSaml().add(props);\n+    }\n+\n     @Override\n     public PropertySource<?> locate(final Environment environment) {\n-        try {\n-            Map<String, Object> properties = new HashMap<>();\n-            if (WARestClient.isReady()) {\n-                LOG.info(\"Bootstrapping WA configuration\");\n-                return new MapPropertySource(getClass().getName(), properties);\n-            }\n-\n+        if (!WARestClient.isReady()) {\n             LOG.warn(\"Application context is not ready to bootstrap WA configuration\");\n             return null;\n-        } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Unable to fetch settings\", e);\n         }\n+        LOG.info(\"Bootstrapping WA configuration\");\n+        AuthModuleService authService = waRestClient.getSyncopeClient().getService(AuthModuleService.class);\n+        CasConfigurationProperties casProperties = new CasConfigurationProperties();\n+        authService.list().forEach(authModuleTO -> {\n+\n+            AuthModuleConf authConf = authModuleTO.getConf();\n+            LOG.debug(\"Mapping auth module {}:{} as conf {}\", authModuleTO.getKey(),\n+                authModuleTO.getName(), authConf.getName());\n+            if (authConf instanceof LDAPAuthModuleConf) {\n+                mapLdapAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof StaticAuthModuleConf) {\n+                mapStaticAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof SyncopeAuthModuleConf) {\n+                mapSyncopeAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof GoogleMfaAuthModuleConf) {\n+                mapGoogleMfaAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof JaasAuthModuleConf) {\n+                mapJaasAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof JDBCAuthModuleConf) {\n+                mapJdbcAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof OIDCAuthModuleConf) {\n+                mapOidcAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof RadiusAuthModuleConf) {\n+                mapRadiusAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof SAML2IdPAuthModuleConf) {\n+                mapSaml2IdPAuthModuleConf(casProperties, authConf);\n+            }\n+            if (authConf instanceof U2FAuthModuleConf) {\n+                mapU2fAuthModuleConf(casProperties, authConf);\n+            }\n+        });\n+        Map<String, Object> properties = CasCoreConfigurationUtils.asMap(casProperties.withHolder());\n+        LOG.debug(\"Collected WA properties: {}\", properties);\n+        return new MapPropertySource(getClass().getName(), properties);\n     }\n }"}]}