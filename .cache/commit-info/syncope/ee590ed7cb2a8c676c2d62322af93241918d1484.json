{"sha":"ee590ed7cb2a8c676c2d62322af93241918d1484","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVlNTkwZWQ3Y2IyYThjNjc2YzJkNjIzMjJhZjkzMjQxOTE4ZDE0ODQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-01-07T14:58:55Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-01-07T14:58:55Z"},"message":"[SYNCOPE-156] provides relationship configuration step for users and anyobjects","tree":{"sha":"77ef600536aa5af89ae3b5d5a858531c56138323","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/77ef600536aa5af89ae3b5d5a858531c56138323"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ee590ed7cb2a8c676c2d62322af93241918d1484","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee590ed7cb2a8c676c2d62322af93241918d1484","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ee590ed7cb2a8c676c2d62322af93241918d1484","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ee590ed7cb2a8c676c2d62322af93241918d1484/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"b66047c91db4d470c1704911d6738c4fc548753f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b66047c91db4d470c1704911d6738c4fc548753f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b66047c91db4d470c1704911d6738c4fc548753f"}],"stats":{"total":1241,"additions":952,"deletions":289},"files":[{"sha":"d8be863c8ec98246a8f4057af97fa98e7bbc634d","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/SerializableTransformer.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSerializableTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSerializableTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSerializableTransformer.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import org.apache.commons.collections4.Transformer;\n+\n+/**\n+ * Serializable transformer.\n+ *\n+ * @param <I> input type.\n+ * @param <O> output type.\n+ */\n+public interface SerializableTransformer<I extends Serializable, O extends Serializable>\n+        extends Transformer<I, O>, Serializable {\n+\n+}"},{"sha":"617c5628ec3942b6f56861542c9af9dac7a74f21","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -368,7 +368,25 @@ public void onEvent(final IEvent<?> event) {\n             }\n \n             target.add(ListViewPanel.this);\n+            super.onEvent(event);\n+        } else if (event.getPayload() instanceof ListViewReload) {\n+            ((ListViewReload) event.getPayload()).getTarget().add(ListViewPanel.this);\n+        } else {\n+            super.onEvent(event);\n         }\n-        super.onEvent(event);\n+    }\n+\n+    public static class ListViewReload {\n+\n+        private final AjaxRequestTarget target;\n+\n+        public ListViewReload(final AjaxRequestTarget target) {\n+            this.target = target;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n     }\n }"},{"sha":"329fd2656cbde5c16810098b960f4176e79a67ff","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -195,4 +195,8 @@ public String transform(final ResourceTO input) {\n     public IModel<List<SearchClause>> getModel() {\n         return this.model;\n     }\n+\n+    public String getBackObjectType() {\n+        return this.type;\n+    }\n }"},{"sha":"5a31adbed4ef0bd92efc7c87473cb2ea8691d08f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSelectionSearchResultPanel.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSelectionSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSelectionSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSelectionSearchResultPanel.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n+import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.console.wizards.any.AnyHandler;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.wicket.PageReference;\n+\n+public final class AnyObjectSelectionSearchResultPanel extends AnySelectionSearchResultPanel<AnyObjectTO> {\n+\n+    private static final long serialVersionUID = -1100228004207271272L;\n+\n+    public static final String[] USER_DEFAULT_SELECTION = { \"key\" };\n+\n+    private AnyObjectSelectionSearchResultPanel(final String id,\n+            final AnyObjectSelectionSearchResultPanel.Builder builder) {\n+        super(id, builder);\n+    }\n+\n+    @Override\n+    protected String[] getDislayAttributes() {\n+        return USER_DEFAULT_SELECTION;\n+    }\n+\n+    @Override\n+    public String getPrefDetailsView() {\n+        return String.format(Constants.PREF_ANY_DETAILS_VIEW, type);\n+    }\n+\n+    @Override\n+    public String getPrefAttributesView() {\n+        return String.format(Constants.PREF_ANY_ATTRIBUTES_VIEW, type);\n+    }\n+\n+    @Override\n+    public String getPrefDerivedAttributesView() {\n+        return String.format(Constants.PREF_ANY_DERIVED_ATTRIBUTES_VIEW, type);\n+    }\n+\n+    public static final class Builder extends AnySelectionSearchResultPanel.Builder<AnyObjectTO> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public Builder(\n+                final List<AnyTypeClassTO> anyTypeClassTOs,\n+                final AbstractAnyRestClient<AnyObjectTO> restClient,\n+                final String type,\n+                final PageReference pageRef) {\n+\n+            super(anyTypeClassTOs, restClient, type, pageRef);\n+            this.filtered = true;\n+            this.checkBoxEnabled = false;\n+        }\n+\n+        @Override\n+        protected WizardMgtPanel<AnyHandler<AnyObjectTO>> newInstance(final String id) {\n+            return new AnyObjectSelectionSearchResultPanel(id, this);\n+        }\n+    }\n+}"},{"sha":"82b277b38d8d7f7c14688a5617e9b66d4af359ad","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionSearchResultPanel.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionSearchResultPanel.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.syncope.client.console.pages.AnyDisplayAttributesModalPage;\n+import org.apache.syncope.client.console.panels.AnyObjectSearchResultPanel;\n+import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AttrColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.types.AnyEntitlement;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.springframework.util.ReflectionUtils;\n+\n+public abstract class AnySelectionSearchResultPanel<T extends AnyTO> extends AnyObjectSearchResultPanel<T> {\n+\n+    private static final long serialVersionUID = -1100228004207271272L;\n+\n+    protected AnySelectionSearchResultPanel(\n+            final String id, final AnySelectionSearchResultPanel.Builder<T> builder) {\n+        super(id, builder);\n+    }\n+\n+    @Override\n+    protected List<IColumn<T, String>> getColumns() {\n+\n+        final List<IColumn<T, String>> columns = new ArrayList<>();\n+\n+        for (String name : prefMan.getList(getRequest(), getPrefDetailsView())) {\n+            final Field field = ReflectionUtils.findField(AnyObjectTO.class, name);\n+\n+            if (\"token\".equalsIgnoreCase(name)) {\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n+            } else if (field != null && field.getType().equals(Date.class)) {\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n+            } else {\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n+            }\n+        }\n+\n+        for (String name : prefMan.getList(getRequest(), getPrefAttributesView())) {\n+            if (schemaNames.contains(name)) {\n+                columns.add(new AttrColumn<T>(name, SchemaType.PLAIN));\n+            }\n+        }\n+\n+        for (String name : prefMan.getList(getRequest(), getPrefDerivedAttributesView())) {\n+            if (dSchemaNames.contains(name)) {\n+                columns.add(new AttrColumn<T>(name, SchemaType.DERIVED));\n+            }\n+        }\n+\n+        // Add defaults in case of no selection\n+        if (columns.isEmpty()) {\n+            for (String name : getDislayAttributes()) {\n+                columns.add(new PropertyColumn<T, String>(new ResourceModel(name, name), name, name));\n+            }\n+\n+            prefMan.setList(getRequest(), getResponse(), getPrefDetailsView(),\n+                    Arrays.asList(getDislayAttributes()));\n+        }\n+\n+        columns.add(new ActionColumn<T, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = -3503023501954863131L;\n+\n+            @Override\n+            public ActionLinksPanel<T> getActions(final String componentId, final IModel<T> model) {\n+\n+                final ActionLinksPanel.Builder<T> panel = ActionLinksPanel.builder(page.getPageReference());\n+\n+                panel.add(new ActionLink<T>() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final T ignore) {\n+                        send(AnySelectionSearchResultPanel.this,\n+                                Broadcast.BUBBLE, new ItemSelection<T>(target, model.getObject()));\n+                    }\n+                }, ActionLink.ActionType.SELECT, String.format(\"%s_%s\", type, AnyEntitlement.READ));\n+\n+                return panel.build(componentId, model.getObject());\n+            }\n+\n+            @Override\n+            public ActionLinksPanel<T> getHeader(final String componentId) {\n+                final ActionLinksPanel.Builder<T> panel = ActionLinksPanel.builder(page.getPageReference());\n+\n+                return panel.\n+                        add(new ActionLink<T>() {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final T ignore) {\n+                                // still missing content\n+                                target.add(modal.setContent(new AnyDisplayAttributesModalPage<>(\n+                                        modal, page.getPageReference(), schemaNames, dSchemaNames, type)));\n+\n+                                modal.header(new ResourceModel(\"any.attr.display\", \"\"));\n+                                modal.show(true);\n+                            }\n+                        }, ActionLink.ActionType.CHANGE_VIEW, String.format(\"%s_%s\", type, AnyEntitlement.READ)).\n+                        add(new ActionLink<T>() {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final T ignore) {\n+                                if (target != null) {\n+                                    target.add(container);\n+                                }\n+                            }\n+                        }, ActionLink.ActionType.RELOAD, String.format(\"%s_%s\", type, AnyEntitlement.SEARCH)).\n+                        build(componentId);\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBulkActions() {\n+        return Collections.<ActionLink.ActionType>emptyList();\n+    }\n+\n+    protected abstract String[] getDislayAttributes();\n+\n+    protected abstract String getPrefDetailsView();\n+\n+    protected abstract String getPrefAttributesView();\n+\n+    protected abstract String getPrefDerivedAttributesView();\n+\n+    public static class Builder<T extends AnyTO> extends AnyObjectSearchResultPanel.Builder<T> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public Builder(\n+                final List<AnyTypeClassTO> anyTypeClassTOs,\n+                final AbstractAnyRestClient<T> restClient,\n+                final String type,\n+                final PageReference pageRef) {\n+\n+            super(anyTypeClassTOs, restClient, type, pageRef);\n+            this.filtered = true;\n+            this.checkBoxEnabled = false;\n+        }\n+    }\n+\n+    public static class ItemSelection<T extends AnyTO> implements Serializable {\n+\n+        private static final long serialVersionUID = 1242677935378149180L;\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final T usr;\n+\n+        public ItemSelection(final AjaxRequestTarget target, final T usr) {\n+            this.target = target;\n+            this.usr = usr;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public T getSelection() {\n+            return usr;\n+        }\n+    }\n+}"},{"sha":"8ba4593db26086f27269233a811d531f54e31634","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSelectionSearchResultPanel.java","status":"modified","additions":16,"deletions":124,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSelectionSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSelectionSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSelectionSearchResultPanel.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -18,132 +18,46 @@\n  */\n package org.apache.syncope.client.console.panels.search;\n \n-import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n import java.util.List;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.pages.GroupDisplayAttributesModalPage;\n-import org.apache.syncope.client.console.panels.GroupSearchResultPanel;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AttrColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.console.wizards.any.AnyHandler;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.event.Broadcast;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.ResourceModel;\n-import org.springframework.util.ReflectionUtils;\n \n-public final class GroupSelectionSearchResultPanel extends GroupSearchResultPanel {\n+public final class GroupSelectionSearchResultPanel extends AnySelectionSearchResultPanel<GroupTO> {\n \n     private static final long serialVersionUID = -1100228004207271271L;\n \n+    public static final String[] GROUP_DEFAULT_SELECTION = { \"key\", \"name\" };\n+\n     private GroupSelectionSearchResultPanel(final String id, final Builder builder) {\n         super(id, builder);\n     }\n \n     @Override\n-    protected List<IColumn<GroupTO, String>> getColumns() {\n-        final List<IColumn<GroupTO, String>> columns = new ArrayList<>();\n-\n-        for (String name : prefMan.getList(getRequest(), Constants.PREF_GROUP_DETAILS_VIEW)) {\n-            final Field field = ReflectionUtils.findField(GroupTO.class, name);\n-\n-            if (\"token\".equalsIgnoreCase(name)) {\n-                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n-            } else if (field != null && field.getType().equals(Date.class)) {\n-                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n-            } else {\n-                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n-            }\n-        }\n-\n-        for (String name : prefMan.getList(getRequest(), Constants.PREF_GROUP_ATTRIBUTES_VIEW)) {\n-            if (schemaNames.contains(name)) {\n-                columns.add(new AttrColumn<GroupTO>(name, SchemaType.PLAIN));\n-            }\n-        }\n-\n-        for (String name : prefMan.getList(getRequest(), Constants.PREF_GROUP_DERIVED_ATTRIBUTES_VIEW)) {\n-            if (dSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn<GroupTO>(name, SchemaType.DERIVED));\n-            }\n-        }\n-\n-        // Add defaults in case of no selection\n-        if (columns.isEmpty()) {\n-            for (String name : GroupDisplayAttributesModalPage.GROUP_DEFAULT_SELECTION) {\n-                columns.add(new PropertyColumn<GroupTO, String>(new ResourceModel(name, name), name, name));\n-            }\n-\n-            prefMan.setList(getRequest(), getResponse(), Constants.PREF_GROUP_DETAILS_VIEW,\n-                    Arrays.asList(GroupDisplayAttributesModalPage.GROUP_DEFAULT_SELECTION));\n-        }\n-\n-        columns.add(new ActionColumn<GroupTO, String>(new ResourceModel(\"actions\", \"\")) {\n-\n-            private static final long serialVersionUID = -3503023501954863131L;\n-\n-            @Override\n-            public ActionLinksPanel<GroupTO> getActions(final String componentId, final IModel<GroupTO> model) {\n-                final ActionLinksPanel.Builder<GroupTO> panel = ActionLinksPanel.builder(page.getPageReference());\n-\n-                panel.add(new ActionLink<GroupTO>() {\n-\n-                    private static final long serialVersionUID = -7978723352517770644L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n-                        send(GroupSelectionSearchResultPanel.this,\n-                                Broadcast.BUBBLE, new GroupSelection(target, model.getObject()));\n-                    }\n-                }, ActionLink.ActionType.SELECT, StandardEntitlement.GROUP_READ);\n-\n-                return panel.build(componentId);\n-            }\n-\n-            @Override\n-            public ActionLinksPanel<Serializable> getHeader(final String componentId) {\n-                final ActionLinksPanel.Builder<Serializable> panel = ActionLinksPanel.builder(page.getPageReference());\n-\n-                return panel.add(new ActionLink<Serializable>() {\n-\n-                    private static final long serialVersionUID = -7978723352517770644L;\n+    protected String[] getDislayAttributes() {\n+        return GROUP_DEFAULT_SELECTION;\n+    }\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                        if (target != null) {\n-                            target.add(container);\n-                        }\n-                    }\n-                }, ActionLink.ActionType.RELOAD, StandardEntitlement.GROUP_SEARCH).build(componentId);\n-            }\n-        });\n+    @Override\n+    public String getPrefDetailsView() {\n+        return Constants.PREF_GROUP_DETAILS_VIEW;\n+    }\n \n-        return columns;\n+    @Override\n+    public String getPrefAttributesView() {\n+        return Constants.PREF_GROUP_ATTRIBUTES_VIEW;\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+    public String getPrefDerivedAttributesView() {\n+        return Constants.PREF_GROUP_DERIVED_ATTRIBUTES_VIEW;\n     }\n \n-    public static final class Builder extends GroupSearchResultPanel.Builder {\n+    public static final class Builder extends AnySelectionSearchResultPanel.Builder<GroupTO> {\n \n         private static final long serialVersionUID = 1L;\n \n@@ -163,26 +77,4 @@ protected WizardMgtPanel<AnyHandler<GroupTO>> newInstance(final String id) {\n             return new GroupSelectionSearchResultPanel(id, this);\n         }\n     }\n-\n-    public static class GroupSelection implements Serializable {\n-\n-        private static final long serialVersionUID = 1242677935378149180L;\n-\n-        private final AjaxRequestTarget target;\n-\n-        private final GroupTO grp;\n-\n-        public GroupSelection(final AjaxRequestTarget target, final GroupTO grp) {\n-            this.target = target;\n-            this.grp = grp;\n-        }\n-\n-        public AjaxRequestTarget getTarget() {\n-            return target;\n-        }\n-\n-        public GroupTO getSelection() {\n-            return grp;\n-        }\n-    }\n }"},{"sha":"e43c737e5d457978f16b55715bc117775d9becfd","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSelectionSearchResultPanel.java","status":"modified","additions":16,"deletions":126,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSelectionSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSelectionSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSelectionSearchResultPanel.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -18,134 +18,46 @@\n  */\n package org.apache.syncope.client.console.panels.search;\n \n-import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n import java.util.List;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.pages.UserDisplayAttributesModalPage;\n-import org.apache.syncope.client.console.panels.UserSearchResultPanel;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AttrColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.console.wizards.any.AnyHandler;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.event.Broadcast;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.ResourceModel;\n-import org.springframework.util.ReflectionUtils;\n \n-public final class UserSelectionSearchResultPanel extends UserSearchResultPanel {\n+public final class UserSelectionSearchResultPanel extends AnySelectionSearchResultPanel<UserTO> {\n \n     private static final long serialVersionUID = -1100228004207271272L;\n \n+    public static final String[] USER_DEFAULT_SELECTION = { \"key\", \"username\", \"status\" };\n+\n     private UserSelectionSearchResultPanel(final String id, final UserSelectionSearchResultPanel.Builder builder) {\n         super(id, builder);\n     }\n \n     @Override\n-    protected List<IColumn<UserTO, String>> getColumns() {\n-\n-        final List<IColumn<UserTO, String>> columns = new ArrayList<>();\n-\n-        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW)) {\n-            final Field field = ReflectionUtils.findField(UserTO.class, name);\n-\n-            if (\"token\".equalsIgnoreCase(name)) {\n-                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n-            } else if (field != null && field.getType().equals(Date.class)) {\n-                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n-            } else {\n-                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n-            }\n-        }\n-\n-        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW)) {\n-            if (schemaNames.contains(name)) {\n-                columns.add(new AttrColumn<UserTO>(name, SchemaType.PLAIN));\n-            }\n-        }\n-\n-        for (String name : prefMan.getList(getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW)) {\n-            if (dSchemaNames.contains(name)) {\n-                columns.add(new AttrColumn<UserTO>(name, SchemaType.DERIVED));\n-            }\n-        }\n-\n-        // Add defaults in case of no selection\n-        if (columns.isEmpty()) {\n-            for (String name : UserDisplayAttributesModalPage.USER_DEFAULT_SELECTION) {\n-                columns.add(new PropertyColumn<UserTO, String>(new ResourceModel(name, name), name, name));\n-            }\n-\n-            prefMan.setList(getRequest(), getResponse(), Constants.PREF_USERS_DETAILS_VIEW,\n-                    Arrays.asList(UserDisplayAttributesModalPage.USER_DEFAULT_SELECTION));\n-        }\n-\n-        columns.add(new ActionColumn<UserTO, String>(new ResourceModel(\"actions\", \"\")) {\n-\n-            private static final long serialVersionUID = -3503023501954863131L;\n-\n-            @Override\n-            public ActionLinksPanel<UserTO> getActions(final String componentId, final IModel<UserTO> model) {\n-\n-                final ActionLinksPanel.Builder<UserTO> panel = ActionLinksPanel.builder(page.getPageReference());\n-\n-                panel.add(new ActionLink<UserTO>() {\n-\n-                    private static final long serialVersionUID = -7978723352517770644L;\n-\n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n-                        send(UserSelectionSearchResultPanel.this,\n-                                Broadcast.BUBBLE, new UserSelection(target, model.getObject()));\n-                    }\n-                }, ActionLink.ActionType.SELECT, StandardEntitlement.USER_READ);\n-\n-                return panel.build(componentId, model.getObject());\n-            }\n-\n-            @Override\n-            public ActionLinksPanel<Serializable> getHeader(final String componentId) {\n-                final ActionLinksPanel.Builder<Serializable> panel = ActionLinksPanel.builder(page.getPageReference());\n-\n-                return panel.add(new ActionLink<Serializable>() {\n-\n-                    private static final long serialVersionUID = -7978723352517770644L;\n+    protected String[] getDislayAttributes() {\n+        return USER_DEFAULT_SELECTION;\n+    }\n \n-                    @Override\n-                    public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                        if (target != null) {\n-                            target.add(container);\n-                        }\n-                    }\n-                }, ActionLink.ActionType.RELOAD, StandardEntitlement.USER_SEARCH).build(componentId);\n-            }\n-        });\n+    @Override\n+    protected String getPrefDetailsView() {\n+        return Constants.PREF_USERS_DETAILS_VIEW;\n+    }\n \n-        return columns;\n+    @Override\n+    protected String getPrefAttributesView() {\n+        return Constants.PREF_USERS_ATTRIBUTES_VIEW;\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n-        return Collections.<ActionLink.ActionType>emptyList();\n+    protected String getPrefDerivedAttributesView() {\n+        return Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW;\n     }\n \n-    public static final class Builder extends UserSearchResultPanel.Builder {\n+    public static final class Builder extends AnySelectionSearchResultPanel.Builder<UserTO> {\n \n         private static final long serialVersionUID = 1L;\n \n@@ -165,26 +77,4 @@ protected WizardMgtPanel<AnyHandler<UserTO>> newInstance(final String id) {\n             return new UserSelectionSearchResultPanel(id, this);\n         }\n     }\n-\n-    public static class UserSelection implements Serializable {\n-\n-        private static final long serialVersionUID = 1242677935378149180L;\n-\n-        private final AjaxRequestTarget target;\n-\n-        private final UserTO usr;\n-\n-        public UserSelection(final AjaxRequestTarget target, final UserTO usr) {\n-            this.target = target;\n-            this.usr = usr;\n-        }\n-\n-        public AjaxRequestTarget getTarget() {\n-            return target;\n-        }\n-\n-        public UserTO getSelection() {\n-            return usr;\n-        }\n-    }\n }"},{"sha":"57a973d6288633949a719a8cf9116031e2581523","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import static org.apache.syncope.client.console.rest.BaseRestClient.getService;\n+import static org.apache.syncope.client.console.rest.BaseRestClient.toOrderBy;\n+\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -29,6 +32,7 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n+import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -67,15 +71,19 @@ public PagedResult<AnyObjectTO> list(final String type, final String realm) {\n \n     @Override\n     public int searchCount(final String realm, final String fiql, final String type) {\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+        return getService(AnyObjectService.class).\n+                search(new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(1).size(1).build()).\n+                getTotalCount();\n     }\n \n     @Override\n     public List<AnyObjectTO> search(final String realm, final String fiql, final int page, final int size,\n             final SortParam<String> sort,\n             final String type) {\n \n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+        return getService(AnyObjectService.class).search(\n+                new AnySearchQuery.Builder().realm(realm).fiql(fiql).page(page).size(size).\n+                orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n \n     @Override"},{"sha":"bf5ebfa15dd49a6ec4ae6f094c8358885c842c05","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -65,7 +65,7 @@ public List<AnyTypeTO> getAll() {\n         return types;\n     }\n \n-    public static List<AnyTypeClassTO> getAllAnyTypeClass() {\n+    public List<AnyTypeClassTO> getAllAnyTypeClass() {\n         List<AnyTypeClassTO> types = null;\n \n         try {"},{"sha":"5add93d60a417776d9aa5e47b4a44cb53afaf81a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -98,6 +98,11 @@ protected WizardModel buildModelSteps(final AnyHandler<T> modelObject, final Wiz\n             wizardModel.add(new Roles(UserTO.class.cast(modelObject.getInnerObject())));\n         }\n \n+        // relationship panel step (jst available for users)\n+        if (!(this instanceof GroupWizardBuilder)) {\n+            wizardModel.add(new Relationships(modelObject.getInnerObject(), pageRef));\n+        }\n+\n         // resource panel step\n         wizardModel.add(new Resources(modelObject.getInnerObject()));\n         return wizardModel;\n@@ -121,7 +126,7 @@ protected void onApplyInternal(final AnyHandler<T> modelObject) {\n         if (obj.getKey() == 0) {\n             actual = anyTypeRestClient.create(AnyObjectTO.class.cast(obj));\n         } else {\n-            final AnyObjectPatch patch = AnyOperations.diff(obj, getOriginalItem().getInnerObject(), true);\n+            final AnyObjectPatch patch = AnyOperations.diff(obj, getOriginalItem().getInnerObject(), false);\n \n             // update user just if it is changed\n             if (!patch.isEmpty()) {"},{"sha":"1cfbc361a7c28c3d2e95ab44f78c4c341dfbd015","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AuxClasses.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -150,7 +150,7 @@ public String transform(final Long input) {\n         final List<String> current = Arrays.asList(anyTypeClass);\n \n         final List<String> choices = new ArrayList<>();\n-        for (AnyTypeClassTO aux : AnyTypeRestClient.getAllAnyTypeClass()) {\n+        for (AnyTypeClassTO aux : new AnyTypeRestClient().getAllAnyTypeClass()) {\n             if (!current.contains(aux.getKey())) {\n                 choices.add(aux.getKey());\n             }"},{"sha":"8dbc85bdab271ec948b0b1cafa159caf4f74a83f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":23,"deletions":16,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -25,6 +25,7 @@\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.search.AnySelectionSearchResultPanel;\n import org.apache.syncope.client.console.panels.search.GroupSearchPanel;\n import org.apache.syncope.client.console.panels.search.GroupSelectionSearchResultPanel;\n import org.apache.syncope.client.console.panels.search.SearchClause;\n@@ -37,6 +38,7 @@\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -197,7 +199,11 @@ public String getObject() {\n                             return StringUtils.EMPTY;\n                         } else {\n                             UserTO userTO = userRestClient.read(groupHandler.getInnerObject().getUserOwner());\n-                            return String.format(\"[%d] %s\", userTO.getKey(), userTO.getUsername());\n+                            if (userTO == null) {\n+                                return StringUtils.EMPTY;\n+                            } else {\n+                                return String.format(\"[%d] %s\", userTO.getKey(), userTO.getUsername());\n+                            }\n                         }\n                     }\n \n@@ -224,7 +230,8 @@ public void setObject(final String object) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                send(Ownership.this, Broadcast.EXACT, new GroupSelectionSearchResultPanel.GroupSelection(target, null));\n+                send(Ownership.this, Broadcast.EXACT,\n+                        new GroupSelectionSearchResultPanel.ItemSelection<GroupTO>(target, null));\n             }\n         };\n         userSearchFragment.add(userOwnerReset);\n@@ -241,7 +248,11 @@ public String getObject() {\n                             return StringUtils.EMPTY;\n                         } else {\n                             GroupTO groupTO = groupRestClient.read(groupHandler.getInnerObject().getGroupOwner());\n-                            return String.format(\"[%d] %s\", groupTO.getKey(), groupTO.getName());\n+                            if (groupTO == null) {\n+                                return StringUtils.EMPTY;\n+                            } else {\n+                                return String.format(\"[%d] %s\", groupTO.getKey(), groupTO.getName());\n+                            }\n                         }\n                     }\n \n@@ -268,14 +279,14 @@ public void setObject(final String object) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                send(Ownership.this, Broadcast.EXACT, new GroupSelectionSearchResultPanel.GroupSelection(target, null));\n+                send(Ownership.this, Broadcast.EXACT,\n+                        new GroupSelectionSearchResultPanel.ItemSelection<GroupTO>(target, null));\n             }\n         };\n         groupSearchFragment.add(groupOwnerReset);\n     }\n \n     @Override\n-\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n             final AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n@@ -288,24 +299,20 @@ public void onEvent(final IEvent<?> event) {\n                         userSearchPanel.getModel().getObject(), SyncopeClient.getUserSearchConditionBuilder());\n                 userSearchResultPanel.search(fiql, target);\n             }\n-        } else if (event.getPayload() instanceof UserSelectionSearchResultPanel.UserSelection) {\n-            final UserTO sel = ((UserSelectionSearchResultPanel.UserSelection) event.getPayload()).getSelection();\n+        } else if (event.getPayload() instanceof AnySelectionSearchResultPanel.ItemSelection) {\n+            final AnyTO sel = ((AnySelectionSearchResultPanel.ItemSelection) event.getPayload()).getSelection();\n             if (sel == null) {\n                 handler.getInnerObject().setUserOwner(null);\n-            } else {\n-                handler.getInnerObject().setUserOwner(sel.getKey());\n                 handler.getInnerObject().setGroupOwner(null);\n-            }\n-            ((UserSelectionSearchResultPanel.UserSelection) event.getPayload()).getTarget().add(ownerContainer);\n-        } else if (event.getPayload() instanceof GroupSelectionSearchResultPanel.GroupSelection) {\n-            final GroupTO sel = ((GroupSelectionSearchResultPanel.GroupSelection) event.getPayload()).getSelection();\n-            if (sel == null) {\n+            } else if (sel instanceof UserTO) {\n+                handler.getInnerObject().setUserOwner(sel.getKey());\n                 handler.getInnerObject().setGroupOwner(null);\n-            } else {\n+                ((UserSelectionSearchResultPanel.ItemSelection) event.getPayload()).getTarget().add(ownerContainer);\n+            } else if (sel instanceof GroupTO) {\n                 handler.getInnerObject().setGroupOwner(sel.getKey());\n                 handler.getInnerObject().setUserOwner(null);\n+                ((GroupSelectionSearchResultPanel.ItemSelection) event.getPayload()).getTarget().add(ownerContainer);\n             }\n-            ((GroupSelectionSearchResultPanel.GroupSelection) event.getPayload()).getTarget().add(ownerContainer);\n         } else {\n             super.onEvent(event);\n         }"},{"sha":"f0fdc0a71523ff7543ef8f2b5686e8ff2c9f9b5e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"added","additions":381,"deletions":0,"changes":381,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,381 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards.any;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.Collapsible;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.SerializableTransformer;\n+import org.apache.syncope.client.console.panels.AnyObjectSearchResultPanel;\n+import org.apache.syncope.client.console.panels.ListViewPanel;\n+import org.apache.syncope.client.console.panels.ListViewPanel.ListViewReload;\n+import org.apache.syncope.client.console.panels.search.AnyObjectSearchPanel;\n+import org.apache.syncope.client.console.panels.search.AnyObjectSelectionSearchResultPanel;\n+import org.apache.syncope.client.console.panels.search.AnySelectionSearchResultPanel;\n+import org.apache.syncope.client.console.panels.search.SearchClause;\n+import org.apache.syncope.client.console.panels.search.SearchClausePanel;\n+import org.apache.syncope.client.console.panels.search.SearchUtils;\n+import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyEntitlement;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class Relationships extends WizardStep {\n+\n+    private static final long serialVersionUID = 855618618337931784L;\n+\n+    private final PageReference pageRef;\n+\n+    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n+    private final AnyTO anyTO;\n+\n+    public Relationships(final AnyTO anyTO, final PageReference pageRef) {\n+        super();\n+        this.anyTO = anyTO;\n+        this.pageRef = pageRef;\n+\n+        // ------------------------\n+        // Existing relationships\n+        // ------------------------\n+        add(getViewFragment().setRenderBodyOnly(true));\n+        // ------------------------ \n+    }\n+\n+    private Fragment getViewFragment() {\n+        final Map<String, List<RelationshipTO>> relationships = new HashMap<>();\n+        addRelationship(relationships, getCurrentRelationships().toArray(new RelationshipTO[] {}));\n+\n+        final Fragment viewFragment = new Fragment(\"relationships\", \"viewFragment\", this);\n+        viewFragment.setOutputMarkupId(true);\n+\n+        viewFragment.add(new Collapsible(\"relationships\",\n+                CollectionUtils.collect(relationships.keySet(), new SerializableTransformer<String, ITab>() {\n+\n+                    private static final long serialVersionUID = 3514912643300593122L;\n+\n+                    @Override\n+                    public ITab transform(final String input) {\n+                        return new AbstractTab(new ResourceModel(\"relationship\", input)) {\n+\n+                            private static final long serialVersionUID = 1037272333056449378L;\n+\n+                            @Override\n+                            public Panel getPanel(final String panelId) {\n+                                return new ListViewPanel.Builder<>(RelationshipTO.class, pageRef).\n+                                        setItems(relationships.get(input)).\n+                                        includes(\"rightType\", \"rightKey\").\n+                                        addAction(new ActionLink<RelationshipTO>() {\n+\n+                                            private static final long serialVersionUID = -6847033126124401556L;\n+\n+                                            @Override\n+                                            public void onClick(\n+                                                    final AjaxRequestTarget target, final RelationshipTO modelObject) {\n+                                                removeRelationships(relationships, modelObject);\n+                                                send(Relationships.this, Broadcast.DEPTH, new ListViewReload(target));\n+                                            }\n+                                        }, ActionLink.ActionType.DELETE,\n+                                                String.format(\"%s_%s\", anyTO.getType(), AnyEntitlement.UPDATE)).\n+                                        build(panelId);\n+                            }\n+                        };\n+                    }\n+                }, new ArrayList<ITab>())) {\n+\n+            private static final long serialVersionUID = 1037272333056449379L;\n+\n+            @Override\n+            public void renderHead(final IHeaderResponse response) {\n+                super.renderHead(response);\n+                if (relationships.isEmpty()) {\n+                    response.render(OnDomReadyHeaderItem.forScript(String.format(\n+                            \"$('#emptyPlaceholder').append(\\\"%s\\\")\", getString(\"relationships.empty.list\"))));\n+                }\n+            }\n+        });\n+\n+        viewFragment.add(ActionLinksPanel.<RelationshipTO>builder(pageRef).add(new ActionLink<RelationshipTO>() {\n+\n+            private static final long serialVersionUID = 3257738274365467945L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final RelationshipTO ignore) {\n+                Fragment addFragment = new Fragment(\"relationships\", \"addFragment\", Relationships.this);\n+                addOrReplace(addFragment);\n+                addFragment.add(new Specification().setRenderBodyOnly(true));\n+                target.add(Relationships.this);\n+            }\n+        }, ActionLink.ActionType.CREATE, String.format(\"%s_%s\", anyTO.getType(), AnyEntitlement.UPDATE)).\n+                build(\"actions\"));\n+\n+        return viewFragment;\n+    }\n+\n+    private List<RelationshipTO> getCurrentRelationships() {\n+        return anyTO instanceof UserTO ? UserTO.class.cast(anyTO).getRelationships() : anyTO instanceof AnyObjectTO\n+                ? AnyObjectTO.class.cast(anyTO).getRelationships()\n+                : Collections.<RelationshipTO>emptyList();\n+    }\n+\n+    private void addRelationship(\n+            final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n+        for (RelationshipTO relationship : rels) {\n+            final List<RelationshipTO> listrels;\n+            if (relationships.containsKey(relationship.getType())) {\n+                listrels = relationships.get(relationship.getType());\n+            } else {\n+                listrels = new ArrayList<>();\n+                relationships.put(relationship.getType(), listrels);\n+            }\n+            listrels.add(relationship);\n+        }\n+    }\n+\n+    private void addNewRelationships(final RelationshipTO... rels) {\n+        for (RelationshipTO relationship : rels) {\n+            getCurrentRelationships().add(relationship);\n+        }\n+    }\n+\n+    private void removeRelationships(\n+            final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n+        final List<RelationshipTO> currentRels = getCurrentRelationships();\n+        for (RelationshipTO relationship : rels) {\n+            currentRels.remove(relationship);\n+            if (relationships.containsKey(relationship.getType())) {\n+                final List<RelationshipTO> rellist = relationships.get(relationship.getType());\n+                rellist.remove(relationship);\n+                if (rellist.isEmpty()) {\n+                    relationships.remove(relationship.getType());\n+                }\n+            }\n+        }\n+    }\n+\n+    public class Specification extends Panel {\n+\n+        private static final long serialVersionUID = 6199050589175839467L;\n+\n+        private final RelationshipTO rel;\n+\n+        private AnyObjectSearchPanel anyObjectSearchPanel;\n+\n+        private WizardMgtPanel<AnyHandler<AnyObjectTO>> anyObjectSearchResultPanel;\n+\n+        public Specification() {\n+            super(\"specification\");\n+            rel = new RelationshipTO();\n+\n+            final ArrayList<String> availableRels = CollectionUtils.collect(\n+                    SyncopeConsoleSession.get().getService(RelationshipTypeService.class).list(),\n+                    new SerializableTransformer<RelationshipTypeTO, String>() {\n+\n+                private static final long serialVersionUID = 5498141517922697858L;\n+\n+                @Override\n+                public String transform(final RelationshipTypeTO input) {\n+                    return input.getKey();\n+                }\n+            }, new ArrayList<String>());\n+\n+            final AjaxDropDownChoicePanel<String> type = new AjaxDropDownChoicePanel<String>(\n+                    \"type\", \"type\", new PropertyModel<String>(rel, \"type\"));\n+            type.setChoices(availableRels);\n+            add(type.setRenderBodyOnly(true));\n+\n+            final List<AnyTypeTO> availableTypes\n+                    = ListUtils.select(anyTypeRestClient.getAll(), new Predicate<AnyTypeTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final AnyTypeTO object) {\n+                            return object.getKind() != AnyTypeKind.GROUP && object.getKind() != AnyTypeKind.USER;\n+                        }\n+                    });\n+\n+            final AjaxDropDownChoicePanel<AnyTypeTO> rightType = new AjaxDropDownChoicePanel<AnyTypeTO>(\n+                    \"rightType\", \"rightType\", new PropertyModel<AnyTypeTO>(rel, \"rightType\") {\n+\n+                private static final long serialVersionUID = -5861057041758169508L;\n+\n+                @Override\n+                public AnyTypeTO getObject() {\n+                    for (AnyTypeTO obj : availableTypes) {\n+                        if (obj.getKey().equals(rel.getRightType())) {\n+                            return obj;\n+                        }\n+                    }\n+                    return null;\n+                }\n+\n+                @Override\n+                public void setObject(final AnyTypeTO object) {\n+                    rel.setRightType(object == null ? null : object.getKey());\n+                }\n+            }, false);\n+            rightType.setChoices(availableTypes);\n+            rightType.setChoiceRenderer(new IChoiceRenderer<AnyTypeTO>() {\n+\n+                private static final long serialVersionUID = -734743540442190178L;\n+\n+                @Override\n+                public Object getDisplayValue(final AnyTypeTO object) {\n+                    return object.getKey();\n+                }\n+\n+                @Override\n+                public String getIdValue(final AnyTypeTO object, final int index) {\n+                    return object.getKey();\n+                }\n+\n+                @Override\n+                public AnyTypeTO getObject(final String id, final IModel<? extends List<? extends AnyTypeTO>> choices) {\n+                    return IterableUtils.find(choices.getObject(), new Predicate<Object>() {\n+\n+                        @Override\n+                        public boolean evaluate(final Object object) {\n+                            return id.equals(AnyTypeTO.class.cast(object).getKey());\n+                        }\n+                    });\n+                }\n+            });\n+            add(rightType);\n+\n+            final WebMarkupContainer container = new WebMarkupContainer(\"searchPanelContainer\");\n+            container.setOutputMarkupId(true);\n+            add(container);\n+\n+            Fragment emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", this);\n+            container.add(emptyFragment.setRenderBodyOnly(true));\n+\n+            type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    Fragment emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", Specification.this);\n+                    container.addOrReplace(emptyFragment.setRenderBodyOnly(true));\n+                    rightType.setModelObject(null);\n+                    target.add(rightType);\n+                    target.add(container);\n+                }\n+            });\n+\n+            rightType.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    final AnyTypeTO anyType = rightType.getModelObject();\n+                    if (anyType == null) {\n+                        Fragment emptyFragment = new Fragment(\"searchPanel\", \"emptyFragment\", Specification.this);\n+                        container.addOrReplace(emptyFragment.setRenderBodyOnly(true));\n+                    } else {\n+                        final Fragment fragment = new Fragment(\"searchPanel\", \"searchFragment\", Specification.this);\n+                        container.addOrReplace(fragment.setRenderBodyOnly(true));\n+\n+                        anyObjectSearchPanel = new AnyObjectSearchPanel.Builder(\n+                                anyType.getKey(),\n+                                new ListModel<SearchClause>(new ArrayList<SearchClause>())).\n+                                enableSearch().\n+                                build(\"searchPanel\");\n+                        fragment.add(anyObjectSearchPanel.setRenderBodyOnly(true));\n+\n+                        anyObjectSearchResultPanel = new AnyObjectSelectionSearchResultPanel.Builder(\n+                                anyTypeRestClient.getAnyTypeClass(anyType.getClasses().toArray(new String[] {})),\n+                                new AnyObjectRestClient(),\n+                                anyType.getKey(),\n+                                pageRef).setFiltered(true).\n+                                setFiql(SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey()).\n+                                        is(\"key\").notNullValue().query()).\n+                                build(\"searchResultPanel\");\n+                        fragment.add(anyObjectSearchResultPanel.setRenderBodyOnly(true));\n+                    }\n+                    target.add(container);\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onEvent(final IEvent<?> event) {\n+            if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n+                final AjaxRequestTarget target\n+                        = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n+                final String fiql = SearchUtils.buildFIQL(anyObjectSearchPanel.getModel().getObject(),\n+                        SyncopeClient.getAnyObjectSearchConditionBuilder(anyObjectSearchPanel.getBackObjectType()));\n+                AnyObjectSearchResultPanel.class.cast(anyObjectSearchResultPanel).search(fiql, target);\n+            } else if (event.getPayload() instanceof AnySelectionSearchResultPanel.ItemSelection) {\n+                final AjaxRequestTarget target\n+                        = AnySelectionSearchResultPanel.ItemSelection.class.cast(event.getPayload()).getTarget();\n+\n+                AnyTO right = AnySelectionSearchResultPanel.ItemSelection.class.cast(event.getPayload()).getSelection();\n+                rel.setRightKey(right.getKey());\n+\n+                Relationships.this.addNewRelationships(rel);\n+\n+                Relationships.this.addOrReplace(getViewFragment().setRenderBodyOnly(true));\n+                target.add(Relationships.this);\n+            } else {\n+                super.onEvent(event);\n+            }\n+\n+        }\n+    }\n+}"},{"sha":"cce2c7ccf73af129bfb04a168ffd7bbecf9c6119","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships$Specification.html","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships%24Specification.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships%24Specification.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships%24Specification.html?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,44 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:panel>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"type\" />\n+      </div>\n+\n+      <div class=\"form-group\">\n+        <span wicket:id=\"rightType\"/>\n+      </div>\n+\n+      <div wicket:id=\"searchPanelContainer\">\n+        <span wicket:id=\"searchPanel\"/>\n+      </div>\n+\n+      <wicket:fragment wicket:id=\"emptyFragment\"/>\n+      <wicket:fragment wicket:id=\"searchFragment\">\n+        <span wicket:id=\"searchPanel\"/>\n+        <div class=\"searchResult\">\n+          <span wicket:id=\"searchResultPanel\"/>\n+        </div>\n+      </wicket:fragment>\n+    </wicket:panel>\n+  </body>\n+</html>"},{"sha":"6c865442091a8312106983923f37bc844346b8ed","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.html","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.html?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,37 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head><title></title></head>\n+  <body>\n+    <wicket:panel>\n+      <div id=\"emptyPlaceholder\"/>\n+      <span wicket:id=\"relationships\"/>\n+\n+      <wicket:fragment wicket:id=\"viewFragment\">\n+        <div wicket:id=\"relationships\"/>\n+        <div class=\"modal-footer\">\n+          <span wicket:id=\"actions\" class=\"circular-actions\">[ACTIONS]</span>\n+        </div>\n+      </wicket:fragment>\n+      <wicket:fragment wicket:id=\"addFragment\">\n+        <span wicket:id=\"specification\" />\n+      </wicket:fragment>\n+    </wicket:panel>\n+  </body>\n+</html>"},{"sha":"172c0e716c8b4b2021bff3aaef97051c20e6bd76","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.properties?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+relationships.empty.list=No relationships defined"},{"sha":"052b107f8eed4d560936875f28cfb7736109a4e2","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_it.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_it.properties?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+relationships.empty.list=Nessuna relazione specificata"},{"sha":"8d71bc288bd654fb9fcf711b90d625f3d8fa899c","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Relationships_pt_BR.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships_pt_BR.properties?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+relationships.empty.list=N\\u00e3o h\\u00e1 relacionamentos definidos"},{"sha":"591e1355a25f94fe05a00020d21e90314f393ce3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n@@ -172,10 +173,10 @@ public static AnyObjectPatch diff(\n         diff(updated, original, result, incremental);\n \n         // 1. relationships\n-        Map<Long, RelationshipTO> updatedRels = updated.getRelationshipMap();\n-        Map<Long, RelationshipTO> originalRels = original.getRelationshipMap();\n+        Map<Pair<String, Long>, RelationshipTO> updatedRels = updated.getRelationshipMap();\n+        Map<Pair<String, Long>, RelationshipTO> originalRels = original.getRelationshipMap();\n \n-        for (Map.Entry<Long, RelationshipTO> entry : updatedRels.entrySet()) {\n+        for (Map.Entry<Pair<String, Long>, RelationshipTO> entry : updatedRels.entrySet()) {\n             if (!originalRels.containsKey(entry.getKey())) {\n                 result.getRelationships().add(new RelationshipPatch.Builder().\n                         operation(PatchOperation.ADD_REPLACE).\n@@ -184,7 +185,7 @@ public static AnyObjectPatch diff(\n         }\n \n         if (!incremental) {\n-            for (Long key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n+            for (Pair<String, Long> key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n                 result.getRelationships().add(new RelationshipPatch.Builder().\n                         operation(PatchOperation.DELETE).\n                         relationshipTO(originalRels.get(key)).build());\n@@ -266,10 +267,10 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         }\n \n         // 5. relationships\n-        Map<Long, RelationshipTO> updatedRels = updated.getRelationshipMap();\n-        Map<Long, RelationshipTO> originalRels = original.getRelationshipMap();\n+        Map<Pair<String, Long>, RelationshipTO> updatedRels = updated.getRelationshipMap();\n+        Map<Pair<String, Long>, RelationshipTO> originalRels = original.getRelationshipMap();\n \n-        for (Map.Entry<Long, RelationshipTO> entry : updatedRels.entrySet()) {\n+        for (Map.Entry<Pair<String, Long>, RelationshipTO> entry : updatedRels.entrySet()) {\n             if (!originalRels.containsKey(entry.getKey())) {\n                 result.getRelationships().add(new RelationshipPatch.Builder().\n                         operation(PatchOperation.ADD_REPLACE).\n@@ -278,7 +279,7 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         }\n \n         if (!incremental) {\n-            for (Long key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n+            for (Pair<String, Long> key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n                 result.getRelationships().add(new RelationshipPatch.Builder().\n                         operation(PatchOperation.DELETE).\n                         relationshipTO(originalRels.get(key)).build());"},{"sha":"6c368ee54db370010a112ee46342392fd59ccb7f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -29,6 +29,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.tuple.Pair;\n \n @XmlRootElement(name = \"anyObject\")\n @XmlType\n@@ -50,10 +51,10 @@ public List<RelationshipTO> getRelationships() {\n     }\n \n     @JsonIgnore\n-    public Map<Long, RelationshipTO> getRelationshipMap() {\n-        Map<Long, RelationshipTO> result = new HashMap<>(getRelationships().size());\n-        for (RelationshipTO membership : getRelationships()) {\n-            result.put(membership.getRightKey(), membership);\n+    public Map<Pair<String, Long>, RelationshipTO> getRelationshipMap() {\n+        Map<Pair<String, Long>, RelationshipTO> result = new HashMap<>(getRelationships().size());\n+        for (RelationshipTO relationship : getRelationships()) {\n+            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n         }\n         result = Collections.unmodifiableMap(result);\n "},{"sha":"4ad795996523d5e4333e4e674d4dc4179e1d2308","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -33,6 +33,7 @@\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"user\")\n@@ -187,10 +188,10 @@ public List<RelationshipTO> getRelationships() {\n     }\n \n     @JsonIgnore\n-    public Map<Long, RelationshipTO> getRelationshipMap() {\n-        Map<Long, RelationshipTO> result = new HashMap<>(getRelationships().size());\n-        for (RelationshipTO membership : getRelationships()) {\n-            result.put(membership.getRightKey(), membership);\n+    public Map<Pair<String, Long>, RelationshipTO> getRelationshipMap() {\n+        Map<Pair<String, Long>, RelationshipTO> result = new HashMap<>(getRelationships().size());\n+        for (RelationshipTO relationship : getRelationships()) {\n+            result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n         }\n         result = Collections.unmodifiableMap(result);\n "},{"sha":"432913d013d6a5a6b7c4a7dd4df810a0184c253f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/TemplateUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ee590ed7cb2a8c676c2d62322af93241918d1484/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ee590ed7cb2a8c676c2d62322af93241918d1484/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FTemplateUtils.java?ref=ee590ed7cb2a8c676c2d62322af93241918d1484","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -104,7 +105,7 @@ private void fill(final AnyTO anyTO, final AnyTO template) {\n         anyTO.getAuxClasses().addAll(template.getAuxClasses());\n     }\n \n-    private void fillRelationships(final Map<Long, RelationshipTO> anyRelMap,\n+    private void fillRelationships(final Map<Pair<String, Long>, RelationshipTO> anyRelMap,\n             final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n \n         for (RelationshipTO memb : templateRels) {"}]}