{"sha":"80f3f66919b69355a732789de142a712da263e0a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgwZjNmNjY5MTliNjkzNTVhNzMyNzg5ZGUxNDJhNzEyZGEyNjNlMGE=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-23T13:33:22Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-23T13:33:22Z"},"message":"[SYNCOPE-256] Refactoring and updates in exception mappers\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1437386 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6fd7e1a129af17bbda02413519275c1abef6b01e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6fd7e1a129af17bbda02413519275c1abef6b01e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/80f3f66919b69355a732789de142a712da263e0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80f3f66919b69355a732789de142a712da263e0a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80f3f66919b69355a732789de142a712da263e0a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80f3f66919b69355a732789de142a712da263e0a/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"995e8ca9c452fa72134d10741ea36b531984753e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/995e8ca9c452fa72134d10741ea36b531984753e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/995e8ca9c452fa72134d10741ea36b531984753e"}],"stats":{"total":179,"additions":73,"deletions":106},"files":[{"sha":"70c1d4ac985e1bda90577dde4c53ee1a4068bf6c","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"modified","additions":50,"deletions":51,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f3f66919b69355a732789de142a712da263e0a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f3f66919b69355a732789de142a712da263e0a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=80f3f66919b69355a732789de142a712da263e0a","patch":"@@ -38,64 +38,63 @@\n import org.slf4j.LoggerFactory;\r\n \r\n @Provider\r\n-public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>,\r\n+\t\tResponseExceptionMapper<Exception> {\r\n \r\n     private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n \r\n     @Override\r\n-    public Response toResponse(final Exception e) {\r\n-        throw new UnsupportedOperationException(\r\n-                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n-    }\r\n-\r\n-    @Override\r\n-    public Exception fromResponse(final Response response) {\r\n-        Exception ex = null;\r\n-        int statusCode = response.getStatus();\r\n-\r\n-        // 1. Check for composite exception in HTTP header\r\n-        SyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n-        if (scce != null) {\r\n-            ex = scce;\r\n-\r\n-            // 2. TODO Map SC_FORBIDDEN\r\n-            // } else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n-            // ex = new UnauthorizedRoleException(-1L);\r\n-\r\n-            // 3. Map SC_UNAUTHORIZED\r\n-        } else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n-            ex = new AccessControlException(\"Remote unauthorized exception\");\r\n-\r\n-        } else {\r\n-            // 3. All other codes are mapped to runtime exception with HTTP code information\r\n-            ex = new RuntimeException(String.format(\"Remote exception with status code: %s\", Response.Status\r\n-                    .fromStatusCode(statusCode).name()));\r\n-        }\r\n+\tpublic Response toResponse(Exception e) {\r\n+\t\tthrow new UnsupportedOperationException(\"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Exception fromResponse(Response response) {\r\n+\t\tException ex = null;\r\n+\t\tint statusCode = response.getStatus();\r\n+\t\t\r\n+\t\t// 1. Check for composite exception in HTTP header \r\n+\t\tSyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n+\t\tif (scce != null) {\r\n+\t\t\tex = scce;\r\n+\t\t\t\r\n+\t\t\t// TODO reduce SCCEE to really composite ones and use normal exception for others\r\n+//\t\t} else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n+//\t\t\tex = new UnauthorizedRoleException(-1L);\r\n+\t\t\t\r\n+\t\t\t// 2. Map  SC_UNAUTHORIZED\r\n+\t\t} else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n+\t\t\tex = new AccessControlException(\"Remote unauthorized exception\");\r\n+\t\t\t\r\n+\t\t} else {\r\n+\t\t\t// 3. All other codes are mapped to runtime exception with HTTP code information \r\n+\t\t\tex = new RuntimeException(String.format(\r\n+\t\t\t\t\t\"Remote exception with status code: %s\",\r\n+\t\t\t\t\tResponse.Status.fromStatusCode(statusCode).name()));\r\n+\t\t}\r\n         LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n-        return ex;\r\n-    }\r\n-\r\n-    private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n-        int statusCode = response.getStatus();\r\n-        List<Object> exceptionTypesInHeaders = response.getHeaders().get(\r\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+\t\treturn ex;\r\n+\t}\r\n+\t\r\n+\tprivate SyncopeClientCompositeErrorException checkCompositeException(Response response) {\r\n+\t\tint statusCode = response.getStatus();\r\n+        List<Object> exceptionTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n         if (exceptionTypesInHeaders == null) {\r\n             LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r\n         }\r\n \r\n-        SyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n-                org.springframework.http.HttpStatus.valueOf(statusCode));\r\n+\t\tSyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n+\t\t\t\torg.springframework.http.HttpStatus.valueOf(statusCode));\r\n \r\n         Set<String> handledExceptions = new HashSet<String>();\r\n         for (Object exceptionTypeValue : exceptionTypesInHeaders) {\r\n-            String exceptionTypeAsString = (String) exceptionTypeValue;\r\n+        \tString exceptionTypeAsString = (String) exceptionTypeValue; \r\n             SyncopeClientExceptionType exceptionType = null;\r\n             try {\r\n                 exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \"\r\n-                        + exceptionTypeAsString, e);\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r\n                 handledExceptions.add(exceptionTypeAsString);\r\n@@ -104,14 +103,14 @@ private SyncopeClientCompositeErrorException checkCompositeException(final Respo\n                 clientException.setType(exceptionType);\r\n                 if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n                         && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n-                    // TODO update clientException to support list of objects\r\n-                    List<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n-                    List<String> elementsStringList = new ArrayList<String>();\r\n-                    for (Object elementObject : elementsObjectList) {\r\n-                        if (elementObject instanceof String) {\r\n-                            elementsStringList.add((String) elementObject);\r\n-                        }\r\n-                    }\r\n+                \t// TODO: update clientException to support list of objects\r\n+                \tList<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n+                \tList<String> elementsStringList = new ArrayList<String>();\r\n+                \tfor (Object elementObject : elementsObjectList) {\r\n+                \t\tif (elementObject instanceof String) {\r\n+                \t\t\telementsStringList.add((String) elementObject);\r\n+                \t\t}\r\n+                \t}\r\n                     clientException.setElements(elementsStringList);\r\n                 }\r\n                 compositeException.addException(clientException);\r\n@@ -126,7 +125,7 @@ private SyncopeClientCompositeErrorException checkCompositeException(final Respo\n         if (compositeException.hasExceptions()) {\r\n             return compositeException;\r\n         }\r\n-\r\n+        \r\n         return null;\r\n-    }\r\n+\t}\r\n }\r"},{"sha":"43117c33c9a2371f3aa4d6f22c7a3955050c1ebf","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":23,"deletions":55,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/80f3f66919b69355a732789de142a712da263e0a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/80f3f66919b69355a732789de142a712da263e0a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=80f3f66919b69355a732789de142a712da263e0a","patch":"@@ -139,10 +139,7 @@ private Response processForbiddenExceptions(Exception ex) {\n         ResponseBuilder responseBuilder = Response.status(Response.Status.FORBIDDEN);\r\n \r\n         if (ex instanceof UnauthorizedRoleException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.UnauthorizedRole.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.UnauthorizedRole.getElementHeaderName(), ex.getMessage());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.UnauthorizedRole, ex, null);\r\n         }\r\n         return response;\r\n     }\r\n@@ -162,13 +159,7 @@ private Response processConflictExceptions(Exception ex) {\n         ResponseBuilder responseBuilder = Response.status(Response.Status.CONFLICT);\r\n \r\n         if (ex instanceof DataIntegrityViolationException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\r\n-                    ex.getCause() == null\r\n-                            ? ex.getMessage()\r\n-                            : ex.getCause().getMessage());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, ex, null);\r\n         }\r\n         return response;\r\n     }\r\n@@ -178,29 +169,14 @@ private Response processServerErrorExceptions(Exception ex) {\n         ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n \r\n         if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.Workflow.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.Workflow.getElementHeaderName(),\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, ex,\r\n                     \"Currently unavailable. Please try later.\");\r\n-            response = responseBuilder.build();\r\n \r\n         } else if (ex instanceof JpaSystemException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\r\n-                    ex.getCause() == null\r\n-                            ? ex.getMessage()\r\n-                            : ex.getCause().getMessage());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, ex, null);\r\n \r\n         } else if (ex instanceof ConfigurationException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.InvalidExternalResource.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.InvalidExternalResource.getElementHeaderName(),\r\n-                    ex.getCause() == null\r\n-                            ? ex.getMessage()\r\n-                            : ex.getCause().getMessage());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidExternalResource, ex, null);\r\n         }\r\n \r\n         return response;\r\n@@ -211,17 +187,11 @@ private Response processNotFoundExceptions(Exception ex) {\n         ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n \r\n         if (ex instanceof NotFoundException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.NotFound.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.NotFound.getElementHeaderName(), ex.getMessage());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, ex, null);\r\n \r\n         } else if (ex instanceof MissingConfKeyException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.NotFound.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.NotFound.getElementHeaderName(),\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, ex,\r\n                     ((MissingConfKeyException) ex).getConfKey());\r\n-            response = responseBuilder.build();\r\n         }\r\n \r\n         return response;\r\n@@ -248,34 +218,32 @@ private Response processBadRequestExceptions(Exception ex) {\n             response = responseBuilder.build();\r\n \r\n         } else if (ex instanceof WorkflowException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.Workflow.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.Workflow.getElementHeaderName(), ex.getCause()\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, ex, ex.getCause()\r\n                     .getMessage());\r\n-            response = responseBuilder.build();\r\n \r\n         } else if (ex instanceof PropagationException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.Propagation.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.Propagation.getElementHeaderName(),\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Propagation, ex,\r\n                     ((PropagationException) ex).getResourceName());\r\n-            response = responseBuilder.build();\r\n \r\n         } else if (ex instanceof InvalidSearchConditionException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidSearchCondition, ex, null);\r\n+\r\n         } else if (ex instanceof PersistenceException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\r\n-                    ex.getCause() == null\r\n-                            ? ex.getMessage()\r\n-                            : ex.getCause().getMessage());\r\n-            response = responseBuilder.build();\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.GenericPersistence, ex, null);\r\n         }\r\n \r\n         return response;\r\n     }\r\n \r\n+    private Response buildResponse(ResponseBuilder responseBuilder, SyncopeClientExceptionType hType, Throwable ex,\r\n+            String msg) {\r\n+        responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, hType.getHeaderValue());\r\n+        String exMsg = ex.getCause() == null\r\n+                ? ex.getMessage()\r\n+                : ex.getCause().getMessage();\r\n+        responseBuilder.header(hType.getElementHeaderName(), (msg != null)\r\n+                ? msg\r\n+                : exMsg);\r\n+        return responseBuilder.build();\r\n+    }\r\n }\r"}]}