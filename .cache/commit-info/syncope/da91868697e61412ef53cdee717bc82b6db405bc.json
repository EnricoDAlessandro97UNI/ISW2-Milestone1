{"sha":"da91868697e61412ef53cdee717bc82b6db405bc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhOTE4Njg2OTdlNjE0MTJlZjUzY2RlZTcxN2JjODJiNmRiNDA1YmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-01T15:01:49Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-01T15:04:33Z"},"message":"[SYNCOPE-1377] Added JAX-RS ContainerRequestFilter to check X-Syncope-Domain provided value","tree":{"sha":"e404a4feb92f7806863226a4a8610f3bcbc47ac3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e404a4feb92f7806863226a4a8610f3bcbc47ac3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/da91868697e61412ef53cdee717bc82b6db405bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/da91868697e61412ef53cdee717bc82b6db405bc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/da91868697e61412ef53cdee717bc82b6db405bc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/da91868697e61412ef53cdee717bc82b6db405bc/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"25d6c1f76b7fc544013b32710c8203f4c09dbea9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25d6c1f76b7fc544013b32710c8203f4c09dbea9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/25d6c1f76b7fc544013b32710c8203f4c09dbea9"}],"stats":{"total":119,"additions":110,"deletions":9},"files":[{"sha":"145bea250817a88d5c5872705ca4bf01ff916e87","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da91868697e61412ef53cdee717bc82b6db405bc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da91868697e61412ef53cdee717bc82b6db405bc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java?ref=da91868697e61412ef53cdee717bc82b6db405bc","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n \n /**\n- * Adds the <tt>ETag</tt> header to any response containing an instance of {@link AbstractAnnotatedBean} as entity.\n+ * Adds the {@code ETag} header to any response containing an instance of {@link AbstractAnnotatedBean} as entity.\n  * The actual ETag value is computed on the basis of last change date (or creation date if not available).\n  */\n @Provider"},{"sha":"f2aabad3ee6297fb0178d22a4c6789865627590a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da91868697e61412ef53cdee717bc82b6db405bc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da91868697e61412ef53cdee717bc82b6db405bc/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java?ref=da91868697e61412ef53cdee717bc82b6db405bc","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import java.io.IOException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.Provider;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ErrorTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Checks that requested Domain exists.\n+ */\n+@Provider\n+@PreMatching\n+public class CheckDomainFilter implements ContainerRequestFilter {\n+\n+    @Autowired\n+    private DomainDAO domainDAO;\n+\n+    @Override\n+    public void filter(final ContainerRequestContext reqContext) throws IOException {\n+        final String domain = reqContext.getHeaderString(RESTHeaders.DOMAIN);\n+        if (domain != null && !SyncopeConstants.MASTER_DOMAIN.equals(domain)) {\n+            AuthContextUtils.execWithAuthContext(\n+                    SyncopeConstants.MASTER_DOMAIN, new AuthContextUtils.Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    if (domainDAO.find(domain) == null) {\n+                        String message = \"Domain '\" + domain + \"' not available\";\n+\n+                        ErrorTO error = new ErrorTO();\n+                        error.setStatus(Response.Status.NOT_FOUND.getStatusCode());\n+                        error.setType(ClientExceptionType.NotFound);\n+                        error.getElements().add(message);\n+\n+                        reqContext.abortWith(Response.status(Response.Status.NOT_FOUND).\n+                                entity(error).\n+                                header(HttpHeaders.CONTENT_TYPE,\n+                                        reqContext.getAcceptableMediaTypes().isEmpty()\n+                                        ? MediaType.APPLICATION_JSON\n+                                        : reqContext.getAcceptableMediaTypes().get(0).toString()).\n+                                header(RESTHeaders.ERROR_CODE,\n+                                        ClientExceptionType.NotFound.name()).\n+                                header(RESTHeaders.ERROR_INFO,\n+                                        ClientExceptionType.NotFound.getInfoHeaderValue(message)).\n+                                build());\n+                    }\n+                    return null;\n+                }\n+            });\n+        }\n+    }\n+}"},{"sha":"b68b33f1093d54f189b3f7f3d2b182f6be68b42a","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da91868697e61412ef53cdee717bc82b6db405bc/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da91868697e61412ef53cdee717bc82b6db405bc/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=da91868697e61412ef53cdee717bc82b6db405bc","patch":"@@ -90,6 +90,7 @@ under the License.\n   \n   <bean id=\"searchContextProvider\" class=\"org.apache.cxf.jaxrs.ext.search.SearchContextProvider\"/>\n     \n+  <bean id=\"checkDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.CheckDomainFilter\"/>\n   <bean id=\"addDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.AddDomainFilter\"/>\n   <bean id=\"addETagFilter\" class=\"org.apache.syncope.core.rest.cxf.AddETagFilter\"/>\n   \n@@ -165,6 +166,7 @@ under the License.\n       <ref bean=\"yamlProvider\"/>\n       <ref bean=\"exceptionMapper\"/>\n       <ref bean=\"searchContextProvider\"/>\n+      <ref bean=\"checkDomainFilter\"/>\n       <ref bean=\"addDomainFilter\"/>\n       <ref bean=\"addETagFilter\"/>\n       <ref bean=\"wadlGenerator\"/>"},{"sha":"ee99056e4da6ddc9e9881aeb32872356d324462c","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthContextUtils.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da91868697e61412ef53cdee717bc82b6db405bc/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da91868697e61412ef53cdee717bc82b6db405bc/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthContextUtils.java?ref=da91868697e61412ef53cdee717bc82b6db405bc","patch":"@@ -98,7 +98,7 @@ public static String getDomain() {\n         return domainKey;\n     }\n \n-    private static void setFakeAuth(final String domain) {\n+    private static Authentication getFakeAuth(final String domain) {\n         List<GrantedAuthority> authorities = EntitlementsHolder.getInstance().getValues().stream().\n                 map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n                 collect(Collectors.toList());\n@@ -107,20 +107,19 @@ private static void setFakeAuth(final String domain) {\n                 new User(ApplicationContextProvider.getBeanFactory().getBean(\"adminUser\", String.class),\n                         \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n         auth.setDetails(new SyncopeAuthenticationDetails(domain));\n-        SecurityContextHolder.getContext().setAuthentication(auth);\n+        return auth;\n     }\n \n-    public static <T> T execWithAuthContext(final String domainKey, final Executable<T> executable) {\n-        SecurityContext ctx = SecurityContextHolder.getContext();\n-        setFakeAuth(domainKey);\n+    public static <T> T execWithAuthContext(final String domain, final Executable<T> executable) {\n+        Authentication original = SecurityContextHolder.getContext().getAuthentication();\n+        SecurityContextHolder.getContext().setAuthentication(getFakeAuth(domain));\n         try {\n             return executable.exec();\n         } catch (Throwable t) {\n-            LOG.debug(\"Error during execution with domain {} context\", domainKey, t);\n+            LOG.debug(\"Error during execution with domain {} context\", domain, t);\n             throw t;\n         } finally {\n-            SecurityContextHolder.clearContext();\n-            SecurityContextHolder.setContext(ctx);\n+            SecurityContextHolder.getContext().setAuthentication(original);\n         }\n     }\n "},{"sha":"7bb4b94a8afee0033e8d2d7b12dfade284a25f79","filename":"fit/core-reference/src/main/resources/jboss/restCXFContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da91868697e61412ef53cdee717bc82b6db405bc/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da91868697e61412ef53cdee717bc82b6db405bc/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml?ref=da91868697e61412ef53cdee717bc82b6db405bc","patch":"@@ -90,6 +90,7 @@ under the License.\n   \n   <bean id=\"searchContextProvider\" class=\"org.apache.cxf.jaxrs.ext.search.SearchContextProvider\"/>\n     \n+  <bean id=\"checkDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.CheckDomainFilter\"/>\n   <bean id=\"addDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.AddDomainFilter\"/>\n   <bean id=\"addETagFilter\" class=\"org.apache.syncope.core.rest.cxf.AddETagFilter\"/>\n   \n@@ -179,6 +180,7 @@ under the License.\n       <ref bean=\"yamlProvider\"/>\n       <ref bean=\"exceptionMapper\"/>\n       <ref bean=\"searchContextProvider\"/>\n+      <ref bean=\"checkDomainFilter\"/>\n       <ref bean=\"addDomainFilter\"/>\n       <ref bean=\"addETagFilter\"/>\n       <ref bean=\"wadlGenerator\"/>"},{"sha":"c088bd6980ee24bee8af598c2bcf83383485d8e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da91868697e61412ef53cdee717bc82b6db405bc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da91868697e61412ef53cdee717bc82b6db405bc/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=da91868697e61412ef53cdee717bc82b6db405bc","patch":"@@ -21,6 +21,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.List;\n@@ -31,6 +32,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n@@ -45,6 +47,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.ExecStatus;\n@@ -63,6 +66,7 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -241,4 +245,17 @@ public void createResourceAndPull() {\n             adminClient.getService(ResourceService.class).delete(resource.getKey());\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1377() {\n+        try {\n+            new SyncopeClientFactoryBean().setAddress(ADDRESS).setDomain(\"NotExisting\").create().\n+                    getService(UserSelfService.class).\n+                    create(UserITCase.getUniqueSampleTO(\"syncope1377@syncope.apache.org\"), true);\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            assertTrue(e.getMessage().contains(\"NotExisting\"));\n+        }\n+    }\n }"}]}