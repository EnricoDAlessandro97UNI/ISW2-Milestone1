{"sha":"dc72f88334edb1f7e1dcd20ea2de9c129f89912f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRjNzJmODgzMzRlZGIxZjdlMWRjZDIwZWEyZGU5YzEyOWY4OTkxMmY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-06T10:24:29Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-06T10:24:29Z"},"message":"Fix in user search\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246687 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"22e219f958094167b7d9f9809ce80e4030754751","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/22e219f958094167b7d9f9809ce80e4030754751"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dc72f88334edb1f7e1dcd20ea2de9c129f89912f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc72f88334edb1f7e1dcd20ea2de9c129f89912f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc72f88334edb1f7e1dcd20ea2de9c129f89912f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc72f88334edb1f7e1dcd20ea2de9c129f89912f/comments","author":null,"committer":null,"parents":[{"sha":"9db57e44e27d92375dbee639d44f80fcb6f84efa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9db57e44e27d92375dbee639d44f80fcb6f84efa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9db57e44e27d92375dbee639d44f80fcb6f84efa"}],"stats":{"total":197,"additions":130,"deletions":67},"files":[{"sha":"ca914de2aaf2e97a6661ec0432a59ace35728476","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":128,"deletions":65,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc72f88334edb1f7e1dcd20ea2de9c129f89912f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc72f88334edb1f7e1dcd20ea2de9c129f89912f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=dc72f88334edb1f7e1dcd20ea2de9c129f89912f","patch":"@@ -21,6 +21,7 @@\n import javax.validation.ValidationException;\n import org.hibernate.Criteria;\n import org.hibernate.Session;\n+import org.hibernate.criterion.Conjunction;\n import org.hibernate.criterion.Criterion;\n import org.hibernate.criterion.Restrictions;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -377,53 +378,90 @@ private Criterion getCriterion(final AttributeCond.Type type,\n             final AbstractAttrValue attrValue) {\n \n         Criterion result = null;\n+        Conjunction conjunction;\n         switch (type) {\n             case EQ:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.eq(\"av.stringValue\",\n-                        attrValue.getStringValue())).\n-                        add(Restrictions.eq(\"av.booleanValue\",\n-                        attrValue.getBooleanValue() == null\n-                        ? null : attrValue.getBooleanAsInteger(\n-                        attrValue.getBooleanValue()))).\n-                        add(Restrictions.eq(\"av.longValue\",\n-                        attrValue.getLongValue())).\n-                        add(Restrictions.eq(\"av.doubleValue\",\n-                        attrValue.getDoubleValue())).\n-                        add(Restrictions.eq(\"av.dateValue\",\n-                        attrValue.getDateValue()));\n+                conjunction = Restrictions.conjunction();\n+\n+                if (attrValue.getStringValue() != null) {\n+                    conjunction.add(Restrictions.eq(\"av.stringValue\",\n+                            attrValue.getStringValue()));\n+                }\n+                if (attrValue.getBooleanValue() != null) {\n+                    conjunction.add(Restrictions.eq(\"av.booleanValue\",\n+                            attrValue.getBooleanAsInteger(\n+                            attrValue.getBooleanValue())));\n+                }\n+                if (attrValue.getLongValue() != null) {\n+                    conjunction.add(Restrictions.eq(\"av.longValue\",\n+                            attrValue.getLongValue()));\n+                }\n+                if (attrValue.getDoubleValue() != null) {\n+                    conjunction.add(Restrictions.eq(\"av.doubleValue\",\n+                            attrValue.getDoubleValue()));\n+                }\n+                if (attrValue.getDateValue() != null) {\n+                    conjunction.add(Restrictions.eq(\"av.dateValue\",\n+                            attrValue.getDateValue()));\n+                }\n+\n+                result = conjunction;\n                 break;\n \n             case GE:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.ge(\"av.stringValue\",\n-                        attrValue.getStringValue())).\n-                        add(Restrictions.ge(\"av.booleanValue\",\n-                        attrValue.getBooleanValue() == null\n-                        ? null : attrValue.getBooleanAsInteger(\n-                        attrValue.getBooleanValue()))).\n-                        add(Restrictions.ge(\"av.longValue\",\n-                        attrValue.getLongValue())).\n-                        add(Restrictions.ge(\"av.doubleValue\",\n-                        attrValue.getDoubleValue())).\n-                        add(Restrictions.ge(\"av.dateValue\",\n-                        attrValue.getDateValue()));\n+                conjunction = Restrictions.conjunction();\n+\n+                if (attrValue.getStringValue() != null) {\n+                    conjunction.add(Restrictions.ge(\"av.stringValue\",\n+                            attrValue.getStringValue()));\n+                }\n+                if (attrValue.getBooleanValue() != null) {\n+                    conjunction.add(Restrictions.ge(\"av.booleanValue\",\n+                            attrValue.getBooleanAsInteger(\n+                            attrValue.getBooleanValue())));\n+                }\n+                if (attrValue.getLongValue() != null) {\n+                    conjunction.add(Restrictions.ge(\"av.longValue\",\n+                            attrValue.getLongValue()));\n+                }\n+                if (attrValue.getDoubleValue() != null) {\n+                    conjunction.add(Restrictions.ge(\"av.doubleValue\",\n+                            attrValue.getDoubleValue()));\n+                }\n+                if (attrValue.getDateValue() != null) {\n+                    conjunction.add(Restrictions.ge(\"av.dateValue\",\n+                            attrValue.getDateValue()));\n+                }\n+\n+                result = conjunction;\n                 break;\n \n             case GT:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.gt(\"av.stringValue\",\n-                        attrValue.getStringValue())).\n-                        add(Restrictions.gt(\"av.booleanValue\",\n-                        attrValue.getBooleanValue() == null\n-                        ? null : attrValue.getBooleanAsInteger(\n-                        attrValue.getBooleanValue()))).\n-                        add(Restrictions.gt(\"av.longValue\",\n-                        attrValue.getLongValue())).\n-                        add(Restrictions.gt(\"av.doubleValue\",\n-                        attrValue.getDoubleValue())).\n-                        add(Restrictions.gt(\"av.dateValue\",\n-                        attrValue.getDateValue()));\n+                conjunction = Restrictions.conjunction();\n+\n+                if (attrValue.getStringValue() != null) {\n+                    conjunction.add(Restrictions.gt(\"av.stringValue\",\n+                            attrValue.getStringValue()));\n+                }\n+                if (attrValue.getBooleanValue() != null) {\n+                    conjunction.add(Restrictions.gt(\"av.booleanValue\",\n+                            attrValue.getBooleanAsInteger(\n+                            attrValue.getBooleanValue())));\n+                }\n+                if (attrValue.getLongValue() != null) {\n+                    conjunction.add(Restrictions.gt(\"av.longValue\",\n+                            attrValue.getLongValue()));\n+                }\n+                if (attrValue.getDoubleValue() != null) {\n+                    conjunction.add(Restrictions.gt(\"av.doubleValue\",\n+                            attrValue.getDoubleValue()));\n+                }\n+                if (attrValue.getDateValue() != null) {\n+                    conjunction.add(Restrictions.gt(\"av.dateValue\",\n+                            attrValue.getDateValue()));\n+                }\n+\n+                result = conjunction;\n                 break;\n \n             case ISNOTNULL:\n@@ -436,35 +474,59 @@ private Criterion getCriterion(final AttributeCond.Type type,\n                 break;\n \n             case LE:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.le(\"av.stringValue\",\n-                        attrValue.getStringValue())).\n-                        add(Restrictions.le(\"av.booleanValue\",\n-                        attrValue.getBooleanValue() == null\n-                        ? null : attrValue.getBooleanAsInteger(\n-                        attrValue.getBooleanValue()))).\n-                        add(Restrictions.le(\"av.longValue\",\n-                        attrValue.getLongValue())).\n-                        add(Restrictions.le(\"av.doubleValue\",\n-                        attrValue.getDoubleValue())).\n-                        add(Restrictions.le(\"av.dateValue\",\n-                        attrValue.getDateValue()));\n+                conjunction = Restrictions.conjunction();\n+\n+                if (attrValue.getStringValue() != null) {\n+                    conjunction.add(Restrictions.le(\"av.stringValue\",\n+                            attrValue.getStringValue()));\n+                }\n+                if (attrValue.getBooleanValue() != null) {\n+                    conjunction.add(Restrictions.le(\"av.booleanValue\",\n+                            attrValue.getBooleanAsInteger(\n+                            attrValue.getBooleanValue())));\n+                }\n+                if (attrValue.getLongValue() != null) {\n+                    conjunction.add(Restrictions.le(\"av.longValue\",\n+                            attrValue.getLongValue()));\n+                }\n+                if (attrValue.getDoubleValue() != null) {\n+                    conjunction.add(Restrictions.le(\"av.doubleValue\",\n+                            attrValue.getDoubleValue()));\n+                }\n+                if (attrValue.getDateValue() != null) {\n+                    conjunction.add(Restrictions.le(\"av.dateValue\",\n+                            attrValue.getDateValue()));\n+                }\n+\n+                result = conjunction;\n                 break;\n \n             case LT:\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.lt(\"av.stringValue\",\n-                        attrValue.getStringValue())).\n-                        add(Restrictions.lt(\"av.booleanValue\",\n-                        attrValue.getBooleanValue() == null\n-                        ? null : attrValue.getBooleanAsInteger(\n-                        attrValue.getBooleanValue()))).\n-                        add(Restrictions.lt(\"av.longValue\",\n-                        attrValue.getLongValue())).\n-                        add(Restrictions.lt(\"av.doubleValue\",\n-                        attrValue.getDoubleValue())).\n-                        add(Restrictions.lt(\"av.dateValue\",\n-                        attrValue.getDateValue()));\n+                conjunction = Restrictions.conjunction();\n+\n+                if (attrValue.getStringValue() != null) {\n+                    conjunction.add(Restrictions.lt(\"av.stringValue\",\n+                            attrValue.getStringValue()));\n+                }\n+                if (attrValue.getBooleanValue() != null) {\n+                    conjunction.add(Restrictions.lt(\"av.booleanValue\",\n+                            attrValue.getBooleanAsInteger(\n+                            attrValue.getBooleanValue())));\n+                }\n+                if (attrValue.getLongValue() != null) {\n+                    conjunction.add(Restrictions.lt(\"av.longValue\",\n+                            attrValue.getLongValue()));\n+                }\n+                if (attrValue.getDoubleValue() != null) {\n+                    conjunction.add(Restrictions.lt(\"av.doubleValue\",\n+                            attrValue.getDoubleValue()));\n+                }\n+                if (attrValue.getDateValue() != null) {\n+                    conjunction.add(Restrictions.lt(\"av.dateValue\",\n+                            attrValue.getDateValue()));\n+                }\n+\n+                result = conjunction;\n                 break;\n \n             case LIKE:\n@@ -475,6 +537,7 @@ private Criterion getCriterion(final AttributeCond.Type type,\n \n             default:\n         }\n+\n         return result;\n     }\n }"},{"sha":"448d85699284f1be5c130b888b0aaf06ee2f31b2","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc72f88334edb1f7e1dcd20ea2de9c129f89912f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc72f88334edb1f7e1dcd20ea2de9c129f89912f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=dc72f88334edb1f7e1dcd20ea2de9c129f89912f","patch":"@@ -282,7 +282,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         LOG.debug(\"User search called with condition {}\", searchCondition);\n \n         if (!searchCondition.checkValidity()) {\n-            LOG.error(\"Invalid search condition: \" + searchCondition);\n+            LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n \n@@ -308,7 +308,7 @@ public List<UserTO> paginatedSearch(\n         LOG.debug(\"User search called with condition {}\", searchCondition);\n \n         if (!searchCondition.checkValidity()) {\n-            LOG.error(\"Invalid search condition: \" + searchCondition);\n+            LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n "}]}