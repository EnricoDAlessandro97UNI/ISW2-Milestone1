{"sha":"c12106de4480d03c9b331ef72f5fa4a0bb65c246","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxMjEwNmRlNDQ4MGQwM2M5YjMzMWVmNzJmNWZhNGEwYmI2NWMyNDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-27T14:21:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-27T14:22:24Z"},"message":"[SYNCOPE-1128] Now ordering table rows before export, also for 'internal' foreign keys","tree":{"sha":"3e018ca79bf4c8b1653e0466aee34a55e162979a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3e018ca79bf4c8b1653e0466aee34a55e162979a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c12106de4480d03c9b331ef72f5fa4a0bb65c246","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c12106de4480d03c9b331ef72f5fa4a0bb65c246","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c12106de4480d03c9b331ef72f5fa4a0bb65c246","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c12106de4480d03c9b331ef72f5fa4a0bb65c246/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"11ab8cb9a824efa48d5c98613b174ec2633dfa29","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11ab8cb9a824efa48d5c98613b174ec2633dfa29","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11ab8cb9a824efa48d5c98613b174ec2633dfa29"}],"stats":{"total":151,"additions":127,"deletions":24},"files":[{"sha":"f1f3e441a7acc23cb9a1c6378294a73f97ceb8aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":58,"deletions":24,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c12106de4480d03c9b331ef72f5fa4a0bb65c246/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c12106de4480d03c9b331ef72f5fa4a0bb65c246/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=c12106de4480d03c9b331ef72f5fa4a0bb65c246","patch":"@@ -227,7 +227,11 @@ private String getValues(final ResultSet rs, final String columnName, final Inte\n         return res;\n     }\n \n-    private void doExportTable(final TransformerHandler handler, final Connection conn, final String tableName,\n+    private void doExportTable(\n+            final TransformerHandler handler,\n+            final String dbSchema,\n+            final Connection conn,\n+            final String tableName,\n             final String whereClause) throws SQLException, SAXException {\n \n         LOG.debug(\"Export table {}\", tableName);\n@@ -236,24 +240,58 @@ private void doExportTable(final TransformerHandler handler, final Connection co\n \n         PreparedStatement stmt = null;\n         ResultSet rs = null;\n-        ResultSet pkeyRS = null;\n         try {\n-            // ------------------------------------\n-            // retrieve primary keys to perform an ordered select\n-\n-            final DatabaseMetaData meta = conn.getMetaData();\n-            pkeyRS = meta.getPrimaryKeys(null, null, tableName);\n+            StringBuilder orderBy = new StringBuilder();\n \n-            final StringBuilder orderBy = new StringBuilder();\n+            DatabaseMetaData meta = conn.getMetaData();\n \n-            while (pkeyRS.next()) {\n-                final String columnName = pkeyRS.getString(\"COLUMN_NAME\");\n-                if (columnName != null) {\n-                    if (orderBy.length() > 0) {\n-                        orderBy.append(\",\");\n+            // ------------------------------------\n+            // retrieve foreign keys (linked to the same table) to perform an ordered select\n+            ResultSet pkeyRS = null;\n+            try {\n+                pkeyRS = meta.getImportedKeys(conn.getCatalog(), dbSchema, tableName);\n+                while (pkeyRS.next()) {\n+                    if (tableName.equals(pkeyRS.getString(\"PKTABLE_NAME\"))) {\n+                        String columnName = pkeyRS.getString(\"FKCOLUMN_NAME\");\n+                        if (columnName != null) {\n+                            if (orderBy.length() > 0) {\n+                                orderBy.append(\",\");\n+                            }\n+\n+                            orderBy.append(columnName);\n+                        }\n                     }\n+                }\n+            } finally {\n+                if (pkeyRS != null) {\n+                    try {\n+                        pkeyRS.close();\n+                    } catch (SQLException e) {\n+                        LOG.error(\"While closing result set\", e);\n+                    }\n+                }\n+            }\n \n-                    orderBy.append(columnName);\n+            // retrieve primary keys to perform an ordered select\n+            try {\n+                pkeyRS = meta.getPrimaryKeys(null, null, tableName);\n+                while (pkeyRS.next()) {\n+                    String columnName = pkeyRS.getString(\"COLUMN_NAME\");\n+                    if (columnName != null) {\n+                        if (orderBy.length() > 0) {\n+                            orderBy.append(\",\");\n+                        }\n+\n+                        orderBy.append(columnName);\n+                    }\n+                }\n+            } finally {\n+                if (pkeyRS != null) {\n+                    try {\n+                        pkeyRS.close();\n+                    } catch (SQLException e) {\n+                        LOG.error(\"While closing result set\", e);\n+                    }\n                 }\n             }\n \n@@ -299,13 +337,6 @@ private void doExportTable(final TransformerHandler handler, final Connection co\n                     LOG.error(\"While closing result set\", e);\n                 }\n             }\n-            if (pkeyRS != null) {\n-                try {\n-                    pkeyRS.close();\n-                } catch (SQLException e) {\n-                    LOG.error(\"While closing result set\", e);\n-                }\n-            }\n             if (stmt != null) {\n                 try {\n                     stmt.close();\n@@ -352,15 +383,17 @@ public void export(\n             throw new IllegalArgumentException(\"Could not find DataSource for domain \" + domain);\n         }\n \n-        String dbSchema = ApplicationContextProvider.getBeanFactory().getBean(domain + \"DatabaseSchema\", String.class);\n+        String dbSchema = ApplicationContextProvider.getBeanFactory().getBean(domain + \"DatabaseSchema\",\n+                String.class);\n \n         Connection conn = null;\n         ResultSet rs = null;\n         try {\n             conn = DataSourceUtils.getConnection(dataSource);\n             final DatabaseMetaData meta = conn.getMetaData();\n \n-            rs = meta.getTables(null, StringUtils.isBlank(dbSchema) ? null : dbSchema, null, new String[] { \"TABLE\" });\n+            rs = meta.getTables(null, StringUtils.isBlank(dbSchema) ? null : dbSchema, null,\n+                    new String[] { \"TABLE\" });\n \n             final Set<String> tableNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n \n@@ -377,7 +410,8 @@ public void export(\n             // then sort tables based on foreign keys and dump\n             for (String tableName : sortByForeignKeys(dbSchema, conn, tableNames)) {\n                 try {\n-                    doExportTable(handler, conn, tableName, TABLES_TO_BE_FILTERED.get(tableName.toUpperCase()));\n+                    doExportTable(\n+                            handler, dbSchema, conn, tableName, TABLES_TO_BE_FILTERED.get(tableName.toUpperCase()));\n                 } catch (Exception e) {\n                     LOG.error(\"Failure exporting table {}\", tableName, e);\n                 }"},{"sha":"84bc767eacc2fd77cb5a9b6b781d73ed290cc68c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/XMLContentExporterTest.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c12106de4480d03c9b331ef72f5fa4a0bb65c246/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c12106de4480d03c9b331ef72f5fa4a0bb65c246/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FXMLContentExporterTest.java?ref=c12106de4480d03c9b331ef72f5fa4a0bb65c246","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.output.ByteArrayOutputStream;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.content.ContentExporter;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class XMLContentExporterTest extends AbstractTest {\n+\n+    @Autowired\n+    private ContentExporter exporter;\n+\n+    @Test\n+    public void issueSYNCOPE1128() throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\n+        exporter.export(\"Master\", baos, null, null, null);\n+\n+        String exported = baos.toString(Charset.defaultCharset());\n+        assertTrue(StringUtils.isNotBlank(exported));\n+\n+        List<String> realms = CollectionUtils.select(\n+                IOUtils.readLines(IOUtils.toInputStream(exported, Charset.defaultCharset()), Charset.defaultCharset()),\n+                new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String row) {\n+                return row.startsWith(\"<REALM\");\n+            }\n+        }, new ArrayList<String>());\n+        assertEquals(4, realms.size());\n+        assertTrue(realms.get(0).contains(\"NAME=\\\"/\\\"\"));\n+        assertTrue(realms.get(1).contains(\"NAME=\\\"two\\\"\"));\n+        assertTrue(realms.get(2).contains(\"NAME=\\\"odd\\\"\"));\n+        assertTrue(realms.get(3).contains(\"NAME=\\\"even\\\"\"));\n+    }\n+\n+}"}]}