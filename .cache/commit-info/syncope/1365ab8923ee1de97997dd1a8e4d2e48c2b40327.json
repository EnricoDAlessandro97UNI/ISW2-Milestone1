{"sha":"1365ab8923ee1de97997dd1a8e4d2e48c2b40327","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEzNjVhYjg5MjNlZTFkZTk3OTk3ZGQxYThlNGQyZTQ4YzJiNDAzMjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-28T17:21:15Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-11-28T17:21:15Z"},"message":"Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1414832 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57c25f595e739fb81f08365c3a0a622e31c8ebfd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/57c25f595e739fb81f08365c3a0a622e31c8ebfd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1365ab8923ee1de97997dd1a8e4d2e48c2b40327","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1365ab8923ee1de97997dd1a8e4d2e48c2b40327","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1365ab8923ee1de97997dd1a8e4d2e48c2b40327","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c7adba1a0f961b1a18904da13240284c157e7246","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7adba1a0f961b1a18904da13240284c157e7246","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7adba1a0f961b1a18904da13240284c157e7246"}],"stats":{"total":58,"additions":35,"deletions":23},"files":[{"sha":"df195e26bc00ff1b2d3c334c4980f615a18df22d","filename":"console/src/main/java/org/apache/syncope/console/rest/ApprovalRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java?ref=1365ab8923ee1de97997dd1a8e4d2e48c2b40327","patch":"@@ -20,10 +20,10 @@\n \n import java.util.Arrays;\n import java.util.List;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n import org.apache.syncope.console.SyncopeSession;\n+import org.springframework.stereotype.Component;\n \n /**\n  * Console client for invoking Rest Todo services."},{"sha":"b49e5d2590fb92fe988b57e58aa768509a28fd14","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=1365ab8923ee1de97997dd1a8e4d2e48c2b40327","patch":"@@ -50,7 +50,6 @@ public class WorkflowController extends AbstractController {\n     @RequestMapping(method = RequestMethod.GET, value = \"/definition\")\n     @Transactional(readOnly = true)\n     public WorkflowDefinitionTO getDefinition() throws WorkflowException {\n-\n         WorkflowDefinitionTO result = wfAdapter.getDefinition();\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinition, Result.success,\n@@ -73,7 +72,6 @@ public void updateDefinition(@RequestBody final WorkflowDefinitionTO definition)\n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/tasks\")\n     public ModelAndView getDefinedTasks() throws WorkflowException {\n-\n         List<String> definedTasks = wfAdapter.getDefinedTasks();\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinedTasks, Result.success,"},{"sha":"bea68b3a03e7f3c8a3ef54e2b37626159de4ec50","filename":"core/src/main/java/org/apache/syncope/core/workflow/ActivitiUserWorkflowAdapter.java","status":"modified","additions":28,"deletions":19,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java?ref=1365ab8923ee1de97997dd1a8e4d2e48c2b40327","patch":"@@ -113,6 +113,8 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     public static final String ENCRYPTED_PWD = \"encryptedPwd\";\n \n+    public static final String TASK_IS_FORM = \"taskIsForm\";\n+\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -145,16 +147,18 @@ private void updateStatus(final SyncopeUser user) {\n         }\n     }\n \n-    private boolean waitingForForm(final SyncopeUser user) {\n-        boolean result = false;\n+    private String getFormTask(final SyncopeUser user) {\n+        String result = null;\n \n         List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n         if (tasks.isEmpty() || tasks.size() > 1) {\n             LOG.warn(\"While checking if form task: unexpected task number ({})\", tasks.size());\n         } else {\n             try {\n                 TaskFormData formData = formService.getTaskFormData(tasks.get(0).getId());\n-                result = formData != null && !formData.getFormProperties().isEmpty();\n+                if (formData != null && !formData.getFormProperties().isEmpty()) {\n+                    result = tasks.get(0).getId();\n+                }\n             } catch (ActivitiException e) {\n                 LOG.warn(\"Could not get task form data\", e);\n             }\n@@ -191,6 +195,7 @@ private String decrypt(final String crypted) {\n     @Override\n     public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck)\n             throws WorkflowException {\n+\n         return create(userTO, disablePwdPolicyCheck, null);\n     }\n \n@@ -213,8 +218,7 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         SyncopeUser user = (SyncopeUser) runtimeService.getVariable(processInstance.getProcessInstanceId(),\n                 SYNCOPE_USER);\n \n-        // this will make SyncopeUserValidator not to consider\n-        // password policies at all\n+        // this will make SyncopeUserValidator not to consider password policies at all\n         if (disablePwdPolicyCheck) {\n             user.removeClearPassword();\n         }\n@@ -224,7 +228,6 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n \n         Boolean propagateEnable = (Boolean) runtimeService.getVariable(processInstance.getProcessInstanceId(),\n                 PROPAGATE_ENABLE);\n-\n         if (propagateEnable == null) {\n             propagateEnable = enabled;\n         }\n@@ -234,7 +237,11 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(PropagationOperation.CREATE, user.getResourceNames());\n \n-        if (waitingForForm(user)) {\n+        String formTaskId = getFormTask(user);\n+        if (formTaskId != null) {\n+            // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n+            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n+\n             runtimeService.setVariable(processInstance.getProcessInstanceId(), PROP_BY_RESOURCE, propByRes);\n             propByRes = null;\n \n@@ -248,8 +255,8 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n                 propByRes, getPerformedTasks(user));\n     }\n \n-    private Set<String> doExecuteTask(final SyncopeUser user, final String task, final Map<String, Object> moreVariables)\n-            throws WorkflowException {\n+    private Set<String> doExecuteTask(final SyncopeUser user, final String task,\n+            final Map<String, Object> moreVariables) throws WorkflowException {\n \n         Set<String> preTasks = getPerformedTasks(user);\n \n@@ -266,14 +273,14 @@ private Set<String> doExecuteTask(final SyncopeUser user, final String task, fin\n         }\n \n         List<Task> tasks = taskService.createTaskQuery().processInstanceId(user.getWorkflowId()).list();\n-        if (tasks.size() != 1) {\n-            LOG.warn(\"Expected a single task, found {}\", tasks.size());\n-        } else {\n+        if (tasks.size() == 1) {\n             try {\n                 taskService.complete(tasks.get(0).getId(), variables);\n             } catch (ActivitiException e) {\n                 throw new WorkflowException(e);\n             }\n+        } else {\n+            LOG.warn(\"Expected a single task, found {}\", tasks.size());\n         }\n \n         Set<String> postTasks = getPerformedTasks(user);\n@@ -305,10 +312,14 @@ protected WorkflowResult<Map.Entry<Long, Boolean>> doUpdate(final SyncopeUser us\n         PropagationByResource propByRes = (PropagationByResource) runtimeService.getVariable(user.getWorkflowId(),\n                 PROP_BY_RESOURCE);\n \n-        // save resources to be propagated and password for later -\n-        // after form submission - propagation\n-        if (waitingForForm(user) && StringUtils.isNotBlank(userMod.getPassword())) {\n-            runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(userMod.getPassword()));\n+        // save resources to be propagated and password for later - after form submission - propagation\n+        String formTaskId = getFormTask(user);\n+        if (formTaskId != null) {\n+            // SYNCOPE-238: This is needed to simplify the task query in this.getForms()\n+            taskService.setVariableLocal(formTaskId, TASK_IS_FORM, Boolean.TRUE);\n+            if (StringUtils.isNotBlank(userMod.getPassword())) {\n+                runtimeService.setVariable(user.getWorkflowId(), ENCRYPTED_PWD, encrypt(userMod.getPassword()));\n+            }\n         }\n \n         Boolean propagateEnable = (Boolean) runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE);\n@@ -469,7 +480,6 @@ public List<String> getDefinedTasks()\n     }\n \n     private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFormType) {\n-\n         WorkflowFormPropertyType result = WorkflowFormPropertyType.String;\n \n         if (\"string\".equals(activitiFormType.getName())) {\n@@ -492,7 +502,6 @@ private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFor\n     }\n \n     private WorkflowFormTO getFormTO(final Task task, final TaskFormData formData) {\n-\n         WorkflowFormTO formTO = new WorkflowFormTO();\n         formTO.setTaskId(task.getId());\n         formTO.setKey(formData.getFormKey());\n@@ -523,7 +532,7 @@ public List<WorkflowFormTO> getForms() {\n         List<WorkflowFormTO> forms = new ArrayList<WorkflowFormTO>();\n \n         TaskFormData formData;\n-        for (Task task : taskService.createTaskQuery().list()) {\n+        for (Task task : taskService.createTaskQuery().taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE).list()) {\n             try {\n                 formData = formService.getTaskFormData(task.getId());\n             } catch (ActivitiException e) {"},{"sha":"942632ee5986e37a15e35cef018c6a88e20fefaa","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1365ab8923ee1de97997dd1a8e4d2e48c2b40327/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=1365ab8923ee1de97997dd1a8e4d2e48c2b40327","patch":"@@ -779,7 +779,12 @@ public void createWithApproval() {\n         }\n         assertNotNull(exception);\n \n-        // 2. request if there is any pending task for user just created\n+        // 2. request if there is any pending form for user just created\n+        List<WorkflowFormTO> forms = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"user/workflow/form/list\", WorkflowFormTO[].class));\n+        assertNotNull(forms);\n+        assertEquals(1, forms.size());\n+\n         WorkflowFormTO form = restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n                 userTO.getId());\n         assertNotNull(form);"}]}