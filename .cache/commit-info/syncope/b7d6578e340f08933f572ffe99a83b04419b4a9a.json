{"sha":"b7d6578e340f08933f572ffe99a83b04419b4a9a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI3ZDY1NzhlMzQwZjA4OTMzZjU3MmZmZTk5YTgzYjA0NDE5YjRhOWE=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2014-12-22T16:02:19Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2014-12-22T16:02:19Z"},"message":"Merge remote-tracking branch 'upstream/master'","tree":{"sha":"50fa1224a6559062379cc4824144b61562829463","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/50fa1224a6559062379cc4824144b61562829463"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b7d6578e340f08933f572ffe99a83b04419b4a9a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b7d6578e340f08933f572ffe99a83b04419b4a9a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b7d6578e340f08933f572ffe99a83b04419b4a9a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b7d6578e340f08933f572ffe99a83b04419b4a9a/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b1613934d47bd9db5276d08755f9111fd5a6a6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b1613934d47bd9db5276d08755f9111fd5a6a6c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b1613934d47bd9db5276d08755f9111fd5a6a6c"},{"sha":"86cbfe450de0cf1102918e2971326856f3d99b51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/86cbfe450de0cf1102918e2971326856f3d99b51","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/86cbfe450de0cf1102918e2971326856f3d99b51"}],"stats":{"total":168,"additions":143,"deletions":25},"files":[{"sha":"4e343a3cfbd71d1fb5851129cf8b05a99465d4f1","filename":"core/src/main/java/org/apache/syncope/core/cache/DisabledVirAttrCache.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FDisabledVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FDisabledVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FDisabledVirAttrCache.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.cache;\n+\n+import org.apache.syncope.common.types.AttributableType;\n+\n+/**\n+ * Empty virtual attribute value cache implementation.\n+ */\n+public class DisabledVirAttrCache implements VirAttrCache {\n+\n+    @Override\n+    public void expire(final AttributableType type, final Long id, final String schemaName) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public VirAttrCacheValue get(final AttributableType type, final Long id, final String schemaName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isValidEntry(VirAttrCacheValue value) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void put(\n+            final AttributableType type, final Long id, final String schemaName, final VirAttrCacheValue value) {\n+\n+        // nothing to do\n+    }\n+\n+}"},{"sha":"b48ca10888907ec0f50e7bc3c30cbe57fc898ba1","filename":"core/src/main/java/org/apache/syncope/core/cache/MemoryVirAttrCache.java","status":"renamed","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FMemoryVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FMemoryVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FMemoryVirAttrCache.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.util;\n+package org.apache.syncope.core.cache;\n \n import java.util.Date;\n import java.util.HashMap;\n@@ -26,26 +26,26 @@\n import org.apache.syncope.common.types.AttributableType;\n \n /**\n- * Virtual Attribute Value cache.\n+ * In-memory (HashMap) virtual attribute value cache implementation.\n  */\n-public final class VirAttrCache {\n+public class MemoryVirAttrCache implements VirAttrCache {\n \n     /**\n      * Elapsed time in seconds.\n      */\n-    private final int ttl;\n+    protected int ttl;\n \n     /**\n      * Max cache size.\n      */\n-    private final int maxCacheSize;\n+    protected int maxCacheSize;\n \n     /**\n      * Cache entries.\n      */\n-    private final Map<VirAttrCacheKey, VirAttrCacheValue> cache = new HashMap<VirAttrCacheKey, VirAttrCacheValue>();\n+    protected final Map<VirAttrCacheKey, VirAttrCacheValue> cache = new HashMap<VirAttrCacheKey, VirAttrCacheValue>();\n \n-    public VirAttrCache(final int ttl, final int maxCacheSize) {\n+    public MemoryVirAttrCache(final int ttl, final int maxCacheSize) {\n         this.ttl = ttl;\n         this.maxCacheSize = maxCacheSize;\n     }\n@@ -58,6 +58,7 @@ public VirAttrCache(final int ttl, final int maxCacheSize) {\n      * @param schemaName virtual attribute name\n      * @param value virtual attribute values\n      */\n+    @Override\n     public void put(\n             final AttributableType type,\n             final Long id,\n@@ -82,6 +83,7 @@ public void put(\n      * @param schemaName virtual attribute schema name.\n      * @return cached values or null if virtual attribute is not cached.\n      */\n+    @Override\n     public VirAttrCacheValue get(final AttributableType type, final Long id, final String schemaName) {\n         return cache.get(new VirAttrCacheKey(type, id, schemaName));\n     }\n@@ -93,6 +95,7 @@ public VirAttrCacheValue get(final AttributableType type, final Long id, final S\n      * @param id user or role id\n      * @param schemaName virtual attribute schema name\n      */\n+    @Override\n     public void expire(final AttributableType type, final Long id, final String schemaName) {\n         final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, id, schemaName));\n         if (isValidEntry(value)) {\n@@ -137,6 +140,7 @@ private void free() {\n      * @param value cache entry value.\n      * @return TRUE if the value is valid; FALSE otherwise.\n      */\n+    @Override\n     public boolean isValidEntry(final VirAttrCacheValue value) {\n         final Date expiringDate = new Date(value == null ? 0 : value.getCreationDate().getTime() + ttl * 1000);\n         return expiringDate.after(new Date());","previous_filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCache.java"},{"sha":"723eb1d0683ff9cf58e0842e5e800f3c65cdbb4d","filename":"core/src/main/java/org/apache/syncope/core/cache/VirAttrCache.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCache.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.cache;\n+\n+import org.apache.syncope.common.types.AttributableType;\n+\n+/**\n+ * Virtual Attribute Value cache.\n+ */\n+public interface VirAttrCache {\n+\n+    /**\n+     * Force entry expiring.\n+     *\n+     * @param type user or role\n+     * @param id user or role id\n+     * @param schemaName virtual attribute schema name\n+     */\n+    void expire(AttributableType type, Long id, String schemaName);\n+\n+    /**\n+     * Retrieve cached value. Return null in case of virtual attribute not cached.\n+     *\n+     * @param type user or role\n+     * @param id user or role id\n+     * @param schemaName virtual attribute schema name.\n+     * @return cached values or null if virtual attribute is not cached.\n+     */\n+    VirAttrCacheValue get(AttributableType type, Long id, String schemaName);\n+\n+    /**\n+     * Cache entry is valid if and only if value exist and it is not expired.\n+     *\n+     * @param value cache entry value.\n+     * @return TRUE if the value is valid; FALSE otherwise.\n+     */\n+    boolean isValidEntry(VirAttrCacheValue value);\n+\n+    /**\n+     * Cache virtual attribute values.\n+     *\n+     * @param type user or role\n+     * @param id user or role id\n+     * @param schemaName virtual attribute name\n+     * @param value virtual attribute values\n+     */\n+    void put(AttributableType type, Long id, String schemaName, VirAttrCacheValue value);\n+\n+}"},{"sha":"b22a278d370030ee6fdd34f1a4590be3d6682065","filename":"core/src/main/java/org/apache/syncope/core/cache/VirAttrCacheKey.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCacheKey.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCacheKey.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCacheKey.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.util;\n+package org.apache.syncope.core.cache;\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;","previous_filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCacheKey.java"},{"sha":"5a634f2b02800886ba4be9639cc1bae582cca86f","filename":"core/src/main/java/org/apache/syncope/core/cache/VirAttrCacheValue.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fcache%2FVirAttrCacheValue.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.util;\n+package org.apache.syncope.core.cache;\n \n import java.util.Date;\n import java.util.HashMap;\n@@ -80,7 +80,7 @@ public Date getLastAccessDate() {\n         return lastAccessDate;\n     }\n \n-    void setLastAccessDate(Date lastAccessDate) {\n+    void setLastAccessDate(final Date lastAccessDate) {\n         this.lastAccessDate = lastAccessDate;\n     }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/util/VirAttrCacheValue.java"},{"sha":"814e83ba45a9e7ce73a064a89e32bf170df7e665","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -69,8 +69,8 @@\n import org.apache.syncope.core.util.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.SecureRandomUtil;\n-import org.apache.syncope.core.util.VirAttrCache;\n-import org.apache.syncope.core.util.VirAttrCacheValue;\n+import org.apache.syncope.core.cache.VirAttrCache;\n+import org.apache.syncope.core.cache.VirAttrCacheValue;\n import org.apache.syncope.core.util.jexl.JexlUtil;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;"},{"sha":"399b11806940d959c454cc0ffa42d995b13a4c6b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -221,7 +221,7 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n                 try {\n                     attr.addValue(value, attributableUtil);\n                 } catch (InvalidAttrValueException e) {\n-                    LOG.error(\"Invalid value for attribute \" + schema.getName() + \": \" + value, e);\n+                    LOG.warn(\"Invalid value for attribute \" + schema.getName() + \": \" + value, e);\n \n                     invalidValues.getElements().add(schema.getName() + \": \" + value + \" - \" + e.getMessage());\n                 }"},{"sha":"f6dc331d270a1acd15e12dc0d29fb92b4ed329c2","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.MappingPurpose;\n+import org.apache.syncope.core.cache.VirAttrCache;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n@@ -208,7 +209,7 @@ public static <T extends AbstractSubject> Map.Entry<String, Set<Attribute>> prep\n             }\n         }\n \n-        final Attribute accountIdExtAttr = \n+        final Attribute accountIdExtAttr =\n                 AttributeUtil.find(attrUtil.getAccountIdItem(resource).getExtAttrName(), attributes);\n         if (accountIdExtAttr != null) {\n             attributes.remove(accountIdExtAttr);\n@@ -377,8 +378,8 @@ private static <T extends AbstractAttributable> Map.Entry<String, Attribute> pre\n                 } else {\n                     result = new AbstractMap.SimpleEntry<String, Attribute>(\n                             null, objValues.isEmpty()\n-                            ? AttributeBuilder.build(extAttrName)\n-                            : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n+                                    ? AttributeBuilder.build(extAttrName)\n+                                    : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n                 }\n             }\n         }"},{"sha":"0e67f5ee491637197ec656852309496131e83a9c","filename":"core/src/main/java/org/apache/syncope/core/util/jexl/JexlUtil.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2Fjexl%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2Fjexl%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2Fjexl%2FJexlUtil.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -96,8 +96,8 @@ public static String evaluate(final String expression, final JexlContext jexlCon\n                 if (evaluated != null) {\n                     result = evaluated.toString();\n                 }\n-            } catch (JexlException e) {\n-                LOG.error(\"Invalid jexl expression: \" + expression, e);\n+            } catch (Exception e) {\n+                LOG.error(\"Error while evaluating JEXL expression: \" + expression, e);\n             }\n         } else {\n             LOG.debug(\"Expression not provided or invalid context\");"},{"sha":"9742039b3c223439789d109a648c5fa14d3b5187","filename":"core/src/main/resources/coreContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FcoreContext.xml?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -147,7 +147,7 @@ under the License.\n   <task:annotation-driven executor=\"connectorExecutor\"/>\n   <task:executor id=\"connectorExecutor\" pool-size=\"10\"/>\n   \n-  <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.util.VirAttrCache\" scope=\"singleton\">\n+  <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.cache.MemoryVirAttrCache\" scope=\"singleton\">\n     <constructor-arg value=\"60\"/>\n     <constructor-arg value=\"5000\"/>\n   </bean>"},{"sha":"9c86b2e6a1240ab9c2b267aa6c1b3fe624cc6b60","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -26,7 +26,6 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.EntityViolationType;\n@@ -146,8 +145,7 @@ public void issueSYNCOPE418() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidRDerSchema, e.getType());\n-\n-            assertTrue(e.getElements().iterator().next().toString().contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n }"},{"sha":"f680733f2d002a33344aac4601000868b55c696d","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b7d6578e340f08933f572ffe99a83b04419b4a9a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b7d6578e340f08933f572ffe99a83b04419b4a9a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b7d6578e340f08933f572ffe99a83b04419b4a9a","patch":"@@ -31,7 +31,7 @@ under the License.\n   <parent>\n     <groupId>org.apache</groupId>\n     <artifactId>apache</artifactId>\n-    <version>15</version>\n+    <version>16</version>\n     <relativePath />\n   </parent>\n \n@@ -342,9 +342,9 @@ under the License.\n \n     <wicket.version>6.18.0</wicket.version>\n \n-    <groovy.version>2.3.8</groovy.version>\n+    <groovy.version>2.3.9</groovy.version>\n \n-    <h2.version>1.4.183</h2.version>\n+    <h2.version>1.4.184</h2.version>\n \n     <log4j.version>2.1</log4j.version>\n     <slf4j.version>1.7.9</slf4j.version>"}]}