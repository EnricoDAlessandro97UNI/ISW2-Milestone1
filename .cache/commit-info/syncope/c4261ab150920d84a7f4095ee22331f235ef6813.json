{"sha":"c4261ab150920d84a7f4095ee22331f235ef6813","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0MjYxYWIxNTA5MjBkODRhN2Y0MDk1ZWUyMjMzMWYyMzVlZjY4MTM=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-31T12:25:19Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-31T12:25:19Z"},"message":"SYNCOPE-1202 - Support IdP Initiated SAML SSO","tree":{"sha":"8503fbbe3bcaca81123c7cec5b8aac36a4383022","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8503fbbe3bcaca81123c7cec5b8aac36a4383022"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c4261ab150920d84a7f4095ee22331f235ef6813","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4261ab150920d84a7f4095ee22331f235ef6813","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c4261ab150920d84a7f4095ee22331f235ef6813","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4261ab150920d84a7f4095ee22331f235ef6813/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"b3db3b19e7fccb6445a5b760543722f60e82d86f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b3db3b19e7fccb6445a5b760543722f60e82d86f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b3db3b19e7fccb6445a5b760543722f60e82d86f"}],"stats":{"total":199,"additions":177,"deletions":22},"files":[{"sha":"b11a53067d7a5820b893a42c691f6277097a8bfa","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -51,6 +51,8 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContai\n \n     private boolean useDeflateEncoding;\n \n+    private boolean supportUnsolicited;\n+\n     private SAML2BindingType bindingType;\n \n     private boolean logoutSupported;\n@@ -187,4 +189,12 @@ public Set<String> getActionsClassNames() {\n         return actionsClassNames;\n     }\n \n+    public boolean isSupportUnsolicited() {\n+        return supportUnsolicited;\n+    }\n+\n+    public void setSupportUnsolicited(final boolean supportUnsolicited) {\n+        this.supportUnsolicited = supportUnsolicited;\n+    }\n+\n }"},{"sha":"755d93828188665b1ef0e3e46efd2c9d93eb6d7b","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":23,"deletions":11,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -113,6 +113,8 @@\n @Component\n public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n \n+    private static final String IDP_INITIATED_RELAY_STATE = \"idpInitiated\";\n+\n     private static final long JWT_RELAY_STATE_DURATION = 60L;\n \n     private static final String JWT_CLAIM_IDP_DEFLATE = \"IDP_DEFLATE\";\n@@ -360,17 +362,23 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         if (response.getRelayState() == null) {\n             throw new IllegalArgumentException(\"No Relay State was provided\");\n         }\n-        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n-        if (!relayState.verifySignatureWith(jwsSignatureVerifier)) {\n-            throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n-        }\n-        Long expiryTime = relayState.getJwtClaims().getExpiryTime();\n-        if (expiryTime == null || (expiryTime * 1000L) < new Date().getTime()) {\n-            throw new IllegalArgumentException(\"Relay State is expired\");\n-        }\n \n-        Boolean useDeflateEncoding = Boolean.valueOf(\n-                relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n+        Boolean useDeflateEncoding = false;\n+        String requestId = null;\n+        if (!IDP_INITIATED_RELAY_STATE.equals(response.getRelayState())) {\n+            JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n+            if (!relayState.verifySignatureWith(jwsSignatureVerifier)) {\n+                throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n+            }\n+            useDeflateEncoding = Boolean.valueOf(\n+                    relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n+            requestId = relayState.getJwtClaims().getSubject();\n+\n+            Long expiryTime = relayState.getJwtClaims().getExpiryTime();\n+            if (expiryTime == null || (expiryTime * 1000L) < new Date().getTime()) {\n+                throw new IllegalArgumentException(\"Relay State is expired\");\n+            }\n+        }\n \n         // 2. parse the provided SAML response\n         if (response.getSamlResponse() == null) {\n@@ -400,13 +408,17 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n             throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + \"'\");\n         }\n \n+        if (IDP_INITIATED_RELAY_STATE.equals(response.getRelayState()) && !idp.isSupportUnsolicited()) {\n+            throw new IllegalArgumentException(\"An unsolicited request is not allowed for idp: \" + idp.getId());\n+        }\n+\n         SSOValidatorResponse validatorResponse = null;\n         try {\n             validatorResponse = saml2rw.validate(\n                     samlResponse,\n                     idp,\n                     getAssertionConsumerURL(response.getSpEntityID(), response.getUrlContext()),\n-                    relayState.getJwtClaims().getSubject(),\n+                    requestId,\n                     response.getSpEntityID());\n         } catch (Exception e) {\n             LOG.error(\"While validating AuthnResponse\", e);"},{"sha":"9b4e49726d8ffd67c454e05925172b81da291d0f","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -137,6 +137,10 @@ public boolean isUseDeflateEncoding() {\n         return idpTO.isUseDeflateEncoding();\n     }\n \n+    public boolean isSupportUnsolicited() {\n+        return idpTO.isSupportUnsolicited();\n+    }\n+\n     public SAML2BindingType getBindingType() {\n         return idpTO.getBindingType();\n     }"},{"sha":"7ef1ceca20f7c1db0ce386893495fc58afd4e544","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -49,6 +49,10 @@ public interface SAML2IdP extends Entity {\n \n     void setUseDeflateEncoding(boolean useDeflateEncoding);\n \n+    boolean isSupportUnsolicited();\n+\n+    void setSupportUnsolicited(boolean supportUnsolicited);\n+\n     SAML2BindingType getBindingType();\n \n     void setBindingType(SAML2BindingType bindingType);"},{"sha":"2de265bc4b497bcd7279b101a01ae8fe759fbd93","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -83,6 +83,11 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @Column(nullable = false)\n     private Integer useDeflateEncoding;\n \n+    @Min(0)\n+    @Max(1)\n+    @Column(nullable = false)\n+    private Integer supportUnsolicited;\n+\n     @Column(nullable = false)\n     private SAML2BindingType bindingType;\n \n@@ -156,6 +161,16 @@ public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n         this.useDeflateEncoding = getBooleanAsInteger(useDeflateEncoding);\n     }\n \n+    @Override\n+    public boolean isSupportUnsolicited() {\n+        return isBooleanAsInteger(supportUnsolicited);\n+    }\n+\n+    @Override\n+    public void setSupportUnsolicited(final boolean supportUnsolicited) {\n+        this.supportUnsolicited = getBooleanAsInteger(supportUnsolicited);\n+    }\n+\n     @Override\n     public SAML2BindingType getBindingType() {\n         return bindingType;"},{"sha":"7d003ab9482ab53d2f9369c33dd6305ffdbf8105","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -168,6 +168,7 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.setCreateUnmatching(idpTO.isCreateUnmatching());\n         idp.setUpdateMatching(idpTO.isUpdateMatching());\n         idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n+        idp.setSupportUnsolicited(idpTO.isSupportUnsolicited());\n         idp.setBindingType(idpTO.getBindingType());\n \n         if (idpTO.getUserTemplate() == null) {\n@@ -224,6 +225,7 @@ public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n         idpTO.setEntityID(idp.getEntityID());\n         idpTO.setName(idp.getName());\n         idpTO.setUseDeflateEncoding(idp.isUseDeflateEncoding());\n+        idpTO.setSupportUnsolicited(idp.isSupportUnsolicited());\n         idpTO.setBindingType(idp.getBindingType());\n         idpTO.setCreateUnmatching(idp.isCreateUnmatching());\n         idpTO.setUpdateMatching(idp.isUpdateMatching());"},{"sha":"20d89953695d578a59f14e6b3296ca3161ba3cae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":84,"deletions":11,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -41,9 +41,11 @@\n import java.security.SecureRandom;\n import java.security.cert.Certificate;\n import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n import java.util.Base64;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.List;\n import java.util.Optional;\n import java.util.regex.Pattern;\n import javax.ws.rs.core.MediaType;\n@@ -140,6 +142,14 @@ public static void importFromIdPMetadata() throws Exception {\n             saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/ssocircle.xml\"));\n             saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/testshib-providers.xml\"));\n             saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/fediz.xml\"));\n+            saml2IdPService.importFromMetadata(SAML2ITCase.class.getResourceAsStream(\"/fediz_realmb.xml\"));\n+\n+            // Allow unsolicited responses for the realmb case\n+            String realmBEntityId = \"urn:org:apache:cxf:fediz:idp:realm-B\";\n+            Optional<SAML2IdPTO> realmBIdP =\n+                saml2IdPService.list().stream().filter(idp -> realmBEntityId.equals(idp.getEntityID())).findFirst();\n+            realmBIdP.get().setSupportUnsolicited(true);\n+            saml2IdPService.update(realmBIdP.get());\n         } catch (Exception e) {\n             LOG.error(\"Unexpected error while importing SAML 2.0 IdP metadata\", e);\n         } finally {\n@@ -148,7 +158,7 @@ public static void importFromIdPMetadata() throws Exception {\n                     type(clientFactory.getContentType().getMediaType());\n         }\n \n-        assertEquals(3, saml2IdPService.list().size());\n+        assertEquals(4, saml2IdPService.list().size());\n     }\n \n     @AfterClass\n@@ -320,7 +330,8 @@ public void unsignedAssertionInLoginResponse() throws Exception {\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n         org.opensaml.saml.saml2.core.Response samlResponse =\n-                createResponse(inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES);\n+                createResponse(inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES,\n+                               \"urn:org:apache:cxf:fediz:idp:realm-A\");\n \n         Document doc = DOMUtils.newDocument();\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n@@ -398,22 +409,80 @@ public void loginResponseWrappingAttack() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void validateIdpInitiatedLoginResponse() throws Exception {\n+        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+\n+        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n+\n+        // Create a SAML Response using WSS4J\n+        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setSpEntityID(\"http://recipient.apache.org/\");\n+        response.setUrlContext(\"saml2sp\");\n+\n+        org.opensaml.saml.saml2.core.Response samlResponse =\n+            createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-B\");\n+\n+        Document doc = DOMUtils.newDocument();\n+        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n+        String responseStr = DOM2Writer.nodeToString(responseElement);\n+\n+        // Validate the SAML Response\n+        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        response.setRelayState(\"idpInitiated\");\n+        SAML2LoginResponseTO loginResponse =\n+            saml2Service.validateLoginResponse(response);\n+        assertNotNull(loginResponse.getAccessToken());\n+        assertEquals(\"puccini\", loginResponse.getNameID());\n+    }\n+\n+    // Make sure that the IdP initiated case is only supported when \"supportUnsolicited\" is true for that IdP\n+    @Test\n+    public void validateIdpInitiatedLoginResponseFailure() throws Exception {\n+        Assume.assumeTrue(SAML2SPDetector.isSAML2SPAvailable());\n+\n+        SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n+\n+        // Create a SAML Response using WSS4J\n+        SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n+        response.setSpEntityID(\"http://recipient.apache.org/\");\n+        response.setUrlContext(\"saml2sp\");\n+\n+        org.opensaml.saml.saml2.core.Response samlResponse =\n+            createResponse(null, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+\n+        Document doc = DOMUtils.newDocument();\n+        Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n+        String responseStr = DOM2Writer.nodeToString(responseElement);\n+\n+        // Validate the SAML Response\n+        response.setSamlResponse(Base64.getEncoder().encodeToString(responseStr.getBytes()));\n+        response.setRelayState(\"idpInitiated\");\n+        try {\n+            saml2Service.validateLoginResponse(response);\n+            fail(\"Failure expected on an unsolicited login\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n     private org.opensaml.saml.saml2.core.Response createResponse(final String inResponseTo) throws Exception {\n-        return createResponse(inResponseTo, true, SAML2Constants.CONF_BEARER);\n+        return createResponse(inResponseTo, true, SAML2Constants.CONF_BEARER, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n     }\n \n     private org.opensaml.saml.saml2.core.Response createResponse(\n-            final String inResponseTo, final boolean signAssertion, final String subjectConfMethod) throws Exception {\n+            final String inResponseTo, final boolean signAssertion, final String subjectConfMethod,\n+            final String issuer) throws Exception {\n \n         Status status = SAML2PResponseComponentBuilder.createStatus(\n                 SAMLProtocolResponseValidator.SAML2_STATUSCODE_SUCCESS, null);\n         org.opensaml.saml.saml2.core.Response response = SAML2PResponseComponentBuilder.createSAMLResponse(\n-                inResponseTo, \"urn:org:apache:cxf:fediz:idp:realm-A\", status);\n+                inResponseTo, issuer, status);\n         response.setDestination(\"http://recipient.apache.org\");\n \n         // Create an AuthenticationAssertion\n         SAML2CallbackHandler callbackHandler = new SAML2CallbackHandler();\n-        callbackHandler.setIssuer(\"urn:org:apache:cxf:fediz:idp:realm-A\");\n+        callbackHandler.setIssuer(issuer);\n         callbackHandler.setSubjectName(\"puccini\");\n         callbackHandler.setSubjectConfirmationMethod(subjectConfMethod);\n \n@@ -511,12 +580,16 @@ private static void updateMetadataWithCert() throws Exception {\n         if (basedir == null) {\n             basedir = new File(\".\").getCanonicalPath();\n         }\n-        Path path = FileSystems.getDefault().getPath(basedir, \"/src/test/resources/fediz.xml\");\n-        String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n-        content = content.replaceAll(\"cert-placeholder\", certEncoded);\n \n-        Path path2 = FileSystems.getDefault().getPath(basedir, \"/target/test-classes/fediz.xml\");\n-        Files.write(path2, content.getBytes());\n+        List<String> fileNames = Arrays.asList(\"fediz.xml\", \"fediz_realmb.xml\");\n+        for (String fileName : fileNames) {\n+            Path path = FileSystems.getDefault().getPath(basedir, \"/src/test/resources/\" + fileName);\n+            String content = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n+            content = content.replaceAll(\"cert-placeholder\", certEncoded);\n+\n+            Path path2 = FileSystems.getDefault().getPath(basedir, \"/target/test-classes/\" + fileName);\n+            Files.write(path2, content.getBytes());\n+        }\n     }\n \n }"},{"sha":"a9a1cec625528fe72057d131e031371e52641789","filename":"fit/core-reference/src/test/resources/fediz_realmb.xml","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4261ab150920d84a7f4095ee22331f235ef6813/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz_realmb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4261ab150920d84a7f4095ee22331f235ef6813/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz_realmb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Ffediz_realmb.xml?ref=c4261ab150920d84a7f4095ee22331f235ef6813","patch":"@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<EntityDescriptor entityID=\"urn:org:apache:cxf:fediz:idp:realm-B\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n+    <IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n+        <KeyDescriptor use=\"signing\">\n+            <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n+                <ds:X509Data>\n+                    <ds:X509Certificate>\n+cert-placeholder\n+                   </ds:X509Certificate>\n+                </ds:X509Data>\n+            </ds:KeyInfo>\n+        </KeyDescriptor>\n+        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n+        <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://localhost:8443/fediz-idp/saml/up\"/>\n+    </IDPSSODescriptor>\n+</EntityDescriptor>"}]}