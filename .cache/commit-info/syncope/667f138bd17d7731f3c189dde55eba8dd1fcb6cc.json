{"sha":"667f138bd17d7731f3c189dde55eba8dd1fcb6cc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2N2YxMzhiZDE3ZDc3MzFmM2MxODlkZGU1NWViYThkZDFmY2I2Y2M=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-30T12:54:04Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-30T12:54:04Z"},"message":"Update with propagation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246418 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83abc68c6d3c92e7373b643b383abf79188ecde3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/83abc68c6d3c92e7373b643b383abf79188ecde3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/667f138bd17d7731f3c189dde55eba8dd1fcb6cc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/667f138bd17d7731f3c189dde55eba8dd1fcb6cc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/667f138bd17d7731f3c189dde55eba8dd1fcb6cc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/comments","author":null,"committer":null,"parents":[{"sha":"eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62"}],"stats":{"total":691,"additions":495,"deletions":196},"files":[{"sha":"fe3ef63909bede6b2cc1dfcb67903228f9a35bb9","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedSchema.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedSchema.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -56,4 +56,12 @@ public void setExpression(String expression) {\n     public abstract Set<? extends AbstractSchema> getSchemas();\n \n     public abstract void setSchemas(Set<? extends AbstractSchema> schemas);\n+\n+    public abstract boolean addMapping(SchemaMapping mapping);\n+\n+    public abstract boolean removeMapping(SchemaMapping mapping);\n+\n+    public abstract Set<SchemaMapping> getMappings();\n+\n+    public abstract void setMappings(Set<SchemaMapping> mappings);\n }"},{"sha":"f15f4e4e8d3b69ba975b5c042bb54ecd809f4080","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipDerivedSchema.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Entity;\n@@ -23,6 +24,7 @@\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class MembershipDerivedSchema extends AbstractDerivedSchema {\n@@ -82,4 +84,41 @@ public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n \n         this.derivedAttributes = (Set<MembershipDerivedAttribute>) derivedAttributes;\n     }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mapping\n+     * @return\n+     */\n+    @Override\n+    public boolean addMapping(SchemaMapping mapping) {\n+        return true;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mapping\n+     * @return\n+     */\n+    @Override\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        return true;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @return\n+     */\n+    @Override\n+    public Set<SchemaMapping> getMappings() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mappings\n+     */\n+    @Override\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+    }\n }"},{"sha":"7b47feecf67fbe5793b91afa15b8029484924772","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleDerivedSchema.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Entity;\n@@ -23,6 +24,7 @@\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class RoleDerivedSchema extends AbstractDerivedSchema {\n@@ -82,4 +84,41 @@ public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n \n         this.derivedAttributes = (Set<RoleDerivedAttribute>) derivedAttributes;\n     }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mapping\n+     * @return\n+     */\n+    @Override\n+    public boolean addMapping(SchemaMapping mapping) {\n+        return true;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mapping\n+     * @return\n+     */\n+    @Override\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        return true;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @return\n+     */\n+    @Override\n+    public Set<SchemaMapping> getMappings() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mappings\n+     */\n+    @Override\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+    }\n }"},{"sha":"775f827b888b9ba0c255d110ce537bf454a214db","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedSchema.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.Entity;\n@@ -23,6 +24,7 @@\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n \n @Entity\n public class UserDerivedSchema extends AbstractDerivedSchema {\n@@ -82,4 +84,41 @@ public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n \n         this.derivedAttributes = (Set<UserDerivedAttribute>) derivedAttributes;\n     }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mapping\n+     * @return\n+     */\n+    @Override\n+    public boolean addMapping(SchemaMapping mapping) {\n+        return true;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mapping\n+     * @return\n+     */\n+    @Override\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        return true;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @return\n+     */\n+    @Override\n+    public Set<SchemaMapping> getMappings() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    /**\n+     * TODO: https://code.google.com/p/syncope/issues/detail?id=27\n+     * @param mappings\n+     */\n+    @Override\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+    }\n }"},{"sha":"b7890d307c15a4e6b1f0afc6894414022badd17b","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":99,"deletions":121,"changes":220,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -32,10 +32,11 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.types.SchemaType;\n \n@@ -45,42 +46,42 @@ public class PropagationManager {\n             LoggerFactory.getLogger(PropagationManager.class);\n \n     /**\n-     * Performs provisioning on each resource associated to the user.\n+     * Create the user on every associated resource.\n      * Exceptions will be ignored.\n      * @param user to be created.\n      * @return a set of provisioned resources.\n      * @throws PropagationException\n      */\n-    public Set<String> provision(SyncopeUser user) throws PropagationException {\n-        return provision(user, null, false);\n+    public Set<String> create(SyncopeUser user) throws PropagationException {\n+        return create(user, null);\n     }\n \n     /**\n-     * Performs provisioning on each resource associated to the user.\n+     * Create the user on every associated resource.\n      * It is possible to ask for a synchronous provisioning for some resources\n      * specifying a set of resource names.\n-     * Exceptions won't be ignored and the process will be stoppend if the\n-     * provisioning fails onto a synchronous resource.\n+     * Exceptions won't be ignored and the process will be stopped if the\n+     * creation fails onto a synchronous resource.\n      * @param user to be created.\n-     * @param synchronous to ask for a synchronous or asynchronous provisioning.\n+     * @param syncResourceNames to ask for a synchronous or asynchronous provisioning.\n      * @return a set of provisioned resources.\n      * @throws PropagationException\n      */\n-    public Set<String> provision(SyncopeUser user, Set<String> synchronous)\n+    public Set<String> create(SyncopeUser user, Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        return provision(user, synchronous, false);\n-    }\n+        Set<Resource> resources = new HashSet<Resource>();\n+        for (Resource resource : user.getResources()) {\n+            resources.add(resource);\n+        }\n+        for (Membership membership : user.getMemberships()) {\n+            resources.addAll(membership.getResources());\n+        }\n \n-    /**\n-     * Performs update on each resource associated to the user.\n-     * Exceptions will be ignored.\n-     * @param user to be updated.\n-     * @return a set of updated resources.\n-     * @throws PropagationException\n-     */\n-    public Set<String> update(SyncopeUser user) throws PropagationException {\n-        return provision(user, null, true);\n+        ResourceOperations resourceOperations = new ResourceOperations();\n+        resourceOperations.set(Type.CREATE, resources);\n+\n+        return provision(user, resourceOperations, syncResourceNames);\n     }\n \n     /**\n@@ -90,109 +91,98 @@ public Set<String> update(SyncopeUser user) throws PropagationException {\n      * Exceptions won't be ignored and the process will be stoppend if the\n      * provisioning fails onto a synchronous resource.\n      * @param user to be updated.\n-     * @param synchronous to ask for a synchronous or asynchronous update.\n+     * @param affectedResources resources affected by this update\n+     * @param syncResourceNames to ask for a synchronous or asynchronous update.\n      * @return a set of updated resources.\n      * @throws PropagationException\n      */\n-    public Set<String> update(SyncopeUser user, Set<String> synchronous)\n+    public Set<String> update(SyncopeUser user,\n+            ResourceOperations resourceOperations,\n+            Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        return provision(user, synchronous, true);\n+        return provision(user, resourceOperations, syncResourceNames);\n     }\n \n     /**\n      * Implementation of the provisioning feature.\n      * @param user\n-     * @param synchronous\n+     * @param syncResourceNames\n      * @param merge\n-     * @return\n+     * @return provisioned resources\n      * @throws PropagationException\n      */\n-    private Set<String> provision(\n-            SyncopeUser user, Set<String> synchronous, boolean merge)\n+    private Set<String> provision(SyncopeUser user,\n+            ResourceOperations resourceOperations,\n+            Set<String> syncResourceNames)\n             throws PropagationException {\n \n-        if (synchronous == null) {\n-            synchronous = Collections.EMPTY_SET;\n-        }\n-\n         // set of provisioned resources\n         Set<String> provisioned = new HashSet<String>();\n \n-        // All of the resource to be provisioned\n-        Set<Resource> resources = new HashSet<Resource>();\n-        resources.addAll(user.getResources());\n-\n-        Set<SyncopeRole> roles = user.getRoles();\n-\n-        for (SyncopeRole role : roles) {\n-            resources.addAll(role.getResources());\n-        }\n+        // Avoid duplicates - see javadoc\n+        resourceOperations.purge();\n \n         // Resource to be provisioned synchronously\n-        Set<Resource> syncResources = new HashSet<Resource>();\n+        ResourceOperations syncOperations = new ResourceOperations();\n \n         // Resource to be provisioned asynchronously\n-        Set<Resource> asyncResources = new HashSet<Resource>();\n+        ResourceOperations asyncOperations = new ResourceOperations();\n \n-        for (Resource resource : resources) {\n-            if (synchronous.contains(resource.getName())) {\n-                syncResources.add(resource);\n-            } else {\n-                asyncResources.add(resource);\n+        if (syncResourceNames == null) {\n+            syncResourceNames = Collections.EMPTY_SET;\n+        }\n+        for (Type type : ResourceOperations.Type.values()) {\n+            for (Resource resource : resourceOperations.get(type)) {\n+                if (syncResourceNames.contains(resource.getName())) {\n+                    syncOperations.add(type, resource);\n+                } else {\n+                    asyncOperations.add(type, resource);\n+                }\n             }\n         }\n \n         // synchronous propagation ...\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"Synchronous provisioning of \" + resources + \" with user \" + user.getId());\n+            log.debug(\"Synchronous provisioning of \" + syncOperations\n+                    + \" with user \" + user);\n         }\n-\n-        for (Resource resource : syncResources) {\n-            try {\n-\n-                propagate(user, resource, merge);\n-                provisioned.add(resource.getName());\n-\n-            } catch (Throwable t) {\n-\n-                if (log.isErrorEnabled()) {\n-                    log.error(\n-                            \"Exception during provision on resource \" + resource.getName(), t);\n+        for (Type type : ResourceOperations.Type.values()) {\n+            for (Resource resource : syncOperations.get(type)) {\n+                try {\n+                    propagate(user, resource, type);\n+                    provisioned.add(resource.getName());\n+                } catch (Throwable t) {\n+                    log.error(\"Exception during provision on resource \"\n+                            + resource.getName(), t);\n+\n+                    throw new PropagationException(\n+                            \"Exception during provision on resource \"\n+                            + resource.getName(), resource.getName(), t);\n                 }\n-\n-                throw new PropagationException(\n-                        \"Exception during provision on resource \" + resource.getName(), resource.getName(), t);\n             }\n         }\n \n         // asynchronous propagation ...\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"Asynchronous provisioning of \" + resources + \" with user \" + user.getId());\n+            log.debug(\"Asynchronous provisioning of \"\n+                    + asyncOperations + \" with user \" + user);\n         }\n-\n-        for (Resource resource : asyncResources) {\n-            try {\n-\n-                propagate(user, resource, merge);\n-                provisioned.add(resource.getName());\n-\n-            } catch (Throwable t) {\n-\n-                if (log.isErrorEnabled()) {\n-                    log.error(\n-                            \"Exception during provision on resource \" + resource.getName(), t);\n+        for (Type type : ResourceOperations.Type.values()) {\n+            for (Resource resource : asyncOperations.get(type)) {\n+                try {\n+                    propagate(user, resource, type);\n+                    provisioned.add(resource.getName());\n+                } catch (Throwable t) {\n+                    log.error(\"Exception during provision on resource \"\n+                            + resource.getName(), t);\n                 }\n             }\n         }\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"Provisioned \" + provisioned + \" with user \" + user.getId());\n+            log.debug(\"Provisioned \" + provisioned\n+                    + \" with user \" + user.getId());\n         }\n \n         return provisioned;\n@@ -202,30 +192,22 @@ private Set<String> provision(\n      * Propagate provision/update the resource indicated.\n      * @param user to be created.\n      * @param resource to be provisioned.\n-     * @param merge specifies if it must be performed an update (true) or a\n-     * creation (false).\n+     * @param type to be performed on the specified resource\n      * @throws NoSuchBeanDefinitionException if the connector bean doesn't\n      * exist.\n      * @throws IllegalStateException if propagation fails.\n      */\n-    private void propagate(SyncopeUser user, Resource resource, boolean merge)\n+    private void propagate(SyncopeUser user, Resource resource, Type type)\n             throws NoSuchBeanDefinitionException, IllegalStateException {\n \n-        ConnectorInstance connectorInstance =\n-                resource.getConnector();\n+        ConnectorInstance connectorInstance = resource.getConnector();\n \n         ConnectorFacade connector =\n                 getConnectorFacade(connectorInstance.getId().toString());\n \n         if (connector == null) {\n-            if (log.isErrorEnabled()) {\n-\n-                log.error(\n-                        \"Connector instance bean \"\n-                        + connectorInstance.getId().toString()\n-                        + \" not found\");\n-\n-            }\n+            log.error(\"Connector instance bean \"\n+                    + connectorInstance.getId().toString() + \" not found\");\n \n             throw new NoSuchBeanDefinitionException(\n                     \"Connector instance bean not found\");\n@@ -256,11 +238,10 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n         // syncope user attribute\n         UserAttribute userAttribute = null;\n         // syncope user attribute schema type\n-        SchemaType type = null;\n+        SchemaType schemaType = null;\n         // syncope user attribute values\n         List<UserAttributeValue> values = null;\n \n-\n         for (SchemaMapping mapping : mappings) {\n \n             field = mapping.getField();\n@@ -272,21 +253,20 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n             values = null;\n \n             try {\n-                type = mapping.getUserSchema().getType();\n-                castToBeApplied = Class.forName(type.getClassName());\n+                schemaType = mapping.getUserSchema().getType();\n+                castToBeApplied = Class.forName(schemaType.getClassName());\n             } catch (ClassNotFoundException e) {\n                 castToBeApplied = String.class;\n             }\n \n             if (log.isDebugEnabled()) {\n-                log.debug(\n-                        \"\\nDefine mapping for: \"\n+                log.debug(\"\\nDefine mapping for: \"\n                         + \"\\n* Field \" + field\n                         + \"\\n* is accountId \" + mapping.isAccountid()\n                         + \"\\n* is password \" + mapping.isPassword()\n                         + \"\\n* is nullable \" + mapping.isNullable()\n                         + \"\\n* Schema \" + schema\n-                        + \"\\n* Type \" + type.getClassName());\n+                        + \"\\n* Type \" + schemaType.getClassName());\n             }\n \n             objValues = new HashSet();\n@@ -324,28 +304,26 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n         }\n \n         Uid userUid = null;\n-\n-        if (merge) {\n-            userUid = connector.update(\n-                    ObjectClass.ACCOUNT, new Uid(accountId), attrs, null);\n-        } else {\n-            userUid = connector.create(\n-                    ObjectClass.ACCOUNT, attrs, null);\n+        switch (type) {\n+            case CREATE:\n+                userUid = connector.create(ObjectClass.ACCOUNT, attrs, null);\n+                break;\n+\n+            case UPDATE:\n+                userUid = connector.update(ObjectClass.ACCOUNT,\n+                        new Uid(accountId), attrs, null);\n+                break;\n+\n+            case DELETE:\n+                connector.delete(ObjectClass.ACCOUNT, new Uid(accountId), null);\n+                break;\n         }\n \n-        if (userUid == null) {\n-            if (log.isErrorEnabled()) {\n-\n-                log.error(\n-                        \"Error creating user on resource \" + resource.getName());\n-\n-            }\n-\n-            throw new IllegalStateException(\"Error creating user.\");\n-        }\n+        if (userUid == null && type != Type.DELETE) {\n+            log.error(\"Error creating / updating user onto resource \"\n+                    + resource);\n \n-        if (log.isInfoEnabled()) {\n-            log.info(\"Created user \" + userUid.getUidValue());\n+            throw new IllegalStateException(\"Error creating user\");\n         }\n     }\n "},{"sha":"26799348bc48246f8cbafe65171660bca22de642","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ResourceOperations.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FResourceOperations.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -0,0 +1,126 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.propagation;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.syncope.core.persistence.beans.Resource;\n+\n+public class ResourceOperations {\n+\n+    public enum Type {\n+\n+        CREATE, UPDATE, DELETE\n+    }\n+    private Set<Resource> toBeCreated;\n+    private Set<Resource> toBeUpdated;\n+    private Set<Resource> toBeDeleted;\n+\n+    public ResourceOperations() {\n+        toBeCreated = new HashSet<Resource>();\n+        toBeUpdated = new HashSet<Resource>();\n+        toBeDeleted = new HashSet<Resource>();\n+    }\n+\n+    /**\n+     * Avoid potential conflicts by not doing create or update on any\n+     * resource for which a delete is requested, and by not doing any create\n+     * on any resource for which an update is requested.\n+     */\n+    public void purge() {\n+        for (Resource resource : toBeDeleted) {\n+            toBeCreated.remove(resource);\n+            toBeUpdated.remove(resource);\n+        }\n+        for (Resource resource : toBeUpdated) {\n+            toBeCreated.remove(resource);\n+        }\n+    }\n+\n+    public boolean add(Type type, Resource resource) {\n+        boolean result = false;\n+\n+        switch (type) {\n+            case CREATE:\n+                result = toBeCreated.add(resource);\n+            case UPDATE:\n+                result = toBeUpdated.add(resource);\n+            case DELETE:\n+                result = toBeDeleted.add(resource);\n+        }\n+\n+        return result;\n+    }\n+\n+    public boolean remove(Type type, Resource resource) {\n+        boolean result = false;\n+\n+        switch (type) {\n+            case CREATE:\n+                result = toBeCreated.remove(resource);\n+                break;\n+            case UPDATE:\n+                result = toBeUpdated.remove(resource);\n+                break;\n+            case DELETE:\n+                result = toBeDeleted.remove(resource);\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public Set<Resource> get(Type type) {\n+        Set<Resource> result = Collections.EMPTY_SET;\n+\n+        switch (type) {\n+            case CREATE:\n+                result = toBeCreated;\n+                break;\n+            case UPDATE:\n+                result = toBeUpdated;\n+                break;\n+            case DELETE:\n+                result = toBeDeleted;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public void set(Type type, Set<Resource> resources) {\n+        switch (type) {\n+            case CREATE:\n+                toBeCreated.clear();\n+                toBeCreated.addAll(resources);\n+                break;\n+            case UPDATE:\n+                toBeUpdated.clear();\n+                toBeUpdated.addAll(resources);\n+                break;\n+            case DELETE:\n+                toBeDeleted.clear();\n+                toBeDeleted.addAll(resources);\n+                break;\n+        }\n+    }\n+\n+    public void merge(ResourceOperations resourceOperations) {\n+        toBeCreated.addAll(resourceOperations.get(Type.CREATE));\n+        toBeUpdated.addAll(resourceOperations.get(Type.UPDATE));\n+        toBeDeleted.addAll(resourceOperations.get(Type.DELETE));\n+    }\n+}"},{"sha":"8308d03a86cb5ecf6bcdcbf9dfd4075ffab41f3a","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -31,6 +31,7 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.rest.data.RoleDataBinder;\n \n @Controller\n@@ -168,7 +169,8 @@ public RoleTO update(HttpServletResponse response,\n             throw new NotFoundException(String.valueOf(roleMod.getId()));\n         }\n \n-        syncopeRole = roleDataBinder.updateSyncopeRole(syncopeRole, roleMod);\n+       ResourceOperations resourceOperations =\n+                roleDataBinder.updateSyncopeRole(syncopeRole, roleMod);\n         syncopeRole = syncopeRoleDAO.save(syncopeRole);\n \n         return roleDataBinder.getRoleTO(syncopeRole);"},{"sha":"31a33b6da2d3a036114558d0e932616870d70db9","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":59,"deletions":28,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -52,7 +52,7 @@\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.propagation.PropagationManager;\n-import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.rest.data.InvalidSearchConditionException;\n import org.syncope.core.workflow.Constants;\n import org.syncope.core.workflow.SpringHibernateJPAWorkflowStore;\n@@ -66,8 +66,6 @@ public class UserController extends AbstractController {\n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n     @Autowired\n-    private SyncopeConfigurationDAO syncopeConfigurationDAO;\n-    @Autowired\n     private UserDataBinder userDataBinder;\n     @Autowired\n     private Workflow userWorkflow;\n@@ -125,6 +123,32 @@ public UserTO activate(HttpServletResponse response,\n         return executeAction(Constants.ACTION_ACTIVATE, userTO);\n     }\n \n+    private Set<String> getSyncResourceNames(SyncopeUser syncopeUser,\n+            Set<Long> syncRoles, Set<String> syncResources) {\n+\n+        if ((syncRoles == null || syncRoles.isEmpty()\n+                && (syncResources == null || syncResources.isEmpty()))) {\n+            return Collections.EMPTY_SET;\n+        }\n+\n+        Set<String> syncResourceNames = new HashSet<String>();\n+\n+        for (Resource resource : syncopeUser.getResources()) {\n+            if (syncResources.contains(resource.getName())) {\n+                syncResourceNames.add(resource.getName());\n+            }\n+        }\n+        for (SyncopeRole role : syncopeUser.getRoles()) {\n+            if (syncRoles.contains(role.getId())) {\n+                for (Resource resource : role.getResources()) {\n+                    syncResourceNames.add(resource.getName());\n+                }\n+            }\n+        }\n+\n+        return syncResourceNames;\n+    }\n+\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public UserTO create(HttpServletRequest request,\n@@ -137,13 +161,6 @@ public UserTO create(HttpServletRequest request,\n             throws SyncopeClientCompositeErrorException,\n             WorkflowException, PropagationException, NotFoundException {\n \n-        if (syncRoles == null) {\n-            syncRoles = Collections.EMPTY_SET;\n-        }\n-        if (syncResources == null) {\n-            syncResources = Collections.EMPTY_SET;\n-        }\n-\n         if (log.isDebugEnabled()) {\n             log.debug(\"create called with parameters \" + userTO\n                     + \"\\n\" + syncRoles + \"\\n\" + syncResources);\n@@ -167,7 +184,8 @@ public UserTO create(HttpServletRequest request,\n         if (wie != null) {\n             switch (wie.getExceptionOperation()) {\n                 case OVERWRITE:\n-                    return update(response, new UserMod());\n+                    return update(response, new UserMod(),\n+                            syncRoles, syncResources);\n                 case REJECT:\n                     SyncopeClientCompositeErrorException compositeException =\n                             new SyncopeClientCompositeErrorException(\n@@ -189,24 +207,17 @@ public UserTO create(HttpServletRequest request,\n         syncopeUser = syncopeUserDAO.save(syncopeUser);\n \n         // Now that user is created locally, let's propagate\n-        Set<String> synchronous = new HashSet<String>();\n-        for (Resource resource : syncopeUser.getResources()) {\n-            if (syncResources.contains(resource.getName())) {\n-                synchronous.add(resource.getName());\n-            }\n-        }\n-        for (SyncopeRole role : syncopeUser.getRoles()) {\n-            if (syncRoles.contains(role.getId())) {\n-                for (Resource resource : role.getResources()) {\n-                    synchronous.add(resource.getName());\n-                }\n-            }\n+        Set<String> syncResourceNames =\n+                getSyncResourceNames(syncopeUser, syncRoles, syncResources);\n+        if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n+            log.debug(\"About to propagate synchronously onto resources \"\n+                    + syncResourceNames);\n         }\n+        Set<String> propagatedResources =\n+                propagationManager.create(syncopeUser, syncResourceNames);\n         if (log.isDebugEnabled()) {\n-            log.debug(\"About to propagate synchronously on the following \"\n-                    + \"resources \" + synchronous);\n+            log.debug(\"Propagated onto resources \" + propagatedResources);\n         }\n-        propagationManager.provision(syncopeUser, synchronous);\n \n         // User is created locally and propagated, let's advance on the workflow\n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -350,7 +361,12 @@ public ModelAndView getStatus(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public UserTO update(HttpServletResponse response,\n-            @RequestBody UserMod userMod) throws NotFoundException {\n+            @RequestBody UserMod userMod,\n+            @RequestParam(value = \"syncRoles\",\n+            required = false) Set<Long> syncRoles,\n+            @RequestParam(value = \"syncResources\",\n+            required = false) Set<String> syncResources)\n+            throws NotFoundException, PropagationException {\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"update called with parameter \" + userMod);\n@@ -364,9 +380,24 @@ public UserTO update(HttpServletResponse response,\n             throw new NotFoundException(String.valueOf(userMod.getId()));\n         }\n \n-        syncopeUser = userDataBinder.updateSyncopeUser(syncopeUser, userMod);\n+       ResourceOperations resourceOperations =\n+                userDataBinder.updateSyncopeUser(syncopeUser, userMod);\n         syncopeUser = syncopeUserDAO.save(syncopeUser);\n \n+        // Now that user is update locally, let's propagate\n+        Set<String> syncResourceNames =\n+                getSyncResourceNames(syncopeUser, syncRoles, syncResources);\n+        if (log.isDebugEnabled() && !syncResourceNames.isEmpty()) {\n+            log.debug(\"About to propagate synchronously onto resources \"\n+                    + syncResourceNames);\n+        }\n+        Set<String> propagatedResources =\n+                propagationManager.update(syncopeUser,\n+                resourceOperations, syncResourceNames);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Propagated onto resources \" + propagatedResources);\n+        }\n+\n         // TODO: workflow\n         return userDataBinder.getUserTO(syncopeUser);\n     }"},{"sha":"41e9bbda81b77f7900e04090ba889023d5ac0cf8","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":45,"deletions":11,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -34,6 +34,7 @@\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeDAO;\n@@ -45,6 +46,8 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -182,13 +185,15 @@ private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n         return requiredValuesMissing;\n     }\n \n-    protected <T extends AbstractAttributable> T fill(\n-            T attributable,\n+    protected ResourceOperations fill(\n+            AbstractAttributable attributable,\n             AbstractAttributableMod attributableMod,\n             AttributableUtil attributableUtil,\n             SyncopeClientCompositeErrorException compositeErrorException)\n             throws SyncopeClientCompositeErrorException {\n \n+        ResourceOperations resourceOperations = new ResourceOperations();\n+\n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n         SyncopeClientException invalidUniques = new SyncopeClientException(\n@@ -206,6 +211,13 @@ protected <T extends AbstractAttributable> T fill(\n                     attributableUtil.getSchemaClass());\n \n             if (schema != null) {\n+                for (SchemaMapping mapping : schema.getMappings()) {\n+                    if (mapping.getResource() != null) {\n+                        resourceOperations.add(Type.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n                 attribute = attributable.getAttribute(schema.getName());\n                 if (attribute == null) {\n                     attribute = attributableUtil.newAttribute();\n@@ -253,6 +265,13 @@ protected <T extends AbstractAttributable> T fill(\n                     attributableUtil.getSchemaClass());\n \n             if (schema != null) {\n+                for (SchemaMapping mapping : schema.getMappings()) {\n+                    if (mapping.getResource() != null) {\n+                        resourceOperations.add(Type.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n                 attribute = attributable.getAttribute(schema.getName());\n                 if (attribute == null) {\n                     if (log.isDebugEnabled()) {\n@@ -287,6 +306,13 @@ protected <T extends AbstractAttributable> T fill(\n             derivedSchema = getDerivedSchema(derivedAttributeToBeAdded,\n                     attributableUtil.getDerivedSchemaClass());\n             if (derivedSchema != null) {\n+                for (SchemaMapping mapping : derivedSchema.getMappings()) {\n+                    if (mapping.getResource() != null) {\n+                        resourceOperations.add(Type.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n                 derivedAttribute = attributableUtil.newDerivedAttribute();\n                 derivedAttribute.setDerivedSchema(derivedSchema);\n                 derivedAttribute.setOwner(attributable);\n@@ -301,10 +327,16 @@ protected <T extends AbstractAttributable> T fill(\n             derivedSchema = getDerivedSchema(derivedAttributeToBeRemoved,\n                     attributableUtil.getDerivedSchemaClass());\n             if (derivedSchema != null) {\n+                for (SchemaMapping mapping : derivedSchema.getMappings()) {\n+                    if (mapping.getResource() != null) {\n+                        resourceOperations.add(Type.UPDATE,\n+                                mapping.getResource());\n+                    }\n+                }\n+\n                 derivedAttribute = attributable.getDerivedAttribute(\n                         derivedSchema.getName());\n-\n-                if (attribute == null) {\n+                if (derivedAttribute == null) {\n                     if (log.isDebugEnabled()) {\n                         log.debug(\"No derived attribute found for schema \"\n                                 + derivedSchema.getName());\n@@ -323,6 +355,8 @@ protected <T extends AbstractAttributable> T fill(\n             resource = getResource(resourceToBeRemoved);\n \n             if (resource != null) {\n+                resourceOperations.add(Type.DELETE, resource);\n+\n                 attributable.removeResource(resource);\n \n                 if (attributableUtil == attributableUtil.USER) {\n@@ -334,14 +368,15 @@ protected <T extends AbstractAttributable> T fill(\n             }\n         }\n \n-\n         // 6. resources to be added\n         for (String resourceToBeAdded :\n                 attributableMod.getResourcesToBeAdded()) {\n \n             resource = getResource(resourceToBeAdded);\n \n             if (resource != null) {\n+                resourceOperations.add(Type.CREATE, resource);\n+\n                 attributable.addResource(resource);\n \n                 if (attributableUtil == attributableUtil.USER) {\n@@ -358,11 +393,10 @@ protected <T extends AbstractAttributable> T fill(\n             throw compositeErrorException;\n         }\n \n-        return attributable;\n+        return resourceOperations;\n     }\n \n-    protected <T extends AbstractAttributable> T fill(\n-            T attributable,\n+    protected AbstractAttributable fill(AbstractAttributable attributable,\n             AbstractAttributableTO attributableTO,\n             AttributableUtil attributableUtil,\n             SyncopeClientCompositeErrorException compositeErrorException)\n@@ -384,14 +418,14 @@ protected <T extends AbstractAttributable> T fill(\n             if (schema != null) {\n                 attribute = attributableUtil.newAttribute();\n                 attribute.setSchema(schema);\n-                attribute.setOwner(attributable);\n \n                 fillAttribute(attributeTO.getValues(),\n                         attributableUtil, schema, attribute,\n                         attributeValue, invalidValues, invalidUniques);\n \n                 if (!attribute.getAttributeValues().isEmpty()) {\n                     attributable.addAttribute(attribute);\n+                    attribute.setOwner(attributable);\n                 }\n             }\n         }\n@@ -457,8 +491,8 @@ protected <T extends AbstractAttributable> T fill(\n         return attributable;\n     }\n \n-    protected <T extends AbstractAttributableTO> T fillTO(\n-            T abstractAttributableTO,\n+    protected AbstractAttributableTO fillTO(\n+            AbstractAttributableTO abstractAttributableTO,\n             Collection<? extends AbstractAttribute> attributes,\n             Collection<? extends AbstractDerivedAttribute> derivedAttributes,\n             Collection<Resource> resources) {"},{"sha":"2902672ecd3d417985f42fb4c98481755874312e","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -29,6 +29,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -95,22 +96,22 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n         }\n \n         // attributes, derived attributes and resources\n-        syncopeRole = fill(syncopeRole, roleTO, AttributableUtil.ROLE, scce);\n+        syncopeRole = (SyncopeRole) fill(syncopeRole, roleTO,\n+                AttributableUtil.ROLE, scce);\n \n         return syncopeRole;\n     }\n \n-    public SyncopeRole updateSyncopeRole(SyncopeRole syncopeRole,\n-            RoleMod roleMod)\n+    public ResourceOperations updateSyncopeRole(\n+            SyncopeRole syncopeRole, RoleMod roleMod)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n         // name\n-        SyncopeClientException invalidRoles =\n-                new SyncopeClientException(\n+        SyncopeClientException invalidRoles = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidRoles);\n         if (roleMod.getName() != null) {\n             SyncopeRole otherRole = syncopeRoleDAO.find(\n@@ -140,9 +141,7 @@ public SyncopeRole updateSyncopeRole(SyncopeRole syncopeRole,\n         }\n \n         // attributes, derived attributes and resources\n-        syncopeRole = fill(syncopeRole, roleMod, AttributableUtil.ROLE, scce);\n-\n-        return syncopeRole;\n+        return fill(syncopeRole, roleMod, AttributableUtil.ROLE, scce);\n     }\n \n     public RoleTO getRoleTO(SyncopeRole role) {\n@@ -155,11 +154,11 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n-        roleTO = fillTO(roleTO, role.getAttributes(),\n+        roleTO = (RoleTO) fillTO(roleTO, role.getAttributes(),\n                 role.getDerivedAttributes(), role.getResources());\n \n         if (role.isInheritAttributes() || role.isInheritDerivedAttributes()) {\n-            roleTO = fillTO(roleTO,\n+            roleTO = (RoleTO) fillTO(roleTO,\n                     role.isInheritAttributes()\n                     ? syncopeRoleDAO.findInheritedAttributes(role)\n                     : Collections.EMPTY_SET,"},{"sha":"4f0767b38bb1db07562c2a124d5d714d54e2ba8b","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -35,6 +35,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -90,7 +91,8 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n         }\n \n         // attributes, derived attributes and resources\n-        syncopeUser = fill(syncopeUser, userTO, AttributableUtil.USER, scce);\n+        syncopeUser = (SyncopeUser) fill(\n+                syncopeUser, userTO, AttributableUtil.USER, scce);\n \n         // memberships\n         SyncopeRole role = null;\n@@ -107,7 +109,7 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                 membership.setSyncopeRole(role);\n                 membership.setSyncopeUser(syncopeUser);\n \n-                membership = fill(membership, membershipTO,\n+                membership = (Membership) fill(membership, membershipTO,\n                         AttributableUtil.MEMBERSHIP, scce);\n \n                 syncopeUser.addMembership(membership);\n@@ -117,8 +119,8 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n         return syncopeUser;\n     }\n \n-    public SyncopeUser updateSyncopeUser(SyncopeUser syncopeUser,\n-            UserMod userMod)\n+    public ResourceOperations updateSyncopeUser(\n+            SyncopeUser syncopeUser, UserMod userMod)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n@@ -131,7 +133,8 @@ public SyncopeUser updateSyncopeUser(SyncopeUser syncopeUser,\n         }\n \n         // attributes, derived attributes and resources\n-        syncopeUser = fill(syncopeUser, userMod, AttributableUtil.USER, scce);\n+        ResourceOperations resourceOperations =\n+                fill(syncopeUser, userMod, AttributableUtil.USER, scce);\n \n         // memberships\n         SyncopeRole role = null;\n@@ -153,12 +156,12 @@ public SyncopeUser updateSyncopeUser(SyncopeUser syncopeUser,\n                     syncopeUser.addMembership(membership);\n                 }\n \n-                membership = fill(membership, membershipMod,\n-                        AttributableUtil.MEMBERSHIP, scce);\n+                resourceOperations.merge(fill(membership, membershipMod,\n+                        AttributableUtil.MEMBERSHIP, scce));\n             }\n         }\n \n-        return syncopeUser;\n+        return resourceOperations;\n     }\n \n     public UserTO getUserTO(SyncopeUser user) {\n@@ -169,14 +172,14 @@ public UserTO getUserTO(SyncopeUser user) {\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n         userTO.setPassword(user.getPassword());\n \n-        userTO = fillTO(userTO, user.getAttributes(),\n+        userTO = (UserTO) fillTO(userTO, user.getAttributes(),\n                 user.getDerivedAttributes(), user.getResources());\n \n         MembershipTO membershipTO = new MembershipTO();\n         for (Membership membership : user.getMemberships()) {\n             membershipTO.setRole(membership.getSyncopeRole().getId());\n \n-            membershipTO = fillTO(membershipTO,\n+            membershipTO = (MembershipTO) fillTO(membershipTO,\n                     membership.getAttributes(),\n                     membership.getDerivedAttributes(),\n                     membership.getResources());"},{"sha":"d87d5e46f1b07530fefcbc2b898ab8b31f099108","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/PropagationManagerTest.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/667f138bd17d7731f3c189dde55eba8dd1fcb6cc/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=667f138bd17d7731f3c189dde55eba8dd1fcb6cc","patch":"@@ -28,6 +28,8 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.propagation.ResourceOperations;\n+import org.syncope.core.persistence.propagation.ResourceOperations.Type;\n import org.syncope.core.test.persistence.AbstractTest;\n \n @Transactional\n@@ -41,7 +43,7 @@ public class PropagationManagerTest extends AbstractTest {\n     PropagationManager propagationManager;\n \n     @Test\n-    public final void provision() {\n+    public final void create() {\n         SyncopeUser user = syncopeUserDAO.find(1L);\n         assertNotNull(user);\n \n@@ -52,7 +54,7 @@ public final void provision() {\n \n         Set<String> provisioned = null;\n         try {\n-            provisioned = propagationManager.provision(user);\n+            provisioned = propagationManager.create(user);\n         } catch (PropagationException e) {\n             log.error(\"While provisioning\", e);\n         }\n@@ -70,9 +72,13 @@ public final void update() {\n \n         user.setResources(Collections.singleton(resource));\n \n+        ResourceOperations resourceOperations = new ResourceOperations();\n+        resourceOperations.add(Type.UPDATE, resource);\n+\n         Set<String> provisioned = null;\n         try {\n-            provisioned = propagationManager.update(user);\n+            provisioned = propagationManager.update(\n+                    user, resourceOperations, null);\n         } catch (PropagationException e) {\n             log.error(\"While updating\", e);\n         }\n@@ -81,7 +87,7 @@ public final void update() {\n     }\n \n     @Test\n-    public final void provisionWithException() {\n+    public final void createWithException() {\n         SyncopeUser user = syncopeUserDAO.find(3L);\n         assertNotNull(user);\n \n@@ -91,16 +97,12 @@ public final void provisionWithException() {\n         user.setResources(Collections.singleton(resource));\n \n         PropagationException re = null;\n-\n         try {\n-\n-            propagationManager.provision(\n+            propagationManager.create(\n                     user, Collections.singleton(\"ws-target-resource-2\"));\n-\n         } catch (PropagationException e) {\n             re = e;\n         }\n-\n         assertNotNull(re);\n     }\n \n@@ -114,17 +116,16 @@ public final void updateWithException() {\n \n         user.setResources(Collections.singleton(resource));\n \n-        PropagationException re = null;\n+        ResourceOperations resourceOperations = new ResourceOperations();\n+        resourceOperations.add(Type.UPDATE, resource);\n \n+        PropagationException re = null;\n         try {\n-\n-            propagationManager.update(\n-                    user, Collections.singleton(\"ws-target-resource-2\"));\n-\n+            propagationManager.update(user, resourceOperations,\n+                    Collections.singleton(\"ws-target-resource-2\"));\n         } catch (PropagationException e) {\n             re = e;\n         }\n-\n         assertNotNull(re);\n     }\n }"}]}