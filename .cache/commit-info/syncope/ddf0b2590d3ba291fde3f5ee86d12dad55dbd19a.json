{"sha":"ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRkZjBiMjU5MGQzYmEyOTFmZGUzZjVlZTg2ZDEyZGFkNTVkYmQxOWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-27T10:16:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-27T10:16:42Z"},"message":"[SYNCOPE-451] OpenJPA 2.3.0 is in, JBossPersistenceMappingFactory removed, all DBMSes and JEE containers succesfully tested\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1545984 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80aeaf451a260c3e4f404d5702a1023852ada30e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/80aeaf451a260c3e4f404d5702a1023852ada30e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd0fad81720089dcd0e2be9c8d7f5f8723c8e169","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd0fad81720089dcd0e2be9c8d7f5f8723c8e169","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bd0fad81720089dcd0e2be9c8d7f5f8723c8e169"}],"stats":{"total":323,"additions":2,"deletions":321},"files":[{"sha":"73900784f7511f83bf7495e69bae52059a1547a1","filename":"core/src/main/java/org/apache/syncope/core/persistence/openjpa/JBossPersistenceMappingFactory.java","status":"removed","additions":0,"deletions":319,"changes":319,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bd0fad81720089dcd0e2be9c8d7f5f8723c8e169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bd0fad81720089dcd0e2be9c8d7f5f8723c8e169/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java?ref=bd0fad81720089dcd0e2be9c8d7f5f8723c8e169","patch":"@@ -1,319 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.openjpa;\n-\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.lang.reflect.Method;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.zip.ZipFile;\n-import java.util.zip.ZipInputStream;\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n-import org.apache.openjpa.lib.meta.ClassArgParser;\n-import org.apache.openjpa.lib.meta.ClasspathMetaDataIterator;\n-import org.apache.openjpa.lib.meta.FileMetaDataIterator;\n-import org.apache.openjpa.lib.meta.JarFileURLMetaDataIterator;\n-import org.apache.openjpa.lib.meta.MetaDataIterator;\n-import org.apache.openjpa.lib.meta.ResourceMetaDataIterator;\n-import org.apache.openjpa.lib.meta.URLMetaDataIterator;\n-import org.apache.openjpa.lib.meta.ZipFileMetaDataIterator;\n-import org.apache.openjpa.lib.meta.ZipStreamMetaDataIterator;\n-import org.apache.openjpa.lib.util.J2DoPrivHelper;\n-import org.apache.openjpa.lib.util.Localizer;\n-import org.apache.openjpa.persistence.PersistenceMetaDataFactory;\n-import org.apache.openjpa.persistence.jdbc.PersistenceMappingFactory;\n-\n-/**\n- * Temporary class used while issue OPENJPA-2229 gets fixed and reaches mainstream distribution.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public class JBossPersistenceMappingFactory extends PersistenceMappingFactory {\n-\n-    private static final Localizer _loc = Localizer.forPackage(PersistenceMetaDataFactory.class);\n-\n-    /**\n-     * Scan for persistent type names using the given metadata iterator.\n-     */\n-    private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n-            boolean mapNames, Object debugContext)\n-            throws IOException {\n-        Map map;\n-        try {\n-            map = cparser.mapTypeNames(mitr);\n-        } finally {\n-            mitr.close();\n-        }\n-\n-        Map.Entry entry;\n-        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\n-            entry = (Map.Entry) itr.next();\n-            if (mapNames) {\n-                mapPersistentTypeNames(entry.getKey(), (String[]) entry.getValue());\n-            }\n-            List newNames = Arrays.asList((String[]) entry.getValue());\n-            if (log.isTraceEnabled()) {\n-                log.trace(_loc.get(\"scan-found-names\", newNames, debugContext));\n-            }\n-            names.addAll(newNames);\n-        }\n-    }\n-\n-    /**\n-     * Parse persistent type names.\n-     */\n-    @Override\n-    protected Set<String> parsePersistentTypeNames(ClassLoader loader)\n-            throws IOException {\n-\n-        ClassArgParser cparser = newClassArgParser();\n-        String[] clss;\n-        Set<String> names = new HashSet<String>();\n-        if (files != null) {\n-            File file;\n-            for (Iterator itr = files.iterator(); itr.hasNext();) {\n-                file = (File) itr.next();\n-                if ((AccessController.doPrivileged(J2DoPrivHelper.isDirectoryAction(file))).booleanValue()) {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-directory\", file));\n-                    }\n-                    scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n-                } else if (file.getName().endsWith(\".jar\")) {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-jar\", file));\n-                    }\n-                    try {\n-                        ZipFile zFile = AccessController.doPrivileged(J2DoPrivHelper.newZipFileAction(file));\n-                        scan(new ZipFileMetaDataIterator(zFile, newMetaDataFilter()), cparser, names, true, file);\n-                    } catch (PrivilegedActionException pae) {\n-                        throw (IOException) pae.getException();\n-                    }\n-                } else {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-file\", file));\n-                    }\n-                    clss = cparser.parseTypeNames(new FileMetaDataIterator(file));\n-                    List<String> newNames = Arrays.asList(clss);\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scan-found-names\", newNames, file));\n-                    }\n-                    names.addAll(newNames);\n-                    File f = AccessController.doPrivileged(J2DoPrivHelper.getAbsoluteFileAction(file));\n-                    try {\n-                        mapPersistentTypeNames(AccessController.doPrivileged(J2DoPrivHelper.toURLAction(f)), clss);\n-                    } catch (PrivilegedActionException pae) {\n-                        throw (FileNotFoundException) pae.getException();\n-                    }\n-                }\n-            }\n-        }\n-        URL url;\n-        if (urls != null) {\n-            for (Iterator itr = urls.iterator(); itr.hasNext();) {\n-                url = (URL) itr.next();\n-                if (\"file\".equals(url.getProtocol())) {\n-                    File file = AccessController.doPrivileged(J2DoPrivHelper.getAbsoluteFileAction(\n-                            new File(url.getFile())));\n-                    if (files != null && files.contains(file)) {\n-                        continue;\n-                    } else if ((AccessController.doPrivileged(J2DoPrivHelper.isDirectoryAction(file))).booleanValue()) {\n-                        if (log.isTraceEnabled()) {\n-                            log.trace(_loc.get(\"scanning-directory\", file));\n-                        }\n-                        scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n-                        continue;\n-                    }\n-                }\n-                // OPENJPA-2229 - begin\n-                if (\"vfs\".equals(url.getProtocol())) {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-vfs-url\", url));\n-                    }\n-\n-                    URLConnection conn = url.openConnection();\n-                    Object vfsContent = conn.getContent();\n-                    try {\n-                        Class virtualFileClass = Class.forName(\"org.jboss.vfs.VirtualFile\");\n-                        Method getPhysicalFile = virtualFileClass.getDeclaredMethod(\"getPhysicalFile\");\n-                        File file = (File) getPhysicalFile.invoke(vfsContent);\n-                        scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n-                    } catch (Exception e) {\n-                        log.error(_loc.get(\"while-scanning-vfs-url\", url), e);\n-                    }\n-\n-                    continue;\n-                }\n-                // OPENJPA-2229 - end\n-                if (\"jar\".equals(url.getProtocol())) {\n-                    if (url.getPath().endsWith(\"!/\")) {\n-                        if (log.isTraceEnabled()) {\n-                            log.trace(_loc.get(\"scanning-jar-url\", url));\n-                        }\n-                        scan(new ZipFileMetaDataIterator(url, newMetaDataFilter()), cparser, names, true, url);\n-                    } else {\n-                        if (log.isTraceEnabled()) {\n-                            log.trace(_loc.get(\"scanning-jar-url\", url));\n-                        }\n-                        scan(new JarFileURLMetaDataIterator(url, newMetaDataFilter()), cparser, names, true, url);\n-                    }\n-                } else if (url.getPath().endsWith(\".jar\")) {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-jar-at-url\", url));\n-                    }\n-                    try {\n-                        InputStream is = (InputStream) AccessController.doPrivileged(\n-                                J2DoPrivHelper.openStreamAction(url));\n-                        scan(new ZipStreamMetaDataIterator(new ZipInputStream(is), newMetaDataFilter()),\n-                                cparser, names, true, url);\n-                    } catch (PrivilegedActionException pae) {\n-                        throw (IOException) pae.getException();\n-                    }\n-                } else {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-url\", url));\n-                    }\n-                    clss = cparser.parseTypeNames(new URLMetaDataIterator(url));\n-                    List<String> newNames = Arrays.asList(clss);\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scan-found-names\", newNames, url));\n-                    }\n-                    names.addAll(newNames);\n-                    mapPersistentTypeNames(url, clss);\n-                }\n-            }\n-        }\n-        if (rsrcs != null) {\n-            String rsrc;\n-            MetaDataIterator mitr;\n-            for (Iterator itr = rsrcs.iterator(); itr.hasNext();) {\n-                rsrc = (String) itr.next();\n-                if (rsrc.endsWith(\".jar\")) {\n-                    url = AccessController.doPrivileged(\n-                            J2DoPrivHelper.getResourceAction(loader, rsrc));\n-                    if (url != null) {\n-                        if (log.isTraceEnabled()) {\n-                            log.trace(_loc.get(\"scanning-jar-stream-url\", url));\n-                        }\n-                        try {\n-                            InputStream is = (InputStream) AccessController.doPrivileged(\n-                                    J2DoPrivHelper.openStreamAction(url));\n-                            scan(new ZipStreamMetaDataIterator(new ZipInputStream(is), newMetaDataFilter()), cparser,\n-                                    names, true, url);\n-                        } catch (PrivilegedActionException pae) {\n-                            throw (IOException) pae.getException();\n-                        }\n-                    }\n-                } else {\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"scanning-resource\", rsrc));\n-                    }\n-                    mitr = new ResourceMetaDataIterator(rsrc, loader);\n-                    OpenJPAConfiguration conf = repos.getConfiguration();\n-                    Map peMap = null;\n-                    if (conf instanceof OpenJPAConfigurationImpl) {\n-                        peMap = ((OpenJPAConfigurationImpl) conf).getPersistenceEnvironment();\n-                    }\n-                    URL puUrl = peMap == null ? null : (URL) peMap.get(PERSISTENCE_UNIT_ROOT_URL);\n-                    List<String> mappingFileNames =\n-                            peMap == null ? null : (List<String>) peMap.get(MAPPING_FILE_NAMES);\n-                    List<URL> jars = peMap == null ? null : (List<URL>) peMap.get(JAR_FILE_URLS);\n-                    String puUrlString = puUrl == null ? null : puUrl.toString();\n-                    if (log.isTraceEnabled()) {\n-                        log.trace(_loc.get(\"pu-root-url\", puUrlString));\n-                    }\n-\n-                    List<URL> mitrUrls = new ArrayList<URL>(3);\n-                    while (mitr.hasNext()) {\n-                        url = (URL) mitr.next();\n-                        String urlString = url.toString();\n-                        if (log.isTraceEnabled()) {\n-                            log.trace(_loc.get(\"resource-url\", urlString));\n-                        }\n-                        if (peMap != null) {\n-                            //OPENJPA-2102: decode the URL to remove such things a spaces (' ') encoded as '%20'\n-                            if (puUrlString != null && decode(urlString).indexOf(decode(puUrlString)) != -1) {\n-                                mitrUrls.add(url);\n-                            }\n-                            if (mappingFileNames != null && !mappingFileNames.isEmpty()) {\n-                                for (String mappingFileName : mappingFileNames) {\n-                                    if (log.isTraceEnabled()) {\n-                                        log.trace(_loc.get(\"mapping-file-name\", mappingFileName));\n-                                    }\n-                                    if (urlString.indexOf(mappingFileName) != -1) {\n-                                        mitrUrls.add(url);\n-                                    }\n-                                }\n-                            }\n-\n-                            if (jars != null && !jars.isEmpty()) {\n-                                for (URL jarUrl : jars) {\n-                                    if (log.isTraceEnabled()) {\n-                                        log.trace(_loc.get(\"jar-file-url\", jarUrl));\n-                                    }\n-                                    if (urlString.indexOf(jarUrl.toString()) != -1) {\n-                                        mitrUrls.add(url);\n-                                    }\n-                                }\n-                            }\n-                        } else {\n-                            mitrUrls.add(url);\n-                        }\n-                    }\n-                    mitr.close();\n-\n-                    for (Object obj : mitrUrls) {\n-                        url = (URL) obj;\n-                        clss = cparser.parseTypeNames(new URLMetaDataIterator(url));\n-                        List<String> newNames = Arrays.asList(clss);\n-                        if (log.isTraceEnabled()) {\n-                            log.trace(_loc.get(\"scan-found-names\", newNames, rsrc));\n-                        }\n-                        names.addAll(newNames);\n-                        mapPersistentTypeNames(url, clss);\n-                    }\n-                }\n-            }\n-        }\n-        if (cpath != null) {\n-            String[] dirs = (String[]) cpath.toArray(new String[cpath.size()]);\n-            scan(new ClasspathMetaDataIterator(dirs, newMetaDataFilter()), cparser, names, true, dirs);\n-        }\n-        if (types != null) {\n-            names.addAll(types);\n-        }\n-\n-        if (log.isTraceEnabled()) {\n-            log.trace(_loc.get(\"parse-found-names\", names));\n-        }\n-\n-        return names;\n-    }\n-}"},{"sha":"a264d57977a14e4f5102be88f1d2873805605fa5","filename":"core/src/test/resources/jboss/persistenceContextEMFactory.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FpersistenceContextEMFactory.xml?ref=ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","patch":"@@ -54,7 +54,7 @@ under the License.\n         <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>\n         \n         <entry key=\"openjpa.MetaDataFactory\"\n-               value=\"org.apache.syncope.core.persistence.openjpa.JBossPersistenceMappingFactory(URLs=vfs:${project.build.directory}/cargo/configurations/jboss72x/deployments/${project.build.finalName}.war/WEB-INF/classes/, Resources=META-INF/orm.xml)\"/>\n+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/jboss72x/deployments/${project.build.finalName}.war/WEB-INF/classes/, Resources=META-INF/orm.xml)\"/>\n       </map>\n     </property>\n   </bean>"},{"sha":"64737fe22750b7c8fef168cf28d6d9e4c342a3ab","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ddf0b2590d3ba291fde3f5ee86d12dad55dbd19a","patch":"@@ -319,7 +319,7 @@ under the License.\n     <velocity.version>1.7</velocity.version>\n     <quartz.version>2.2.1</quartz.version>\n \n-    <openjpa.version>2.2.2</openjpa.version>\n+    <openjpa.version>2.3.0</openjpa.version>\n     <bval.version>0.5</bval.version>\n         \n     <cocoon.version>3.0.0-alpha-3</cocoon.version>"}]}