{"sha":"88391163320f5d73ca51e4c03b0edc5371ab6e1e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg4MzkxMTYzMzIwZjVkNzNjYTUxZTRjMDNiMGVkYzUzNzFhYjZlMWU=","commit":{"author":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-11T11:51:22Z"},"committer":{"name":"Colm O hEigeartaigh","email":"coheigea@apache.org","date":"2017-08-11T12:15:07Z"},"message":"Take the valid SAML Assertion from the validator response instead.","tree":{"sha":"cff4bd8df535d687fcd156d1f5abd29c277abc2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cff4bd8df535d687fcd156d1f5abd29c277abc2a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/88391163320f5d73ca51e4c03b0edc5371ab6e1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88391163320f5d73ca51e4c03b0edc5371ab6e1e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88391163320f5d73ca51e4c03b0edc5371ab6e1e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88391163320f5d73ca51e4c03b0edc5371ab6e1e/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d8d5fe5ee8c7e887f5c2fda8362aa9a0296635c9"}],"stats":{"total":73,"additions":39,"deletions":34},"files":[{"sha":"03576abba5a204b2225d865155ef8208bf8c5c81","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":33,"deletions":32,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88391163320f5d73ca51e4c03b0edc5371ab6e1e/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88391163320f5d73ca51e4c03b0edc5371ab6e1e/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=88391163320f5d73ca51e4c03b0edc5371ab6e1e","patch":"@@ -37,6 +37,7 @@\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.saml.sso.SSOValidatorResponse;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -371,8 +372,10 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         if (idp.getConnObjectKeyItem() == null) {\n             throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + \"'\");\n         }\n+\n+        SSOValidatorResponse validatorResponse = null;\n         try {\n-            saml2rw.validate(\n+            validatorResponse = saml2rw.validate(\n                     samlResponse,\n                     idp,\n                     getAssertionConsumerURL(response.getSpEntityID(), response.getUrlContext()),\n@@ -390,47 +393,45 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         responseTO.setIdp(idp.getId());\n         responseTO.setSloSupported(idp.getSLOLocation(idp.getBindingType()) != null);\n \n-        NameID nameID = null;\n+        Assertion assertion = validatorResponse.getOpensamlAssertion();\n+        NameID nameID = assertion.getSubject().getNameID();\n         String keyValue = null;\n-        for (Assertion assertion : samlResponse.getAssertions()) {\n-            nameID = assertion.getSubject().getNameID();\n-            if (StringUtils.isNotBlank(nameID.getValue())\n-                    && idp.getConnObjectKeyItem().getExtAttrName().equals(\"NameID\")) {\n+        if (StringUtils.isNotBlank(nameID.getValue())\n+            && idp.getConnObjectKeyItem().getExtAttrName().equals(\"NameID\")) {\n \n-                keyValue = nameID.getValue();\n-            }\n+            keyValue = nameID.getValue();\n+        }\n \n-            if (assertion.getConditions().getNotOnOrAfter() != null) {\n-                responseTO.setNotOnOrAfter(assertion.getConditions().getNotOnOrAfter().toDate());\n-            }\n-            for (AuthnStatement authnStmt : assertion.getAuthnStatements()) {\n-                responseTO.setSessionIndex(authnStmt.getSessionIndex());\n+        if (assertion.getConditions().getNotOnOrAfter() != null) {\n+            responseTO.setNotOnOrAfter(assertion.getConditions().getNotOnOrAfter().toDate());\n+        }\n+        for (AuthnStatement authnStmt : assertion.getAuthnStatements()) {\n+            responseTO.setSessionIndex(authnStmt.getSessionIndex());\n \n-                responseTO.setAuthInstant(authnStmt.getAuthnInstant().toDate());\n-                if (authnStmt.getSessionNotOnOrAfter() != null) {\n-                    responseTO.setNotOnOrAfter(authnStmt.getSessionNotOnOrAfter().toDate());\n-                }\n+            responseTO.setAuthInstant(authnStmt.getAuthnInstant().toDate());\n+            if (authnStmt.getSessionNotOnOrAfter() != null) {\n+                responseTO.setNotOnOrAfter(authnStmt.getSessionNotOnOrAfter().toDate());\n             }\n+        }\n \n-            for (AttributeStatement attrStmt : assertion.getAttributeStatements()) {\n-                for (Attribute attr : attrStmt.getAttributes()) {\n-                    if (!attr.getAttributeValues().isEmpty()) {\n-                        String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n-                        if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())\n-                                && attr.getAttributeValues().get(0) instanceof XSString) {\n+        for (AttributeStatement attrStmt : assertion.getAttributeStatements()) {\n+            for (Attribute attr : attrStmt.getAttributes()) {\n+                if (!attr.getAttributeValues().isEmpty()) {\n+                    String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n+                    if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())\n+                        && attr.getAttributeValues().get(0) instanceof XSString) {\n \n-                            keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();\n-                        }\n+                        keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();\n+                    }\n \n-                        AttrTO attrTO = new AttrTO();\n-                        attrTO.setSchema(attrName);\n-                        for (XMLObject value : attr.getAttributeValues()) {\n-                            if (value.getDOM() != null) {\n-                                attrTO.getValues().add(value.getDOM().getTextContent());\n-                            }\n+                    AttrTO attrTO = new AttrTO();\n+                    attrTO.setSchema(attrName);\n+                    for (XMLObject value : attr.getAttributeValues()) {\n+                        if (value.getDOM() != null) {\n+                            attrTO.getValues().add(value.getDOM().getTextContent());\n                         }\n-                        responseTO.getAttrs().add(attrTO);\n                     }\n+                    responseTO.getAttrs().add(attrTO);\n                 }\n             }\n         }"},{"sha":"3c2d547d771094a83d7b9a2dc165c372ba37b2bd","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/88391163320f5d73ca51e4c03b0edc5371ab6e1e/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/88391163320f5d73ca51e4c03b0edc5371ab6e1e/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=88391163320f5d73ca51e4c03b0edc5371ab6e1e","patch":"@@ -44,6 +44,7 @@\n import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n import org.apache.cxf.rs.security.saml.sso.SAMLSSOResponseValidator;\n+import org.apache.cxf.rs.security.saml.sso.SSOValidatorResponse;\n import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.syncope.common.lib.SSOConstants;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n@@ -203,7 +204,7 @@ public String encode(final RequestAbstractType request, final boolean useDeflate\n         return Base64.getEncoder().encodeToString(deflatedBytes);\n     }\n \n-    public void validate(\n+    public SSOValidatorResponse validate(\n             final Response samlResponse,\n             final SAML2IdPEntity idp,\n             final String assertionConsumerURL,\n@@ -225,7 +226,8 @@ public void validate(\n         ssoResponseValidator.setIssuerIDP(idp.getId());\n         ssoResponseValidator.setRequestId(requestId);\n         ssoResponseValidator.setSpIdentifier(spEntityID);\n-        ssoResponseValidator.validateSamlResponse(samlResponse, idp.getBindingType() == SAML2BindingType.POST);\n+        SSOValidatorResponse validatorResponse =\n+            ssoResponseValidator.validateSamlResponse(samlResponse, idp.getBindingType() == SAML2BindingType.POST);\n \n         if (LOG.isDebugEnabled()) {\n             try {\n@@ -238,5 +240,7 @@ public void validate(\n                 LOG.error(\"Could not log the SAML response with decrypted assertions\", e);\n             }\n         }\n+\n+        return validatorResponse;\n     }\n }"}]}