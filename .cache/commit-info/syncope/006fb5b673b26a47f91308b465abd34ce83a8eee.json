{"sha":"006fb5b673b26a47f91308b465abd34ce83a8eee","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAwNmZiNWI2NzNiMjZhNDdmOTEzMDhiNDY1YWJkMzRjZTgzYThlZWU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-21T11:04:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-21T11:04:54Z"},"message":"(Fixes issue #25)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5640f4095e042ac787ee3546ed048820e90109b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5640f4095e042ac787ee3546ed048820e90109b6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/006fb5b673b26a47f91308b465abd34ce83a8eee","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/006fb5b673b26a47f91308b465abd34ce83a8eee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/006fb5b673b26a47f91308b465abd34ce83a8eee","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/006fb5b673b26a47f91308b465abd34ce83a8eee/comments","author":null,"committer":null,"parents":[{"sha":"103fa88fa2df543fcf2037a1e2c3cdd4c5468a4c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/103fa88fa2df543fcf2037a1e2c3cdd4c5468a4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/103fa88fa2df543fcf2037a1e2c3cdd4c5468a4c"}],"stats":{"total":1141,"additions":1000,"deletions":141},"files":[{"sha":"87406dc35d27cab425ebcc1c5faed64e84b3a52d","filename":"client/src/main/java/org/syncope/client/to/MembershipTO.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,50 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class MembershipTO extends AbstractAttributableTO {\n+\n+    private Long role;\n+\n+    public Long getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(Long role) {\n+        this.role = role;\n+    }\n+\n+    @Override\n+    public boolean addResource(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeResource(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Set<String> getResources() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    @Override\n+    public void setResources(Set<String> resources) {\n+    }\n+}"},{"sha":"38f1afbfd015bab6d08d862eab68499b8559d4d4","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -15,20 +15,17 @@\n package org.syncope.client.to;\n \n import java.util.HashSet;\n-import java.util.Set;\n \n public class RoleTO extends AbstractAttributableTO {\n \n     private String name;\n     private Long parent;\n-    private Set<Long> users;\n     private boolean inheritAttributes;\n     private boolean inheritDerivedAttributes;\n \n     public RoleTO() {\n         super();\n \n-        users = new HashSet<Long>();\n         resources = new HashSet<String>();\n     }\n \n@@ -48,22 +45,6 @@ public void setParent(Long parent) {\n         this.parent = parent;\n     }\n \n-    public boolean addUser(Long user) {\n-        return users.add(user);\n-    }\n-\n-    public boolean removeUser(Long user) {\n-        return users.remove(user);\n-    }\n-\n-    public Set<Long> getUsers() {\n-        return users;\n-    }\n-\n-    public void setUsers(Set<Long> users) {\n-        this.users = users;\n-    }\n-\n     public boolean isInheritAttributes() {\n         return inheritAttributes;\n     }"},{"sha":"ca469594c65e3b1b9b8997d2f45df4e165afecbc","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -21,16 +21,16 @@\n public class UserTO extends AbstractAttributableTO {\n \n     private String password;\n-    private Set<Long> roles;\n+    private Set<MembershipTO> memberships;\n     private Date creationTime;\n     private String token;\n     private Date tokenExpireTime;\n \n     public UserTO() {\n         super();\n-        \n-        roles = new HashSet<Long>();\n-   }\n+\n+        memberships = new HashSet<MembershipTO>();\n+    }\n \n     public String getPassword() {\n         return password;\n@@ -40,20 +40,20 @@ public void setPassword(String password) {\n         this.password = password;\n     }\n \n-    public boolean addRole(Long role) {\n-        return roles.add(role);\n+    public boolean addMembership(MembershipTO membershipTO) {\n+        return memberships.add(membershipTO);\n     }\n \n-    public boolean removeRole(Long role) {\n-        return roles.remove(role);\n+    public boolean removeMembership(MembershipTO membershipTO) {\n+        return memberships.remove(membershipTO);\n     }\n \n-    public Set<Long> getRoles() {\n-        return roles;\n+    public Set<MembershipTO> getMemberships() {\n+        return memberships;\n     }\n \n-    public void setRoles(Set<Long> roles) {\n-        this.roles = roles;\n+    public void setMemberships(Set<MembershipTO> memberships) {\n+        this.memberships = memberships;\n     }\n \n     public Date getCreationTime() {"},{"sha":"66718e35e04ced71015199309fd5608604915531","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n@@ -29,8 +30,8 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n      * Provisioning target resources.\n      */\n     @ManyToMany(fetch = FetchType.EAGER)\n-    private Set<Resource> resources;\n-    \n+    protected Set<Resource> resources;\n+\n     public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n         T result = null;\n         T attribute = null;\n@@ -39,7 +40,8 @@ public <T extends AbstractAttribute> T getAttribute(String schemaName) {\n                 result == null && itor.hasNext();) {\n \n             attribute = (T) itor.next();\n-            if (attribute.getSchema() != null && schemaName.equals(attribute.getSchema().getName())) {\n+            if (attribute.getSchema() != null\n+                    && schemaName.equals(attribute.getSchema().getName())) {\n \n                 result = attribute;\n             }\n@@ -58,7 +60,8 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n                 result == null && itor.hasNext();) {\n \n             derivedAttribute = (T) itor.next();\n-            if (derivedAttribute.getDerivedSchema() != null && derivedSchemaName.equals(\n+            if (derivedAttribute.getDerivedSchema() != null\n+                    && derivedSchemaName.equals(\n                     derivedAttribute.getDerivedSchema().getName())) {\n \n                 result = derivedAttribute;\n@@ -69,20 +72,18 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n     }\n \n     public boolean addResource(Resource resource) {\n-        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        if (this.resources == null) {\n+            this.resources = new HashSet<Resource>();\n+        }\n         return this.resources.add(resource);\n     }\n \n     public boolean removeResource(Resource resource) {\n-        if (this.resources == null) return true;\n-        return resources.remove(resource);\n+        return resources == null ? true : resources.remove(resource);\n     }\n \n     public Set<Resource> getResources() {\n-        if (this.resources == null) {\n-            this.resources = new HashSet<Resource>();\n-        }\n-        return this.resources;\n+        return resources == null ? Collections.EMPTY_SET : resources;\n     }\n \n     public void setResources(Set<Resource> resources) {\n@@ -98,9 +99,11 @@ public void setResources(Set<Resource> resources) {\n     public abstract void setAttributes(\n             Set<? extends AbstractAttribute> attributes);\n \n-    public abstract <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(T derivedAttribute);\n+    public abstract <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+            T derivedAttribute);\n \n-    public abstract <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(T derivedAttribute);\n+    public abstract <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+            T derivedAttribute);\n \n     public abstract Set<? extends AbstractDerivedAttribute> getDerivedAttributes();\n "},{"sha":"2f2207cc2c232444960a4eb5c8ce28def3856cd3","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -193,22 +193,27 @@ public <T extends Format> T getFormatter(Class<T> reference) {\n         return result;\n     }\n \n-    public abstract <T extends AbstractAttribute> boolean addAttribute(T attribute);\n+    public abstract <T extends AbstractAttribute> boolean addAttribute(\n+            T attribute);\n \n-    public abstract <T extends AbstractAttribute> boolean removeAttribute(T attribute);\n+    public abstract <T extends AbstractAttribute> boolean removeAttribute(\n+            T attribute);\n \n     public abstract Set<? extends AbstractAttribute> getAttributes();\n \n     public abstract void setAttributes(\n             Set<? extends AbstractAttribute> attributes);\n \n-    public abstract <T extends AbstractDerivedSchema> boolean addDerivedSchema(T derivedSchema);\n+    public abstract <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n+            T derivedSchema);\n \n-    public abstract <T extends AbstractDerivedSchema> boolean removeDerivedSchema(T derivedSchema);\n+    public abstract <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n+            T derivedSchema);\n \n     public abstract Set<? extends AbstractDerivedSchema> getDerivedSchemas();\n \n-    public abstract void setDerivedSchemas(Set<? extends AbstractDerivedSchema> derivedSchemas);\n+    public abstract void setDerivedSchemas(\n+            Set<? extends AbstractDerivedSchema> derivedSchemas);\n \n     public abstract boolean addMapping(SchemaMapping mapping);\n "},{"sha":"c5ad6b2608ae12c64d4d2d0153a652df6da0f674","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchemaMapping.java","status":"modified","additions":16,"deletions":7,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchemaMapping.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.membership.MembershipSchema;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n \n@@ -30,47 +31,47 @@ public class SchemaMapping extends AbstractBaseBean {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private Long id;\n-\n     /**\n      * Attribute schema to be mapped.\n      * Consider that we can associate tha same attribute schema more\n      * than once, with different aliases, to different resource attributes.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UserSchema userSchema;\n-\n     /**\n      * Attribute schema to be mapped.\n      * Consider that we can associate tha same attribute schema more\n      * than once, with different aliases, to different resource attributes.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private RoleSchema roleSchema;\n-\n+    /**\n+     * Attribute schema to be mapped.\n+     * Consider that we can associate tha same attribute schema more\n+     * than once, with different aliases, to different resource attributes.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private MembershipSchema membershipSchema;\n     /**\n      * Target resource that has fields to be mapped over user attribute schemas.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private Resource resource;\n-\n     /**\n      * Target resource's field to be mapped.\n      */\n     @Column(nullable = false)\n     private String field;\n-\n     /**\n      * Specify if the mapped target resource's field is the key.\n      */\n     @Column(nullable = false)\n     private boolean accountid;\n-\n     /**\n      * Specify if the mapped target resource's field is the password.\n      */\n     @Column(nullable = false)\n     private boolean password;\n-\n     /**\n      * Specify if the mapped target resource's field is nullable.\n      */\n@@ -142,4 +143,12 @@ public UserSchema getUserSchema() {\n     public void setUserSchema(UserSchema userSchema) {\n         this.userSchema = userSchema;\n     }\n+\n+    public MembershipSchema getMembershipSchema() {\n+        return membershipSchema;\n+    }\n+\n+    public void setMembershipSchema(MembershipSchema membershipSchema) {\n+        this.membershipSchema = membershipSchema;\n+    }\n }"},{"sha":"58ce68b5a41a713e5599c9fcd142efd50ce2ab24","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/Membership.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,148 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+\n+@Entity\n+@Table(uniqueConstraints =\n+@UniqueConstraint(columnNames = {\"syncopeUser_id\", \"syncopeRole_id\"}))\n+public class Membership extends AbstractAttributable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+    @ManyToOne\n+    private SyncopeUser syncopeUser;\n+    @ManyToOne\n+    private SyncopeRole syncopeRole;\n+    @OneToMany(cascade = CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"owner\")\n+    private Set<MembershipAttribute> attributes;\n+    @OneToMany(cascade = CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"owner\")\n+    private Set<MembershipDerivedAttribute> derivedAttributes;\n+\n+    public Membership() {\n+        attributes = new HashSet<MembershipAttribute>();\n+        derivedAttributes = new HashSet<MembershipDerivedAttribute>();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public SyncopeRole getSyncopeRole() {\n+        return syncopeRole;\n+    }\n+\n+    public void setSyncopeRole(SyncopeRole syncopeRole) {\n+        this.syncopeRole = syncopeRole;\n+    }\n+\n+    public SyncopeUser getSyncopeUser() {\n+        return syncopeUser;\n+    }\n+\n+    public void setSyncopeUser(SyncopeUser syncopeUser) {\n+        this.syncopeUser = syncopeUser;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n+        return attributes.add((MembershipAttribute) attribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n+        return attributes.remove((MembershipAttribute) attribute);\n+    }\n+\n+    @Override\n+    public Set<? extends AbstractAttribute> getAttributes() {\n+        return attributes;\n+    }\n+\n+    @Override\n+    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n+        this.attributes = (Set<MembershipAttribute>) attributes;\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+            T derivedAttribute) {\n+\n+        return derivedAttributes.add(\n+                (MembershipDerivedAttribute) derivedAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+            T derivedAttribute) {\n+\n+        return derivedAttributes.remove(\n+                (MembershipDerivedAttribute) derivedAttribute);\n+    }\n+\n+    @Override\n+    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    @Override\n+    public void setDerivedAttributes(\n+            Set<? extends AbstractDerivedAttribute> derivedAttributes) {\n+\n+        this.derivedAttributes =\n+                (Set<MembershipDerivedAttribute>) derivedAttributes;\n+    }\n+\n+    @Override\n+    public boolean addResource(Resource resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeResource(Resource resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Set<Resource> getResources() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    @Override\n+    public void setResources(Set<Resource> resources) {\n+    }\n+}"},{"sha":"17de34d11d5cfca3cf3e3899090e2a9988457716","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,91 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import org.hibernate.annotations.Cascade;\n+import org.hibernate.annotations.CascadeType;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+\n+@Entity\n+public class MembershipAttribute extends AbstractAttribute {\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private Membership owner;\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private MembershipSchema schema;\n+    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    fetch = FetchType.EAGER, mappedBy = \"attribute\")\n+    @Cascade(CascadeType.DELETE_ORPHAN)\n+    private Set<MembershipAttributeValue> attributeValues;\n+\n+    public MembershipAttribute() {\n+        attributeValues = new HashSet<MembershipAttributeValue>();\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> T getOwner() {\n+        return (T) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> void setOwner(T owner) {\n+        this.owner = (Membership) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> T getSchema() {\n+        return (T) schema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> void setSchema(T schema) {\n+        this.schema = (MembershipSchema) schema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributeValue> boolean addAttributeValue(\n+            T attributeValue) {\n+\n+        return attributeValues.add((MembershipAttributeValue) attributeValue);\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributeValue> boolean removeAttributeValue(\n+            T attributeValue) {\n+\n+        return attributeValues.remove((MembershipAttributeValue) attributeValue);\n+    }\n+\n+    @Override\n+    public Set<? extends AbstractAttributeValue> getAttributeValues() {\n+        return attributeValues;\n+    }\n+\n+    @Override\n+    public void setAttributeValues(\n+            Set<? extends AbstractAttributeValue> attributeValues) {\n+\n+        this.attributeValues = (Set<MembershipAttributeValue>) attributeValues;\n+    }\n+}"},{"sha":"a534407a4b17d104f30c8c7ef7983250996fc95d","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttributeValue.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttributeValue.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+\n+@Entity\n+public class MembershipAttributeValue extends AbstractAttributeValue {\n+\n+    @ManyToOne\n+    private MembershipAttribute attribute;\n+\n+    @Override\n+    public <T extends AbstractAttribute> T getAttribute() {\n+        return (T) attribute;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttribute> void setAttribute(T attribute) {\n+        this.attribute = (MembershipAttribute) attribute;\n+    }\n+}"},{"sha":"e0eff59598fc4a4c1d98bd99678847c16ac69bcf","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipDerivedAttribute.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedAttribute.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,53 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+\n+@Entity\n+public class MembershipDerivedAttribute extends AbstractDerivedAttribute {\n+\n+    @ManyToOne\n+    private Membership owner;\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    MembershipDerivedSchema derivedSchema;\n+\n+    @Override\n+    public <T extends AbstractAttributable> T getOwner() {\n+        return (T) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> void setOwner(T owner) {\n+        this.owner = (Membership) owner;\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedSchema> T getDerivedSchema() {\n+        return (T) derivedSchema;\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedSchema> void setDerivedSchema(\n+            T derivedSchema) {\n+\n+        this.derivedSchema = (MembershipDerivedSchema) derivedSchema;\n+    }\n+}"},{"sha":"e4c4f4b3cb477bdf71296dcaa6ae2305170c9785","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipDerivedSchema.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipDerivedSchema.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToMany;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+\n+@Entity\n+public class MembershipDerivedSchema extends AbstractDerivedSchema {\n+\n+    @ManyToMany\n+    private Set<MembershipSchema> schemas;\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n+    private Set<MembershipDerivedAttribute> derivedAttributes;\n+\n+    public MembershipDerivedSchema() {\n+        schemas = new HashSet<MembershipSchema>();\n+        derivedAttributes = new HashSet<MembershipDerivedAttribute>();\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> boolean addSchema(T schema) {\n+        return schemas.add((MembershipSchema) schema);\n+    }\n+\n+    @Override\n+    public <T extends AbstractSchema> boolean removeSchema(T schema) {\n+        return schemas.remove((MembershipSchema) schema);\n+    }\n+\n+    @Override\n+    public Set<MembershipSchema> getSchemas() {\n+        return schemas;\n+    }\n+\n+    @Override\n+    public void setSchemas(Set<? extends AbstractSchema> schemas) {\n+        this.schemas = (Set<MembershipSchema>) schemas;\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedAttribute> boolean addDerivedAttribute(\n+            T derivedAttribute) {\n+\n+        return derivedAttributes.add((MembershipDerivedAttribute) derivedAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedAttribute> boolean removeDerivedAttribute(\n+            T derivedAttribute) {\n+\n+        return derivedAttributes.remove((MembershipDerivedAttribute) derivedAttribute);\n+    }\n+\n+    @Override\n+    public Set<? extends AbstractDerivedAttribute> getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedAttribute> void setDerivedAttributes(\n+            Set<T> derivedAttributes) {\n+\n+        this.derivedAttributes = (Set<MembershipDerivedAttribute>) derivedAttributes;\n+    }\n+}"},{"sha":"751c040c329a72b2b44356a7c057a861094e2692","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipSchema.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipSchema.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,123 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans.membership;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToMany;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+\n+@Entity\n+public class MembershipSchema extends AbstractSchema {\n+\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n+    private Set<MembershipAttribute> attributes;\n+    @ManyToMany(mappedBy = \"schemas\")\n+    private Set<MembershipDerivedSchema> derivedSchemas;\n+    /**\n+     * All the mappings of the attribute schema.\n+     */\n+    @OneToMany(cascade = CascadeType.MERGE,\n+    fetch = FetchType.EAGER, mappedBy = \"membershipSchema\")\n+    private Set<SchemaMapping> mappings;\n+\n+    public MembershipSchema() {\n+        attributes = new HashSet<MembershipAttribute>();\n+        derivedSchemas = new HashSet<MembershipDerivedSchema>();\n+        mappings = new HashSet<SchemaMapping>();\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttribute> boolean addAttribute(T attribute) {\n+        return attributes.add((MembershipAttribute) attribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttribute> boolean removeAttribute(T attribute) {\n+        return attributes.remove((MembershipAttribute) attribute);\n+    }\n+\n+    @Override\n+    public Set<? extends AbstractAttribute> getAttributes() {\n+        return attributes;\n+    }\n+\n+    @Override\n+    public void setAttributes(Set<? extends AbstractAttribute> attributes) {\n+        this.attributes = (Set<MembershipAttribute>) attributes;\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedSchema> boolean addDerivedSchema(\n+            T derivedSchema) {\n+\n+        return derivedSchemas.add((MembershipDerivedSchema) derivedSchema);\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedSchema> boolean removeDerivedSchema(\n+            T derivedSchema) {\n+\n+        return derivedSchemas.remove((MembershipDerivedSchema) derivedSchema);\n+    }\n+\n+    @Override\n+    public Set<? extends AbstractDerivedSchema> getDerivedSchemas() {\n+        return derivedSchemas;\n+    }\n+\n+    @Override\n+    public void setDerivedSchemas(\n+            Set<? extends AbstractDerivedSchema> derivedSchemas) {\n+\n+        this.derivedSchemas = (Set<MembershipDerivedSchema>) derivedSchemas;\n+    }\n+\n+    @Override\n+    public Set<SchemaMapping> getMappings() {\n+        if (this.mappings == null) {\n+            this.mappings = new HashSet<SchemaMapping>();\n+        }\n+        return this.mappings;\n+    }\n+\n+    @Override\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    @Override\n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) {\n+            this.mappings = new HashSet<SchemaMapping>();\n+        }\n+        return this.mappings.add(mapping);\n+    }\n+\n+    @Override\n+    public boolean removeMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) {\n+            return true;\n+        }\n+        return this.mappings.remove(mapping);\n+    }\n+}"},{"sha":"2e20423cd077fe192c834efeb36c7133f9f4e144","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":24,"deletions":12,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -14,7 +14,6 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.CascadeType;\n@@ -32,6 +31,8 @@\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n @Entity\n @Table(uniqueConstraints =\n@@ -44,8 +45,9 @@ public class SyncopeRole extends AbstractAttributable {\n     private String name;\n     @ManyToOne(optional = true)\n     private SyncopeRole parent;\n-    @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"roles\")\n-    private Set<SyncopeUser> users;\n+    @OneToMany(cascade = CascadeType.MERGE,\n+    fetch = FetchType.EAGER, mappedBy = \"syncopeRole\")\n+    private Set<Membership> memberships;\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n     @OneToMany(cascade = CascadeType.ALL,\n@@ -58,7 +60,7 @@ public class SyncopeRole extends AbstractAttributable {\n     private boolean inheritDerivedAttributes;\n \n     public SyncopeRole() {\n-        users = new HashSet<SyncopeUser>();\n+        memberships = new HashSet<Membership>();\n         entitlements = new HashSet<Entitlement>();\n         attributes = new HashSet<RoleAttribute>();\n         derivedAttributes = new HashSet<RoleDerivedAttribute>();\n@@ -100,20 +102,30 @@ public void setEntitlements(Set<Entitlement> entitlements) {\n         this.entitlements = entitlements;\n     }\n \n-    public boolean addUser(SyncopeUser user) {\n-        return users.add(user);\n+    public boolean addMembership(Membership membership) {\n+        return memberships.add(membership);\n     }\n \n-    public boolean removeUser(SyncopeUser user) {\n-        return users.remove(user);\n+    public boolean removeMembership(Membership membership) {\n+        return memberships.remove(membership);\n     }\n \n-    public Set<SyncopeUser> getUsers() {\n-        return users;\n+    public Set<Membership> getMemberships() {\n+        return memberships;\n+    }\n+\n+    public void setMemberships(Set<Membership> memberships) {\n+        this.memberships = memberships;\n     }\n \n-    public void setUsers(Set<SyncopeUser> users) {\n-        this.users = users;\n+    public Set<SyncopeUser> getUsers() {\n+        Set<SyncopeUser> result = new HashSet<SyncopeUser>();\n+\n+        for (Membership membership : memberships) {\n+            result.add(membership.getSyncopeUser());\n+        }\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"df8a95309773f00914cd423726a956be1b59d91f","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":22,"deletions":14,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -29,7 +29,6 @@\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n-import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n@@ -39,6 +38,7 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n \n @Entity\n@@ -59,8 +59,9 @@ public class SyncopeUser extends AbstractAttributable {\n     @Basic\n     @Lob\n     private byte[] password;\n-    @ManyToMany(fetch = FetchType.EAGER)\n-    private Set<SyncopeRole> roles;\n+    @OneToMany(cascade = CascadeType.MERGE,\n+    fetch = FetchType.EAGER, mappedBy = \"syncopeUser\")\n+    private Set<Membership> memberships;\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<UserAttribute> attributes;\n@@ -77,7 +78,7 @@ public class SyncopeUser extends AbstractAttributable {\n     private Date tokenExpireTime;\n \n     public SyncopeUser() {\n-        roles = new HashSet<SyncopeRole>();\n+        memberships = new HashSet<Membership>();\n         attributes = new HashSet<UserAttribute>();\n         derivedAttributes = new HashSet<UserDerivedAttribute>();\n     }\n@@ -86,23 +87,30 @@ public Long getId() {\n         return id;\n     }\n \n-    public boolean addRole(SyncopeRole role) {\n-        return roles.add(role);\n+    public boolean addMembership(Membership membership) {\n+        return memberships.add(membership);\n     }\n \n-    public boolean removeRole(SyncopeRole role) {\n-        return roles.remove(role);\n+    public boolean removeMembership(Membership membership) {\n+        return memberships.remove(membership);\n+    }\n+\n+    public Set<Membership> getMemberships() {\n+        return memberships;\n+    }\n+\n+    public void setMemberships(Set<Membership> memberships) {\n+        this.memberships = memberships;\n     }\n \n     public Set<SyncopeRole> getRoles() {\n-        if (roles != null) {\n-            return roles;\n+        Set<SyncopeRole> result = new HashSet<SyncopeRole>();\n+\n+        for (Membership membership : memberships) {\n+            result.add(membership.getSyncopeRole());\n         }\n-        return new HashSet<SyncopeRole>();\n-    }\n \n-    public void setRoles(Set<SyncopeRole> roles) {\n-        this.roles = roles;\n+        return result;\n     }\n \n     public String getPassword() {"},{"sha":"68a4f3ae07641efef143b8c9c403326396d48a2e","filename":"core/src/main/java/org/syncope/core/persistence/dao/MembershipDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+\n+public interface MembershipDAO extends DAO {\n+\n+    Membership find(Long id);\n+\n+    List<Membership> findAll();\n+\n+    Membership save(Membership membership);\n+\n+    void delete(Long id);\n+}"},{"sha":"d8d387be5d0c6f63c4ae0d06c588b0a68398624c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,60 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n+\n+@Repository\n+public class MembershipDAOImpl extends AbstractDAOImpl\n+        implements MembershipDAO {\n+\n+    @Override\n+    public Membership find(Long id) {\n+        return entityManager.find(Membership.class, id);\n+    }\n+\n+    @Override\n+    public List<Membership> findAll() {\n+        Query query = entityManager.createQuery(\"SELECT e FROM Membership e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public Membership save(Membership membership) {\n+        return entityManager.merge(membership);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void delete(Long id) {\n+        Membership membership = find(id);\n+        if (id == null) {\n+            return;\n+        }\n+\n+        membership.getSyncopeUser().removeMembership(membership);\n+        membership.setSyncopeUser(null);\n+        membership.getSyncopeRole().removeMembership(membership);\n+        membership.setSyncopeRole(null);\n+\n+        entityManager.remove(membership);\n+    }\n+}"},{"sha":"97845c5bbabd8b32b3cb69e6f001ba0aac208f25","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -24,6 +24,7 @@\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.membership.MembershipSchema;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n@@ -83,6 +84,7 @@ public <T extends AbstractSchema> void delete(\n             attribute.setSchema(null);\n             attributeDAO.delete(attribute.getId(), attribute.getClass());\n         }\n+        schema.setAttributes(Collections.EMPTY_SET);\n \n         for (SchemaMapping schemaMapping : schema.getMappings()) {\n             if (schema instanceof UserSchema) {\n@@ -91,6 +93,9 @@ public <T extends AbstractSchema> void delete(\n             if (schema instanceof RoleSchema) {\n                 schemaMapping.setRoleSchema(null);\n             }\n+            if (schema instanceof MembershipSchema) {\n+                schemaMapping.setMembershipSchema(null);\n+            }\n \n             schemaMappingDAO.delete(schemaMapping.getId());\n         }"},{"sha":"19a1fdd0620347b2eeb8bb530c42474786c94810","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaMappingDAOImpl.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaMappingDAOImpl.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -20,6 +20,7 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.membership.MembershipSchema;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaMappingDAO;\n@@ -76,6 +77,19 @@ public void delete(Long id) {\n \n         mapping.setUserSchema(null);\n \n+        MembershipSchema membershipSchema = mapping.getMembershipSchema();\n+\n+        mappings = null;\n+        if (membershipSchema != null) {\n+            mappings = membershipSchema.getMappings();\n+        }\n+\n+        if (mappings != null) {\n+            mappings.remove(mapping);\n+        }\n+\n+        mapping.setMembershipSchema(null);\n+\n         Resource resource = mapping.getResource();\n \n         mappings = null;"},{"sha":"c7f9edc94697b9e20b8be2a415ea519bfea51162","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -21,10 +21,10 @@\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.RoleAttribute;\n import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Repository\n@@ -153,6 +153,11 @@ public SyncopeRole save(SyncopeRole syncopeRole) {\n     @Override\n     @Transactional\n     public void delete(Long id) {\n+        SyncopeRole role = find(id);\n+        if (id == null) {\n+            return;\n+        }\n+\n         Query query = entityManager.createQuery(\n                 \"SELECT r FROM SyncopeRole r WHERE \"\n                 + \"parent_id=:id\");\n@@ -162,12 +167,14 @@ public void delete(Long id) {\n             delete(child.getId());\n         }\n \n-        SyncopeRole role = find(id);\n+        for (Membership membership : role.getMemberships()) {\n+            membership.setSyncopeRole(null);\n+            membership.getSyncopeUser().removeMembership(membership);\n+            membership.setSyncopeRole(null);\n \n-        for (SyncopeUser user : role.getUsers()) {\n-            user.removeRole(role);\n+            entityManager.remove(membership);\n         }\n-        role.setUsers(Collections.EMPTY_SET);\n+        role.setMemberships(Collections.EMPTY_SET);\n \n         for (Entitlement entitlement : role.getEntitlements()) {\n             entitlement.removeRole(role);"},{"sha":"6901c3ddf752502666ac838f1be3b77e1e9e7384","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -17,11 +17,13 @@\n import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n @Repository\n@@ -69,11 +71,18 @@ public SyncopeUser save(SyncopeUser syncopeUser) {\n     @Transactional\n     public void delete(Long id) {\n         SyncopeUser user = find(id);\n+        if (id == null) {\n+            return;\n+        }\n+\n+        for (Membership membership : user.getMemberships()) {\n+            membership.setSyncopeUser(null);\n+            membership.getSyncopeRole().removeMembership(membership);\n+            membership.setSyncopeRole(null);\n \n-        for (SyncopeRole role : user.getRoles()) {\n-            role.removeUser(user);\n+            entityManager.remove(membership);\n         }\n-        user.setRoles(Collections.EMPTY_SET);\n+        user.setMemberships(Collections.EMPTY_SET);\n \n         entityManager.remove(user);\n     }"},{"sha":"6ce9e43fed57a60cf380e8fe6a93861fbeaffa75","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -52,7 +52,7 @@ class AbstractAttributableDataBinder {\n     protected SyncopeUserDAO syncopeUserDAO;\n     protected ResourceDAO resourceDAO;\n \n-    protected <T extends AbstractAttributable> T fillAbstractAttributable(\n+    protected <T extends AbstractAttributable> T fill(\n             T abstractAttributable,\n             AbstractAttributableTO abstractAttributableTO,\n             AttributableUtil attributableUtil,\n@@ -209,7 +209,7 @@ protected <T extends AbstractAttributable> T fillAbstractAttributable(\n         return abstractAttributable;\n     }\n \n-    protected <T extends AbstractAttributableTO> T getAbstractAttributableTO(\n+    protected <T extends AbstractAttributableTO> T getTO(\n             T abstractAttributableTO,\n             AbstractAttributable abstractAttributable) {\n "},{"sha":"34754536247d76523633c9b33d130688e134971a","filename":"core/src/main/java/org/syncope/core/rest/data/AttributableUtil.java","status":"modified","additions":36,"deletions":1,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -19,6 +19,11 @@\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.membership.MembershipAttribute;\n+import org.syncope.core.persistence.beans.membership.MembershipAttributeValue;\n+import org.syncope.core.persistence.beans.membership.MembershipDerivedAttribute;\n+import org.syncope.core.persistence.beans.membership.MembershipDerivedSchema;\n+import org.syncope.core.persistence.beans.membership.MembershipSchema;\n import org.syncope.core.persistence.beans.role.RoleAttribute;\n import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n@@ -32,7 +37,7 @@\n \n public enum AttributableUtil {\n \n-    USER, ROLE;\n+    USER, ROLE, MEMBERSHIP;\n \n     public <T extends AbstractSchema> Class<T> getSchemaClass() {\n         Class result = null;\n@@ -44,6 +49,9 @@ public <T extends AbstractSchema> Class<T> getSchemaClass() {\n             case ROLE:\n                 result = RoleSchema.class;\n                 break;\n+            case MEMBERSHIP:\n+                result = MembershipSchema.class;\n+                break;\n         }\n \n         return result;\n@@ -59,6 +67,9 @@ public <T extends AbstractSchema> T newSchema() {\n             case ROLE:\n                 result = (T) new RoleSchema();\n                 break;\n+            case MEMBERSHIP:\n+                result = (T) new MembershipSchema();\n+                break;\n         }\n \n         return result;\n@@ -74,6 +85,9 @@ public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n             case ROLE:\n                 result = RoleDerivedSchema.class;\n                 break;\n+            case MEMBERSHIP:\n+                result = MembershipDerivedSchema.class;\n+                break;\n         }\n \n         return result;\n@@ -89,6 +103,9 @@ public <T extends AbstractDerivedSchema> T newDerivedSchema() {\n             case ROLE:\n                 result = (T) new RoleDerivedSchema();\n                 break;\n+            case MEMBERSHIP:\n+                result = (T) new MembershipDerivedSchema();\n+                break;\n         }\n \n         return result;\n@@ -104,6 +121,9 @@ public <T extends AbstractAttribute> Class<T> getAttributeClass() {\n             case ROLE:\n                 result = RoleAttribute.class;\n                 break;\n+            case MEMBERSHIP:\n+                result = MembershipAttribute.class;\n+                break;\n         }\n \n         return result;\n@@ -119,6 +139,9 @@ public <T extends AbstractAttribute> T newAttribute() {\n             case ROLE:\n                 result = (T) new RoleAttribute();\n                 break;\n+            case MEMBERSHIP:\n+                result = (T) new MembershipAttribute();\n+                break;\n         }\n \n         return result;\n@@ -134,6 +157,9 @@ public <T extends AbstractDerivedAttribute> Class<T> getDerivedAttributeClass()\n             case ROLE:\n                 result = RoleDerivedAttribute.class;\n                 break;\n+            case MEMBERSHIP:\n+                result = MembershipDerivedAttribute.class;\n+                break;\n         }\n \n         return result;\n@@ -149,6 +175,9 @@ public <T extends AbstractDerivedAttribute> T newDerivedAttribute() {\n             case ROLE:\n                 result = (T) new RoleDerivedAttribute();\n                 break;\n+            case MEMBERSHIP:\n+                result = (T) new MembershipDerivedAttribute();\n+                break;\n         }\n \n         return result;\n@@ -164,6 +193,9 @@ public <T extends AbstractAttributeValue> Class<T> getAttributeValueClass() {\n             case ROLE:\n                 result = RoleAttributeValue.class;\n                 break;\n+            case MEMBERSHIP:\n+                result = MembershipAttributeValue.class;\n+                break;\n         }\n \n         return result;\n@@ -179,6 +211,9 @@ public <T extends AbstractAttributeValue> T newAttributeValue() {\n             case ROLE:\n                 result = (T) new RoleAttributeValue();\n                 break;\n+            case MEMBERSHIP:\n+                result = (T) new MembershipAttributeValue();\n+                break;\n         }\n \n         return result;"},{"sha":"1f097fc9e0758ee31fdeb24b3c492e955a9b5152","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":2,"deletions":23,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -28,7 +28,6 @@\n import org.syncope.core.persistence.beans.role.RoleAttribute;\n import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -105,24 +104,9 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             scce.addException(invalidRoles);\n         }\n \n-        syncopeRole = fillAbstractAttributable(\n+        syncopeRole = fill(\n                 syncopeRole, roleTO, AttributableUtil.ROLE, scce);\n \n-        // users\n-        SyncopeUser user = null;\n-        for (Long userId : roleTO.getUsers()) {\n-            user = syncopeUserDAO.find(userId);\n-\n-            if (user == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid user \" + userId);\n-                }\n-            } else {\n-                syncopeRole.addUser(user);\n-                user.addRole(syncopeRole);\n-            }\n-        }\n-\n         return syncopeRole;\n     }\n \n@@ -136,12 +120,7 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n-        roleTO = getAbstractAttributableTO(roleTO, role);\n-\n-        // users\n-        for (SyncopeUser user : role.getUsers()) {\n-            roleTO.addUser(user.getId());\n-        }\n+        roleTO = getTO(roleTO, role);\n \n         AttributeTO attributeTO = null;\n "},{"sha":"24213570053f69c8402d3f6a31d4a1a757fbf747","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":30,"deletions":11,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -17,16 +17,20 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n+import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -36,12 +40,15 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n     public UserDataBinder(SchemaDAO schemaDAO,\n             AttributeValueDAO attributeValueDAO,\n             DerivedSchemaDAO derivedSchemaDAO,\n+            SyncopeUserDAO syncopeUserDAO,\n             SyncopeRoleDAO syncopeRoleDAO,\n-            ResourceDAO resourceDAO) {\n+            ResourceDAO resourceDAO,\n+            MembershipDAO membershipDAO) {\n \n         this.schemaDAO = schemaDAO;\n         this.attributeValueDAO = attributeValueDAO;\n         this.derivedSchemaDAO = derivedSchemaDAO;\n+        this.syncopeUserDAO = syncopeUserDAO;\n         this.syncopeRoleDAO = syncopeRoleDAO;\n         this.resourceDAO = resourceDAO;\n     }\n@@ -74,21 +81,28 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n             scce.addException(invalidPassword);\n         }\n \n-        syncopeUser = fillAbstractAttributable(\n+        syncopeUser = fill(\n                 syncopeUser, userTO, AttributableUtil.USER, scce);\n \n-        // roles\n+        // memberships\n         SyncopeRole role = null;\n-        for (Long roleId : userTO.getRoles()) {\n-            role = syncopeRoleDAO.find(roleId);\n+        for (MembershipTO membershipTO : userTO.getMemberships()) {\n+            role = syncopeRoleDAO.find(membershipTO.getRole());\n \n             if (role == null) {\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid role \" + roleId);\n+                    log.debug(\"Ignoring invalid role \"\n+                            + membershipTO.getRole());\n                 }\n             } else {\n-                syncopeUser.addRole(role);\n-                role.addUser(syncopeUser);\n+                Membership membership = new Membership();\n+                membership.setSyncopeRole(role);\n+                membership.setSyncopeUser(syncopeUser);\n+\n+                membership = fill(membership, membershipTO,\n+                        AttributableUtil.MEMBERSHIP, scce);\n+\n+                syncopeUser.addMembership(membership);\n             }\n         }\n \n@@ -103,10 +117,15 @@ public UserTO getUserTO(SyncopeUser user) {\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n         userTO.setPassword(user.getPassword());\n \n-        userTO = getAbstractAttributableTO(userTO, user);\n+        userTO = getTO(userTO, user);\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        for (Membership membership : user.getMemberships()) {\n+            membershipTO.setRole(membership.getSyncopeRole().getId());\n+\n+            membershipTO = getTO(membershipTO, membership);\n \n-        for (SyncopeRole role : user.getRoles()) {\n-            userTO.addRole(role.getId());\n+            userTO.addMembership(membershipTO);\n         }\n \n         return userTO;"},{"sha":"fdf7fd6ed8985c6e80328fd5857700b5d1a0bc40","filename":"core/src/main/java/org/syncope/core/workflow/prcsiam/OpenAMUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FOpenAMUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FOpenAMUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Fprcsiam%2FOpenAMUtils.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -34,7 +34,7 @@ public static String getRealmFromRoles(Set<SyncopeRole> roles) {\n                 role = role.getParent();\n             }\n             if (role.getParent() != null) {\n-                realm = role.getName();\n+                realm = String.valueOf(role.getId());\n             }\n         }\n "},{"sha":"7f3d4c96a786802418b558341c224d1ce222a027","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -65,19 +65,29 @@\n \n     <RoleSchema name=\"applicationType\" type=\"String\" virtual=\"false\"\n                 mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n-\n+                      \n     <SyncopeRole id=\"0\" name=\"/\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n-    <SyncopeRole id=\"1\" name=\"applicationCluster1\" parent_id=\"0\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n-    <SyncopeRole id=\"2\" name=\"applicationCluster2\" parent_id=\"0\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n-    <SyncopeRole id=\"3\" name=\"application1\" parent_id=\"1\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n-    <SyncopeRole id=\"4\" name=\"application2\" parent_id=\"1\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n+    <SyncopeRole id=\"1\" name=\"EDUCATION2\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"2\" name=\"ABBONAMENTI2009\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"3\" name=\"PORTFEM\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"4\" name=\"MAIN_OUTSIDE_FENCE\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"5\" name=\"COMPARTIMENTO_PAN\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"6\" name=\"MAIN\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"7\" name=\"ATCASA\" parent_id=\"0\" inheritAttributes=\"TRUE\" inheritDerivedAttributes=\"TRUE\"/>\n+    <SyncopeRole id=\"10\" name=\"testApplication1\" parent_id=\"1\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n+    <SyncopeRole id=\"11\" name=\"testApplication2\" parent_id=\"1\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n+    <SyncopeRole id=\"20\" name=\"testApplication3\" parent_id=\"2\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n \n     <RoleAttribute id=\"10\" owner_id=\"4\" schema_name=\"applicationType\"/>\n     <RoleAttribute id=\"11\" owner_id=\"3\" schema_name=\"applicationType\"/>\n \n     <RoleAttributeValue attribute_id=\"10\" id=\"100\" stringValue=\"mobile\"/>\n     <RoleAttributeValue attribute_id=\"11\" id=\"101\" stringValue=\"e-commerce\"/>\n \n+    <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"false\"\n+                      mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"\n+                      conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n+\n     <ConnectorInstance id=\"1\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\""},{"sha":"5dfb792a85ff0c0553c3f930d62a886d3173474d","filename":"core/src/test/java/org/syncope/core/test/persistence/MembershipDAOTest.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FMembershipDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FMembershipDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FMembershipDAOTest.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -0,0 +1,75 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+\n+@Transactional\n+public class MembershipDAOTest extends AbstractTest {\n+\n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+\n+    @Test\n+    public final void findAll() {\n+        List<Membership> list = membershipDAO.findAll();\n+        assertEquals(4, list.size());\n+    }\n+\n+    @Test\n+    public final void find() {\n+        Membership membership = membershipDAO.find(1L);\n+        assertNotNull(\"did not find expected membership\", membership);\n+    }\n+\n+    @Test\n+    public final void save() {\n+        SyncopeUser user = syncopeUserDAO.find(4L);\n+        SyncopeRole role = syncopeRoleDAO.find(1L);\n+\n+        Membership membership = new Membership();\n+        membership.setSyncopeUser(user);\n+        membership.setSyncopeRole(role);\n+\n+        membership = membershipDAO.save(membership);\n+\n+        Membership actual = membershipDAO.find(membership.getId());\n+        assertNotNull(\"expected save to work\", actual);\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        Membership membership = membershipDAO.find(4L);\n+        membershipDAO.delete(membership.getId());\n+\n+        Membership actual = membershipDAO.find(4L);\n+        assertNull(\"delete did not work\", actual);\n+    }\n+}"},{"sha":"0c3e55d6721778f99cd225fa0b2c1ff7f460fe68","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -24,6 +24,7 @@\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.SearchParameters;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.UserTOs;\n@@ -89,7 +90,9 @@ public void create() {\n         attrWithInvalidSchemaTO.addValue(\"a value\");\n         userTO.addAttribute(attrWithInvalidSchemaTO);\n \n-        userTO.addRole(8L);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRole(8L);\n+        userTO.addMembership(membershipTO);\n \n         // 1. create user\n         UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\","},{"sha":"b5fdaa8735d06ec3442711e9d3a71e4f24b7bdd6","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/006fb5b673b26a47f91308b465abd34ce83a8eee/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=006fb5b673b26a47f91308b465abd34ce83a8eee","patch":"@@ -46,10 +46,10 @@\n     <SyncopeRole id=\"7\" name=\"managingDirector\" parent_id=\"6\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n     <SyncopeRole id=\"8\" name=\"otherchild\" parent_id=\"1\" inheritAttributes=\"FALSE\" inheritDerivedAttributes=\"FALSE\"/>\n \n-    <SyncopeUser_SyncopeRole users_id=\"1\" roles_id=\"1\"/>\n-    <SyncopeUser_SyncopeRole users_id=\"2\" roles_id=\"1\"/>\n-    <SyncopeUser_SyncopeRole users_id=\"2\" roles_id=\"2\"/>\n-    <SyncopeUser_SyncopeRole users_id=\"4\" roles_id=\"7\"/>\n+    <Membership id=\"1\" syncopeUser_id=\"1\" syncopeRole_id=\"1\"/>\n+    <Membership id=\"2\" syncopeUser_id=\"2\" syncopeRole_id=\"1\"/>\n+    <Membership id=\"3\" syncopeUser_id=\"2\" syncopeRole_id=\"2\"/>\n+    <Membership id=\"4\" syncopeUser_id=\"4\" syncopeRole_id=\"7\"/>\n \n     <UserSchema name=\"username\" type=\"String\" virtual=\"false\"\n                 mandatory=\"true\" multivalue=\"false\" uniquevalue=\"true\"/>\n@@ -75,6 +75,10 @@\n     <RoleSchema name=\"show\" type=\"Boolean\" virtual=\"false\"\n                 mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"/>\n \n+    <MembershipSchema name=\"subscriptionDate\" type=\"Date\" virtual=\"false\"\n+                      mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"\n+                      conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n+\n     <UserAttribute id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n     <UserAttribute id=\"200\" owner_id=\"1\" schema_name=\"loginDate\"/>\n     <UserAttribute id=\"300\" owner_id=\"2\" schema_name=\"username\"/>\n@@ -88,6 +92,8 @@\n     <RoleAttribute id=\"900\" owner_id=\"6\" schema_name=\"icon\"/>\n     <RoleAttribute id=\"950\" owner_id=\"4\" schema_name=\"icon\"/>\n \n+    <MembershipAttribute id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n+\n     <UserAttributeValue attribute_id=\"100\" id=\"10\" stringValue=\"chicchiricco\"/>\n     <UserAttributeValue attribute_id=\"300\" id=\"11\" stringValue=\"fabio.martelli\"/>\n     <UserAttributeValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n@@ -102,12 +108,15 @@\n     <RoleAttributeValue attribute_id=\"900\" id=\"43\" stringValue=\"icon6\"/>\n     <RoleAttributeValue attribute_id=\"950\" id=\"44\" stringValue=\"icon4\"/>\n \n+    <MembershipAttributeValue attribute_id=\"1000\" id=\"90\" dateValue=\"2009-05-26\"/>\n+    <MembershipAttributeValue attribute_id=\"1000\" id=\"91\" dateValue=\"2010-05-26 15:40:04\"/>\n+\n     <UserDerivedSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n     \n     <UserDerivedSchema_UserSchema derivedSchemas_name=\"cn\"\n-                                  schemas_name=\"surname\" />\n+                                  schemas_name=\"surname\"/>\n     <UserDerivedSchema_UserSchema derivedSchemas_name=\"cn\"\n-                                  schemas_name=\"firstname\" />\n+                                  schemas_name=\"firstname\"/>\n                                             \n     <UserDerivedAttribute id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n "}]}