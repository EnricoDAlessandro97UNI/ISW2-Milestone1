{"sha":"926bc6673603d824c6693bde98a73604005ef2ea","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkyNmJjNjY3MzYwM2Q4MjRjNjY5M2JkZTk4YTczNjA0MDA1ZWYyZWE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-09T09:37:57Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-09T09:37:57Z"},"message":"Fixing Quartz NotificationJob trigger loading upon startup\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247183 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5085cbb485f1793ce515fa0e14b6b0abe17d4a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a5085cbb485f1793ce515fa0e14b6b0abe17d4a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/926bc6673603d824c6693bde98a73604005ef2ea","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/926bc6673603d824c6693bde98a73604005ef2ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/926bc6673603d824c6693bde98a73604005ef2ea","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/926bc6673603d824c6693bde98a73604005ef2ea/comments","author":null,"committer":null,"parents":[{"sha":"9248e60a7b187994801ec159128bbaf8621f06ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9248e60a7b187994801ec159128bbaf8621f06ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9248e60a7b187994801ec159128bbaf8621f06ef"}],"stats":{"total":82,"additions":36,"deletions":46},"files":[{"sha":"b6b1c75ff3946c36f0714da351f5873c95dbd915","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":31,"deletions":17,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/926bc6673603d824c6693bde98a73604005ef2ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/926bc6673603d824c6693bde98a73604005ef2ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=926bc6673603d824c6693bde98a73604005ef2ea","patch":"@@ -34,13 +34,14 @@\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.scheduling.AppContextMethodInvokingJobDetailFactoryBean;\n import org.syncope.core.scheduling.Job;\n+import org.syncope.core.scheduling.NotificationJob;\n import org.syncope.core.util.ApplicationContextManager;\n \n @Component\n public class JobInstanceLoader extends AbstractLoader {\n-    \n+\n     private static final Logger LOG = LoggerFactory.getLogger(\n-                    JobInstanceLoader.class);\n+            JobInstanceLoader.class);\n \n     @Autowired\n     private SchedulerFactoryBean scheduler;\n@@ -64,53 +65,56 @@ public static String getTriggerName(final Long taskId) {\n         return \"Trigger_\" + getJobDetailName(taskId);\n     }\n \n-    public void registerJob(final SchedTask task)\n+    public void registerJob(final Long taskId, final String jobClassName,\n+            final String cronExpression)\n             throws Exception {\n \n-        unregisterJob(task.getId());\n+        unregisterJob(taskId);\n \n         ConfigurableApplicationContext ctx =\n                 ApplicationContextManager.getApplicationContext();\n \n         MutablePropertyValues mpv = new MutablePropertyValues();\n-        mpv.add(\"taskId\", task.getId());\n+        if (!NotificationJob.class.getName().equals(jobClassName)) {\n+            mpv.add(\"taskId\", taskId);\n+        }\n         GenericBeanDefinition bd = new GenericBeanDefinition();\n-        bd.setBeanClassName(task.getJobClassName());\n+        bd.setBeanClassName(jobClassName);\n         bd.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);\n         bd.setPropertyValues(mpv);\n-        getBeanFactory().registerBeanDefinition(getJobName(task.getId()), bd);\n+        getBeanFactory().registerBeanDefinition(getJobName(taskId), bd);\n \n         mpv = new MutablePropertyValues();\n-        mpv.add(\"target\", ctx.getBean(getJobName(task.getId())));\n+        mpv.add(\"target\", ctx.getBean(getJobName(taskId)));\n         mpv.add(\"proxyInterfaces\", Job.class.getName());\n         mpv.add(\"interceptorNames\", \"jpaInterceptor\");\n         bd = new GenericBeanDefinition();\n         bd.setBeanClass(ProxyFactoryBean.class);\n         bd.setPropertyValues(mpv);\n         getBeanFactory().registerBeanDefinition(\n-                getJobProxyName(task.getId()), bd);\n+                getJobProxyName(taskId), bd);\n \n         AppContextMethodInvokingJobDetailFactoryBean jobDetailFactory =\n                 (AppContextMethodInvokingJobDetailFactoryBean) getBeanFactory().\n                 autowire(AppContextMethodInvokingJobDetailFactoryBean.class,\n                 AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-        jobDetailFactory.setTargetBeanName(getJobProxyName(task.getId()));\n+        jobDetailFactory.setTargetBeanName(getJobProxyName(taskId));\n         jobDetailFactory.setTargetMethod(\"execute\");\n         jobDetailFactory.afterPropertiesSet();\n-        getBeanFactory().registerSingleton(getJobDetailName(task.getId()),\n+        getBeanFactory().registerSingleton(getJobDetailName(taskId),\n                 jobDetailFactory);\n \n         JobDetail jobDetail = (JobDetail) ctx.getBean(\n-                getJobDetailName(task.getId()));\n-        jobDetail.setName(getJobDetailName(task.getId()));\n+                getJobDetailName(taskId));\n+        jobDetail.setName(getJobDetailName(taskId));\n         jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n \n-        if (task.getCronExpression() == null) {\n+        if (cronExpression == null) {\n             scheduler.getScheduler().addJob(jobDetail, true);\n         } else {\n             CronTriggerBean cronTrigger = new CronTriggerBean();\n-            cronTrigger.setName(getTriggerName(task.getId()));\n-            cronTrigger.setCronExpression(task.getCronExpression());\n+            cronTrigger.setName(getTriggerName(taskId));\n+            cronTrigger.setCronExpression(cronExpression);\n \n             scheduler.getScheduler().scheduleJob(jobDetail, cronTrigger);\n         }\n@@ -141,15 +145,25 @@ public void unregisterJob(final Long taskId) {\n     @Override\n     @Transactional(readOnly = true)\n     public void load() {\n+        // 1. jobs for SchedTasks\n         List<SchedTask> tasks = taskDAO.findAll(SchedTask.class);\n         tasks.addAll(taskDAO.findAll(SyncTask.class));\n         for (SchedTask task : tasks) {\n             try {\n-                registerJob(task);\n+                registerJob(task.getId(), task.getJobClassName(),\n+                        task.getCronExpression());\n             } catch (Exception e) {\n                 LOG.error(\"While loading job instance for task \"\n                         + task.getId(), e);\n             }\n         }\n+\n+        // 2.NotificationJob\n+        try {\n+            registerJob(-1L, NotificationJob.class.getName(),\n+                    \"0 0/2 * * * ?\");\n+        } catch (Exception e) {\n+            LOG.error(\"While loading NotificationJob instance\", e);\n+        }\n     }\n }"},{"sha":"bc9ea891cb43eab2e19c1508122ae1ecaae98bfb","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/926bc6673603d824c6693bde98a73604005ef2ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/926bc6673603d824c6693bde98a73604005ef2ea/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=926bc6673603d824c6693bde98a73604005ef2ea","patch":"@@ -138,7 +138,8 @@ public TaskTO createSchedTask(final HttpServletResponse response,\n         }\n \n         try {\n-            jobInstanceLoader.registerJob(task);\n+            jobInstanceLoader.registerJob(task.getId(), task.getJobClassName(),\n+                    task.getCronExpression());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \"\n                     + task.getId(), e);\n@@ -204,7 +205,8 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO)\n         }\n \n         try {\n-            jobInstanceLoader.registerJob(task);\n+            jobInstanceLoader.registerJob(task.getId(), task.getJobClassName(),\n+                    task.getCronExpression());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \"\n                     + task.getId(), e);"},{"sha":"7721306747adade4055fed826f42e74ac552b6f4","filename":"core/src/main/resources/schedulingContext.xml","status":"modified","additions":1,"deletions":27,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/926bc6673603d824c6693bde98a73604005ef2ea/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/926bc6673603d824c6693bde98a73604005ef2ea/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FschedulingContext.xml?ref=926bc6673603d824c6693bde98a73604005ef2ea","patch":"@@ -40,28 +40,7 @@\n         <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n \n-    <bean id=\"notificationJob\" class=\"org.syncope.core.scheduling.NotificationJob\" scope=\"prototype\"/>    \n-    <bean id=\"notificationJobProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\" scope=\"prototype\">\n-        <property name=\"target\" ref=\"notificationJob\"/>\n-        <property name=\"proxyInterfaces\">\n-            <list>\n-                <value>org.syncope.core.scheduling.Job</value>    \n-            </list>    \n-        </property>\n-        <property name=\"interceptorNames\">\n-            <list>\n-                <value>jpaInterceptor</value>    \n-            </list>    \n-        </property>\n-    </bean> \n-    <bean id=\"notificationJobFactoryBean\" class=\"org.syncope.core.scheduling.AppContextMethodInvokingJobDetailFactoryBean\">\n-        <property name=\"targetBeanName\" value=\"notificationJobProxy\"/>\n-        <property name=\"targetMethod\" value=\"execute\"/>\n-    </bean>\n-    <bean id=\"notificationTrigger\" class=\"org.springframework.scheduling.quartz.CronTriggerBean\">\n-        <property name=\"jobDetail\" ref=\"notificationJobFactoryBean\"/>\n-        <property name=\"cronExpression\" value=\"0 0/2 * * * ?\"/>\n-    </bean>\n+    <bean id=\"notificationJob\" class=\"org.syncope.core.scheduling.NotificationJob\"/>\n     \n     <bean id=\"scheduler\"\n \t  class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n@@ -86,10 +65,5 @@\n                 <prop key=\"org.quartz.scheduler.jmx.export\">true</prop>\n             </props>\n         </property>\n-        <property name=\"triggers\">\n-            <list>\n-                <ref bean=\"notificationTrigger\"/>\n-            </list>\n-        </property>\n     </bean>\n </beans>"}]}