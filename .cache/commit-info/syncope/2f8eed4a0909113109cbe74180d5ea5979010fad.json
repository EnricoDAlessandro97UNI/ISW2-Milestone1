{"sha":"2f8eed4a0909113109cbe74180d5ea5979010fad","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJmOGVlZDRhMDkwOTExMzEwOWNiZTc0MTgwZDVlYTU5NzkwMTBmYWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-07T12:01:51Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-07T12:01:51Z"},"message":"added rest methods for connector and resource mapping\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba7e454cb5a251fe0320946b8bb016f364f41498","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ba7e454cb5a251fe0320946b8bb016f364f41498"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2f8eed4a0909113109cbe74180d5ea5979010fad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2f8eed4a0909113109cbe74180d5ea5979010fad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2f8eed4a0909113109cbe74180d5ea5979010fad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2f8eed4a0909113109cbe74180d5ea5979010fad/comments","author":null,"committer":null,"parents":[{"sha":"6ba3d24a7d06c5e19c1c37ab1d0aebe1e828e90b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ba3d24a7d06c5e19c1c37ab1d0aebe1e828e90b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6ba3d24a7d06c5e19c1c37ab1d0aebe1e828e90b"}],"stats":{"total":1854,"additions":1732,"deletions":122},"files":[{"sha":"6a48b7d83571914648a83b1181fd81af580fe4e6","filename":"client/src/main/java/org/syncope/client/to/ConnectorBundleTO.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTO.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,82 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ConnectorBundleTO extends AbstractBaseTO {\n+\n+    private String displayName;\n+\n+    private String bundleName;\n+\n+    private String version;\n+\n+    private String connectorName;\n+\n+    private List<String> properties;\n+\n+    public String getBundleName() {\n+        return bundleName;\n+    }\n+\n+    public void setBundleName(String bundleName) {\n+        this.bundleName = bundleName;\n+    }\n+\n+    public String getConnectorName() {\n+        return connectorName;\n+    }\n+\n+    public void setConnectorName(String connectorName) {\n+        this.connectorName = connectorName;\n+    }\n+\n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    public void setDisplayName(String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n+    public List<String> getProperties() {\n+        if (this.properties == null) this.properties = new ArrayList<String>();\n+        return properties;\n+    }\n+\n+    public void setProperties(List<String> properties) {\n+        this.properties = properties;\n+    }\n+\n+    public boolean addProperty(String property) {\n+        if (this.properties == null) this.properties = new ArrayList<String>();\n+        return this.properties.add(property);\n+    }\n+\n+    public boolean removeProperty(String property) {\n+        if (this.properties == null) return true;\n+        return this.properties.remove(property);\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"aa09a77c89775522c62cc8f275254fe65a5e3e17","filename":"client/src/main/java/org/syncope/client/to/ConnectorBundleTOs.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,54 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ConnectorBundleTOs extends AbstractBaseTO\n+        implements Iterable<ConnectorBundleTO> {\n+\n+    private List<ConnectorBundleTO> bundles;\n+\n+    public List<ConnectorBundleTO> getBundles() {\n+        return bundles;\n+    }\n+\n+    public void setBundles(List<ConnectorBundleTO> bundles) {\n+        this.bundles = bundles;\n+    }\n+\n+    public boolean addBundle(ConnectorBundleTO bundle) {\n+        if (this.bundles == null)\n+            this.bundles = new ArrayList<ConnectorBundleTO>();\n+\n+        return this.bundles.add(bundle);\n+    }\n+\n+    public boolean removeBundle(ConnectorBundleTO bundle) {\n+        if (this.bundles == null) return true;\n+        return this.bundles.remove(bundle);\n+    }\n+\n+    @Override\n+    public Iterator<ConnectorBundleTO> iterator() {\n+        if (this.bundles == null) {\n+            this.bundles = new ArrayList<ConnectorBundleTO>();\n+        }\n+\n+        return this.bundles.iterator();\n+    }\n+}"},{"sha":"afaa8dea4fa48e8c13c7f9d505442b6665d6f306","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTOs.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -35,8 +35,26 @@ public void setInstances(List<ConnectorInstanceTO> instances) {\n         this.instances = instances;\n     }\n \n+    public boolean addInstance(ConnectorInstanceTO instance) {\n+        if (this.instances == null) {\n+            this.instances = new ArrayList<ConnectorInstanceTO>();\n+        }\n+\n+        return this.instances.add(instance);\n+    }\n+\n+    public boolean removeInstance(ConnectorInstanceTO instance) {\n+        if (this.instances == null) return true;\n+\n+        return this.instances.remove(instance);\n+    }\n+\n     @Override\n     public Iterator<ConnectorInstanceTO> iterator() {\n-        return instances.iterator();\n+        if (this.instances == null) {\n+            this.instances = new ArrayList<ConnectorInstanceTO>();\n+        }\n+\n+        return this.instances.iterator();\n     }\n }"},{"sha":"73e3009d8c81372ca18d2fe5dcf8394a8250c320","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTO.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,111 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class SchemaMappingTO extends AbstractBaseTO {\n+\n+    private Long id;\n+\n+    /**\n+     * Attribute schema to be mapped.\n+     * Consider that we can associate tha same attribute schema more\n+     * than once, with different aliases, to different resource attributes.\n+     */\n+    private String userSchema;\n+\n+    /**\n+     * Attribute schema to be mapped.\n+     * Consider that we can associate tha same attribute schema more\n+     * than once, with different aliases, to different resource attributes.\n+     */\n+    private String roleSchema;\n+\n+    /**\n+     * Target resource's field to be mapped.\n+     */\n+    private String field;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the key.\n+     */\n+    private boolean accountid;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the password.\n+     */\n+    private boolean password;\n+\n+    /**\n+     * Specify if the mapped target resource's field is nullable.\n+     */\n+    private boolean nullable;\n+\n+    public boolean isAccountid() {\n+        return accountid;\n+    }\n+\n+    public void setAccountid(boolean accountid) {\n+        this.accountid = accountid;\n+    }\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public void setField(String field) {\n+        this.field = field;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public boolean isNullable() {\n+        return nullable;\n+    }\n+\n+    public void setNullable(boolean nullable) {\n+        this.nullable = nullable;\n+    }\n+\n+    public boolean isPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(boolean password) {\n+        this.password = password;\n+    }\n+\n+    public String getRoleSchema() {\n+        return roleSchema;\n+    }\n+\n+    public void setRoleSchema(String roleSchema) {\n+        this.roleSchema = roleSchema;\n+    }\n+\n+    public String getUserSchema() {\n+        return userSchema;\n+    }\n+\n+    public void setUserSchema(String userSchema) {\n+        this.userSchema = userSchema;\n+    }\n+    \n+}"},{"sha":"8425af0853524b293de5559b7802d3576a4d4d88","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTOs.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,66 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class SchemaMappingTOs extends AbstractBaseTO\n+        implements Iterable<SchemaMappingTO> {\n+\n+    private List<SchemaMappingTO> mappings;\n+\n+    public List<SchemaMappingTO> getMappings() {\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMappingTO>();\n+        }\n+        return this.mappings;\n+    }\n+\n+    public void setMappings(List<SchemaMappingTO> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    public boolean addMapping(SchemaMappingTO mapping) {\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMappingTO>();\n+        }\n+\n+        return this.mappings.add(mapping);\n+    }\n+\n+    public boolean addAllMappings(List<SchemaMappingTO> mappings) {\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMappingTO>();\n+        }\n+\n+        return this.mappings.addAll(mappings);\n+    }\n+\n+    public boolean removeMapping(SchemaMappingTO mapping) {\n+        if (this.mappings == null) return true;\n+        return this.mappings.remove(mapping);\n+    }\n+\n+    @Override\n+    public Iterator<SchemaMappingTO> iterator() {\n+        if (this.mappings == null) {\n+            this.mappings = new ArrayList<SchemaMappingTO>();\n+        }\n+\n+        return this.mappings.iterator();\n+    }\n+}"},{"sha":"da81e1e67eef9cb67ba9bbb1f32ae2f1cd309e64","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -46,9 +46,12 @@ public enum SyncopeClientExceptionType {\n     UserInvalidValues(\n     \"Syncope.InvalidValues\",\n     \"Syncope.InvalidValues.attributeName\"),\n-    ConnectorRequiredValueMissing(\n+    RequiredValueMissing(\n     \"Syncope.RequiredValuesMissing\",\n-    \"Syncope.RequiredValuesMissing.attributeName\");\n+    \"Syncope.RequiredValuesMissing.attributeName\"),\n+    Unknown(\n+    \"Syncope.Unknown\",\n+    \"\");\n \n     private String headerValue;\n "},{"sha":"60cd97886c2536b0709da7e4b890c448548324ad","filename":"core/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -520,7 +520,6 @@\n             <!-- in order to copy bundles and test connector controller -->\n             <plugin>\n                 <artifactId>maven-resources-plugin</artifactId>\n-                <version>2.4.3</version>\n                 <executions>\n                     <execution>\n                         <id>copy-resources</id>"},{"sha":"97515bcd3aee2346836b9a302d03a7c06e2e5d85","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceBeansLoader.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,105 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.util.List;\n+import java.util.Set;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.api.ConnectorInfoManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.client.to.PropertyTO;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n+import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.rest.controller.ConnectorInstanceController;\n+import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n+\n+public class ConnectorInstanceBeansLoader implements ServletContextListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            ConnectorInstanceBeansLoader.class);\n+\n+    /**\n+     * <em>WARNING</em>: this method connects to the database by mean of the \n+     * underlying Spring's datasource, not using the provided one, to be fetched\n+     * via JNDI. This in order to avoid potential conflicts and problems with\n+     * DbUnit.\n+     * @param sce\n+     */\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce) {\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        DefaultListableBeanFactory beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        ConnectorInstanceDAO connectorInstanceDAO =\n+                (ConnectorInstanceDAO) context.getBean(\n+                \"connectorInstanceDAOImpl\");\n+\n+        SyncopeConfigurationDAO syncopeConfigurationDAO =\n+                (SyncopeConfigurationDAO) context.getBean(\n+                \"syncopeConfigurationDAOImpl\");\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                syncopeConfigurationDAO.find(\n+                \"identityconnectors.bundle.directory\");\n+\n+        List<ConnectorInstance> instances = connectorInstanceDAO.findAll();\n+        Set<PropertyTO> properties = null;\n+\n+        for (ConnectorInstance instance : instances) {\n+            try {\n+\n+                properties = (Set<PropertyTO>) ConnectorInstanceDataBinder.buildFromXML(\n+                        instance.getXmlConfiguration());\n+\n+                ConnectorInfoManager manager =\n+                        ConnectorInstanceController.getConnectorManager(\n+                        syncopeConfiguration.getConfValue());\n+\n+                ConnectorFacade connector =\n+                        ConnectorInstanceController.getConnectorFacade(\n+                        manager,\n+                        instance.getBundleName(),\n+                        instance.getVersion(),\n+                        instance.getConnectorName(),\n+                        properties);\n+\n+                beanFactory.registerSingleton(\n+                        instance.getId().toString(), connector);\n+\n+                if (log.isInfoEnabled()) {\n+                    log.info(\"Registered bean \" + instance.getId().toString());\n+                }\n+\n+            } catch (Throwable t) {\n+                log.error(\"While loading default content\", t);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce) {\n+    }\n+}"},{"sha":"b76d915070bbea83dba94a99a2baf39164d19717","filename":"core/src/main/java/org/syncope/core/persistence/PropagationManager.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,246 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.util.ApplicationContextManager;\n+\n+public class PropagationManager {\n+\n+    private static final Logger log =\n+            LoggerFactory.getLogger(PropagationManager.class);\n+\n+    /**\n+     * Performs provisioning on each resource associated to the user.\n+     * Exceptions will be ignored.\n+     * @param user to be created.\n+     * @return a set of provisioned resources.\n+     */\n+    public Set<String> provision(SyncopeUser user) {\n+        return provision(user, false, false);\n+    }\n+\n+    /**\n+     * Performs provisioning on each resource associated to the user.\n+     * If we ask for a synchronous provisioning passing true as second argument,\n+     * than exceptions won't be ignored but the process will be stoppend and a\n+     * runtime exception will be returned.\n+     * @param user to be created.\n+     * @param synchronous to ask for a synchronous or asynchronous provisioning.\n+     * @return a set of provisioned resources.\n+     */\n+    public Set<String> provision(SyncopeUser user, boolean synchronous) {\n+        return provision(user, synchronous, false);\n+    }\n+\n+    /**\n+     * Performs update on each resource associated to the user.\n+     * Exceptions will be ignored.\n+     * @param user to be updated.\n+     * @return a set of updated resources.\n+     */\n+    public Set<String> update(SyncopeUser user) {\n+        return provision(user, false, true);\n+    }\n+\n+    /**\n+     * Performs update on each resource associated to the user.\n+     * If we ask for a synchronous update passing true as second argument,\n+     * than exceptions won't be ignored but the process will be stoppend and a\n+     * runtime exception will be returned.\n+     * @param user to be updated.\n+     * @param synchronous to ask for a synchronous or asynchronous update.\n+     * @return a set of updated resources.\n+     */\n+    public Set<String> update(SyncopeUser user, boolean synchronous) {\n+        return provision(user, synchronous, true);\n+    }\n+\n+    /**\n+     * Implementation of the provisioning feature.\n+     * @param user\n+     * @param synchronous\n+     * @param merge\n+     * @return\n+     */\n+    private Set<String> provision(\n+            SyncopeUser user, boolean synchronous, boolean merge) {\n+\n+        Set<String> provisioned = new HashSet<String>();\n+\n+        Set<Resource> resources = user.getResources();\n+        Set<SyncopeRole> roles = user.getRoles();\n+\n+        for (SyncopeRole role : roles) {\n+            resources.addAll(role.getResources());\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"Provisioning \" + resources +\n+                    \" with user \" + user.getId());\n+        }\n+\n+        for (Resource resource : resources) {\n+            try {\n+\n+                propagate(user, resource, merge);\n+                provisioned.add(resource.getName());\n+\n+            } catch (RuntimeException re) {\n+\n+                if (log.isErrorEnabled()) {\n+                    log.error(\n+                            \"Runtime exception during provision on resource \" +\n+                            resource.getName(), re);\n+                }\n+\n+                if (synchronous) {\n+                    throw re;\n+                }\n+\n+            } catch (Throwable t) {\n+\n+                if (log.isErrorEnabled()) {\n+                    log.error(\n+                            \"Unknown exception during provision on resource \" +\n+                            resource.getName(), t);\n+                }\n+\n+                if (synchronous) {\n+                    throw new RuntimeException(t.getMessage());\n+                }\n+            }\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"Provisioned \" + provisioned +\n+                    \" with user \" + user.getId());\n+        }\n+\n+        return provisioned;\n+    }\n+\n+    /**\n+     * Propagate provision/update the resource indicated.\n+     * @param user to be created.\n+     * @param resource to be provisioned.\n+     * @param merge specifies if it must be performed an update (true) or a\n+     * creation (false).\n+     * @throws NoSuchBeanDefinitionException if the connector bean doesn't\n+     * exist.\n+     * @throws IllegalStateException if propagation fails.\n+     */\n+    private void propagate(SyncopeUser user, Resource resource, boolean merge)\n+            throws NoSuchBeanDefinitionException, IllegalStateException {\n+\n+        ConnectorInstance connectorInstance = resource.getConnector();\n+\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        DefaultListableBeanFactory beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        ConnectorFacade connector = (ConnectorFacade) beanFactory.getSingleton(\n+                connectorInstance.getId().toString());\n+\n+        if (connector == null) {\n+            if (log.isErrorEnabled()) {\n+\n+                log.error(\"Connector instance bean \" +\n+                        connectorInstance.getId().toString() +\n+                        \" not found\");\n+\n+            }\n+\n+            throw new NoSuchBeanDefinitionException(\n+                    \"Connector instance bean not found\");\n+        }\n+\n+        Set<SchemaMapping> mappings = resource.getMappings();\n+\n+        Set<Attribute> attrs = new HashSet<Attribute>();\n+\n+        String accountId = null;\n+        String field = null;\n+        String password = user.getPassword();\n+\n+        for (SchemaMapping mapping : mappings) {\n+\n+            field = mapping.getField();\n+\n+            Object value = user.getAttribute(mapping.getUserSchema().getName());\n+\n+            if (value != null && mapping.isAccountid()) {\n+                accountId = value.toString();\n+                attrs.add(new Name(accountId));\n+            }\n+\n+            if (password != null && mapping.isPassword()) {\n+                attrs.add(AttributeBuilder.buildPassword(\n+                        password.toCharArray()));\n+            }\n+\n+            if (!mapping.isPassword() && !mapping.isAccountid()) {\n+                attrs.add(AttributeBuilder.build(field, value));\n+            }\n+        }\n+\n+        Uid userUid = null;\n+\n+        if (merge) {\n+            userUid = connector.update(\n+                    ObjectClass.ACCOUNT, new Uid(accountId), attrs, null);\n+        } else {\n+            userUid = connector.create(\n+                    ObjectClass.ACCOUNT, attrs, null);\n+        }\n+\n+        if (userUid == null) {\n+            if (log.isErrorEnabled()) {\n+\n+                log.error(\n+                        \"Error creating user on resource \" +\n+                        resource.getName());\n+\n+            }\n+\n+            throw new IllegalStateException(\"Error creating user.\");\n+        }\n+\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Created user \" + userUid.getUidValue());\n+        }\n+    }\n+}"},{"sha":"f502476536a71d14e25ad953b2c420c1d1926fd3","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.HashSet;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n@@ -24,6 +25,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.MappedSuperclass;\n+import org.syncope.core.persistence.beans.Resource;\n \n @MappedSuperclass\n public abstract class AbstractAttributable extends AbstractBaseBean {\n@@ -92,8 +94,8 @@ public boolean removeResource(Resource resource) {\n     }\n \n     public Set<Resource> getResources() {\n-        if (resources != null) return resources;\n-        return new HashSet<Resource>();\n+        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        return this.resources;\n     }\n \n     public void setResources(Set<Resource> resources) {"},{"sha":"2d09c21dd5a8ffafdc8b3cac8f64b05b283f0d4e","filename":"core/src/main/java/org/syncope/core/persistence/beans/Resource.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -67,18 +67,8 @@ public void setConnector(ConnectorInstance connector) {\n     }\n \n     public Set<SchemaMapping> getMappings() {\n-        return mappings;\n-    }\n-\n-    public void setMappings(Set<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) {\n-            this.mappings = new HashSet<SchemaMapping>();\n-        }\n-        return this.mappings.add(mapping);\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings;\n     }\n \n     public boolean removeMapping(SchemaMapping mapping) {\n@@ -95,6 +85,7 @@ public void setName(String name) {\n     }\n \n     public Set<SyncopeRole> getRoles() {\n+        if (roles == null) return new HashSet<SyncopeRole>();\n         return roles;\n     }\n \n@@ -103,6 +94,7 @@ public void setRoles(Set<SyncopeRole> roles) {\n     }\n \n     public Set<SyncopeUser> getUsers() {\n+        if (users == null) return new HashSet<SyncopeUser>();\n         return users;\n     }\n \n@@ -129,4 +121,13 @@ public boolean removeRole(SyncopeRole role) {\n         if (this.roles == null) return true;\n         return this.roles.remove(role);\n     }\n+\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings.add(mapping);\n+    }\n }"},{"sha":"5cb0129f3f3201eb29898b6d52fe0500227248aa","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -31,8 +31,10 @@ public class UserSchema extends AbstractSchema {\n \n     @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n     private Set<UserAttribute> attributes;\n+\n     @ManyToMany(mappedBy = \"schemas\")\n     private Set<UserDerivedSchema> derivedSchemas;\n+\n     /**\n      * All the mappings of the attribute schema.\n      */\n@@ -94,7 +96,8 @@ public void setDerivedSchemas(\n \n     @Override\n     public Set<SchemaMapping> getMappings() {\n-        return mappings;\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings;\n     }\n \n     @Override\n@@ -104,11 +107,13 @@ public void setMappings(Set<SchemaMapping> mappings) {\n \n     @Override\n     public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n         return this.mappings.add(mapping);\n     }\n \n     @Override\n     public boolean removeMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) return true;\n         return this.mappings.remove(mapping);\n     }\n }"},{"sha":"9c22f11ff084cef98f8350bc053a45b07f05bd21","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":159,"deletions":51,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -42,6 +42,8 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.syncope.client.to.ConnectorBundleTO;\n+import org.syncope.client.to.ConnectorBundleTOs;\n import org.syncope.client.to.ConnectorInstanceTO;\n import org.syncope.client.to.ConnectorInstanceTOs;\n import org.syncope.client.to.PropertyTO;\n@@ -87,10 +89,23 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n             return throwCompositeException(e, response);\n         }\n \n-        if (actual == null)\n+        if (actual == null) {\n             throw new IOException(\"Connector bind failed\");\n+        }\n+\n+        SyncopeConfiguration syncopeConfiguration =\n+                syncopeConfigurationDAO.find(\n+                \"identityconnectors.bundle.directory\");\n+\n+        if (syncopeConfiguration == null) {\n+            throw new IOException(\"Syncope configuration not found\");\n+        }\n+\n+        ConnectorInfoManager manager =\n+                getConnectorManager(syncopeConfiguration.getConfValue());\n \n         ConnectorFacade connector = getConnectorFacade(\n+                manager,\n                 connectorTO.getBundleName(),\n                 connectorTO.getVersion(),\n                 connectorTO.getConnectorName(),\n@@ -159,7 +174,20 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n                 actual.getId().toString());\n \n         if (connector == null) {\n+\n+            SyncopeConfiguration syncopeConfiguration =\n+                    syncopeConfigurationDAO.find(\n+                    \"identityconnectors.bundle.directory\");\n+\n+            if (syncopeConfiguration == null) {\n+                throw new IOException(\"Syncope configuration not found\");\n+            }\n+\n+            ConnectorInfoManager manager =\n+                    getConnectorManager(syncopeConfiguration.getConfValue());\n+\n             connector = getConnectorFacade(\n+                    manager,\n                     connectorTO.getBundleName(),\n                     connectorTO.getVersion(),\n                     connectorTO.getConnectorName(),\n@@ -265,14 +293,30 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n         return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n-    private ConnectorFacade getConnectorFacade(\n-            String bundlename,\n-            String bundleversion,\n-            String connectorname,\n-            Set<PropertyTO> configuration) throws IOException {\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/check/{connectorId}\")\n+    public String check(HttpServletResponse response,\n+            @PathVariable(\"connectorId\") Long connectorId) throws IOException {\n \n-        ConnectorInfoManagerFactory connectorInfoManagerFactory =\n-                ConnectorInfoManagerFactory.getInstance();\n+        ConfigurableApplicationContext context =\n+                ApplicationContextManager.getApplicationContext();\n+\n+        DefaultListableBeanFactory beanFactory =\n+                (DefaultListableBeanFactory) context.getBeanFactory();\n+\n+        ConnectorFacade connector = (ConnectorFacade) beanFactory.getSingleton(\n+                connectorId.toString());\n+\n+        if (connector == null)\n+            return \"KO\";\n+        else\n+            return \"OK\";\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/getBundles\")\n+    public ConnectorBundleTOs getBundles() throws IOException {\n+        ConnectorBundleTOs connectorBundleTOs = new ConnectorBundleTOs();\n \n         SyncopeConfiguration syncopeConfiguration =\n                 syncopeConfigurationDAO.find(\n@@ -282,63 +326,72 @@ private ConnectorFacade getConnectorFacade(\n             throw new IOException(\"Syncope configuration not found\");\n         }\n \n-        File bundleDirectory = new File(syncopeConfiguration.getConfValue());\n+        ConnectorInfoManager manager =\n+                getConnectorManager(syncopeConfiguration.getConfValue());\n \n-        List<URL> urls = new ArrayList<URL>();\n+        List<ConnectorInfo> bundles = getBundles(manager);\n \n-        String[] files = bundleDirectory.list();\n+        ConnectorBundleTO connectorBundleTO = null;\n+        ConnectorKey key = null;\n+        ConfigurationProperties properties = null;\n \n-        if(files == null){\n-            throw new IOException(\"No bundles found\");\n-        }\n+        for (ConnectorInfo bundle : bundles) {\n \n-        for (String file : files) {\n-            try {\n-                urls.add(IOUtil.makeURL(bundleDirectory, file));\n-            } catch (Exception ignore) {\n-                // ignore exception and don't add bundle\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\n-                            \"\\\"\" +\n-                            bundleDirectory.toString() + \"/\" + file +\n-                            \"\\\"\" +\n-                            \" is not a valid connector bundle.\", ignore);\n-                }\n+            connectorBundleTO = new ConnectorBundleTO();\n+\n+            connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n+\n+            key = bundle.getConnectorKey();\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\n+                        \"\\nBundle name: \" + key.getBundleName() +\n+                        \"\\nBundle version: \" + key.getBundleVersion() +\n+                        \"\\nBundle class: \" + key.getConnectorName());\n             }\n-        }\n \n-        if (urls.isEmpty()) {\n-            throw new IOException(\"No bundles found\");\n-        }\n+            connectorBundleTO.setBundleName(key.getBundleName());\n+            connectorBundleTO.setConnectorName(key.getConnectorName());\n+            connectorBundleTO.setVersion(key.getBundleVersion());\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"URL: \" + urls.toString());\n-        }\n+            properties = bundle.createDefaultAPIConfiguration().\n+                    getConfigurationProperties();\n \n-        ConnectorInfoManager manager =\n-                connectorInfoManagerFactory.getLocalManager(\n-                urls.toArray(new URL[0]));\n+            connectorBundleTO.setProperties(properties.getPropertyNames());\n \n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Bundle properties: \" +\n+                        connectorBundleTO.getProperties());\n+            }\n \n-        if (manager == null) {\n-            throw new IOException(\"Connector Info Manager not found\");\n+            connectorBundleTOs.addBundle(connectorBundleTO);\n         }\n \n-        // list connectors info\n-        List<ConnectorInfo> infos = manager.getConnectorInfos();\n-        if (infos != null) {\n-            log.debug(\"infos size: \" + infos.size());\n-            for (ConnectorInfo i : infos) {\n-                log.debug(\"Name: \" + i.getConnectorDisplayName());\n+        return connectorBundleTOs;\n+    }\n+\n+    public static List<ConnectorInfo> getBundles(\n+            ConnectorInfoManager manager) throws IOException {\n+\n+        List<ConnectorInfo> bundles = manager.getConnectorInfos();\n+\n+        if (log.isDebugEnabled() && bundles != null) {\n+            log.debug(\"#Bundles: \" + bundles.size());\n+\n+            for (ConnectorInfo bundle : bundles) {\n+                log.debug(\"Bundle: \" + bundle.getConnectorDisplayName());\n             }\n         }\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"\\nBundle name: \" + bundlename +\n-                    \"\\nBundle version: \" + bundleversion +\n-                    \"\\nBundle class: \" + connectorname);\n-        }\n+        return bundles;\n+    }\n+\n+    public static ConnectorFacade getConnectorFacade(\n+            ConnectorInfoManager manager,\n+            String bundlename,\n+            String bundleversion,\n+            String connectorname,\n+            Set<PropertyTO> configuration) throws IOException {\n \n         // specify a connector.\n         ConnectorKey key = new ConnectorKey(\n@@ -350,6 +403,12 @@ private ConnectorFacade getConnectorFacade(\n             throw new IOException(\"Connector Key not found\");\n         }\n \n+        if (log.isDebugEnabled()) {\n+            log.debug(\n+                    \"\\nBundle name: \" + key.getBundleName() +\n+                    \"\\nBundle version: \" + key.getBundleVersion() +\n+                    \"\\nBundle class: \" + key.getConnectorName());\n+        }\n \n         // get the specified connector.\n         ConnectorInfo info = manager.findConnectorInfo(key);\n@@ -358,7 +417,6 @@ private ConnectorFacade getConnectorFacade(\n             throw new IOException(\"Connector Info not found\");\n         }\n \n-\n         // create default configuration\n         APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n \n@@ -408,4 +466,54 @@ private ConnectorFacade getConnectorFacade(\n \n         return connector;\n     }\n+\n+    public static ConnectorInfoManager getConnectorManager(\n+            String bundledirectory) throws IOException {\n+\n+        ConnectorInfoManagerFactory connectorInfoManagerFactory =\n+                ConnectorInfoManagerFactory.getInstance();\n+\n+        File bundleDirectory = new File(bundledirectory);\n+\n+        List<URL> urls = new ArrayList<URL>();\n+\n+        String[] files = bundleDirectory.list();\n+\n+        if (files == null) {\n+            throw new IOException(\"No bundles found\");\n+        }\n+\n+        for (String file : files) {\n+            try {\n+                urls.add(IOUtil.makeURL(bundleDirectory, file));\n+            } catch (Exception ignore) {\n+                // ignore exception and don't add bundle\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            \"\\\"\" +\n+                            bundleDirectory.toString() + \"/\" + file +\n+                            \"\\\"\" +\n+                            \" is not a valid connector bundle.\", ignore);\n+                }\n+            }\n+        }\n+\n+        if (urls.isEmpty()) {\n+            throw new IOException(\"No bundles found\");\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"URL: \" + urls.toString());\n+        }\n+\n+        ConnectorInfoManager manager =\n+                connectorInfoManagerFactory.getLocalManager(\n+                urls.toArray(new URL[0]));\n+\n+        if (manager == null) {\n+            throw new IOException(\"Connector Info Manager not found\");\n+        }\n+\n+        return manager;\n+    }\n }"},{"sha":"50fdae9b89dd166e432ad1f76c26d1468b5d36ff","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaMappingController.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaMappingController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaMappingController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaMappingController.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,319 @@\n+\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.syncope.client.to.SchemaMappingTOs;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.rest.data.SchemaMappingDataBinder;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+@Controller\n+@RequestMapping(\"/mapping\")\n+public class SchemaMappingController extends AbstractController {\n+\n+    @Autowired\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+\n+    @Autowired\n+    private SchemaMappingDAO schemaMappingDAO;\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create/{resourceName}\")\n+    public SchemaMappingTOs create(HttpServletResponse response,\n+            @PathVariable(\"resourceName\") String resourceName,\n+            @RequestBody SchemaMappingTOs mappings) throws IOException {\n+\n+        Set<SchemaMapping> actuals = new HashSet<SchemaMapping>();\n+\n+        SchemaMappingDataBinder binder =\n+                new SchemaMappingDataBinder(schemaDAO);\n+\n+        try {\n+\n+            Resource resource = null;\n+            if (resourceName != null) {\n+                resource = resourceDAO.find(resourceName);\n+            }\n+\n+            if (resource == null) {\n+                if (log.isErrorEnabled()) {\n+                    log.error(\"Missing resource.\");\n+                }\n+\n+                SyncopeClientException ex = new SyncopeClientException(\n+                        SyncopeClientExceptionType.RequiredValueMissing);\n+\n+                ex.addElement(\"resource\");\n+\n+                throw ex;\n+            }\n+\n+            if (mappings == null || mappings.getMappings().size() == 0) {\n+                if (log.isErrorEnabled()) {\n+                    log.error(\"Missing mapping.\");\n+                }\n+\n+                SyncopeClientException ex = new SyncopeClientException(\n+                        SyncopeClientExceptionType.RequiredValueMissing);\n+\n+                ex.addElement(\"mappings\");\n+\n+                throw ex;\n+            }\n+\n+            // resource.getMappings() can never return a null value\n+            Set<SchemaMapping> existentMappings = resource.getMappings();\n+\n+            for (SchemaMapping mapping : existentMappings) {\n+                schemaMappingDAO.delete(mapping.getId());\n+            }\n+\n+            // to be sure ...\n+            resource.getMappings().clear();\n+\n+            Set<SchemaMapping> schemaMappings =\n+                    binder.getSchemaMappings(resource, mappings);\n+\n+            SchemaMapping actual = null;\n+            UserSchema userSchema = null;\n+            RoleSchema roleSchema = null;\n+\n+            for (SchemaMapping schemaMapping : schemaMappings) {\n+                resource.addMapping(schemaMapping);\n+\n+                // synchronize userSchema\n+                userSchema = schemaMapping.getUserSchema();\n+                if (userSchema != null) userSchema.addMapping(schemaMapping);\n+\n+                // synchronize roleSchema\n+                roleSchema = schemaMapping.getRoleSchema();\n+                if (roleSchema != null) roleSchema.addMapping(schemaMapping);\n+\n+                // save schema mapping and synchronize\n+                actual = schemaMappingDAO.save(schemaMapping);\n+\n+                actuals.add(actual);\n+            }\n+\n+        } catch (SyncopeClientCompositeErrorException e) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Could not create mappings\", e);\n+            }\n+\n+            return throwCompositeException(e, response);\n+\n+        } catch (SyncopeClientException ex) {\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+\n+        } catch (Throwable t) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Unknown exception\", t);\n+            }\n+\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.Unknown);\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+        }\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getSchemaMappingTOs(actuals);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{resourceName}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"resourceName\") String resourceName)\n+            throws IOException {\n+\n+        Resource resource = resourceDAO.find(resourceName);\n+\n+        if (resource == null) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Could not find resource '\" + resourceName + \"'\");\n+            }\n+\n+            throwNotFoundException(resourceName, response);\n+\n+        } else {\n+\n+            Set<SchemaMapping> mappings = resource.getMappings();\n+\n+            // resource.getMappings() can never return a null value\n+\n+            for (SchemaMapping mapping : mappings) {\n+                schemaMappingDAO.delete(mapping.getId());\n+            }\n+\n+            // to be sure ...\n+            resource.getMappings().clear();\n+        }\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/getResourceMapping/{resourceName}\")\n+    public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n+            @PathVariable(\"resourceName\") String resourceName)\n+            throws IOException {\n+\n+        Resource resource = null;\n+        if (resourceName != null) {\n+            resource = resourceDAO.find(resourceName);\n+        }\n+\n+        if (resource == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Resource \" + resourceName + \" not found.\");\n+            }\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.RequiredValueMissing);\n+\n+            ex.addElement(\"resource\");\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+        }\n+\n+\n+        Set<SchemaMapping> schemaMappings = resource.getMappings();\n+\n+        // resource.getMappings() can never return a null value\n+\n+        SchemaMappingDataBinder binder = new SchemaMappingDataBinder(schemaDAO);\n+\n+        return binder.getSchemaMappingTOs(schemaMappings);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/getRoleResourcesMapping/{roleName}\")\n+    public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n+            @PathVariable(\"roleName\") Long roleId)\n+            throws IOException {\n+\n+        SyncopeRole role = null;\n+        if (roleId != null) {\n+            role = syncopeRoleDAO.find(roleId);\n+        }\n+\n+        if (role == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Role \" + roleId + \" not found.\");\n+            }\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.RequiredValueMissing);\n+\n+            ex.addElement(\"resource\");\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+        }\n+\n+        SchemaMappingTOs roleMappings = new SchemaMappingTOs();\n+\n+        Set<Resource> resources = role.getResources();\n+\n+        SchemaMappingDataBinder binder = new SchemaMappingDataBinder(schemaDAO);\n+\n+        SchemaMappingTOs resourceMappings = null;\n+\n+        for (Resource resource : resources) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ask for the mappings of '\" + resource + \"'\");\n+            }\n+\n+            Set<SchemaMapping> schemaMappings = resource.getMappings();\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"The mappings of '\" + resource + \"' are '\" +\n+                        schemaMappings + \"'\");\n+            }\n+\n+            resourceMappings = binder.getSchemaMappingTOs(schemaMappings);\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"The mappings TO of '\" + resource + \"' are '\" +\n+                        resourceMappings.getMappings() + \"'\");\n+            }\n+\n+            roleMappings.addAllMappings(resourceMappings.getMappings());\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Mappings found: \" +\n+                    roleMappings.getMappings());\n+        }\n+\n+        return roleMappings;\n+    }\n+}"},{"sha":"c1301538a7308c304812f6f2fed9fb468bcb2ee5","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":26,"deletions":4,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -18,7 +18,11 @@\n import java.beans.XMLEncoder;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.util.Set;\n+import java.util.logging.Level;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -60,7 +64,7 @@ public ConnectorInstance createConnectorInstance(\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.ConnectorRequiredValueMissing);\n+                SyncopeClientExceptionType.RequiredValueMissing);\n \n         if (connectorTO.getBundleName() == null) {\n             requiredValuesMissing.addElement(\"bundlename\");\n@@ -117,7 +121,7 @@ public ConnectorInstance updateConnectorInstance(\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.ConnectorRequiredValueMissing);\n+                SyncopeClientExceptionType.RequiredValueMissing);\n \n         if (connectorInstanceId == null) {\n             requiredValuesMissing.addElement(\"connector id\");\n@@ -147,6 +151,14 @@ public ConnectorInstance updateConnectorInstance(\n                     connectorTO.getConfiguration()));\n         }\n \n+        try {\n+            log.error(URLEncoder.encode(serializeToXML(connectorTO.getConfiguration()), \"UTF-8\"));\n+            // Throw composite exception if there is at least one element set\n+            // in the composing exceptions\n+        } catch (UnsupportedEncodingException ex) {\n+            java.util.logging.Logger.getLogger(ConnectorInstanceDataBinder.class.getName()).log(Level.SEVERE, null, ex);\n+        }\n+\n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n \n@@ -190,24 +202,34 @@ public static String serializeToXML(Object obj) {\n             encoder.flush();\n             encoder.close();\n \n-            return tokenContentOS.toString();\n+            String res = tokenContentOS.toString();\n+\n+            return URLEncoder.encode(res, \"UTF-8\");\n \n         } catch (Throwable t) {\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Exception during connector serialization\", t);\n+            }\n             return null;\n         }\n     }\n \n     public static Object buildFromXML(String xml) {\n         try {\n \n-            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(xml.getBytes());\n+            ByteArrayInputStream tokenContentIS = new ByteArrayInputStream(\n+                    URLDecoder.decode(xml, \"UTF-8\").getBytes());\n+\n             XMLDecoder decoder = new XMLDecoder(tokenContentIS);\n             Object object = decoder.readObject();\n             decoder.close();\n \n             return object;\n \n         } catch (Throwable t) {\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Exception during connector serialization\", t);\n+            }\n             return null;\n         }\n     }"},{"sha":"612fdc92b1916f0a7be1dc432b84cf569e2368a7","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaMappingDataBinder.java","status":"added","additions":200,"deletions":0,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaMappingDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaMappingDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaMappingDataBinder.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,200 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.SchemaMappingTO;\n+import org.syncope.client.to.SchemaMappingTOs;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+@Component\n+public class SchemaMappingDataBinder {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            SchemaMappingDataBinder.class);\n+\n+    private static final String[] ignoreProperties = {\n+        \"id\", \"userSchema\", \"roleSchema\", \"resource\"};\n+\n+    private SchemaDAO schemaDAO;\n+\n+    @Autowired\n+    public SchemaMappingDataBinder(SchemaDAO schemaDAO) {\n+        this.schemaDAO = schemaDAO;\n+    }\n+\n+    public Set<SchemaMapping> getSchemaMappings(\n+            Resource resource,\n+            SchemaMappingTOs mappings) {\n+\n+        Set<SchemaMapping> schemaMappings = new HashSet<SchemaMapping>();\n+\n+        for (SchemaMappingTO mapping : mappings) {\n+\n+            schemaMappings.add(getSchemaMapping(resource, mapping));\n+\n+        }\n+\n+        return schemaMappings;\n+    }\n+\n+    public SchemaMapping getSchemaMapping(\n+            Resource resource,\n+            SchemaMappingTO mapping)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException compositeErrorException =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.RequiredValueMissing);\n+\n+        if (mapping == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Provided null mapping\");\n+            }\n+\n+            return null;\n+        }\n+\n+        if (mapping.getField() == null) {\n+            requiredValuesMissing.addElement(\"field\");\n+        }\n+\n+        // search for the user schema\n+        UserSchema userSchema = null;\n+        if (mapping.getUserSchema() != null) {\n+            userSchema = schemaDAO.find(\n+                    mapping.getUserSchema(), UserSchema.class);\n+        }\n+\n+        // search for the role schema\n+        RoleSchema roleSchema = null;\n+        if (mapping.getRoleSchema() != null) {\n+            roleSchema = schemaDAO.find(\n+                    mapping.getUserSchema(), RoleSchema.class);\n+        }\n+\n+        // at least one schema must be provided\n+        if (userSchema == null && roleSchema == null) {\n+            requiredValuesMissing.addElement(\"schema\");\n+        }\n+\n+        // a resource must be provided\n+        if (resource == null) {\n+            requiredValuesMissing.addElement(\"resource\");\n+        }\n+\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n+\n+        SchemaMapping schemaMapping = new SchemaMapping();\n+\n+        BeanUtils.copyProperties(\n+                mapping, schemaMapping, ignoreProperties);\n+\n+        schemaMapping.setResource(resource);\n+        schemaMapping.setUserSchema(userSchema);\n+        schemaMapping.setRoleSchema(roleSchema);\n+\n+        return schemaMapping;\n+    }\n+\n+    public SchemaMappingTOs getSchemaMappingTOs(\n+            Collection<SchemaMapping> mappings) {\n+\n+        if (mappings == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"No mapping provided.\");\n+            }\n+\n+            return null;\n+        }\n+\n+        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n+\n+        for (SchemaMapping mapping : mappings) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ask for \" + mapping + \" TO\");\n+            }\n+\n+            schemaMappingTOs.addMapping(getSchemaMappingTO(mapping));\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Collected TOs \" + schemaMappingTOs.getMappings());\n+        }\n+\n+        return schemaMappingTOs;\n+    }\n+\n+    public SchemaMappingTO getSchemaMappingTO(\n+            SchemaMapping schemaMapping) {\n+        if (schemaMapping == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Provided null mapping\");\n+            }\n+\n+            return null;\n+        }\n+\n+        SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n+\n+        BeanUtils.copyProperties(\n+                schemaMapping, schemaMappingTO, ignoreProperties);\n+\n+        if (schemaMapping.getUserSchema() != null) {\n+            schemaMappingTO.setUserSchema(\n+                    schemaMapping.getUserSchema().getName());\n+        }\n+\n+        if (schemaMapping.getRoleSchema() != null) {\n+            schemaMappingTO.setRoleSchema(\n+                    schemaMapping.getRoleSchema().getName());\n+        }\n+\n+        schemaMappingTO.setId(schemaMapping.getId());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Obtained TO \" + schemaMappingTO);\n+        }\n+\n+        return schemaMappingTO;\n+    }\n+}"},{"sha":"6e0a6265db2d6ebd3880a8ac47e0bf1515319ee2","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -34,6 +34,9 @@\n     <listener>\n         <listener-class>org.syncope.core.persistence.DefaultContentLoader</listener-class>\n     </listener>\n+    <listener>\n+        <listener-class>org.syncope.core.persistence.ConnectorInstanceBeansLoader</listener-class>\n+    </listener>\n \n     <servlet>\n         <servlet-name>syncope-core-rest</servlet-name>"},{"sha":"c464b757635febe93a3bfa008c1302d980fc6d59","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"modified","additions":4,"deletions":42,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -16,6 +16,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n@@ -35,54 +36,15 @@ public class ConnectorInstanceDAOTest extends AbstractTest {\n     @Autowired\n     ConnectorInstanceDAO connectorInstanceDAO;\n \n-    @Test\n-    public final void testSingletonBean() {\n-        ConnectorInstance connectorInstance = connectorInstanceDAO.find(100L);\n-\n-        assertNotNull(\"findById did not work\", connectorInstance);\n-\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        assertNotNull(context);\n-\n-        // --------------------------------------------\n-        DefaultListableBeanFactory beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        assertNotNull(beanFactory);\n-\n-        beanFactory.registerSingleton(\n-                connectorInstance.getId().toString(),\n-                connectorInstance);\n-        // --------------------------------------------\n-\n-        // --------------------------------------------\n-        beanFactory =\n-                (DefaultListableBeanFactory) context.getBeanFactory();\n-\n-        assertNotNull(beanFactory);\n-\n-        ConnectorInstance actual = (ConnectorInstance) beanFactory.getBean(\n-                connectorInstance.getId().toString());\n-        // --------------------------------------------\n-\n-        assertNotNull(actual);\n-\n-        assertEquals(actual, connectorInstance);\n-\n-        connectorInstance.setXmlConfiguration(\"ne configuration ...\");\n-\n-        assertEquals(actual, connectorInstance);\n-    }\n-\n     @Test\n     public final void findById() {\n         ConnectorInstance connectorInstance = connectorInstanceDAO.find(100L);\n \n         assertNotNull(\"findById did not work\", connectorInstance);\n \n-        assertEquals(\"invalid connector name\", \"WebServiceConnector\",\n+        assertEquals(\n+                \"invalid connector name\",\n+                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\",\n                 connectorInstance.getConnectorName());\n \n         assertEquals(\"invalid bundle name\","},{"sha":"0dc869e86f44a410ebc2af9a49355d799359b218","filename":"core/src/test/java/org/syncope/core/test/persistence/ResourceDAOTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -58,7 +58,8 @@ public final void findById() {\n \n         assertNotNull(\"connector not found\", connector);\n \n-        assertEquals(\"invalid connector name\", \"WebServiceConnector\",\n+        assertEquals(\"invalid connector name\",\n+                \"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\",\n                 connector.getConnectorName());\n \n         assertEquals(\"invalid bundle name\","},{"sha":"deb569b9e14182781bf570ec7d640b46e8fe696b","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/PropagationManagerTest.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FPropagationManagerTest.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,120 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.PropagationManager;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class PropagationManagerTest extends AbstractTest {\n+\n+    @Autowired\n+    ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    SyncopeUserDAO syncopeUserDAO;\n+\n+    @Test\n+    public final void provision() {\n+        SyncopeUser user = syncopeUserDAO.find(1L);\n+        assertNotNull(user);\n+\n+        Resource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        user.setResources(Collections.singleton(resource));\n+\n+        PropagationManager propagationManager = new PropagationManager();\n+        Set<String> provisioned = propagationManager.provision(user);\n+\n+        assertNotNull(provisioned);\n+    }\n+\n+    @Test\n+    public final void update() {\n+        SyncopeUser user = syncopeUserDAO.find(2L);\n+        assertNotNull(user);\n+\n+        Resource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        user.setResources(Collections.singleton(resource));\n+\n+        PropagationManager propagationManager = new PropagationManager();\n+        Set<String> provisioned = propagationManager.update(user);\n+\n+        assertNotNull(provisioned);\n+    }\n+\n+    @Test\n+    public final void provisionWithException() {\n+        SyncopeUser user = syncopeUserDAO.find(3L);\n+        assertNotNull(user);\n+\n+        Resource resource = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNotNull(resource);\n+\n+        user.setResources(Collections.singleton(resource));\n+\n+        RuntimeException re = null;\n+\n+        try {\n+\n+            PropagationManager propagationManager = new PropagationManager();\n+            propagationManager.provision(user, true);\n+\n+        } catch (RuntimeException e) {\n+            re = e;\n+        }\n+\n+        assertNotNull(re);\n+    }\n+\n+    @Test\n+    public final void updateWithException() {\n+        SyncopeUser user = syncopeUserDAO.find(4L);\n+        assertNotNull(user);\n+\n+        Resource resource = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNotNull(resource);\n+\n+        user.setResources(Collections.singleton(resource));\n+\n+        RuntimeException re = null;\n+\n+        try {\n+\n+            PropagationManager propagationManager = new PropagationManager();\n+            propagationManager.update(user, true);\n+\n+        } catch (RuntimeException e) {\n+            re = e;\n+        }\n+\n+        assertNotNull(re);\n+    }\n+}"},{"sha":"8d2317b44508f91e3762f49a9d01abf6b6fcb827","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -128,7 +128,7 @@ public final void delete() {\n         assertNotNull(\"find to delete did not work\", resource);\n \n         // -------------------------------------\n-        // Get original associated mappings\n+        // Get originally associated mappings\n         // -------------------------------------\n         Set<SchemaMapping> mappings = resource.getMappings();\n \n@@ -141,7 +141,7 @@ public final void delete() {\n         // -------------------------------------\n \n         // -------------------------------------\n-        // Get original associated connector\n+        // Get originally associated connector\n         // -------------------------------------\n         ConnectorInstance connector = resource.getConnector();\n \n@@ -151,7 +151,7 @@ public final void delete() {\n         // -------------------------------------\n \n         // -------------------------------------\n-        // Get original users assoicated\n+        // Get originally assoicated users\n         // -------------------------------------\n         Set<SyncopeUser> users = resource.getUsers();\n "},{"sha":"b0461f4372091e124602eeed51aa1989acb6ab1f","filename":"core/src/test/java/org/syncope/core/test/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -22,6 +22,7 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.ConnectorBundleTOs;\n import org.syncope.client.to.ConnectorInstanceTO;\n import org.syncope.client.to.ConnectorInstanceTOs;\n import org.syncope.client.to.PropertyTO;\n@@ -195,4 +196,24 @@ public void read() {\n \n         assertNotNull(connectorInstanceTO);\n     }\n+\n+    //@Test\n+    public void check() {\n+        String verify = restTemplate.getForObject(\n+                BASE_URL + \"connector/check/{connectorId}.json\",\n+                String.class, \"100\");\n+\n+        assertEquals(verify, \"OK\");\n+    }\n+\n+    @Test\n+    public void getBundles() {\n+        ConnectorBundleTOs bundles = restTemplate.getForObject(\n+                BASE_URL + \"connector/getBundles.json\",\n+                ConnectorBundleTOs.class);\n+\n+        assertNotNull(bundles);\n+\n+        assertFalse(bundles.getBundles().isEmpty());\n+    }\n }"},{"sha":"a3e627790bae15d5ad7b02b8da1d38ca1cddc2eb","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaMappingTestITCase.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -0,0 +1,134 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.annotation.ExpectedException;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.SchemaMappingTO;\n+import org.syncope.client.to.SchemaMappingTOs;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+\n+public class SchemaMappingTestITCase extends AbstractTestITCase {\n+\n+    @Autowired\n+    SchemaDAO schemaDAO;\n+\n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public void createWithException() {\n+        final String resourceName = \"ws-target-resource-1\";\n+\n+        SchemaMappingTOs mappings = new SchemaMappingTOs();\n+\n+        SchemaMappingTO mapping = new SchemaMappingTO();\n+\n+        mappings.addMapping(mapping);\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"mapping/create/{resourceName}.json\",\n+                mappings,\n+                SchemaMappingTOs.class,\n+                resourceName);\n+    }\n+\n+    @Test\n+    public void create() {\n+        final String resourceName = \"ws-target-resource-1\";\n+\n+        SchemaMappingTOs mappings = new SchemaMappingTOs();\n+\n+        SchemaMappingTO mapping = null;\n+\n+        for (int i = 0; i < 3; i++) {\n+            mapping = new SchemaMappingTO();\n+            mapping.setField(\"test\" + i);\n+            mapping.setUserSchema(\"username\");\n+            mapping.setRoleSchema(\"icon\");\n+            mappings.addMapping(mapping);\n+        }\n+\n+        SchemaMappingTOs actuals =\n+                (SchemaMappingTOs) restTemplate.postForObject(\n+                BASE_URL + \"mapping/create/{resourceName}.json\",\n+                mappings, SchemaMappingTOs.class, resourceName);\n+\n+        assertNotNull(actuals);\n+\n+        assertTrue(actuals.getMappings().size() == 3);\n+\n+        // check the non existence\n+\n+        actuals = restTemplate.getForObject(\n+                BASE_URL + \"mapping/getResourceMapping/{resourceName}.json\",\n+                SchemaMappingTOs.class,\n+                resourceName);\n+\n+        assertNotNull(actuals);\n+\n+        assertTrue(actuals.getMappings().size() == 3);\n+    }\n+\n+    @Test\n+    public void deleteWithException() {\n+        try {\n+\n+            restTemplate.delete(\n+                    BASE_URL + \"mapping/delete/{resourceName}.json\",\n+                    \"notfoundresourcename\");\n+\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+    }\n+\n+    @Test\n+    public void delete() {\n+        final String resourceName = \"ws-target-resource-2\";\n+\n+        restTemplate.delete(\n+                BASE_URL + \"mapping/delete/{resourceName}.json\",\n+                resourceName);\n+\n+        SchemaMappingTOs actuals = restTemplate.getForObject(\n+                BASE_URL + \"mapping/getResourceMapping/{resourceName}.json\",\n+                SchemaMappingTOs.class,\n+                resourceName);\n+\n+        assertNotNull(actuals);\n+\n+        assertTrue(actuals.getMappings().isEmpty());\n+    }\n+\n+    @Test\n+    public void getRoleResourcesMapping(){\n+        final Long roleId = 3L;\n+\n+        SchemaMappingTOs actuals =\n+                restTemplate.getForObject(\n+                BASE_URL + \"mapping/getRoleResourcesMapping/{roleId}.json\",\n+                SchemaMappingTOs.class,\n+                roleId);\n+\n+        assertNotNull(actuals);\n+\n+        assertFalse(actuals.getMappings().isEmpty());\n+    }\n+}"},{"sha":"d0682df0478886094236044a69af82543ffa65d5","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":30,"deletions":2,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2f8eed4a0909113109cbe74180d5ea5979010fad/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=2f8eed4a0909113109cbe74180d5ea5979010fad","patch":"@@ -87,12 +87,25 @@\n                                             \n     <UserDerivedAttribute id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n-    <ConnectorInstance id=\"100\" connectorName=\"WebServiceConnector\" version=\"0.1-SNAPSHOT\"\n+    <ConnectorInstance id=\"100\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n-                       xmlConfiguration=\"%lt;xml ... \" />\n+                       connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n+                       version=\"0.1-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3EProvisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\" />\n \n     <Resource name=\"ws-target-resource-1\" connector_id=\"100\"/>\n     <Resource name=\"ws-target-resource-2\" connector_id=\"100\"/>\n+    <Resource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"/>\n+    <Resource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"/>\n+\n+    <Resource_SyncopeRole Resource_name=\"ws-target-resource-list-mappings-1\" roles_id=\"3\" />\n+    <SyncopeRole_Resource SyncopeRole_id=\"3\" resources_name=\"ws-target-resource-list-mappings-1\" />\n+\n+    <Resource_SyncopeUser Resource_name=\"ws-target-resource-2\" users_id=\"3\" />\n+    <SyncopeUser_Resource SyncopeUser_id=\"3\" resources_name=\"ws-target-resource-2\" />\n+\n+    <Resource_SyncopeRole Resource_name=\"ws-target-resource-list-mappings-2\" roles_id=\"3\" />\n+    <SyncopeRole_Resource SyncopeRole_id=\"3\" resources_name=\"ws-target-resource-list-mappings-2\" />\n \n     <SchemaMapping id=\"100\" field=\"username\"\n                    resource_name=\"ws-target-resource-1\"\n@@ -104,6 +117,21 @@\n                    userSchema_name=\"email\" nullable=\"false\"\n                    accountid=\"true\" password=\"false\"/>\n \n+    <SchemaMapping id=\"102\" field=\"email\"\n+                   resource_name=\"ws-target-resource-list-mappings-1\"\n+                   userSchema_name=\"email\" nullable=\"false\"\n+                   accountid=\"true\" password=\"false\"/>\n+\n+    <SchemaMapping id=\"103\" field=\"firstname\"\n+                   resource_name=\"ws-target-resource-list-mappings-1\"\n+                   userSchema_name=\"email\" nullable=\"false\"\n+                   accountid=\"true\" password=\"false\"/>\n+\n+    <SchemaMapping id=\"104\" field=\"firstname\"\n+                   resource_name=\"ws-target-resource-list-mappings-2\"\n+                   userSchema_name=\"email\" nullable=\"false\"\n+                   accountid=\"true\" password=\"false\"/>\n+\n     <Entitlement name=\"base\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n "}]}