{"sha":"6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZkNTZjN2VkNjNmNzcwMWQzMDM5ZTNmYjU3ZTM4ZjVkOWViMDYyYTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-25T13:16:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-26T10:40:59Z"},"message":"Clean up: removing some not necessary methods from persistence-api and adjusting accordingly","tree":{"sha":"9f7395dc25e033e282d9d06db881a574bf289e3c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9f7395dc25e033e282d9d06db881a574bf289e3c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf1c0fd90fe336022d1164d090358ac4400b4e15","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf1c0fd90fe336022d1164d090358ac4400b4e15","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bf1c0fd90fe336022d1164d090358ac4400b4e15"}],"stats":{"total":1297,"additions":533,"deletions":764},"files":[{"sha":"9430676d9ec9f72463f1a29e231e49183968d042","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -29,13 +29,13 @@\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -91,13 +91,8 @@ public SyncopeConsoleSession(final Request request) {\n         domains = new ArrayList<>();\n         domains.add(SyncopeConstants.MASTER_DOMAIN);\n         CollectionUtils.collect(anonymousClient.getService(DomainService.class).list(),\n-                new Transformer<DomainTO, String>() {\n-\n-                    @Override\n-                    public String transform(final DomainTO domain) {\n-                        return domain.getKey();\n-                    }\n-                }, domains);\n+                EntityTOUtils.<String, DomainTO>keyTransformer(),\n+                domains);\n     }\n \n     public SyncopeTO getSyncopeTO() {"},{"sha":"9c6c2e83314eb582bfcd0ac216a9156b9171ff5d","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -141,7 +141,7 @@ protected void onClickEdit(final AjaxRequestTarget target, final RealmTO realmTO\n             @Override\n             protected void onClickDelete(final AjaxRequestTarget target, final RealmTO realmTO) {\n                 try {\n-                    if (realmTO.getKey() == 0) {\n+                    if (realmTO.getKey() == null || realmTO.getKey() == 0) {\n                         throw new Exception(\"Root realm cannot be deleted\");\n                     }\n                     realmRestClient.delete(realmTO.getFullPath());"},{"sha":"c32b5078c8f237805ca5d2500aa840518d9ff3a1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -22,11 +22,11 @@\n import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -74,12 +74,8 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n     }\n \n     private List<String> getAvailableAnyTypeClasses() {\n-        return CollectionUtils.collect(new AnyTypeClassRestClient().list(), new Transformer<AnyTypeClassTO, String>() {\n-\n-            @Override\n-            public String transform(final AnyTypeClassTO input) {\n-                return input.getKey();\n-            }\n-        }, new ArrayList<String>());\n+        return CollectionUtils.collect(new AnyTypeClassRestClient().list(),\n+                EntityTOUtils.<String, AnyTypeClassTO>keyTransformer(),\n+                new ArrayList<String>());\n     }\n }"},{"sha":"a487ee8699fc79e052b06b94d856996a08eba984","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorConfPanel.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorConfPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -50,7 +50,7 @@ public ConnectorConfPanel(final String id, final IModel<ConnInstanceTO> model, f\n     }\n \n     /**\n-     * Ge available configuration properties.\n+     * Get available configuration properties.\n      *\n      * @param instance connector instance.\n      * @return configuration properties.\n@@ -62,24 +62,25 @@ protected final List<ConnConfProperty> getConnProperties(final ConnInstanceTO in\n                 ConnectorModal.getBundle(instance, bundles).getProperties(),\n                 new Transformer<ConnConfPropSchema, ConnConfProperty>() {\n \n-                    @Override\n-                    public ConnConfProperty transform(final ConnConfPropSchema key) {\n-                        final ConnConfProperty property = new ConnConfProperty();\n-                        property.setSchema(key);\n+            @Override\n+            public ConnConfProperty transform(final ConnConfPropSchema key) {\n+                final ConnConfProperty property = new ConnConfProperty();\n+                property.setSchema(key);\n \n-                        if (instance.getKey() != 0 && instance.getConfMap().containsKey(key.getName())\n+                if (instance.getKey() != null \n+                        && instance.getConfMap().containsKey(key.getName())\n                         && instance.getConfMap().get(key.getName()).getValues() != null) {\n-                            property.getValues().addAll(instance.getConfMap().get(key.getName()).getValues());\n-                            property.setOverridable(instance.getConfMap().get(key.getName()).isOverridable());\n-                        }\n \n-                        if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n-                            property.getValues().addAll(key.getDefaultValues());\n-                        }\n-                        return property;\n-                    }\n-                },\n-                new ArrayList<ConnConfProperty>());\n+                    property.getValues().addAll(instance.getConfMap().get(key.getName()).getValues());\n+                    property.setOverridable(instance.getConfMap().get(key.getName()).isOverridable());\n+                }\n+\n+                if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n+                    property.getValues().addAll(key.getDefaultValues());\n+                }\n+                return property;\n+            }\n+        }, new ArrayList<ConnConfProperty>());\n \n         return res;\n     }"},{"sha":"776a195885c6fa50f654a6daf6150c9d24a2bd25","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorDetailsPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorDetailsPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -92,7 +92,7 @@ public String transform(final ConnBundleTO input) {\n         bundleName.setRequired(true);\n         bundleName.addRequiredLabel();\n         bundleName.setOutputMarkupId(true);\n-        bundleName.setEnabled(model.getObject().getKey() == 0);\n+        bundleName.setEnabled(model.getObject().getKey() == null || model.getObject().getKey() == 0);\n         bundleName.getField().setOutputMarkupId(true);\n         add(bundleName);\n \n@@ -184,14 +184,14 @@ private List<String> getVersions(final ConnInstanceTO connInstanceTO, final List\n                     @Override\n                     public boolean evaluate(final ConnBundleTO object) {\n                         return object.getLocation().equals(connInstanceTO.getLocation())\n-                        && object.getBundleName().equals(connInstanceTO.getBundleName());\n+                                && object.getBundleName().equals(connInstanceTO.getBundleName());\n                     }\n                 }), new Transformer<ConnBundleTO, String>() {\n \n-                    @Override\n-                    public String transform(final ConnBundleTO input) {\n-                        return input.getVersion();\n-                    }\n-                }, new HashSet<String>()));\n+            @Override\n+            public String transform(final ConnBundleTO input) {\n+                return input.getVersion();\n+            }\n+        }, new HashSet<String>()));\n     }\n }"},{"sha":"751bc24d64ed4e585f5753348e0cd928f136ec4a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -151,7 +151,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         }\n \n         try {\n-            if (connInstanceTO.getKey() == 0) {\n+            if (connInstanceTO.getKey() == null || connInstanceTO.getKey() == 0) {\n                 final ConnInstanceTO actual = connectorRestClient.create(connInstanceTO);\n                 send(pageRef.getPage(), Broadcast.BREADTH, new CreateEvent(\n                         actual.getKey(),"},{"sha":"09f7aae05bff80d01c655f71fc8ffb878c593d01","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersCreateWizardPanel.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersCreateWizardPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.syncope.client.console.panels.AbstractSearchResultPanel.LOG;\n-\n import java.io.Serializable;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n@@ -30,11 +28,15 @@\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class ParametersCreateWizardPanel extends AjaxWizardBuilder<ParametersCreateWizardPanel.ParametersForm> {\n \n     private static final long serialVersionUID = -2868592590785581481L;\n \n+    private static final Logger LOG = LoggerFactory.getLogger(ParametersCreateWizardPanel.class);\n+\n     public ParametersCreateWizardPanel(final String id, final ParametersForm defaultItem, final PageReference pageRef) {\n         super(id, defaultItem, pageRef);\n "},{"sha":"34ce06c0c71e45b8d4fda4e5b721e9bae83a8750","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.lang.reflect.Field;\n@@ -211,8 +209,8 @@ public void populateItem(\n \n                 final AttrTO attrTO = model.getObject();\n \n-                final ActionLinksPanel.Builder<Serializable> actionLinks\n-                        = ActionLinksPanel.builder(page.getPageReference());\n+                final ActionLinksPanel.Builder<Serializable> actionLinks =\n+                        ActionLinksPanel.builder(page.getPageReference());\n                 actionLinks.setDisableIndicator(true);\n                 ActionLinksPanel.Builder<Serializable> addWithRoles = actionLinks\n                         .addWithRoles(new ActionLink<Serializable>() {"},{"sha":"4b18b96967f0aa61412219d1c4bc65889888a259","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -50,7 +50,7 @@ public final SecurityQuestionTO getItem() {\n     @Override\n     public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         try {\n-            if (securityQuestionTO.getKey() == 0) {\n+            if (securityQuestionTO.getKey() == null || securityQuestionTO.getKey() == 0) {\n                 SyncopeConsoleSession.get().getService(SecurityQuestionService.class).create(securityQuestionTO);\n             } else {\n                 SyncopeConsoleSession.get().getService(SecurityQuestionService.class).update(securityQuestionTO);"},{"sha":"0fbc7a6506f369b749321e05d8b269db0afb23bc","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -22,12 +22,12 @@\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -58,14 +58,9 @@ public VirSchemaDetails(final String id,\n \n         final AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\n                 \"resource\", getString(\"resource\"), new PropertyModel<String>(schemaTO, \"resource\"));\n-        resource.setChoices(\n-                CollectionUtils.collect(resourceRestClient.getAll(), new Transformer<ResourceTO, String>() {\n-\n-                    @Override\n-                    public String transform(final ResourceTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<String>()));\n+        resource.setChoices(CollectionUtils.collect(resourceRestClient.getAll(),\n+                EntityTOUtils.<String, ResourceTO>keyTransformer(),\n+                new ArrayList<String>()));\n \n         resource.setOutputMarkupId(true);\n         resource.addRequiredLabel();"},{"sha":"c23cd79102667553c4da0e405298ce7278ca83e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -22,12 +22,12 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.search.SearchableFields;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -163,15 +163,11 @@ protected List<String> load() {\n \n             @Override\n             protected List<String> load() {\n-                return CollectionUtils.collect(schemaRestClient.getSchemas(SchemaType.PLAIN,\n-                        anyTypeRestClient.get(type).getClasses().toArray(new String[] {})),\n-                        new Transformer<AbstractSchemaTO, String>() {\n-\n-                    @Override\n-                    public String transform(final AbstractSchemaTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<String>());\n+                return CollectionUtils.collect(\n+                        schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeRestClient.get(type).getClasses().\n+                                toArray(new String[] {})),\n+                        EntityTOUtils.<String, AbstractSchemaTO>keyTransformer(),\n+                        new ArrayList<String>());\n             }\n         };\n \n@@ -181,13 +177,9 @@ public String transform(final AbstractSchemaTO input) {\n \n             @Override\n             protected List<String> load() {\n-                return CollectionUtils.collect(resourceRestClient.getAll(), new Transformer<ResourceTO, String>() {\n-\n-                    @Override\n-                    public String transform(final ResourceTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<String>());\n+                return CollectionUtils.collect(resourceRestClient.getAll(),\n+                        EntityTOUtils.<String, ResourceTO>keyTransformer(),\n+                        new ArrayList<String>());\n             }\n         };\n     }"},{"sha":"2e3f0375683f661f329c3b0e9f79d2ee41c1958d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -23,9 +23,9 @@\n import java.util.List;\n import java.util.ListIterator;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -77,13 +77,9 @@ public List<String> getSchemaNames(final SchemaType schemaType) {\n         List<String> schemaNames = new ArrayList<>();\n \n         try {\n-            CollectionUtils.collect(getSchemas(schemaType), new Transformer<AbstractSchemaTO, String>() {\n-\n-                @Override\n-                public String transform(final AbstractSchemaTO schemaTO) {\n-                    return schemaTO.getKey();\n-                }\n-            }, schemaNames);\n+            CollectionUtils.collect(getSchemas(schemaType),\n+                    EntityTOUtils.<String, AbstractSchemaTO>keyTransformer(),\n+                    schemaNames);\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all user schema names\", e);\n         }"},{"sha":"7ba0deb83fd066bf22ff0ed597ee5879e37386bf","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -51,7 +51,7 @@ protected Serializable onApplyInternal(final AnyHandler<AnyObjectTO> modelObject\n \n         final ProvisioningResult<AnyObjectTO> actual;\n \n-        if (inner.getKey() == 0) {\n+        if (inner.getKey() == null || inner.getKey() == 0) {\n             actual = anyObjectRestClient.create(AnyObjectTO.class.cast(inner));\n         } else {\n             final AnyObjectPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"d40541b176aee0588ef7c79f13c3f6c33659f9d0","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -73,7 +73,7 @@ public AnyWizardBuilder(\n \n     @Override\n     protected WizardModel buildModelSteps(final AnyHandler<T> modelObject, final WizardModel wizardModel) {\n-        final String[] clazzes = anyTypeClasses.toArray(new String[]{});\n+        final String[] clazzes = anyTypeClasses.toArray(new String[] {});\n         // optional details panel step\n         addOptionalDetailsPanel(modelObject, wizardModel);\n \n@@ -111,7 +111,7 @@ protected void onCancelInternal(final AnyHandler<T> modelObject) {\n \n     protected AnyWizardBuilder<T> addOptionalDetailsPanel(\n             final AnyHandler<T> modelObject, final WizardModel wizardModel) {\n-        if (modelObject.getInnerObject().getKey() > 0) {\n+        if (modelObject.getInnerObject().getKey() != null && modelObject.getInnerObject().getKey() > 0) {\n             wizardModel.add(new Details<>(\n                     modelObject, new ListModel<>(Collections.<StatusBean>emptyList()), pageRef, true));\n         }"},{"sha":"a38090b96914b67441fc290910ba042a75d863e6","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AuxClasses.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAuxClasses.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,12 +28,11 @@\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.GroupableTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n@@ -60,12 +59,9 @@ public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeCla\n             final List<MembershipTO> memberships;\n             final List<Long> dyngroups;\n \n-            if (entityTO instanceof UserTO) {\n-                memberships = UserTO.class.cast(entityTO).getMemberships();\n-                dyngroups = UserTO.class.cast(entityTO).getDynGroups();\n-            } else if (entityTO instanceof AnyObjectTO) {\n-                memberships = AnyObjectTO.class.cast(entityTO).getMemberships();\n-                dyngroups = AnyObjectTO.class.cast(entityTO).getDynGroups();\n+            if (entityTO instanceof GroupableTO) {\n+                memberships = GroupableTO.class.cast(entityTO).getMemberships();\n+                dyngroups = GroupableTO.class.cast(entityTO).getDynGroups();\n             } else {\n                 memberships = Collections.<MembershipTO>emptyList();\n                 dyngroups = Collections.<Long>emptyList();\n@@ -74,7 +70,7 @@ public <T extends AnyTO> AuxClasses(final T entityTO, final String... anyTypeCla\n             final AjaxPalettePanel.Builder<MembershipTO> builder =\n                     new AjaxPalettePanel.Builder<MembershipTO>().setRenderer(new IChoiceRenderer<MembershipTO>() {\n \n-                        private static final long serialVersionUID = 1L;\n+                        private static final long serialVersionUID = -3086661086073628855L;\n \n                         @Override\n                         public Object getDisplayValue(final MembershipTO object) {"},{"sha":"0404a7c346db8a0ecd75197715ba24ca5d54f509","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/DerAttrs.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -57,15 +58,9 @@ public <T extends AnyTO> DerAttrs(final T entityTO, final String... anyTypeClass\n \n             @Override\n             protected List<AttrTO> load() {\n-                final List<String> classes = CollectionUtils.collect(\n-                        anyTypeClassRestClient.list(getAllAuxClasses()),\n-                        new Transformer<AnyTypeClassTO, String>() {\n-\n-                    @Override\n-                    public String transform(final AnyTypeClassTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<>(Arrays.asList(anyTypeClass)));\n+                final List<String> classes = CollectionUtils.collect(anyTypeClassRestClient.list(getAllAuxClasses()),\n+                        EntityTOUtils.<String, AnyTypeClassTO>keyTransformer(),\n+                        new ArrayList<>(Arrays.asList(anyTypeClass)));\n \n                 final List<DerSchemaTO> derSchemas =\n                         schemaRestClient.getSchemas(SchemaType.DERIVED, classes.toArray(new String[] {}));"},{"sha":"4503df55eb410d0b251665352eb8bcefcc4d63e4","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -70,7 +70,7 @@ protected Serializable onApplyInternal(final AnyHandler<GroupTO> modelObject) {\n                 ? GroupHandler.class.cast(modelObject).fillDynamicConditions()\n                 : modelObject.getInnerObject();\n \n-        if (toBeProcessed.getKey() == 0) {\n+        if (toBeProcessed.getKey() == null || toBeProcessed.getKey() == 0) {\n             actual = groupRestClient.create(toBeProcessed);\n         } else {\n             final GroupPatch patch = AnyOperations.diff(toBeProcessed, getOriginalItem().getInnerObject(), false);\n@@ -92,7 +92,8 @@ protected GroupWizardBuilder addOptionalDetailsPanel(\n         wizardModel.add(new GroupDetails(\n                 GroupHandler.class.cast(modelObject),\n                 new ListModel<>(Collections.<StatusBean>emptyList()),\n-                false, pageRef, modelObject.getInnerObject().getKey() > 0));\n+                false, pageRef,\n+                modelObject.getInnerObject().getKey() != null && modelObject.getInnerObject().getKey() > 0));\n         return this;\n     }\n }"},{"sha":"008816320130d59bb15254d6140d30b2e884d61d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,7 +28,6 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.commons.Mode;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -79,15 +79,9 @@ public <T extends AnyTO> PlainAttrs(\n \n             @Override\n             protected List<AttrTO> load() {\n-                setSchemas(CollectionUtils.collect(\n-                        anyTypeClassRestClient.list(getAllAuxClasses()),\n-                        new Transformer<AnyTypeClassTO, String>() {\n-\n-                    @Override\n-                    public String transform(final AnyTypeClassTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<>(Arrays.asList(anyTypeClass))));\n+                setSchemas(CollectionUtils.collect(anyTypeClassRestClient.list(getAllAuxClasses()),\n+                        EntityTOUtils.<String, AnyTypeClassTO>keyTransformer(),\n+                        new ArrayList<>(Arrays.asList(anyTypeClass))));\n                 setAttrs();\n                 return new ArrayList<>(entityTO.getPlainAttrs());\n             }\n@@ -98,7 +92,7 @@ public String transform(final AnyTypeClassTO input) {\n             private static final long serialVersionUID = 9101744072914090143L;\n \n             @Override\n-            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             protected void populateItem(final ListItem<AttrTO> item) {\n                 final AttrTO attributeTO = (AttrTO) item.getDefaultModelObject();\n \n@@ -131,8 +125,8 @@ protected void populateItem(final ListItem<AttrTO> item) {\n     private void setSchemas(final List<String> anyTypeClasses) {\n \n         AttrTO attrLayout = null;\n-        final List<PlainSchemaTO> schemaTOs\n-                = schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeClasses.toArray(new String[]{}));\n+        final List<PlainSchemaTO> schemaTOs =\n+                schemaRestClient.getSchemas(SchemaType.PLAIN, anyTypeClasses.toArray(new String[] {}));\n \n         schemas.clear();\n \n@@ -189,7 +183,7 @@ private void setAttrs() {\n         entityTO.getPlainAttrs().addAll(entityData);\n     }\n \n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     private FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n         final boolean required = mode == Mode.TEMPLATE\n                 ? false"},{"sha":"7919bfe232de7b857cc6faa2c7a3315514e86438","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -48,12 +48,13 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.RelatableTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n@@ -83,6 +84,7 @@ public class Relationships extends WizardStep {\n     private final PageReference pageRef;\n \n     private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n+\n     private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n \n     private final AnyTO anyTO;\n@@ -170,13 +172,14 @@ public void onClick(final AjaxRequestTarget target, final RelationshipTO ignore)\n     }\n \n     private List<RelationshipTO> getCurrentRelationships() {\n-        return anyTO instanceof UserTO ? UserTO.class.cast(anyTO).getRelationships() : anyTO instanceof AnyObjectTO\n-                ? AnyObjectTO.class.cast(anyTO).getRelationships()\n+        return anyTO instanceof RelatableTO\n+                ? RelatableTO.class.cast(anyTO).getRelationships()\n                 : Collections.<RelationshipTO>emptyList();\n     }\n \n     private void addRelationship(\n             final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n+\n         for (RelationshipTO relationship : rels) {\n             final List<RelationshipTO> listrels;\n             if (relationships.containsKey(relationship.getType())) {\n@@ -226,15 +229,8 @@ public Specification() {\n \n             final ArrayList<String> availableRels = CollectionUtils.collect(\n                     SyncopeConsoleSession.get().getService(RelationshipTypeService.class).list(),\n-                    new SerializableTransformer<RelationshipTypeTO, String>() {\n-\n-                private static final long serialVersionUID = 5498141517922697858L;\n-\n-                @Override\n-                public String transform(final RelationshipTypeTO input) {\n-                    return input.getKey();\n-                }\n-            }, new ArrayList<String>());\n+                    EntityTOUtils.<String, RelationshipTypeTO>keyTransformer(),\n+                    new ArrayList<String>());\n \n             final AjaxDropDownChoicePanel<String> type = new AjaxDropDownChoicePanel<>(\n                     \"type\", \"type\", new PropertyModel<String>(rel, \"type\"));\n@@ -287,11 +283,11 @@ public String getIdValue(final AnyTypeTO object, final int index) {\n \n                 @Override\n                 public AnyTypeTO getObject(final String id, final IModel<? extends List<? extends AnyTypeTO>> choices) {\n-                    return IterableUtils.find(choices.getObject(), new Predicate<Object>() {\n+                    return IterableUtils.find(choices.getObject(), new Predicate<AnyTypeTO>() {\n \n                         @Override\n-                        public boolean evaluate(final Object object) {\n-                            return id.equals(AnyTypeTO.class.cast(object).getKey());\n+                        public boolean evaluate(final AnyTypeTO object) {\n+                            return id.equals(object.getKey());\n                         }\n                     });\n                 }\n@@ -358,14 +354,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         @Override\n         public void onEvent(final IEvent<?> event) {\n             if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n-                final AjaxRequestTarget target\n-                        = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n+                final AjaxRequestTarget target =\n+                        SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n                 final String fiql = SearchUtils.buildFIQL(anyObjectSearchPanel.getModel().getObject(),\n                         SyncopeClient.getAnyObjectSearchConditionBuilder(anyObjectSearchPanel.getBackObjectType()));\n                 AnyObjectSearchResultPanel.class.cast(anyObjectSearchResultPanel).search(fiql, target);\n             } else if (event.getPayload() instanceof AnySelectionSearchResultPanel.ItemSelection) {\n-                final AjaxRequestTarget target\n-                        = AnySelectionSearchResultPanel.ItemSelection.class.cast(event.getPayload()).getTarget();\n+                final AjaxRequestTarget target =\n+                        AnySelectionSearchResultPanel.ItemSelection.class.cast(event.getPayload()).getTarget();\n \n                 AnyTO right = AnySelectionSearchResultPanel.ItemSelection.class.cast(event.getPayload()).getSelection();\n                 rel.setRightKey(right.getKey());"},{"sha":"c3412fd9966b7fd42f232cd574b8002a23b54393","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Resources.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FResources.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -21,9 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -52,14 +52,8 @@ public void setObject(final List<String> object) {\n                 entityTO.getResources().clear();\n                 entityTO.getResources().addAll(object);\n             }\n-        }, new ListModel<>(CollectionUtils.collect(\n-                        new ResourceRestClient().getAll(),\n-                        new Transformer<ResourceTO, String>() {\n-\n-                    @Override\n-                    public String transform(final ResourceTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<String>()))).hideLabel().setOutputMarkupId(true));\n+        }, new ListModel<>(CollectionUtils.collect(new ResourceRestClient().getAll(),\n+                        EntityTOUtils.<String, ResourceTO>keyTransformer(),\n+                        new ArrayList<String>()))).hideLabel().setOutputMarkupId(true));\n     }\n }"},{"sha":"c21d4c07c1fc83515fdd113539fc025b806aad01","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -21,9 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -38,15 +38,9 @@ public class Roles extends WizardStep {\n     public <T extends AnyTO> Roles(final UserTO entityTO) {\n         this.setOutputMarkupId(true);\n \n-        final ArrayList<String> allRoles = CollectionUtils.collect(\n-                new RoleRestClient().getAll(),\n-                new Transformer<RoleTO, String>() {\n-\n-            @Override\n-            public String transform(final RoleTO input) {\n-                return input.getKey();\n-            }\n-        }, new ArrayList<String>());\n+        final ArrayList<String> allRoles = CollectionUtils.collect(new RoleRestClient().getAll(),\n+                EntityTOUtils.<String, RoleTO>keyTransformer(),\n+                new ArrayList<String>());\n \n         add(new AjaxPalettePanel.Builder<String>().build(\"roles\",\n                 new PropertyModel<List<String>>(entityTO, \"roles\"),"},{"sha":"21e430a8ff9406975d2380690c30826ab260f28b","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -62,7 +62,7 @@ protected Serializable onApplyInternal(final AnyHandler<UserTO> modelObject) {\n \n         final UserTO inner = modelObject.getInnerObject();\n \n-        if (inner.getKey() == 0) {\n+        if (inner.getKey() == null || inner.getKey() == 0) {\n             actual = userRestClient.create(inner, StringUtils.isNotBlank(inner.getPassword()));\n         } else {\n             final UserPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n@@ -86,7 +86,8 @@ protected Serializable onApplyInternal(final AnyHandler<UserTO> modelObject) {\n     protected UserWizardBuilder addOptionalDetailsPanel(\n             final AnyHandler<UserTO> modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new UserDetails(\n-                modelObject, statusModel, false, false, pageRef, modelObject.getInnerObject().getKey() > 0));\n+                modelObject, statusModel, false, false, pageRef,\n+                modelObject.getInnerObject().getKey() != null && modelObject.getInnerObject().getKey() > 0));\n         return this;\n     }\n "},{"sha":"66cc123947e313ae57b8fc26ca861472a3485bdd","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -27,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -55,15 +56,9 @@ public <T extends AnyTO> VirAttrs(final T entityTO, final String... anyTypeClass\n \n             @Override\n             protected List<AttrTO> load() {\n-                final List<String> classes = CollectionUtils.collect(\n-                        anyTypeClassRestClient.list(getAllAuxClasses()),\n-                        new Transformer<AnyTypeClassTO, String>() {\n-\n-                    @Override\n-                    public String transform(final AnyTypeClassTO input) {\n-                        return input.getKey();\n-                    }\n-                }, new ArrayList<>(Arrays.asList(anyTypeClass)));\n+                final List<String> classes = CollectionUtils.collect(anyTypeClassRestClient.list(getAllAuxClasses()),\n+                        EntityTOUtils.<String, AnyTypeClassTO>keyTransformer(),\n+                        new ArrayList<>(Arrays.asList(anyTypeClass)));\n \n                 final List<VirSchemaTO> virSchemas =\n                         schemaRestClient.getSchemas(SchemaType.VIRTUAL, classes.toArray(new String[] {}));\n@@ -72,7 +67,7 @@ public String transform(final AnyTypeClassTO input) {\n                 entityTO.getVirAttrs().clear();\n \n                 // This conversion from set to lis is required by the ListView.\n-                // Didn't performed by using collect parameter because entityTO change is required.\n+                // Not performed by using collect parameter because entityTO change is required.\n                 return new ArrayList<>(CollectionUtils.collect(virSchemas, new Transformer<VirSchemaTO, AttrTO>() {\n \n                     @Override"},{"sha":"79f6bc8882b0f3408079060c2e938c18547aaa38","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n@@ -72,14 +73,9 @@ public String transform(final ProvisionTO provisionTO) {\n \n             final List<String> res = new ArrayList<>();\n \n-            CollectionUtils.filter(\n-                    CollectionUtils.collect(new AnyTypeRestClient().list(), new Transformer<AnyTypeTO, String>() {\n-\n-                        @Override\n-                        public String transform(final AnyTypeTO anyTypeTO) {\n-                            return anyTypeTO.getKey();\n-                        }\n-                    }, res), new Predicate<String>() {\n+            CollectionUtils.filter(CollectionUtils.collect(new AnyTypeRestClient().list(),\n+                            EntityTOUtils.<String, AnyTypeTO>keyTransformer(), res),\n+                    new Predicate<String>() {\n \n                 @Override\n                 public boolean evaluate(final String key) {"},{"sha":"b72a127aa9b9b110a2898a15b049d231a7139caf","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -78,7 +78,9 @@ private static void diff(\n             final AnyTO updated, final AnyTO original, final AnyPatch result, final boolean incremental) {\n \n         // check same key\n-        if (updated.getKey() != original.getKey()) {\n+        if (updated.getKey() == null && original.getKey() != null\n+                || (updated.getKey() != null && !updated.getKey().equals(original.getKey()))) {\n+\n             throw new IllegalArgumentException(\"AnyTO's key must be the same\");\n         }\n         result.setKey(updated.getKey());\n@@ -380,7 +382,7 @@ private static Collection<AttrTO> patch(final Map<String, AttrTO> attrs, final S\n \n     private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, final K patch, final T result) {\n         // check same key\n-        if (to.getKey() != patch.getKey()) {\n+        if (to.getKey() == null || to.getKey() != patch.getKey()) {\n             throw new IllegalArgumentException(\n                     to.getClass().getSimpleName() + \" and \" + patch.getClass().getSimpleName()\n                     + \" keys must be the same\");"},{"sha":"b2d9c7e1a2c94e3c5cc507d3883c32cf6a0b52a7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+\n+public final class EntityTOUtils {\n+\n+    public static <KEY, E extends EntityTO<KEY>> Transformer<E, KEY> keyTransformer() {\n+        return new Transformer<E, KEY>() {\n+\n+            @Override\n+            public KEY transform(final E input) {\n+                return input.getKey();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private EntityTOUtils() {\n+    }\n+}"},{"sha":"c9165dc9e0d812535723962dddbfb4abba526a74","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractExecTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractExecTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -21,21 +21,23 @@\n import javax.xml.bind.annotation.XmlType;\n \n @XmlType\n-public class AbstractExecTO extends AbstractStartEndBean {\n+public class AbstractExecTO extends AbstractStartEndBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = -4621191979198357081L;\n \n-    private long key;\n+    private Long key;\n \n     private String status;\n \n     private String message;\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"f6e3536a6caa963b96a1f54e2275691ff8b43c62","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSchemaTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -29,19 +29,21 @@\n @XmlType\n @XmlSeeAlso({ PlainSchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AbstractSchemaTO extends AbstractBaseBean {\n+public abstract class AbstractSchemaTO extends AbstractBaseBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = 4088388951694301759L;\n \n     private String key;\n \n     private String anyTypeClass;\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"f6606e3cced6f12b3d5e5caa41a38f165f624162","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractTaskTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractTaskTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -34,22 +34,24 @@\n @XmlType\n @XmlSeeAlso({ PropagationTaskTO.class, SchedTaskTO.class, NotificationTaskTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AbstractTaskTO extends AbstractStartEndBean {\n+public abstract class AbstractTaskTO extends AbstractStartEndBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 386450127003321197L;\n \n-    private long key;\n+    private Long key;\n \n     private String latestExecStatus;\n \n     private final List<TaskExecTO> executions = new ArrayList<>();\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"35b796b409c3b086958919d955c3074abb81a14a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -33,7 +33,7 @@\n \n @XmlRootElement(name = \"anyObject\")\n @XmlType\n-public class AnyObjectTO extends AnyTO {\n+public class AnyObjectTO extends AnyTO implements RelatableTO, GroupableTO {\n \n     private static final long serialVersionUID = 8841697496476959639L;\n \n@@ -46,11 +46,13 @@ public class AnyObjectTO extends AnyTO {\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")\n+    @Override\n     public List<RelationshipTO> getRelationships() {\n         return relationships;\n     }\n \n     @JsonIgnore\n+    @Override\n     public Map<Pair<String, Long>, RelationshipTO> getRelationshipMap() {\n         Map<Pair<String, Long>, RelationshipTO> result = new HashMap<>(getRelationships().size());\n         for (RelationshipTO relationship : getRelationships()) {\n@@ -64,11 +66,13 @@ public Map<Pair<String, Long>, RelationshipTO> getRelationshipMap() {\n     @XmlElementWrapper(name = \"memberships\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"memberships\")\n+    @Override\n     public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n     @JsonIgnore\n+    @Override\n     public Map<Long, MembershipTO> getMembershipMap() {\n         Map<Long, MembershipTO> result = new HashMap<>(getMemberships().size());\n         for (MembershipTO membership : getMemberships()) {\n@@ -82,6 +86,7 @@ public Map<Long, MembershipTO> getMembershipMap() {\n     @XmlElementWrapper(name = \"dynGroups\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynGroups\")\n+    @Override\n     public List<Long> getDynGroups() {\n         return dynGroups;\n     }"},{"sha":"3a4043121c903ba19b9533e7a75934bc80f61375","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -38,11 +38,11 @@\n @XmlType\n @XmlSeeAlso({ UserTO.class, GroupTO.class, AnyObjectTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AnyTO extends ConnObjectTO {\n+public abstract class AnyTO extends ConnObjectTO implements EntityTO<Long> {\n \n     private static final long serialVersionUID = -754311920679872084L;\n \n-    private long key;\n+    private Long key;\n \n     private String type;\n \n@@ -58,11 +58,13 @@ public abstract class AnyTO extends ConnObjectTO {\n \n     private final Set<String> resources = new HashSet<>();\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"815b800aa8cf3a530376417648a12eb9bcb09264","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTypeClassTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeClassTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -30,7 +30,7 @@\n \n @XmlRootElement(name = \"anyTypeClass\")\n @XmlType\n-public class AnyTypeClassTO extends AbstractBaseBean {\n+public class AnyTypeClassTO extends AbstractBaseBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = -591757688607551266L;\n \n@@ -44,11 +44,13 @@ public class AnyTypeClassTO extends AbstractBaseBean {\n \n     private final List<String> virSchemas = new ArrayList<>();\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"9a4d44a5ca1ba2af4265ce1d6080d168f2dcfe3f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTypeTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -31,7 +31,7 @@\n \n @XmlRootElement(name = \"anyType\")\n @XmlType\n-public class AnyTypeTO extends AbstractBaseBean {\n+public class AnyTypeTO extends AbstractBaseBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = 6771657557616874373L;\n \n@@ -41,11 +41,13 @@ public class AnyTypeTO extends AbstractBaseBean {\n \n     private final List<String> classes = new ArrayList<>();\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"f44cb62d35c8717a395bedecfb11b649ca01a3bc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -37,11 +37,11 @@\n \n @XmlRootElement(name = \"connInstance\")\n @XmlType\n-public class ConnInstanceTO extends AbstractBaseBean {\n+public class ConnInstanceTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 2707778645445168671L;\n \n-    private long key;\n+    private Long key;\n \n     private String location;\n \n@@ -61,12 +61,14 @@ public class ConnInstanceTO extends AbstractBaseBean {\n \n     private ConnPoolConfTO poolConf;\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"faeedcebc1c07824c808201771e8429bf71d51d0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/DomainTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -25,7 +25,7 @@\n \n @XmlRootElement(name = \"domain\")\n @XmlType\n-public class DomainTO extends AbstractBaseBean {\n+public class DomainTO extends AbstractBaseBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = -7938075259986084934L;\n \n@@ -35,10 +35,12 @@ public class DomainTO extends AbstractBaseBean {\n \n     private CipherAlgorithm adminCipherAlgorithm;\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"493753d1da44780e578f539b8e5ac243ecb8dd22","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/EntityTO.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FEntityTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FEntityTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FEntityTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.io.Serializable;\n+\n+public interface EntityTO<KEY> extends Serializable {\n+\n+    KEY getKey();\n+\n+    void setKey(KEY key);\n+}"},{"sha":"014e89766ec8b738f32a37a8b5111adf8a17a79c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupableTO.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupableTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public interface GroupableTO {\n+\n+    Map<Long, MembershipTO> getMembershipMap();\n+\n+    List<MembershipTO> getMemberships();\n+\n+    List<Long> getDynGroups();\n+}"},{"sha":"a3409ca99dde79b8411d04097c778ee0ca6ff62b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingItemTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingItemTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,7 +28,7 @@\n \n @XmlRootElement(name = \"mappingItem\")\n @XmlType\n-public class MappingItemTO extends AbstractBaseBean {\n+public class MappingItemTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 2983498836767176862L;\n \n@@ -88,10 +88,12 @@ public void setExtAttrName(final String extAttrName) {\n         this.extAttrName = extAttrName;\n     }\n \n+    @Override\n     public Long getKey() {\n         return key;\n     }\n \n+    @Override\n     public void setKey(final Long key) {\n         this.key = key;\n     }"},{"sha":"9b241be86d6053de99048a3675549225f01be3ff","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -37,7 +37,7 @@\n \n @XmlRootElement(name = \"notification\")\n @XmlType\n-public class NotificationTO extends AbstractBaseBean {\n+public class NotificationTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = -6145117115632592612L;\n \n@@ -90,11 +90,13 @@ public List<String> getStaticRecipients() {\n         return staticRecipients;\n     }\n \n+    @Override\n     public Long getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n+    @Override\n     public void setKey(final Long key) {\n         this.key = key;\n     }"},{"sha":"b39d5432d253dc85dc515020915da5229bd364b9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -29,11 +29,11 @@\n \n @XmlRootElement(name = \"provision\")\n @XmlType\n-public class ProvisionTO extends AbstractBaseBean {\n+public class ProvisionTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 8298910216218007927L;\n \n-    private long key;\n+    private Long key;\n \n     private String anyType;\n \n@@ -45,11 +45,13 @@ public class ProvisionTO extends AbstractBaseBean {\n \n     private final List<String> virSchemas = new ArrayList<>();\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"6c0853db3f068f651ff62576294f35242f65e27a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -35,11 +35,11 @@\n \n @XmlRootElement(name = \"realm\")\n @XmlType\n-public class RealmTO extends AbstractBaseBean {\n+public class RealmTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 516330662956254391L;\n \n-    private long key;\n+    private Long key;\n \n     private String name;\n \n@@ -57,11 +57,13 @@ public class RealmTO extends AbstractBaseBean {\n     @JsonIgnore\n     private final Map<String, AnyTO> templates = new HashMap<>();\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"1ff7232f1e2b48265f2473adc260a1ac2bd19969","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelatableTO.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelatableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelatableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelatableTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+public interface RelatableTO {\n+\n+    Map<Pair<String, Long>, RelationshipTO> getRelationshipMap();\n+\n+    List<RelationshipTO> getRelationships();\n+}"},{"sha":"f790255ad904d520cb74a53bd9e585f7770f90cd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTypeTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTypeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTypeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTypeTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -25,19 +25,21 @@\n \n @XmlRootElement(name = \"relationshipType\")\n @XmlType\n-public class RelationshipTypeTO extends AbstractBaseBean {\n+public class RelationshipTypeTO extends AbstractBaseBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = -1884088415277925817L;\n \n     private String key;\n \n     private String description;\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n     @Path(\"{key}\")\n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"82f48a4dc2c1423d636385606f5f0484a5188e70","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -31,11 +31,11 @@\n \n @XmlRootElement(name = \"report\")\n @XmlType\n-public class ReportTO extends AbstractStartEndBean {\n+public class ReportTO extends AbstractStartEndBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 5274568072084814410L;\n \n-    private long key;\n+    private Long key;\n \n     private String name;\n \n@@ -53,12 +53,14 @@ public class ReportTO extends AbstractStartEndBean {\n \n     private boolean active;\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"5f757940cbea88ccfeffda1386efcd0d89d5f7f8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -38,7 +38,7 @@\n \n @XmlRootElement(name = \"resource\")\n @XmlType\n-public class ResourceTO extends AbstractAnnotatedBean {\n+public class ResourceTO extends AbstractAnnotatedBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = -9193551354041698963L;\n \n@@ -84,11 +84,13 @@ public class ResourceTO extends AbstractAnnotatedBean {\n \n     private final List<String> propagationActionsClassNames = new ArrayList<>();\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"bf59bb5ced94c582837c88095d9d84b32b160cd9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -32,7 +32,7 @@\n \n @XmlRootElement(name = \"role\")\n @XmlType\n-public class RoleTO extends AbstractBaseBean {\n+public class RoleTO extends AbstractBaseBean implements EntityTO<String> {\n \n     private static final long serialVersionUID = 4560822655754800031L;\n \n@@ -44,11 +44,13 @@ public class RoleTO extends AbstractBaseBean {\n \n     private String dynMembershipCond;\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }"},{"sha":"aa7e2ce16dc97982f86427c41a98a12adb7d1ee8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SecurityQuestionTO.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSecurityQuestionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSecurityQuestionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSecurityQuestionTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -25,20 +25,22 @@\n \n @XmlRootElement(name = \"securityQuestion\")\n @XmlType\n-public class SecurityQuestionTO extends AbstractBaseBean {\n+public class SecurityQuestionTO extends AbstractBaseBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = 5969810939993556530L;\n \n-    private long key;\n+    private Long key;\n \n     private String content;\n \n-    public long getKey() {\n+    @Override\n+    public Long getKey() {\n         return key;\n     }\n \n     @PathParam(\"key\")\n-    public void setKey(final long key) {\n+    @Override\n+    public void setKey(final Long key) {\n         this.key = key;\n     }\n "},{"sha":"e75479847119339aabb2b191a06d513f3d4a4470","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -38,7 +38,7 @@\n \n @XmlRootElement(name = \"user\")\n @XmlType\n-public class UserTO extends AnyTO {\n+public class UserTO extends AnyTO implements RelatableTO, GroupableTO {\n \n     private static final long serialVersionUID = 7791304495192615740L;\n \n@@ -183,29 +183,31 @@ public void setMustChangePassword(final boolean mustChangePassword) {\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")\n+    @Override\n     public List<RelationshipTO> getRelationships() {\n         return relationships;\n     }\n \n     @JsonIgnore\n+    @Override\n     public Map<Pair<String, Long>, RelationshipTO> getRelationshipMap() {\n         Map<Pair<String, Long>, RelationshipTO> result = new HashMap<>(getRelationships().size());\n         for (RelationshipTO relationship : getRelationships()) {\n             result.put(Pair.of(relationship.getType(), relationship.getRightKey()), relationship);\n         }\n-        result = Collections.unmodifiableMap(result);\n-\n-        return result;\n+        return Collections.unmodifiableMap(result);\n     }\n \n     @XmlElementWrapper(name = \"memberships\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"memberships\")\n+    @Override\n     public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n     @JsonIgnore\n+    @Override\n     public Map<Long, MembershipTO> getMembershipMap() {\n         Map<Long, MembershipTO> result = new HashMap<>(getMemberships().size());\n         for (MembershipTO membership : getMemberships()) {\n@@ -219,6 +221,7 @@ public Map<Long, MembershipTO> getMembershipMap() {\n     @XmlElementWrapper(name = \"dynGroups\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynGroups\")\n+    @Override\n     public List<Long> getDynGroups() {\n         return dynGroups;\n     }"},{"sha":"e47efc8ada35142fb8afa90091d34e0e2f1190d8","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/EntityUtils.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FEntityUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FEntityUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FEntityUtils.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.utils;\n+\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+\n+public final class EntityUtils {\n+\n+    public static <KEY, E extends Entity<KEY>> Transformer<E, KEY> keyTransformer() {\n+        return new Transformer<E, KEY>() {\n+\n+            @Override\n+            public KEY transform(final E input) {\n+                return input.getKey();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private EntityUtils() {\n+    }\n+}"},{"sha":"e09e0e2f87865f1d560d4248b010fcb40cb5c9cb","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/TemplateUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FTemplateUtils.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -109,7 +109,7 @@ private void fillRelationships(final Map<Pair<String, Long>, RelationshipTO> any\n             final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n \n         for (RelationshipTO memb : templateRels) {\n-            if (!anyRelMap.containsKey(memb.getRightKey())) {\n+            if (!anyRelMap.containsKey(Pair.of(memb.getRightType(), memb.getRightKey()))) {\n                 anyRels.add(memb);\n             }\n         }"},{"sha":"c5d4af7863235f7c44435678af0630f9c55cc81a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -41,23 +41,17 @@\n \n     boolean add(P attr);\n \n-    boolean remove(P attr);\n-\n     P getPlainAttr(String plainSchemaName);\n \n     List<? extends P> getPlainAttrs();\n \n     boolean add(ExternalResource resource);\n \n-    boolean remove(ExternalResource resource);\n-\n     List<String> getResourceNames();\n \n     List<? extends ExternalResource> getResources();\n \n     boolean add(AnyTypeClass auxClass);\n \n-    boolean remove(AnyTypeClass auxClass);\n-\n     List<? extends AnyTypeClass> getAuxClasses();\n }"},{"sha":"0a807fb6bbb7d5de9bb67193913bd603056ff85b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyType.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -31,7 +31,5 @@ public interface AnyType extends Entity<String> {\n \n     boolean add(AnyTypeClass anyTypeClass);\n \n-    boolean remove(AnyTypeClass anyTypeClass);\n-\n     List<? extends AnyTypeClass> getClasses();\n }"},{"sha":"f6682b59951901e649d62a1349db2d02160c8385","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTypeClass.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTypeClass.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,19 +28,13 @@ public interface AnyTypeClass extends Entity<String> {\n \n     boolean add(PlainSchema schema);\n \n-    boolean remove(PlainSchema schema);\n-\n     List<? extends PlainSchema> getPlainSchemas();\n \n     boolean add(DerSchema schema);\n \n-    boolean remove(DerSchema schema);\n-\n     List<? extends DerSchema> getDerSchemas();\n \n     boolean add(VirSchema schema);\n \n-    boolean remove(VirSchema schema);\n-\n     List<? extends VirSchema> getVirSchemas();\n }"},{"sha":"43af15b88cce101f5173cd272b2c7ce039a784bf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstance.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -54,8 +54,6 @@ public interface ConnInstance extends Entity<Long> {\n \n     boolean add(ExternalResource resource);\n \n-    boolean remove(ExternalResource resource);\n-\n     List<? extends ExternalResource> getResources();\n \n     void setConf(Set<ConnConfProperty> conf);"},{"sha":"9062bd97d24dc215a71a770bb594b04fb349ab57","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,7 +28,5 @@\n \n     boolean add(A any);\n \n-    boolean remove(A any);\n-\n     List<? extends A> getMembers();\n }"},{"sha":"dcda3d6fc807d46f2feb804bf10cad7b54d0c37d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Notification.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -50,8 +50,6 @@ public interface Notification extends Entity<Long> {\n \n     boolean add(AnyAbout about);\n \n-    boolean remove(AnyAbout about);\n-\n     AnyAbout getAbout(AnyType anyType);\n \n     List<? extends AnyAbout> getAbouts();"},{"sha":"b7bdc0c51b1cd41a510ea42071b57c3363d7b90e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -34,8 +34,6 @@\n \n     void add(String value, PlainAttrValue attrValue);\n \n-    boolean remove(PlainAttrValue attrValue);\n-\n     PlainAttrUniqueValue getUniqueValue();\n \n     void setUniqueValue(PlainAttrUniqueValue uniqueValue);"},{"sha":"71b7a220ede0a703a19b16e603dec76833e3fc3d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -47,8 +47,6 @@ public interface Realm extends Entity<Long> {\n \n     boolean add(AnyTemplateRealm template);\n \n-    boolean remove(AnyTemplateRealm template);\n-\n     AnyTemplateRealm getTemplate(AnyType anyType);\n \n     List<? extends AnyTemplateRealm> getTemplates();"},{"sha":"48c8f685655b2a845d650bc6e5e98fcc683118ef","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Report.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FReport.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -29,8 +29,6 @@ public interface Report extends Entity<Long> {\n \n     boolean add(ReportExec exec);\n \n-    boolean remove(ReportExec exec);\n-\n     List<? extends ReportExec> getExecs();\n \n     boolean add(ReportletConf reportletConf);"},{"sha":"3987e96158a83cca9656455fec854f690b2ccf3e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -30,8 +30,6 @@ public interface Role extends Entity<String> {\n \n     boolean add(Realm realm);\n \n-    boolean remove(Realm realm);\n-\n     List<? extends Realm> getRealms();\n \n     DynRoleMembership getDynMembership();"},{"sha":"c40c64345d36f4036998c8cfa5687610004d65b2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -27,8 +27,6 @@ public interface AnyObject extends Any<APlainAttr> {\n \n     boolean add(ARelationship relationship);\n \n-    boolean remove(ARelationship relationship);\n-\n     ARelationship getRelationship(RelationshipType relationshipType, Long anyObjectKey);\n \n     Collection<? extends ARelationship> getRelationships(Long anyObjectKey);\n@@ -39,8 +37,6 @@ public interface AnyObject extends Any<APlainAttr> {\n \n     boolean add(AMembership membership);\n \n-    boolean remove(AMembership membership);\n-\n     AMembership getMembership(Long membershipKey);\n \n     List<? extends AMembership> getMemberships();"},{"sha":"64c60d0fd3635098bf086e8289399a6f96dfe81d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/Conf.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,9 +28,6 @@ public interface Conf extends Any<CPlainAttr> {\n     @Override\n     boolean add(CPlainAttr attr);\n \n-    @Override\n-    boolean remove(CPlainAttr attr);\n-\n     @Override\n     List<? extends CPlainAttr> getPlainAttrs();\n "},{"sha":"b696eee1301f84d80481884973b7678429b338bc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -42,9 +42,6 @@ public interface Group extends Any<GPlainAttr> {\n     @Override\n     boolean add(GPlainAttr attr);\n \n-    @Override\n-    boolean remove(GPlainAttr attr);\n-\n     @Override\n     GPlainAttr getPlainAttr(String plainSchemaName);\n \n@@ -57,16 +54,12 @@ public interface Group extends Any<GPlainAttr> {\n \n     boolean add(ADynGroupMembership dynGroupMembership);\n \n-    boolean remove(ADynGroupMembership dynGroupMembership);\n-\n     ADynGroupMembership getADynMembership(AnyType anyType);\n \n     List<? extends ADynGroupMembership> getADynMemberships();\n \n     boolean add(TypeExtension typeExtension);\n \n-    boolean remove(TypeExtension typeExtension);\n-\n     TypeExtension getTypeExtension(AnyType anyType);\n \n     List<? extends TypeExtension> getTypeExtensions();"},{"sha":"450112f134a43cf2d1a5e65da929fabe573f38bc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/TypeExtension.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FTypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FTypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FTypeExtension.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -35,7 +35,5 @@ public interface TypeExtension extends Entity<Long> {\n \n     boolean add(AnyTypeClass anyTypeClass);\n \n-    boolean remove(AnyTypeClass anyTypeClass);\n-\n     List<? extends AnyTypeClass> getAuxClasses();\n }"},{"sha":"6aed282dc7aa1ec29862db30d3d216e7695ba0e0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/AccountPolicy.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FAccountPolicy.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -42,8 +42,6 @@ public interface AccountPolicy extends Policy {\n \n     boolean add(ExternalResource resource);\n \n-    boolean remove(ExternalResource resource);\n-\n     Set<String> getResourceNames();\n \n     Set<? extends ExternalResource> getResources();"},{"sha":"32759cdaa2788e6935a8d73a57c7e84b641246de","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -93,8 +93,6 @@ public interface ExternalResource extends AnnotatedEntity<String> {\n \n     boolean add(Provision provision);\n \n-    boolean remove(Provision provision);\n-\n     Provision getProvision(AnyType anyType);\n \n     Provision getProvision(ObjectClass objectClass);"},{"sha":"02ac4851db82d1c2c1a937dbe1d05969333fe74c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/Mapping.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FMapping.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -29,8 +29,6 @@ public interface Mapping extends Entity<Long> {\n \n     boolean add(MappingItem item);\n \n-    boolean remove(MappingItem item);\n-\n     MappingItem getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(MappingItem item);"},{"sha":"93e112d21ea4c7cd4c27b1b8d1cd15669f2e4db9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PushTask.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPushTask.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -25,8 +25,6 @@ public interface PushTask extends ProvisioningTask {\n \n     boolean add(PushTaskAnyFilter filter);\n \n-    boolean remove(PushTaskAnyFilter filter);\n-\n     PushTaskAnyFilter getFilter(AnyType anyType);\n \n     List<? extends PushTaskAnyFilter> getFilters();"},{"sha":"127b1cf70da89d6548c43214492978fbdca9b55a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SyncTask.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -39,8 +39,6 @@ public interface SyncTask extends ProvisioningTask {\n \n     boolean add(AnyTemplateSyncTask template);\n \n-    boolean remove(AnyTemplateSyncTask template);\n-\n     AnyTemplateSyncTask getTemplate(AnyType anyType);\n \n     List<? extends AnyTemplateSyncTask> getTemplates();"},{"sha":"7d2c9f6cc1cb653eb2998fc9064aac804cdb22f7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/Task.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTask.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -26,9 +26,7 @@ public interface Task extends Entity<Long> {\n \n     TaskType getType();\n \n-    boolean addExec(TaskExec exec);\n-\n-    boolean removeExec(TaskExec exec);\n+    boolean add(TaskExec exec);\n \n     List<? extends TaskExec> getExecs();\n }"},{"sha":"d1b94e77a6e1c8d7ebc325a267e9ef1a9fab95ea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -95,9 +95,6 @@ public interface User extends Any<UPlainAttr> {\n     @Override\n     boolean add(UPlainAttr attr);\n \n-    @Override\n-    boolean remove(UPlainAttr attr);\n-\n     @Override\n     UPlainAttr getPlainAttr(String plainSchemaName);\n \n@@ -106,14 +103,10 @@ public interface User extends Any<UPlainAttr> {\n \n     boolean add(Role role);\n \n-    boolean remove(Role role);\n-\n     List<? extends Role> getRoles();\n \n     boolean add(URelationship relationship);\n \n-    boolean remove(URelationship relationship);\n-\n     URelationship getRelationship(RelationshipType relationshipType, Long anyObjectKey);\n \n     Collection<? extends URelationship> getRelationships(Long anyObjectKey);\n@@ -124,8 +117,6 @@ public interface User extends Any<UPlainAttr> {\n \n     boolean add(UMembership membership);\n \n-    boolean remove(UMembership membership);\n-\n     UMembership getMembership(Long groupKey);\n \n     List<? extends UMembership> getMemberships();"},{"sha":"e27c1c94a705215630c5c161623a8284409c5cb8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":5,"deletions":15,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.misc.EntitlementsHolder;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -110,7 +111,7 @@ public AnyObject save(final AnyObject anyObject) {\n     @Override\n     public void delete(final AnyObject any) {\n         for (Group group : findDynGroupMemberships(any)) {\n-            group.getADynMembership(any.getType()).remove(any);\n+            group.getADynMembership(any.getType()).getMembers().remove(any);\n         }\n \n         entityManager().remove(any);\n@@ -144,13 +145,7 @@ public Group transform(final AMembership input) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<Long> findAllGroupKeys(final AnyObject anyObject) {\n-        return CollectionUtils.collect(findAllGroups(anyObject), new Transformer<Group, Long>() {\n-\n-            @Override\n-            public Long transform(final Group input) {\n-                return input.getKey();\n-            }\n-        });\n+        return CollectionUtils.collect(findAllGroups(anyObject), EntityUtils.<Long, Group>keyTransformer());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -168,13 +163,8 @@ public Collection<ExternalResource> findAllResources(final AnyObject anyObject)\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllResourceNames(final AnyObject anyObject) {\n-        return CollectionUtils.collect(findAllResources(anyObject), new Transformer<ExternalResource, String>() {\n-\n-            @Override\n-            public String transform(final ExternalResource input) {\n-                return input.getKey();\n-            }\n-        });\n+        return CollectionUtils.collect(\n+                findAllResources(anyObject), EntityUtils.<String, ExternalResource>keyTransformer());\n     }\n \n }"},{"sha":"d41445617f7f24e865e8b3235d092f6c990472ea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -34,13 +34,13 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.misc.utils.RealmUtils;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -101,13 +101,8 @@ private String getAdminRealmsFilter(final Set<String> adminRealms, final SearchS\n             if (realm == null) {\n                 LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n             } else {\n-                CollectionUtils.collect(realmDAO.findDescendants(realm), new Transformer<Realm, Long>() {\n-\n-                    @Override\n-                    public Long transform(final Realm descendant) {\n-                        return descendant.getKey();\n-                    }\n-                }, realmKeys);\n+                CollectionUtils.collect(\n+                        realmDAO.findDescendants(realm), EntityUtils.<Long, Realm>keyTransformer(), realmKeys);\n             }\n         }\n "},{"sha":"8efb01f6f9a11cc17b3c2920e61e09291e0aabf6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -102,14 +102,14 @@ public void delete(final String key) {\n         }\n \n         for (AnyType type : anyTypeDAO.findByTypeClass(anyTypeClass)) {\n-            type.remove(anyTypeClass);\n+            type.getClasses().remove(anyTypeClass);\n         }\n \n         for (TypeExtension typeExt : groupDAO.findTypeExtensionByAnyTypeClass(anyTypeClass)) {\n-            typeExt.remove(anyTypeClass);\n+            typeExt.getAuxClasses().remove(anyTypeClass);\n \n             if (typeExt.getAuxClasses().isEmpty()) {\n-                typeExt.getGroup().remove(typeExt);\n+                typeExt.getGroup().getTypeExtensions().remove(typeExt);\n                 typeExt.setGroup(null);\n             }\n         }"},{"sha":"27978477b284ac8caa64c51259ca37a793a93b2e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -94,7 +94,7 @@ public Conf save(final CPlainAttr attr) {\n         if (old != null && (!attr.getSchema().isUniqueConstraint()\n                 || (!attr.getUniqueValue().getStringValue().equals(old.getUniqueValue().getStringValue())))) {\n \n-            instance.remove(old);\n+            instance.getPlainAttrs().remove(old);\n             attrDAO.delete(old.getKey(), CPlainAttr.class);\n         }\n \n@@ -109,7 +109,7 @@ public Conf delete(final String key) {\n         Conf instance = get();\n         CPlainAttr attr = instance.getPlainAttr(key);\n         if (attr != null) {\n-            instance.remove(attr);\n+            instance.getPlainAttrs().remove(attr);\n             instance = entityManager().merge(instance);\n         }\n "},{"sha":"a0e5479b5d97b997422a13ec50b58a5dbf4a631a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -83,7 +83,7 @@ public void delete(final String key) {\n         }\n \n         if (schema.getAnyTypeClass() != null) {\n-            schema.getAnyTypeClass().remove(schema);\n+            schema.getAnyTypeClass().getDerSchemas().remove(schema);\n         }\n \n         entityManager().remove(schema);"},{"sha":"b270d8b88cc59f6a7316ddd334b627b6d4d897f7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -170,7 +170,7 @@ public void deleteMapping(final String intAttrName, final IntMappingType intMapp\n         for (Long itemKey : itemKeys) {\n             MappingItem item = entityManager().find(JPAMappingItem.class, itemKey);\n             if (item != null) {\n-                item.getMapping().remove(item);\n+                item.getMapping().getItems().remove(item);\n                 item.setMapping(null);\n \n                 entityManager().remove(item);\n@@ -194,16 +194,16 @@ public void delete(final String name) {\n         taskDAO.deleteAll(resource, TaskType.PUSH);\n \n         for (AnyObject anyObject : anyObjectDAO.findByResource(resource)) {\n-            anyObject.remove(resource);\n+            anyObject.getResources().remove(resource);\n         }\n         for (User user : userDAO.findByResource(resource)) {\n-            user.remove(resource);\n+            user.getResources().remove(resource);\n         }\n         for (Group group : groupDAO.findByResource(resource)) {\n-            group.remove(resource);\n+            group.getResources().remove(resource);\n         }\n         for (AccountPolicy policy : policyDAO.findByResource(resource)) {\n-            policy.remove(resource);\n+            policy.getResources().remove(resource);\n         }\n \n         for (Provision provision : resource.getProvisions()) {"},{"sha":"6c4815cfbe97c1385c2c882f5007863e4be5e4dc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -202,13 +202,13 @@ public Group save(final Group group) {\n     @Override\n     public void delete(final Group group) {\n         for (AMembership membership : findAMemberships(group)) {\n-            membership.getLeftEnd().remove(membership);\n+            membership.getLeftEnd().getMemberships().remove(membership);\n             anyObjectDAO.save(membership.getLeftEnd());\n \n             entityManager().remove(membership);\n         }\n         for (UMembership membership : findUMemberships(group)) {\n-            membership.getLeftEnd().remove(membership);\n+            membership.getLeftEnd().getMemberships().remove(membership);\n             userDAO.save(membership.getLeftEnd());\n \n             entityManager().remove(membership);\n@@ -282,7 +282,7 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n \n                     memb.add(anyObject);\n                 } else {\n-                    memb.remove(anyObject);\n+                    memb.getMembers().remove(anyObject);\n                 }\n             }\n         }\n@@ -300,7 +300,7 @@ public void refreshDynMemberships(final User user) {\n \n                     group.getUDynMembership().add(user);\n                 } else {\n-                    group.getUDynMembership().remove(user);\n+                    group.getUDynMembership().getMembers().remove(user);\n                 }\n             }\n         }"},{"sha":"2afbe157a8c7a9d6b988526ad0c245ad00cd0aad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -41,12 +41,12 @@ public <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> getJPAEnti\n         return CPlainAttr.class.isAssignableFrom(reference)\n                 ? JPACPlainAttr.class\n                 : GPlainAttr.class.isAssignableFrom(reference)\n-                        ? JPAGPlainAttr.class\n-                        : APlainAttr.class.isAssignableFrom(reference)\n-                                ? JPAAPlainAttr.class\n-                                : UPlainAttr.class.isAssignableFrom(reference)\n-                                        ? JPAUPlainAttr.class\n-                                        : null;\n+                ? JPAGPlainAttr.class\n+                : APlainAttr.class.isAssignableFrom(reference)\n+                ? JPAAPlainAttr.class\n+                : UPlainAttr.class.isAssignableFrom(reference)\n+                ? JPAUPlainAttr.class\n+                : null;\n     }\n \n     @Override\n@@ -68,7 +68,7 @@ public <T extends PlainAttr<?>> void delete(final Long key, final Class<T> refer\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Any<T>) plainAttr.getOwner()).remove(plainAttr);\n+            ((Any<T>) plainAttr.getOwner()).getPlainAttrs().remove(plainAttr);\n         }\n \n         entityManager().remove(plainAttr);"},{"sha":"4b414be7d0ab929d3734b7c0167b47a89d78a5f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -52,22 +52,22 @@ private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJP\n         return AbstractPlainAttrValue.class.isAssignableFrom(reference)\n                 ? (Class<? extends AbstractPlainAttrValue>) reference\n                 : reference.equals(CPlainAttrValue.class)\n-                        ? JPACPlainAttrValue.class\n-                        : reference.equals(CPlainAttrUniqueValue.class)\n-                                ? JPACPlainAttrUniqueValue.class\n-                                : reference.equals(GPlainAttrValue.class)\n-                                        ? JPAGPlainAttrValue.class\n-                                        : reference.equals(GPlainAttrUniqueValue.class)\n-                                                ? JPAGPlainAttrUniqueValue.class\n-                                                : reference.equals(APlainAttrValue.class)\n-                                                        ? JPAAPlainAttrValue.class\n-                                                        : reference.equals(APlainAttrUniqueValue.class)\n-                                                                ? JPAAPlainAttrUniqueValue.class\n-                                                                : reference.equals(UPlainAttrValue.class)\n-                                                                        ? JPAUPlainAttrValue.class\n-                                                                        : reference.equals(UPlainAttrUniqueValue.class)\n-                                                                                ? JPAUPlainAttrUniqueValue.class\n-                                                                                : null;\n+                ? JPACPlainAttrValue.class\n+                : reference.equals(CPlainAttrUniqueValue.class)\n+                ? JPACPlainAttrUniqueValue.class\n+                : reference.equals(GPlainAttrValue.class)\n+                ? JPAGPlainAttrValue.class\n+                : reference.equals(GPlainAttrUniqueValue.class)\n+                ? JPAGPlainAttrUniqueValue.class\n+                : reference.equals(APlainAttrValue.class)\n+                ? JPAAPlainAttrValue.class\n+                : reference.equals(APlainAttrUniqueValue.class)\n+                ? JPAAPlainAttrUniqueValue.class\n+                : reference.equals(UPlainAttrValue.class)\n+                ? JPAUPlainAttrValue.class\n+                : reference.equals(UPlainAttrUniqueValue.class)\n+                ? JPAUPlainAttrUniqueValue.class\n+                : null;\n     }\n \n     @Override\n@@ -103,7 +103,7 @@ public <T extends PlainAttrValue> void delete(final T attrValue) {\n             if (attrValue instanceof PlainAttrUniqueValue) {\n                 attrValue.getAttr().setUniqueValue(null);\n             } else {\n-                attrValue.getAttr().remove(attrValue);\n+                attrValue.getAttr().getValues().remove(attrValue);\n             }\n         }\n "},{"sha":"61b3dbdbc69166fc6f744951e7682428cb78d100","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -73,11 +73,9 @@ public List<PlainSchema> findAll() {\n \n     @Override\n     public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(((JPAPlainAttrDAO) plainAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.schema=:schema\");\n-\n-        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n+        TypedQuery<T> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + ((JPAPlainAttrDAO) plainAttrDAO).getJPAEntityReference(reference).getSimpleName()\n+                + \" e WHERE e.schema=:schema\", reference);\n         query.setParameter(\"schema\", schema);\n \n         return query.getResultList();\n@@ -107,7 +105,7 @@ public void delete(final String key) {\n         }\n \n         if (schema.getAnyTypeClass() != null) {\n-            schema.getAnyTypeClass().remove(schema);\n+            schema.getAnyTypeClass().getPlainSchemas().remove(schema);\n         }\n \n         entityManager().remove(schema);"},{"sha":"d662cd0562cde17a017ce52ead22af8ff8705099","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -76,13 +76,13 @@ public void delete(final String key) {\n \n         for (Relationship<?, ?> relationship : findRelationshipsByType(type)) {\n             if (relationship instanceof URelationship) {\n-                ((URelationship) relationship).getLeftEnd().remove((URelationship) relationship);\n+                ((URelationship) relationship).getLeftEnd().getRelationships().remove((URelationship) relationship);\n             } else if (relationship instanceof UMembership) {\n-                ((UMembership) relationship).getLeftEnd().remove((UMembership) relationship);\n+                ((UMembership) relationship).getLeftEnd().getMemberships().remove((UMembership) relationship);\n             } else if (relationship instanceof ARelationship) {\n-                ((ARelationship) relationship).getLeftEnd().remove((ARelationship) relationship);\n+                ((ARelationship) relationship).getLeftEnd().getRelationships().remove((ARelationship) relationship);\n             } else if (relationship instanceof AMembership) {\n-                ((AMembership) relationship).getLeftEnd().remove((AMembership) relationship);\n+                ((AMembership) relationship).getLeftEnd().getMemberships().remove((AMembership) relationship);\n             }\n \n             relationship.setLeftEnd(null);"},{"sha":"400f8a2d282822303a042513275f73bb31fa58df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -117,7 +117,7 @@ public void delete(final Long key) {\n     @Override\n     public void delete(final ReportExec execution) {\n         if (execution.getReport() != null) {\n-            execution.getReport().remove(execution);\n+            execution.getReport().getExecs().remove(execution);\n         }\n \n         entityManager().remove(execution);"},{"sha":"19ee6d1cdca2c5aaafb274d1ab88ec1961cc6ff0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -82,7 +82,7 @@ public void delete(final Role role) {\n         query.setParameter(\"role\", role);\n \n         for (User user : query.getResultList()) {\n-            user.remove(role);\n+            user.getRoles().remove(role);\n         }\n \n         entityManager().remove(role);\n@@ -108,7 +108,7 @@ public void refreshDynMemberships(final User user) {\n \n                     role.getDynMembership().add(user);\n                 } else {\n-                    role.getDynMembership().remove(user);\n+                    role.getDynMembership().getMembers().remove(user);\n                 }\n             }\n         }"},{"sha":"b44d4c7fbfe372eb9fb8cf03c8769bc556c69471","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -164,7 +164,7 @@ public TaskExec save(final TaskExec execution) {\n     @Transactional(rollbackFor = { Throwable.class })\n     public void saveAndAdd(final Long taskId, final TaskExec execution) {\n         Task task = taskDAO.find(taskId);\n-        task.addExec(execution);\n+        task.add(execution);\n         taskDAO.save(task);\n     }\n \n@@ -181,7 +181,7 @@ public void delete(final Long id) {\n     @Override\n     public void delete(final TaskExec execution) {\n         if (execution.getTask() != null) {\n-            execution.getTask().removeExec(execution);\n+            execution.getTask().getExecs().remove(execution);\n         }\n \n         entityManager().remove(execution);"},{"sha":"0bbe7635b2d51fab581cec45f141f229bd05cf1e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -364,10 +364,10 @@ public User save(final User user) {\n     @Override\n     public void delete(final User user) {\n         for (Role role : findDynRoleMemberships(user)) {\n-            role.getDynMembership().remove(user);\n+            role.getDynMembership().getMembers().remove(user);\n         }\n         for (Group group : findDynGroupMemberships(user)) {\n-            group.getUDynMembership().remove(user);\n+            group.getUDynMembership().getMembers().remove(user);\n         }\n \n         entityManager().remove(user);"},{"sha":"d9f5604c8a58255a72eb97332b49a79058b0d88a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -62,11 +62,9 @@ public List<VirSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n \n     @Override\n     public List<VirSchema> findByProvision(final Provision provision) {\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(JPAVirSchema.class.getSimpleName()).\n-                append(\" e WHERE e.provision=:provision\");\n-\n-        TypedQuery<VirSchema> query = entityManager().createQuery(queryString.toString(), VirSchema.class);\n+        TypedQuery<VirSchema> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAVirSchema.class.getSimpleName()\n+                + \" e WHERE e.provision=:provision\", VirSchema.class);\n         query.setParameter(\"provision\", provision);\n \n         return query.getResultList();\n@@ -99,7 +97,7 @@ public void delete(final String key) {\n         }\n \n         if (schema.getAnyTypeClass() != null) {\n-            schema.getAnyTypeClass().remove(schema);\n+            schema.getAnyTypeClass().getVirSchemas().remove(schema);\n         }\n \n         entityManager().remove(schema);"},{"sha":"e6ead6f5cab2e85316be02cb31b8fdfc93e66205","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":3,"deletions":38,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -19,25 +19,18 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Column;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n-import javax.persistence.Transient;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.AnyCheck;\n@@ -58,15 +51,6 @@\n     @Column(nullable = true)\n     private String status;\n \n-    @Transient\n-    private Set<PlainSchema> allowedPlainSchemas;\n-\n-    @Transient\n-    private Set<DerSchema> allowedDerSchemas;\n-\n-    @Transient\n-    private Set<VirSchema> allowedVirSchemas;\n-\n     @Override\n     public Realm getRealm() {\n         return realm;\n@@ -118,33 +102,14 @@ public boolean add(final ExternalResource resource) {\n         return internalGetResources().add((JPAExternalResource) resource);\n     }\n \n-    @Override\n-    public boolean remove(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return internalGetResources().remove((JPAExternalResource) resource);\n-    }\n-\n     @Override\n     public List<String> getResourceNames() {\n-        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n-\n-            @Override\n-            public String transform(final ExternalResource input) {\n-                return input.getKey();\n-            }\n-        }, new ArrayList<String>());\n+        return CollectionUtils.collect(\n+                getResources(), EntityUtils.<String, ExternalResource>keyTransformer(), new ArrayList<String>());\n     }\n \n     @Override\n     public List<? extends ExternalResource> getResources() {\n         return internalGetResources();\n     }\n-\n-    private void populateAllowedSchemas(final Collection<? extends AnyTypeClass> anyTypeClasses) {\n-        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n-            allowedPlainSchemas.addAll(anyTypeClass.getPlainSchemas());\n-            allowedDerSchemas.addAll(anyTypeClass.getDerSchemas());\n-            allowedVirSchemas.addAll(anyTypeClass.getVirSchemas());\n-        }\n-    }\n }"},{"sha":"64cd6442191b18bd642eb41038927f659c489b78","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyType.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -86,12 +86,6 @@ public boolean add(final AnyTypeClass anyTypeClass) {\n         return this.classes.add((JPAAnyTypeClass) anyTypeClass);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTypeClass anyTypeClass) {\n-        checkType(anyTypeClass, JPAAnyTypeClass.class);\n-        return this.classes.remove((JPAAnyTypeClass) anyTypeClass);\n-    }\n-\n     @Override\n     public List<? extends AnyTypeClass> getClasses() {\n         return classes;"},{"sha":"b823f49208b639b2d0554d01490fcc558863178c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -78,12 +78,6 @@ public boolean add(final PlainSchema schema) {\n         return this.plainSchemas.add((JPAPlainSchema) schema);\n     }\n \n-    @Override\n-    public boolean remove(final PlainSchema schema) {\n-        checkType(schema, JPAPlainSchema.class);\n-        return this.plainSchemas.remove((JPAPlainSchema) schema);\n-    }\n-\n     @Override\n     public List<? extends PlainSchema> getPlainSchemas() {\n         return plainSchemas;\n@@ -95,12 +89,6 @@ public boolean add(final DerSchema schema) {\n         return this.derSchemas.add((JPADerSchema) schema);\n     }\n \n-    @Override\n-    public boolean remove(final DerSchema schema) {\n-        checkType(schema, JPADerSchema.class);\n-        return this.derSchemas.remove((JPADerSchema) schema);\n-    }\n-\n     @Override\n     public List<? extends DerSchema> getDerSchemas() {\n         return derSchemas;\n@@ -112,12 +100,6 @@ public boolean add(final VirSchema schema) {\n         return this.virSchemas.add((JPAVirSchema) schema);\n     }\n \n-    @Override\n-    public boolean remove(final VirSchema schema) {\n-        checkType(schema, JPAVirSchema.class);\n-        return this.virSchemas.remove((JPAVirSchema) schema);\n-    }\n-\n     @Override\n     public List<? extends VirSchema> getVirSchemas() {\n         return virSchemas;"},{"sha":"d59982eb37c3f9458d6913fa9802caa3b9cdc2f8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -46,6 +45,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ConnInstanceCheck;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n \n @Entity\n @Table(name = JPAConnInstance.TABLE)\n@@ -210,12 +210,6 @@ public boolean add(final ExternalResource resource) {\n                 || this.resources.add((JPAExternalResource) resource);\n     }\n \n-    @Override\n-    public boolean remove(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return this.resources.remove((JPAExternalResource) resource);\n-    }\n-\n     @Override\n     public Set<ConnectorCapability> getCapabilities() {\n         return capabilities;"},{"sha":"8afba7997fb64d56ff6a8b6992e20732dc6ccc2c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n@@ -176,12 +175,6 @@ public boolean add(final AnyAbout about) {\n         return this.abouts.add((JPAAnyAbout) about);\n     }\n \n-    @Override\n-    public boolean remove(final AnyAbout about) {\n-        checkType(about, JPAAnyAbout.class);\n-        return this.abouts.remove((JPAAnyAbout) about);\n-    }\n-\n     @Override\n     public AnyAbout getAbout(final AnyType anyType) {\n         return IterableUtils.find(abouts, new Predicate<AnyAbout>() {"},{"sha":"54551684cdcc2bd417bd905531ae49d64be534c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -152,12 +152,6 @@ public boolean add(final AnyTemplateRealm template) {\n         return this.templates.add((JPAAnyTemplateRealm) template);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTemplateRealm template) {\n-        checkType(template, JPAAnyTemplateRealm.class);\n-        return this.templates.remove((JPAAnyTemplateRealm) template);\n-    }\n-\n     @Override\n     public AnyTemplateRealm getTemplate(final AnyType anyType) {\n         return IterableUtils.find(templates, new Predicate<AnyTemplate>() {"},{"sha":"835e108f6aa8ea154620f8fe219a5e66fbd8c962","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAReport.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -88,12 +88,6 @@ public boolean add(final ReportExec exec) {\n         return exec != null && !executions.contains((JPAReportExec) exec) && executions.add((JPAReportExec) exec);\n     }\n \n-    @Override\n-    public boolean remove(final ReportExec exec) {\n-        checkType(exec, JPAReportExec.class);\n-        return exec != null && executions.remove((JPAReportExec) exec);\n-    }\n-\n     @Override\n     public List<? extends ReportExec> getExecs() {\n         return executions;"},{"sha":"d2c6dc0a944ae76758159cb212bcc335923b6a80","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -95,12 +95,6 @@ public boolean add(final Realm realm) {\n         return realms.add((JPARealm) realm);\n     }\n \n-    @Override\n-    public boolean remove(final Realm realm) {\n-        checkType(realm, JPARealm.class);\n-        return realms.remove((JPARealm) realm);\n-    }\n-\n     @Override\n     public List<? extends Realm> getRealms() {\n         return realms;"},{"sha":"b6ad61346835cab196425efe181eaab4a0a62e6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADynGroupMembership.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADynGroupMembership.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -93,12 +93,6 @@ public boolean add(final AnyObject anyObject) {\n         return anyObjects.add((JPAAnyObject) anyObject);\n     }\n \n-    @Override\n-    public boolean remove(final AnyObject anyObject) {\n-        checkType(anyObject, JPAAnyObject.class);\n-        return anyObjects.remove((JPAAnyObject) anyObject);\n-    }\n-\n     @Override\n     public List<? extends AnyObject> getMembers() {\n         return anyObjects;"},{"sha":"d0abc917fe2c6c813de054947a80a5c5ff34e7f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttr.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttr.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -81,12 +81,6 @@ protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         return values.add((JPAAPlainAttrValue) attrValue);\n     }\n \n-    @Override\n-    public boolean remove(final PlainAttrValue attrValue) {\n-        checkType(attrValue, JPAAPlainAttrValue.class);\n-        return values.remove((JPAAPlainAttrValue) attrValue);\n-    }\n-\n     @Override\n     public List<? extends APlainAttrValue> getValues() {\n         return values;"},{"sha":"304956ed94c64cf700da40796c49ed57c1b6a6c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -113,12 +113,6 @@ public boolean add(final APlainAttr attr) {\n         return plainAttrs.add((JPAAPlainAttr) attr);\n     }\n \n-    @Override\n-    public boolean remove(final APlainAttr attr) {\n-        checkType(attr, JPAAPlainAttr.class);\n-        return plainAttrs.remove((JPAAPlainAttr) attr);\n-    }\n-\n     @Override\n     public List<? extends APlainAttr> getPlainAttrs() {\n         return plainAttrs;\n@@ -135,12 +129,6 @@ public boolean add(final AnyTypeClass auxClass) {\n         return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTypeClass auxClass) {\n-        checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n-    }\n-\n     @Override\n     public List<? extends AnyTypeClass> getAuxClasses() {\n         return auxClasses;\n@@ -152,12 +140,6 @@ public boolean add(final ARelationship relationship) {\n         return this.relationships.add((JPAARelationship) relationship);\n     }\n \n-    @Override\n-    public boolean remove(final ARelationship relationship) {\n-        checkType(relationship, JPAARelationship.class);\n-        return this.relationships.remove((JPAARelationship) relationship);\n-    }\n-\n     @Override\n     public ARelationship getRelationship(final RelationshipType relationshipType, final Long anyObjectKey) {\n         return IterableUtils.find(getRelationships(), new Predicate<ARelationship>() {\n@@ -204,12 +186,6 @@ public boolean add(final AMembership membership) {\n         return this.memberships.add((JPAAMembership) membership);\n     }\n \n-    @Override\n-    public boolean remove(final AMembership membership) {\n-        checkType(membership, JPAAMembership.class);\n-        return this.memberships.remove((JPAAMembership) membership);\n-    }\n-\n     @Override\n     public AMembership getMembership(final Long groupKey) {\n         return IterableUtils.find(getMemberships(), new Predicate<AMembership>() {"},{"sha":"270fa8ba9b9c4bad83036cacef4d0cd70d4fc445","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttr.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -110,12 +110,6 @@ protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         return values.add((JPACPlainAttrValue) attrValue);\n     }\n \n-    @Override\n-    public boolean remove(final PlainAttrValue attrValue) {\n-        checkType(attrValue, JPACPlainAttrValue.class);\n-        return values.remove((JPACPlainAttrValue) attrValue);\n-    }\n-\n     @Override\n     public List<? extends CPlainAttrValue> getValues() {\n         return values;"},{"sha":"7347fbbd2723371989f74e569492c361f4331295","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -70,12 +70,6 @@ public boolean add(final CPlainAttr attr) {\n         return plainAttrs.add((JPACPlainAttr) attr);\n     }\n \n-    @Override\n-    public boolean remove(final CPlainAttr attr) {\n-        checkType(attr, JPACPlainAttr.class);\n-        return plainAttrs.remove((JPACPlainAttr) attr);\n-    }\n-\n     @Override\n     public CPlainAttr getPlainAttr(final String plainSchemaName) {\n         return IterableUtils.find(plainAttrs, new Predicate<CPlainAttr>() {\n@@ -98,11 +92,6 @@ public boolean add(final ExternalResource resource) {\n         return false;\n     }\n \n-    @Override\n-    public boolean remove(final ExternalResource resource) {\n-        return false;\n-    }\n-\n     @Override\n     public List<String> getResourceNames() {\n         return Collections.emptyList();\n@@ -118,11 +107,6 @@ public boolean add(final AnyTypeClass auxClass) {\n         return false;\n     }\n \n-    @Override\n-    public boolean remove(final AnyTypeClass auxClass) {\n-        return false;\n-    }\n-\n     @Override\n     public List<? extends AnyTypeClass> getAuxClasses() {\n         return Collections.emptyList();"},{"sha":"1090351225b090862b6e06a413ff1f8f0cd0984f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttr.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttr.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -81,12 +81,6 @@ protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         return values.add((JPAGPlainAttrValue) attrValue);\n     }\n \n-    @Override\n-    public boolean remove(final PlainAttrValue attrValue) {\n-        checkType(attrValue, JPAGPlainAttrValue.class);\n-        return values.remove((JPAGPlainAttrValue) attrValue);\n-    }\n-\n     @Override\n     public List<? extends GPlainAttrValue> getValues() {\n         return values;"},{"sha":"7444bd349155d6808732b3ac17dadfee4e767caa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -165,12 +165,6 @@ public boolean add(final GPlainAttr attr) {\n         return plainAttrs.add((JPAGPlainAttr) attr);\n     }\n \n-    @Override\n-    public boolean remove(final GPlainAttr attr) {\n-        checkType(attr, JPAGPlainAttr.class);\n-        return plainAttrs.remove((JPAGPlainAttr) attr);\n-    }\n-\n     @Override\n     public List<? extends GPlainAttr> getPlainAttrs() {\n         return plainAttrs;\n@@ -193,12 +187,6 @@ public boolean add(final AnyTypeClass auxClass) {\n         return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTypeClass auxClass) {\n-        checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n-    }\n-\n     @Override\n     public List<? extends AnyTypeClass> getAuxClasses() {\n         return auxClasses;\n@@ -210,12 +198,6 @@ public boolean add(final ADynGroupMembership dynGroupMembership) {\n         return this.aDynMemberships.add((JPAADynGroupMembership) dynGroupMembership);\n     }\n \n-    @Override\n-    public boolean remove(final ADynGroupMembership dynGroupMembership) {\n-        checkType(dynGroupMembership, JPAADynGroupMembership.class);\n-        return this.aDynMemberships.remove((JPAADynGroupMembership) dynGroupMembership);\n-    }\n-\n     @Override\n     public ADynGroupMembership getADynMembership(final AnyType anyType) {\n         return IterableUtils.find(aDynMemberships, new Predicate<ADynGroupMembership>() {\n@@ -238,12 +220,6 @@ public boolean add(final TypeExtension typeExtension) {\n         return this.typeExtensions.add((JPATypeExtension) typeExtension);\n     }\n \n-    @Override\n-    public boolean remove(final TypeExtension typeExtension) {\n-        checkType(typeExtension, JPATypeExtension.class);\n-        return this.typeExtensions.remove((JPATypeExtension) typeExtension);\n-    }\n-\n     @Override\n     public TypeExtension getTypeExtension(final AnyType anyType) {\n         return IterableUtils.find(typeExtensions, new Predicate<TypeExtension>() {"},{"sha":"9510c23ec87d960677a0c8c1da19e509b9980e6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -95,12 +95,6 @@ public boolean add(final AnyTypeClass auxClass) {\n         return auxClasses.contains((JPAAnyTypeClass) auxClass) || auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTypeClass auxClass) {\n-        checkType(auxClass, JPAAnyTypeClass.class);\n-        return auxClasses.remove((JPAAnyTypeClass) auxClass);\n-    }\n-\n     @Override\n     public List<? extends AnyTypeClass> getAuxClasses() {\n         return auxClasses;"},{"sha":"c5099f397e74c946d1205dec6418f4f17bcf1264","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -37,6 +37,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n@@ -129,25 +130,14 @@ public boolean add(final ExternalResource resource) {\n         return resources.contains((JPAExternalResource) resource) || resources.add((JPAExternalResource) resource);\n     }\n \n-    @Override\n-    public boolean remove(final ExternalResource resource) {\n-        checkType(resource, JPAExternalResource.class);\n-        return resources.remove((JPAExternalResource) resource);\n-    }\n-\n     @Override\n     public Set<? extends ExternalResource> getResources() {\n         return resources;\n     }\n \n     @Override\n     public Set<String> getResourceNames() {\n-        return CollectionUtils.collect(getResources(), new Transformer<ExternalResource, String>() {\n-\n-            @Override\n-            public String transform(final ExternalResource input) {\n-                return input.getKey();\n-            }\n-        }, new HashSet<String>());\n+        return CollectionUtils.collect(\n+                getResources(), EntityUtils.<String, ExternalResource>keyTransformer(), new HashSet<String>());\n     }\n }"},{"sha":"12d5959482fb32d018dda954091e16802fe18d9e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -210,12 +210,6 @@ public boolean add(final Provision provision) {\n         return this.provisions.add((JPAProvision) provision);\n     }\n \n-    @Override\n-    public boolean remove(final Provision provision) {\n-        checkType(provision, JPAProvision.class);\n-        return this.provisions.remove((JPAProvision) provision);\n-    }\n-\n     @Override\n     public Provision getProvision(final ObjectClass objectClass) {\n         return IterableUtils.find(provisions, new Predicate<Provision>() {"},{"sha":"63fb48ddde20c1f86d82bf7302347f81a23f5962","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -83,12 +83,6 @@ public boolean add(final MappingItem item) {\n         return items.contains((JPAMappingItem) item) || items.add((JPAMappingItem) item);\n     }\n \n-    @Override\n-    public boolean remove(final MappingItem item) {\n-        checkType(item, JPAMappingItem.class);\n-        return items.remove((JPAMappingItem) item);\n-    }\n-\n     @Override\n     public List<? extends MappingItem> getItems() {\n         return items;"},{"sha":"4d67941a8c6ed6cb740137b9f37197380d9649d0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/AbstractTask.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractTask.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -68,17 +68,11 @@ public TaskType getType() {\n     }\n \n     @Override\n-    public boolean addExec(final TaskExec exec) {\n+    public boolean add(final TaskExec exec) {\n         checkType(exec, JPATaskExec.class);\n         return exec != null && !executions.contains((JPATaskExec) exec) && executions.add((JPATaskExec) exec);\n     }\n \n-    @Override\n-    public boolean removeExec(final TaskExec exec) {\n-        checkType(exec, JPATaskExec.class);\n-        return exec != null && executions.remove((JPATaskExec) exec);\n-    }\n-\n     @Override\n     public List<? extends TaskExec> getExecs() {\n         return executions;"},{"sha":"c6677e067485926c87cbd147904948fac3079fd8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPushTask.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -72,12 +72,6 @@ public boolean add(final PushTaskAnyFilter filter) {\n         return this.filters.add((JPAPushTaskAnyFilter) filter);\n     }\n \n-    @Override\n-    public boolean remove(final PushTaskAnyFilter filter) {\n-        checkType(filter, JPAPushTaskAnyFilter.class);\n-        return this.filters.remove((JPAPushTaskAnyFilter) filter);\n-    }\n-\n     @Override\n     public PushTaskAnyFilter getFilter(final AnyType anyType) {\n         return IterableUtils.find(filters, new Predicate<PushTaskAnyFilter>() {"},{"sha":"30b654e58bef0ffdc78de414c32554d224e2d17d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -120,12 +120,6 @@ public boolean add(final AnyTemplateSyncTask template) {\n         return this.templates.add((JPAAnyTemplateSyncTask) template);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTemplateSyncTask template) {\n-        checkType(template, JPAAnyTemplateSyncTask.class);\n-        return this.templates.remove((JPAAnyTemplateSyncTask) template);\n-    }\n-\n     @Override\n     public AnyTemplateSyncTask getTemplate(final AnyType anyType) {\n         return IterableUtils.find(templates, new Predicate<AnyTemplate>() {"},{"sha":"d4fe26471c740032125b7f02d6d729395c8240db","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/AbstractUDynMembership.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FAbstractUDynMembership.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -36,12 +36,6 @@ public boolean add(final User user) {\n         return internalGetUsers().add((JPAUser) user);\n     }\n \n-    @Override\n-    public boolean remove(final User user) {\n-        checkType(user, JPAUser.class);\n-        return internalGetUsers().remove((JPAUser) user);\n-    }\n-\n     @Override\n     public List<? extends User> getMembers() {\n         return internalGetUsers();"},{"sha":"38fa9a77b7fdbe4aea830c23ec71fb3c68de470a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttr.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -90,12 +90,6 @@ protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n         return values.add((JPAUPlainAttrValue) attrValue);\n     }\n \n-    @Override\n-    public boolean remove(final PlainAttrValue attrValue) {\n-        checkType(attrValue, JPAUPlainAttrValue.class);\n-        return values.remove((JPAUPlainAttrValue) attrValue);\n-    }\n-\n     @Override\n     public List<? extends UPlainAttrValue> getValues() {\n         return values;"},{"sha":"c8e66720d6083cde5c99e75e8f23b8a363d035f3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -216,12 +216,6 @@ public boolean add(final Role role) {\n         return roles.contains((JPARole) role) || roles.add((JPARole) role);\n     }\n \n-    @Override\n-    public boolean remove(final Role role) {\n-        checkType(role, JPARole.class);\n-        return roles.remove((JPARole) role);\n-    }\n-\n     @Override\n     public List<? extends Role> getRoles() {\n         return roles;\n@@ -284,12 +278,6 @@ public boolean add(final UPlainAttr attr) {\n         return plainAttrs.add((JPAUPlainAttr) attr);\n     }\n \n-    @Override\n-    public boolean remove(final UPlainAttr attr) {\n-        checkType(attr, JPAUPlainAttr.class);\n-        return plainAttrs.remove((JPAUPlainAttr) attr);\n-    }\n-\n     @Override\n     public List<? extends UPlainAttr> getPlainAttrs() {\n         return plainAttrs;\n@@ -480,12 +468,6 @@ public boolean add(final AnyTypeClass auxClass) {\n         return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n-    @Override\n-    public boolean remove(final AnyTypeClass auxClass) {\n-        checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n-    }\n-\n     @Override\n     public List<? extends AnyTypeClass> getAuxClasses() {\n         return auxClasses;\n@@ -497,12 +479,6 @@ public boolean add(final URelationship relationship) {\n         return this.relationships.add((JPAURelationship) relationship);\n     }\n \n-    @Override\n-    public boolean remove(final URelationship relationship) {\n-        checkType(relationship, JPAURelationship.class);\n-        return this.relationships.remove((JPAURelationship) relationship);\n-    }\n-\n     @Override\n     public URelationship getRelationship(final RelationshipType relationshipType, final Long anyObjectKey) {\n         return IterableUtils.find(getRelationships(), new Predicate<URelationship>() {\n@@ -549,12 +525,6 @@ public boolean add(final UMembership membership) {\n         return this.memberships.add((JPAUMembership) membership);\n     }\n \n-    @Override\n-    public boolean remove(final UMembership membership) {\n-        checkType(membership, JPAUMembership.class);\n-        return this.memberships.remove((JPAUMembership) membership);\n-    }\n-\n     @Override\n     public UMembership getMembership(final Long groupKey) {\n         return IterableUtils.find(getMemberships(), new Predicate<UMembership>() {"},{"sha":"469816c5d0d21f8ef1a9426793aba3530f7414a3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -81,7 +81,7 @@ public void issueSYNCOPE214() {\n         exec.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n         exec.setMessage(faultyMessage);\n \n-        task.addExec(exec);\n+        task.add(exec);\n         exec.setTask(task);\n \n         exec = taskExecDAO.save(exec);"},{"sha":"33980a2ca98f18cd52ca6677543e3451eba96670","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -30,8 +30,8 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -217,13 +217,9 @@ public void udynMembership() {\n         // 3. verify that expected users have the created group dynamically assigned\n         assertEquals(2, actual.getUDynMembership().getMembers().size());\n         assertEquals(new HashSet<>(Arrays.asList(4L, newUserKey)),\n-                CollectionUtils.collect(actual.getUDynMembership().getMembers(), new Transformer<User, Long>() {\n-\n-                    @Override\n-                    public Long transform(final User input) {\n-                        return input.getKey();\n-                    }\n-                }, new HashSet<Long>()));\n+                CollectionUtils.collect(actual.getUDynMembership().getMembers(),\n+                        EntityUtils.<Long, User>keyTransformer(),\n+                        new HashSet<Long>()));\n \n         user = userDAO.find(4L);\n         assertNotNull(user);\n@@ -312,13 +308,8 @@ public void adynMembership() {\n         assertEquals(2, actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getMembers().size());\n         assertEquals(new HashSet<>(Arrays.asList(1L, newAnyObjectKey)),\n                 CollectionUtils.collect(actual.getADynMembership(anyTypeDAO.find(\"PRINTER\")).getMembers(),\n-                        new Transformer<AnyObject, Long>() {\n-\n-                    @Override\n-                    public Long transform(final AnyObject input) {\n-                        return input.getKey();\n-                    }\n-                }, new HashSet<Long>()));\n+                        EntityUtils.<Long, AnyObject>keyTransformer(),\n+                        new HashSet<Long>()));\n \n         anyObject = anyObjectDAO.find(1L);\n         assertNotNull(anyObject);"},{"sha":"6f7e8beac00042ed3865152a65e4a3d70b06a44a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -275,7 +275,7 @@ public void emptyMapping() {\n         }\n \n         Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup());\n-        ldap.remove(groupProvision);\n+        ldap.getProvisions().remove(groupProvision);\n         for (VirSchema schema : virSchemaDAO.findByProvision(groupProvision)) {\n             virSchemaDAO.delete(schema.getKey());\n         }"},{"sha":"f9d284f18651510f9ebd3b259c98fc42a334df3d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -28,9 +28,9 @@\n import java.util.HashSet;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -125,13 +125,9 @@ public void dynMembership() {\n         // 3. verify that expected users have the created role dynamically assigned\n         assertEquals(2, actual.getDynMembership().getMembers().size());\n         assertEquals(new HashSet<>(Arrays.asList(4L, newUserKey)),\n-                CollectionUtils.collect(actual.getDynMembership().getMembers(), new Transformer<User, Long>() {\n-\n-                    @Override\n-                    public Long transform(final User input) {\n-                        return input.getKey();\n-                    }\n-                }, new HashSet<Long>()));\n+                CollectionUtils.collect(actual.getDynMembership().getMembers(),\n+                        EntityUtils.<Long, User>keyTransformer(),\n+                        new HashSet<Long>()));\n \n         user = userDAO.find(4L);\n         assertNotNull(user);"},{"sha":"ae07439eee641587b532f996c08584a8ecb723a8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -127,7 +127,7 @@ public void addPropagationTaskExecution() {\n         execution.setTask(task);\n         execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n         execution.setStart(new Date());\n-        task.addExec(execution);\n+        task.add(execution);\n \n         taskDAO.save(task);\n         taskDAO.flush();\n@@ -150,7 +150,7 @@ public void addSyncTaskExecution() {\n         execution.setTask(task);\n         execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n-        task.addExec(execution);\n+        task.add(execution);\n \n         taskDAO.save(task);\n         taskDAO.flush();\n@@ -173,7 +173,7 @@ public void addPushTaskExecution() {\n         execution.setTask(task);\n         execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n-        task.addExec(execution);\n+        task.add(execution);\n \n         taskDAO.save(task);\n         taskDAO.flush();"},{"sha":"129b78c4b5a982d41525120e7e08bea21d6bfcc8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -95,7 +95,7 @@ public void ships() {\n         assertEquals(1, user.getMemberships().size());\n         assertEquals(7L, user.getMemberships().get(0).getRightEnd().getKey(), 0);\n \n-        user.remove(user.getMemberships().get(0));\n+        user.getMemberships().remove(0);\n \n         UMembership newM = entityFactory.newEntity(UMembership.class);\n         newM.setLeftEnd(user);\n@@ -112,7 +112,7 @@ public void ships() {\n         assertEquals(1, user.getRelationships().size());\n         assertEquals(1L, user.getRelationships().get(0).getRightEnd().getKey(), 0);\n \n-        user.remove(user.getRelationships().get(0));\n+        user.getRelationships().remove(0);\n \n         URelationship newR = entityFactory.newEntity(URelationship.class);\n         newR.setType(relationshipTypeDAO.find(\"neighborhood\"));"},{"sha":"a111cc473e953fbdfa8d04fa681622fc86d77b9b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ConnInstanceDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -31,6 +31,6 @@ public interface ConnInstanceDataBinder {\n \n     ConnInstanceTO getConnInstanceTO(ConnInstance connInstance);\n \n-    ConnInstance update(long key, ConnInstanceTO connInstanceTO);\n+    ConnInstance update(Long key, ConnInstanceTO connInstanceTO);\n \n }"},{"sha":"3d96cfc92ed042c72cbc05ab6eefc8fc9cdc5e02","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -62,6 +62,7 @@\n import org.apache.syncope.core.misc.utils.ConnObjectUtils;\n import org.apache.syncope.core.misc.utils.MappingUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n@@ -345,7 +346,7 @@ public Long transform(final PlainAttrValue input) {\n \n             case DELETE:\n             default:\n-                any.remove(attr);\n+                any.getPlainAttrs().remove(attr);\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n         }\n \n@@ -382,7 +383,7 @@ protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch,\n \n                     case DELETE:\n                     default:\n-                        any.remove(auxClass);\n+                        any.getAuxClasses().remove(auxClass);\n                 }\n             }\n         }\n@@ -402,7 +403,7 @@ protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch,\n                     case DELETE:\n                     default:\n                         propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                        any.remove(resource);\n+                        any.getResources().remove(resource);\n                 }\n             }\n         }\n@@ -513,13 +514,7 @@ protected void fillTO(final AnyTO anyTO,\n \n         anyTO.setRealm(realmFullPath);\n \n-        CollectionUtils.collect(auxClasses, new Transformer<AnyTypeClass, String>() {\n-\n-            @Override\n-            public String transform(final AnyTypeClass role) {\n-                return role.getKey();\n-            }\n-        }, anyTO.getAuxClasses());\n+        CollectionUtils.collect(auxClasses, EntityUtils.<String, AnyTypeClass>keyTransformer(), anyTO.getAuxClasses());\n \n         for (PlainAttr<?> plainAttr : plainAttrs) {\n             AttrTO attrTO = new AttrTO();"},{"sha":"1c889f6292f0eb06f71a5f81c89a757e391fbd00","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -111,13 +112,9 @@ public MembershipTO transform(final AMembership membership) {\n             }, anyObjectTO.getMemberships());\n \n             // dynamic memberships\n-            CollectionUtils.collect(anyObjectDAO.findDynGroupMemberships(anyObject), new Transformer<Group, Long>() {\n-\n-                @Override\n-                public Long transform(final Group group) {\n-                    return group.getKey();\n-                }\n-            }, anyObjectTO.getDynGroups());\n+            CollectionUtils.collect(anyObjectDAO.findDynGroupMemberships(anyObject),\n+                    EntityUtils.<Long, Group>keyTransformer(),\n+                    anyObjectTO.getDynGroups());\n         }\n \n         return anyObjectTO;\n@@ -256,7 +253,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                     ARelationship relationship =\n                             anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n                     if (relationship != null) {\n-                        anyObject.remove(relationship);\n+                        anyObject.getRelationships().remove(relationship);\n                         toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n                     }\n \n@@ -305,7 +302,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             if (patch.getMembershipTO() != null) {\n                 AMembership membership = anyObject.getMembership(patch.getMembershipTO().getRightKey());\n                 if (membership != null) {\n-                    anyObject.remove(membership);\n+                    anyObject.getMemberships().remove(membership);\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n "},{"sha":"d4a6b089f5ebc534e1309b21975f450340f65683","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -44,7 +44,7 @@\n @Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"key\", \"poolConf\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"poolConf\" };\n \n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n@@ -99,14 +99,14 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n     }\n \n     @Override\n-    public ConnInstance update(final long connInstanceId, final ConnInstanceTO connInstanceTO) {\n+    public ConnInstance update(final Long key, final ConnInstanceTO connInstanceTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n-        if (connInstanceId == 0) {\n-            sce.getElements().add(\"connector id\");\n+        if (key == 0) {\n+            sce.getElements().add(\"connector key\");\n         }\n \n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n+        ConnInstance connInstance = connInstanceDAO.find(key);\n         connInstance.getCapabilities().clear();\n         connInstance.getCapabilities().addAll(connInstanceTO.getCapabilities());\n \n@@ -180,7 +180,6 @@ public ConnConfPropSchema build(final ConfigurationProperty property) {\n     @Override\n     public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-        connInstanceTO.setKey(connInstance.getKey() == null ? 0L : connInstance.getKey());\n \n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n \n@@ -193,11 +192,11 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n             ConnConfProperty property = IterableUtils.find(connInstanceTO.getConf(),\n                     new Predicate<ConnConfProperty>() {\n \n-                        @Override\n-                        public boolean evaluate(final ConnConfProperty candidate) {\n-                            return propName.equals(candidate.getSchema().getName());\n-                        }\n-                    });\n+                @Override\n+                public boolean evaluate(final ConnConfProperty candidate) {\n+                    return propName.equals(candidate.getSchema().getName());\n+                }\n+            });\n             if (property == null) {\n                 property = new ConnConfProperty();\n                 connInstanceTO.getConf().add(property);"},{"sha":"a51729ba42829fd07bc2d7c0370d5fafa641a2f9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -164,7 +164,7 @@ public void create(final Group group, final GroupTO groupTO) {\n                 }\n \n                 if (typeExt.getAuxClasses().isEmpty()) {\n-                    group.remove(typeExt);\n+                    group.getTypeExtensions().remove(typeExt);\n                     typeExt.setGroup(null);\n                 }\n             }\n@@ -280,7 +280,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n \n                 // only consider non-empty type extensions\n                 if (typeExt.getAuxClasses().isEmpty()) {\n-                    group.remove(typeExt);\n+                    group.getTypeExtensions().remove(typeExt);\n                     typeExt.setGroup(null);\n                 }\n             }"},{"sha":"dc8a9573d128614469287df5e74b954d58c5fa1a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -100,7 +100,7 @@ private PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaTO)\n                 merged.setAnyTypeClass(anyTypeClass);\n             }\n         } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n-            merged.getAnyTypeClass().remove(merged);\n+            merged.getAnyTypeClass().getPlainSchemas().remove(merged);\n             merged.setAnyTypeClass(null);\n         }\n \n@@ -191,7 +191,7 @@ private DerSchema fill(final DerSchema schema, final DerSchemaTO schemaTO) {\n                 merged.setAnyTypeClass(anyTypeClass);\n             }\n         } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n-            merged.getAnyTypeClass().remove(merged);\n+            merged.getAnyTypeClass().getDerSchemas().remove(merged);\n             merged.setAnyTypeClass(null);\n         }\n \n@@ -234,7 +234,7 @@ private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n                 schema.setAnyTypeClass(anyTypeClass);\n             }\n         } else if (schemaTO.getAnyTypeClass() == null && schema.getAnyTypeClass() != null) {\n-            schema.getAnyTypeClass().remove(schema);\n+            schema.getAnyTypeClass().getVirSchemas().remove(schema);\n             schema.setAnyTypeClass(null);\n         }\n "},{"sha":"36b3b77bbf63e086ee96bac5e2ef6775ced7bd0f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":15,"deletions":26,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n+import org.apache.syncope.core.misc.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n@@ -121,11 +122,11 @@ public UserTO getAuthenticatedUserTO() {\n         String authUsername = AuthContextUtils.getUsername();\n         if (anonymousUser.equals(authUsername)) {\n             authUserTO = new UserTO();\n-            authUserTO.setKey(-2);\n+            authUserTO.setKey(-2L);\n             authUserTO.setUsername(anonymousUser);\n         } else if (adminUser.equals(authUsername)) {\n             authUserTO = new UserTO();\n-            authUserTO.setKey(-1);\n+            authUserTO.setKey(-1L);\n             authUserTO.setUsername(adminUser);\n         } else {\n             User authUser = userDAO.find(authUsername);\n@@ -364,7 +365,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n \n                     case DELETE:\n                     default:\n-                        user.remove(role);\n+                        user.getRoles().remove(role);\n                 }\n             }\n         }\n@@ -388,7 +389,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     URelationship relationship =\n                             user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n                     if (relationship != null) {\n-                        user.remove(relationship);\n+                        user.getRelationships().remove(relationship);\n                         toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n                     }\n \n@@ -426,7 +427,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             if (patch.getMembershipTO() != null) {\n                 UMembership membership = user.getMembership(patch.getMembershipTO().getRightKey());\n                 if (membership != null) {\n-                    user.remove(membership);\n+                    user.getMemberships().remove(membership);\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n \n@@ -516,13 +517,9 @@ public UserTO getUserTO(final User user, final boolean details) {\n \n         if (details) {\n             // roles\n-            CollectionUtils.collect(user.getRoles(), new Transformer<Role, String>() {\n-\n-                @Override\n-                public String transform(final Role role) {\n-                    return role.getKey();\n-                }\n-            }, userTO.getRoles());\n+            CollectionUtils.collect(user.getRoles(),\n+                    EntityUtils.<String, Role>keyTransformer(),\n+                    userTO.getRoles());\n \n             // relationships\n             CollectionUtils.collect(user.getRelationships(), new Transformer<URelationship, RelationshipTO>() {\n@@ -544,20 +541,12 @@ public MembershipTO transform(final UMembership membership) {\n             }, userTO.getMemberships());\n \n             // dynamic memberships\n-            CollectionUtils.collect(userDAO.findDynRoleMemberships(user), new Transformer<Role, String>() {\n-\n-                @Override\n-                public String transform(final Role role) {\n-                    return role.getKey();\n-                }\n-            }, userTO.getDynRoles());\n-            CollectionUtils.collect(userDAO.findDynGroupMemberships(user), new Transformer<Group, Long>() {\n-\n-                @Override\n-                public Long transform(final Group group) {\n-                    return group.getKey();\n-                }\n-            }, userTO.getDynGroups());\n+            CollectionUtils.collect(userDAO.findDynRoleMemberships(user),\n+                    EntityUtils.<String, Role>keyTransformer(),\n+                    userTO.getDynRoles());\n+            CollectionUtils.collect(userDAO.findDynGroupMemberships(user),\n+                    EntityUtils.<Long, Group>keyTransformer(),\n+                    userTO.getDynGroups());\n         }\n \n         return userTO;"},{"sha":"09594d4ace132bc8075f1014ed93e1040c3c17ec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -408,7 +408,7 @@ private String getRecipientEmail(\n     @Override\n     public TaskExec storeExec(final TaskExec execution) {\n         NotificationTask task = taskDAO.find(execution.getTask().getKey());\n-        task.addExec(execution);\n+        task.add(execution);\n         task.setExecuted(true);\n         taskDAO.save(task);\n         // this flush call is needed to generate a value for the execution key"},{"sha":"b74471cab78e29aa710fb81ec853011b09842ac7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -450,7 +450,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 LOG.debug(\"Execution to be stored: {}\", execution);\n \n                 execution.setTask(task);\n-                task.addExec(execution);\n+                task.add(execution);\n \n                 taskDAO.save(task);\n                 // needed to generate a value for the execution key"},{"sha":"82f6f02536c790761607aa02d2abc9e2de41b25a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -303,7 +303,7 @@ public void issueSYNCOPE10() {\n         resourceTO.setKey(\"newAbout103\" + getUUIDString());\n \n         // Make it new.\n-        connInstanceTO.setKey(0);\n+        connInstanceTO.setKey(0L);\n         connInstanceTO.setDisplayName(\"newDisplayName\" + getUUIDString());\n         // ----------------------------------\n \n@@ -695,7 +695,7 @@ public void bulkAction() {\n \n         ConnInstanceTO conn = connectorService.read(101L, Locale.ENGLISH.getLanguage());\n \n-        conn.setKey(0);\n+        conn.setKey(0L);\n         conn.setDisplayName(\"forBulk1\");\n \n         bulkAction.getTargets().add(String.valueOf(getObject("},{"sha":"d2baebbe0c8d2e1ec8adfa67f179273fcef6cc77","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -134,12 +134,12 @@ public void issueSYNCOPE741() {\n         // check read\n         PropagationTaskTO task = taskService.read(1L, false);\n         assertNotNull(task);\n-        assertEquals(1L, task.getKey());\n+        assertEquals(1L, task.getKey(), 0);\n         assertTrue(task.getExecutions().isEmpty());\n \n         task = taskService.read(1L, true);\n         assertNotNull(task);\n-        assertEquals(1L, task.getKey());\n+        assertEquals(1L, task.getKey(), 0);\n         assertFalse(task.getExecutions().isEmpty());\n \n         // check list executions"},{"sha":"4b727cf8e9e68db8703d5277b25bd4517e1fc93e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RealmITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -84,7 +84,7 @@ public void createUpdate() {\n         assertNotNull(actual.getKey());\n         assertEquals(\"last\", actual.getName());\n         assertEquals(\"/even/two/last\", actual.getFullPath());\n-        assertEquals(actual.getParent(), getRealm(\"/even/two\").getKey());\n+        assertEquals(actual.getParent(), getRealm(\"/even/two\").getKey(), 0);\n         assertNull(realm.getAccountPolicy());\n         assertNull(realm.getPasswordPolicy());\n "},{"sha":"c30cb194e1f7b99b586cf27feca2062fd294eb38","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -184,7 +184,7 @@ private void checkExport(final Long execId, final ReportExecExportFormat fmt) th\n     @Test\n     public void executeAndExport() throws IOException {\n         ReportTO reportTO = reportService.read(1L);\n-        reportTO.setKey(0);\n+        reportTO.setKey(0L);\n         reportTO.setName(\"executeAndExport\" + getUUIDString());\n         reportTO.setActive(false);\n         reportTO.getExecutions().clear();\n@@ -220,7 +220,7 @@ public void deleteExecutions() {\n         }\n \n         ReportTO reportTO = reportService.read(1L);\n-        reportTO.setKey(0);\n+        reportTO.setKey(0L);\n         reportTO.setName(\"deleteExecutions\" + getUUIDString());\n         reportTO.getExecutions().clear();\n         reportTO = createReport(reportTO);\n@@ -274,7 +274,7 @@ public void issueSYNCOPE43() {\n     public void issueSYNCOPE102() throws IOException {\n         // Create\n         ReportTO reportTO = reportService.read(1L);\n-        reportTO.setKey(0);\n+        reportTO.setKey(0L);\n         reportTO.setName(\"issueSYNCOPE102\" + getUUIDString());\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);"},{"sha":"8832540652399c1f4aa55fb437fd328fe71ac584","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -75,7 +75,7 @@ public void update() {\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n-        taskMod.setKey(5);\n+        taskMod.setKey(5L);\n         taskMod.setCronExpression(null);\n \n         taskService.update(taskMod);\n@@ -189,7 +189,7 @@ public void issueSYNCOPE660() {\n         } while (list.size() < 1 && i < maxit);\n \n         assertEquals(1, list.size());\n-        assertEquals(task.getKey(), list.get(0).getTask());\n+        assertEquals(task.getKey(), list.get(0).getTask(), 0);\n \n         taskService.actionJob(task.getKey(), JobAction.STOP);\n "},{"sha":"d04734749d168ca0ce8584982bb7628b492711ff","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -84,7 +84,7 @@ public void searchByUsernameAndKey() {\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.getResult().size());\n         assertEquals(\"rossini\", matchingUsers.getResult().iterator().next().getUsername());\n-        assertEquals(1L, matchingUsers.getResult().iterator().next().getKey());\n+        assertEquals(1L, matchingUsers.getResult().iterator().next().getKey(), 0);\n     }\n \n     @Test\n@@ -96,7 +96,7 @@ public void searchByGroupNameAndKey() {\n         assertNotNull(groups);\n         assertEquals(1, groups.getResult().size());\n         assertEquals(\"root\", groups.getResult().iterator().next().getName());\n-        assertEquals(1L, groups.getResult().iterator().next().getKey());\n+        assertEquals(1L, groups.getResult().iterator().next().getKey(), 0);\n     }\n \n     @Test\n@@ -240,7 +240,7 @@ public void searchByRelationshipAnyCond() {\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"userOwner\").equalTo(5).query()).build());\n         assertNotNull(groups);\n         assertEquals(1, groups.getResult().size());\n-        assertEquals(6L, groups.getResult().iterator().next().getKey());\n+        assertEquals(6L, groups.getResult().iterator().next().getKey(), 0);\n     }\n \n     @Test"},{"sha":"dd8242bd2d6c1698a4bb09702dffcf0fcaad1d44","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -488,7 +488,7 @@ public void delete() {\n         ProvisioningResult<UserTO> result = deleteUser(key);\n         assertNotNull(result);\n         userTO = result.getAny();\n-        assertEquals(key, userTO.getKey());\n+        assertEquals(key, userTO.getKey(), 0);\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n         // check for propagation result\n@@ -517,7 +517,7 @@ public void deleteByUsername() {\n         ProvisioningResult<UserTO> result = deleteUser(userTO.getKey());\n         assertNotNull(result);\n         userTO = result.getAny();\n-        assertEquals(key, userTO.getKey());\n+        assertEquals(key, userTO.getKey(), 0);\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n         // check for propagation result"},{"sha":"02a2c7a4ad12c40e621b6c149c3f62089e412d5f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -72,7 +72,7 @@ public void createWithReject() {\n         WorkflowFormTO form = userWorkflowService.getFormForUser(userTO.getKey());\n         assertNotNull(form);\n         assertNotNull(form.getUserKey());\n-        assertEquals(userTO.getKey(), form.getUserKey());\n+        assertEquals(userTO.getKey(), form.getUserKey(), 0);\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n@@ -230,7 +230,7 @@ public void issueSYNCOPE15() {\n         // 1. create user with group 9 (and verify that no propagation occurred)\n         userTO = createUser(userTO).getAny();\n         assertNotNull(userTO);\n-        assertNotEquals(0L, userTO.getKey());\n+        assertNotEquals(0L, userTO.getKey(), 0);\n         assertNotNull(userTO.getCreationDate());\n         assertNotNull(userTO.getCreator());\n         assertNotNull(userTO.getLastChangeDate());"},{"sha":"a6a2444ff93bcbdcecb849c98bc2d96c146db49c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=6d56c7ed63f7701d3039e3fb57e38f5d9eb062a6","patch":"@@ -65,7 +65,7 @@ public void crud() {\n \n         schema = createSchema(SchemaType.VIRTUAL, schema);\n         assertNotNull(schema);\n-        assertEquals(csv.getProvisions().get(0).getKey(), schema.getProvision());\n+        assertEquals(csv.getProvisions().get(0).getKey(), schema.getProvision(), 0);\n \n         csv = resourceService.read(RESOURCE_NAME_CSV);\n         assertNotNull(csv);"}]}