{"sha":"b92248f160798e3f99c22ce80a5d54de32867d17","node_id":"C_kwDOJfYA1toAKGI5MjI0OGYxNjA3OThlM2Y5OWMyMmNlODBhNWQ1NGRlMzI4NjdkMTc","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-10-21T12:17:42Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-10-21T12:17:42Z"},"message":"[SYNCOPE-1700] Introducing ojson (#382)","tree":{"sha":"c1acbfcd32fd98468d64e86551bc951405b7420b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c1acbfcd32fd98468d64e86551bc951405b7420b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b92248f160798e3f99c22ce80a5d54de32867d17","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUo3mCRBK7hj4Ov3rIwAAIiEIADAMTyJRRSRGDJmqcsBvw8wP\n/uPZiFac80xHQrLtb4mBVjpiv6x/4BEVX/qQ3Okigzf2LTQwJyEulX0itSbeh5F4\nn7LBKKZD9JTq41egd+Y+ffbv/hrBe8byW6lNGHhI69+CY/rTKQjjap32mNs0DF33\nHKKIdekZqnixn0GJbWI6T5d/K/y0SPkxsNE+xyftlhSkWjfC8YtS4QbINjU09k3l\nWzNAE2wW20/wmREQuV7dC5GhHx1GSb+GrVmVRuqcMPxYiJXeXuzRmlUGuWLoLuMx\ncowty9dGOsEtDKky9gmfK42fFhLDoo3g8H244DnoUSvhEZImVw+cl7o4uLdcGsQ=\n=ds64\n-----END PGP SIGNATURE-----\n","payload":"tree c1acbfcd32fd98468d64e86551bc951405b7420b\nparent 27243a5faf6311ae6b53cc661c811afeec4c7b2a\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1666354662 +0200\ncommitter GitHub <noreply@github.com> 1666354662 +0200\n\n[SYNCOPE-1700] Introducing ojson (#382)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b92248f160798e3f99c22ce80a5d54de32867d17","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b92248f160798e3f99c22ce80a5d54de32867d17","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b92248f160798e3f99c22ce80a5d54de32867d17/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"27243a5faf6311ae6b53cc661c811afeec4c7b2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/27243a5faf6311ae6b53cc661c811afeec4c7b2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/27243a5faf6311ae6b53cc661c811afeec4c7b2a"}],"stats":{"total":1663,"additions":1568,"deletions":95},"files":[{"sha":"e1c0bd4107bfeccb2cf9c1b68a8b451fdf67afd2","filename":".github/workflows/oracle.yml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/.github%2Fworkflows%2Foracle.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/.github%2Fworkflows%2Foracle.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Foracle.yml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -44,5 +44,9 @@ jobs:\n         restore-keys: ${{ runner.os }}-m2\n     - name: Build\n       run: mvn -U -T 1C -P 'skipTests,all'\n+    - name: 'Unit Tests: Oracle JPA JSON'\n+      run: mvn -f core/persistence-jpa-json/pom.xml -P ojson -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.phase=none -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n     - name: 'Integration Tests: Oracle'\n       run: mvn -f fit/core-reference/pom.xml -P oracle-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n+    - name: 'Integration Tests: Oracle JPA JSON'\n+      run: mvn -f fit/core-reference/pom.xml -P ojson-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true"},{"sha":"71350950c11475d16c4e784708eed402edaa9eb8","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":119,"deletions":3,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -34,6 +34,7 @@ under the License.\n   <packaging>jar</packaging>\n   \n   <properties>\n+    <orm>pgjsonb</orm>\n     <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n   </properties>\n \n@@ -101,7 +102,7 @@ under the License.\n           </dependency>\n         </dependencies>\n         <configuration>\n-          <persistenceXmlFile>${project.basedir}/src/main/resources/persistence-enhance.xml</persistenceXmlFile> \n+          <persistenceXmlFile>${project.build.directory}/classes/persistence-enhance.xml</persistenceXmlFile> \n           <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>\n           <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n           <connectionProperties>\n@@ -187,9 +188,15 @@ under the License.\n     </profile>\n     \n     <profile>\n-      <id>schemagen</id>\n+      <id>openjpa</id>\n       \n       <properties>\n+        <!-- possible values: sql | schema -->\n+        <action>sql</action>\n+\n+        <!-- possible values: pgjsonb | myjson | ojson -->\n+        <orm>ojson</orm>\n+\n         <skipTests>true</skipTests>\n       </properties>\n       \n@@ -206,7 +213,7 @@ under the License.\n                 <id>schemagen</id>\n                 <phase>process-classes</phase>\n                 <goals>\n-                  <goal>schema</goal>\n+                  <goal>${action}</goal>\n                 </goals>\n               </execution>\n             </executions>\n@@ -441,5 +448,114 @@ under the License.\n         </testResources>\n       </build>\n     </profile>\n+\n+    <profile>\n+      <id>ojson</id>\n+\n+      <dependencies>\n+        <dependency>\n+          <groupId>com.oracle.database.jdbc</groupId>\n+          <artifactId>ojdbc11</artifactId>\n+          <version>${jdbc.oracle.version}</version>\n+          <scope>test</scope>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>build-helper-maven-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <id>add-test-source</id>\n+                <phase>generate-test-sources</phase>\n+                <goals>\n+                  <goal>add-test-source</goal>\n+                </goals>\n+                <configuration>\n+                  <sources>\n+                    <source>${basedir}/../persistence-jpa/src/test/java</source>\n+                  </sources>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+      \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <skip>true</skip>\n+            </configuration>\n+          </plugin>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <configuration>\n+              <includes>\n+                <include>**/*Test.java</include>\n+              </includes>\n+              <excludedGroups>multitenancy,plainAttrTable</excludedGroups>\n+              <systemProperties>\n+                <profileId>${project.activeProfiles[0].id}</profileId>\n+                <CORE_PROPERTIES>classpath:core-ojson.properties,classpath:core-ojson-test.properties</CORE_PROPERTIES>\n+                <DB_CONTAINER_IP>${docker.container.oracle.ip}</DB_CONTAINER_IP>\n+              </systemProperties>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <alias>oracle</alias>\n+                  <name>gvenzl/oracle-xe:21-slim</name>\n+                  <run>\n+                    <env>\n+                      <ORACLE_PASSWORD>password</ORACLE_PASSWORD>\n+                      <APP_USER>syncope</APP_USER>\n+                      <APP_USER_PASSWORD>syncope</APP_USER_PASSWORD>\n+                    </env>\n+                    <wait>\n+                      <log>DATABASE IS READY TO USE</log>\n+                      <time>120000</time>\n+                    </wait>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-oracle</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-oracle</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+        \n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n   </profiles>\n </project>"},{"sha":"71805a969aab76c9039553e63e045757a157c83e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/MyJPAJSONPersistenceContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -42,7 +42,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Lazy;\n \n-@ConditionalOnExpression(\"#{!('${provisioning.quartz.delegate}' matches '.*PostgreSQLDelegate.*')}\")\n+@ConditionalOnExpression(\"#{'${provisioning.quartz.sql}' matches '.*mysql.*'}\")\n public class MyJPAJSONPersistenceContext extends JPAJSONPersistenceContext {\n \n     @ConditionalOnMissingBean(name = \"myJPAJSONEntityFactory\")"},{"sha":"4b945e9c726160eb12a1b0213dc3c2490afe781a","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/OJPAJSONPersistenceContext.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FOJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FOJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FOJPAJSONPersistenceContext.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.jpa.dao.OJPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.OJPAJSONAnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.OJPAJSONAuditConfDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.OJPAJSONPlainSchemaDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.OJPAJSONEntityFactory;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Lazy;\n+\n+@ConditionalOnExpression(\"#{'${provisioning.quartz.sql}' matches '.*oracle.*'}\")\n+public class OJPAJSONPersistenceContext extends JPAJSONPersistenceContext {\n+\n+    @ConditionalOnMissingBean(name = \"oJPAJSONEntityFactory\")\n+    @Bean\n+    public EntityFactory entityFactory() {\n+        return new OJPAJSONEntityFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oJPAJSONAnyDAO\")\n+    @Bean\n+    public JPAJSONAnyDAO anyDAO(final @Lazy PlainSchemaDAO plainSchemaDAO) {\n+        return new OJPAJSONAnyDAO(plainSchemaDAO);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oJPAJSONAnySearchDAO\")\n+    @Bean\n+    public AnySearchDAO anySearchDAO(\n+            final @Lazy RealmDAO realmDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final @Lazy PlainSchemaDAO schemaDAO,\n+            final @Lazy EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n+\n+        return new OJPAJSONAnySearchDAO(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                validator);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oJPAJSONAuditConfDAO\")\n+    @Bean\n+    public AuditConfDAO auditConfDAO() {\n+        return new OJPAJSONAuditConfDAO();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"oJPAJSONPlainSchemaDAO\")\n+    @Bean\n+    public PlainSchemaDAO plainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainAttrDAO plainAttrDAO,\n+            final @Lazy ExternalResourceDAO resourceDAO) {\n+\n+        return new OJPAJSONPlainSchemaDAO(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+}"},{"sha":"1de2c8d9e806544053afaaafb2a2044a2278e54f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/PGJPAJSONPersistenceContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -42,7 +42,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Lazy;\n \n-@ConditionalOnExpression(\"#{'${provisioning.quartz.delegate}' matches '.*PostgreSQLDelegate.*'}\")\n+@ConditionalOnExpression(\"#{'${provisioning.quartz.sql}' matches '.*postgres.*'}\")\n public class PGJPAJSONPersistenceContext extends JPAJSONPersistenceContext {\n \n     @ConditionalOnMissingBean(name = \"pgJPAJSONEntityFactory\")"},{"sha":"1101148d7ca99db42cbfa59e96b5116b88e4f6c6","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"modified","additions":27,"deletions":10,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -34,6 +34,7 @@\n import org.apache.commons.jexl3.parser.Token;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n@@ -58,13 +59,15 @@ protected AbstractJPAJSONAnyDAO(final PlainSchemaDAO plainSchemaDAO) {\n         this.plainSchemaDAO = plainSchemaDAO;\n     }\n \n-    protected abstract String queryBegin(String table);\n+    protected String view(final String table) {\n+        return StringUtils.containsIgnoreCase(table, AnyTypeKind.USER.name())\n+                ? \"user_search\"\n+                : StringUtils.containsIgnoreCase(table, AnyTypeKind.GROUP.name())\n+                ? \"group_search\"\n+                : \"anyObject_search\";\n+    }\n \n-    protected abstract String attrValueMatch(\n-            AnyUtils anyUtils,\n-            PlainSchema schema,\n-            PlainAttrValue attrValue,\n-            boolean ignoreCaseMatch);\n+    protected abstract String queryBegin(String table);\n \n     protected Pair<String, Boolean> schemaInfo(final AttrSchemaType schemaType, final boolean ignoreCaseMatch) {\n         String key;\n@@ -99,6 +102,20 @@ protected Pair<String, Boolean> schemaInfo(final AttrSchemaType schemaType, fina\n         return Pair.of(key, lower);\n     }\n \n+    protected abstract String attrValueMatch(\n+            AnyUtils anyUtils,\n+            PlainSchema schema,\n+            PlainAttrValue attrValue,\n+            boolean ignoreCaseMatch);\n+\n+    protected Object getAttrValue(\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return attrValue.getValue();\n+    }\n+\n     protected <A extends Any<?>> List<A> buildResult(final AnyUtils anyUtils, final List<Object> queryResult) {\n         List<A> result = new ArrayList<>();\n         queryResult.forEach(anyKey -> {\n@@ -131,7 +148,7 @@ public <A extends Any<?>> List<A> findByPlainAttrValue(\n                 queryBegin(table)\n                 + \"WHERE \" + attrValueMatch(anyUtils, schema, attrValue, ignoreCaseMatch));\n         query.setParameter(1, schema.getKey());\n-        query.setParameter(2, attrValue.getValue());\n+        query.setParameter(2, getAttrValue(schema, attrValue, ignoreCaseMatch));\n \n         return buildResult(anyUtils, query.getResultList());\n     }\n@@ -167,8 +184,8 @@ public <A extends Any<?>> Optional<A> findByPlainAttrUniqueValue(\n      * @param literals literals/tokens\n      * @return split value\n      */\n-    private static List<String> split(final String attrValue, final List<String> literals) {\n-        final List<String> attrValues = new ArrayList<>();\n+    protected List<String> split(final String attrValue, final List<String> literals) {\n+        List<String> attrValues = new ArrayList<>();\n \n         if (literals.isEmpty()) {\n             attrValues.add(attrValue);\n@@ -303,7 +320,7 @@ public <A extends Any<?>> List<A> findByDerAttrValue(\n \n                     List<Object> queryParams = new ArrayList<>();\n                     queryParams.add(schema.getKey());\n-                    queryParams.add(attrValues.get(i));\n+                    queryParams.add(getAttrValue(schema, attrValue, ignoreCaseMatch));\n \n                     clauses.put(bld.toString(), queryParams);\n                 }"},{"sha":"06ad3692c16942fe3b3c114e165c3136306b6581","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnyDAO.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n@@ -39,12 +37,7 @@ public MyJPAJSONAnyDAO(final PlainSchemaDAO plainSchemaDAO) {\n \n     @Override\n     protected String queryBegin(final String table) {\n-        String view = StringUtils.containsIgnoreCase(table, AnyTypeKind.USER.name())\n-                ? \"user_search\"\n-                : StringUtils.containsIgnoreCase(table, AnyTypeKind.GROUP.name())\n-                ? \"group_search\"\n-                : \"anyObject_search\";\n-        return \"SELECT DISTINCT id FROM \" + view + ' ';\n+        return \"SELECT DISTINCT id FROM \" + view(table) + ' ';\n     }\n \n     @Override"},{"sha":"40f4c1cf91c8701129df42f8981c26dc1c171b5b","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -86,7 +86,9 @@ protected void processOBS(\n                 StringBuilder nullAttrWhere = new StringBuilder();\n \n                 if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n-                    where.append(\", (SELECT * FROM \").append(searchView.name);\n+                    where.append(\", (SELECT \").append(SELECT_COLS_FROM_VIEW).append(\",plainSchema,\"\n+                            + \"binaryValue,booleanValue,dateValue,doubleValue,longValue,stringValue,attrUniqueValue \"\n+                            + \"FROM \").append(searchView.name);\n                     searchViewAddedToWhere = true;\n \n                     attrs.forEach(field -> {\n@@ -97,22 +99,20 @@ protected void processOBS(\n                         }\n                         attrWhere.append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]')\");\n \n-                        nullAttrWhere.append(\" UNION SELECT DISTINCT any_id,\").append(svs.table().alias).append(\".*, \").\n-                                append('\"').append(field).append('\"').append(\" AS plainSchema, \").\n+                        nullAttrWhere.append(\" UNION SELECT DISTINCT \").append(SELECT_COLS_FROM_VIEW).append(\", \").\n+                                append(\"'\").append(field).append(\"'\").append(\" AS plainSchema, \").\n                                 append(\"null AS binaryValue, \").\n                                 append(\"null AS booleanValue, \").\n                                 append(\"null AS dateValue, \").\n                                 append(\"null AS doubleValue, \").\n                                 append(\"null AS longValue, \").\n                                 append(\"null AS stringValue, \").\n-                                append(\"null AS attrUniqueValue\").\n-                                append(\" FROM \").append(svs.table().name).append(' ').append(svs.table().alias).\n-                                append(\", \").append(svs.field().name).\n-                                append(\" WHERE any_id=\").append(svs.table().alias).append(\".id\").\n-                                append(\" AND any_id NOT IN \").\n-                                append(\"(SELECT distinct any_id FROM \").\n+                                append(\"null AS attrUniqueValue \").\n+                                append(\"FROM \").append(svs.field().name).\n+                                append(\" WHERE any_id NOT IN \").\n+                                append(\"(SELECT DISTINCT any_id FROM \").\n                                 append(svs.field().name).\n-                                append(\" WHERE \").append(svs.table().alias).append(\".id=any_id AND \").\n+                                append(\" WHERE \").\n                                 append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]'))\");\n                     });\n                     where.append(attrWhere).append(nullAttrWhere).append(')');"},{"sha":"453fc152e1bda37ee4798fc3c9af1977b17e1483","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAuditConfDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -25,7 +25,7 @@\n \n public class MyJPAJSONAuditConfDAO extends AbstractJPAJSONLoggerDAO {\n \n-    private static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n+    protected static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {"},{"sha":"184860caa5b8790226b298e630adbfd3d40b3baa","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OJPAJSONAnyDAO.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAnyDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+\n+public class OJPAJSONAnyDAO extends AbstractJPAJSONAnyDAO {\n+\n+    public OJPAJSONAnyDAO(final PlainSchemaDAO plainSchemaDAO) {\n+        super(plainSchemaDAO);\n+    }\n+\n+    @Override\n+    protected String queryBegin(final String table) {\n+        return \"SELECT DISTINCT id FROM \" + view(table) + ' ';\n+    }\n+\n+    @Override\n+    protected Object getAttrValue(\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        return schema.getType() == AttrSchemaType.Boolean\n+                ? BooleanUtils.toStringTrueFalse(attrValue.getBooleanValue())\n+                : schema.getType() == AttrSchemaType.String && ignoreCaseMatch\n+                ? StringUtils.lowerCase(attrValue.getStringValue())\n+                : attrValue.getValue();\n+    }\n+\n+    @Override\n+    protected String attrValueMatch(\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttrValue attrValue,\n+            final boolean ignoreCaseMatch) {\n+\n+        StringBuilder query = new StringBuilder(\"plainSchema = ? AND \");\n+\n+        Pair<String, Boolean> schemaInfo = schemaInfo(schema.getType(), ignoreCaseMatch);\n+        query.append(schemaInfo.getRight() ? \"LOWER(\" : \"\");\n+\n+        if (schema.isUniqueConstraint()) {\n+            query.append(\"u\").append(schemaInfo.getLeft());\n+        } else {\n+            query.append(\"JSON_VALUE(\").append(schemaInfo.getLeft()).append(\", '$[*]')\");\n+        }\n+\n+        query.append(schemaInfo.getRight() ? \")\" : \"\").\n+                append(\" = \").\n+                append(schemaInfo.getRight() ? \"LOWER(\" : \"\").\n+                append('?').append(schemaInfo.getRight() ? \")\" : \"\");\n+\n+        return query.toString();\n+    }\n+}"},{"sha":"ad4aaa9434341a2044c4b14f4b767c2b48e51614","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OJPAJSONAnySearchDAO.java","status":"added","additions":292,"deletions":0,"changes":292,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAnySearchDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,292 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+\n+public class OJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n+\n+    public OJPAJSONAnySearchDAO(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final PlainSchemaDAO schemaDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrValidationManager validator) {\n+\n+        super(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                validator);\n+    }\n+\n+    @Override\n+    protected void processOBS(\n+            final SearchSupport svs,\n+            final OrderBySupport obs,\n+            final StringBuilder where) {\n+\n+        Set<String> attrs = obs.items.stream().\n+                map(item -> item.orderBy.substring(0, item.orderBy.indexOf(\" \"))).collect(Collectors.toSet());\n+\n+        obs.views.forEach(searchView -> {\n+            boolean searchViewAddedToWhere = false;\n+            if (searchView.name.equals(svs.field().name)) {\n+                StringBuilder attrWhere = new StringBuilder();\n+                StringBuilder nullAttrWhere = new StringBuilder();\n+\n+                if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n+                    where.append(\", (SELECT \").append(SELECT_COLS_FROM_VIEW).append(\",plainSchema,\"\n+                            + \"ubinaryValue,ubooleanValue,udateValue,udoubleValue,ulongValue,ustringValue,\"\n+                            + \"binaryValue,booleanValue,dateValue,doubleValue,longValue,stringValue FROM \").\n+                            append(searchView.name);\n+                    searchViewAddedToWhere = true;\n+\n+                    attrs.forEach(field -> {\n+                        if (attrWhere.length() == 0) {\n+                            attrWhere.append(\" WHERE \");\n+                        } else {\n+                            attrWhere.append(\" OR \");\n+                        }\n+                        attrWhere.append(\"JSON_EXISTS(plainAttrs, '$[*]?(@.schema == \\\"\").append(field).append(\"\\\")')\");\n+\n+                        nullAttrWhere.append(\" UNION SELECT DISTINCT \").append(SELECT_COLS_FROM_VIEW).append(\",\").\n+                                append(\"'\").append(field).append(\"'\").append(\" AS plainSchema, \").\n+                                append(\"null AS ubinaryValue, \").\n+                                append(\"null AS ubooleanValue, \").\n+                                append(\"null AS udateValue, \").\n+                                append(\"null AS udoubleValue, \").\n+                                append(\"null AS ulongValue, \").\n+                                append(\"null AS ustringValue, \").\n+                                append(\"null AS binaryValue, \").\n+                                append(\"null AS booleanValue, \").\n+                                append(\"null AS dateValue, \").\n+                                append(\"null AS doubleValue, \").\n+                                append(\"null AS longValue, \").\n+                                append(\"null AS stringValue \").\n+                                append(\"FROM \").append(svs.field().name).\n+                                append(\" WHERE any_id NOT IN \").\n+                                append(\"(SELECT DISTINCT any_id FROM \").\n+                                append(svs.field().name).\n+                                append(\" WHERE \").\n+                                append(\"JSON_EXISTS(plainAttrs, '$[*]?(@.schema == \\\"\").append(field).append(\"\\\")'))\");\n+                    });\n+                    where.append(attrWhere).append(nullAttrWhere).append(')');\n+                }\n+            }\n+            if (!searchViewAddedToWhere) {\n+                where.append(',').append(searchView.name);\n+            }\n+\n+            where.append(' ').append(searchView.alias);\n+        });\n+    }\n+\n+    @Override\n+    protected void parseOrderByForPlainSchema(\n+            final SearchSupport svs,\n+            final OrderBySupport obs,\n+            final OrderBySupport.Item item,\n+            final OrderByClause clause,\n+            final PlainSchema schema,\n+            final String fieldName) {\n+\n+        // keep track of involvement of non-mandatory schemas in the order by clauses\n+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n+        obs.views.add(svs.field());\n+\n+        item.select = svs.field().alias + '.'\n+                + (schema.isUniqueConstraint() ? \"u\" : \"\") + key(schema.getType())\n+                + \" AS \" + fieldName;\n+        item.where = \"plainSchema = '\" + fieldName + '\\'';\n+        item.orderBy = fieldName + ' ' + clause.getDirection().name();\n+    }\n+\n+    protected void fillAttrQuery(\n+            final AnyUtils anyUtils,\n+            final StringBuilder query,\n+            final PlainAttrValue attrValue,\n+            final PlainSchema schema,\n+            final AttrCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n+        if (not && schema.isMultivalue()\n+                && !(cond instanceof AnyCond)\n+                && cond.getType() != AttrCond.Type.ISNULL && cond.getType() != AttrCond.Type.ISNOTNULL) {\n+\n+            query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n+            query.append(svs.field().name).append(\" WHERE \");\n+            fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n+            query.append(')');\n+        } else {\n+            String key = key(schema.getType());\n+\n+            String value = Optional.ofNullable(attrValue.getDateValue()).\n+                    map(DateTimeFormatter.ISO_OFFSET_DATE_TIME::format).\n+                    orElseGet(() -> schema.getType() == AttrSchemaType.Boolean\n+                    ? BooleanUtils.toStringTrueFalse(attrValue.getBooleanValue())\n+                    : cond.getExpression());\n+\n+            boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n+                    && (cond.getType() == AttrCond.Type.IEQ || cond.getType() == AttrCond.Type.ILIKE);\n+\n+            query.append(\"plainSchema=?\").append(setParameter(parameters, cond.getSchema())).\n+                    append(\" AND \").\n+                    append(lower ? \"LOWER(\" : \"\");\n+            if (schema.isUniqueConstraint()) {\n+                query.append(\"u\").append(key);\n+            } else {\n+                query.append(\"JSON_VALUE(\").append(key).append(\", '$[*]')\");\n+            }\n+            query.append(lower ? ')' : \"\");\n+\n+            switch (cond.getType()) {\n+                case LIKE:\n+                case ILIKE:\n+                    if (not) {\n+                        query.append(\"NOT \");\n+                    }\n+                    query.append(\" LIKE \");\n+                    break;\n+\n+                case GE:\n+                    if (not) {\n+                        query.append('<');\n+                    } else {\n+                        query.append(\">=\");\n+                    }\n+                    break;\n+\n+                case GT:\n+                    if (not) {\n+                        query.append(\"<=\");\n+                    } else {\n+                        query.append('>');\n+                    }\n+                    break;\n+\n+                case LE:\n+                    if (not) {\n+                        query.append('>');\n+                    } else {\n+                        query.append(\"<=\");\n+                    }\n+                    break;\n+\n+                case LT:\n+                    if (not) {\n+                        query.append(\">=\");\n+                    } else {\n+                        query.append('<');\n+                    }\n+                    break;\n+\n+                case EQ:\n+                case IEQ:\n+                default:\n+                    if (not) {\n+                        query.append('!');\n+                    }\n+                    query.append('=');\n+            }\n+\n+            query.append(lower ? \"LOWER(\" : \"\").\n+                    append('?').append(setParameter(parameters, value)).\n+                    append(lower ? \")\" : \"\");\n+        }\n+    }\n+\n+    @Override\n+    protected String getQuery(\n+            final AttrCond cond,\n+            final boolean not,\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        Pair<PlainSchema, PlainAttrValue> checked = check(cond, svs.anyTypeKind);\n+\n+        // normalize NULL / NOT NULL checks\n+        if (not) {\n+            if (cond.getType() == AttrCond.Type.ISNULL) {\n+                cond.setType(AttrCond.Type.ISNOTNULL);\n+            } else if (cond.getType() == AttrCond.Type.ISNOTNULL) {\n+                cond.setType(AttrCond.Type.ISNULL);\n+            }\n+        }\n+\n+        StringBuilder query =\n+                new StringBuilder(\"SELECT DISTINCT any_id FROM \").append(svs.field().name).append(\" WHERE \");\n+        switch (cond.getType()) {\n+            case ISNOTNULL:\n+                query.append(\"JSON_EXISTS(plainAttrs, '$[*]?(@.schema == \\\"\").\n+                        append(checked.getLeft().getKey()).append(\"\\\")')\");\n+                break;\n+\n+            case ISNULL:\n+                query.append(\"NOT JSON_EXISTS(plainAttrs, '$[*]?(@.schema == \\\"\").\n+                        append(checked.getLeft().getKey()).append(\"\\\")')\");\n+                break;\n+\n+            default:\n+                if (not && !(cond instanceof AnyCond) && checked.getLeft().isMultivalue()) {\n+                    query = new StringBuilder(\"SELECT DISTINCT id AS any_id FROM \").append(svs.table().name).\n+                            append(\" WHERE \");\n+                }\n+                fillAttrQuery(anyUtilsFactory.getInstance(svs.anyTypeKind),\n+                        query, checked.getRight(), checked.getLeft(), cond, not, parameters, svs);\n+        }\n+\n+        return query.toString();\n+    }\n+}"},{"sha":"6afc9a9ed8f7109bacfc3209ede9f0305dbee2cc","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OJPAJSONAuditConfDAO.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONAuditConfDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public class OJPAJSONAuditConfDAO extends AbstractJPAJSONLoggerDAO {\n+\n+    protected static class OMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n+\n+        protected Optional<String> jsonExprItem(final JsonNode logger, final String field) {\n+            return logger.has(field)\n+                    ? Optional.of(\"@.logger.\" + field + \" == \\\"\" + logger.get(field).asText() + \"\\\"\")\n+                    : Optional.empty();\n+        }\n+\n+        @Override\n+        protected String doBuild(final List<ObjectNode> containers) {\n+            if (entityKey != null) {\n+                query.append('(').\n+                        append(\"JSON_VALUE(\").append(AUDIT_ENTRY_MESSAGE_COLUMN).\n+                        append(\", '$.before' RETURNING VARCHAR2(32767)) LIKE '%\").\n+                        append(entityKey).append(\"%' OR \").\n+                        append(\"JSON_VALUE(\").append(AUDIT_ENTRY_MESSAGE_COLUMN).\n+                        append(\", '$.input' RETURNING VARCHAR2(32767)) LIKE '%\").\n+                        append(entityKey).append(\"%' OR \").\n+                        append(\"JSON_VALUE(\").append(AUDIT_ENTRY_MESSAGE_COLUMN).\n+                        append(\", '$.output' RETURNING VARCHAR2(32767)) LIKE '%\").\n+                        append(entityKey).append(\"%')\");\n+            }\n+\n+            if (!containers.isEmpty()) {\n+                if (entityKey != null) {\n+                    query.append(\" AND (\");\n+                }\n+                query.append(containers.stream().filter(container -> container.has(\"logger\")).map(container -> {\n+                    JsonNode logger = container.get(\"logger\");\n+\n+                    List<String> clauses = new ArrayList<>();\n+                    jsonExprItem(logger, \"type\").ifPresent(clauses::add);\n+                    jsonExprItem(logger, \"category\").ifPresent(clauses::add);\n+                    jsonExprItem(logger, \"subcategory\").ifPresent(clauses::add);\n+                    jsonExprItem(logger, \"result\").ifPresent(clauses::add);\n+                    jsonExprItem(logger, \"event\").ifPresent(clauses::add);\n+\n+                    return \"JSON_EXISTS(MESSAGE, '$[*]?(\" + String.join(\" && \", clauses) + \")')\";\n+                }).filter(Objects::nonNull).collect(Collectors.joining(\" OR \")));\n+                if (entityKey != null) {\n+                    query.append(')');\n+                }\n+            }\n+\n+            return query.toString();\n+        }\n+    }\n+\n+    @Override\n+    protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n+        return new OMessageCriteriaBuilder().entityKey(entityKey);\n+    }\n+}"},{"sha":"b317243fd4bb591820473f4cfe1cbaab76ef3467","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/OJPAJSONPlainSchemaDAO.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FOJPAJSONPlainSchemaDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import javax.persistence.Query;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+\n+public class OJPAJSONPlainSchemaDAO extends AbstractJPAJSONPlainSchemaDAO {\n+\n+    public OJPAJSONPlainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrDAO plainAttrDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        super(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final Class<T> reference) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT COUNT(id) FROM \"\n+                + new SearchSupport(getAnyTypeKind(reference)).field().name\n+                + \" WHERE plainSchema = ?\");\n+        query.setParameter(1, schema.getKey());\n+\n+        return ((Number) query.getSingleResult()).intValue() > 0;\n+    }\n+}"},{"sha":"2bc9ad4e2a713c8c756267b1ce51640e72b35436","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnyDAO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -61,15 +61,15 @@ protected String attrValueMatch(\n                     + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n                     + '?'\n                     + (schemaInfo.getRight() ? \")\" : \"\");\n+        }\n+\n+        PlainAttr<?> container = anyUtils.newPlainAttr();\n+        container.setSchema(schema);\n+        if (attrValue instanceof PlainAttrUniqueValue) {\n+            container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n         } else {\n-            PlainAttr<?> container = anyUtils.newPlainAttr();\n-            container.setSchema(schema);\n-            if (attrValue instanceof PlainAttrUniqueValue) {\n-                container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n-            } else {\n-                ((JSONPlainAttr) container).add(attrValue);\n-            }\n-            return \"plainAttrs::jsonb @> '\" + POJOHelper.serialize(List.of(container)).replace(\"'\", \"''\") + \"'::jsonb\";\n+            ((JSONPlainAttr) container).add(attrValue);\n         }\n+        return \"plainAttrs::jsonb @> '\" + POJOHelper.serialize(List.of(container)).replace(\"'\", \"''\") + \"'::jsonb\";\n     }\n }"},{"sha":"e2c4c71f0f78653409cde761186bc70c00c5f270","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -170,11 +170,11 @@ protected void fillAttrQuery(\n                 try {\n                     switch (schema.getType()) {\n                         case Long:\n-                            Long.parseLong(value);\n+                            Long.valueOf(value);\n                             break;\n \n                         case Double:\n-                            Double.parseDouble(value);\n+                            Double.valueOf(value);\n                             break;\n \n                         case Boolean:\n@@ -193,7 +193,6 @@ protected void fillAttrQuery(\n             }\n \n             switch (cond.getType()) {\n-\n                 case ISNULL:\n                     // shouldn't occour: processed before\n                     break;"},{"sha":"c797b7d052344c587c7e9ae2d4e67084b29d4c8c","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAuditConfDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -26,7 +26,7 @@\n \n public class PGJPAJSONAuditConfDAO extends AbstractJPAJSONLoggerDAO {\n \n-    private static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n+    protected static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {"},{"sha":"0b35c11932053e4444e37f08857399d561832be3","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/OJPAJSONEntityFactory.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FOJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FOJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FOJPAJSONEntityFactory.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.OJPAJSONAnySearchDAO;\n+\n+public class OJPAJSONEntityFactory extends JPAJSONEntityFactory {\n+\n+    @Override\n+    public Class<? extends AnySearchDAO> anySearchDAOClass() {\n+        return OJPAJSONAnySearchDAO.class;\n+    }\n+}"},{"sha":"3415c44414c543d157d8484bf538d3321420120e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAJSONAnyObject.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -25,7 +25,6 @@\n import java.util.stream.Collectors;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n-import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n@@ -44,7 +43,6 @@ public class JPAJSONAnyObject extends JPAAnyObject implements JSONAttributable<A\n \n     private static final long serialVersionUID = -8543654943709531885L;\n \n-    @Lob\n     private String plainAttrs;\n \n     @Transient"},{"sha":"0ba77ff612dfeb1368054c979c3812ea2b786054","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAJSONGroup.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n-import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n@@ -39,7 +38,6 @@ public class JPAJSONGroup extends JPAGroup implements JSONAttributable<Group>, G\n \n     private static final long serialVersionUID = -8543654943709531885L;\n \n-    @Lob\n     private String plainAttrs;\n \n     @Transient"},{"sha":"ef5c3617ce714f18ac2e5761f5585fa2e5d1b056","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLinkedAccount.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccount.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -24,7 +24,6 @@\n import java.util.stream.Collectors;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n-import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n@@ -42,7 +41,6 @@ public class JPAJSONLinkedAccount extends JPALinkedAccount implements JSONAttrib\n \n     private static final long serialVersionUID = 7495284980208765032L;\n \n-    @Lob\n     private String plainAttrs;\n \n     @Transient"},{"sha":"a145bab4d3981aa2396a8a126da91afa688f3555","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONUser.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n-import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n@@ -48,7 +47,6 @@ public class JPAJSONUser extends JPAUser implements JSONAttributable<User>, User\n \n     private static final long serialVersionUID = -8543654943709531885L;\n \n-    @Lob\n     private String plainAttrs;\n \n     @Transient"},{"sha":"427948f540f897152ff4cf6b9f69362cb7b9c829","filename":"core/persistence-jpa-json/src/main/resources/META-INF/spring-orm-ojson.xml","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-ojson.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-ojson.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-ojson.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+                 xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm \n+                                     http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n+                 version=\"2.0\">\n+  \n+  <persistence-unit-metadata>\n+    <persistence-unit-defaults>\n+      <entity-listeners>\n+        <entity-listener class=\"org.apache.syncope.core.persistence.jpa.validation.entity.EntityValidationListener\">\n+          <pre-persist method-name=\"validate\"/>\n+          <pre-update method-name=\"validate\"/>\n+        </entity-listener>\n+      </entity-listeners>\n+    </persistence-unit-defaults>\n+  </persistence-unit-metadata>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"CLOB CHECK (plainAttrs IS JSON)\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+    \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"CLOB CHECK (plainAttrs IS JSON)\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"CLOB CHECK (plainAttrs IS JSON)\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLinkedAccount\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"CLOB CHECK (plainAttrs IS JSON)\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n+    <attributes>\n+      <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\"/>\n+      <many-to-one name=\"groupOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <many-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>        \n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\">\n+        <join-column name=\"user_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\">\n+        <join-column name=\"group_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n+    <attributes>\n+      <one-to-one name=\"group\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup\"/>\n+    </attributes>\n+  </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship\">\n+    <attributes>\n+      <many-to-one name=\"leftEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"left_anyObject_id\"/>\n+      </many-to-one>\n+      <many-to-one name=\"rightEnd\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject\">\n+        <join-column name=\"right_anyObject_id\"/>\n+      </many-to-one>\n+    </attributes>\n+  </entity>\n+</entity-mappings>"},{"sha":"3eea832444613b846842562d361dd0dee1eee2b2","filename":"core/persistence-jpa-json/src/main/resources/META-INF/spring.factories","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -17,4 +17,5 @@\n \n org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n   org.apache.syncope.core.persistence.jpa.PGJPAJSONPersistenceContext,\\\n-  org.apache.syncope.core.persistence.jpa.MyJPAJSONPersistenceContext\n+  org.apache.syncope.core.persistence.jpa.MyJPAJSONPersistenceContext,\\\n+  org.apache.syncope.core.persistence.jpa.OJPAJSONPersistenceContext"},{"sha":"d4e39395f5754c8f869932889c815922989a5151","filename":"core/persistence-jpa-json/src/main/resources/audit/audit_ojson.sql","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_ojson.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_ojson.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_ojson.sql?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,24 @@\n+-- Licensed to the Apache Software Foundation (ASF) under one\n+-- or more contributor license agreements.  See the NOTICE file\n+-- distributed with this work for additional information\n+-- regarding copyright ownership.  The ASF licenses this file\n+-- to you under the Apache License, Version 2.0 (the\n+-- \"License\"); you may not use this file except in compliance\n+-- with the License.  You may obtain a copy of the License at\n+--\n+--   http://www.apache.org/licenses/LICENSE-2.0\n+--\n+-- Unless required by applicable law or agreed to in writing,\n+-- software distributed under the License is distributed on an\n+-- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+-- KIND, either express or implied.  See the License for the\n+-- specific language governing permissions and limitations\n+-- under the License.\n+\n+CREATE TABLE AuditEntry (\n+  EVENT_DATE TIMESTAMP,\n+  LOGGER_LEVEL VARCHAR(255) NOT NULL,\n+  LOGGER VARCHAR(255) NOT NULL,\n+  MESSAGE CLOB CHECK (MESSAGE IS JSON) NOT NULL,\n+  THROWABLE CLOB\n+);"},{"sha":"aecedde8e59cc2cdc54e88ef73bd7effcc1036aa","filename":"core/persistence-jpa-json/src/main/resources/core-ojson.properties","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-ojson.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-ojson.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-ojson.properties?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+persistence.indexesXML=classpath:ojson/indexes.xml\n+persistence.viewsXML=classpath:ojson/views.xml\n+\n+persistence.domain[0].key=Master\n+persistence.domain[0].jdbcDriver=oracle.jdbc.OracleDriver\n+persistence.domain[0].jdbcURL=jdbc:oracle:thin:@localhost:1521/XEPDB1\n+persistence.domain[0].schema=SYNCOPE\n+persistence.domain[0].dbUsername=syncope\n+persistence.domain[0].dbPassword=syncope\n+persistence.domain[0].databasePlatform=org.apache.openjpa.jdbc.sql.OracleDictionary\n+persistence.domain[0].orm=META-INF/spring-orm-ojson.xml\n+persistence.domain[0].auditSql=audit_ojson.sql\n+persistence.domain[0].poolMaxActive=10\n+persistence.domain[0].poolMinIdle=2\n+\n+provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n+provisioning.quartz.sql=tables_oracle.sql"},{"sha":"7c351412a76a9559683c29a20c0ff389ccd16849","filename":"core/persistence-jpa-json/src/main/resources/myjson/views.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fviews.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -51,7 +51,7 @@ under the License.\n     CREATE VIEW user_search AS\n \n     SELECT u.id as any_id, u.*, attrs.*\n-    FROM SyncopeUser u, JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n+    FROM SyncopeUser u LEFT OUTER JOIN JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n     plainSchema VARCHAR(255) PATH '$.schema',\n     NESTED PATH '$.values[*]' COLUMNS (\n     binaryValue LONGBLOB PATH '$.binaryValue',\n@@ -61,7 +61,7 @@ under the License.\n     longValue BIGINT(20) PATH '$.longValue',\n     stringValue VARCHAR(255) PATH '$.stringValue'),\n     attrUniqueValue JSON PATH '$.uniqueValue')\n-    ) AS attrs\n+    ) AS attrs ON 1=1\n   </entry>\n   <entry key=\"user_search_urelationship\">\n     CREATE VIEW user_search_urelationship AS\n@@ -121,7 +121,7 @@ under the License.\n     CREATE VIEW anyObject_search AS\n  \n     SELECT a.id as any_id, a.*, attrs.*\n-    FROM AnyObject a, JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n+    FROM AnyObject a LEFT OUTER JOIN JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n     plainSchema VARCHAR(255) PATH '$.schema',\n     NESTED PATH '$.values[*]' COLUMNS (\n     binaryValue LONGBLOB PATH '$.binaryValue',\n@@ -131,7 +131,7 @@ under the License.\n     longValue BIGINT(20) PATH '$.longValue',\n     stringValue VARCHAR(255) PATH '$.stringValue'),\n     attrUniqueValue JSON PATH '$.uniqueValue')\n-    ) AS attrs\n+    ) AS attrs ON 1=1\n   </entry>\n   <entry key=\"anyObject_search_arelationship\">\n     CREATE VIEW anyObject_search_arelationship AS\n@@ -171,7 +171,7 @@ under the License.\n     CREATE VIEW group_search AS\n  \n     SELECT g.id as any_id, g.*, attrs.*\n-    FROM SyncopeGroup g, JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n+    FROM SyncopeGroup g LEFT OUTER JOIN JSON_TABLE(COALESCE(plainAttrs, '[{}]'), '$[*]' COLUMNS (\n     plainSchema VARCHAR(255) PATH '$.schema',\n     NESTED PATH '$.values[*]' COLUMNS (\n     binaryValue LONGBLOB PATH '$.binaryValue',\n@@ -181,7 +181,7 @@ under the License.\n     longValue BIGINT(20) PATH '$.longValue',\n     stringValue VARCHAR(255) PATH '$.stringValue'),\n     attrUniqueValue JSON PATH '$.uniqueValue')\n-    ) AS attrs\n+    ) AS attrs ON 1=1\n   </entry>\n   <entry key=\"group_search_auxClass\">\n     CREATE VIEW group_search_auxClass AS"},{"sha":"4d203d762b823dcd15b40e6c5c8d6fa2cb543903","filename":"core/persistence-jpa-json/src/main/resources/ojson/indexes.xml","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Findexes.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,59 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  <comment>Additional indexes (in respect to JPA's)</comment>\n+\n+  <!-- The following indexes require Oracle TEXT to be installed on the given Oracle database:\n+       http://dbaflavours.blogspot.com/2012/09/ora-29833-indextype-does-not-exist_18.html -->\n+  <entry key=\"AnyObject_plainAttrs_Index\">CREATE SEARCH INDEX AnyObject_plainAttrs_Index ON AnyObject(plainAttrs) FOR JSON</entry>  \n+  <entry key=\"SyncopeGroup_plainAttrs_Index\">CREATE SEARCH INDEX SyncopeGroup_plainAttrs_Index ON SyncopeGroup(plainAttrs) FOR JSON</entry>\n+  <entry key=\"SyncopeUser_plainAttrs_Index\">CREATE SEARCH INDEX SyncopeUser_plainAttrs_Index ON SyncopeUser(plainAttrs) FOR JSON</entry>\n+  <entry key=\"LinkedAccount_plainAttrs_Index\">CREATE SEARCH INDEX LinkedAccount_plainAttrs_Index ON LinkedAccount(plainAttrs) FOR JSON</entry>\n+\n+  <entry key=\"UDynGroupMembers_any_id\">CREATE INDEX UDynGroupMembers_any_id ON UDynGroupMembers(any_id)</entry>\n+  <entry key=\"UDynGroupMembers_group_id\">CREATE INDEX UDynGroupMembers_group_id ON UDynGroupMembers(group_id)</entry>\n+  <entry key=\"ADynGroupMembers_any_id\">CREATE INDEX ADynGroupMembers_any_id ON ADynGroupMembers(any_id)</entry>\n+  <entry key=\"ADynGroupMembers_group_id\">CREATE INDEX ADynGroupMembers_group_id ON ADynGroupMembers(group_id)</entry>\n+\n+  <entry key=\"DynRoleMembers_any_id\">CREATE INDEX DynRoleMembers_any_id ON DynRoleMembers(any_id)</entry>\n+  <entry key=\"DynRoleMembers_role_id\">CREATE INDEX DynRoleMembers_role_id ON DynRoleMembers(role_id)</entry>\n+\n+  <entry key=\"DynRealmMembers_any_id\">CREATE INDEX DynRealmMembers_any_id ON DynRealmMembers(any_id)</entry>\n+  <entry key=\"DynRealmMembers_realm_id\">CREATE INDEX DynRealmMembers_dynRealm_id ON DynRealmMembers(dynRealm_id)</entry>\n+\n+  <entry key=\"UMembership_GroupIndex\">CREATE INDEX UMembership_GroupIndex ON UMembership(group_id)</entry>\n+  <entry key=\"UMembership_UserIndex\">CREATE INDEX UMembership_UserIndex ON UMembership(user_id)</entry>\n+  <entry key=\"AMembership_GroupIndex\">CREATE INDEX AMembership_GroupIndex ON AMembership(group_id)</entry>\n+  <entry key=\"AMembership_AnyObjectIndex\">CREATE INDEX AMembership_AnyObjectIndex ON AMembership(anyObject_id)</entry>\n+\n+  <entry key=\"URelationship_RightIndex\">CREATE INDEX URelationship_RightIndex ON URelationship(anyObject_id)</entry>\n+  <entry key=\"URelationship_LeftIndex\">CREATE INDEX URelationship_LeftIndex ON URelationship(user_id)</entry>\n+  <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>\n+  <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>\n+\n+  <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON NotificationTask(executed)</entry>\n+  <entry key=\"TaskExec1_TaskIdIndex\">CREATE INDEX TaskExec1_TaskIdIndex ON PropagationTaskExec(task_id)</entry>\n+  <entry key=\"TaskExec2_TaskIdIndex\">CREATE INDEX TaskExec2_TaskIdIndex ON PullTaskExec(task_id)</entry>\n+  <entry key=\"TaskExec3_TaskIdIndex\">CREATE INDEX TaskExec3_TaskIdIndex ON PushTaskExec(task_id)</entry>\n+  <entry key=\"TaskExec4_TaskIdIndex\">CREATE INDEX TaskExec4_TaskIdIndex ON NotificationTaskExec(task_id)</entry>\n+  <entry key=\"TaskExec5_TaskIdIndex\">CREATE INDEX TaskExec5_TaskIdIndex ON SchedTaskExec(task_id)</entry>\n+  <entry key=\"ATPullTask_PullTaskIndex\">CREATE INDEX ATPullTask_PullTaskIndex ON AnyTemplatePullTask(pullTask_id)</entry>\n+</properties>"},{"sha":"0bc2c4328678d50f6cdc689824305b87894b8ec1","filename":"core/persistence-jpa-json/src/main/resources/ojson/views.xml","status":"added","additions":217,"deletions":0,"changes":217,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fojson%2Fviews.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n+<properties>\n+  \n+  <entry key=\"UDynGroupMembers\">\n+    CREATE TABLE UDynGroupMembers(\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(any_id, group_id))\n+  </entry>\n+  <entry key=\"ADynGroupMembers\">\n+    CREATE TABLE ADynGroupMembers(\n+    anyType_id VARCHAR(255),\n+    any_id CHAR(36),\n+    group_id CHAR(36),\n+    UNIQUE(anyType_id, any_id, group_id))\n+  </entry>\n+  <entry key=\"DynRoleMembers\">\n+    CREATE TABLE DynRoleMembers(\n+    any_id CHAR(36),\n+    role_id VARCHAR(255),\n+    UNIQUE(any_id, role_id))\n+  </entry>\n+  <entry key=\"DynRealmMembers\">\n+    CREATE TABLE DynRealmMembers(\n+    any_id CHAR(36),\n+    dynRealm_id VARCHAR(255),\n+    UNIQUE(any_id, dynRealm_id))\n+  </entry>\n+\n+  <!-- user -->\n+  <entry key=\"user_search\">\n+    CREATE VIEW user_search AS\n+\n+    SELECT u.id as any_id, u.*, attrs.*\n+    FROM SyncopeUser u LEFT OUTER JOIN JSON_TABLE(u.plainAttrs, '$[*]' COLUMNS (\n+    plainSchema PATH '$.schema', \n+    NESTED PATH '$.uniqueValue' COLUMNS(\n+    ubinaryValue PATH '$.binaryValue', \n+    ubooleanValue PATH '$.booleanValue',\n+    udateValue PATH '$.dateValue',\n+    ulongValue PATH '$.longValue',\n+    udoubleValue PATH '$.doubleValue',\n+    ustringValue PATH '$.stringValue'),\n+    NESTED PATH '$.values[*]' COLUMNS(\n+    binaryValue FORMAT JSON WITH WRAPPER PATH '$.binaryValue',\n+    booleanValue FORMAT JSON WITH WRAPPER PATH '$.booleanValue',\n+    dateValue FORMAT JSON WITH WRAPPER PATH '$.dateValue',\n+    longValue FORMAT JSON WITH WRAPPER PATH '$.longValue',\n+    doubleValue FORMAT JSON WITH WRAPPER PATH '$.doubleValue',\n+    stringValue FORMAT JSON WITH WRAPPER PATH '$.stringValue')\n+    )) AS attrs ON 1=1\n+  </entry>\n+  <entry key=\"user_search_urelationship\">\n+    CREATE VIEW user_search_urelationship AS\n+\n+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_id AS type\n+    FROM URelationship m\n+  </entry>\n+  <entry key=\"user_search_umembership\">\n+    CREATE VIEW user_search_umembership AS\n+\n+    SELECT m.user_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM UMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"user_search_role\">\n+    CREATE VIEW user_search_role AS\n+\n+    SELECT ss.user_id AS any_id, ss.role_id AS role_id\n+    FROM SyncopeUser_SyncopeRole ss\n+  </entry>\n+  <entry key=\"user_search_priv\">\n+    CREATE VIEW user_search_priv AS\n+\n+    SELECT ss.user_id AS any_id, sp.privilege_id AS privilege_id\n+    FROM SyncopeUser_SyncopeRole ss, SyncopeRole_Privilege sp\n+    WHERE ss.role_id = sp.role_id\n+  </entry>\n+  <entry key=\"user_search_dynpriv\">\n+    CREATE VIEW user_search_dynpriv AS\n+\n+    SELECT any_id, privilege_id\n+    FROM DynRoleMembers drm, SyncopeRole_Privilege rp\n+    WHERE drm.role_id = rp.role_id\n+  </entry>\n+  <entry key=\"user_search_auxClass\">\n+    CREATE VIEW user_search_auxClass AS\n+\n+    SELECT st.user_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeUser_AnyTypeClass st\n+  </entry>\n+  <entry key=\"user_search_resource\">\n+    CREATE VIEW user_search_resource AS\n+\n+    SELECT st.user_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeUser_ExternalResource st\n+  </entry>\n+  <entry key=\"user_search_group_res\">\n+    CREATE VIEW user_search_group_res AS\n+\n+    SELECT m.user_id AS any_id, st.resource_id AS resource_id\n+    FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- anyObject -->\n+  <entry key=\"anyObject_search\">\n+    CREATE VIEW anyObject_search AS\n+ \n+    SELECT a.id as any_id, a.*, attrs.*\n+    FROM AnyObject a LEFT OUTER JOIN JSON_TABLE(a.plainAttrs, '$[*]' COLUMNS (\n+    plainSchema PATH '$.schema', \n+    NESTED PATH '$.uniqueValue' COLUMNS(\n+    ubinaryValue PATH '$.binaryValue', \n+    ubooleanValue PATH '$.booleanValue',\n+    udateValue PATH '$.dateValue',\n+    ulongValue PATH '$.longValue',\n+    udoubleValue PATH '$.doubleValue',\n+    ustringValue PATH '$.stringValue'),\n+    NESTED PATH '$.values[*]' COLUMNS(\n+    binaryValue FORMAT JSON WITH WRAPPER PATH '$.binaryValue',\n+    booleanValue FORMAT JSON WITH WRAPPER PATH '$.booleanValue',\n+    dateValue FORMAT JSON WITH WRAPPER PATH '$.dateValue',\n+    longValue FORMAT JSON WITH WRAPPER PATH '$.longValue',\n+    doubleValue FORMAT JSON WITH WRAPPER PATH '$.doubleValue',\n+    stringValue FORMAT JSON WITH WRAPPER PATH '$.stringValue')\n+    )) AS attrs ON 1=1\n+  </entry>\n+  <entry key=\"anyObject_search_arelationship\">\n+    CREATE VIEW anyObject_search_arelationship AS\n+\n+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_id AS type\n+    FROM ARelationship m\n+  </entry>\n+  <entry key=\"anyObject_search_amembership\">\n+    CREATE VIEW anyObject_search_amembership AS\n+\n+    SELECT m.anyObject_id AS any_id, g.id AS group_id, g.name AS group_name\n+    FROM AMembership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"anyObject_search_auxClass\">\n+    CREATE VIEW anyObject_search_auxClass AS\n+\n+    SELECT st.anyObject_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM AnyObject_AnyTypeClass st\n+  </entry>\n+  <entry key=\"anyObject_search_resource\">\n+    CREATE VIEW anyObject_search_resource AS\n+\n+    SELECT st.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AnyObject_ExternalResource st\n+  </entry>\n+  <entry key=\"anyObject_search_group_res\">\n+    CREATE VIEW anyObject_search_group_res AS\n+\n+    SELECT m.anyObject_id AS any_id, st.resource_id AS resource_id\n+    FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n+    WHERE m.group_id = r.id AND st.group_id = r.id\n+  </entry>\n+\n+  <!-- group -->\n+  <entry key=\"group_search\">\n+    CREATE VIEW group_search AS\n+ \n+    SELECT g.id as any_id, g.*, attrs.*\n+    FROM SyncopeGroup g LEFT OUTER JOIN JSON_TABLE(g.plainAttrs, '$[*]' COLUMNS (\n+    plainSchema PATH '$.schema', \n+    NESTED PATH '$.uniqueValue' COLUMNS(\n+    ubinaryValue PATH '$.binaryValue', \n+    ubooleanValue PATH '$.booleanValue',\n+    udateValue PATH '$.dateValue',\n+    ulongValue PATH '$.longValue',\n+    udoubleValue PATH '$.doubleValue',\n+    ustringValue PATH '$.stringValue'),\n+    NESTED PATH '$.values[*]' COLUMNS(\n+    binaryValue FORMAT JSON WITH WRAPPER PATH '$.binaryValue',\n+    booleanValue FORMAT JSON WITH WRAPPER PATH '$.booleanValue',\n+    dateValue FORMAT JSON WITH WRAPPER PATH '$.dateValue',\n+    longValue FORMAT JSON WITH WRAPPER PATH '$.longValue',\n+    doubleValue FORMAT JSON WITH WRAPPER PATH '$.doubleValue',\n+    stringValue FORMAT JSON WITH WRAPPER PATH '$.stringValue')\n+    )) AS attrs ON 1=1\n+  </entry>\n+  <entry key=\"group_search_auxClass\">\n+    CREATE VIEW group_search_auxClass AS\n+\n+    SELECT st.group_id AS any_id, st.anyTypeClass_id AS anyTypeClass_id\n+    FROM SyncopeGroup_AnyTypeClass st\n+  </entry>\n+  <entry key=\"group_search_resource\">\n+    CREATE VIEW group_search_resource AS\n+\n+    SELECT st.group_id AS any_id, st.resource_id AS resource_id\n+    FROM SyncopeGroup_ExternalResource st\n+  </entry>\n+\n+</properties>"},{"sha":"0c6e795b93cdad2855c51db4359f8f02dd19a9be","filename":"core/persistence-jpa-json/src/main/resources/persistence-enhance.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpersistence-enhance.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpersistence-enhance.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpersistence-enhance.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -24,7 +24,7 @@ under the License.\n              version=\"2.0\">\n   \n   <persistence-unit name=\"Master\">\n-    <mapping-file>META-INF/spring-orm-pgjsonb.xml</mapping-file>\n+    <mapping-file>META-INF/spring-orm-${orm}.xml</mapping-file>\n     <validation-mode>NONE</validation-mode>\n   </persistence-unit>\n   "},{"sha":"8a733347300e6976ebad6b700d1a439d9f21b554","filename":"core/persistence-jpa-json/src/test/java/org/apache/syncope/core/persistence/jpa/JPAJSONTestContextCustomizer.java","status":"modified","additions":23,"deletions":11,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizer.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -22,7 +22,6 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;\n-import org.springframework.context.support.AbstractApplicationContext;\n import org.springframework.test.context.ContextCustomizer;\n import org.springframework.test.context.MergedContextConfiguration;\n import org.springframework.test.context.support.TestPropertySourceUtils;\n@@ -33,26 +32,39 @@ private static BeanDefinitionRegistry getBeanDefinitionRegistry(final Applicatio\n         if (ctx instanceof BeanDefinitionRegistry) {\n             return (BeanDefinitionRegistry) ctx;\n         }\n-        if (ctx instanceof AbstractApplicationContext) {\n-            return (BeanDefinitionRegistry) ((AbstractApplicationContext) ctx).getBeanFactory();\n+        if (ctx instanceof ConfigurableApplicationContext) {\n+            return (BeanDefinitionRegistry) ((ConfigurableApplicationContext) ctx).getBeanFactory();\n         }\n         throw new IllegalStateException(\"Could not locate BeanDefinitionRegistry\");\n     }\n \n     @Override\n     public void customizeContext(final ConfigurableApplicationContext ctx, final MergedContextConfiguration cfg) {\n-        if (\"pgjsonb\".equals(System.getProperty(\"profileId\"))) {\n-            TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n-                    ctx,\n-                    \"provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\");\n-        } else if (\"myjson\".equals(System.getProperty(\"profileId\"))) {\n-            TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n-                    ctx,\n-                    \"provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\");\n+        switch (System.getProperty(\"profileId\")) {\n+            case \"pgjsonb\":\n+                TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n+                        ctx,\n+                        \"provisioning.quartz.sql=tables_postgres.sql\");\n+                break;\n+\n+            case \"myjson\":\n+                TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n+                        ctx,\n+                        \"provisioning.quartz.sql=tables_mysql_innodb.sql\");\n+                break;\n+\n+            case \"ojson\":\n+                TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n+                        ctx,\n+                        \"provisioning.quartz.sql=tables_oracle.sql\");\n+                break;\n+\n+            default:\n         }\n \n         AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(getBeanDefinitionRegistry(ctx));\n         reader.registerBean(PGJPAJSONPersistenceContext.class, \"PGJPAJSONPersistenceContext\");\n         reader.registerBean(MyJPAJSONPersistenceContext.class, \"MyJPAJSONPersistenceContext\");\n+        reader.registerBean(OJPAJSONPersistenceContext.class, \"OJPAJSONPersistenceContext\");\n     }\n }"},{"sha":"972a4bfd52fdb615380ae05ee9a3c15dca7e2765","filename":"core/persistence-jpa-json/src/test/resources/core-ojson-test.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fcore-ojson-test.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fcore-ojson-test.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fcore-ojson-test.properties?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+security.adminUser=${adminUser}\n+security.anonymousUser=${anonymousUser}\n+security.jwsKey=${jwsKey}\n+security.secretKey=${secretKey}\n+\n+persistence.domain[0].jdbcURL=jdbc:oracle:thin:@${DB_CONTAINER_IP}:1521/XEPDB1\n+#persistence.domain[0].jdbcURL=jdbc:oracle:thin:@192.168.0.176:1521/orcl\n+\n+provisioning.connIdLocation=${connid.location}"},{"sha":"942bf5e9870957461c4b39d84064a49dba8632c9","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -273,8 +273,9 @@ under the License.\n   <AnyObject id=\"9e1d130c-d6a3-48b1-98b3-182477ed0688\" name=\"Epson Stylus Color\"\n              realm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\" type_id=\"PRINTER\"\n              creator=\"admin\" lastModifier=\"admin\" \n-             creationDate=\"2021-04-15 12:45:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  \n+             creationDate=\"2021-04-15 12:45:00\" lastChangeDate=\"2010-10-20 11:00:00\"\n+             plainAttrs=\"[]\"/>\n+\n   <ARelationship id=\"11a0ec66-b59b-428a-af3d-f856950ff1c5\" type_id=\"neighborhood\"\n                  left_anyObject_id=\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\"\n                  right_anyObject_id=\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\"/>"},{"sha":"023b370876527cb5200a2677dae9692f84a779ee","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -72,6 +72,11 @@\n  */\n public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n+    protected static final String SELECT_COLS_FROM_VIEW =\n+            \"any_id,creationContext,creationDate,creator,lastChangeContext,\"\n+            + \"lastChangeDate,lastModifier,status,changePwdDate,cipherAlgorithm,failedLogins,\"\n+            + \"lastLoginDate,mustChangePassword,suspended,username\";\n+\n     public JPAAnySearchDAO(\n             final RealmDAO realmDAO,\n             final DynRealmDAO dynRealmDAO,"},{"sha":"bb9a7919cdf26cae9c31c24f9eaa378ed870b5ca","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -171,10 +171,10 @@ public void findByPlainAttrUniqueValue() {\n \n     @Test\n     public void findByPlainAttrBooleanValue() {\n-        final UPlainAttrValue coolValue = entityFactory.newEntity(UPlainAttrValue.class);\n+        UPlainAttrValue coolValue = entityFactory.newEntity(UPlainAttrValue.class);\n         coolValue.setBooleanValue(true);\n \n-        final List<User> list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"cool\"), coolValue, false);\n+        List<User> list = userDAO.findByPlainAttrValue(plainSchemaDAO.find(\"cool\"), coolValue, false);\n         assertEquals(1, list.size());\n     }\n "},{"sha":"571a6f2f93cb3e98a94b377a44347d9f6346871d","filename":"fit/core-reference/pom.xml","status":"modified","additions":110,"deletions":4,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -1133,17 +1133,23 @@ under the License.\n     </profile>\n \n     <profile>\n-      <id>oracle-it</id>\n+      <id>ojson-it</id>\n \n       <properties>\n         <jdbcdriver.groupId>com.oracle.database.jdbc</jdbcdriver.groupId>\n         <jdbcdriver.artifactId>ojdbc11</jdbcdriver.artifactId>\n         <cargo.deployable.ping.timeout>120000</cargo.deployable.ping.timeout>\n \n-        <spring.profiles.active>embedded,oracle</spring.profiles.active>\n+        <spring.profiles.active>embedded,ojson</spring.profiles.active>\n       </properties>\n \n       <dependencies>\n+        <dependency>\n+          <groupId>org.apache.syncope.core</groupId>\n+          <artifactId>syncope-core-persistence-jpa-json</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+\n         <dependency>\n           <groupId>com.oracle.database.jdbc</groupId>\n           <artifactId>ojdbc11</artifactId>\n@@ -1174,7 +1180,7 @@ under the License.\n               <images>\n                 <image>\n                   <alias>oracle</alias>\n-                  <name>gvenzl/oracle-xe:18-slim</name>\n+                  <name>gvenzl/oracle-xe:21-slim</name>\n                   <run>\n                     <env>\n                       <ORACLE_PASSWORD>password</ORACLE_PASSWORD>\n@@ -1231,10 +1237,110 @@ under the License.\n \n         <resources>\n           <resource>\n-            <directory>src/main/resources/oracle</directory>\n+            <directory>${basedir}/../../core/persistence-jpa-json/src/test/resources/domains</directory>\n+            <targetPath>${project.build.outputDirectory}/domains</targetPath>\n             <filtering>true</filtering>\n           </resource>\n         </resources>\n+      </build>      \n+    </profile>\n+\n+    <profile>\n+      <id>oracle-it</id>\n+\n+      <properties>\n+        <jdbcdriver.groupId>com.oracle.database.jdbc</jdbcdriver.groupId>\n+        <jdbcdriver.artifactId>ojdbc11</jdbcdriver.artifactId>\n+        <cargo.deployable.ping.timeout>120000</cargo.deployable.ping.timeout>\n+\n+        <spring.profiles.active>embedded,oracle</spring.profiles.active>\n+      </properties>\n+\n+      <dependencies>\n+        <dependency>\n+          <groupId>com.oracle.database.jdbc</groupId>\n+          <artifactId>ojdbc11</artifactId>\n+          <version>${jdbc.oracle.version}</version>\n+          <scope>test</scope>\n+        </dependency>\n+      </dependencies>\n+\n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <alias>oracle</alias>\n+                  <name>gvenzl/oracle-xe:21-slim</name>\n+                  <run>\n+                    <env>\n+                      <ORACLE_PASSWORD>password</ORACLE_PASSWORD>\n+                      <APP_USER>syncope</APP_USER>\n+                      <APP_USER_PASSWORD>syncope</APP_USER_PASSWORD>\n+                    </env>\n+                    <wait>\n+                      <log>DATABASE IS READY TO USE</log>\n+                      <time>120000</time>\n+                    </wait>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>buid-oracle</id>\n+                <phase>initialize</phase>\n+                <goals>\n+                  <goal>build</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>start-oracle</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-oracle</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven3-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <container>\n+                <systemProperties>\n+                  <DB_CONTAINER_IP>${docker.container.oracle.ip}</DB_CONTAINER_IP>\n+                </systemProperties>\n+              </container>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n       </build>\n     </profile>\n "},{"sha":"a63671f3f99b10d061a70db50317084ce5722471","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.core.logic.job.MacroRunJobDelegate;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -54,6 +55,8 @@\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPushCorrelationRule;\n+import org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup;\n+import org.apache.syncope.core.provisioning.java.job.ExpiredBatchCleanup;\n import org.apache.syncope.core.provisioning.java.job.report.AuditReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.GroupReportlet;\n import org.apache.syncope.core.provisioning.java.job.report.ReconciliationReportlet;\n@@ -68,6 +71,8 @@\n import org.apache.syncope.core.provisioning.java.pushpull.DefaultProvisionSorter;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPMembershipPullActions;\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n+import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n+import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.spring.policy.DefaultAccountRule;\n import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n import org.apache.syncope.core.spring.policy.HaveIBeenPwnedPasswordRule;\n@@ -160,6 +165,11 @@ public class ITImplementationLookup implements ImplementationLookup {\n             put(IdRepoImplementationType.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();\n+            classNames.add(MacroRunJobDelegate.class.getName());\n+            classNames.add(PullJobDelegate.class.getName());\n+            classNames.add(PushJobDelegate.class.getName());\n+            classNames.add(ExpiredAccessTokenCleanup.class.getName());\n+            classNames.add(ExpiredBatchCleanup.class.getName());\n             classNames.add(TestSampleJobDelegate.class.getName());\n             put(IdRepoImplementationType.TASKJOB_DELEGATE, classNames);\n "},{"sha":"e621a63a37fe13ba8dd970b0fc8041650b6b4385","filename":"fit/core-reference/src/main/resources/core-ojson.properties","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-ojson.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-ojson.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-ojson.properties?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+persistence.indexesXML=classpath:ojson/indexes.xml\n+persistence.viewsXML=classpath:ojson/views.xml\n+\n+persistence.domain[0].key=Master\n+persistence.domain[0].jdbcDriver=oracle.jdbc.OracleDriver\n+persistence.domain[0].jdbcURL=jdbc:oracle:thin:@${DB_CONTAINER_IP}:1521/XEPDB1\n+persistence.domain[0].schema=SYNCOPE\n+persistence.domain[0].dbUsername=syncope\n+persistence.domain[0].dbPassword=syncope\n+persistence.domain[0].databasePlatform=org.apache.openjpa.jdbc.sql.OracleDictionary\n+persistence.domain[0].orm=META-INF/spring-orm-ojson.xml\n+persistence.domain[0].auditSql=audit_ojson.sql\n+persistence.domain[0].poolMaxActive=10\n+persistence.domain[0].poolMinIdle=2\n+\n+provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n+provisioning.quartz.sql=tables_oracle.sql"},{"sha":"c7ddf8fca274b1c7c85a9bcd32378970918ed30a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -216,28 +216,28 @@ public void issueSYNCOPE756() {\n     @Test\n     public void issueSYNCOPE1472() {\n         // 1. assign resource-db-scripted again to Canon MF 8030cn and update twice\n-        AnyObjectUR anyObjectPatch = new AnyObjectUR();\n-        anyObjectPatch.setKey(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n-        anyObjectPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_DBSCRIPTED).build());\n-        anyObjectPatch.getAuxClasses().add(new StringPatchItem.Builder().value(\"csv\").build());\n+        AnyObjectUR updateReq = new AnyObjectUR();\n+        updateReq.setKey(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n+        updateReq.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_DBSCRIPTED).build());\n+        updateReq.getAuxClasses().add(new StringPatchItem.Builder().value(\"csv\").build());\n \n         for (int i = 0; i < 2; i++) {\n-            updateAnyObject(anyObjectPatch);\n+            updateAnyObject(updateReq);\n         }\n \n         // 2. remove resources and auxiliary classes\n-        anyObjectPatch.getResources().clear();\n-        anyObjectPatch.getResources().add(new StringPatchItem.Builder()\n+        updateReq.getResources().clear();\n+        updateReq.getResources().add(new StringPatchItem.Builder()\n                 .value(RESOURCE_NAME_DBSCRIPTED)\n                 .operation(PatchOperation.DELETE)\n                 .build());\n-        anyObjectPatch.getAuxClasses().clear();\n-        anyObjectPatch.getAuxClasses().add(new StringPatchItem.Builder()\n+        updateReq.getAuxClasses().clear();\n+        updateReq.getAuxClasses().add(new StringPatchItem.Builder()\n                 .value(\"csv\")\n                 .operation(PatchOperation.DELETE)\n                 .build());\n \n-        updateAnyObject(anyObjectPatch);\n+        updateAnyObject(updateReq);\n \n         AnyObjectTO printer = ANY_OBJECT_SERVICE.read(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n         assertFalse(printer.getResources().contains(RESOURCE_NAME_DBSCRIPTED), \"Should not contain removed resources\");"},{"sha":"03dfcaee6925dad9f0ceaf3cb82df376ee797df0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -598,7 +598,8 @@ public void issueSYNCOPE1695() {\n                             .entityKey(pullFromLDAP.getKey())\n                             .page(1)\n                             .size(10)\n-                            .events(List.of(\"create\", \"update\", \"matchingrule_update\", \"unmatchingrule_assign\",\n+                            .events(List.of(\n+                                    \"create\", \"update\", \"matchingrule_update\", \"unmatchingrule_assign\",\n                                     \"unmatchingrule_provision\"))\n                             .result(AuditElements.Result.SUCCESS)\n                             .build()).getTotalCount());"},{"sha":"93081efb1f99cb29a5d7c9dc1e6e1129179a0b53","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -2380,6 +2380,7 @@ under the License.\n                 <postgresqlJDBC>${jdbc.postgresql.version}</postgresqlJDBC>\n                 <mysqlJDBC>${jdbc.mysql.version}</mysqlJDBC>\n                 <mariadbJDBC>${jdbc.mariadb.version}</mariadbJDBC>\n+                <oracleJDBC>${jdbc.oracle.version}</oracleJDBC>\n                 <sqlserverJDBC>${jdbc.mssql.version}</sqlserverJDBC>\n                 <year>${year}</year>\n                 <numbered>true</numbered>"},{"sha":"6dfcaebe65d7de8ce81137df5e3917c1c0790d17","filename":"src/main/asciidoc/getting-started/systemRequirements.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/src%2Fmain%2Fasciidoc%2Fgetting-started%2FsystemRequirements.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/src%2Fmain%2Fasciidoc%2Fgetting-started%2FsystemRequirements.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Fgetting-started%2FsystemRequirements.adoc?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -47,5 +47,5 @@ Apache Syncope {docVersion} is verified with the recent versions of the followin\n  . http://www.postgresql.org/[PostgreSQL^] (>= {postgresql}, JDBC driver >= {postgresqlJDBC})\n  . https://mariadb.org/[MariaDB^] (>= {mariadb}, JDBC driver >= {mariadbJDBC})\n  . http://www.mysql.com/[MySQL^] (>= {mysql}, JDBC driver >= {mysqlJDBC})\n- . https://www.oracle.com/database/index.html[Oracle Database^] (>= 11g, JDBC driver >= ojdbc8 12.2.0.1)\n- . http://www.microsoft.com/en-us/server-cloud/products/sql-server/[MS SQL Server^] (>= 2017, JDBC driver >= {sqlserverJDBC}8)\n+ . https://www.oracle.com/database/index.html[Oracle Database^] (>= 19c, JDBC driver >= ojdbc11 {oracleJDBC})\n+ . http://www.microsoft.com/en-us/server-cloud/products/sql-server/[MS SQL Server^] (>= 2017, JDBC driver >= {sqlserverJDBC}11)"},{"sha":"0f91d2ffc3b2e8bdb25ed15c78521a163442a000","filename":"src/main/asciidoc/reference-guide/configuration/dbms.adoc","status":"modified","additions":54,"deletions":1,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b92248f160798e3f99c22ce80a5d54de32867d17/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b92248f160798e3f99c22ce80a5d54de32867d17/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fdbms.adoc?ref=b92248f160798e3f99c22ce80a5d54de32867d17","patch":"@@ -240,7 +240,7 @@ This assumes that you have a MariaDB instance running on localhost, listening on\n ==== Oracle Database\n \n [NOTE]\n-Apache Syncope {docVersion} is verified with Oracle database >= 11g and JDBC driver >= ojdbc8 12.2.0.1.\n+Apache Syncope {docVersion} is verified with Oracle database >= 19c and JDBC driver >= ojdbc11 {oracleJDBC}.\n \n Create\n \n@@ -274,6 +274,59 @@ for the Core application.\n This assumes that you have an Oracle instance running on localhost, listening on its default port 1521 with a database\n `syncope` under tablespace `SYNCOPE`, fully accessible by user `syncope` with password `syncope`.\n \n+==== Oracle Database (JSON)\n+\n+[NOTE]\n+With the configurations reported below, Apache Syncope will leverage the\n+https://docs.oracle.com/en/database/oracle/oracle-database/19/adjsn/[JSON^] features.\n+\n+[NOTE]\n+Apache Syncope {docVersion} is verified with Oracle database >= 19c and JDBC driver >= ojdbc11 {oracleJDBC}.\n+\n+Add the following dependency to `core/pom.xml`:\n+\n+[source,xml,subs=\"verbatim,attributes\"]\n+----\n+<dependency>\n+  <groupId>org.apache.syncope.core</groupId>\n+  <artifactId>syncope-core-persistence-jpa-json</artifactId>\n+  <version>${syncope.version}</version>\n+</dependency>\n+----\n+\n+Create\n+\n+[source]\n+....\n+persistence.indexesXML=classpath:ojson/indexes.xml\n+persistence.viewsXML=classpath:ojson/views.xml\n+\n+persistence.domain[0].key=Master\n+persistence.domain[0].jdbcDriver=oracle.jdbc.OracleDriver\n+persistence.domain[0].jdbcURL=jdbc:postgresql://${DB_CONTAINER_IP}:5432/syncope?stringtype=unspecified\n+persistence.domain[0].schema=SYNCOPE\n+persistence.domain[0].dbUsername=syncope\n+persistence.domain[0].dbPassword=syncope\n+persistence.domain[0].databasePlatform=org.apache.openjpa.jdbc.sql.OracleDictionary\n+persistence.domain[0].orm=META-INF/spring-orm-ojson.xml\n+persistence.domain[0].auditSql=audit_ojson.sql\n+persistence.domain[0].poolMaxActive=10\n+persistence.domain[0].poolMinIdle=2\n+\n+provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n+provisioning.quartz.sql=tables_oracle.sql\n+....\n+\n+as `core/src/main/resources/core-ojson.properties`.\n+\n+Do not forget to include `ojson` as \n+https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.profiles.adding-active-profiles[Spring Boot profile^]\n+for the Core application.\n+\n+[WARNING]\n+This assumes that you have an Oracle instance running on localhost, listening on its default port 1521 with a database\n+`syncope` under tablespace `SYNCOPE`, fully accessible by user `syncope` with password `syncope`.\n+\n ==== MS SQL Server\n \n [NOTE]"}]}