{"sha":"6a72cdf1aef16d29186afe49062e7463ae3f9a56","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZhNzJjZGYxYWVmMTZkMjkxODZhZmU0OTA2MmU3NDYzYWUzZjlhNTY=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-02T16:25:04Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-02T16:25:04Z"},"message":"[SYNCOPE-259]\nIntroduces EntitlementService Interface and EntitlementServiceProxy which is used in Integration-Tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1427850 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"270af8e9bae754c8b6af14373b343697c8150e82","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/270af8e9bae754c8b6af14373b343697c8150e82"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6a72cdf1aef16d29186afe49062e7463ae3f9a56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a72cdf1aef16d29186afe49062e7463ae3f9a56","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a72cdf1aef16d29186afe49062e7463ae3f9a56","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a72cdf1aef16d29186afe49062e7463ae3f9a56/comments","author":null,"committer":null,"parents":[{"sha":"ebe6b251114223aa3db055be51b84218ae64da2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ebe6b251114223aa3db055be51b84218ae64da2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ebe6b251114223aa3db055be51b84218ae64da2a"}],"stats":{"total":907,"additions":562,"deletions":345},"files":[{"sha":"a13384ad5da485b502aaeaa81c344c42ed22bb73","filename":"client/src/main/java/org/apache/syncope/client/to/EntitlementTO.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FEntitlementTO.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.to;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+import javax.xml.bind.annotation.XmlValue;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class EntitlementTO implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 7233619557177034458L;\r\n+\r\n+    private String name;\r\n+\r\n+    public EntitlementTO() {\r\n+    }\r\n+\r\n+    public EntitlementTO(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    @XmlValue\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name\r\n+     *            the name to set\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((name == null)\r\n+                ? 0\r\n+                : name.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (!(obj instanceof EntitlementTO))\r\n+            return false;\r\n+        EntitlementTO other = (EntitlementTO) obj;\r\n+        if (name == null) {\r\n+            if (other.name != null)\r\n+                return false;\r\n+        } else if (!name.equals(other.name))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"EntitlementTO [\" + name + \"]\";\r\n+    }\r\n+\r\n+}\r"},{"sha":"96821e36fee1ceae4f934150275a6b48c5e37bd5","filename":"client/src/main/java/org/apache/syncope/services/EntitlementService.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestMethod;\r\n+\r\n+@Path(\"/entitlements\")\r\n+@RequestMapping(\"/auth\")\r\n+public interface EntitlementService {\r\n+\r\n+    @GET\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/allentitlements\")\r\n+    public abstract Set<String> getAllEntitlements();\r\n+\r\n+    @GET\r\n+    @Path(\"/own\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/entitlements\")\r\n+    public abstract Set<String> getMyEntitlements();\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"3ca62b308511d54623b9b604c636811bce70893e","filename":"client/src/main/java/org/apache/syncope/services/EntitlementServiceProxy.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementServiceProxy.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r\n+\t\r\n+\tpublic EntitlementServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+\t\tsuper(baseUrl, restTemplate);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Set<String> getAllEntitlements() {\r\n+\t\treturn new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n+                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Set<String> getMyEntitlements() {\r\n+\t\treturn new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n+                + \"auth/entitlements.json\", String[].class)));\r\n+\t}\r\n+\r\n+}\r"},{"sha":"975cb99dc8527edc4f3b97507d947b10182fce81","filename":"client/src/main/java/org/apache/syncope/services/RoleServiceProxy.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -26,14 +26,10 @@\n import org.apache.syncope.client.to.RoleTO;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n-public class RoleServiceProxy implements RoleService {\r\n-\r\n-\tRestTemplate restTemplate;\r\n-\tprivate String baseUrl;\r\n+public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r\n \r\n \tpublic RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tthis.baseUrl = baseUrl;\r\n-\t\tthis.restTemplate = restTemplate;\r\n+\t\tsuper(baseUrl, restTemplate);\r\n \t}\r\n \r\n \t@Override\r"},{"sha":"c0cfcb4704bc5cf637a8ad7b240bb175f2b2eb3f","filename":"client/src/main/java/org/apache/syncope/services/SpringServiceProxy.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSpringServiceProxy.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public abstract class SpringServiceProxy {\r\n+\r\n+\tprotected RestTemplate restTemplate;\r\n+\r\n+\tprotected String baseUrl;\r\n+\r\n+\tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+\t\tthis.restTemplate = restTemplate;\r\n+\t\tthis.baseUrl = baseUrl;\r\n+\t}\r\n+}\r"},{"sha":"d053683a7639c84f2c87dc4f77247746e9b5cac4","filename":"client/src/main/java/org/apache/syncope/services/UserServiceProxy.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserServiceProxy.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -35,13 +35,10 @@\n import org.apache.syncope.client.to.WorkflowFormTO;\n import org.springframework.web.client.RestTemplate;\n \n-public class UserServiceProxy implements UserService {\n-\tRestTemplate restTemplate;\n-\tprivate String baseUrl;\n+public class UserServiceProxy extends SpringServiceProxy implements UserService {\n \n \tpublic UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n-\t\tthis.baseUrl = baseUrl;\n-\t\tthis.restTemplate = restTemplate;\n+\t\tsuper(baseUrl, restTemplate);\n \t}\n \n \t@Override"},{"sha":"f91811fe908b1c54d56291a8443cdc4e41a25f29","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n+import org.apache.syncope.services.EntitlementServiceProxy;\n import org.apache.syncope.services.RoleServiceProxy;\n import org.apache.syncope.services.UserService;\n import org.apache.syncope.services.UserServiceProxy;\n@@ -74,9 +75,11 @@ protected static AttributeMod attributeMod(final String schema,\n \tprotected RestTemplate restTemplate;\n \n \tprotected UserService userService;\n-\t\n+\n \tprotected RoleServiceProxy roleService;\n \n+\tprotected EntitlementServiceProxy entitlementService;\n+\n \t@Autowired\n \tprotected DataSource testDataSource;\n \n@@ -99,5 +102,6 @@ public void resetRestTemplate() {\n \t\tsetupRestTemplate(ADMIN_UID, ADMIN_PWD);\n \t\tuserService = new UserServiceProxy(BASE_URL, restTemplate);\n \t\troleService = new RoleServiceProxy(BASE_URL, restTemplate);\n+\t\tentitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"887f0d0562a591322710684873c8bdd5a725383c","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":343,"deletions":333,"changes":676,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a72cdf1aef16d29186afe49062e7463ae3f9a56/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a72cdf1aef16d29186afe49062e7463ae3f9a56/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=6a72cdf1aef16d29186afe49062e7463ae3f9a56","patch":"@@ -18,15 +18,16 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n-import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpClientErrorException;\n+\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.AttributeTO;\n@@ -39,398 +40,407 @@\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpClientErrorException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class AuthenticationTestITCase extends AbstractTest {\n \n-    @Test\n-    public void testAdminEntitlements() {\n-        // 1. as anonymous, read all available entitlements\n-        Set<String> allEntitlements = new HashSet<String>(Arrays.asList(anonymousRestTemplate().getForObject(\n-                BASE_URL + \"auth/allentitlements.json\", String[].class)));\n-        assertNotNull(allEntitlements);\n-        assertFalse(allEntitlements.isEmpty());\n-\n-        // 2. as admin, read own entitlements\n-        super.resetRestTemplate();\n-\n-        Set<String> adminEntitlements = new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\n-                + \"auth/entitlements.json\", String[].class)));\n-\n-        assertEquals(allEntitlements, adminEntitlements);\n-    }\n-\n-    @Test\n-    public void testUserSchemaAuthorization() {\n-        // 0. create a role that can only read schemas\n-        RoleTO authRoleTO = new RoleTO();\n-        authRoleTO.setName(\"authRole\");\n-        authRoleTO.setParent(8L);\n-        authRoleTO.addEntitlement(\"SCHEMA_READ\");\n-\n-        authRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\", authRoleTO, RoleTO.class);\n-        assertNotNull(authRoleTO);\n-\n-        // 1. create a schema (as admin)\n-        SchemaTO schemaTO = new SchemaTO();\n-        schemaTO.setName(\"authTestSchema\");\n-        schemaTO.setMandatoryCondition(\"false\");\n-        schemaTO.setType(SchemaType.String);\n-\n-        SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL + \"schema/user/create\", schemaTO, SchemaTO.class);\n-        assertEquals(schemaTO, newSchemaTO);\n-\n-        // 2. create an user with the role created above (as admin)\n-        UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(authRoleTO.getId());\n-        AttributeTO testAttributeTO = new AttributeTO();\n-        testAttributeTO.setSchema(\"testAttribute\");\n-        testAttributeTO.addValue(\"a value\");\n-        membershipTO.addAttribute(testAttributeTO);\n-        userTO.addMembership(membershipTO);\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-        assertNotNull(userTO);\n-\n-        // 3. read the schema created above (as admin) - success\n-        schemaTO = restTemplate.getForObject(BASE_URL + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n-        assertNotNull(schemaTO);\n-\n-        // 4. read the schema created above (as user) - success\n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n-\n-        schemaTO = restTemplate.getForObject(BASE_URL + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n-        assertNotNull(schemaTO);\n-\n-        // 5. update the schema create above (as user) - failure\n-        HttpClientErrorException exception = null;\n-        try {\n-            restTemplate.postForObject(BASE_URL + \"schema/role/update\", schemaTO, SchemaTO.class);\n-        } catch (HttpClientErrorException e) {\n-            exception = e;\n-        }\n-        assertNotNull(exception);\n-        assertEquals(HttpStatus.FORBIDDEN, exception.getStatusCode());\n-\n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n-\n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-\n-        assertNotNull(userTO);\n-        assertNotNull(userTO.getLastLoginDate());\n-        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n-    }\n-\n-    @Test\n-    public void testUserRead() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(7L);\n-        AttributeTO testAttributeTO = new AttributeTO();\n-        testAttributeTO.setSchema(\"testAttribute\");\n-        testAttributeTO.addValue(\"a value\");\n-        membershipTO.addAttribute(testAttributeTO);\n-        userTO.addMembership(membershipTO);\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-        assertNotNull(userTO);\n-\n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n-\n-        UserTO readUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n-        assertNotNull(readUserTO);\n-\n-        super.setupRestTemplate(\"user2\", \"password\");\n-\n-        SyncopeClientException exception = null;\n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n-            fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n-        }\n-        assertNotNull(exception);\n-\n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n-    }\n-\n-    @Test\n-    public void testUserSearch() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(7L);\n-        AttributeTO testAttributeTO = new AttributeTO();\n-        testAttributeTO.setSchema(\"testAttribute\");\n-        testAttributeTO.addValue(\"a value\");\n-        membershipTO.addAttribute(testAttributeTO);\n-        userTO.addMembership(membershipTO);\n-\n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-        assertNotNull(userTO);\n-\n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n-\n-        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n-        isNullCond.setSchema(\"loginDate\");\n-        NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n-\n-        List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n-                UserTO[].class));\n-        assertNotNull(matchedUsers);\n-        assertFalse(matchedUsers.isEmpty());\n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n-        for (UserTO user : matchedUsers) {\n-            userIds.add(user.getId());\n-        }\n-        assertTrue(userIds.contains(1L));\n-\n-        super.setupRestTemplate(\"user2\", \"password\");\n-\n-        matchedUsers =\n-                Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition, UserTO[].class));\n-\n-        assertNotNull(matchedUsers);\n-\n-        userIds = new HashSet<Long>(matchedUsers.size());\n-\n-        for (UserTO user : matchedUsers) {\n-            userIds.add(user.getId());\n-        }\n-        assertFalse(userIds.contains(1L));\n+\t@Test\n+\tpublic void testAdminEntitlements() {\n+\t\t// 1. as anonymous, read all available entitlements\n+\t\tSet<String> allEntitlements = entitlementService.getAllEntitlements();\n+\t\tassertNotNull(allEntitlements);\n+\t\tassertFalse(allEntitlements.isEmpty());\n+\n+\t\t// 2. as admin, read own entitlements\n+\t\tsuper.resetRestTemplate();\n+\n+\t\tSet<String> adminEntitlements = entitlementService.getMyEntitlements();\n+\n+\t\tassertEquals(allEntitlements, adminEntitlements);\n+\t}\n+\n+\t@Test\n+\tpublic void testUserSchemaAuthorization() {\n+\t\t// 0. create a role that can only read schemas\n+\t\tRoleTO authRoleTO = new RoleTO();\n+\t\tauthRoleTO.setName(\"authRole\");\n+\t\tauthRoleTO.setParent(8L);\n+\t\tauthRoleTO.addEntitlement(\"SCHEMA_READ\");\n+\n+\t\tauthRoleTO = roleService.create(authRoleTO);\n+\t\tassertNotNull(authRoleTO);\n+\n+\t\t// 1. create a schema (as admin)\n+\t\tSchemaTO schemaTO = new SchemaTO();\n+\t\tschemaTO.setName(\"authTestSchema\");\n+\t\tschemaTO.setMandatoryCondition(\"false\");\n+\t\tschemaTO.setType(SchemaType.String);\n+\n+\t\tSchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n+\t\t\t\t+ \"schema/user/create\", schemaTO, SchemaTO.class);\n+\t\tassertEquals(schemaTO, newSchemaTO);\n+\n+\t\t// 2. create an user with the role created above (as admin)\n+\t\tUserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n+\n+\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(authRoleTO.getId());\n+\t\tAttributeTO testAttributeTO = new AttributeTO();\n+\t\ttestAttributeTO.setSchema(\"testAttribute\");\n+\t\ttestAttributeTO.addValue(\"a value\");\n+\t\tmembershipTO.addAttribute(testAttributeTO);\n+\t\tuserTO.addMembership(membershipTO);\n+\n+\t\tuserTO = userService.create(userTO);\n+\t\tassertNotNull(userTO);\n+\n+\t\t// 3. read the schema created above (as admin) - success\n+\t\tschemaTO = restTemplate.getForObject(BASE_URL\n+\t\t\t\t+ \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n+\t\tassertNotNull(schemaTO);\n+\n+\t\t// 4. read the schema created above (as user) - success\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\n+\t\tschemaTO = restTemplate.getForObject(BASE_URL\n+\t\t\t\t+ \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n+\t\tassertNotNull(schemaTO);\n+\n+\t\t// 5. update the schema create above (as user) - failure\n+\t\tHttpClientErrorException exception = null;\n+\t\ttry {\n+\t\t\trestTemplate.postForObject(BASE_URL + \"schema/role/update\",\n+\t\t\t\t\tschemaTO, SchemaTO.class);\n+\t\t} catch (HttpClientErrorException e) {\n+\t\t\texception = e;\n+\t\t}\n+\t\tassertNotNull(exception);\n+\t\tassertEquals(HttpStatus.FORBIDDEN, exception.getStatusCode());\n+\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n+\n+\t\tuserTO = userService.read(userTO.getId());\n+\n+\t\tassertNotNull(userTO);\n+\t\tassertNotNull(userTO.getLastLoginDate());\n+\t\tassertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n+\t}\n+\n+\t@Test\n+\tpublic void testUserRead() {\n+\t\tUserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n+\n+\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(7L);\n+\t\tAttributeTO testAttributeTO = new AttributeTO();\n+\t\ttestAttributeTO.setSchema(\"testAttribute\");\n+\t\ttestAttributeTO.addValue(\"a value\");\n+\t\tmembershipTO.addAttribute(testAttributeTO);\n+\t\tuserTO.addMembership(membershipTO);\n+\n+\t\tuserTO = userService.create(userTO);\n+\t\tassertNotNull(userTO);\n+\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\n+\t\tUserTO readUserTO = userService.read(1L);\n+\t\tassertNotNull(readUserTO);\n+\n+\t\tsuper.setupRestTemplate(\"user2\", \"password\");\n+\n+\t\tSyncopeClientException exception = null;\n+\t\ttry {\n+\t\t\tuserService.read(1L);\n+\t\t\tfail();\n+\t\t} catch (SyncopeClientCompositeErrorException e) {\n+\t\t\texception = e\n+\t\t\t\t\t.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+\t\t}\n+\t\tassertNotNull(exception);\n+\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n+\t}\n+\n+\t@Test\n+\tpublic void testUserSearch() {\n+\t\tUserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n+\n+\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(7L);\n+\t\tAttributeTO testAttributeTO = new AttributeTO();\n+\t\ttestAttributeTO.setSchema(\"testAttribute\");\n+\t\ttestAttributeTO.addValue(\"a value\");\n+\t\tmembershipTO.addAttribute(testAttributeTO);\n+\t\tuserTO.addMembership(membershipTO);\n+\n+\t\tuserTO = userService.create(userTO);\n+\t\tassertNotNull(userTO);\n+\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\n+\t\tAttributeCond isNullCond = new AttributeCond(\n+\t\t\t\tAttributeCond.Type.ISNOTNULL);\n+\t\tisNullCond.setSchema(\"loginDate\");\n+\t\tNodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n+\n+\t\tList<UserTO> matchedUsers = userService.search(searchCondition);\n+\t\tassertNotNull(matchedUsers);\n+\t\tassertFalse(matchedUsers.isEmpty());\n+\t\tSet<Long> userIds = new HashSet<Long>(matchedUsers.size());\n+\t\tfor (UserTO user : matchedUsers) {\n+\t\t\tuserIds.add(user.getId());\n+\t\t}\n+\t\tassertTrue(userIds.contains(1L));\n+\n+\t\tsuper.setupRestTemplate(\"user2\", \"password\");\n+\n+\t\tmatchedUsers = userService.search(searchCondition);\n+\n+\t\tassertNotNull(matchedUsers);\n+\n+\t\tuserIds = new HashSet<Long>(matchedUsers.size());\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n-    }\n+\t\tfor (UserTO user : matchedUsers) {\n+\t\t\tuserIds.add(user.getId());\n+\t\t}\n+\t\tassertFalse(userIds.contains(1L));\n+\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n+\t}\n \n-    @Test\n-    public void checkFailedLogins() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"checkFailedLogin@syncope.apache.org\");\n+\t@Test\n+\tpublic void checkFailedLogins() {\n+\t\tUserTO userTO = UserTestITCase\n+\t\t\t\t.getSampleTO(\"checkFailedLogin@syncope.apache.org\");\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(7L);\n-        AttributeTO testAttributeTO = new AttributeTO();\n-        testAttributeTO.setSchema(\"testAttribute\");\n-        testAttributeTO.addValue(\"a value\");\n-        membershipTO.addAttribute(testAttributeTO);\n-        userTO.addMembership(membershipTO);\n+\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(7L);\n+\t\tAttributeTO testAttributeTO = new AttributeTO();\n+\t\ttestAttributeTO.setSchema(\"testAttribute\");\n+\t\ttestAttributeTO.addValue(\"a value\");\n+\t\tmembershipTO.addAttribute(testAttributeTO);\n+\t\tuserTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-        assertNotNull(userTO);\n+\t\tuserTO = userService.create(userTO);\n+\t\tassertNotNull(userTO);\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        UserTO readUserTO =\n-                restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+\t\tUserTO readUserTO = userService.read(userTO.getId());\n \n-        assertNotNull(readUserTO);\n-        assertNotNull(readUserTO.getFailedLogins());\n-        assertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n+\t\tassertNotNull(readUserTO);\n+\t\tassertNotNull(readUserTO.getFailedLogins());\n+\t\tassertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n \n-        // authentications failed ...\n+\t\t// authentications failed ...\n \n-        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n-        Throwable t = null;\n+\t\tThrowable t = null;\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-            assertNotNull(readUserTO);\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t\tassertNotNull(readUserTO);\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        assertNotNull(t);\n-        t = null;\n+\t\tassertNotNull(t);\n+\t\tt = null;\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-            assertNotNull(readUserTO);\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t\tassertNotNull(readUserTO);\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n \n-        readUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-        assertNotNull(readUserTO);\n-        assertNotNull(readUserTO.getFailedLogins());\n-        assertEquals(Integer.valueOf(2), readUserTO.getFailedLogins());\n+\t\treadUserTO = userService.read(userTO.getId());\n+\t\tassertNotNull(readUserTO);\n+\t\tassertNotNull(readUserTO.getFailedLogins());\n+\t\tassertEquals(Integer.valueOf(2), readUserTO.getFailedLogins());\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        readUserTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-        assertNotNull(readUserTO);\n-        assertNotNull(readUserTO.getFailedLogins());\n-        assertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n-    }\n+\t\treadUserTO = userService.read(userTO.getId());\n+\t\tassertNotNull(readUserTO);\n+\t\tassertNotNull(readUserTO.getFailedLogins());\n+\t\tassertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n+\t}\n \n-    @Test\n-    public void checkUserSuspension() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"checkSuspension@syncope.apache.org\");\n+\t@Test\n+\tpublic void checkUserSuspension() {\n+\t\tUserTO userTO = UserTestITCase\n+\t\t\t\t.getSampleTO(\"checkSuspension@syncope.apache.org\");\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(7L);\n-        AttributeTO testAttributeTO = new AttributeTO();\n-        testAttributeTO.setSchema(\"testAttribute\");\n-        testAttributeTO.addValue(\"a value\");\n-        membershipTO.addAttribute(testAttributeTO);\n-        userTO.addMembership(membershipTO);\n+\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(7L);\n+\t\tAttributeTO testAttributeTO = new AttributeTO();\n+\t\ttestAttributeTO.setSchema(\"testAttribute\");\n+\t\ttestAttributeTO.addValue(\"a value\");\n+\t\tmembershipTO.addAttribute(testAttributeTO);\n+\t\tuserTO.addMembership(membershipTO);\n \n-        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n-        assertNotNull(userTO);\n+\t\tuserTO = userService.create(userTO);\n+\t\tassertNotNull(userTO);\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+\t\tuserTO = userService.read(userTO.getId());\n \n-        assertNotNull(userTO);\n-        assertNotNull(userTO.getFailedLogins());\n-        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n+\t\tassertNotNull(userTO);\n+\t\tassertNotNull(userTO.getFailedLogins());\n+\t\tassertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n \n-        // authentications failed ...\n+\t\t// authentications failed ...\n \n-        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n-        Throwable t = null;\n+\t\tThrowable t = null;\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t\tfail();\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        assertNotNull(t);\n-        t = null;\n+\t\tassertNotNull(t);\n+\t\tt = null;\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        assertNotNull(t);\n-        t = null;\n+\t\tassertNotNull(t);\n+\t\tt = null;\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        assertNotNull(t);\n-        t = null;\n+\t\tassertNotNull(t);\n+\t\tt = null;\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+\t\tuserTO = userService.read(userTO.getId());\n \n-        assertNotNull(userTO);\n-        assertNotNull(userTO.getFailedLogins());\n-        assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n+\t\tassertNotNull(userTO);\n+\t\tassertNotNull(userTO.getFailedLogins());\n+\t\tassertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n \n-        // last authentication before suspension\n-        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+\t\t// last authentication before suspension\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        assertNotNull(t);\n-        t = null;\n+\t\tassertNotNull(t);\n+\t\tt = null;\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+\t\tuserTO = userService.read(userTO.getId());\n \n-        assertNotNull(userTO);\n-        assertNotNull(userTO.getFailedLogins());\n-        assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n-        assertEquals(\"suspended\", userTO.getStatus());\n+\t\tassertNotNull(userTO);\n+\t\tassertNotNull(userTO.getFailedLogins());\n+\t\tassertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n+\t\tassertEquals(\"suspended\", userTO.getStatus());\n \n-        // check for authentication\n+\t\t// check for authentication\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        try {\n-            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n-            assertNotNull(userTO);\n-        } catch (Exception e) {\n-            t = e;\n-        }\n+\t\ttry {\n+\t\t\tuserService.read(userTO.getId());\n+\t\t\tassertNotNull(userTO);\n+\t\t} catch (Exception e) {\n+\t\t\tt = e;\n+\t\t}\n \n-        assertNotNull(t);\n-        t = null;\n+\t\tassertNotNull(t);\n+\t\tt = null;\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n+\t\tuserTO = userService.reactivate(userTO.getId());\n \n-        assertNotNull(userTO);\n-        assertEquals(\"active\", userTO.getStatus());\n+\t\tassertNotNull(userTO);\n+\t\tassertEquals(\"active\", userTO.getStatus());\n \n-        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userTO.getId());\n+\t\tuserTO = userService.read(userTO.getId());\n \n-        assertNotNull(userTO);\n-        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n-    }\n+\t\tassertNotNull(userTO);\n+\t\tassertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n+\t}\n \n-    @Test\n-    public void issueSYNCOPE48() {\n-        // Parent role, able to create users with role 1\n-        RoleTO parentRole = new RoleTO();\n-        parentRole.setName(\"parentAdminRole\");\n-        parentRole.addEntitlement(\"USER_CREATE\");\n-        parentRole.addEntitlement(\"ROLE_1\");\n-        parentRole.setParent(1L);\n+\t@Test\n+\tpublic void issueSYNCOPE48() {\n+\t\t// Parent role, able to create users with role 1\n+\t\tRoleTO parentRole = new RoleTO();\n+\t\tparentRole.setName(\"parentAdminRole\");\n+\t\tparentRole.addEntitlement(\"USER_CREATE\");\n+\t\tparentRole.addEntitlement(\"ROLE_1\");\n+\t\tparentRole.setParent(1L);\n \n-        parentRole = restTemplate.postForObject(BASE_URL + \"role/create\", parentRole, RoleTO.class);\n-        assertNotNull(parentRole);\n+\t\tparentRole = roleService.create(parentRole);\n+\t\tassertNotNull(parentRole);\n \n-        // Child role, with no entitlements\n-        RoleTO childRole = new RoleTO();\n-        childRole.setName(\"childAdminRole\");\n-        childRole.setParent(parentRole.getId());\n+\t\t// Child role, with no entitlements\n+\t\tRoleTO childRole = new RoleTO();\n+\t\tchildRole.setName(\"childAdminRole\");\n+\t\tchildRole.setParent(parentRole.getId());\n \n-        childRole = restTemplate.postForObject(BASE_URL + \"role/create\", childRole, RoleTO.class);\n-        assertNotNull(childRole);\n+\t\tchildRole = roleService.create(childRole);\n+\t\tassertNotNull(childRole);\n \n-        // User with child role, created by admin\n-        UserTO role1Admin = UserTestITCase.getSampleTO(\"syncope48admin@apache.org\");\n-        role1Admin.setPassword(\"password\");\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(childRole.getId());\n-        role1Admin.addMembership(membershipTO);\n+\t\t// User with child role, created by admin\n+\t\tUserTO role1Admin = UserTestITCase\n+\t\t\t\t.getSampleTO(\"syncope48admin@apache.org\");\n+\t\trole1Admin.setPassword(\"password\");\n+\t\tMembershipTO membershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(childRole.getId());\n+\t\trole1Admin.addMembership(membershipTO);\n \n-        role1Admin = restTemplate.postForObject(BASE_URL + \"user/create\", role1Admin, UserTO.class);\n-        assertNotNull(role1Admin);\n+\t\trole1Admin = userService.create(role1Admin);\n+\t\tassertNotNull(role1Admin);\n \n-        super.setupRestTemplate(role1Admin.getUsername(), \"password\");\n+\t\tsuper.setupRestTemplate(role1Admin.getUsername(), \"password\");\n \n-        // User with role 1, created by user with child role created above\n-        UserTO role1User = UserTestITCase.getSampleTO(\"syncope48user@apache.org\");\n-        membershipTO = new MembershipTO();\n-        membershipTO.setRoleId(1L);\n-        role1User.addMembership(membershipTO);\n+\t\t// User with role 1, created by user with child role created above\n+\t\tUserTO role1User = UserTestITCase\n+\t\t\t\t.getSampleTO(\"syncope48user@apache.org\");\n+\t\tmembershipTO = new MembershipTO();\n+\t\tmembershipTO.setRoleId(1L);\n+\t\trole1User.addMembership(membershipTO);\n \n-        role1User = restTemplate.postForObject(BASE_URL + \"user/create\", role1User, UserTO.class);\n-        assertNotNull(role1User);\n+\t\trole1User = userService.create(role1User);\n+\t\tassertNotNull(role1User);\n \n-        // reset admin credentials for restTemplate\n-        super.resetRestTemplate();\n-    }\n+\t\t// reset admin credentials for restTemplate\n+\t\tsuper.resetRestTemplate();\n+\t}\n }"}]}