{"sha":"8755e9cd79704e979014c5eee567f7e16e970334","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg3NTVlOWNkNzk3MDRlOTc5MDE0YzVlZWU1NjdmN2UxNmU5NzAzMzQ=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-10-21T07:17:36Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-10-21T07:17:36Z"},"message":"SYNCOPE-1593: signing/encryption algs per WA SAML2 SP (#221)","tree":{"sha":"d4d7608b6a82a44f6be0786fac7170d388167b2a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d4d7608b6a82a44f6be0786fac7170d388167b2a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8755e9cd79704e979014c5eee567f7e16e970334","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfj+CQCRBK7hj4Ov3rIwAAdHIIAKllIbS0vek3ouGAY4hXSAZ4\nt7/tlkcny2I47Pohh4O+ym6S+AhTjY0Qz+r295GHWeJQXPpdCYzATkGwH7x/FkxQ\nRdb4/VwtxvO7akGVYa/dTI5SWRhEISLjY2Z/6UXGGgXV9BgZtfg3ersRxTRnyP01\nAncz38rhczTtY1vAE+Mkp3ZMC6V5LPcTlhZNFtzubesrAY0PB50UGqM1irv+m2X9\nuukeNUiSNj1oalneGa+C12IuXzELrosaZCptw/aneevtAehW/4gcEEc2oGQBfCRT\nKvUpRo8m8ksVXG5CX/JKrbSGIMk/FuFeUTSggh6lUyv8kMDoRF3umSa4wFB7CJ4=\n=mSXN\n-----END PGP SIGNATURE-----\n","payload":"tree d4d7608b6a82a44f6be0786fac7170d388167b2a\nparent 3f41a5972ea82cf61907e0705d1f128cc6155508\nauthor Misagh Moayyed <mm1844@gmail.com> 1603264656 +0400\ncommitter GitHub <noreply@github.com> 1603264656 +0330\n\nSYNCOPE-1593: signing/encryption algs per WA SAML2 SP (#221)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8755e9cd79704e979014c5eee567f7e16e970334","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8755e9cd79704e979014c5eee567f7e16e970334","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8755e9cd79704e979014c5eee567f7e16e970334/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"3f41a5972ea82cf61907e0705d1f128cc6155508","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3f41a5972ea82cf61907e0705d1f128cc6155508","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3f41a5972ea82cf61907e0705d1f128cc6155508"}],"stats":{"total":428,"additions":419,"deletions":9},"files":[{"sha":"7fac81371bbc15ae4032c75fbe76e7cb8e7ed7c6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/XmlSecAlgorithms.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8755e9cd79704e979014c5eee567f7e16e970334/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FXmlSecAlgorithms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8755e9cd79704e979014c5eee567f7e16e970334/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FXmlSecAlgorithms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FXmlSecAlgorithms.java?ref=8755e9cd79704e979014c5eee567f7e16e970334","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.lib;\n+\n+public enum XmlSecAlgorithms {\n+\n+    /**\n+     * Triple DES EDE (192 bit key) in CBC mode\n+     */\n+    TRIPLEDES(\"http://www.w3.org/2001/04/xmlenc#tripledes-cbc\"),\n+\n+    /**\n+     * AES 128 Cipher\n+     */\n+    AES_128(\"http://www.w3.org/2001/04/xmlenc#aes128-cbc\"),\n+\n+    /**\n+     * AES 256 Cipher\n+     */\n+    AES_256(\"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"),\n+\n+    /**\n+     * AES 192 Cipher\n+     */\n+    AES_192(\"http://www.w3.org/2001/04/xmlenc#aes192-cbc\"),\n+\n+    /**\n+     * AES 128 GCM Cipher\n+     */\n+    AES_128_GCM(\"http://www.w3.org/2009/xmlenc11#aes128-gcm\"),\n+\n+    /**\n+     * AES 192 GCM Cipher\n+     */\n+    AES_192_GCM(\"http://www.w3.org/2009/xmlenc11#aes192-gcm\"),\n+\n+    /**\n+     * AES 256 GCM Cipher\n+     */\n+    AES_256_GCM(\"http://www.w3.org/2009/xmlenc11#aes256-gcm\"),\n+\n+    /**\n+     * SEED 128 Cipher\n+     */\n+    SEED_128(\"http://www.w3.org/2007/05/xmldsig-more#seed128-cbc\"),\n+\n+    /**\n+     * CAMELLIA 128 Cipher\n+     */\n+    CAMELLIA_128(\"http://www.w3.org/2001/04/xmldsig-more#camellia128-cbc\"),\n+\n+    /**\n+     * CAMELLIA 192 Cipher\n+     */\n+    CAMELLIA_192(\"http://www.w3.org/2001/04/xmldsig-more#camellia192-cbc\"),\n+\n+    /**\n+     * CAMELLIA 256 Cipher\n+     */\n+    CAMELLIA_256(\"http://www.w3.org/2001/04/xmldsig-more#camellia256-cbc\"),\n+\n+    /**\n+     * RSA 1.5 Cipher\n+     */\n+    RSA_v1dot5(\"http://www.w3.org/2001/04/xmlenc#rsa-1_5\"),\n+\n+    /**\n+     * RSA OAEP Cipher\n+     */\n+    RSA_OAEP(\"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\"),\n+\n+    /**\n+     * RSA OAEP Cipher\n+     */\n+    RSA_OAEP_11(\"http://www.w3.org/2009/xmlenc11#rsa-oaep\"),\n+\n+    /**\n+     * DIFFIE_HELLMAN Cipher\n+     */\n+    DIFFIE_HELLMAN(\"http://www.w3.org/2001/04/xmlenc#dh\"),\n+\n+    /**\n+     * Triple DES EDE (192 bit key) in CBC mode KEYWRAP\n+     */\n+    TRIPLEDES_KeyWrap(\"http://www.w3.org/2001/04/xmlenc#kw-tripledes\"),\n+\n+    /**\n+     * AES 128 Cipher KeyWrap\n+     */\n+    AES_128_KeyWrap(\"http://www.w3.org/2001/04/xmlenc#kw-aes128\"),\n+\n+    /**\n+     * AES 256 Cipher KeyWrap\n+     */\n+    AES_256_KeyWrap(\"http://www.w3.org/2001/04/xmlenc#kw-aes256\"),\n+\n+    /**\n+     * AES 192 Cipher KeyWrap\n+     */\n+    AES_192_KeyWrap(\"http://www.w3.org/2001/04/xmlenc#kw-aes192\"),\n+\n+    /**\n+     * CAMELLIA 128 Cipher KeyWrap\n+     */\n+    CAMELLIA_128_KeyWrap(\"http://www.w3.org/2001/04/xmldsig-more#kw-camellia128\"),\n+\n+    /**\n+     * CAMELLIA 192 Cipher KeyWrap\n+     */\n+    CAMELLIA_192_KeyWrap(\"http://www.w3.org/2001/04/xmldsig-more#kw-camellia192\"),\n+\n+    /**\n+     * CAMELLIA 256 Cipher KeyWrap\n+     */\n+    CAMELLIA_256_KeyWrap(\"http://www.w3.org/2001/04/xmldsig-more#kw-camellia256\"),\n+\n+    /**\n+     * SEED 128 Cipher KeyWrap\n+     */\n+    SEED_128_KeyWrap(\"http://www.w3.org/2007/05/xmldsig-more#kw-seed128\"),\n+\n+    /**\n+     * SHA1 Cipher\n+     */\n+    SHA1(\"http://www.w3.org/2000/09/xmldsig#sha1\"),\n+\n+    /**\n+     * SHA256 Cipher\n+     */\n+    SHA256(\"http://www.w3.org/2001/04/xmlenc#sha256\"),\n+\n+    /**\n+     * SHA512 Cipher\n+     */\n+    SHA512(\"http://www.w3.org/2001/04/xmlenc#sha512\"),\n+\n+    /**\n+     * RIPEMD Cipher\n+     */\n+    RIPEMD_160(\"http://www.w3.org/2001/04/xmlenc#ripemd160\");\n+\n+    private final String algorithm;\n+\n+    XmlSecAlgorithms(final String uri) {\n+        this.algorithm = uri;\n+    }\n+\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+}"},{"sha":"5638b113457629f585a5cff70ebb8d08efa78386","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/SAML2SPTO.java","status":"modified","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8755e9cd79704e979014c5eee567f7e16e970334/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8755e9cd79704e979014c5eee567f7e16e970334/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java?ref=8755e9cd79704e979014c5eee567f7e16e970334","patch":"@@ -23,8 +23,12 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.XmlSecAlgorithms;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n @Schema(allOf = { ClientAppTO.class })\n public class SAML2SPTO extends ClientAppTO {\n \n@@ -56,6 +60,18 @@ public class SAML2SPTO extends ClientAppTO {\n \n     private String serviceProviderNameIdQualifier;\n \n+    private List<XmlSecAlgorithms> signingSignatureAlgorithms = new ArrayList<>();\n+\n+    private List<XmlSecAlgorithms> signingSignatureReferenceDigestMethods = new ArrayList<>();\n+\n+    private List<XmlSecAlgorithms> encryptionDataAlgorithms = new ArrayList<>();\n+\n+    private List<XmlSecAlgorithms> encryptionKeyAlgorithms = new ArrayList<>();\n+    \n+    private List<XmlSecAlgorithms> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n+\n+    private List<XmlSecAlgorithms> encryptionBlackListedAlgorithms = new ArrayList<>();\n+\n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n     @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.client.SAML2SPTO\")\n@@ -168,6 +184,54 @@ public void setServiceProviderNameIdQualifier(final String serviceProviderNameId\n         this.serviceProviderNameIdQualifier = serviceProviderNameIdQualifier;\n     }\n \n+    public List<XmlSecAlgorithms> getSigningSignatureAlgorithms() {\n+        return signingSignatureAlgorithms;\n+    }\n+\n+    public List<XmlSecAlgorithms> getSigningSignatureReferenceDigestMethods() {\n+        return signingSignatureReferenceDigestMethods;\n+    }\n+\n+    public List<XmlSecAlgorithms> getEncryptionDataAlgorithms() {\n+        return encryptionDataAlgorithms;\n+    }\n+\n+    public List<XmlSecAlgorithms> getEncryptionKeyAlgorithms() {\n+        return encryptionKeyAlgorithms;\n+    }\n+\n+    public void setSigningSignatureAlgorithms(final List<XmlSecAlgorithms> signingSignatureAlgorithms) {\n+        this.signingSignatureAlgorithms = signingSignatureAlgorithms;\n+    }\n+\n+    public void setSigningSignatureReferenceDigestMethods(final List<XmlSecAlgorithms> algs) {\n+        this.signingSignatureReferenceDigestMethods = algs;\n+    }\n+\n+    public void setEncryptionDataAlgorithms(final List<XmlSecAlgorithms> encryptionDataAlgorithms) {\n+        this.encryptionDataAlgorithms = encryptionDataAlgorithms;\n+    }\n+\n+    public void setEncryptionKeyAlgorithms(final List<XmlSecAlgorithms> encryptionKeyAlgorithms) {\n+        this.encryptionKeyAlgorithms = encryptionKeyAlgorithms;\n+    }\n+\n+    public List<XmlSecAlgorithms> getSigningSignatureBlackListedAlgorithms() {\n+        return signingSignatureBlackListedAlgorithms;\n+    }\n+\n+    public void setSigningSignatureBlackListedAlgorithms(final List<XmlSecAlgorithms> algs) {\n+        this.signingSignatureBlackListedAlgorithms = algs;\n+    }\n+\n+    public List<XmlSecAlgorithms> getEncryptionBlackListedAlgorithms() {\n+        return encryptionBlackListedAlgorithms;\n+    }\n+\n+    public void setEncryptionBlackListedAlgorithms(final List<XmlSecAlgorithms> algs) {\n+        this.encryptionBlackListedAlgorithms = algs;\n+    }\n+\n     @Override\n     public boolean equals(final Object obj) {\n         if (obj == null) {\n@@ -195,6 +259,12 @@ public boolean equals(final Object obj) {\n                 .append(this.nameIdQualifier, rhs.nameIdQualifier)\n                 .append(this.assertionAudiences, rhs.assertionAudiences)\n                 .append(this.serviceProviderNameIdQualifier, rhs.serviceProviderNameIdQualifier)\n+                .append(this.signingSignatureAlgorithms, rhs.signingSignatureAlgorithms)\n+                .append(this.signingSignatureReferenceDigestMethods, rhs.signingSignatureReferenceDigestMethods)\n+                .append(this.encryptionDataAlgorithms, rhs.encryptionDataAlgorithms)\n+                .append(this.encryptionKeyAlgorithms, rhs.encryptionKeyAlgorithms)\n+                .append(this.encryptionBlackListedAlgorithms, rhs.encryptionBlackListedAlgorithms)\n+                .append(this.signingSignatureBlackListedAlgorithms, rhs.signingSignatureBlackListedAlgorithms)\n                 .isEquals();\n     }\n \n@@ -215,6 +285,12 @@ public int hashCode() {\n                 .append(nameIdQualifier)\n                 .append(assertionAudiences)\n                 .append(serviceProviderNameIdQualifier)\n+                .append(signingSignatureAlgorithms)\n+                .append(signingSignatureReferenceDigestMethods)\n+                .append(encryptionDataAlgorithms)\n+                .append(encryptionKeyAlgorithms)\n+                .append(signingSignatureBlackListedAlgorithms)\n+                .append(encryptionBlackListedAlgorithms)\n                 .toHashCode();\n     }\n }"},{"sha":"7bb28aff76f3435bb116e578223ec700cd751228","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SP.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java?ref=8755e9cd79704e979014c5eee567f7e16e970334","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n+import org.apache.syncope.common.lib.XmlSecAlgorithms;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n \n+import java.util.List;\n+\n public interface SAML2SP extends ClientApp {\n \n     String getEntityId();\n@@ -73,4 +76,28 @@ public interface SAML2SP extends ClientApp {\n     void setServiceProviderNameIdQualifier(String location);\n \n     String getServiceProviderNameIdQualifier();\n+\n+    List<XmlSecAlgorithms> getSigningSignatureAlgorithms();\n+\n+    List<XmlSecAlgorithms> getSigningSignatureReferenceDigestMethods();\n+\n+    List<XmlSecAlgorithms> getEncryptionDataAlgorithms();\n+\n+    List<XmlSecAlgorithms> getEncryptionKeyAlgorithms();\n+\n+    void setSigningSignatureAlgorithms(List<XmlSecAlgorithms> algorithms);\n+\n+    void setSigningSignatureReferenceDigestMethods(List<XmlSecAlgorithms> methods);\n+\n+    void setEncryptionDataAlgorithms(List<XmlSecAlgorithms> algorithms);\n+\n+    void setEncryptionKeyAlgorithms(List<XmlSecAlgorithms> algorithms);\n+\n+    List<XmlSecAlgorithms> getSigningSignatureBlackListedAlgorithms();\n+\n+    List<XmlSecAlgorithms> getEncryptionBlackListedAlgorithms();\n+\n+    void setSigningSignatureBlackListedAlgorithms(List<XmlSecAlgorithms> algorithms);\n+\n+    void setEncryptionBlackListedAlgorithms(List<XmlSecAlgorithms> algorithms);\n }"},{"sha":"c13167d730ee0f412b70e66a3781c8f5093232e1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SP.java","status":"modified","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java?ref=8755e9cd79704e979014c5eee567f7e16e970334","patch":"@@ -18,11 +18,19 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.common.lib.XmlSecAlgorithms;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n @Entity\n @Table(name = JPASAML2SP.TABLE)\n@@ -62,6 +70,48 @@ public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n     @Column(name = \"spNameIdQualifier\")\n     private String serviceProviderNameIdQualifier;\n \n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"SAML2SP_SigningSignatureAlgs\",\n+        joinColumns =\n+        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithms> signingSignatureAlgorithms = new ArrayList<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"SAML2SP_SigningSignatureRefDigestAlgs\",\n+        joinColumns =\n+        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithms> signingSignatureReferenceDigestMethods = new ArrayList<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"SAML2SP_EncryptionDataAlgs\",\n+        joinColumns =\n+        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithms> encryptionDataAlgorithms = new ArrayList<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"SAML2SP_EncryptionKeyAlgs\",\n+        joinColumns =\n+        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithms> encryptionKeyAlgorithms = new ArrayList<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"SAML2SP_BlacklistedSigningAlgs\",\n+        joinColumns =\n+        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithms> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"SAML2SP_BlacklistedEncryptionAlgs\",\n+        joinColumns =\n+        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithms> encryptionBlackListedAlgorithms = new ArrayList<>();\n+\n     @Override\n     public String getEntityId() {\n         return entityId;\n@@ -192,4 +242,63 @@ public void setServiceProviderNameIdQualifier(final String serviceProviderNameId\n         this.serviceProviderNameIdQualifier = serviceProviderNameIdQualifier;\n     }\n \n+    @Override\n+    public List<XmlSecAlgorithms> getSigningSignatureAlgorithms() {\n+        return signingSignatureAlgorithms;\n+    }\n+\n+    @Override\n+    public void setSigningSignatureAlgorithms(final List<XmlSecAlgorithms> signingSignatureAlgorithms) {\n+        this.signingSignatureAlgorithms = signingSignatureAlgorithms;\n+    }\n+\n+    @Override\n+    public List<XmlSecAlgorithms> getSigningSignatureReferenceDigestMethods() {\n+        return signingSignatureReferenceDigestMethods;\n+    }\n+\n+    @Override\n+    public void setSigningSignatureReferenceDigestMethods(final List<XmlSecAlgorithms> algorithms) {\n+        this.signingSignatureReferenceDigestMethods = algorithms;\n+    }\n+\n+    @Override\n+    public List<XmlSecAlgorithms> getEncryptionDataAlgorithms() {\n+        return encryptionDataAlgorithms;\n+    }\n+\n+    @Override\n+    public void setEncryptionDataAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n+        this.encryptionDataAlgorithms = algorithms;\n+    }\n+\n+    @Override\n+    public List<XmlSecAlgorithms> getEncryptionKeyAlgorithms() {\n+        return encryptionKeyAlgorithms;\n+    }\n+\n+    @Override\n+    public void setEncryptionKeyAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n+        this.encryptionKeyAlgorithms = algorithms;\n+    }\n+\n+    @Override\n+    public List<XmlSecAlgorithms> getSigningSignatureBlackListedAlgorithms() {\n+        return signingSignatureBlackListedAlgorithms;\n+    }\n+\n+    @Override\n+    public void setSigningSignatureBlackListedAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n+        this.signingSignatureBlackListedAlgorithms = algorithms;\n+    }\n+\n+    @Override\n+    public List<XmlSecAlgorithms> getEncryptionBlackListedAlgorithms() {\n+        return encryptionBlackListedAlgorithms;\n+    }\n+\n+    @Override\n+    public void setEncryptionBlackListedAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n+        this.encryptionBlackListedAlgorithms = algorithms;\n+    }\n }"},{"sha":"6df8cea68b4a7e9097faf9e854870493e5dd5bc1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"modified","additions":23,"deletions":9,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=8755e9cd79704e979014c5eee567f7e16e970334","patch":"@@ -18,19 +18,24 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-\n-import java.util.UUID;\n+import org.apache.openjpa.jdbc.kernel.exps.Lit;\n+import org.apache.syncope.common.lib.XmlSecAlgorithms;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.common.lib.types.SAML2SPNameId;\n-import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n @Transactional(\"Master\")\n public class SAML2SPTest extends AbstractClientAppTest {\n@@ -50,6 +55,10 @@ public void find() {\n         sp.setRequiredNameIdFormat(SAML2SPNameId.EMAIL_ADDRESS);\n         sp.setEncryptionOptional(true);\n         sp.setEncryptAssertions(true);\n+        sp.setEncryptionDataAlgorithms(List.of(XmlSecAlgorithms.AES_128_GCM));\n+        sp.setEncryptionKeyAlgorithms(List.of(XmlSecAlgorithms.RSA_OAEP_11));\n+        sp.setSigningSignatureReferenceDigestMethods(List.of(XmlSecAlgorithms.SHA1));\n+        sp.setSigningSignatureAlgorithms(List.of(XmlSecAlgorithms.SHA256, XmlSecAlgorithms.SHA512));\n \n         AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n         sp.setAccessPolicy(accessPolicy);\n@@ -74,6 +83,11 @@ public void find() {\n         sp = saml2spDAO.findByClientAppId(sp.getClientAppId());\n         assertNotNull(sp);\n \n+        assertFalse(sp.getSigningSignatureAlgorithms().isEmpty());\n+        assertFalse(sp.getSigningSignatureReferenceDigestMethods().isEmpty());\n+        assertFalse(sp.getEncryptionDataAlgorithms().isEmpty());\n+        assertFalse(sp.getEncryptionKeyAlgorithms().isEmpty());\n+\n         saml2spDAO.deleteByEntityId(sp.getEntityId());\n         assertNull(saml2spDAO.findByName(sp.getName()));\n     }"},{"sha":"71f60fc0c06d6b7b0c3b19f1d5f0ae3b6742fabc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8755e9cd79704e979014c5eee567f7e16e970334/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=8755e9cd79704e979014c5eee567f7e16e970334","patch":"@@ -118,6 +118,14 @@ private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n         clientApp.setAssertionAudiences(clientAppTO.getAssertionAudiences());\n         clientApp.setServiceProviderNameIdQualifier(clientAppTO.getServiceProviderNameIdQualifier());\n \n+        clientApp.setSigningSignatureAlgorithms(clientAppTO.getSigningSignatureAlgorithms());\n+        clientApp.setSigningSignatureReferenceDigestMethods(clientAppTO.getSigningSignatureReferenceDigestMethods());\n+        clientApp.setEncryptionKeyAlgorithms(clientAppTO.getEncryptionKeyAlgorithms());\n+        clientApp.setEncryptionDataAlgorithms(clientAppTO.getEncryptionDataAlgorithms());\n+\n+        clientApp.setSigningSignatureBlackListedAlgorithms(clientAppTO.getSigningSignatureBlackListedAlgorithms());\n+        clientApp.setEncryptionBlackListedAlgorithms(clientAppTO.getEncryptionBlackListedAlgorithms());\n+\n         if (clientAppTO.getAuthPolicy() == null) {\n             clientApp.setAuthPolicy(null);\n         } else {\n@@ -182,6 +190,14 @@ private static SAML2SPTO getClientAppTO(final SAML2SP clientApp) {\n         clientAppTO.setAssertionAudiences(clientApp.getAssertionAudiences());\n         clientAppTO.setServiceProviderNameIdQualifier(clientApp.getServiceProviderNameIdQualifier());\n \n+        clientAppTO.setSigningSignatureAlgorithms(clientApp.getSigningSignatureAlgorithms());\n+        clientAppTO.setSigningSignatureReferenceDigestMethods(clientApp.getSigningSignatureReferenceDigestMethods());\n+        clientAppTO.setEncryptionKeyAlgorithms(clientApp.getEncryptionKeyAlgorithms());\n+        clientAppTO.setEncryptionDataAlgorithms(clientApp.getEncryptionDataAlgorithms());\n+\n+        clientAppTO.setSigningSignatureBlackListedAlgorithms(clientApp.getSigningSignatureBlackListedAlgorithms());\n+        clientAppTO.setEncryptionBlackListedAlgorithms(clientApp.getEncryptionBlackListedAlgorithms());\n+\n         clientAppTO.setAuthPolicy(clientApp.getAuthPolicy() == null\n                 ? null : clientApp.getAuthPolicy().getKey());\n         clientAppTO.setAccessPolicy(clientApp.getAccessPolicy() == null"}]}