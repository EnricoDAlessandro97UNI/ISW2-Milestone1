{"sha":"a9a535fe368a2df1654e18d682abc764cdf4d1a7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE5YTUzNWZlMzY4YTJkZjE2NTRlMThkNjgyYWJjNzY0Y2RmNGQxYTc=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-28T16:18:34Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-01-28T16:18:34Z"},"message":"SYNCOPE-231 Removing explicit Exception handling where ExceptionMapper should work\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1439474 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b9954d6303e58dc3b2b4648c30a191ea146719b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9b9954d6303e58dc3b2b4648c30a191ea146719b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a9a535fe368a2df1654e18d682abc764cdf4d1a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9a535fe368a2df1654e18d682abc764cdf4d1a7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9a535fe368a2df1654e18d682abc764cdf4d1a7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9a535fe368a2df1654e18d682abc764cdf4d1a7/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86"}],"stats":{"total":605,"additions":168,"deletions":437},"files":[{"sha":"3002a727f15009f128dd35294f7a7865001ee687","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":4,"deletions":17,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -24,7 +24,6 @@\n import java.util.List;\r\n import java.util.Set;\r\n \r\n-import javax.ws.rs.NotFoundException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.StreamingOutput;\r\n import javax.ws.rs.core.UriInfo;\r\n@@ -35,7 +34,6 @@\n import org.apache.syncope.common.to.MailTemplateTO;\r\n import org.apache.syncope.common.to.ValidatorTO;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n import org.apache.syncope.core.rest.controller.ConfigurationController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -66,11 +64,7 @@ public void write(final OutputStream os) throws IOException {\n \r\n     @Override\r\n     public void delete(final String key) {\r\n-        try {\r\n-            configurationController.delete(key);\r\n-        } catch (MissingConfKeyException e) {\r\n-            throw new NotFoundException(e);\r\n-        }\r\n+        configurationController.delete(key);\r\n     }\r\n \r\n     @Override\r\n@@ -90,20 +84,13 @@ public List<ConfigurationTO> list() {\n \r\n     @Override\r\n     public ConfigurationTO read(final String key) {\r\n-        try {\r\n-            return configurationController.read(null, key);\r\n-        } catch (MissingConfKeyException e) {\r\n-            throw new NotFoundException(e);\r\n-        }\r\n+        return configurationController.read(null, key);\r\n+\r\n     }\r\n \r\n     @Override\r\n     public void update(final String key, final ConfigurationTO configurationTO) {\r\n-        try {\r\n-            configurationController.update(null, configurationTO);\r\n-        } catch (MissingConfKeyException e) {\r\n-            throw new NotFoundException(e);\r\n-        }\r\n+        configurationController.update(null, configurationTO);\r\n     }\r\n \r\n     @Override\r"},{"sha":"3f78c78610cec5cd9ea97bd811edff084f5550f0","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":19,"deletions":67,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n-import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n@@ -32,9 +31,6 @@\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.types.ConnConfProperty;\r\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n-import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n import org.apache.syncope.core.rest.controller.ConnInstanceController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -49,62 +45,38 @@ public class ConnectorServiceImpl implements ConnectorService, ContextAware {\n \r\n     @Override\r\n     public Response create(final ConnInstanceTO connectorTO) {\r\n-        try {\r\n-            ConnInstanceTO connector = connectorController.create(new DummyHTTPServletResponse(), connectorTO);\r\n-            URI location = uriInfo.getAbsolutePathBuilder().path(connector.getId() + \"\").build();\r\n-            return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connector.getId()).build();\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        ConnInstanceTO connector = connectorController.create(new DummyHTTPServletResponse(), connectorTO);\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(connector.getId() + \"\").build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connector.getId()).build();\r\n     }\r\n \r\n     @Override\r\n     public void delete(final Long connectorId) {\r\n-        try {\r\n-            connectorController.delete(connectorId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        connectorController.delete(connectorId);\r\n     }\r\n \r\n     @Override\r\n     public List<ConnBundleTO> getBundles(final String lang) {\r\n-        try {\r\n-            return connectorController.getBundles(lang);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        } catch (MissingConfKeyException e) {\r\n-            throw new BadRequestException(e);\r\n-        }\r\n+        return connectorController.getBundles(lang);\r\n     }\r\n \r\n     @Override\r\n     public List<ConnConfProperty> getConfigurationProperties(final Long connectorId) {\r\n-        try {\r\n-            return connectorController.getConfigurationProperties(connectorId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return connectorController.getConfigurationProperties(connectorId);\r\n     }\r\n \r\n     @Override\r\n     public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO,\r\n             final boolean showall) {\r\n-        try {\r\n-            List<String> schemaNames = connectorController.getSchemaNames(new DummyHTTPServletResponse(), connectorTO,\r\n-                    showall);\r\n-            List<SchemaTO> schemas = new ArrayList<SchemaTO>();\r\n-            for (String name : schemaNames) {\r\n-                SchemaTO schemaTO = new SchemaTO();\r\n-                schemaTO.setName(name);\r\n-                schemas.add(schemaTO);\r\n-            }\r\n-            return schemas;\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n+        List<String> schemaNames = connectorController.getSchemaNames(new DummyHTTPServletResponse(), connectorTO,\r\n+                showall);\r\n+        List<SchemaTO> schemas = new ArrayList<SchemaTO>();\r\n+        for (String name : schemaNames) {\r\n+            SchemaTO schemaTO = new SchemaTO();\r\n+            schemaTO.setName(name);\r\n+            schemas.add(schemaTO);\r\n         }\r\n+        return schemas;\r\n     }\r\n \r\n     @Override\r\n@@ -114,43 +86,23 @@ public List<ConnInstanceTO> list(final String lang) {\n \r\n     @Override\r\n     public ConnInstanceTO read(final Long connectorId) {\r\n-        try {\r\n-            return connectorController.read(connectorId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return connectorController.read(connectorId);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO readConnectorBean(final String resourceName) {\r\n-        try {\r\n-            return connectorController.readConnectorBean(resourceName);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return connectorController.readConnectorBean(resourceName);\r\n     }\r\n \r\n     @Override\r\n     public void update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n-        try {\r\n-            connectorController.update(connectorTO);\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        connectorController.update(connectorTO);\r\n     }\r\n \r\n     @Override\r\n     public boolean validate(final ConnInstanceTO connectorTO) {\r\n-        try {\r\n-            return (Boolean) connectorController.check(new DummyHTTPServletResponse(), connectorTO).getModel().values()\r\n-                    .iterator().next();\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return (Boolean) connectorController.check(new DummyHTTPServletResponse(), connectorTO).getModel().values()\r\n+                .iterator().next();\r\n     }\r\n \r\n     @Override\r"},{"sha":"01bfb96d9123bc359c72cdd35ca2962cb549e5c6","filename":"core/src/main/java/org/apache/syncope/core/services/ContextAware.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -21,6 +21,9 @@\n import javax.ws.rs.core.Context;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n+/**\r\n+ * While @Context can also be set on fields this variant is needed to make it compatible with spring proxies\r\n+ */\r\n public interface ContextAware {\r\n \r\n     @Context\r"},{"sha":"89b1aa643d5011875f5d49f0216999252c561d35","filename":"core/src/main/java/org/apache/syncope/core/services/LoggerServiceImpl.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FLoggerServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -88,11 +88,7 @@ public void update(final LoggerType type, final String name, final LoggerTO logg\n     public void delete(final LoggerType type, final String name) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                try {\r\n-                    loggerController.deleteLog(name);\r\n-                } catch (org.apache.syncope.core.persistence.dao.NotFoundException e) {\r\n-                    throw new NotFoundException(e);\r\n-                }\r\n+                loggerController.deleteLog(name);\r\n                 break;\r\n             case AUDIT:\r\n                 try {\r"},{"sha":"0c1ffa4f0cb0321da145327b23116941770d2358","filename":"core/src/main/java/org/apache/syncope/core/services/NotificationServiceImpl.java","status":"modified","additions":7,"deletions":25,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FNotificationServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -26,7 +26,6 @@\n \n import org.apache.syncope.common.services.NotificationService;\n import org.apache.syncope.common.to.NotificationTO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.rest.controller.NotificationController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -41,22 +40,14 @@ public class NotificationServiceImpl implements NotificationService, ContextAwar\n \n     @Override\n     public Response create(final NotificationTO notificationTO) {\n-        try {\n-            NotificationTO createdNotificationTO = notificationController.createInternal(notificationTO);\n-            URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdNotificationTO.getId()).build();\n-            return Response.created(location).build();\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        NotificationTO createdNotificationTO = notificationController.createInternal(notificationTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdNotificationTO.getId()).build();\n+        return Response.created(location).build();\n     }\n \n     @Override\n     public NotificationTO read(final Long notificationId) {\n-        try {\n-            return notificationController.read(notificationId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        return notificationController.read(notificationId);\n     }\n \n     @Override\n@@ -65,22 +56,13 @@ public List<NotificationTO> list() {\n     }\n \n     @Override\n-    public NotificationTO update(final Long notificationId,\n-            final NotificationTO notificationTO) {\n-        try {\n-            return notificationController.update(notificationTO);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+    public NotificationTO update(final Long notificationId, final NotificationTO notificationTO) {\n+        return notificationController.update(notificationTO);\n     }\n \n     @Override\n     public NotificationTO delete(final Long notificationId) {\n-        try {\n-            return notificationController.delete(notificationId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        return notificationController.delete(notificationId);\n     }\n \n     @Override"},{"sha":"1d017204aaf0260870f6ab57a9ff637c09858060","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":35,"deletions":52,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.to.PolicyTO;\r\n import org.apache.syncope.common.to.SyncPolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n import org.apache.syncope.core.rest.controller.PolicyController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -70,11 +69,7 @@ public <T extends PolicyTO> Response create(final PolicyType type, final T polic\n \r\n     @Override\r\n     public void delete(final PolicyType type, final Long policyId) {\r\n-        try {\r\n-            policyController.delete(policyId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        policyController.delete(policyId);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -86,62 +81,50 @@ public <T extends PolicyTO> List<T> list(final PolicyType type) {\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n-        try {\r\n-            return (T) policyController.read(policyId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return (T) policyController.read(policyId);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n-        try {\r\n-            switch (type) {\r\n-                case ACCOUNT:\r\n-                case GLOBAL_ACCOUNT:\r\n-                    return (T) policyController.getGlobalAccountPolicy();\r\n-\r\n-                case PASSWORD:\r\n-                case GLOBAL_PASSWORD:\r\n-                    return (T) policyController.getGlobalPasswordPolicy();\r\n-\r\n-                case SYNC:\r\n-                case GLOBAL_SYNC:\r\n-                    return (T) policyController.getGlobalSyncPolicy();\r\n-\r\n-                default:\r\n-                    throw new BadRequestException();\r\n-            }\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n+        switch (type) {\r\n+            case ACCOUNT:\r\n+            case GLOBAL_ACCOUNT:\r\n+                return (T) policyController.getGlobalAccountPolicy();\r\n+\r\n+            case PASSWORD:\r\n+            case GLOBAL_PASSWORD:\r\n+                return (T) policyController.getGlobalPasswordPolicy();\r\n+\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                return (T) policyController.getGlobalSyncPolicy();\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n         }\r\n     }\r\n \r\n     @Override\r\n     public <T extends PolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n-        try {\r\n-            switch (type) {\r\n-                case ACCOUNT:\r\n-                case GLOBAL_ACCOUNT:\r\n-                    policyController.update((AccountPolicyTO) policyTO);\r\n-                    break;\r\n-\r\n-                case PASSWORD:\r\n-                case GLOBAL_PASSWORD:\r\n-                    policyController.update((PasswordPolicyTO) policyTO);\r\n-                    break;\r\n-\r\n-                case SYNC:\r\n-                case GLOBAL_SYNC:\r\n-                    policyController.update((SyncPolicyTO) policyTO);\r\n-                    break;\r\n-\r\n-                default:\r\n-                    break;\r\n-            }\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n+        switch (type) {\r\n+            case ACCOUNT:\r\n+            case GLOBAL_ACCOUNT:\r\n+                policyController.update((AccountPolicyTO) policyTO);\r\n+                break;\r\n+\r\n+            case PASSWORD:\r\n+            case GLOBAL_PASSWORD:\r\n+                policyController.update((PasswordPolicyTO) policyTO);\r\n+                break;\r\n+\r\n+            case SYNC:\r\n+            case GLOBAL_SYNC:\r\n+                policyController.update((SyncPolicyTO) policyTO);\r\n+                break;\r\n+\r\n+            default:\r\n+                break;\r\n         }\r\n     }\r\n \r"},{"sha":"812500c192659169d7b6a7edf7eac0367aaaf503","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":17,"deletions":51,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -28,43 +28,36 @@\n import javax.ws.rs.core.StreamingOutput;\n import javax.ws.rs.core.UriInfo;\n \n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.rest.controller.ReportController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportServiceImpl implements ReportService, ContextAware {\n-\n     @Autowired\n-    private ReportController reportController;\n-\n+    ReportController reportController;\n+    \n     @Autowired\n     private ReportDAO reportDAO;\n-\n+    \n     private UriInfo uriInfo;\n \n     @Override\n     public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = reportController.createInternal(reportTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdReportTO.getId()).build();\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId()).build();\n+        return Response.created(location).build();\n     }\n \n     @Override\n     public void update(final Long reportId, final ReportTO reportTO) {\n-        try {\n-            reportController.update(reportTO);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        reportController.update(reportTO);\n     }\n \n     @Override\n@@ -94,65 +87,38 @@ public Set<String> getReportletConfClasses() {\n \n     @Override\n     public ReportTO read(final Long reportId) {\n-        try {\n-            return reportController.read(reportId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        return reportController.read(reportId);\n     }\n \n     @Override\n     public ReportExecTO readExecution(final Long executionId) {\n-        try {\n-            return reportController.readExecution(executionId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        return reportController.readExecution(executionId);\n     }\n \n     @Override\n     public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n-        final ReportExecExportFormat format = (fmt == null)\n-                ? ReportExecExportFormat.XML\n-                : fmt;\n-        try {\n-            final ReportExec reportExec = reportController.getAndCheckReportExecInternal(executionId);\n-            return Response.ok(new StreamingOutput() {\n-                @Override\n-                public void write(final OutputStream os) throws IOException {\n-                    reportController.exportExecutionResultInternal(os, reportExec, format);\n-                }\n-            }).build();\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n+        final ReportExec reportExec = reportController.getAndCheckReportExecInternal(executionId);\n+        return Response.ok(new StreamingOutput() {\n+            public void write(final OutputStream os) throws IOException {\n+                reportController.exportExecutionResultInternal(os, reportExec, format);\n+            }\n+        }).build();\n     }\n \n     @Override\n     public ReportExecTO execute(final Long reportId) {\n-        try {\n-            return reportController.execute(reportId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        return reportController.execute(reportId);\n     }\n \n     @Override\n     public void delete(final Long reportId) {\n-        try {\n-            reportController.delete(reportId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        reportController.delete(reportId);\n     }\n \n     @Override\n     public void deleteExecution(final Long executionId) {\n-        try {\n-            reportController.deleteExecution(executionId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+        reportController.deleteExecution(executionId);\n     }\n \n     @Override"},{"sha":"5897589a9bc9bf049ba4c27ea5384ace3e87fa85","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":11,"deletions":54,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -22,7 +22,6 @@\n import java.util.List;\r\n import java.util.Set;\r\n \r\n-import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n@@ -33,8 +32,6 @@\n import org.apache.syncope.common.to.ResourceTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n import org.apache.syncope.core.rest.controller.ResourceController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -49,46 +46,24 @@ public class ResourceServiceImpl implements ResourceService, ContextAware {\n \r\n     @Override\r\n     public Response create(final ResourceTO resourceTO) {\r\n-        try {\r\n-            ResourceTO resource = resourceController.create(new DummyHTTPServletResponse(), resourceTO);\r\n-            URI location = uriInfo.getAbsolutePathBuilder().path(resource.getName()).build();\r\n-            return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, resource.getName()).build();\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        ResourceTO resource = resourceController.create(new DummyHTTPServletResponse(), resourceTO);\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(resource.getName()).build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, resource.getName()).build();\r\n     }\r\n \r\n     @Override\r\n     public void update(final String resourceName, final ResourceTO resourceTO) {\r\n-        try {\r\n-            resourceController.update(resourceTO);\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        resourceController.update(resourceTO);\r\n     }\r\n \r\n     @Override\r\n     public void delete(final String resourceName) {\r\n-        try {\r\n-            resourceController.delete(resourceName);\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        resourceController.delete(resourceName);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO read(final String resourceName) {\r\n-        try {\r\n-            return resourceController.read(resourceName);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return resourceController.read(resourceName);\r\n     }\r\n \r\n     @Override\r\n@@ -101,45 +76,27 @@ public Set<PropagationActionClassTO> getPropagationActionsClasses() {\n \r\n     @Override\r\n     public List<ResourceTO> list() {\r\n-        try {\r\n-            return resourceController.list(null);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return resourceController.list(null);\r\n     }\r\n \r\n     @Override\r\n     public List<ResourceTO> list(final Long connInstanceId) {\r\n-        try {\r\n-            return resourceController.list(connInstanceId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return resourceController.list(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n     public ConnObjectTO getConnector(final String resourceName, final AttributableType type, final String objectId) {\r\n-        try {\r\n-            return resourceController.getObject(resourceName, type, objectId);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return resourceController.getObject(resourceName, type, objectId);\r\n     }\r\n \r\n     @Override\r\n     public boolean check(final ResourceTO resourceTO) {\r\n-        try {\r\n-            return (Boolean) resourceController.check(new DummyHTTPServletResponse(), resourceTO).getModel().values()\r\n+        return (Boolean) resourceController.check(new DummyHTTPServletResponse(), resourceTO).getModel().values()\r\n                     .iterator().next();\r\n-        } catch (SyncopeClientCompositeErrorException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n     }\r\n \r\n     @Override\r\n-    public void setUriInfo(UriInfo ui) {\r\n+    public void setUriInfo(final UriInfo ui) {\r\n         this.uriInfo = ui;\r\n     }\r\n \r"},{"sha":"bbb82b88c99bcd7a2ed6781d70f1a53fe6a6db92","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":13,"deletions":81,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -21,7 +21,6 @@\n import java.net.URI;\r\n import java.util.List;\r\n \r\n-import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.ServiceUnavailableException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n@@ -31,12 +30,7 @@\n import org.apache.syncope.common.search.NodeCond;\r\n import org.apache.syncope.common.services.RoleService;\r\n import org.apache.syncope.common.to.RoleTO;\r\n-import org.apache.syncope.core.persistence.dao.InvalidSearchConditionException;\r\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n-import org.apache.syncope.core.propagation.PropagationException;\r\n import org.apache.syncope.core.rest.controller.RoleController;\r\n-import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\r\n-import org.apache.syncope.core.workflow.WorkflowException;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n \r\n@@ -50,13 +44,7 @@ public class RoleServiceImpl implements RoleService, ContextAware {\n \r\n     @Override\r\n     public List<RoleTO> children(final Long roleId) {\r\n-        try {\r\n-            return roleController.children(roleId);\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return roleController.children(roleId);\r\n     }\r\n \r\n     @Override\r\n@@ -66,31 +54,15 @@ public int count() {\n \r\n     @Override\r\n     public Response create(final RoleTO roleTO) {\r\n-        try {\r\n-            RoleTO created = roleController.create(new DummyHTTPServletResponse(), roleTO);\r\n-            URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\r\n-            return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\r\n-                    .build();\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (WorkflowException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (PropagationException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        RoleTO created = roleController.create(new DummyHTTPServletResponse(), roleTO);\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\r\n+                .build();\r\n     }\r\n \r\n     @Override\r\n     public RoleTO delete(final Long roleId) {\r\n-        try {\r\n-            return roleController.delete(roleId);\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return roleController.delete(roleId);\r\n     }\r\n \r\n     @Override\r\n@@ -105,62 +77,32 @@ public List<RoleTO> list(final int page, final int size) {\n \r\n     @Override\r\n     public RoleTO parent(final Long roleId) {\r\n-        try {\r\n-            return roleController.parent(roleId);\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return roleController.parent(roleId);\r\n     }\r\n \r\n     @Override\r\n     public RoleTO read(final Long roleId) {\r\n-        try {\r\n-            return roleController.read(roleId);\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return roleController.read(roleId);\r\n     }\r\n \r\n     @Override\r\n     public List<RoleTO> search(final NodeCond searchCondition) {\r\n-        try {\r\n-            return roleController.search(searchCondition);\r\n-        } catch (InvalidSearchConditionException e) {\r\n-            throw new BadRequestException(e);\r\n-        }\r\n+        return roleController.search(searchCondition);\r\n     }\r\n \r\n     @Override\r\n     public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size) {\r\n-        try {\r\n-            return roleController.search(searchCondition, page, size);\r\n-        } catch (InvalidSearchConditionException e) {\r\n-            throw new BadRequestException(e);\r\n-        }\r\n+        return roleController.search(searchCondition, page, size);\r\n     }\r\n \r\n     @Override\r\n     public int searchCount(final NodeCond searchCondition) {\r\n-        try {\r\n-            return (Integer) roleController.searchCount(searchCondition).getModel().values().iterator().next();\r\n-        } catch (InvalidSearchConditionException e) {\r\n-            throw new BadRequestException(e);\r\n-        }\r\n+        return (Integer) roleController.searchCount(searchCondition).getModel().values().iterator().next();\r\n     }\r\n \r\n     @Override\r\n     public RoleTO selfRead(final Long roleId) {\r\n-        try {\r\n-            return roleController.selfRead(roleId);\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return roleController.selfRead(roleId);\r\n     }\r\n \r\n     @Override\r\n@@ -170,17 +112,7 @@ public void setUriInfo(final UriInfo ui) {\n \r\n     @Override\r\n     public RoleTO update(final Long roleId, final RoleMod roleMod) {\r\n-        try {\r\n-            return roleController.update(roleMod);\r\n-        } catch (UnauthorizedRoleException e) {\r\n-            throw new javax.ws.rs.NotAuthorizedException(e);\r\n-        } catch (WorkflowException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (PropagationException e) {\r\n-            throw new BadRequestException(e);\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n-        }\r\n+        return roleController.update(roleMod);\r\n     }\r\n \r\n }\r"},{"sha":"13d393d14bfcf2f831cea3205e5984fec8aeab51","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":43,"deletions":56,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -20,6 +20,7 @@\n \r\n import java.net.URI;\r\n import java.util.List;\r\n+\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n@@ -31,7 +32,6 @@\n import org.apache.syncope.common.to.SchemaTO;\r\n import org.apache.syncope.common.to.VirtualSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n import org.apache.syncope.core.rest.controller.DerivedSchemaController;\r\n import org.apache.syncope.core.rest.controller.SchemaController;\r\n import org.apache.syncope.core.rest.controller.VirtualSchemaController;\r\n@@ -81,29 +81,24 @@ public <T extends AbstractSchemaTO> Response create(final AttributableType kind,\n \r\n     @Override\r\n     public void delete(final AttributableType kind, final SchemaType type, final String schemaName) {\r\n-        try {\r\n-            switch (type) {\r\n-                case NORMAL:\r\n-                    normalSchemaController.delete(kind.toString(), schemaName);\r\n-                    break;\r\n-\r\n-                case DERIVED:\r\n-                    derivedSchemaController.delete(kind.toString(), schemaName);\r\n-                    break;\r\n-\r\n-                case VIRTUAL:\r\n-                    virtualSchemaController.delete(kind.toString(), schemaName);\r\n-                    break;\r\n-\r\n-                default:\r\n-                    throw new BadRequestException();\r\n-            }\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                normalSchemaController.delete(kind.toString(), schemaName);\r\n+                break;\r\n+\r\n+            case DERIVED:\r\n+                derivedSchemaController.delete(kind.toString(), schemaName);\r\n+                break;\r\n+\r\n+            case VIRTUAL:\r\n+                virtualSchemaController.delete(kind.toString(), schemaName);\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n         }\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public List<? extends AbstractSchemaTO> list(final AttributableType kind, final SchemaType type) {\r\n         switch (type) {\r\n@@ -125,47 +120,39 @@ public List<? extends AbstractSchemaTO> list(final AttributableType kind, final\n     @Override\r\n     public <T extends AbstractSchemaTO> T read(final AttributableType kind, final SchemaType type,\r\n             final String schemaName) {\r\n-        try {\r\n-            switch (type) {\r\n-                case NORMAL:\r\n-                    return (T) normalSchemaController.read(kind.toString(), schemaName);\r\n-\r\n-                case DERIVED:\r\n-                    return (T) derivedSchemaController.read(kind.toString(), schemaName);\r\n-\r\n-                case VIRTUAL:\r\n-                    return (T) virtualSchemaController.read(kind.toString(), schemaName);\r\n-\r\n-                default:\r\n-                    throw new BadRequestException();\r\n-            }\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return (T) normalSchemaController.read(kind.toString(), schemaName);\r\n+\r\n+            case DERIVED:\r\n+                return (T) derivedSchemaController.read(kind.toString(), schemaName);\r\n+\r\n+            case VIRTUAL:\r\n+                return (T) virtualSchemaController.read(kind.toString(), schemaName);\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n         }\r\n     }\r\n \r\n     @Override\r\n     public <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n             final String schemaName, final T schemaTO) {\r\n-        try {\r\n-            switch (type) {\r\n-                case NORMAL:\r\n-                    normalSchemaController.update((SchemaTO) schemaTO, kind.toString());\r\n-                    break;\r\n-\r\n-                case DERIVED:\r\n-                    derivedSchemaController.update((DerivedSchemaTO) schemaTO, kind.toString());\r\n-                    break;\r\n-\r\n-                case VIRTUAL:\r\n-                    virtualSchemaController.update((VirtualSchemaTO) schemaTO, kind.toString());\r\n-                    break;\r\n-\r\n-                default:\r\n-                    throw new BadRequestException();\r\n-            }\r\n-        } catch (NotFoundException e) {\r\n-            throw new javax.ws.rs.NotFoundException(e);\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                normalSchemaController.update((SchemaTO) schemaTO, kind.toString());\r\n+                break;\r\n+\r\n+            case DERIVED:\r\n+                derivedSchemaController.update((DerivedSchemaTO) schemaTO, kind.toString());\r\n+                break;\r\n+\r\n+            case VIRTUAL:\r\n+                virtualSchemaController.update((VirtualSchemaTO) schemaTO, kind.toString());\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n         }\r\n     }\r\n \r"},{"sha":"7d1e233432cab1e7c48c271df081e3862affdfd2","filename":"core/src/main/java/org/apache/syncope/core/services/UserRequestServiceImpl.java","status":"modified","additions":15,"deletions":29,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9a535fe368a2df1654e18d682abc764cdf4d1a7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserRequestServiceImpl.java?ref=a9a535fe368a2df1654e18d682abc764cdf4d1a7","patch":"@@ -21,14 +21,12 @@\n import java.net.URI;\n import java.util.List;\n \n-import javax.ws.rs.PathParam;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriInfo;\n \n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.types.UserRequestType;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.rest.controller.UserRequestController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -53,21 +51,17 @@ public boolean isCreateAllowed() {\n     }\n \n     @Override\n-    public Response create(UserRequestTO userRequestTO) {\n-        try {\n-            UserRequestTO outUserRequestTO = null;\n-            if (userRequestTO.getType() == UserRequestType.CREATE) {\n-                outUserRequestTO = userRequestController.create(userRequestTO.getUserTO());\n-            } else if (userRequestTO.getType() == UserRequestType.UPDATE) {\n-                outUserRequestTO = userRequestController.update(userRequestTO.getUserMod());\n-            } else if (userRequestTO.getType() == UserRequestType.DELETE) {\n-                userRequestController.delete(userRequestTO.getUserId());\n-            }\n-            URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + outUserRequestTO.getId()).build();\n-            return Response.created(location).entity(outUserRequestTO).build();\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n+    public Response create(final UserRequestTO userRequestTO) {\n+        UserRequestTO outUserRequestTO = null;\n+        if (userRequestTO.getType() == UserRequestType.CREATE) {\n+            outUserRequestTO = userRequestController.create(userRequestTO.getUserTO());\n+        } else if (userRequestTO.getType() == UserRequestType.UPDATE) {\n+            outUserRequestTO = userRequestController.update(userRequestTO.getUserMod());\n+        } else if (userRequestTO.getType() == UserRequestType.DELETE) {\n+            userRequestController.delete(userRequestTO.getUserId());\n         }\n+        URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + outUserRequestTO.getId()).build();\n+        return Response.created(location).entity(outUserRequestTO).build();\n     }\n \n     @Override\n@@ -76,25 +70,17 @@ public List<UserRequestTO> list() {\n     }\n \n     @Override\n-    public UserRequestTO read(@PathParam(\"requestId\") Long requestId) {\n-        try {\n-            return userRequestController.read(requestId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+    public UserRequestTO read(final Long requestId) {\n+        return userRequestController.read(requestId);\n     }\n \n     @Override\n-    public void delete(@PathParam(\"requestId\") Long requestId) {\n-        try {\n-            userRequestController.deleteRequest(requestId);\n-        } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException(e);\n-        }\n+    public void delete(final Long requestId) {\n+        userRequestController.deleteRequest(requestId);\n     }\n \n     @Override\n-    public void setUriInfo(UriInfo uriInfo) {\n+    public void setUriInfo(final UriInfo uriInfo) {\n         this.uriInfo = uriInfo;\n     }\n "}]}