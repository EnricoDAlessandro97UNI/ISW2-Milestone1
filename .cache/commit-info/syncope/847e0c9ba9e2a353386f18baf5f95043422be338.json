{"sha":"847e0c9ba9e2a353386f18baf5f95043422be338","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg0N2UwYzliYTllMmEzNTMzODZmMThiYWY1Zjk1MDQzNDIyYmUzMzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-12T15:03:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-12T15:10:33Z"},"message":"[SYNCOPE-1061] Both POST and Redirect binding profiles are now supported; if both are available for a given IdP, the one to be used is configurable, with POST predefined","tree":{"sha":"afe3166bfa56f1160e0b8149f48d31891ee6e03e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/afe3166bfa56f1160e0b8149f48d31891ee6e03e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/847e0c9ba9e2a353386f18baf5f95043422be338","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/847e0c9ba9e2a353386f18baf5f95043422be338","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/847e0c9ba9e2a353386f18baf5f95043422be338","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/847e0c9ba9e2a353386f18baf5f95043422be338/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f1329b79966d1986bbbfe031e46d61469468abd1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1329b79966d1986bbbfe031e46d61469468abd1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1329b79966d1986bbbfe031e46d61469468abd1"}],"stats":{"total":1002,"additions":658,"deletions":344},"files":[{"sha":"bd295e31996dffa2142625404e173104876448ee","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AbstractSAML2SPServlet.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.UriBuilder;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.syncope.common.lib.SSOConstants;\n+import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSAML2SPServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = 7969539245875799817L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSAML2SPServlet.class);\n+\n+    protected void prepare(final HttpServletResponse response, final SAML2RequestTO requestTO) throws IOException {\n+        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n+        response.setHeader(\"Pragma\", \"no-cache\");\n+        switch (requestTO.getBindingType()) {\n+            case REDIRECT:\n+                UriBuilder ub = UriBuilder.fromUri(requestTO.getIdpServiceAddress());\n+                ub.queryParam(SSOConstants.SAML_REQUEST, requestTO.getContent());\n+                ub.queryParam(SSOConstants.RELAY_STATE, requestTO.getRelayState());\n+                ub.queryParam(SSOConstants.SIG_ALG, requestTO.getSignAlg());\n+                ub.queryParam(SSOConstants.SIGNATURE, requestTO.getSignature());\n+\n+                response.setStatus(HttpServletResponse.SC_SEE_OTHER);\n+                response.setHeader(\"Location\", ub.build().toASCIIString());\n+                break;\n+\n+            case POST:\n+            default:\n+                response.setContentType(MediaType.TEXT_HTML);\n+                response.getWriter().write(\"\"\n+                        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"\n+                        + \" <body onLoad=\\\"document.forms[0].submit();\\\">\"\n+                        + \"  <form action=\\\"\" + requestTO.getIdpServiceAddress() + \"\\\" method=\\\"POST\\\">\"\n+                        + \"   <input type=\\\"hidden\\\" name=\\\"\" + SSOConstants.SAML_REQUEST + \"\\\"\"\n+                        + \"          value=\\\"\" + requestTO.getContent() + \"\\\"/>\"\n+                        + \"   <input type=\\\"hidden\\\" name=\\\"\" + SSOConstants.RELAY_STATE + \"\\\"\"\n+                        + \"          value=\\\"\" + requestTO.getRelayState() + \"\\\"/>\"\n+                        + \"   <input type=\\\"submit\\\" style=\\\"visibility: hidden;\\\"/>\"\n+                        + \"  </form>\"\n+                        + \" </body>\"\n+                        + \"</html>\");\n+        }\n+    }\n+\n+    protected SAML2ReceivedResponseTO extract(final InputStream response) throws IOException {\n+        String strForm = IOUtils.toString(response);\n+        MultivaluedMap<String, String> params = JAXRSUtils.getStructuredParams(strForm, \"&\", false, false);\n+\n+        String samlResponse = URLDecoder.decode(\n+                params.getFirst(SSOConstants.SAML_RESPONSE), StandardCharsets.UTF_8.name());\n+        LOG.debug(\"Received SAML Response: {}\", samlResponse);\n+\n+        String relayState = params.getFirst(SSOConstants.RELAY_STATE);\n+        LOG.debug(\"Received Relay State: {}\", relayState);\n+\n+        SAML2ReceivedResponseTO receivedResponseTO = new SAML2ReceivedResponseTO();\n+        receivedResponseTO.setSamlResponse(samlResponse);\n+        receivedResponseTO.setRelayState(relayState);\n+        return receivedResponseTO;\n+    }\n+}"},{"sha":"6407b4d0f713cceb6c548a5d5a4677609801fecb","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -23,22 +23,17 @@\n import java.nio.charset.StandardCharsets;\n import javax.servlet.ServletException;\n import javax.servlet.annotation.WebServlet;\n-import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @WebServlet(name = \"assertionConsumer\", urlPatterns = { \"/saml2sp/assertion-consumer\" })\n-public class AssertionConsumer extends HttpServlet {\n+public class AssertionConsumer extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 968480296813639041L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AssertionConsumer.class);\n-\n     @Override\n     protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n@@ -47,7 +42,7 @@ protected void doPost(final HttpServletRequest request, final HttpServletRespons\n                 getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n         try {\n             SAML2LoginResponseTO responseTO = anonymous.getService(SAML2SPService.class).\n-                    validateLoginResponse(request.getInputStream());\n+                    validateLoginResponse(extract(request.getInputStream()));\n \n             request.getSession(true).setAttribute(Constants.SAML2SPJWT, responseTO.getAccessToken());\n "},{"sha":"e206ff70d7d4cee196a4be65fdb22bfd18210fc5","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Login.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n \n @WebServlet(name = \"login\", urlPatterns = { \"/saml2sp/login\" })\n-public class Login extends SAML2PostBinding {\n+public class Login extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 968480296813639041L;\n "},{"sha":"3ad191c9f6023745334d7a3bed4f56f18742c5b4","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Logout.java","status":"modified","additions":62,"deletions":37,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -28,17 +28,21 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.SSOConstants;\n+import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n \n @WebServlet(name = \"logout\", urlPatterns = { \"/saml2sp/logout\" })\n-public class Logout extends SAML2PostBinding {\n+public class Logout extends AbstractSAML2SPServlet {\n \n     private static final long serialVersionUID = 3010286040376932117L;\n \n-    @Override\n-    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n-            throws ServletException, IOException {\n+    private void doLogout(\n+            final SAML2ReceivedResponseTO receivedResponse,\n+            final HttpServletRequest request,\n+            final HttpServletResponse response) throws ServletException, IOException {\n \n         SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n                 getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n@@ -49,12 +53,17 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n             }\n \n             SyncopeClient client = clientFactory.create(accessToken);\n-            SAML2RequestTO requestTO = client.getService(SAML2SPService.class).createLogoutRequest(\n-                    StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"));\n+            client.getService(SAML2SPService.class).validateLogoutResponse(receivedResponse);\n \n-            prepare(response, requestTO);\n+            String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_SUCCESS_URL);\n+            if (successURL == null) {\n+                request.getRequestDispatcher(\"logoutSuccess.jsp\").forward(request, response);\n+            } else {\n+                response.sendRedirect(successURL);\n+            }\n+            request.getSession().removeAttribute(Constants.SAML2SPJWT);\n         } catch (Exception e) {\n-            LOG.error(\"While preparing logout request to IdP\", e);\n+            LOG.error(\"While processing authentication response from IdP\", e);\n \n             String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n             if (errorURL == null) {\n@@ -70,41 +79,57 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n     }\n \n     @Override\n-    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n             throws ServletException, IOException {\n \n-        SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n-                getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n-        try {\n-            String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n-            if (StringUtils.isBlank(accessToken)) {\n-                throw new IllegalArgumentException(\"No access token found \");\n+        String samlResponse = request.getParameter(SSOConstants.SAML_RESPONSE);\n+        String relayState = request.getParameter(SSOConstants.RELAY_STATE);\n+        if (samlResponse == null) { // prepare logout response\n+            SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n+                    getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n+            try {\n+                String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n+                if (StringUtils.isBlank(accessToken)) {\n+                    throw new IllegalArgumentException(\"No access token found \");\n+                }\n+\n+                SyncopeClient client = clientFactory.create(accessToken);\n+                SAML2RequestTO requestTO = client.getService(SAML2SPService.class).createLogoutRequest(\n+                        StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"));\n+\n+                prepare(response, requestTO);\n+            } catch (Exception e) {\n+                LOG.error(\"While preparing logout request to IdP\", e);\n+\n+                String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n+                if (errorURL == null) {\n+                    request.setAttribute(\"exception\", e);\n+                    request.getRequestDispatcher(\"logoutError.jsp\").forward(request, response);\n+\n+                    e.printStackTrace(response.getWriter());\n+                } else {\n+                    response.sendRedirect(errorURL + \"?errorMessage=\"\n+                            + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8.name()));\n+                }\n             }\n+        } else { // process REDIRECT binding logout response\n+            SAML2ReceivedResponseTO receivedResponse = new SAML2ReceivedResponseTO();\n+            receivedResponse.setSamlResponse(samlResponse);\n+            receivedResponse.setRelayState(relayState);\n+            receivedResponse.setBindingType(SAML2BindingType.REDIRECT);\n \n-            SyncopeClient client = clientFactory.create(accessToken);\n-            client.getService(SAML2SPService.class).validateLogoutResponse(request.getInputStream());\n-\n-            String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_SUCCESS_URL);\n-            if (successURL == null) {\n-                request.getRequestDispatcher(\"logoutSuccess.jsp\").forward(request, response);\n-            } else {\n-                response.sendRedirect(successURL);\n-            }\n-            request.getSession().removeAttribute(Constants.SAML2SPJWT);\n-        } catch (Exception e) {\n-            LOG.error(\"While processing authentication response from IdP\", e);\n+            doLogout(receivedResponse, request, response);\n+        }\n+    }\n \n-            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n-            if (errorURL == null) {\n-                request.setAttribute(\"exception\", e);\n-                request.getRequestDispatcher(\"logoutError.jsp\").forward(request, response);\n+    @Override\n+    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n \n-                e.printStackTrace(response.getWriter());\n-            } else {\n-                response.sendRedirect(errorURL + \"?errorMessage=\"\n-                        + URLEncoder.encode(e.getMessage(), StandardCharsets.UTF_8.name()));\n-            }\n-        }\n+        // process POST binding logout response\n+        SAML2ReceivedResponseTO receivedResponse = extract(request.getInputStream());\n+        receivedResponse.setBindingType(SAML2BindingType.POST);\n+        doLogout(receivedResponse, request, response);\n     }\n \n }"},{"sha":"73229f7078d8782b398948685c5b6c128880b3dc","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Metadata.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -47,7 +47,7 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n         SAML2SPService service = anonymous.getService(SAML2SPService.class);\n         WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_XML_TYPE);\n         Response metadataResponse = service.getMetadata(\n-                StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"));\n+                StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"), \"saml2sp\");\n \n         response.setContentType(metadataResponse.getMediaType().toString());\n         IOUtils.copy((InputStream) metadataResponse.getEntity(), response.getOutputStream());"},{"sha":"086884181952de6cff0df8fb9ea97bb6d3c5e976","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2PostBinding.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2PostBinding.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2PostBinding.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2PostBinding.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.ext.saml2lsp.agent;\n-\n-import java.io.IOException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.to.SAML2RequestTO;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public abstract class SAML2PostBinding extends HttpServlet {\n-\n-    private static final long serialVersionUID = 7969539245875799817L;\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(SAML2PostBinding.class);\n-\n-    protected void prepare(final HttpServletResponse response, final SAML2RequestTO requestTO) throws IOException {\n-        response.setContentType(MediaType.TEXT_HTML);\n-        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n-        response.setHeader(\"Pragma\", \"no-cache\");\n-        response.getWriter().write(\"\"\n-                + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"\n-                + \"  <body onLoad=\\\"document.forms[0].submit();\\\">\"\n-                + \"    <form action=\\\"\" + requestTO.getIdpServiceAddress() + \"\\\" method=\\\"POST\\\">\"\n-                + \"      <input type=\\\"hidden\\\" name=\\\"SAMLRequest\\\" value=\\\"\" + requestTO.getContent() + \"\\\"/>\"\n-                + \"      <input type=\\\"hidden\\\" name=\\\"RelayState\\\" value=\\\"\" + requestTO.getRelayState() + \"\\\"/>\"\n-                + \"      <input type=\\\"submit\\\" style=\\\"visibility: hidden;\\\"/>\"\n-                + \"    </form>\"\n-                + \"  </body>\"\n-                + \"</html>\");\n-    }\n-}"},{"sha":"be93d281bdce13f8bd3b1e03aa9ea36b091cdf7f","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -140,6 +140,8 @@ protected List<IColumn<SAML2IdPTO, String>> getColumns() {\n         columns.add(new PropertyColumn<SAML2IdPTO, String>(new ResourceModel(\"entityID\"), \"entityID\", \"entityID\"));\n         columns.add(new BooleanPropertyColumn<SAML2IdPTO>(\n                 new ResourceModel(\"useDeflateEncoding\"), \"useDeflateEncoding\", \"useDeflateEncoding\"));\n+        columns.add(new PropertyColumn<SAML2IdPTO, String>(\n+                new ResourceModel(\"bindingType\"), \"bindingType\", \"bindingType\"));\n         columns.add(new BooleanPropertyColumn<SAML2IdPTO>(\n                 new ResourceModel(\"logoutSupported\"), \"logoutSupported\", \"logoutSupported\"));\n "},{"sha":"d824807e94f2f8aa79276b1d0df9107f52c7f8fe","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -20,19 +20,22 @@\n \n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.panels.SAML2IdPsDirectoryPanel;\n import org.apache.syncope.client.console.rest.SAML2IdPsRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n import org.apache.syncope.client.console.wizards.resources.MappingItemTransformersTogglePanel;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n@@ -95,6 +98,12 @@ private static final class IdP extends WizardStep {\n                     \"field\", \"useDeflateEncoding\", new PropertyModel<Boolean>(idpTO, \"useDeflateEncoding\"), false);\n             fields.add(useDeflateEncoding);\n \n+            AjaxDropDownChoicePanel<SAML2BindingType> bindingType =\n+                    new AjaxDropDownChoicePanel<>(\"field\", \"bindingType\",\n+                            new PropertyModel<SAML2BindingType>(idpTO, \"bindingType\"), false);\n+            bindingType.setChoices(Arrays.asList(SAML2BindingType.values()));\n+            fields.add(bindingType);\n+\n             add(new ListView<Component>(\"fields\", fields) {\n \n                 private static final long serialVersionUID = -9180479401817023838L;"},{"sha":"8c5125d133dd49e3cc02aa7e6cb45e496a9df8b3","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,3 +19,4 @@ useDeflateEncoding=Deflate Encoding\n logoutSupported=Logout supported\n any.edit=Edit ${entityID}\n connObjectKeyValidation=There must be exactly one Remote Key\n+bindingType=Binding"},{"sha":"d0ee37078015a4a1d341a7140f69b309c9fdbcfe","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,3 +19,4 @@ useDeflateEncoding=Deflate Encoding\n logoutSupported=Logout supportato\n any.edit=Modifica ${entityID}\n connObjectKeyValidation=Deve essere definito esattamente una Chiave remota\n+bindingType=Binding"},{"sha":"87a0c409888b929ca0dfe3eade3c02693b52c94d","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,3 +19,4 @@ useDeflateEncoding=Deflate Encoding\n logoutSupported=Logout supported\n any.edit=Alterar ${entityID}\n connObjectKeyValidation=Precisa ser exatamente um Remote Key\n+bindingType=Binding"},{"sha":"479faea8013f8ea4e5052ebd2168cda372802f14","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,3 +19,4 @@ useDeflateEncoding=Deflate Encoding\n logoutSupported=Logout supported\n any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${entityID}\n connObjectKeyValidation=\\u0422\\u0430\\u043c \\u0434\\u043e\\u043b\\u0436\\u043d\\u043e \\u0431\\u044b\\u0442\\u044c \\u0440\\u043e\\u0432\\u043d\\u043e \\u043e\\u0434\\u0438\\u043d \\u0434\\u0438\\u0441\\u0442\\u0430\\u043d\\u0446\\u0438\\u043e\\u043d\\u043d\\u043e\\u0433\\u043e \\u043a\\u043b\\u044e\\u0447\\u0430\n+bindingType=Binding"},{"sha":"2390dde5de2785a8ab5b524d6ff80e46c1d2b45f","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/SSOConstants.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSSOConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSSOConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSSOConstants.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+public final class SSOConstants {\n+\n+    public static final String SAML_REQUEST = \"SAMLRequest\";\n+\n+    public static final String SAML_RESPONSE = \"SAMLResponse\";\n+\n+    public static final String RELAY_STATE = \"RelayState\";\n+\n+    public static final String SIG_ALG = \"SigAlg\";\n+\n+    public static final String SIGNATURE = \"Signature\";\n+\n+    private SSOConstants() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"109af15279e88a6fd68c7169a2b41e2fe14f952a","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -29,6 +29,7 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n @XmlRootElement(name = \"saml2idp\")\n @XmlType\n@@ -46,6 +47,8 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO {\n \n     private boolean useDeflateEncoding;\n \n+    private SAML2BindingType bindingType;\n+\n     private boolean logoutSupported;\n \n     private final List<MappingItemTO> mappingItems = new ArrayList<>();\n@@ -93,6 +96,14 @@ public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n         this.useDeflateEncoding = useDeflateEncoding;\n     }\n \n+    public SAML2BindingType getBindingType() {\n+        return bindingType;\n+    }\n+\n+    public void setBindingType(final SAML2BindingType bindingType) {\n+        this.bindingType = bindingType;\n+    }\n+\n     public boolean isLogoutSupported() {\n         return logoutSupported;\n     }"},{"sha":"b8d82ae09b520a5973a37d3a156dd26b736a47e6","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2ReceivedResponseTO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n+\n+@XmlRootElement(name = \"saml2ReceivedResponse\")\n+@XmlType\n+public class SAML2ReceivedResponseTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 6102419133516694822L;\n+\n+    private String samlResponse;\n+\n+    private String relayState;\n+\n+    private SAML2BindingType bindingType;\n+\n+    public String getSamlResponse() {\n+        return samlResponse;\n+    }\n+\n+    public void setSamlResponse(final String samlResponse) {\n+        this.samlResponse = samlResponse;\n+    }\n+\n+    public String getRelayState() {\n+        return relayState;\n+    }\n+\n+    public void setRelayState(final String relayState) {\n+        this.relayState = relayState;\n+    }\n+\n+    public SAML2BindingType getBindingType() {\n+        return bindingType;\n+    }\n+\n+    public void setBindingType(final SAML2BindingType bindingType) {\n+        this.bindingType = bindingType;\n+    }\n+\n+}"},{"sha":"143a1b3875f285acaba5e415404f3e7b8d10d26a","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2RequestTO.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2RequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2RequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2RequestTO.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -21,6 +21,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n @XmlRootElement(name = \"saml2request\")\n @XmlType\n@@ -30,10 +31,16 @@ public class SAML2RequestTO extends AbstractBaseBean {\n \n     private String idpServiceAddress;\n \n+    private SAML2BindingType bindingType;\n+\n     private String content;\n \n     private String relayState;\n \n+    private String signAlg;\n+\n+    private String signature;\n+\n     public String getIdpServiceAddress() {\n         return idpServiceAddress;\n     }\n@@ -42,6 +49,14 @@ public void setIdpServiceAddress(final String idpServiceAddress) {\n         this.idpServiceAddress = idpServiceAddress;\n     }\n \n+    public SAML2BindingType getBindingType() {\n+        return bindingType;\n+    }\n+\n+    public void setBindingType(final SAML2BindingType bindingType) {\n+        this.bindingType = bindingType;\n+    }\n+\n     public String getContent() {\n         return content;\n     }\n@@ -58,4 +73,20 @@ public void setRelayState(final String relayState) {\n         this.relayState = relayState;\n     }\n \n+    public String getSignAlg() {\n+        return signAlg;\n+    }\n+\n+    public void setSignAlg(final String signAlg) {\n+        this.signAlg = signAlg;\n+    }\n+\n+    public String getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(final String signature) {\n+        this.signature = signature;\n+    }\n+\n }"},{"sha":"04c0704c35e643dd42fc5b0cf9514ae826337f68","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2BindingType.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2BindingType.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum SAML2BindingType {\n+    POST(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\", 0),\n+    REDIRECT(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\", 1);\n+\n+    private final String uri;\n+\n+    private final int index;\n+\n+    SAML2BindingType(final String uri, final int index) {\n+        this.uri = uri;\n+        this.index = index;\n+    }\n+\n+    public String getUri() {\n+        return uri;\n+    }\n+\n+    public int getIndex() {\n+        return index;\n+    }\n+\n+    public static SAML2BindingType fromUri(final String uri) {\n+        SAML2BindingType bindingType = null;\n+\n+        for (SAML2BindingType value : values()) {\n+            if (value.getUri().equals(uri)) {\n+                bindingType = value;\n+            }\n+        }\n+\n+        return bindingType;\n+    }\n+}"},{"sha":"bbd170d94bd51f041df3e16535c22691cd887e6e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"modified","additions":38,"deletions":11,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n@@ -81,7 +82,8 @@ private SAML2IdPTO complete(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n \n         idpTO.setLogoutSupported(idpEntity == null\n                 ? false\n-                : idpEntity.getSLOLocation(SAMLConstants.SAML2_POST_BINDING_URI) != null);\n+                : idpEntity.getSLOLocation(SAML2BindingType.POST) != null\n+                || idpEntity.getSLOLocation(SAML2BindingType.REDIRECT) != null);\n         return idpTO;\n     }\n \n@@ -146,17 +148,27 @@ private List<SAML2IdPTO> importIdPs(final InputStream input) throws Exception {\n             idpTO.setEntityID(idpEntityDescriptor.getEntityID());\n             idpTO.setName(idpEntityDescriptor.getEntityID());\n             idpTO.setUseDeflateEncoding(false);\n+\n             try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n                 saml2rw.write(new OutputStreamWriter(baos), idpEntityDescriptor, false);\n                 idpTO.setMetadata(Base64.getEncoder().encodeToString(baos.toByteArray()));\n             }\n+\n             MappingItemTO connObjectKeyItem = new MappingItemTO();\n             connObjectKeyItem.setIntAttrName(\"username\");\n             connObjectKeyItem.setExtAttrName(\"NameID\");\n             idpTO.setConnObjectKeyItem(connObjectKeyItem);\n-            result.add(idpTO);\n \n-            cache.put(idpEntityDescriptor, connObjectKeyItem, false);\n+            SAML2IdPEntity idp = cache.put(idpEntityDescriptor, connObjectKeyItem, false, SAML2BindingType.POST);\n+            if (idp.getSSOLocation(SAML2BindingType.POST) != null) {\n+                idpTO.setBindingType(SAML2BindingType.POST);\n+            } else if (idp.getSSOLocation(SAML2BindingType.REDIRECT) != null) {\n+                idpTO.setBindingType(SAML2BindingType.REDIRECT);\n+            } else {\n+                throw new IllegalArgumentException(\"Not POST nor REDIRECT artifacts supported by \" + idp.getId());\n+            }\n+\n+            result.add(idpTO);\n         }\n \n         return result;\n@@ -177,9 +189,9 @@ public List<String> importFromMetadata(final InputStream input) {\n             throw e;\n         } catch (Exception e) {\n             LOG.error(\"Unexpected error while importing IdP metadata\", e);\n-            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n-            ex.getElements().add(e.getMessage());\n-            throw ex;\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n         }\n \n         return imported;\n@@ -194,13 +206,28 @@ public void update(final SAML2IdPTO saml2IdpTO) {\n             throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2IdpTO.getKey() + \"'\");\n         }\n \n-        saml2Idp = idpDAO.save(binder.update(saml2Idp, saml2IdpTO));\n-\n         SAML2IdPEntity idpEntity = cache.get(saml2Idp.getEntityID());\n-        if (idpEntity != null) {\n-            idpEntity.setUseDeflateEncoding(saml2Idp.isUseDeflateEncoding());\n-            idpEntity.setConnObjectKeyItem(binder.getIdPTO(saml2Idp).getConnObjectKeyItem());\n+        if (idpEntity == null) {\n+            try {\n+                idpEntity = cache.put(saml2Idp);\n+            } catch (Exception e) {\n+                LOG.error(\"Unexpected error while updating {}\", saml2Idp.getEntityID(), e);\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+                sce.getElements().add(e.getMessage());\n+                throw sce;\n+            }\n         }\n+        if (idpEntity.getSSOLocation(saml2IdpTO.getBindingType()) == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+            sce.getElements().add(saml2IdpTO.getBindingType() + \" not supported by \" + saml2Idp.getEntityID());\n+            throw sce;\n+        }\n+\n+        saml2Idp = idpDAO.save(binder.update(saml2Idp, saml2IdpTO));\n+\n+        idpEntity.setUseDeflateEncoding(saml2Idp.isUseDeflateEncoding());\n+        idpEntity.setBindingType(saml2Idp.getBindingType());\n+        idpEntity.setConnObjectKeyItem(binder.getIdPTO(saml2Idp).getConnObjectKeyItem());\n     }\n \n     @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_DELETE + \"')\")"},{"sha":"61d272ac20c59ed4b600e1e028b24cab9067ba6d","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":79,"deletions":92,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -20,42 +20,36 @@\n \n import com.fasterxml.uuid.Generators;\n import com.fasterxml.uuid.impl.RandomBasedGenerator;\n-import java.io.IOException;\n-import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.lang.reflect.Method;\n-import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.ws.rs.core.MultivaluedMap;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n-import org.apache.cxf.helpers.IOUtils;\n-import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n-import org.apache.cxf.rs.security.saml.sso.SSOConstants;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n-import org.apache.syncope.core.logic.saml2.SAML2Signer;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -171,11 +165,8 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n     @Autowired\n     private SAML2ReaderWriter saml2rw;\n \n-    @Autowired\n-    private SAML2Signer saml2Signer;\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n-    public void getMetadata(final String spEntityID, final OutputStream os) {\n+    public void getMetadata(final String spEntityID, final String urlContext, final OutputStream os) {\n         check();\n \n         try {\n@@ -185,6 +176,7 @@ public void getMetadata(final String spEntityID, final OutputStream os) {\n             SPSSODescriptor spSSODescriptor = new SPSSODescriptorBuilder().buildObject();\n             spSSODescriptor.setWantAssertionsSigned(true);\n             spSSODescriptor.setAuthnRequestsSigned(true);\n+            spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n \n             X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n             keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n@@ -195,26 +187,27 @@ public void getMetadata(final String spEntityID, final OutputStream os) {\n             keyDescriptor.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n             spSSODescriptor.getKeyDescriptors().add(keyDescriptor);\n \n-            SingleLogoutService singleLogoutService = new SingleLogoutServiceBuilder().buildObject();\n-            singleLogoutService.setBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n-            singleLogoutService.setLocation(spEntityID + \"saml2sp/logout\");\n-            singleLogoutService.setResponseLocation(spEntityID + \"saml2sp/logout\");\n-            spSSODescriptor.getSingleLogoutServices().add(singleLogoutService);\n-\n             NameIDFormat nameIDFormat = new NameIDFormatBuilder().buildObject();\n             nameIDFormat.setFormat(NameIDType.PERSISTENT);\n             spSSODescriptor.getNameIDFormats().add(nameIDFormat);\n             nameIDFormat = new NameIDFormatBuilder().buildObject();\n             nameIDFormat.setFormat(NameIDType.TRANSIENT);\n             spSSODescriptor.getNameIDFormats().add(nameIDFormat);\n \n-            AssertionConsumerService assertionConsumerService = new AssertionConsumerServiceBuilder().buildObject();\n-            assertionConsumerService.setIndex(0);\n-            assertionConsumerService.setBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n-            assertionConsumerService.setLocation(spEntityID + \"saml2sp/assertion-consumer\");\n-\n-            spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);\n-            spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n+            for (SAML2BindingType bindingType : SAML2BindingType.values()) {\n+                AssertionConsumerService assertionConsumerService = new AssertionConsumerServiceBuilder().buildObject();\n+                assertionConsumerService.setIndex(bindingType.getIndex());\n+                assertionConsumerService.setBinding(bindingType.getUri());\n+                assertionConsumerService.setLocation(spEntityID + urlContext + \"/assertion-consumer\");\n+                spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);\n+                spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);\n+\n+                SingleLogoutService singleLogoutService = new SingleLogoutServiceBuilder().buildObject();\n+                singleLogoutService.setBinding(bindingType.getUri());\n+                singleLogoutService.setLocation(spEntityID + urlContext + \"/logout\");\n+                singleLogoutService.setResponseLocation(spEntityID + urlContext + \"/logout\");\n+                spSSODescriptor.getSingleLogoutServices().add(singleLogoutService);\n+            }\n \n             spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);\n \n@@ -270,7 +263,7 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n                     : \"SAML 2.0 IdP '\" + idpEntityID + \"'\");\n         }\n \n-        if (idp.getSSOLocation(SAMLConstants.SAML2_POST_BINDING_URI) == null) {\n+        if (idp.getSSOLocation(idp.getBindingType()) == null) {\n             throw new IllegalArgumentException(\"No SingleSignOnService available for \" + idp.getId());\n         }\n \n@@ -297,29 +290,44 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n \n         AuthnRequest authnRequest = new AuthnRequestBuilder().buildObject();\n         authnRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());\n-        authnRequest.setAssertionConsumerServiceURL(spEntityID + \"saml2sp/assertion-consumer\");\n         authnRequest.setForceAuthn(false);\n         authnRequest.setIsPassive(false);\n         authnRequest.setVersion(SAMLVersion.VERSION_20);\n-        authnRequest.setProtocolBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n+        authnRequest.setProtocolBinding(idp.getBindingType().getUri());\n         authnRequest.setIssueInstant(new DateTime());\n         authnRequest.setIssuer(issuer);\n         authnRequest.setNameIDPolicy(nameIDPolicy);\n         authnRequest.setRequestedAuthnContext(requestedAuthnContext);\n-        authnRequest.setDestination(idp.getSSOLocation(SAMLConstants.SAML2_POST_BINDING_URI).getLocation());\n+        authnRequest.setDestination(idp.getSSOLocation(idp.getBindingType()).getLocation());\n \n         SAML2RequestTO requestTO = new SAML2RequestTO();\n         requestTO.setIdpServiceAddress(authnRequest.getDestination());\n+        requestTO.setBindingType(idp.getBindingType());\n         try {\n-            // 3. sign and encode AuthnRequest\n-            requestTO.setContent(saml2Signer.signAndEncode(authnRequest, idp.isUseDeflateEncoding()));\n-\n-            // 4. generate relay state as JWT\n+            // 3. generate relay state as JWT\n             Map<String, Object> claims = new HashMap<>();\n             claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n             Triple<String, String, Date> relayState =\n                     accessTokenDataBinder.generateJWT(authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n-            requestTO.setRelayState(relayState.getMiddle());\n+\n+            // 4. sign and encode AuthnRequest\n+            switch (idp.getBindingType()) {\n+                case REDIRECT:\n+                    requestTO.setRelayState(URLEncoder.encode(relayState.getMiddle(), StandardCharsets.UTF_8.name()));\n+                    requestTO.setContent(URLEncoder.encode(\n+                            saml2rw.encode(authnRequest, true), StandardCharsets.UTF_8.name()));\n+                    requestTO.setSignAlg(URLEncoder.encode(saml2rw.getSigAlgo(), StandardCharsets.UTF_8.name()));\n+                    requestTO.setSignature(URLEncoder.encode(\n+                            saml2rw.sign(requestTO.getContent(), requestTO.getRelayState()),\n+                            StandardCharsets.UTF_8.name()));\n+                    break;\n+\n+                case POST:\n+                default:\n+                    requestTO.setRelayState(relayState.getMiddle());\n+                    saml2rw.sign(authnRequest);\n+                    requestTO.setContent(saml2rw.encode(authnRequest, idp.isUseDeflateEncoding()));\n+            }\n         } catch (Exception e) {\n             LOG.error(\"While generating AuthnRequest\", e);\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -397,47 +405,23 @@ private List<String> findMatchingUser(final String keyValue, final MappingItemTO\n         return result;\n     }\n \n-    private Pair<String, String> extract(final InputStream response) throws IOException {\n-        String strForm = IOUtils.toString(response);\n-        MultivaluedMap<String, String> params = JAXRSUtils.getStructuredParams(strForm, \"&\", false, false);\n-\n-        String samlResponse = URLDecoder.decode(\n-                params.getFirst(SSOConstants.SAML_RESPONSE), StandardCharsets.UTF_8.name());\n-        LOG.debug(\"Received SAML Response: {}\", samlResponse);\n-\n-        String relayState = params.getFirst(SSOConstants.RELAY_STATE);\n-        LOG.debug(\"Received Relay State: {}\", relayState);\n-\n-        return Pair.of(samlResponse, relayState);\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n-    public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n+    public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO response) {\n         check();\n \n-        // 1. extract raw SAML response and relay state\n-        Pair<String, String> extracted;\n-        try {\n-            extracted = extract(response);\n-        } catch (Exception e) {\n-            LOG.error(\"While reading AuthnResponse\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n-        // 2. first checks for the provided relay state\n-        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(extracted.getRight());\n+        // 1. first checks for the provided relay state\n+        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n         if (!relayState.verifySignatureWith(jwsSignatureCerifier)) {\n             throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n         }\n         Boolean useDeflateEncoding = Boolean.valueOf(\n                 relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n \n-        // 3. parse the provided SAML response\n+        // 2. parse the provided SAML response\n         Response samlResponse;\n         try {\n-            XMLObject responseObject = saml2rw.read(true, useDeflateEncoding, extracted.getLeft());\n+            XMLObject responseObject = saml2rw.read(\n+                    SAML2BindingType.POST, useDeflateEncoding, response.getSamlResponse());\n             if (!(responseObject instanceof Response)) {\n                 throw new IllegalArgumentException(\"Expected \" + Response.class.getName()\n                         + \", got \" + responseObject.getClass().getName());\n@@ -450,18 +434,18 @@ public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n             throw sce;\n         }\n \n-        // 4. further checks:\n-        //   4a. the SAML Reponse's InResponseTo\n+        // 3. further checks:\n+        //   3a. the SAML Reponse's InResponseTo\n         if (!relayState.getJwtClaims().getSubject().equals(samlResponse.getInResponseTo())) {\n             throw new IllegalArgumentException(\"Unmatching request ID: \" + samlResponse.getInResponseTo());\n         }\n-        //   4b. the SAML Response status\n+        //   3b. the SAML Response status\n         if (!StatusCode.SUCCESS.equals(samlResponse.getStatus().getStatusCode().getValue())) {\n             throw new BadCredentialsException(\"The SAML IdP replied with \"\n                     + samlResponse.getStatus().getStatusCode().getValue());\n         }\n \n-        // 5. validate the SAML response and, if needed, decrypt the provided assertion(s)\n+        // 4. validate the SAML response and, if needed, decrypt the provided assertion(s)\n         SAML2IdPEntity idp = getIdP(samlResponse.getIssuer().getValue());\n         if (idp.getConnObjectKeyItem() == null) {\n             throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + \"'\");\n@@ -475,10 +459,10 @@ public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n             throw sce;\n         }\n \n-        // 6. prepare the result: find matching user (if any) and return the received attributes\n+        // 5. prepare the result: find matching user (if any) and return the received attributes\n         SAML2LoginResponseTO responseTO = new SAML2LoginResponseTO();\n         responseTO.setIdp(idp.getId());\n-        responseTO.setSloSupported(idp.getSLOLocation(SAMLConstants.SAML2_POST_BINDING_URI) != null);\n+        responseTO.setSloSupported(idp.getSLOLocation(idp.getBindingType()) != null);\n \n         NameID nameID = null;\n         String keyValue = null;\n@@ -541,7 +525,7 @@ public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n         responseTO.setUsername(userDAO.find(matchingUsers.get(0)).getUsername());\n \n         responseTO.setNameID(nameID.getValue());\n-        // 7. generate JWT for further access\n+        // 6. generate JWT for further access\n         Map<String, Object> claims = new HashMap<>();\n         claims.put(JWT_CLAIM_IDP_ENTITYID, idp.getId());\n         claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());\n@@ -571,14 +555,14 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n         if (idp == null) {\n             throw new NotFoundException(\"SAML 2.0 IdP '\" + idpEntityID + \"'\");\n         }\n-        if (idp.getSLOLocation(SAMLConstants.SAML2_POST_BINDING_URI) == null) {\n+        if (idp.getSLOLocation(idp.getBindingType()) == null) {\n             throw new IllegalArgumentException(\"No SingleLogoutService available for \" + idp.getId());\n         }\n \n         // 3. create LogoutRequest\n         LogoutRequest logoutRequest = new LogoutRequestBuilder().buildObject();\n         logoutRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());\n-        logoutRequest.setDestination(idp.getSLOLocation(SAMLConstants.SAML2_POST_BINDING_URI).getLocation());\n+        logoutRequest.setDestination(idp.getSLOLocation(idp.getBindingType()).getLocation());\n \n         DateTime now = new DateTime();\n         logoutRequest.setIssueInstant(now);\n@@ -599,16 +583,28 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n \n         SAML2RequestTO requestTO = new SAML2RequestTO();\n         requestTO.setIdpServiceAddress(logoutRequest.getDestination());\n+        requestTO.setBindingType(idp.getBindingType());\n         try {\n-            // 3. sign and encode LogoutRequest\n-            requestTO.setContent(saml2Signer.signAndEncode(logoutRequest, idp.isUseDeflateEncoding()));\n-\n-            // 4. generate relay state as JWT\n+            // 3. generate relay state as JWT\n             Map<String, Object> claims = new HashMap<>();\n             claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n             Triple<String, String, Date> relayState =\n                     accessTokenDataBinder.generateJWT(logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n             requestTO.setRelayState(relayState.getMiddle());\n+\n+            // 4. sign and encode AuthnRequest\n+            switch (idp.getBindingType()) {\n+                case REDIRECT:\n+                    requestTO.setContent(saml2rw.encode(logoutRequest, true));\n+                    requestTO.setSignAlg(saml2rw.getSigAlgo());\n+                    requestTO.setSignature(saml2rw.sign(requestTO.getContent(), requestTO.getRelayState()));\n+                    break;\n+\n+                case POST:\n+                default:\n+                    saml2rw.sign(logoutRequest);\n+                    requestTO.setContent(saml2rw.encode(logoutRequest, idp.isUseDeflateEncoding()));\n+            }\n         } catch (Exception e) {\n             LOG.error(\"While generating LogoutRequest\", e);\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -620,7 +616,7 @@ public SAML2RequestTO createLogoutRequest(final String accessToken, final String\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n-    public void validateLogoutResponse(final String accessToken, final InputStream response) {\n+    public void validateLogoutResponse(final String accessToken, final SAML2ReceivedResponseTO response) {\n         check();\n \n         // 1. fetch the current JWT used for Syncope authentication\n@@ -630,21 +626,11 @@ public void validateLogoutResponse(final String accessToken, final InputStream r\n         }\n \n         // 2. extract raw SAML response and relay state\n-        Pair<String, String> extracted;\n-        try {\n-            extracted = extract(response);\n-        } catch (Exception e) {\n-            LOG.error(\"While reading LogoutResponse\", e);\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n         JwsJwtCompactConsumer relayState = null;\n         Boolean useDeflateEncoding = false;\n-        if (StringUtils.isNotBlank(extracted.getRight())) {\n+        if (StringUtils.isNotBlank(response.getRelayState())) {\n             // first checks for the provided relay state, if available\n-            relayState = new JwsJwtCompactConsumer(extracted.getRight());\n+            relayState = new JwsJwtCompactConsumer(response.getRelayState());\n             if (!relayState.verifySignatureWith(jwsSignatureCerifier)) {\n                 throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n             }\n@@ -655,7 +641,8 @@ public void validateLogoutResponse(final String accessToken, final InputStream r\n         // 3. parse the provided SAML response\n         LogoutResponse logoutResponse;\n         try {\n-            XMLObject responseObject = saml2rw.read(true, useDeflateEncoding, extracted.getLeft());\n+            XMLObject responseObject = saml2rw.read(\n+                    response.getBindingType(), useDeflateEncoding, response.getSamlResponse());\n             if (!(responseObject instanceof LogoutResponse)) {\n                 throw new IllegalArgumentException(\"Expected \" + LogoutResponse.class.getName()\n                         + \", got \" + responseObject.getClass().getName());"},{"sha":"f9a5eeca4827da2f1d52cedc6037457a1bb4d67b","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n-import org.apache.syncope.core.logic.saml2.SAML2Signer;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n import org.apache.wss4j.common.saml.OpenSAMLUtil;\n@@ -64,9 +63,6 @@ private static <T> T assertNotNull(final T argument, final String name) {\n     @Autowired\n     private SAML2ReaderWriter saml2rw;\n \n-    @Autowired\n-    private SAML2Signer signer;\n-\n     private boolean inited;\n \n     private KeyStore keystore;\n@@ -138,7 +134,6 @@ public void load() {\n             LOG.debug(\"SAML 2.0 Service Provider certificate loaded\");\n \n             saml2rw.init();\n-            signer.init();\n \n             inited = true;\n         } catch (Exception e) {"},{"sha":"a5ab6c30347915094d086d0f19ff20eaf5c8fb4e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCache.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -29,6 +29,7 @@\n import java.util.Map;\n import net.shibboleth.utilities.java.support.xml.XMLParserException;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.logic.init.SAML2SPLoader;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n@@ -66,11 +67,14 @@ public SAML2IdPEntity getFirst() {\n     public SAML2IdPEntity put(\n             final EntityDescriptor entityDescriptor,\n             final MappingItemTO connObjectKeyItem,\n-            final boolean useDeflateEncoding)\n+            final boolean useDeflateEncoding,\n+            final SAML2BindingType bindingType)\n             throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n \n-        return cache.put(entityDescriptor.getEntityID(),\n-                new SAML2IdPEntity(entityDescriptor, connObjectKeyItem, useDeflateEncoding, loader.getKeyPass()));\n+        SAML2IdPEntity idp = new SAML2IdPEntity(\n+                entityDescriptor, connObjectKeyItem, useDeflateEncoding, bindingType, loader.getKeyPass());\n+        cache.put(entityDescriptor.getEntityID(), idp);\n+        return idp;\n     }\n \n     @Transactional(readOnly = true)\n@@ -81,7 +85,11 @@ public SAML2IdPEntity put(final SAML2IdP idp)\n         Element element = OpenSAMLUtil.getParserPool().parse(\n                 new InputStreamReader(new ByteArrayInputStream(idp.getMetadata()))).getDocumentElement();\n         EntityDescriptor entityDescriptor = (EntityDescriptor) OpenSAMLUtil.fromDom(element);\n-        return put(entityDescriptor, binder.getIdPTO(idp).getConnObjectKeyItem(), idp.isUseDeflateEncoding());\n+        return put(\n+                entityDescriptor,\n+                binder.getIdPTO(idp).getConnObjectKeyItem(),\n+                idp.isUseDeflateEncoding(),\n+                idp.getBindingType());\n     }\n \n     public SAML2IdPEntity remove(final String entityID) {"},{"sha":"bd861d17d21b5f86e2a359394c2666aa3a26a221","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -32,6 +32,7 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.opensaml.saml.common.xml.SAMLConstants;\n import org.opensaml.saml.saml2.metadata.Endpoint;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n@@ -52,6 +53,8 @@ public class SAML2IdPEntity {\n \n     private boolean useDeflateEncoding;\n \n+    private SAML2BindingType bindingType;\n+\n     private MappingItemTO connObjectKeyItem;\n \n     private final Map<String, Endpoint> ssoBindings = new HashMap<>();\n@@ -66,12 +69,14 @@ public SAML2IdPEntity(\n             final EntityDescriptor entityDescriptor,\n             final MappingItemTO connObjectKeyItem,\n             final boolean useDeflateEncoding,\n+            final SAML2BindingType bindingType,\n             final String keyPass)\n             throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n \n         this.id = entityDescriptor.getEntityID();\n         this.connObjectKeyItem = connObjectKeyItem;\n         this.useDeflateEncoding = useDeflateEncoding;\n+        this.bindingType = bindingType;\n \n         IDPSSODescriptor idpdescriptor = entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS);\n \n@@ -122,13 +127,21 @@ public String getId() {\n     }\n \n     public boolean isUseDeflateEncoding() {\n-        return useDeflateEncoding;\n+        return bindingType == SAML2BindingType.REDIRECT ? true : useDeflateEncoding;\n     }\n \n     public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n         this.useDeflateEncoding = useDeflateEncoding;\n     }\n \n+    public SAML2BindingType getBindingType() {\n+        return bindingType;\n+    }\n+\n+    public void setBindingType(final SAML2BindingType bindingType) {\n+        this.bindingType = bindingType;\n+    }\n+\n     public MappingItemTO getConnObjectKeyItem() {\n         return connObjectKeyItem;\n     }\n@@ -137,12 +150,12 @@ public void setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n         this.connObjectKeyItem = connObjectKeyItem;\n     }\n \n-    public Endpoint getSSOLocation(final String binding) {\n-        return ssoBindings.get(binding);\n+    public Endpoint getSSOLocation(final SAML2BindingType bindingType) {\n+        return ssoBindings.get(bindingType.getUri());\n     }\n \n-    public Endpoint getSLOLocation(final String binding) {\n-        return sloBindings.get(binding);\n+    public Endpoint getSLOLocation(final SAML2BindingType bindingType) {\n+        return sloBindings.get(bindingType.getUri());\n     }\n \n     public boolean supportsNameIDFormat(final String nameIDFormat) {"},{"sha":"4c1878f512fa687261117d25bf69717fcb58b309","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":93,"deletions":13,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,15 +19,20 @@\n package org.apache.syncope.core.logic.saml2;\n \n import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.StringWriter;\n import java.io.UnsupportedEncodingException;\n import java.io.Writer;\n-import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n import java.security.KeyStore;\n import java.util.Base64;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PrivateKey;\n+import java.security.SignatureException;\n import java.util.zip.DataFormatException;\n import javax.xml.XMLConstants;\n import javax.xml.stream.XMLStreamException;\n@@ -40,12 +45,20 @@\n import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n import org.apache.cxf.staxutils.StaxUtils;\n+import org.apache.syncope.common.lib.SSOConstants;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.logic.init.SAML2SPLoader;\n import org.apache.wss4j.common.crypto.Merlin;\n import org.apache.wss4j.common.ext.WSSecurityException;\n import org.apache.wss4j.common.saml.OpenSAMLUtil;\n import org.opensaml.core.xml.XMLObject;\n+import org.opensaml.saml.common.SignableSAMLObject;\n+import org.opensaml.saml.saml2.core.RequestAbstractType;\n import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.security.SecurityException;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n+import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -71,15 +84,37 @@ public class SAML2ReaderWriter {\n     @Autowired\n     private SAML2SPLoader loader;\n \n+    private KeyInfoGenerator keyInfoGenerator;\n+\n+    private String sigAlgo;\n+\n+    private String jceSigAlgo;\n+\n     private SAMLProtocolResponseValidator protocolValidator;\n \n-    private SAML2IdPCallbackHandler callbackHandler;\n+    private SAMLSPCallbackHandler callbackHandler;\n \n     public void init() {\n+        X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n+        keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n+        keyInfoGenerator = keyInfoGeneratorFactory.newInstance();\n+\n+        sigAlgo = SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1;\n+        jceSigAlgo = \"SHA1withRSA\";\n+        String pubKeyAlgo = loader.getCredential().getPublicKey().getAlgorithm();\n+        if (pubKeyAlgo.equalsIgnoreCase(\"DSA\")) {\n+            sigAlgo = SignatureConstants.ALGO_ID_SIGNATURE_DSA_SHA1;\n+            jceSigAlgo = \"SHA1withDSA\";\n+        }\n+\n         protocolValidator = new SAMLProtocolResponseValidator();\n         protocolValidator.setKeyInfoMustBeAvailable(true);\n \n-        callbackHandler = new SAML2IdPCallbackHandler(loader.getKeyPass());\n+        callbackHandler = new SAMLSPCallbackHandler(loader.getKeyPass());\n+    }\n+\n+    public String getSigAlgo() {\n+        return sigAlgo;\n     }\n \n     public void write(final Writer writer, final XMLObject object, final boolean signObject)\n@@ -91,18 +126,12 @@ public void write(final Writer writer, final XMLObject object, final boolean sig\n         transformer.transform(source, streamResult);\n     }\n \n-    public XMLObject read(final boolean postBinding, final boolean useDeflateEncoding, final String response)\n+    public XMLObject read(final SAML2BindingType bindingType, final boolean useDeflateEncoding, final String response)\n             throws DataFormatException, UnsupportedEncodingException, XMLStreamException, WSSecurityException {\n \n-        String decodedResponse = response;\n-        // URL Decoding only applies for the redirect binding\n-        if (!postBinding) {\n-            decodedResponse = URLDecoder.decode(response, StandardCharsets.UTF_8.name());\n-        }\n-\n         InputStream tokenStream;\n-        byte[] deflatedToken = Base64.getDecoder().decode(decodedResponse);\n-        tokenStream = !postBinding && useDeflateEncoding\n+        byte[] deflatedToken = Base64.getDecoder().decode(response);\n+        tokenStream = bindingType != SAML2BindingType.POST && useDeflateEncoding\n                 ? new DeflateEncoderDecoder().inflateToken(deflatedToken)\n                 : new ByteArrayInputStream(deflatedToken);\n \n@@ -125,6 +154,58 @@ public XMLObject read(final boolean postBinding, final boolean useDeflateEncodin\n         return responseObject;\n     }\n \n+    public void sign(final RequestAbstractType request) throws SecurityException {\n+        org.opensaml.xmlsec.signature.Signature signature = OpenSAMLUtil.buildSignature();\n+        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n+        signature.setSignatureAlgorithm(sigAlgo);\n+        signature.setSigningCredential(loader.getCredential());\n+        signature.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n+\n+        SignableSAMLObject signableObject = (SignableSAMLObject) request;\n+        signableObject.setSignature(signature);\n+        signableObject.releaseDOM();\n+        signableObject.releaseChildrenDOM(true);\n+    }\n+\n+    public String sign(final String request, final String relayState)\n+            throws NoSuchAlgorithmException, WSSecurityException, InvalidKeyException, UnsupportedEncodingException,\n+            SignatureException {\n+\n+        Merlin crypto = new Merlin();\n+        crypto.setKeyStore(loader.getKeyStore());\n+        PrivateKey privateKey = crypto.getPrivateKey(loader.getCredential().getPublicKey(), callbackHandler);\n+\n+        java.security.Signature signature = java.security.Signature.getInstance(jceSigAlgo);\n+        signature.initSign(privateKey);\n+\n+        String requestToSign =\n+                SSOConstants.SAML_REQUEST + \"=\" + request + \"&\"\n+                + SSOConstants.RELAY_STATE + \"=\" + relayState + \"&\"\n+                + SSOConstants.SIG_ALG + \"=\" + URLEncoder.encode(sigAlgo, StandardCharsets.UTF_8.name());\n+        signature.update(requestToSign.getBytes(StandardCharsets.UTF_8));\n+        return Base64.getEncoder().encodeToString(signature.sign());\n+    }\n+\n+    public String encode(final RequestAbstractType request, final boolean useDeflateEncoding)\n+            throws WSSecurityException, TransformerException, IOException {\n+\n+        StringWriter writer = new StringWriter();\n+        write(writer, request, true);\n+        writer.close();\n+\n+        String requestMessage = writer.toString();\n+        byte[] deflatedBytes;\n+        // not correct according to the spec but required by some IdPs.\n+        if (useDeflateEncoding) {\n+            deflatedBytes = new DeflateEncoderDecoder().\n+                    deflateToken(requestMessage.getBytes(StandardCharsets.UTF_8));\n+        } else {\n+            deflatedBytes = requestMessage.getBytes(StandardCharsets.UTF_8);\n+        }\n+\n+        return Base64.getEncoder().encodeToString(deflatedBytes);\n+    }\n+\n     public void validate(final Response samlResponse, final KeyStore idpTrustStore) throws WSSecurityException {\n         // validate the SAML response and, if needed, decrypt the provided assertion(s)\n         Merlin crypto = new Merlin();\n@@ -145,5 +226,4 @@ public void validate(final Response samlResponse, final KeyStore idpTrustStore)\n             }\n         }\n     }\n-\n }"},{"sha":"87c52204d7a5e4fbac2f725ed4dba9a7c63642eb","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2Signer.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2Signer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2Signer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2Signer.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -1,98 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.saml2;\n-\n-import java.io.IOException;\n-import java.io.StringWriter;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Base64;\n-import javax.xml.transform.TransformerException;\n-import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n-import org.apache.syncope.core.logic.init.SAML2SPLoader;\n-import org.apache.wss4j.common.ext.WSSecurityException;\n-import org.apache.wss4j.common.saml.OpenSAMLUtil;\n-import org.opensaml.saml.common.SignableSAMLObject;\n-import org.opensaml.saml.saml2.core.RequestAbstractType;\n-import org.opensaml.security.SecurityException;\n-import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n-import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n-import org.opensaml.xmlsec.signature.Signature;\n-import org.opensaml.xmlsec.signature.support.SignatureConstants;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class SAML2Signer {\n-\n-    @Autowired\n-    private SAML2SPLoader loader;\n-\n-    @Autowired\n-    private SAML2ReaderWriter saml2rw;\n-\n-    private KeyInfoGenerator keyInfoGenerator;\n-\n-    private String signatureAlgorithm;\n-\n-    public void init() {\n-        X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n-        keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n-        keyInfoGenerator = keyInfoGeneratorFactory.newInstance();\n-\n-        signatureAlgorithm = SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1;\n-        String pubKeyAlgo = loader.getCredential().getPublicKey().getAlgorithm();\n-        if (pubKeyAlgo.equalsIgnoreCase(\"DSA\")) {\n-            signatureAlgorithm = SignatureConstants.ALGO_ID_SIGNATURE_DSA_SHA1;\n-        }\n-    }\n-\n-    public String signAndEncode(final RequestAbstractType request, final boolean useDeflateEncoding)\n-            throws SecurityException, WSSecurityException, TransformerException, IOException {\n-\n-        // 1. sign request\n-        Signature signature = OpenSAMLUtil.buildSignature();\n-        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n-        signature.setSignatureAlgorithm(signatureAlgorithm);\n-        signature.setSigningCredential(loader.getCredential());\n-        signature.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n-\n-        SignableSAMLObject signableObject = (SignableSAMLObject) request;\n-        signableObject.setSignature(signature);\n-        signableObject.releaseDOM();\n-        signableObject.releaseChildrenDOM(true);\n-\n-        // 2. serialize and encode request\n-        StringWriter writer = new StringWriter();\n-        saml2rw.write(writer, request, true);\n-        writer.close();\n-\n-        String requestMessage = writer.toString();\n-        byte[] deflatedBytes;\n-        // not correct according to the spec but required by some IdPs.\n-        if (useDeflateEncoding) {\n-            deflatedBytes = new DeflateEncoderDecoder().\n-                    deflateToken(requestMessage.getBytes(StandardCharsets.UTF_8));\n-        } else {\n-            deflatedBytes = requestMessage.getBytes(StandardCharsets.UTF_8);\n-        }\n-\n-        return Base64.getEncoder().encodeToString(deflatedBytes);\n-    }\n-\n-}"},{"sha":"33badc41d3d3f68eda5410b00624d370b7b56ac6","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAMLSPCallbackHandler.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAMLSPCallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAMLSPCallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAMLSPCallbackHandler.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -24,11 +24,11 @@\n import javax.security.auth.callback.UnsupportedCallbackException;\n import org.apache.wss4j.common.ext.WSPasswordCallback;\n \n-public class SAML2IdPCallbackHandler implements CallbackHandler {\n+public class SAMLSPCallbackHandler implements CallbackHandler {\n \n     private final String keyPass;\n \n-    public SAML2IdPCallbackHandler(final String keyPass) {\n+    public SAMLSPCallbackHandler(final String keyPass) {\n         this.keyPass = keyPass;\n     }\n ","previous_filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCallbackHandler.java"},{"sha":"843c8aa121445c93d445236e620c6e6739244ea5","filename":"ext/saml2sp/persistence-api/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fpom.xml?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -43,6 +43,11 @@ under the License.\n       <artifactId>syncope-core-persistence-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"b6fc4c33eaa3cb354d3d799bd13328aef87ec6e2","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n \n public interface SAML2IdP extends Entity {\n@@ -39,6 +40,10 @@ public interface SAML2IdP extends Entity {\n \n     void setUseDeflateEncoding(boolean useDeflateEncoding);\n \n+    SAML2BindingType getBindingType();\n+\n+    void setBindingType(SAML2BindingType bindingType);\n+\n     MappingItem getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(MappingItem item);"},{"sha":"1a41bbc17a9802d6f7352682226cf7f67d6e76c2","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -34,6 +34,7 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n@@ -67,6 +68,9 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @Column(nullable = false)\n     private Integer useDeflateEncoding;\n \n+    @Column(nullable = false)\n+    private SAML2BindingType bindingType;\n+\n     @Override\n     public String getEntityID() {\n         return entityID;\n@@ -107,6 +111,16 @@ public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n         this.useDeflateEncoding = getBooleanAsInteger(useDeflateEncoding);\n     }\n \n+    @Override\n+    public SAML2BindingType getBindingType() {\n+        return bindingType;\n+    }\n+\n+    @Override\n+    public void setBindingType(final SAML2BindingType bindingType) {\n+        this.bindingType = bindingType;\n+    }\n+\n     @Override\n     public boolean add(final MappingItem item) {\n         checkType(item, JPAMappingItem.class);"},{"sha":"5eba217238d47a289af84514174ac352a1789f78","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -172,6 +172,7 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.setName(idpTO.getName());\n         idp.setMetadata(Base64.decode(idpTO.getMetadata()));\n         idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n+        idp.setBindingType(idpTO.getBindingType());\n \n         idp.getMappingItems().clear();\n         AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n@@ -214,6 +215,7 @@ public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n         idpTO.setEntityID(idp.getEntityID());\n         idpTO.setName(idp.getName());\n         idpTO.setUseDeflateEncoding(idp.isUseDeflateEncoding());\n+        idpTO.setBindingType(idp.getBindingType());\n         idpTO.setMetadata(Base64.encode(idp.getMetadata()));\n \n         populateMappingTO(idp, idpTO);"},{"sha":"f3d420c92ebfbe70a82dd8d9d0322e0aa288da3a","filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import java.io.InputStream;\n+import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n@@ -28,6 +28,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n \n /**\n  * REST operations for the provided SAML 2.0 Service Provider.\n@@ -39,11 +40,12 @@ public interface SAML2SPService extends JAXRSService {\n      * Returns the XML metadata for the provided SAML 2.0 Service Provider.\n      *\n      * @param spEntityID SAML 2.0 SP entity ID.\n+     * @param urlContext SAML 2.0 SP agent URL context\n      * @return XML metadata for the provided SAML 2.0 Service Provider\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML })\n-    Response getMetadata(@QueryParam(\"spEntityID\") String spEntityID);\n+    Response getMetadata(@QueryParam(\"spEntityID\") String spEntityID, @QueryParam(\"urlContext\") String urlContext);\n \n     /**\n      * Generates SAML 2.0 authentication request for the IdP matching the provided entity ID.\n@@ -62,13 +64,14 @@ SAML2RequestTO createLoginRequest(\n     /**\n      * Validates the received SAML 2.0 authentication response and creates JWT for the matching user, if found.\n      *\n-     * @param response SAML 2.0 authentication response\n+     * @param response SAML response and relay state\n      * @return JWT for the matching user plus attributes returned in the response\n      */\n     @POST\n     @Path(\"loginResponse\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    SAML2LoginResponseTO validateLoginResponse(InputStream response);\n+    SAML2LoginResponseTO validateLoginResponse(SAML2ReceivedResponseTO response);\n \n     /**\n      * Generates SAML 2.0 logout request for the IdP matching the requesting access token.\n@@ -84,10 +87,11 @@ SAML2RequestTO createLoginRequest(\n     /**\n      * Validates the received SAML 2.0 logout response.\n      *\n-     * @param response SAML 2.0 logout response\n+     * @param response SAML response and relay state\n      */\n     @POST\n     @Path(\"logoutResponse\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    void validateLogoutResponse(InputStream response);\n+    void validateLogoutResponse(SAML2ReceivedResponseTO response);\n }"},{"sha":"191081fff1846002f3e7f39456f9e319aed53075","filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -19,14 +19,14 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.OutputStream;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.core.logic.SAML2SPLogic;\n@@ -40,12 +40,12 @@ public class SAML2SPServiceImpl extends AbstractServiceImpl implements SAML2SPSe\n     private SAML2SPLogic logic;\n \n     @Override\n-    public Response getMetadata(final String spEntityID) {\n+    public Response getMetadata(final String spEntityID, final String urlContext) {\n         StreamingOutput sout = new StreamingOutput() {\n \n             @Override\n             public void write(final OutputStream os) throws IOException {\n-                logic.getMetadata(StringUtils.appendIfMissing(spEntityID, \"/\"), os);\n+                logic.getMetadata(StringUtils.appendIfMissing(spEntityID, \"/\"), urlContext, os);\n             }\n         };\n         return Response.ok(sout).\n@@ -61,8 +61,8 @@ public SAML2RequestTO createLoginRequest(\n     }\n \n     @Override\n-    public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n-        return logic.validateLoginResponse(response);\n+    public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO reponse) {\n+        return logic.validateLoginResponse(reponse);\n     }\n \n     @Override\n@@ -73,10 +73,8 @@ public SAML2RequestTO createLogoutRequest(final String spEntityID) {\n     }\n \n     @Override\n-    public void validateLogoutResponse(final InputStream response) {\n-        logic.validateLogoutResponse(\n-                messageContext.getHttpHeaders().getHeaderString(RESTHeaders.TOKEN),\n-                response);\n+    public void validateLogoutResponse(final SAML2ReceivedResponseTO response) {\n+        logic.validateLogoutResponse(messageContext.getHttpHeaders().getHeaderString(RESTHeaders.TOKEN), response);\n     }\n \n }"},{"sha":"52604c1c9c89441c09ccd8fd13f3a04cc1aeb600","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/SAML2SPDetector.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FSAML2SPDetector.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -39,7 +39,7 @@ public static boolean isSAML2SPAvailable() {\n                             setContentType(SyncopeClientFactoryBean.ContentType.XML).\n                             create(new AnonymousAuthenticationHandler(\n                                     AbstractITCase.ANONYMOUS_UNAME, AbstractITCase.ANONYMOUS_KEY)).\n-                            getService(SAML2SPService.class).getMetadata(\"http://localhost:9080/syncope\");\n+                            getService(SAML2SPService.class).getMetadata(\"http://localhost:9080/syncope\", \"saml2sp\");\n                     ENABLED = true;\n                 } catch (Exception e) {\n                     // ignore"},{"sha":"ece9e6ca13497669f2782ef21eda79a4139d4ab3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/847e0c9ba9e2a353386f18baf5f95043422be338/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/847e0c9ba9e2a353386f18baf5f95043422be338/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=847e0c9ba9e2a353386f18baf5f95043422be338","patch":"@@ -100,7 +100,7 @@ public void spMetadata() {\n         try {\n             SAML2SPService service = anonymous.getService(SAML2SPService.class);\n             WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE);\n-            Response response = service.getMetadata(ADDRESS);\n+            Response response = service.getMetadata(ADDRESS, \"saml2sp\");\n             assertNotNull(response);\n \n             Document responseDoc = StaxUtils.read("}]}