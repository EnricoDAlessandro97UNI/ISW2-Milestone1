{"sha":"54c4706646e1b8e4dede84787f250f97d5323642","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU0YzQ3MDY2NDZlMWI4ZTRkZWRlODQ3ODdmMjUwZjk3ZDUzMjM2NDI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-23T11:07:36Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-23T11:07:36Z"},"message":"Create and list schema and derivedSchema\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246227 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6779b0a2b9680e8b49fe41dffe6c09ec6ce4cd4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f6779b0a2b9680e8b49fe41dffe6c09ec6ce4cd4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/54c4706646e1b8e4dede84787f250f97d5323642","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54c4706646e1b8e4dede84787f250f97d5323642","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/54c4706646e1b8e4dede84787f250f97d5323642","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54c4706646e1b8e4dede84787f250f97d5323642/comments","author":null,"committer":null,"parents":[{"sha":"6a90dbae175ce6c5614e8e7d029e9900692cdc02","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a90dbae175ce6c5614e8e7d029e9900692cdc02","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a90dbae175ce6c5614e8e7d029e9900692cdc02"}],"stats":{"total":757,"additions":531,"deletions":226},"files":[{"sha":"ec42c9356b42a25782f1decc709658d158e437c1","filename":"client/src/main/java/org/syncope/client/to/DerivedSchemaTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -22,6 +22,7 @@ public class DerivedSchemaTO extends AbstractBaseTO {\n     private String name;\n     private String expression;\n     private Set<String> schemas;\n+    private int derivedAttributes;\n \n     public DerivedSchemaTO() {\n         schemas = new HashSet<String>();\n@@ -58,4 +59,12 @@ public Set<String> getSchemas() {\n     public void setSchemas(Set<String> schemas) {\n         this.schemas = schemas;\n     }\n+\n+    public int getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    public void setDerivedAttributes(int derivedAttributes) {\n+        this.derivedAttributes = derivedAttributes;\n+    }\n }"},{"sha":"c8e7d9ab5440e81da83afd6fff6c1500e6a26eb5","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":25,"deletions":16,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -27,6 +27,7 @@ public class SchemaTO extends AbstractBaseTO {\n     private String conversionPattern;\n     private String validatorClass;\n     private Set<String> derivedSchemas;\n+    private int attributes;\n \n     public SchemaTO() {\n         derivedSchemas = new HashSet<String>();\n@@ -40,22 +41,6 @@ public void setConversionPattern(String conversionPattern) {\n         this.conversionPattern = conversionPattern;\n     }\n \n-    public boolean addDerivedSchema(String derivedSchema) {\n-        return derivedSchemas.add(derivedSchema);\n-    }\n-\n-    public boolean removeDerivedSchema(String derivedSchema) {\n-        return derivedSchemas.remove(derivedSchema);\n-    }\n-\n-    public Set<String> getDerivedSchemas() {\n-        return derivedSchemas;\n-    }\n-\n-    public void setDerivedSchemas(Set<String> derivedSchemas) {\n-        this.derivedSchemas = derivedSchemas;\n-    }\n-\n     public boolean isMandatory() {\n         return mandatory;\n     }\n@@ -95,4 +80,28 @@ public String getValidatorClass() {\n     public void setValidatorClass(String validatorClass) {\n         this.validatorClass = validatorClass;\n     }\n+\n+    public boolean addDerivedSchema(String derivedSchema) {\n+        return derivedSchemas.add(derivedSchema);\n+    }\n+\n+    public boolean removeDerivedSchema(String derivedSchema) {\n+        return derivedSchemas.remove(derivedSchema);\n+    }\n+\n+    public Set<String> getDerivedSchemas() {\n+        return derivedSchemas;\n+    }\n+\n+    public void setDerivedSchemas(Set<String> derivedSchemas) {\n+        this.derivedSchemas = derivedSchemas;\n+    }\n+\n+    public int getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(int attributes) {\n+        this.attributes = attributes;\n+    }\n }"},{"sha":"5c1d71cf9376367b11025b890794b13d831e090b","filename":"core/pom.xml","status":"modified","additions":55,"deletions":6,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -33,6 +33,8 @@\n     <properties>\n         <jetty.port>8080</jetty.port>\n \n+        <hsqldb.file>/tmp/syncope-db</hsqldb.file>\n+\n         <logfile>/tmp/syncope-core.log</logfile>\n         <logfile.persistence>/tmp/syncope-core-persistence.log</logfile.persistence>\n         <logfile.rest>/tmp/syncope-core-rest.log</logfile.rest>\n@@ -209,15 +211,56 @@\n                         </goals>\n                         <configuration>\n                             <finalName>integration-test</finalName>\n-                            <classesDirectory>${basedir}/src/test/resources</classesDirectory>\n+                            <classesDirectory>${project.build.directory}/test-classes</classesDirectory>\n                             <includes>\n                                 <include>**/db.properties</include>\n+                                <include>**/content.xml</include>\n                             </includes>\n                         </configuration>\n                     </execution>\n                 </executions>\n             </plugin>\n \n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>exec-maven-plugin</artifactId>\n+                <inherited>true</inherited>\n+                <executions>\n+                    <execution>\n+                        <id>clean-db-test</id>\n+                        <phase>initialize</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>rm</executable>\n+                            <arguments>\n+                                <argument>-f</argument>\n+                                <argument>${hsqldb.file}.log</argument>\n+                                <argument>${hsqldb.file}.properties</argument>\n+                                <argument>${hsqldb.file}.script</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>clean-db-integration-test</id>\n+                        <phase>pre-integration-test</phase>\n+                        <goals>\n+                            <goal>exec</goal>\n+                        </goals>\n+                        <configuration>\n+                            <executable>rm</executable>\n+                            <arguments>\n+                                <argument>-rf</argument>\n+                                <argument>${hsqldb.file}.log</argument>\n+                                <argument>${hsqldb.file}.properties</argument>\n+                                <argument>${hsqldb.file}.script</argument>\n+                            </arguments>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n             <plugin>\n                 <groupId>org.apache.maven.plugins</groupId>\n                 <artifactId>maven-war-plugin</artifactId>\n@@ -230,7 +273,10 @@\n                             <goal>war</goal>\n                         </goals>\n                         <configuration>\n-                            <packagingExcludes>WEB-INF/classes/org/syncope/core/persistence/db.properties</packagingExcludes>\n+                            <packagingExcludes>\n+                                WEB-INF/classes/org/syncope/core/persistence/db.properties,\n+                                WEB-INF/classes/org/syncope/core/persistence/content.xml\n+                            </packagingExcludes>\n                             <webResources>\n                                 <resource>\n                                     <directory>${project.build.directory}</directory>\n@@ -256,7 +302,10 @@\n                             <goal>war</goal>\n                         </goals>\n                         <configuration>\n-                            <packagingExcludes>WEB-INF/lib/integration-test.jar,WEB-INF/lib/hsqldb-${hsqldb.version}.jar</packagingExcludes>\n+                            <packagingExcludes>\n+                                WEB-INF/lib/integration-test.jar,\n+                                WEB-INF/lib/hsqldb-${hsqldb.version}.jar\n+                            </packagingExcludes>\n                         </configuration>\n                     </execution>\n                 </executions>\n@@ -306,7 +355,7 @@\n             <plugin>\n                 <groupId>org.codehaus.mojo</groupId>\n                 <artifactId>hibernate3-maven-plugin</artifactId>\n-                <version>2.2</version>\n+                <inherited>true</inherited>\n                 <configuration>\n                     <components>\n                         <component>\n@@ -316,14 +365,14 @@\n                     </components>\n                     <componentProperties>\n                         <jdk5>true</jdk5>\n-                        <propertyfile>src/test/resources/org/syncope/core/persistence/db.properties</propertyfile>\n+                        <propertyfile>${project.build.directory}/test-classes/org/syncope/core/persistence/db.properties</propertyfile>\n                         <skip>${maven.test.skip}</skip>\n                         <format>true</format>\n                     </componentProperties>\n                 </configuration>\n                 <executions>\n                     <execution>\n-                        <phase>process-test-resources</phase>\n+                        <phase>test-compile</phase>\n                         <goals>\n                             <goal>hbm2ddl</goal>\n                         </goals>"},{"sha":"add8f7e8dded63bb0c1f46fb2a81d33b302eecd6","filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FDefaultContentLoader.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -75,7 +75,7 @@ public void contextInitialized(ServletContextEvent sce) {\n                 dataSetBuilder.setColumnSensing(true);\n                 IDataSet dataSet = dataSetBuilder.build(\n                         getClass().getResourceAsStream(\n-                        \"/org/syncope/core/persistence/defaultContent.xml\"));\n+                        \"/org/syncope/core/persistence/content.xml\"));\n \n                 DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n             }"},{"sha":"92c983b86ccfa18cf7fade3a0a3f6f6d34cd97ac","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -39,8 +39,8 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n     @Column(nullable = false)\n     @Enumerated(STRING)\n     private AttributeType type;\n-    private Boolean mandatory;\n-    private Boolean multivalue;\n+    private boolean mandatory;\n+    private boolean multivalue;\n     @Column(nullable = true)\n     private String conversionPattern;\n     @Column(nullable = true)\n@@ -74,15 +74,15 @@ public boolean isMandatory() {\n         return mandatory;\n     }\n \n-    public void setMandatory(Boolean mandatory) {\n+    public void setMandatory(boolean mandatory) {\n         this.mandatory = mandatory;\n     }\n \n-    public Boolean isMultivalue() {\n+    public boolean isMultivalue() {\n         return multivalue;\n     }\n \n-    public void setMultivalue(Boolean multivalue) {\n+    public void setMultivalue(boolean multivalue) {\n         this.multivalue = multivalue;\n     }\n "},{"sha":"7091533e239f5072715b0ab81815959d2c54f701","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -0,0 +1,39 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.TypeMismatchException;\n+import org.syncope.core.persistence.Attributable;\n+\n+public abstract class AbstractController {\n+\n+    protected static final Logger log = LoggerFactory.getLogger(\n+            AbstractController.class);\n+\n+    protected Attributable getAttributable(String kind) {\n+        Attributable result = null;\n+\n+        try {\n+            result = Attributable.valueOf(kind.toUpperCase());\n+        } catch (Exception e) {\n+            log.error(\"Attributable not supported: \" + kind);\n+            throw new TypeMismatchException(kind, Attributable.class, e);\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"12becf7cc71bbdf924ff795de0f7286a49fee776","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.to.DerivedSchemaTO;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.rest.data.DerivedSchemaDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/derivedSchema\")\n+public class DerivedSchemaController extends AbstractController {\n+\n+    @Autowired\n+    private DerivedSchemaDAO derivedSchemaDAO;\n+    @Autowired\n+    private DerivedSchemaDataBinder derivedSchemaDataBinder;\n+\n+    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n+    public DerivedSchemaTO create(HttpServletResponse response,\n+            @RequestBody DerivedSchemaTO derivedSchemaTO,\n+            @PathVariable(\"kind\") String kind)\n+            throws IOException {\n+\n+        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        AbstractDerivedSchema derivedSchema = null;\n+        try {\n+            derivedSchema = derivedSchemaDataBinder.createDerivedSchema(\n+                    derivedSchemaTO, reference,\n+                    getAttributable(kind).getSchemaClass());\n+        } catch (Exception e) {\n+            log.error(\"Could not crate for  \" + derivedSchemaTO, e);\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+        }\n+\n+        return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n+    public List<DerivedSchemaTO> list(HttpServletRequest request,\n+            @PathVariable(\"kind\") String kind) {\n+\n+        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        List<AbstractDerivedSchema> derivedAttributeSchemas =\n+                derivedSchemaDAO.findAll(reference);\n+\n+        List<DerivedSchemaTO> result =\n+                new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n+        for (AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {\n+\n+            result.add(derivedSchemaDataBinder.getDerivedSchemaTO(\n+                    derivedSchema));\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"8b26902f686cd596a93728830faa5fedf7fe3234","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":22,"deletions":91,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -14,128 +14,59 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.beans.TypeMismatchException;\n+import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.core.persistence.Attributable;\n+import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n \n @Controller\n @RequestMapping(\"/schema\")\n-public class SchemaController {\n+public class SchemaController extends AbstractController {\n \n-    private static final Logger log = LoggerFactory.getLogger(\n-            SchemaController.class);\n+    @Autowired\n     private SchemaDAO schemaDAO;\n-    private DerivedSchemaDAO derivedSchemaDAO;\n-\n     @Autowired\n-    public SchemaController(SchemaDAO schemaDAO,\n-            DerivedSchemaDAO derivedSchemaDAO) {\n-\n-        this.schemaDAO = schemaDAO;\n-        this.derivedSchemaDAO = derivedSchemaDAO;\n-    }\n+    private SchemaDataBinder schemaDataBinder;\n \n-    private Class getSchemaReference(String kind) {\n-        Class result = null;\n+    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n+    public SchemaTO create(HttpServletResponse response,\n+            @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n+            throws IOException {\n \n+        Class reference = getAttributable(kind).getSchemaClass();\n+        AbstractSchema schema = null;\n         try {\n-            result = Attributable.valueOf(kind.toUpperCase()).getSchemaClass();\n+            schema = schemaDataBinder.createSchema(schemaTO, reference,\n+                    getAttributable(kind).getDerivedSchemaClass());\n         } catch (Exception e) {\n-            log.error(\"Attributable not supported: \" + kind);\n-            throw new TypeMismatchException(kind, Attributable.class, e);\n+            log.error(\"Could not crate for  \" + schemaTO, e);\n+            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n         }\n \n-        return result;\n+        return schemaDataBinder.getSchemaTO(schema);\n     }\n \n-    /*@RequestMapping(method = RequestMethod.POST,\n-    value = \"/attribute/\")\n-    public SchemaTO attributeCreate(HttpServletResponse response,\n-    @RequestBody SchemaTO schemaTO) {\n-    }*/\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/attribute/{kind}/list\")\n-    public List<SchemaTO> attributeList(HttpServletRequest request,\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n+    public List<SchemaTO> list(HttpServletRequest request,\n             @PathVariable(\"kind\") String kind) {\n \n-        Class reference = getSchemaReference(kind);\n-\n+        Class reference = getAttributable(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n \n         List<SchemaTO> result = new ArrayList<SchemaTO>(schemas.size());\n-        SchemaTO schemaTO = null;\n-        String[] ignoreProperties = {\"derivedSchemas\"};\n         for (AbstractSchema schema : schemas) {\n-            schemaTO = new SchemaTO();\n-            BeanUtils.copyProperties(schema, schemaTO,\n-                    ignoreProperties);\n-\n-            for (AbstractDerivedSchema derivedSchema :\n-                    schema.getDerivedSchemas()) {\n-\n-                schemaTO.addDerivedSchema(derivedSchema.getName());\n-            }\n-\n-            result.add(schemaTO);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Class getDerivedSchemaReference(String kind) {\n-        Class result = null;\n-\n-        try {\n-            result = Attributable.valueOf(kind.toUpperCase()).getDerivedSchemaClass();\n-        } catch (Exception e) {\n-            log.error(\"Attributable not supported: \" + kind);\n-            throw new TypeMismatchException(kind, Attributable.class, e);\n-        }\n-\n-        return result;\n-    }\n-\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/derivedAttribute/{kind}/list\")\n-    public List<DerivedSchemaTO> derivedAttributeList(\n-            HttpServletRequest request, @PathVariable(\"kind\") String kind) {\n-\n-        Class reference = getDerivedSchemaReference(kind);\n-\n-        List<AbstractDerivedSchema> derivedAttributeSchemas =\n-                derivedSchemaDAO.findAll(reference);\n-        List<DerivedSchemaTO> result =\n-                new ArrayList<DerivedSchemaTO>(\n-                derivedAttributeSchemas.size());\n-        DerivedSchemaTO derivedAttributeSchemaTO = null;\n-        String[] ignoreProperties = {\"schemas\"};\n-        for (AbstractDerivedSchema derivedSchema : derivedAttributeSchemas) {\n-\n-            derivedAttributeSchemaTO = new DerivedSchemaTO();\n-            BeanUtils.copyProperties(derivedSchema,\n-                    derivedAttributeSchemaTO, ignoreProperties);\n-\n-            for (AbstractSchema schema : derivedSchema.getSchemas()) {\n-                derivedAttributeSchemaTO.addSchema(schema.getName());\n-            }\n-\n-            result.add(derivedAttributeSchemaTO);\n+            result.add(schemaDataBinder.getSchemaTO(schema));\n         }\n \n         return result;"},{"sha":"57da476a161c95fc466ad4c8b80719b0edf504dd","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -22,8 +22,6 @@\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -43,10 +41,7 @@\n  */\n @Controller\n @RequestMapping(\"/user\")\n-public class UserController {\n-\n-    private static final Logger log = LoggerFactory.getLogger(\n-            UserController.class);\n+public class UserController extends AbstractController {\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserTO create(HttpServletResponse response,"},{"sha":"ccb041f5b6c2a5ce312b06400714de65b5be18b5","filename":"core/src/main/java/org/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.DerivedSchemaTO;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+\n+@Component\n+public class DerivedSchemaDataBinder {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            DerivedSchemaDataBinder.class);\n+    private static final String[] ignoreDerivedSchemaProperties = {\"schemas\",\n+        \"derivedAttributes\"};\n+    private SchemaDAO schemaDAO;\n+    private DerivedSchemaDAO derivedSchemaDAO;\n+\n+    @Autowired\n+    public DerivedSchemaDataBinder(SchemaDAO schemaDAO,\n+            DerivedSchemaDAO derivedSchemaDAO) {\n+\n+        this.schemaDAO = schemaDAO;\n+        this.derivedSchemaDAO = derivedSchemaDAO;\n+    }\n+\n+    public <T extends AbstractDerivedSchema, K extends AbstractSchema> T createDerivedSchema(\n+            DerivedSchemaTO derivedSchemaTO,\n+            Class<T> derivedReference, Class<K> reference)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        T derivedSchema = derivedReference.newInstance();\n+        BeanUtils.copyProperties(derivedSchemaTO, derivedSchema,\n+                ignoreDerivedSchemaProperties);\n+\n+        AbstractSchema abstractSchema = null;\n+        for (String schema : derivedSchemaTO.getSchemas()) {\n+\n+            abstractSchema = schemaDAO.find(schema, reference);\n+            if (abstractSchema != null) {\n+                derivedSchema.addSchema(abstractSchema);\n+            } else {\n+                log.error(\"Unmatched schema name: \" + schema);\n+            }\n+        }\n+\n+        return derivedSchemaDAO.save(derivedSchema);\n+    }\n+\n+    public <T extends AbstractDerivedSchema> DerivedSchemaTO getDerivedSchemaTO(\n+            T derivedSchema) {\n+\n+        DerivedSchemaTO derivedSchemaTO = new DerivedSchemaTO();\n+        BeanUtils.copyProperties(derivedSchema, derivedSchemaTO,\n+                ignoreDerivedSchemaProperties);\n+\n+        for (AbstractSchema schema : derivedSchema.getSchemas()) {\n+\n+            derivedSchemaTO.addSchema(schema.getName());\n+        }\n+        derivedSchemaTO.setDerivedAttributes(\n+                derivedSchema.getDerivedAttributes().size());\n+\n+        return derivedSchemaTO;\n+    }\n+}"},{"sha":"ed45c502f2e7d212485c3bf9974aae62ca98f6c5","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.SchemaTO;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+\n+@Component\n+public class SchemaDataBinder {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            SchemaDataBinder.class);\n+    private static final String[] ignoreSchemaProperties = {\"derivedSchemas\",\n+        \"attributes\"};\n+    private SchemaDAO schemaDAO;\n+    private DerivedSchemaDAO derivedSchemaDAO;\n+\n+    @Autowired\n+    public SchemaDataBinder(SchemaDAO schemaDAO,\n+            DerivedSchemaDAO derivedSchemaDAO) {\n+\n+        this.schemaDAO = schemaDAO;\n+        this.derivedSchemaDAO = derivedSchemaDAO;\n+    }\n+\n+    public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchema(\n+            SchemaTO schemaTO, Class<T> reference, Class<K> derivedReference)\n+            throws InstantiationException, IllegalAccessException {\n+\n+        T schema = reference.newInstance();\n+        BeanUtils.copyProperties(schemaTO, schema, ignoreSchemaProperties);\n+\n+        AbstractDerivedSchema abstractDerivedSchema = null;\n+        for (String derivedSchema : schemaTO.getDerivedSchemas()) {\n+\n+            abstractDerivedSchema =\n+                    derivedSchemaDAO.find(derivedSchema, derivedReference);\n+            if (abstractDerivedSchema != null) {\n+                schema.addDerivedSchema(abstractDerivedSchema);\n+            } else {\n+                log.error(\"Unmatched derived schema name: \" + derivedSchema);\n+            }\n+        }\n+\n+        return schemaDAO.save(schema);\n+    }\n+\n+    public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema) {\n+        SchemaTO schemaTO = new SchemaTO();\n+        BeanUtils.copyProperties(schema, schemaTO, ignoreSchemaProperties);\n+\n+        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n+\n+            schemaTO.addDerivedSchema(derivedSchema.getName());\n+        }\n+        schemaTO.setAttributes(schema.getAttributes().size());\n+\n+        return schemaTO;\n+    }\n+}"},{"sha":"780ef87017a368374f75620cf541e4815d91fe06","filename":"core/src/main/resources/log4j.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flog4j.xml?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -64,12 +64,7 @@\n         <appender-ref ref=\"rest\"/>\n     </logger>\n \n-    <logger name=\"org.syncope.core.persistence.test\" additivity=\"false\">\n-        <level value=\"INFO\"/>\n-        <appender-ref ref=\"test\"/>\n-    </logger>\n-\n-    <logger name=\"org.syncope.core.rest.test\" additivity=\"false\">\n+    <logger name=\"org.syncope.core.test\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"test\"/>\n     </logger>\n@@ -89,6 +84,11 @@\n         <appender-ref ref=\"test\"/>\n     </logger>\n \n+    <logger name=\"org.springframework.web\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"persistence\"/>\n+    </logger>\n+\n     <logger name=\"org.hibernate\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"persistence\"/>"},{"sha":"9eeea426e66fb14cf3f6da73df6ed4289a22cf8d","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=54c4706646e1b8e4dede84787f250f97d5323642","previous_filename":"core/src/main/resources/org/syncope/core/persistence/defaultContent.xml"},{"sha":"f8a1412019180a9740b7363d5b58c22db8db27cf","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -28,6 +28,7 @@\n \n     <context:annotation-config/>\n     <context:component-scan base-package=\"org.syncope.core.persistence.dao.impl\"/>\n+    <context:component-scan base-package=\"org.syncope.core.rest.data\"/>\n \n     <bean id=\"propertyConfigurer\"\n           class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">"},{"sha":"fd35a320e7a780af26e5b5f5a6d939cfd7fa8202","filename":"core/src/test/java/org/syncope/core/rest/test/SchemaTestITCase.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6a90dbae175ce6c5614e8e7d029e9900692cdc02/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6a90dbae175ce6c5614e8e7d029e9900692cdc02/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java?ref=6a90dbae175ce6c5614e8e7d029e9900692cdc02","patch":"@@ -1,42 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.rest.test;\n-\n-import org.syncope.client.to.DerivedSchemaTO;\n-import java.util.List;\n-import org.junit.Test;\n-import org.syncope.client.to.SchemaTO;\n-import static org.junit.Assert.*;\n-\n-public class SchemaTestITCase extends AbstractTestITCase {\n-\n-    @Test\n-    public void attributeList() {\n-        List<SchemaTO> schemas =\n-                restTemplate.getForObject(BASE_URL\n-                + \"schema/attribute/role/list.json\", List.class);\n-\n-        assertNotNull(schemas);\n-    }\n-\n-    @Test\n-    public void derivedAttributeList() {\n-        List<DerivedSchemaTO> derivedSchemas =\n-                restTemplate.getForObject(BASE_URL\n-                + \"schema/derivedAttribute/user/list.json\", List.class);\n-\n-        assertNotNull(derivedSchemas);\n-    }\n-}"},{"sha":"efba3c855e618a06b4c3550bb9fce9e5b4c0861e","filename":"core/src/test/java/org/syncope/core/test/persistence/AbstractTest.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n@@ -39,10 +39,10 @@\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\"classpath:persistenceContext.xml\"})\n-public abstract class AbstractDAOTest {\n+public abstract class AbstractTest {\n \n     protected static final Logger log = LoggerFactory.getLogger(\n-            AbstractDAOTest.class);\n+            AbstractTest.class);\n     @Autowired\n     private DataSource dataSource;\n     @Autowired\n@@ -89,9 +89,9 @@ public void setUpTestDataWithinTransaction() throws Exception {\n         FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n         dataSetBuilder.setColumnSensing(true);\n         IDataSet dataSet = dataSetBuilder.build(getClass().getResourceAsStream(\n-                \"/org/syncope/core/persistence/dbunitTestData.xml\"));\n+                \"/org/syncope/core/persistence/content.xml\"));\n         try {\n-            DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n+            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n         } catch (Throwable t) {\n             log.error(\"While executing tests\", t);\n         } finally {","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/AbstractDAOTest.java"},{"sha":"2915a49f84500da2671d76d169629ae5942eb9ae","filename":"core/src/test/java/org/syncope/core/test/persistence/AttributeDAOTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAttributeDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -29,7 +29,7 @@\n import org.syncope.types.AttributeType;\n \n @Transactional\n-public class AttributeDAOTest extends AbstractDAOTest {\n+public class AttributeDAOTest extends AbstractTest {\n \n     @Autowired\n     AttributeDAO attributeDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/AttributeDAOTest.java"},{"sha":"5bdb07f36c6925fad8b1829faf34b6ab3efb5685","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -21,10 +21,10 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n-import org.syncope.core.persistence.test.util.WebServiceConfiguration;\n+import org.syncope.core.test.persistence.util.WebServiceConfiguration;\n \n @Transactional\n-public class ConnectorInstanceDAOTest extends AbstractDAOTest {\n+public class ConnectorInstanceDAOTest extends AbstractTest {\n \n     @Autowired\n     ConnectorInstanceDAO connectorInstanceDAO;\n@@ -77,8 +77,7 @@ public final void save() throws ClassNotFoundException {\n \n         assertNotNull(\"save did not work\", actual.getId());\n \n-        assertEquals(\"save did not work\",\n-                Long.valueOf(101L), actual.getId());\n+        assertTrue(\"save did not work\", actual.getId() > 100L);\n \n         assertEquals(\"save did not work for \\\"name\\\" attribute\",\n                 \"WebService\",","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/ConnectorInstanceDAOTest.java"},{"sha":"af592904508c03d4de26813fcbb1447886213b5d","filename":"core/src/test/java/org/syncope/core/test/persistence/DerivedAttributeDAOTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -31,7 +31,7 @@\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n \n @Transactional\n-public class DerivedAttributeDAOTest extends AbstractDAOTest {\n+public class DerivedAttributeDAOTest extends AbstractTest {\n \n     @Autowired\n     DerivedAttributeDAO derivedAttributeDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/DerivedAttributeDAOTest.java"},{"sha":"a3f52b965470b5dd91e2aeecb21b36471a53ef22","filename":"core/src/test/java/org/syncope/core/test/persistence/DerivedSchemaDAOTest.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedSchemaDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -26,25 +26,25 @@\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n \n @Transactional\n-public class DerivedAttributeSchemaDAOTest extends AbstractDAOTest {\n+public class DerivedSchemaDAOTest extends AbstractTest {\n \n     @Autowired\n-    DerivedSchemaDAO derivedAttributeSchemaDAO;\n+    DerivedSchemaDAO derivedSchemaDAO;\n     @Autowired\n-    SchemaDAO attributeSchemaDAO;\n+    SchemaDAO schemaDAO;\n \n     @Test\n     public final void findAll() {\n         List<UserDerivedSchema> list =\n-                derivedAttributeSchemaDAO.findAll(UserDerivedSchema.class);\n+                derivedSchemaDAO.findAll(UserDerivedSchema.class);\n         assertEquals(\"did not get expected number of derived attribute schemas \",\n                 1, list.size());\n     }\n \n     @Test\n     public final void findByName() {\n         UserDerivedSchema attributeSchema =\n-                derivedAttributeSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n         assertNotNull(\"did not find expected derived attribute schema\",\n                 attributeSchema);\n     }\n@@ -56,28 +56,28 @@ public final void save() {\n         derivedAttributeSchema.setName(\"cn2\");\n         derivedAttributeSchema.setExpression(\"firstname surname\");\n         derivedAttributeSchema.addSchema(\n-                attributeSchemaDAO.find(\"firstname\", UserSchema.class));\n+                schemaDAO.find(\"firstname\", UserSchema.class));\n         derivedAttributeSchema.addSchema(\n-                attributeSchemaDAO.find(\"surname\", UserSchema.class));\n+                schemaDAO.find(\"surname\", UserSchema.class));\n \n-        derivedAttributeSchemaDAO.save(derivedAttributeSchema);\n+        derivedSchemaDAO.save(derivedAttributeSchema);\n \n         UserDerivedSchema actual =\n-                derivedAttributeSchemaDAO.find(\"cn2\", UserDerivedSchema.class);\n+                derivedSchemaDAO.find(\"cn2\", UserDerivedSchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(derivedAttributeSchema, actual);\n     }\n \n     @Test\n     public final void delete() {\n         UserDerivedSchema attributeSchema =\n-                derivedAttributeSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n \n-        derivedAttributeSchemaDAO.delete(attributeSchema.getName(),\n+        derivedSchemaDAO.delete(attributeSchema.getName(),\n                 UserDerivedSchema.class);\n \n         UserDerivedSchema actual =\n-                derivedAttributeSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n }","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/DerivedAttributeSchemaDAOTest.java"},{"sha":"2ef67681fd88812a5ceccf7fa86a42633b822fe7","filename":"core/src/test/java/org/syncope/core/test/persistence/EntitlementDAOTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FEntitlementDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -27,7 +27,7 @@\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Transactional\n-public class EntitlementDAOTest extends AbstractDAOTest {\n+public class EntitlementDAOTest extends AbstractTest {\n \n     @Autowired\n     EntitlementDAO entitlementDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/EntitlementDAOTest.java"},{"sha":"a2030f608ff3c78de274db38e67a7c4ede750ebf","filename":"core/src/test/java/org/syncope/core/test/persistence/RelationshipTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FRelationshipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FRelationshipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FRelationshipTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -39,7 +39,7 @@\n  * TODO: complete refactor for http://code.google.com/p/syncope/issues/detail?id=7\n  */\n @Transactional\n-public class RelationshipTest extends AbstractDAOTest {\n+public class RelationshipTest extends AbstractTest {\n \n     @Autowired\n     SchemaDAO attributeSchemaDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/RelationshipTest.java"},{"sha":"c2561125c43dc73a387299c976b5f339b8585024","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"renamed","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,35 +12,38 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.types.AttributeType;\n \n @Transactional\n-public class UserSchemaDAOTest extends AbstractDAOTest {\n+public class SchemaDAOTest extends AbstractTest {\n \n     @Autowired\n-    SchemaDAO userSchemaDAO;\n+    SchemaDAO schemaDAO;\n \n     @Test\n     public final void findAll() {\n-        List<UserSchema> list = userSchemaDAO.findAll(UserSchema.class);\n-        assertEquals(\"did not get expected number of attribute schemas \",\n-                4, list.size());\n+        List<UserSchema> userList = schemaDAO.findAll(UserSchema.class);\n+        assertEquals(4, userList.size());\n+\n+        List<RoleSchema> roleList = schemaDAO.findAll(RoleSchema.class);\n+        assertEquals(2, roleList.size());\n     }\n \n     @Test\n     public final void findByName() {\n         UserSchema attributeSchema =\n-                userSchemaDAO.find(\"username\", UserSchema.class);\n+                schemaDAO.find(\"username\", UserSchema.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attributeSchema);\n     }\n@@ -55,21 +58,21 @@ public final void save() {\n         attributeSchema.setMandatory(false);\n         attributeSchema.setMultivalue(true);\n \n-        userSchemaDAO.save(attributeSchema);\n+        schemaDAO.save(attributeSchema);\n \n-        UserSchema actual = userSchemaDAO.find(\"email\", UserSchema.class);\n+        UserSchema actual = schemaDAO.find(\"email\", UserSchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attributeSchema, actual);\n     }\n \n     @Test\n     public final void delete() {\n         UserSchema schema =\n-                userSchemaDAO.find(\"username\", UserSchema.class);\n+                schemaDAO.find(\"username\", UserSchema.class);\n \n-        userSchemaDAO.delete(schema.getName(), UserSchema.class);\n+        schemaDAO.delete(schema.getName(), UserSchema.class);\n \n-        UserSchema actual = userSchemaDAO.find(\"username\", UserSchema.class);\n+        UserSchema actual = schemaDAO.find(\"username\", UserSchema.class);\n         assertNull(\"delete did not work\", actual);\n     }\n }","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/UserSchemaDAOTest.java"},{"sha":"a480b227dcf898d0f20f9c608511f808b025a14a","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeRoleDAOTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeRoleDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeRoleDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeRoleDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -27,7 +27,7 @@\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Transactional\n-public class SyncopeRoleDAOTest extends AbstractDAOTest {\n+public class SyncopeRoleDAOTest extends AbstractTest {\n \n     @Autowired\n     SyncopeRoleDAO syncopeRoleDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/SyncopeRoleDAOTest.java"},{"sha":"631a29104564ffda78e253a5c8e4a97df928dfc7","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeUserDAOTest.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test;\n+package org.syncope.core.test.persistence;\n \n import static org.junit.Assert.*;\n \n@@ -27,7 +27,7 @@\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Transactional\n-public class SyncopeUserDAOTest extends AbstractDAOTest {\n+public class SyncopeUserDAOTest extends AbstractTest {\n \n     @Autowired\n     SyncopeUserDAO syncopeUserDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/SyncopeUserDAOTest.java"},{"sha":"46f1e0ea9b15fb0818a350dd4da66c1e23f85f20","filename":"core/src/test/java/org/syncope/core/test/persistence/util/WebServiceConfiguration.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Futil%2FWebServiceConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Futil%2FWebServiceConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Futil%2FWebServiceConfiguration.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.test.util;\n+package org.syncope.core.test.persistence.util;\n \n import java.beans.XMLDecoder;\n import java.beans.XMLEncoder;","previous_filename":"core/src/test/java/org/syncope/core/persistence/test/util/WebServiceConfiguration.java"},{"sha":"2fd6249489f663133a5e512745250ef833ae95a0","filename":"core/src/test/java/org/syncope/core/test/rest/AbstractTestITCase.java","status":"renamed","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FAbstractTestITCase.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.rest.test;\n+package org.syncope.core.test.rest;\n \n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -23,10 +23,12 @@\n import org.springframework.web.client.RestTemplate;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"file:src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml\"})\n+@ContextConfiguration(locations = {\"classpath:persistenceContext.xml\",\n+    \"file:src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml\"})\n public abstract class AbstractTestITCase {\n \n-    protected static final Logger log = LoggerFactory.getLogger(SchemaTestITCase.class);\n+    protected static final Logger log = LoggerFactory.getLogger(\n+            AbstractTestITCase.class);\n     protected static final String BASE_URL = \"http://localhost:8080/syncope/\";\n     @Autowired\n     protected RestTemplate restTemplate;","previous_filename":"core/src/test/java/org/syncope/core/rest/test/AbstractTestITCase.java"},{"sha":"ba6b56c8f62f01b7bbba662247cff7aae8175732","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaTestITCase.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.client.to.DerivedSchemaTO;\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.client.to.SchemaTO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.types.AttributeType;\n+import static org.junit.Assert.*;\n+\n+public class SchemaTestITCase extends AbstractTestITCase {\n+\n+    @Autowired\n+    SchemaDAO schemaDAO;\n+    @Autowired\n+    DerivedSchemaDAO derivedSchemaDAO;\n+\n+    @Test\n+    public void attributeList() {\n+        List<SchemaTO> userSchemas =\n+                restTemplate.getForObject(BASE_URL\n+                + \"schema/user/list.json\", List.class);\n+        assertFalse(userSchemas.isEmpty());\n+\n+        List<SchemaTO> roleSchemas = restTemplate.getForObject(BASE_URL\n+                + \"schema/role/list.json\", List.class);\n+        assertFalse(roleSchemas.isEmpty());\n+    }\n+\n+    @Test\n+    public void attributeCreate() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"testAttribute\");\n+        schemaTO.setMandatory(true);\n+        schemaTO.setType(AttributeType.String);\n+\n+        SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n+                + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        assertEquals(schemaTO, newSchemaTO);\n+    }\n+\n+    @Test\n+    public void derivedAttributeList() {\n+        List<DerivedSchemaTO> derivedSchemas =\n+                restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/user/list.json\", List.class);\n+        assertFalse(derivedSchemas.isEmpty());\n+    }\n+}"},{"sha":"f885741c4d6482bf19e1028ccbbc7dfcec33d264","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.rest.test;\n+package org.syncope.core.test.rest;\n \n import static org.junit.Assert.*;\n ","previous_filename":"core/src/test/java/org/syncope/core/rest/test/UserTestITCase.java"},{"sha":"b6e1ec7d5d459d0ea209a7a13f79a4bf2a2de83d","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=54c4706646e1b8e4dede84787f250f97d5323642","previous_filename":"core/src/test/resources/org/syncope/core/persistence/dbunitTestData.xml"},{"sha":"c655a5b0fb0aa4660c42466369887ab4bc63da76","filename":"core/src/test/resources/org/syncope/core/persistence/db.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54c4706646e1b8e4dede84787f250f97d5323642/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties?ref=54c4706646e1b8e4dede84787f250f97d5323642","patch":"@@ -10,7 +10,7 @@\n #  See the License for the specific language governing permissions and\n #  limitations under the License.\n hibernate.connection.driver_class=org.hsqldb.jdbcDriver\n-hibernate.connection.url=jdbc:hsqldb:mem:syncopeTest\n+hibernate.connection.url=jdbc:hsqldb:file:${hsqldb.file}\n hibernate.connection.username=sa\n hibernate.connection.password=\n hibernate.dialect=org.hibernate.dialect.HSQLDialect"}]}