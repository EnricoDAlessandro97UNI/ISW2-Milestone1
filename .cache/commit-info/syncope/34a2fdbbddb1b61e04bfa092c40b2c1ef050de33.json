{"sha":"34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0YTJmZGJiZGRiMWI2MWUwNGJmYTA5MmM0MGIyYzFlZjA1MGRlMzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-09T08:23:47Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-08-09T08:24:30Z"},"message":"[SYNCOPE-1348] The old bulk operations are gone; time for some docs","tree":{"sha":"61ca7c608315217f719a923ef726cf3f530bae54","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/61ca7c608315217f719a923ef726cf3f530bae54"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4"}],"stats":{"total":3098,"additions":1551,"deletions":1547},"files":[{"sha":"29c6feb6382fdeb191de06eaa770cb9292149a74","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeServices.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.client.cli.util.JasyptUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -38,7 +39,7 @@ public final class SyncopeServices {\n \n     private static String SYNCOPE_ADDRESS;\n \n-    public static <T> T get(final Class<T> clazz) {\n+    private static SyncopeClient client() {\n         final Properties properties = new Properties();\n         try (InputStream is = Files.newInputStream(Paths.get(InstallConfigFileTemplate.configurationFilePath()))) {\n             properties.load(is);\n@@ -49,13 +50,19 @@ public static <T> T get(final Class<T> clazz) {\n         String syncopeAdminPassword = JasyptUtils.get().decrypt(properties.getProperty(\"syncope.admin.password\"));\n         SYNCOPE_ADDRESS = properties.getProperty(\"syncope.rest.services\");\n         String useGZIPCompression = properties.getProperty(\"useGZIPCompression\");\n-        SyncopeClient syncopeClient = new SyncopeClientFactoryBean().\n+        return new SyncopeClientFactoryBean().\n                 setAddress(SYNCOPE_ADDRESS).\n                 setUseCompression(BooleanUtils.toBoolean(useGZIPCompression)).\n                 create(properties.getProperty(\"syncope.admin.user\"), syncopeAdminPassword);\n+    }\n \n+    public static <T> T get(final Class<T> clazz) {\n         LOG.debug(\"Creating service for {}\", clazz.getName());\n-        return syncopeClient.getService(clazz);\n+        return client().getService(clazz);\n+    }\n+\n+    public static BatchRequest batch() {\n+        return client().batch();\n     }\n \n     public static String getAddress() {"},{"sha":"e54812dbe2145dac16f8c24c7dfb6154c2b12496","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDeleteAll.java","status":"modified","additions":37,"deletions":17,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDeleteAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDeleteAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDeleteAll.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,19 +18,29 @@\n  */\n package org.apache.syncope.client.cli.commands.user;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Scanner;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class UserDeleteAll extends AbstractUserCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(UserDeleteAll.class);\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     private static final String DELETE_ALL_HELP_MESSAGE = \"user --delete-all {REALM}\";\n \n     private final Input input;\n@@ -59,21 +69,31 @@ public void delete() {\n                             userResultManager.notFoundError(\"Realm\", realm);\n                             return;\n                         }\n-                        final Map<String, BulkActionResult.Status> results = userSyncopeOperations.deleteAll(realm);\n-                        final Map<String, String> users = new HashMap<>();\n-                        int deletedUsers = 0;\n-                        for (final Map.Entry<String, BulkActionResult.Status> entrySet : results.entrySet()) {\n-                            final String userId = entrySet.getKey();\n-                            final BulkActionResult.Status status = entrySet.getValue();\n-                            if (!BulkActionResult.Status.SUCCESS.equals(status)) {\n-                                users.put(userId, status.name());\n+                        List<BatchResponseItem> results = userSyncopeOperations.deleteAll(realm);\n+\n+                        Map<String, String> failedUsers = new HashMap<>();\n+                        AtomicReference<Integer> deletedUsers = new AtomicReference<>(0);\n+\n+                        results.forEach(item -> {\n+                            if (item.getStatus() == Response.Status.OK.getStatusCode()) {\n+                                deletedUsers.getAndSet(deletedUsers.get() + 1);\n                             } else {\n-                                deletedUsers++;\n+                                try {\n+                                    ProvisioningResult<UserTO> user = MAPPER.readValue(item.getContent(),\n+                                            new TypeReference<ProvisioningResult<UserTO>>() {\n+                                    });\n+                                    failedUsers.put(\n+                                            user.getEntity().getUsername(),\n+                                            item.getHeaders().get(RESTHeaders.ERROR_CODE).toString());\n+                                } catch (IOException ioe) {\n+                                    LOG.error(\"Error reading {}\", item.getContent(), ioe);\n+                                }\n                             }\n-                        }\n+                        });\n+\n                         userResultManager.genericMessage(\"Deleted users: \" + deletedUsers);\n-                        if (!users.isEmpty()) {\n-                            userResultManager.printFailedUsers(users);\n+                        if (!failedUsers.isEmpty()) {\n+                            userResultManager.printFailedUsers(failedUsers);\n                         }\n                     } else {\n                         userResultManager.genericError(\"Authentication error\");\n@@ -83,9 +103,9 @@ public void delete() {\n                 } else {\n                     userResultManager.genericError(\"Invalid parameter, please use [yes/no]\");\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                LOG.error(\"Error deleting user\", ex);\n-                userResultManager.genericError(ex.getMessage());\n+            } catch (Exception e) {\n+                LOG.error(\"Error deleting user\", e);\n+                userResultManager.genericError(e.getMessage());\n             }\n         } else {\n             userResultManager.commandOptionError(DELETE_ALL_HELP_MESSAGE);"},{"sha":"f5e735e3185cd600afd23d3509cdbf966d330f2d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserDeleteByAttribute.java","status":"modified","additions":35,"deletions":20,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDeleteByAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDeleteByAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserDeleteByAttribute.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,20 +18,29 @@\n  */\n package org.apache.syncope.client.cli.commands.user;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n-import javax.xml.ws.WebServiceException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class UserDeleteByAttribute extends AbstractUserCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(UserDeleteByAttribute.class);\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     private static final String SEARCH_HELP_MESSAGE = \"user --delete-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\";\n \n     private final Input input;\n@@ -49,34 +58,40 @@ public void delete() {\n                     userResultManager.notFoundError(\"Realm\", realm);\n                     return;\n                 }\n-                Map<String, BulkActionResult.Status> results = userSyncopeOperations.deleteByAttribute(\n+                List<BatchResponseItem> results = userSyncopeOperations.deleteByAttribute(\n                         realm, pairParameter.getKey(), pairParameter.getValue());\n+\n                 Map<String, String> failedUsers = new HashMap<>();\n-                int deletedUsers = 0;\n-                for (final Map.Entry<String, BulkActionResult.Status> entrySet : results.entrySet()) {\n-                    String userId = entrySet.getKey();\n-                    BulkActionResult.Status status = entrySet.getValue();\n-                    if (BulkActionResult.Status.SUCCESS == status) {\n-                        deletedUsers++;\n+                AtomicReference<Integer> deletedUsers = new AtomicReference<>(0);\n+\n+                results.forEach(item -> {\n+                    if (item.getStatus() == Response.Status.OK.getStatusCode()) {\n+                        deletedUsers.getAndSet(deletedUsers.get() + 1);\n                     } else {\n-                        failedUsers.put(userId, status.name());\n+                        try {\n+                            ProvisioningResult<UserTO> user = MAPPER.readValue(item.getContent(),\n+                                    new TypeReference<ProvisioningResult<UserTO>>() {\n+                            });\n+                            failedUsers.put(\n+                                    user.getEntity().getUsername(),\n+                                    item.getHeaders().get(RESTHeaders.ERROR_CODE).toString());\n+                        } catch (IOException ioe) {\n+                            LOG.error(\"Error reading {}\", item.getContent(), ioe);\n+                        }\n                     }\n-                }\n+                });\n+\n                 userResultManager.genericMessage(\"Deleted users: \" + deletedUsers);\n                 if (!failedUsers.isEmpty()) {\n                     userResultManager.printFailedUsers(failedUsers);\n                 }\n-            } catch (WebServiceException | SyncopeClientException ex) {\n-                LOG.error(\"Error searching user\", ex);\n-                if (ex.getMessage().startsWith(\"NotFound\")) {\n+            } catch (Exception e) {\n+                LOG.error(\"Error searching user\", e);\n+                if (e.getMessage().startsWith(\"NotFound\")) {\n                     userResultManager.notFoundError(\"User with \" + pairParameter.getKey(), pairParameter.getValue());\n                 } else {\n-                    userResultManager.genericError(ex.getMessage());\n+                    userResultManager.genericError(e.getMessage());\n                 }\n-            } catch (IllegalArgumentException ex) {\n-                LOG.error(\"Error searching user\", ex);\n-                userResultManager.genericError(ex.getMessage());\n-                userResultManager.genericError(SEARCH_HELP_MESSAGE);\n             }\n         } else {\n             userResultManager.commandOptionError(SEARCH_HELP_MESSAGE);"},{"sha":"9c235751f896b23d53cd38f64dd4087d01fdfa1a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserResultManager.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserResultManager.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -32,9 +32,9 @@ public class UserResultManager extends CommonsResultManager {\n \n     public void printUsers(final List<UserTO> userTOs) {\n         System.out.println(\"\");\n-        for (final UserTO userTO : userTOs) {\n+        userTOs.forEach(userTO -> {\n             printUser(userTO);\n-        }\n+        });\n     }\n \n     private void printUser(final UserTO userTO) {\n@@ -69,40 +69,40 @@ private void printUser(final UserTO userTO) {\n     }\n \n     private void printResource(final Set<String> resources) {\n-        for (final String resource : resources) {\n+        resources.forEach(resource -> {\n             System.out.println(\"       - \" + resource);\n-        }\n+        });\n     }\n \n     private void printRole(final List<String> roles) {\n-        for (final String role : roles) {\n+        roles.forEach((role) -> {\n             System.out.println(\"       - \" + role);\n-        }\n+        });\n     }\n \n     private void printAttributes(final Set<AttrTO> derAttrTOs) {\n-        for (final AttrTO attrTO : derAttrTOs) {\n+        derAttrTOs.forEach(attrTO -> {\n             final StringBuilder attributeSentence = new StringBuilder();\n             attributeSentence.append(\"       \")\n                     .append(attrTO.getSchema())\n                     .append(\": \")\n                     .append(attrTO.getValues());\n             System.out.println(attributeSentence);\n-        }\n+        });\n     }\n \n     private void printRelationships(final List<RelationshipTO> relationshipTOs) {\n-        for (final RelationshipTO relationshipTO : relationshipTOs) {\n+        relationshipTOs.forEach(relationshipTO -> {\n             System.out.println(\"       type: \" + relationshipTO.getType());\n-        }\n+        });\n     }\n \n     public void printFailedUsers(final Map<String, String> users) {\n-        final Table.TableBuilder tableBuilder =\n+        Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"Users not deleted\").header(\"user key\").header(\"cause\");\n-        for (final Map.Entry<String, String> entrySet : users.entrySet()) {\n-            tableBuilder.rowValues(Arrays.asList(entrySet.getKey(), entrySet.getValue()));\n-        }\n+        users.forEach((key, value) -> {\n+            tableBuilder.rowValues(Arrays.asList(key, value));\n+        });\n         tableBuilder.build().print();\n     }\n "},{"sha":"2c712ba28e108e0657af6c2ebad7c9ace9eddff6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/user/UserSyncopeOperations.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fuser%2FUserSyncopeOperations.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,16 +18,17 @@\n  */\n package org.apache.syncope.client.cli.commands.user;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.UserService;\n \n@@ -91,34 +92,35 @@ public void delete(final String userKey) {\n         userService.delete(userKey);\n     }\n \n-    public Map<String, BulkActionResult.Status> deleteByAttribute(\n-            final String realm, final String attributeName, final String attributeValue) {\n+    public List<BatchResponseItem> deleteByAttribute(\n+            final String realm, final String attributeName, final String attributeValue) throws IOException {\n \n-        return bulkDelete(new AnyQuery.Builder().realm(realm).fiql(\n+        return batchDelete(new AnyQuery.Builder().realm(realm).fiql(\n                 SyncopeClient.getUserSearchConditionBuilder().is(attributeName).equalTo(attributeValue).query()).\n                 build());\n     }\n \n-    public Map<String, BulkActionResult.Status> deleteAll(final String realm) {\n-        return bulkDelete(new AnyQuery.Builder().realm(realm).details(false).build());\n+    public List<BatchResponseItem> deleteAll(final String realm) throws IOException {\n+        return batchDelete(new AnyQuery.Builder().realm(realm).details(false).build());\n     }\n \n-    private Map<String, BulkActionResult.Status> bulkDelete(final AnyQuery query) {\n+    private List<BatchResponseItem> batchDelete(final AnyQuery query) throws IOException {\n         query.setPage(0);\n         query.setSize(0);\n         int count = userService.search(query).getTotalCount();\n \n-        BulkAction bulkAction = new BulkAction();\n-        bulkAction.setType(BulkAction.Type.DELETE);\n+        BatchRequest batchRequest = SyncopeServices.batch();\n+        UserService batchUserService = batchRequest.getService(UserService.class);\n \n         query.setSize(PAGE_SIZE);\n         for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n             query.setPage(page);\n \n-            bulkAction.getTargets().addAll(userService.search(query).getResult().stream().\n-                    map(EntityTO::getKey).collect(Collectors.toList()));\n+            userService.search(query).getResult().forEach(user -> batchUserService.delete(user.getKey()));\n         }\n \n-        return userService.bulk(bulkAction).readEntity(BulkActionResult.class).getResults();\n+        Response response = batchRequest.commit().getResponse();\n+        return BatchPayloadParser.parse(\n+                (InputStream) response.getEntity(), response.getMediaType(), new BatchResponseItem());\n     }\n }"},{"sha":"4ff40d28a8efeea54335742530dd9eafd0b73c3d","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -300,7 +300,7 @@ public Integer getMaxWaitTimeInSeconds() {\n \n     public SyncopeClientFactoryBean newClientFactory() {\n         return new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath).\n+                setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\")).\n                 setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n     }\n "},{"sha":"bfde815b55c9e6059ad6da8581ceeb07445b82de","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n@@ -50,6 +52,7 @@\n import org.apache.wicket.request.Request;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.core.task.TaskRejectedException;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n public class SyncopeConsoleSession extends AuthenticatedWebSession {\n@@ -113,11 +116,21 @@ public SyncopeClient getAnonymousClient() {\n     }\n \n     public void execute(final Runnable command) {\n-        executor.execute(command);\n+        try {\n+            executor.execute(command);\n+        } catch (TaskRejectedException e) {\n+            LOG.error(\"Could not execute {}\", command, e);\n+        }\n     }\n \n     public <T> Future<T> execute(final Callable<T> command) {\n-        return executor.submit(command);\n+        try {\n+            return executor.submit(command);\n+        } catch (TaskRejectedException e) {\n+            LOG.error(\"Could not execute {}\", command, e);\n+\n+            return new CompletableFuture<>();\n+        }\n     }\n \n     public PlatformInfo getPlatformInfo() {\n@@ -288,6 +301,10 @@ public <T> T getService(final MediaType mediaType, final Class<T> serviceClass)\n         return service;\n     }\n \n+    public BatchRequest batch() {\n+        return client.batch();\n+    }\n+\n     public <T> void resetClient(final Class<T> service) {\n         T serviceInstance = getCachedService(service);\n         WebClient.client(serviceInstance).reset();"},{"sha":"24f0e5917d9729094bb4dba1ccdc12983aace30f","filename":"client/console/src/main/java/org/apache/syncope/client/console/approvals/ApprovalDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fapprovals%2FApprovalDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -286,7 +286,7 @@ public WorkflowFormTO getObject() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"37daa333a3397b1a3edda8f54dec5dc2d6217fa3","filename":"client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java","status":"added","additions":379,"deletions":0,"changes":379,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -0,0 +1,379 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.batch;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.helpers.CastUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.panels.MultilevelPanel;\n+import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n+import org.apache.syncope.client.console.rest.RestClient;\n+import org.apache.syncope.client.console.rest.UserRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BatchResponseColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n+import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.service.AnyObjectService;\n+import org.apache.syncope.common.rest.api.service.AnyService;\n+import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n+\n+public class BatchContent<T extends Serializable, S> extends MultilevelPanel.SecondLevel {\n+\n+    private static final long serialVersionUID = 4114026480146090963L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(BatchContent.class);\n+\n+    public BatchContent(\n+            final BaseModal<?> modal,\n+            final List<T> items,\n+            final List<IColumn<T, S>> columns,\n+            final Collection<ActionLink.ActionType> actions,\n+            final RestClient batchExecutor,\n+            final String keyFieldName) {\n+\n+        this(MultilevelPanel.SECOND_LEVEL_ID, modal, items, columns, actions, batchExecutor, keyFieldName);\n+    }\n+\n+    public BatchContent(\n+            final String id,\n+            final BaseModal<?> modal,\n+            final List<T> items,\n+            final List<IColumn<T, S>> columns,\n+            final Collection<ActionLink.ActionType> actions,\n+            final RestClient batchExecutor,\n+            final String keyFieldName) {\n+\n+        super(id);\n+\n+        WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        SortableDataProvider<T, S> dataProvider = new SortableDataProvider<T, S>() {\n+\n+            private static final long serialVersionUID = 5291903859908641954L;\n+\n+            @Override\n+            public Iterator<? extends T> iterator(final long first, final long count) {\n+                return items.iterator();\n+            }\n+\n+            @Override\n+            public long size() {\n+                return items.size();\n+            }\n+\n+            @Override\n+            public IModel<T> model(final T object) {\n+                return new CompoundPropertyModel<>(object);\n+            }\n+        };\n+\n+        container.add(new AjaxFallbackDefaultDataTable<>(\n+                \"selectedObjects\",\n+                columns,\n+                dataProvider,\n+                Integer.MAX_VALUE).setMarkupId(\"selectedObjects\").setVisible(!CollectionUtils.isEmpty(items)));\n+\n+        ActionsPanel<Serializable> actionPanel = new ActionsPanel<>(\"actions\", null);\n+        container.add(actionPanel);\n+\n+        for (ActionLink.ActionType action : actions) {\n+            actionPanel.add(new ActionLink<Serializable>() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                protected boolean statusCondition(final Serializable modelObject) {\n+                    return !CollectionUtils.isEmpty(items);\n+                }\n+\n+                @Override\n+                @SuppressWarnings(\"unchecked\")\n+                public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n+                    if (CollectionUtils.isEmpty(items)) {\n+                        throw new IllegalArgumentException(\"Invalid items\");\n+                    }\n+\n+                    Map<String, String> results;\n+                    try {\n+                        T singleItem = items.iterator().next();\n+\n+                        if (singleItem instanceof ExecTO) {\n+                            results = new HashMap<>();\n+                            items.forEach(item -> {\n+                                ExecTO exec = ExecTO.class.cast(item);\n+\n+                                try {\n+                                    batchExecutor.getClass().getMethod(\"deleteExecution\",\n+                                            String.class).invoke(batchExecutor, exec.getKey());\n+                                    results.put(exec.getKey(), ExecStatus.SUCCESS.name());\n+                                } catch (Exception e) {\n+                                    LOG.error(\"Error deleting execution {}\", exec.getKey(), e);\n+                                    results.put(exec.getKey(), ExecStatus.FAILURE.name());\n+                                }\n+                            });\n+                        } else if (singleItem instanceof StatusBean) {\n+                            AbstractAnyRestClient<?> anyRestClient = AbstractAnyRestClient.class.cast(batchExecutor);\n+\n+                            // Group bean information by anyKey\n+                            Map<String, List<StatusBean>> beans = new HashMap<>();\n+                            items.stream().map(bean -> StatusBean.class.cast(bean)).\n+                                    forEachOrdered(sb -> {\n+                                        final List<StatusBean> sblist;\n+                                        if (beans.containsKey(sb.getKey())) {\n+                                            sblist = beans.get(sb.getKey());\n+                                        } else {\n+                                            sblist = new ArrayList<>();\n+                                            beans.put(sb.getKey(), sblist);\n+                                        }\n+                                        sblist.add(sb);\n+                                    });\n+\n+                            results = new HashMap<>();\n+                            beans.forEach((key, value) -> {\n+                                String etag = anyRestClient.read(key).getETagValue();\n+\n+                                switch (action) {\n+                                    case DEPROVISION:\n+                                        results.putAll(anyRestClient.deassociate(\n+                                                ResourceDeassociationAction.DEPROVISION, etag, key, value));\n+                                        break;\n+\n+                                    case UNASSIGN:\n+                                        results.putAll(anyRestClient.deassociate(\n+                                                ResourceDeassociationAction.UNASSIGN, etag, key, value));\n+                                        break;\n+\n+                                    case UNLINK:\n+                                        results.putAll(anyRestClient.deassociate(\n+                                                ResourceDeassociationAction.UNLINK, etag, key, value));\n+                                        break;\n+\n+                                    case ASSIGN:\n+                                        results.putAll(anyRestClient.associate(\n+                                                ResourceAssociationAction.ASSIGN, etag, key, value));\n+                                        break;\n+\n+                                    case LINK:\n+                                        results.putAll(anyRestClient.associate(\n+                                                ResourceAssociationAction.LINK, etag, key, value));\n+                                        break;\n+\n+                                    case PROVISION:\n+                                        results.putAll(anyRestClient.associate(\n+                                                ResourceAssociationAction.PROVISION, etag, key, value));\n+                                        break;\n+\n+                                    case SUSPEND:\n+                                        results.putAll(((UserRestClient) anyRestClient).suspend(etag, key, value));\n+                                        break;\n+\n+                                    case REACTIVATE:\n+                                        results.putAll(((UserRestClient) anyRestClient).reactivate(etag, key, value));\n+                                        break;\n+\n+                                    default:\n+                                }\n+                            });\n+                        } else {\n+                            BatchRequest batch = SyncopeConsoleSession.get().batch();\n+\n+                            UserService batchUserService = batch.getService(UserService.class);\n+                            GroupService batchGroupService = batch.getService(GroupService.class);\n+                            AnyObjectService batchAnyObjectService = batch.getService(AnyObjectService.class);\n+                            AnyService<?> batchAnyService = singleItem instanceof UserTO\n+                                    ? batchUserService\n+                                    : singleItem instanceof GroupTO\n+                                            ? batchGroupService\n+                                            : batchAnyObjectService;\n+                            TaskService batchTaskService = batch.getService(TaskService.class);\n+                            ReportService batchReportService = batch.getService(ReportService.class);\n+\n+                            switch (action) {\n+                                case MUSTCHANGEPASSWORD:\n+                                    items.forEach(item -> {\n+                                        UserTO user = (UserTO) item;\n+\n+                                        UserPatch patch = new UserPatch();\n+                                        patch.setKey(user.getKey());\n+                                        patch.setMustChangePassword(new BooleanReplacePatchItem.Builder().\n+                                                value(!user.isMustChangePassword()).build());\n+\n+                                        batchUserService.update(patch);\n+                                    });\n+                                    break;\n+\n+                                case SUSPEND:\n+                                    items.forEach(item -> {\n+                                        UserTO user = (UserTO) item;\n+\n+                                        StatusPatch patch = new StatusPatch.Builder().\n+                                                key(user.getKey()).\n+                                                type(StatusPatchType.SUSPEND).\n+                                                onSyncope(true).\n+                                                resources(user.getResources()).\n+                                                build();\n+\n+                                        batchUserService.status(patch);\n+                                    });\n+                                    break;\n+\n+                                case REACTIVATE:\n+                                    items.forEach(item -> {\n+                                        UserTO user = (UserTO) item;\n+\n+                                        StatusPatch patch = new StatusPatch.Builder().\n+                                                key(user.getKey()).\n+                                                type(StatusPatchType.REACTIVATE).\n+                                                onSyncope(true).\n+                                                resources(user.getResources()).\n+                                                build();\n+\n+                                        batchUserService.status(patch);\n+                                    });\n+                                    break;\n+\n+                                case DELETE:\n+                                    items.forEach(item -> {\n+                                        if (singleItem instanceof AnyTO) {\n+                                            AnyTO any = (AnyTO) item;\n+\n+                                            batchAnyService.delete(any.getKey());\n+                                        } else if (singleItem instanceof TaskTO) {\n+                                            TaskTO task = (TaskTO) item;\n+\n+                                            batchTaskService.delete(\n+                                                    TaskType.fromTOClass(task.getClass()),\n+                                                    task.getKey());\n+                                        } else if (singleItem instanceof ReportTO) {\n+                                            ReportTO report = (ReportTO) item;\n+\n+                                            batchReportService.delete(report.getKey());\n+                                        } else {\n+                                            LOG.warn(\"Unsupported for DELETE: {}\", singleItem.getClass().getName());\n+                                        }\n+                                    });\n+\n+                                    break;\n+\n+                                case DRYRUN:\n+                                    items.forEach(item -> {\n+                                        TaskTO task = (TaskTO) item;\n+\n+                                        batchTaskService.execute(\n+                                                new ExecuteQuery.Builder().dryRun(true).key(task.getKey()).build());\n+                                    });\n+                                    break;\n+\n+                                case EXECUTE:\n+                                    items.forEach(item -> {\n+                                        if (singleItem instanceof TaskTO) {\n+                                            TaskTO task = (TaskTO) item;\n+\n+                                            batchTaskService.execute(new ExecuteQuery.Builder().\n+                                                    dryRun(false).key(task.getKey()).build());\n+                                        } else if (singleItem instanceof ReportTO) {\n+                                            ReportTO report = (ReportTO) item;\n+\n+                                            batchReportService.execute(new ExecuteQuery.Builder().\n+                                                    key(report.getKey()).build());\n+                                        }\n+                                    });\n+                                    break;\n+\n+                                default:\n+                            }\n+\n+                            results = CastUtils.cast(Map.class.cast(\n+                                    batchExecutor.getClass().getMethod(\"batch\",\n+                                            BatchRequest.class).invoke(batchExecutor, batch)));\n+\n+                            if (singleItem instanceof UserTO) {\n+                                UserRestClient userRestClient = UserRestClient.class.cast(batchExecutor);\n+                                for (int i = 0; i < items.size(); i++) {\n+                                    items.set(i, (T) userRestClient.read(((UserTO) items.get(i)).getKey()));\n+                                }\n+                            }\n+                        }\n+\n+                        List<IColumn<T, S>> newColumnList = new ArrayList<>(columns);\n+                        newColumnList.add(newColumnList.size(), new BatchResponseColumn<>(results, keyFieldName));\n+\n+                        container.addOrReplace(new AjaxFallbackDefaultDataTable<>(\n+                                \"selectedObjects\",\n+                                newColumnList,\n+                                dataProvider,\n+                                Integer.MAX_VALUE).setVisible(!items.isEmpty()));\n+\n+                        actionPanel.setEnabled(false);\n+                        actionPanel.setVisible(false);\n+                        target.add(container);\n+                        target.add(actionPanel);\n+\n+                        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    } catch (Exception e) {\n+                        LOG.error(\"Batch failure\", e);\n+                        SyncopeConsoleSession.get().error(\"Operation \" + action.getActionId() + \" not supported\");\n+                    }\n+                    ((BasePage) getPage()).getNotificationPanel().refresh(target);\n+                }\n+            }, action, StandardEntitlement.CONFIGURATION_LIST).hideLabel();\n+        }\n+    }\n+}"},{"sha":"1d15619db7b24d93606ddf8d2fb94511ceb8dc34","filename":"client/console/src/main/java/org/apache/syncope/client/console/batch/BatchModal.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.client.console.bulk;\n+package org.apache.syncope.client.console.batch;\n \n import java.io.Serializable;\n import java.util.Collection;\n@@ -28,21 +28,21 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n \n-public class BulkActionModal<T extends Serializable, S> extends AbstractModalPanel<T> {\n+public class BatchModal<T extends Serializable, S> extends AbstractModalPanel<T> {\n \n     private static final long serialVersionUID = 4114026480146090962L;\n \n-    public BulkActionModal(\n+    public BatchModal(\n             final BaseModal<T> modal,\n             final PageReference pageRef,\n-            final Collection<T> items,\n+            final List<T> items,\n             final List<IColumn<T, S>> columns,\n             final Collection<ActionLink.ActionType> actions,\n-            final RestClient bulkActionExecutor,\n+            final RestClient batchExecutor,\n             final String keyFieldName) {\n \n         super(modal, pageRef);\n-        add(new BulkContent<>(\"content\", modal, items, columns, actions, bulkActionExecutor, keyFieldName).\n+        add(new BatchContent<>(\"content\", modal, items, columns, actions, batchExecutor, keyFieldName).\n                 setRenderBodyOnly(true));\n     }\n }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkActionModal.java"},{"sha":"552b843073f26688902072ee73d63bc5fd27f4af","filename":"client/console/src/main/java/org/apache/syncope/client/console/bulk/BulkContent.java","status":"removed","additions":0,"deletions":273,"changes":273,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbulk%2FBulkContent.java?ref=0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4","patch":"@@ -1,273 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.bulk;\n-\n-import java.io.Serializable;\n-import java.lang.reflect.InvocationTargetException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.status.StatusBean;\n-import org.apache.syncope.client.console.pages.BasePage;\n-import org.apache.syncope.client.console.panels.MultilevelPanel;\n-import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n-import org.apache.syncope.client.console.rest.RestClient;\n-import org.apache.syncope.client.console.rest.UserRestClient;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BulkActionResultColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n-import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.model.CompoundPropertyModel;\n-import org.apache.wicket.model.IModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n-\n-public class BulkContent<T extends Serializable, S> extends MultilevelPanel.SecondLevel {\n-\n-    private static final long serialVersionUID = 4114026480146090963L;\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(BulkContent.class);\n-\n-    public BulkContent(\n-            final BaseModal<?> modal,\n-            final Collection<T> items,\n-            final List<IColumn<T, S>> columns,\n-            final Collection<ActionLink.ActionType> actions,\n-            final RestClient bulkActionExecutor,\n-            final String keyFieldName) {\n-\n-        this(MultilevelPanel.SECOND_LEVEL_ID, modal, items, columns, actions, bulkActionExecutor, keyFieldName);\n-    }\n-\n-    public BulkContent(\n-            final String id,\n-            final BaseModal<?> modal,\n-            final Collection<T> items,\n-            final List<IColumn<T, S>> columns,\n-            final Collection<ActionLink.ActionType> actions,\n-            final RestClient bulkActionExecutor,\n-            final String keyFieldName) {\n-\n-        super(id);\n-\n-        final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n-        container.setOutputMarkupId(true);\n-        add(container);\n-\n-        final SortableDataProvider<T, S> dataProvider = new SortableDataProvider<T, S>() {\n-\n-            private static final long serialVersionUID = 5291903859908641954L;\n-\n-            @Override\n-            public Iterator<? extends T> iterator(final long first, final long count) {\n-                return items.iterator();\n-            }\n-\n-            @Override\n-            public long size() {\n-                return items.size();\n-            }\n-\n-            @Override\n-            public IModel<T> model(final T object) {\n-                return new CompoundPropertyModel<>(object);\n-            }\n-        };\n-\n-        container.add(new AjaxFallbackDefaultDataTable<>(\n-                \"selectedObjects\",\n-                columns,\n-                dataProvider,\n-                Integer.MAX_VALUE).setMarkupId(\"selectedObjects\").setVisible(items != null && !items.isEmpty()));\n-\n-        final ActionsPanel<Serializable> actionPanel = new ActionsPanel<>(\"actions\", null);\n-        container.add(actionPanel);\n-\n-        for (ActionLink.ActionType action : actions) {\n-            final ActionType actionToBeAddresed = action;\n-\n-            actionPanel.add(new ActionLink<Serializable>() {\n-\n-                private static final long serialVersionUID = -3722207913631435501L;\n-\n-                @Override\n-                protected boolean statusCondition(final Serializable modelObject) {\n-                    return items != null && !items.isEmpty();\n-                }\n-\n-                @Override\n-                public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                    try {\n-                        if (items == null || items.isEmpty()) {\n-                            throw new IllegalArgumentException(\"Invalid items\");\n-                        }\n-\n-                        BulkActionResult res = null;\n-                        try {\n-                            T singleItem = items.iterator().next();\n-                            if (singleItem instanceof StatusBean) {\n-                                throw new IllegalArgumentException(\"Invalid items\");\n-                            }\n-\n-                            if (singleItem instanceof ExecTO) {\n-                                res = new BulkActionResult();\n-                                final Map<String, Status> results = res.getResults();\n-                                items.forEach(item -> {\n-                                    ExecTO exec = ExecTO.class.cast(item);\n-                                    String key = exec.getKey();\n-\n-                                    try {\n-                                        bulkActionExecutor.getClass().getMethod(\"deleteExecution\",\n-                                                String.class).invoke(bulkActionExecutor, exec.getKey());\n-                                        results.put(String.valueOf(key), BulkActionResult.Status.SUCCESS);\n-                                    } catch (Exception e) {\n-                                        LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), key, e);\n-                                        results.put(String.valueOf(key), BulkActionResult.Status.FAILURE);\n-                                    }\n-                                });\n-                            } else {\n-                                final BulkAction bulkAction = new BulkAction();\n-                                bulkAction.setType(BulkAction.Type.valueOf(actionToBeAddresed.name()));\n-                                items.forEach(item -> {\n-                                    try {\n-                                        bulkAction.getTargets().add(getTargetId(item, keyFieldName).toString());\n-                                    } catch (IllegalAccessException | InvocationTargetException e) {\n-                                        LOG.error(\"Error retrieving item id {}\", keyFieldName, e);\n-                                    }\n-                                });\n-                                res = BulkActionResult.class.cast(\n-                                        bulkActionExecutor.getClass().getMethod(\"bulkAction\",\n-                                                BulkAction.class).invoke(bulkActionExecutor, bulkAction));\n-                            }\n-\n-                        } catch (IllegalArgumentException biae) {\n-                            if (!(items.iterator().next() instanceof StatusBean)) {\n-                                throw new IllegalArgumentException(\"Invalid items\");\n-                            }\n-\n-                            if (!(bulkActionExecutor instanceof AbstractAnyRestClient)) {\n-                                throw new IllegalArgumentException(\"Invalid bulk action executor\");\n-                            }\n-\n-                            final AbstractAnyRestClient<?> anyRestClient = AbstractAnyRestClient.class.\n-                                    cast(bulkActionExecutor);\n-\n-                            // Group bean information by anyKey\n-                            final Map<String, List<StatusBean>> beans = new HashMap<>();\n-                            items.stream().map(bean -> StatusBean.class.cast(bean)).\n-                                    forEachOrdered(sb -> {\n-                                        final List<StatusBean> sblist;\n-                                        if (beans.containsKey(sb.getKey())) {\n-                                            sblist = beans.get(sb.getKey());\n-                                        } else {\n-                                            sblist = new ArrayList<>();\n-                                            beans.put(sb.getKey(), sblist);\n-                                        }\n-                                        sblist.add(sb);\n-                                    });\n-\n-                            for (Map.Entry<String, List<StatusBean>> entry : beans.entrySet()) {\n-                                final String etag = anyRestClient.read(entry.getKey()).getETagValue();\n-                                switch (actionToBeAddresed) {\n-                                    case DEPROVISION:\n-                                        res = anyRestClient.deprovision(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case UNASSIGN:\n-                                        res = anyRestClient.unassign(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case UNLINK:\n-                                        res = anyRestClient.unlink(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case ASSIGN:\n-                                        res = anyRestClient.assign(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case LINK:\n-                                        res = anyRestClient.link(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case PROVISION:\n-                                        res = anyRestClient.provision(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case REACTIVATE:\n-                                        res = ((UserRestClient) anyRestClient).\n-                                                reactivate(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    case SUSPEND:\n-                                        res = ((UserRestClient) anyRestClient).\n-                                                suspend(etag, entry.getKey(), entry.getValue());\n-                                        break;\n-                                    default:\n-                                }\n-                            }\n-                        }\n-\n-                        if (modal != null) {\n-                            modal.changeCloseButtonLabel(getString(\"close\", null, \"Close\"), target);\n-                        }\n-\n-                        final List<IColumn<T, S>> newColumnList = new ArrayList<>(columns);\n-                        newColumnList.add(newColumnList.size(), new BulkActionResultColumn<>(res, keyFieldName));\n-\n-                        container.addOrReplace(new AjaxFallbackDefaultDataTable<>(\n-                                \"selectedObjects\",\n-                                newColumnList,\n-                                dataProvider,\n-                                Integer.MAX_VALUE).setVisible(!items.isEmpty()));\n-\n-                        actionPanel.setEnabled(false);\n-                        actionPanel.setVisible(false);\n-                        target.add(container);\n-                        target.add(actionPanel);\n-\n-                        SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                    } catch (IllegalArgumentException | NoSuchMethodException | SecurityException\n-                            | IllegalAccessException | InvocationTargetException e) {\n-                        LOG.error(\"Bulk action failure\", e);\n-                        SyncopeConsoleSession.get().error(\n-                                \"Operation \" + actionToBeAddresed.getActionId() + \" not supported\");\n-                    }\n-                    ((BasePage) getPage()).getNotificationPanel().refresh(target);\n-                }\n-            }, action, StandardEntitlement.CONFIGURATION_LIST).hideLabel();\n-        }\n-    }\n-\n-    private Object getTargetId(final Object target, final String idFieldName)\n-            throws IllegalAccessException, InvocationTargetException {\n-\n-        return BeanUtils.getPropertyDescriptor(target.getClass(), idFieldName).\n-                getReadMethod().invoke(target, new Object[0]);\n-    }\n-}"},{"sha":"2bfd9ed215fbbe0608a62d74ad12d5f4c5a36f63","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -29,6 +29,8 @@ public final class Constants {\n \n     public static final String SYNCOPE = \"syncope\";\n \n+    public static final String UNKNOWN = \"UNKNOWN\";\n+\n     public static final String ROLE_AUTHENTICATED = \"AUTHENTICATED\";\n \n     public static final String MENU_COLLAPSE = \"MENU_COLLAPSE\";"},{"sha":"e63ea0db17c6502072edf873c91dcfb6a22f6fb4","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":17,"deletions":40,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -30,15 +30,14 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.LabelPanel;\n import org.apache.syncope.client.console.rest.ReconciliationRestClient;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -89,31 +88,27 @@ public static StatusBean getStatusBean(\n     }\n \n     public static StatusBean getStatusBean(\n-            final RealmTO anyTO,\n-            final String resourceName,\n-            final ConnObjectTO objectTO) {\n-\n-        final StatusBean statusBean = new StatusBean(anyTO, resourceName);\n+            final RealmTO realmTO,\n+            final String resource,\n+            final ConnObjectTO connObjectTO) {\n \n-        if (objectTO != null) {\n-            final Boolean enabled = isEnabled(objectTO);\n+        StatusBean statusBean = new StatusBean(realmTO, resource);\n \n-            final Status status = enabled == null\n+        if (connObjectTO != null) {\n+            Boolean enabled = isEnabled(connObjectTO);\n+            statusBean.setStatus(enabled == null\n                     ? Status.ACTIVE\n                     : enabled\n                             ? Status.ACTIVE\n-                            : Status.SUSPENDED;\n-\n-            String connObjectLink = getConnObjectLink(objectTO);\n+                            : Status.SUSPENDED);\n \n-            statusBean.setStatus(status);\n-            statusBean.setConnObjectLink(connObjectLink);\n+            statusBean.setConnObjectLink(getConnObjectLink(connObjectTO));\n         }\n \n         return statusBean;\n     }\n \n-    private static Boolean isEnabled(final ConnObjectTO objectTO) {\n+    public static Boolean isEnabled(final ConnObjectTO objectTO) {\n         Optional<AttrTO> status = objectTO.getAttr(ConnIdSpecialName.ENABLE);\n         return status.isPresent() && status.get().getValues() != null && !status.get().getValues().isEmpty()\n                 ? Boolean.valueOf(status.get().getValues().get(0))\n@@ -127,36 +122,18 @@ private static String getConnObjectLink(final ConnObjectTO objectTO) {\n                 : null;\n     }\n \n-    public static PasswordPatch buildPasswordPatch(final String password, final Collection<StatusBean> statuses) {\n-        PasswordPatch.Builder builder = new PasswordPatch.Builder();\n-        builder.value(password);\n-\n-        statuses.forEach((status) -> {\n-            if (Constants.SYNCOPE.equalsIgnoreCase(status.getResource())) {\n-                builder.onSyncope(true);\n-            } else {\n-                builder.resource(status.getResource());\n-            }\n-        });\n-        return builder.build();\n-    }\n-\n-    public static StatusPatch buildStatusPatch(final Collection<StatusBean> statuses) {\n-        return buildStatusPatch(statuses, null);\n-    }\n-\n-    public static StatusPatch buildStatusPatch(final Collection<StatusBean> statuses, final Boolean enable) {\n+    public static StatusPatch.Builder statusPatch(final Collection<StatusBean> statuses) {\n         StatusPatch.Builder builder = new StatusPatch.Builder();\n         builder.onSyncope(false);\n-        statuses.forEach((status) -> {\n-            if (\"syncope\".equalsIgnoreCase(status.getResource())) {\n+        statuses.forEach(status -> {\n+            if (Constants.SYNCOPE.equalsIgnoreCase(status.getResource())) {\n                 builder.onSyncope(true);\n             } else {\n                 builder.resource(status.getResource());\n             }\n         });\n \n-        return builder.build();\n+        return builder;\n     }\n \n     public static Panel getStatusImagePanel(final String componentId, final Status status) {\n@@ -214,11 +191,11 @@ public static Label getStatusImage(final String componentId, final Status status\n         return getLabel(componentId, alt, title, clazz);\n     }\n \n-    public static Panel getStatusImagePanel(final String componentId, final PropagationTaskExecStatus status) {\n+    public static Panel getStatusImagePanel(final String componentId, final ExecStatus status) {\n         return new LabelPanel(componentId, getStatusImage(\"label\", status));\n     }\n \n-    public static Label getStatusImage(final String componentId, final PropagationTaskExecStatus status) {\n+    public static Label getStatusImage(final String componentId, final ExecStatus status) {\n         final String alt, title, clazz;\n \n         switch (status) {"},{"sha":"d5289cd249c8f60f2fd042b4e6eed2f1f93c213b","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/MailTemplateDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FMailTemplateDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -186,7 +186,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"a567e22ad7a6bb20bd9faa1ee9fb3f3117e009ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -161,7 +161,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"f51d647560efe7fa0f93f7ac75de33b9bab0fa34","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Reports.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -68,7 +68,7 @@ public Panel getPanel(final String panelId) {\n                     private static final long serialVersionUID = -2195387360323687302L;\n \n                     @Override\n-                    protected void viewTask(final ReportTO reportTO, final AjaxRequestTarget target) {\n+                    protected void viewReport(final ReportTO reportTO, final AjaxRequestTarget target) {\n                         mlp.next(\n                                 new StringResourceModel(\"report.view\", this, new Model<>(reportTO)).getObject(),\n                                 new ReportExecutionDetails(reportTO, getPageReference()),"},{"sha":"569f571a231089c406c102d4fe73ae53a2d82a60","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -138,7 +138,7 @@ public void onClick(final AjaxRequestTarget target, final AccessTokenTO ignore)\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.emptyList();\n     }\n "},{"sha":"17717c5c8d6a01c74fb12361009c7ac204ae9855","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ActionDataTablePanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -45,7 +45,7 @@\n \n     private static final String CANCEL = \"cancel\";\n \n-    private final Form<T> bulkActionForm;\n+    private final Form<T> batchForm;\n \n     private final ActionsPanel<Serializable> actionPanel;\n \n@@ -57,8 +57,8 @@ public ActionDataTablePanel(\n \n         super(id);\n \n-        bulkActionForm = new Form<>(\"groupForm\");\n-        add(bulkActionForm);\n+        batchForm = new Form<>(\"groupForm\");\n+        add(batchForm);\n \n         group = new ActionTableCheckGroup<T>(\"checkgroup\", model) {\n \n@@ -78,14 +78,14 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 // triggers AJAX form submit\n             }\n         });\n-        bulkActionForm.add(group);\n+        batchForm.add(group);\n \n         columns.add(0, new CheckGroupColumn<>(group));\n         dataTable = new AjaxFallbackDataTable<>(\"dataTable\", columns, dataProvider, rowsPerPage, this);\n         group.add(dataTable);\n \n         final WebMarkupContainer actionPanelContainer = new WebMarkupContainer(\"actionPanelContainer\");\n-        bulkActionForm.add(actionPanelContainer);\n+        batchForm.add(actionPanelContainer);\n \n         actionPanel = new ActionsPanel<>(\"actions\", null);\n         actionPanelContainer.add(actionPanel);\n@@ -94,7 +94,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             actionPanelContainer.add(new AttributeModifier(\"style\", \"display: none\"));\n         }\n \n-        bulkActionForm.add(new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+        batchForm.add(new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n \n             private static final long serialVersionUID = -2341391430136818025L;\n \n@@ -123,7 +123,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n         };\n \n         cancel.setDefaultFormProcessing(false);\n-        bulkActionForm.addOrReplace(cancel);\n+        batchForm.addOrReplace(cancel);\n     }\n \n     public Collection<T> getModelObject() {"},{"sha":"0069c5211515c18cc381a9fc9daf534b373581d2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AjaxDataTablePanel.java","status":"modified","additions":41,"deletions":39,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -26,8 +27,8 @@\n import org.apache.syncope.client.console.rest.BaseRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormChoiceComponentUpdatingBehavior;\n-import org.apache.syncope.client.console.bulk.BulkActionModal;\n-import org.apache.syncope.client.console.bulk.BulkContent;\n+import org.apache.syncope.client.console.batch.BatchModal;\n+import org.apache.syncope.client.console.batch.BatchContent;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.DirectoryPanel.EventDataWrapper;\n import org.apache.syncope.client.console.rest.RestClient;\n@@ -68,9 +69,9 @@\n \n         private int rowsPerPage = 10;\n \n-        private final Collection<ActionLink.ActionType> bulkActions = new ArrayList<>();\n+        private final Collection<ActionLink.ActionType> batches = new ArrayList<>();\n \n-        private RestClient bulkActionExecutor;\n+        private RestClient batchExecutor;\n \n         private String itemKeyField;\n \n@@ -96,13 +97,13 @@ public Builder<T, S> setContainer(final WebMarkupContainer container) {\n             return this;\n         }\n \n-        public Builder<T, S> addBulkAction(final ActionLink.ActionType actionType) {\n-            bulkActions.add(actionType);\n+        public Builder<T, S> addBatch(final ActionLink.ActionType actionType) {\n+            batches.add(actionType);\n             return this;\n         }\n \n-        public Builder<T, S> setBulkActionExecutor(final BaseRestClient bulkActionExecutor) {\n-            this.bulkActionExecutor = bulkActionExecutor;\n+        public Builder<T, S> setBatchExecutor(final BaseRestClient batchExecutor) {\n+            this.batchExecutor = batchExecutor;\n             return this;\n         }\n \n@@ -111,15 +112,16 @@ public Builder<T, S> setItemKeyField(final String itemKeyField) {\n             return this;\n         }\n \n-        public Builder<T, S> setBulkActions(\n-                final Collection<ActionLink.ActionType> bulkActions,\n-                final RestClient bulkActionExecutor,\n+        public Builder<T, S> setBatches(\n+                final Collection<ActionLink.ActionType> batches,\n+                final RestClient batchExecutor,\n                 final String itemKeyField) {\n-            this.bulkActions.clear();\n-            if (bulkActions != null) {\n-                this.bulkActions.addAll(bulkActions);\n+\n+            this.batches.clear();\n+            if (batches != null) {\n+                this.batches.addAll(batches);\n             }\n-            this.bulkActionExecutor = bulkActionExecutor;\n+            this.batchExecutor = batchExecutor;\n             this.itemKeyField = itemKeyField;\n             return this;\n         }\n@@ -147,8 +149,8 @@ public Builder<T, S> disableCheckBoxes() {\n             return this;\n         }\n \n-        private boolean isBulkEnabled() {\n-            return checkBoxEnabled && bulkActionExecutor != null && !bulkActions.isEmpty();\n+        private boolean isBatchEnabled() {\n+            return checkBoxEnabled && batchExecutor != null && !batches.isEmpty();\n         }\n \n         public void setMultiLevelPanel(final BaseModal<?> baseModal, final MultilevelPanel multiLevelPanel) {\n@@ -168,16 +170,17 @@ protected ActionLinksTogglePanel<T> getTogglePanel() {\n     private AjaxDataTablePanel(final String id, final Builder<T, S> builder) {\n         super(id);\n \n-        final BaseModal<T> bulkModal = new BaseModal<>(\"bulkModal\");\n-        add(bulkModal);\n+        BaseModal<T> batchModal = new BaseModal<>(\"batchModal\");\n+        batchModal.size(Modal.Size.Large);\n+        add(batchModal);\n \n-        bulkModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+        batchModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n             private static final long serialVersionUID = 8804221891699487149L;\n \n             @Override\n             public void onClose(final AjaxRequestTarget target) {\n-                bulkModal.show(false);\n+                batchModal.show(false);\n \n                 EventDataWrapper data = new EventDataWrapper();\n                 data.setTarget(target);\n@@ -191,11 +194,11 @@ public void onClose(final AjaxRequestTarget target) {\n             }\n         });\n \n-        Fragment fragment = new Fragment(\"tablePanel\", \"bulkAvailable\", this);\n+        Fragment fragment = new Fragment(\"tablePanel\", \"batchAvailable\", this);\n         add(fragment);\n \n-        Form<T> bulkActionForm = new Form<>(\"groupForm\");\n-        fragment.add(bulkActionForm);\n+        Form<T> batchForm = new Form<>(\"groupForm\");\n+        fragment.add(batchForm);\n \n         group = new CheckGroup<>(\"checkgroup\", model);\n         group.add(new IndicatorAjaxFormChoiceComponentUpdatingBehavior() {\n@@ -210,7 +213,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 });\n             }\n         });\n-        bulkActionForm.add(group);\n+        batchForm.add(group);\n \n         if (builder.checkBoxEnabled) {\n             builder.columns.add(0, new CheckGroupColumn<>(group));\n@@ -237,7 +240,7 @@ protected ActionLinksTogglePanel<T> getTogglePanel() {\n \n         group.add(dataTable);\n \n-        fragment.add(new IndicatingAjaxButton(\"bulkActionLink\", bulkActionForm) {\n+        fragment.add(new IndicatingAjaxButton(\"batchLink\", batchForm) {\n \n             private static final long serialVersionUID = 382302811235019988L;\n \n@@ -249,40 +252,39 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                 }\n \n                 if (builder.multiLevelPanel == null) {\n-                    bulkModal.header(new ResourceModel(\"bulk.action\"));\n-                    bulkModal.changeCloseButtonLabel(getString(\"cancel\", null, \"Cancel\"), target);\n+                    batchModal.header(new ResourceModel(\"batch\"));\n+                    batchModal.changeCloseButtonLabel(getString(\"cancel\", null, \"Cancel\"), target);\n \n-                    target.add(bulkModal.setContent(new BulkActionModal<>(\n-                            bulkModal,\n+                    target.add(batchModal.setContent(new BatchModal<>(\n+                            batchModal,\n                             builder.pageRef,\n                             new ArrayList<>(group.getModelObject()),\n                             builder.columns.size() == 1\n                             ? builder.columns\n                             // serialization problem with sublist only\n                             : new ArrayList<>(builder.columns.subList(1, builder.columns.size())),\n-                            builder.bulkActions,\n-                            builder.bulkActionExecutor,\n+                            builder.batches,\n+                            builder.batchExecutor,\n                             builder.itemKeyField)));\n \n-                    bulkModal.show(true);\n+                    batchModal.show(true);\n                 } else {\n-                    builder.multiLevelPanel.next(\n-                            getString(\"bulk.action\"),\n-                            new BulkContent<>(\n+                    builder.multiLevelPanel.next(getString(\"batch\"),\n+                            new BatchContent<>(\n                                     builder.baseModal,\n                                     new ArrayList<>(group.getModelObject()),\n                                     builder.columns.size() == 1\n                                     ? builder.columns\n                                     // serialization problem with sublist only\n                                     : new ArrayList<>(builder.columns.subList(1, builder.columns.size())),\n-                                    builder.bulkActions,\n-                                    builder.bulkActionExecutor,\n+                                    builder.batches,\n+                                    builder.batchExecutor,\n                                     builder.itemKeyField),\n                             target);\n                 }\n                 group.setModelObject(Collections.<T>emptyList());\n                 target.add(group);\n             }\n-        }.setEnabled(builder.isBulkEnabled()).setVisible(builder.isBulkEnabled()));\n+        }.setEnabled(builder.isBatchEnabled()).setVisible(builder.isBatchEnabled()));\n     }\n }"},{"sha":"8fdc994e652ce32652e887bba59de8fc29849a37","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -221,12 +221,10 @@ public void search(final String fiql, final AjaxRequestTarget target) {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n-        List<ActionLink.ActionType> bulkActions = new ArrayList<>();\n-\n-        bulkActions.add(ActionLink.ActionType.DELETE);\n-\n-        return bulkActions;\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        List<ActionLink.ActionType> batches = new ArrayList<>();\n+        batches.add(ActionLink.ActionType.DELETE);\n+        return batches;\n     }\n \n     public interface AnyDirectoryPanelBuilder extends Serializable {"},{"sha":"280e90b88948ae8753f12bb7fe0c32374431a00f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -110,7 +110,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"97158e5438dbf25433d199624dff75c636590a10","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -109,7 +109,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"5fe68f0d180c95095adbc1366e5a476fec8422f3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -214,7 +214,7 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"271d104ac8eff0222a3859cf734f3b16f3b5805f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -163,7 +163,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n+    protected Collection<ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"c2ef5e5d2fc5ba410d702066e30e53db0437b649","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -297,8 +297,7 @@ protected ActionLinksTogglePanel<T> getTogglePanel() {\n \n         }.\n                 setColumns(getColumns()).\n-                setRowsPerPage(rows).\n-                setBulkActions(getBulkActions(), restClient, itemKeyFieldName).\n+                setRowsPerPage(rows).setBatches(getBatches(), restClient, itemKeyFieldName).\n                 setContainer(container);\n \n         if (!checkBoxEnabled) {\n@@ -397,7 +396,7 @@ public void setRows(final int rows) {\n         }\n     }\n \n-    protected abstract Collection<ActionLink.ActionType> getBulkActions();\n+    protected abstract Collection<ActionLink.ActionType> getBatches();\n \n     public abstract static class Builder<T extends Serializable, W extends Serializable, E extends RestClient>\n             extends WizardMgtPanel.Builder<W> {"},{"sha":"6cc36c6d4c66dd5e6dacacf0b6a2fd95827fd6ed","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -156,7 +156,7 @@ public void onClick(final AjaxRequestTarget target, final DynRealmTO ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"ac5663bb910ed0283dd09ef7add79911ac6b3e67","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -52,7 +52,7 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -274,7 +274,7 @@ public boolean isIndicatorEnabled() {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 try {\n-                    restClient.bulkMembersAction(model.getObject().getKey(), BulkMembersActionType.PROVISION);\n+                    restClient.provisionMembers(model.getObject().getKey(), ProvisionAction.PROVISION);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -288,15 +288,14 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 String.format(\"%s,%s\", StandardEntitlement.TASK_CREATE, StandardEntitlement.TASK_EXECUTE)).\n                 setRealm(realm);\n \n-        panel.add(\n-                new ActionLink<GroupTO>() {\n+        panel.add(new ActionLink<GroupTO>() {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 try {\n-                    restClient.bulkMembersAction(model.getObject().getKey(), BulkMembersActionType.DEPROVISION);\n+                    restClient.provisionMembers(model.getObject().getKey(), ProvisionAction.DEPROVISION);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {"},{"sha":"6d2e0bec35c19332b7f2b65615dbffb279afb447","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -185,7 +185,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"e2ebb57756ede3c97a248194ed0fc438c0e7ff21","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ParametersDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FParametersDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -133,7 +133,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>singletonList(ActionLink.ActionType.DELETE);\n     }\n "},{"sha":"47c972d0466f367c602d0cc2312bd9f5da3ab944","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -127,7 +127,7 @@ public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n+    protected Collection<ActionType> getBatches() {\n         return Collections.<ActionType>emptyList();\n     }\n "},{"sha":"303ec8ef570c2c64bd54b67b35dd14fcbe62497a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -49,7 +49,7 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n@@ -204,7 +204,7 @@ protected Panel customResultBody(final String panelId, final RealmTO item, final\n         add(mlp);\n \n         final PropagationStatus syncope = new PropagationStatus();\n-        syncope.setStatus(PropagationTaskExecStatus.SUCCESS);\n+        syncope.setStatus(ExecStatus.SUCCESS);\n         syncope.setResource(Constants.SYNCOPE);\n \n         List<PropagationStatus> propagations = new ArrayList<>();\n@@ -250,8 +250,8 @@ protected Component getValueComponent(final String key, final PropagationStatus\n             @Override\n             protected boolean statusCondition(final PropagationStatus bean) {\n                 return !Constants.SYNCOPE.equals(bean.getResource())\n-                        && (PropagationTaskExecStatus.CREATED == bean.getStatus()\n-                        || PropagationTaskExecStatus.SUCCESS == bean.getStatus());\n+                        && (ExecStatus.CREATED == bean.getStatus()\n+                        || ExecStatus.SUCCESS == bean.getStatus());\n             }\n \n             @Override"},{"sha":"2df032d0b8b50ab74505a13a0b1a703ae38776db","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -112,7 +112,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"4adb1410c1dcb6abbdd28d316f122379caab0cf1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -302,7 +302,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"a9a0f06232aeac2413f3a10227ef69506b712b62","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -164,7 +164,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n+    protected Collection<ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"c58c095ba3316cd5a12e9add7e3974d79eac4296","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -260,7 +260,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>singletonList(ActionLink.ActionType.DELETE);\n     }\n "},{"sha":"e03aff7eb6cea5129441761a46a529361a4f5620","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -120,7 +120,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"2f05b43faf141b08303b9436c64eb6f841bfc888","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -119,7 +119,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"43ab3011c4f59e88c2f3303e660acf3e6bd74270","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TypeExtensionDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -163,7 +163,7 @@ public void onClick(final AjaxRequestTarget target, final TypeExtensionTO ignore\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.emptyList();\n     }\n "},{"sha":"b0edf6810ceb5d67f84e29caeea63f522590ebb6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -89,15 +89,13 @@ protected String[] getDefaultAttributeSelection() {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        List<ActionType> bulkActions = new ArrayList<>();\n-\n-        bulkActions.add(ActionType.MUSTCHANGEPASSWORD);\n-        bulkActions.add(ActionType.DELETE);\n-        bulkActions.add(ActionType.SUSPEND);\n-        bulkActions.add(ActionType.REACTIVATE);\n-\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        List<ActionType> batches = new ArrayList<>();\n+        batches.add(ActionType.MUSTCHANGEPASSWORD);\n+        batches.add(ActionType.DELETE);\n+        batches.add(ActionType.SUSPEND);\n+        batches.add(ActionType.REACTIVATE);\n+        return batches;\n     }\n \n     @Override"},{"sha":"a640367a9edac27c5941f030838ba0e1fc7dcead","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/WorkflowDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -280,7 +280,7 @@ public void onClick(final AjaxRequestTarget target, final WorkflowDefinitionTO i\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.emptyList();\n     }\n "},{"sha":"3380469b8cfe92d2dc8f9fdfee36b6edeae2f9a0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnySelectionDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnySelectionDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -67,7 +67,7 @@ public void onClick(final AjaxRequestTarget target, final A ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n+    protected Collection<ActionType> getBatches() {\n         return Collections.<ActionType>emptyList();\n     }\n "},{"sha":"5f0952914e57c7da5027251bf7fb524adfc2fbe6","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -194,7 +194,7 @@ protected void addCustomActions(final ActionsPanel<T> panel, final IModel<T> mod\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n+    protected Collection<ActionType> getBatches() {\n         return Collections.<ActionType>emptyList();\n     }\n "},{"sha":"3a14f4179e9e0812f47edeaa190163cacd1cbf75","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -205,10 +205,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        final List<ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionType.DELETE);\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        return Collections.emptyList();\n     }\n \n     @Override"},{"sha":"537f5fda077d54a2a9213a46997f7450dc6781e5","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":22,"deletions":15,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -58,6 +59,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n@@ -112,7 +114,7 @@ protected List<IColumn<ReportTO, String>> getColumns() {\n \n         columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"nextExec\", this), null, \"nextExec\"));\n-        \n+\n         columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"start\", this), \"start\", \"start\"));\n \n@@ -135,13 +137,18 @@ public void populateItem(\n                     final String componentId,\n                     final IModel<ReportTO> rowModel) {\n \n-                JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n-                JobActionPanel panel = new JobActionPanel(\n-                        componentId, jobTO, false, ReportDirectoryPanel.this, pageRef);\n-                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n-                        String.format(\"%s,%s\",\n-                                StandardEntitlement.TASK_EXECUTE,\n-                                StandardEntitlement.TASK_UPDATE));\n+                Component panel;\n+                try {\n+                    JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n+                    panel = new JobActionPanel(componentId, jobTO, false, ReportDirectoryPanel.this, pageRef);\n+                    MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n+                            String.format(\"%s,%s\",\n+                                    StandardEntitlement.REPORT_EXECUTE,\n+                                    StandardEntitlement.REPORT_UPDATE));\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not get job for report {}\", rowModel.getObject().getKey(), e);\n+                    panel = new Label(componentId, Model.of());\n+                }\n                 cellItem.add(panel);\n             }\n \n@@ -218,7 +225,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n-                viewTask(model.getObject(), target);\n+                viewReport(model.getObject(), target);\n             }\n         }, ActionLink.ActionType.VIEW, StandardEntitlement.REPORT_READ);\n \n@@ -257,11 +264,11 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        final List<ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionType.EXECUTE);\n-        bulkActions.add(ActionType.DELETE);\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        List<ActionType> batches = new ArrayList<>();\n+        batches.add(ActionType.EXECUTE);\n+        batches.add(ActionType.DELETE);\n+        return batches;\n     }\n \n     @Override\n@@ -274,7 +281,7 @@ protected String paginatorRowsKey() {\n         return Constants.PREF_REPORT_TASKS_PAGINATOR_ROWS;\n     }\n \n-    protected abstract void viewTask(final ReportTO reportTO, final AjaxRequestTarget target);\n+    protected abstract void viewReport(ReportTO reportTO, AjaxRequestTarget target);\n \n     protected class ReportDataProvider extends DirectoryDataProvider<ReportTO> {\n "},{"sha":"4cd32b7e1e9487538914607d65e875382b4bf427","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportTemplateDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportTemplateDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -205,7 +205,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n \n     }"},{"sha":"7b7edd13086b8ce8babb727abe56f0b4d6ccb1e1","filename":"client/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -191,10 +191,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        final List<ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionType.DELETE);\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        return Collections.emptyList();\n     }\n \n     @Override"},{"sha":"0aa2a2f4d659a234edbfe37cf963f1fd4cb5a638","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":85,"deletions":81,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,19 +18,32 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n@@ -59,112 +72,103 @@ public ProvisioningResult<TO> delete(final String etag, final String key) {\n         return result;\n     }\n \n-    public BulkActionResult unlink(final String etag, final String key, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            AnyService<?> service = getService(etag, getAnyServiceClass());\n-\n-            DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(key).\n-                    action(ResourceDeassociationAction.UNLINK).\n-                    resources(StatusUtils.buildStatusPatch(statuses).getResources()).build();\n-\n-            result = service.deassociate(deassociationPatch).readEntity(BulkActionResult.class);\n-\n-            resetClient(getAnyServiceClass());\n-        }\n-        return result;\n+    private List<BatchResponseItem> parseBatchResponse(final Response response) throws IOException {\n+        return BatchPayloadParser.parse(\n+                (InputStream) response.getEntity(), response.getMediaType(), new BatchResponseItem());\n     }\n \n-    public BulkActionResult link(final String etag, final String key, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            AnyService<?> service = getService(etag, getAnyServiceClass());\n-\n-            StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses);\n+    public Map<String, String> associate(\n+            final ResourceAssociationAction action,\n+            final String etag,\n+            final String key,\n+            final List<StatusBean> statuses) {\n \n-            AssociationPatch associationPatch = new AssociationPatch.Builder().key(key).\n-                    action(ResourceAssociationAction.LINK).\n-                    onSyncope(statusPatch.isOnSyncope()).\n-                    resources(statusPatch.getResources()).build();\n-\n-            result = service.associate(associationPatch).readEntity(BulkActionResult.class);\n-\n-            resetClient(getAnyServiceClass());\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult deprovision(final String etag, final String key, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n+        Map<String, String> result = new LinkedHashMap<>();\n         synchronized (this) {\n             AnyService<?> service = getService(etag, getAnyServiceClass());\n+            Client client = WebClient.client(service);\n+            List<String> accept = client.getHeaders().get(HttpHeaders.ACCEPT);\n+            if (!accept.contains(RESTHeaders.MULTIPART_MIXED)) {\n+                client.accept(RESTHeaders.MULTIPART_MIXED);\n+            }\n \n-            DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(key).\n-                    action(ResourceDeassociationAction.DEPROVISION).\n-                    resources(StatusUtils.buildStatusPatch(statuses).getResources()).build();\n-\n-            result = service.deassociate(deassociationPatch).readEntity(BulkActionResult.class);\n-\n-            resetClient(getAnyServiceClass());\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult provision(final String etag, final String key, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            AnyService<?> service = getService(etag, getAnyServiceClass());\n-\n-            StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses);\n+            StatusPatch statusPatch = StatusUtils.statusPatch(statuses).build();\n \n             AssociationPatch associationPatch = new AssociationPatch.Builder().key(key).\n-                    action(ResourceAssociationAction.PROVISION).\n+                    action(action).\n                     onSyncope(statusPatch.isOnSyncope()).\n                     resources(statusPatch.getResources()).build();\n-\n-            result = service.associate(associationPatch).readEntity(BulkActionResult.class);\n+            try {\n+                List<BatchResponseItem> items = parseBatchResponse(service.associate(associationPatch));\n+                for (int i = 0; i < items.size(); i++) {\n+                    result.put(\n+                            associationPatch.getResources().get(i),\n+                            getStatus(items.get(i).getStatus()));\n+                }\n+            } catch (IOException e) {\n+                LOG.error(\"While processing Batch response\", e);\n+            }\n \n             resetClient(getAnyServiceClass());\n         }\n         return result;\n     }\n \n-    public BulkActionResult unassign(final String etag, final String key, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n+    public Map<String, String> deassociate(\n+            final ResourceDeassociationAction action,\n+            final String etag,\n+            final String key,\n+            final List<StatusBean> statuses) {\n+\n+        Map<String, String> result = new LinkedHashMap<>();\n         synchronized (this) {\n             AnyService<?> service = getService(etag, getAnyServiceClass());\n+            Client client = WebClient.client(service);\n+            List<String> accept = client.getHeaders().get(HttpHeaders.ACCEPT);\n+            if (!accept.contains(RESTHeaders.MULTIPART_MIXED)) {\n+                client.accept(RESTHeaders.MULTIPART_MIXED);\n+            }\n \n             DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(key).\n-                    action(ResourceDeassociationAction.UNASSIGN).\n-                    resources(StatusUtils.buildStatusPatch(statuses).getResources()).build();\n-\n-            result = service.deassociate(deassociationPatch).readEntity(BulkActionResult.class);\n+                    action(action).\n+                    resources(StatusUtils.statusPatch(statuses).build().getResources()).build();\n+            try {\n+                List<BatchResponseItem> items = parseBatchResponse(service.deassociate(deassociationPatch));\n+                for (int i = 0; i < items.size(); i++) {\n+                    result.put(\n+                            deassociationPatch.getResources().get(i),\n+                            getStatus(items.get(i).getStatus()));\n+                }\n+            } catch (IOException e) {\n+                LOG.error(\"While processing Batch response\", e);\n+            }\n \n             resetClient(getAnyServiceClass());\n         }\n         return result;\n     }\n \n-    public BulkActionResult assign(final String etag, final String key, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            AnyService<?> service = getService(etag, getAnyServiceClass());\n-\n-            StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses);\n-\n-            AssociationPatch associationPatch = new AssociationPatch.Builder().key(key).\n-                    action(ResourceAssociationAction.ASSIGN).\n-                    onSyncope(statusPatch.isOnSyncope()).\n-                    resources(statusPatch.getResources()).build();\n-\n-            result = service.associate(associationPatch).readEntity(BulkActionResult.class);\n-\n-            resetClient(getAnyServiceClass());\n+    public Map<String, String> batch(final BatchRequest batchRequest) {\n+        List<BatchRequestItem> batchRequestItems = new ArrayList<>(batchRequest.getItems());\n+\n+        Map<String, String> result = new LinkedHashMap<>();\n+        try {\n+            List<BatchResponseItem> batchResponseItems = batchRequest.commit().getItems();\n+            for (int i = 0; i < batchResponseItems.size(); i++) {\n+                String status = getStatus(batchResponseItems.get(i).getStatus());\n+                if (batchRequestItems.get(i).getRequestURI().endsWith(\"/status\")) {\n+                    result.put(StringUtils.substringAfterLast(\n+                            StringUtils.substringBefore(batchRequestItems.get(i).getRequestURI(), \"/status\"), \"/\"),\n+                            status);\n+                } else {\n+                    result.put(StringUtils.substringAfterLast(\n+                            batchRequestItems.get(i).getRequestURI(), \"/\"), status);\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"While processing Batch response\", e);\n         }\n-        return result;\n-    }\n \n-    public BulkActionResult bulkAction(final BulkAction action) {\n-        return getService(getAnyServiceClass()).bulk(action).readEntity(BulkActionResult.class);\n+        return result;\n     }\n }"},{"sha":"ecea2ae920472b3e364e9c0c19d9783f14536d11","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.client.console.rest;\n \n import java.net.URI;\n-\n import javax.ws.rs.core.HttpHeaders;\n-\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -82,4 +82,11 @@ protected static <E extends JAXRSService, T> T getObject(\n                 header(HttpHeaders.AUTHORIZATION, \"Bearer \" + SyncopeConsoleSession.get().getJWT()).\n                 get(resultClass);\n     }\n+\n+    protected static String getStatus(final int httpStatus) {\n+        ExecStatus execStatus = ExecStatus.fromHttpStatus(httpStatus);\n+        return execStatus == null\n+                ? Constants.UNKNOWN\n+                : execStatus.name();\n+    }\n }"},{"sha":"d8c9ff995c7b5da2f1241e81628161277829968c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ExecutionRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -20,6 +20,8 @@\n \n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n@@ -34,4 +36,6 @@ public interface ExecutionRestClient extends RestClient {\n     List<ExecTO> listExecutions(String taskKey, int page, int size, SortParam<String> sort);\n \n     int countExecutions(String taskKey);\n+\n+    Map<String, String> batch(BatchRequest batchRequest);\n }"},{"sha":"4669d4d2872cf48ee17d8cdd7c8b4a295b2d295c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n@@ -80,7 +80,7 @@ public List<GroupTO> search(\n                         orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n \n-    public void bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n-        getService(GroupService.class).bulkMembersAction(key, actionType);\n+    public void provisionMembers(final String key, final ProvisionAction actionType) {\n+        getService(GroupService.class).provisionMembers(key, actionType);\n     }\n }"},{"sha":"8b609411b75a523d67a608b01e1e1112a11db94a","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":29,"deletions":19,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,23 +18,29 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import static org.apache.syncope.client.console.rest.BaseRestClient.getStatus;\n+\n+import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Date;\n+import java.util.LinkedHashMap;\n import java.util.List;\n-import javax.ws.rs.NotSupportedException;\n+import java.util.Map;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n@@ -155,25 +161,29 @@ public void updateTemplateFormat(final String key, final String content, final R\n                 key, format, IOUtils.toInputStream(content, StandardCharsets.UTF_8));\n     }\n \n-    public BulkActionResult bulkAction(final BulkAction action) {\n-        BulkActionResult result = new BulkActionResult();\n+    @Override\n+    public Map<String, String> batch(final BatchRequest batchRequest) {\n+        List<BatchRequestItem> batchRequestItems = new ArrayList<>(batchRequest.getItems());\n \n-        switch (action.getType()) {\n-            case DELETE:\n-                for (String target : action.getTargets()) {\n-                    delete(target);\n-                    result.getResults().put(target, BulkActionResult.Status.SUCCESS);\n-                }\n-                break;\n-            case EXECUTE:\n-                for (String target : action.getTargets()) {\n-                    startExecution(target, null);\n-                    result.getResults().put(target, BulkActionResult.Status.SUCCESS);\n+        Map<String, String> result = new LinkedHashMap<>();\n+        try {\n+            List<BatchResponseItem> batchResponseItems = batchRequest.commit().getItems();\n+            for (int i = 0; i < batchResponseItems.size(); i++) {\n+                String status = getStatus(batchResponseItems.get(i).getStatus());\n+\n+                if (batchRequestItems.get(i).getRequestURI().contains(\"/execute\")) {\n+                    result.put(StringUtils.substringAfterLast(\n+                            StringUtils.substringBefore(batchRequestItems.get(i).getRequestURI(), \"/execute\"), \"/\"),\n+                            status);\n+                } else {\n+                    result.put(StringUtils.substringAfterLast(\n+                            batchRequestItems.get(i).getRequestURI(), \"/\"), status);\n                 }\n-                break;\n-            default:\n-                throw new NotSupportedException(action.getType().name());\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"While processing Batch response\", e);\n         }\n+\n         return result;\n     }\n }"},{"sha":"c8e135bf035fef5de2609960938d1f29ec13d0d0","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -24,12 +24,9 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -116,19 +113,6 @@ public void delete(final String name) {\n         getService(ResourceService.class).delete(name);\n     }\n \n-    public BulkActionResult bulkAssociationAction(\n-            final String resourceName, final String anyTypeName,\n-            final ResourceDeassociationAction action, final List<String> anyKeys) {\n-\n-        ResourceDeassociationPatch patch = new ResourceDeassociationPatch();\n-        patch.setKey(resourceName);\n-        patch.setAnyTypeKey(anyTypeName);\n-        patch.setAction(action);\n-        patch.getAnyKyes().addAll(anyKeys);\n-\n-        return getService(ResourceService.class).bulkDeassociation(patch);\n-    }\n-\n     public void setLatestSyncToken(final String key, final String anyType) {\n         getService(ResourceService.class).setLatestSyncToken(key, anyType);\n     }"},{"sha":"2e6692e5be516c8c4a0f672b6c6ed27d50b19b07","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":32,"deletions":4,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,11 +18,15 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.io.IOException;\n+import java.util.ArrayList;\n import java.util.Date;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.to.TaskTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -34,6 +38,8 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -228,7 +234,29 @@ public void update(final TaskType type, final SchedTaskTO taskTO) {\n         getService(TaskService.class).update(type, taskTO);\n     }\n \n-    public BulkActionResult bulkAction(final BulkAction action) {\n-        return getService(TaskService.class).bulk(action);\n+    @Override\n+    public Map<String, String> batch(final BatchRequest batchRequest) {\n+        List<BatchRequestItem> batchRequestItems = new ArrayList<>(batchRequest.getItems());\n+\n+        Map<String, String> result = new LinkedHashMap<>();\n+        try {\n+            List<BatchResponseItem> batchResponseItems = batchRequest.commit().getItems();\n+            for (int i = 0; i < batchResponseItems.size(); i++) {\n+                String status = getStatus(batchResponseItems.get(i).getStatus());\n+\n+                if (batchRequestItems.get(i).getRequestURI().contains(\"/execute\")) {\n+                    result.put(StringUtils.substringAfterLast(\n+                            StringUtils.substringBefore(batchRequestItems.get(i).getRequestURI(), \"/execute\"), \"/\"),\n+                            status);\n+                } else {\n+                    result.put(StringUtils.substringAfterLast(\n+                            batchRequestItems.get(i).getRequestURI(), \"/\"), status);\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"While processing Batch response\", e);\n+        }\n+\n+        return result;\n     }\n }"},{"sha":"11eb0fad70d46caae51bd550c29256e3675b1df4","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":48,"deletions":46,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,20 +18,21 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.status.Status;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n@@ -85,69 +86,70 @@ public List<UserTO> search(\n     }\n \n     public ProvisioningResult<UserTO> mustChangePassword(final String etag, final boolean value, final String key) {\n-        final UserPatch userPatch = new UserPatch();\n+        UserPatch userPatch = new UserPatch();\n         userPatch.setKey(key);\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(value).build());\n         return update(etag, userPatch);\n     }\n \n-    public BulkActionResult suspend(final String etag, final String userKey, final List<StatusBean> statuses) {\n-        StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses, false);\n-        statusPatch.setKey(userKey);\n-        statusPatch.setType(StatusPatchType.SUSPEND);\n+    private Map<String, String> status(\n+            final StatusPatchType type, final String etag, final String userKey, final List<StatusBean> statuses) {\n \n-        BulkActionResult bulkActionResult;\n+        StatusPatch statusPatch = StatusUtils.statusPatch(statuses).key(userKey).type(type).build();\n+\n+        Map<String, String> results;\n         synchronized (this) {\n-            bulkActionResult = new BulkActionResult();\n-            Map<String, BulkActionResult.Status> results = bulkActionResult.getResults();\n-            UserService service = getService(etag, UserService.class);\n+            ProvisioningResult<UserTO> provisioningResult = getService(etag, UserService.class).status(statusPatch).\n+                    readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+                    });\n \n-            ProvisioningResult<UserTO> provisioningResult = service.status(statusPatch).readEntity(\n-                    new GenericType<ProvisioningResult<UserTO>>() {\n+            statuses.forEach(statusBean -> statusBean.setStatus(Status.UNDEFINED));\n+\n+            results = new HashMap<>();\n+            provisioningResult.getPropagationStatuses().forEach(propagationStatus -> {\n+                results.put(propagationStatus.getResource(), propagationStatus.getStatus().name());\n+\n+                if (propagationStatus.getAfterObj() != null) {\n+                    Boolean enabled = StatusUtils.isEnabled(propagationStatus.getAfterObj());\n+                    if (enabled != null) {\n+                        statuses.stream().\n+                                filter(statusBean -> propagationStatus.getResource().equals(statusBean.getResource())).\n+                                findFirst().\n+                                ifPresent(statusBean -> statusBean.setStatus(\n+                                enabled ? Status.ACTIVE : Status.SUSPENDED));\n+                    }\n+                }\n             });\n-\n+            statuses.stream().\n+                    filter(statusBean -> Constants.SYNCOPE.equals(statusBean.getResource())).\n+                    findFirst().\n+                    ifPresent(statusBean -> statusBean.setStatus(\n+                    \"suspended\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n+                    ? Status.SUSPENDED : Status.ACTIVE));\n             if (statusPatch.isOnSyncope()) {\n                 results.put(Constants.SYNCOPE,\n-                        \"suspended\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n-                        ? BulkActionResult.Status.SUCCESS\n-                        : BulkActionResult.Status.FAILURE);\n+                        (\"suspended\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n+                        && type == StatusPatchType.SUSPEND)\n+                        || (\"active\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n+                        && type == StatusPatchType.REACTIVATE)\n+                                ? ExecStatus.SUCCESS.name()\n+                                : ExecStatus.FAILURE.name());\n             }\n \n-            for (PropagationStatus status : provisioningResult.getPropagationStatuses()) {\n-                results.put(status.getResource(), BulkActionResult.Status.valueOf(status.getStatus().name()));\n-            }\n             resetClient(UserService.class);\n         }\n-        return bulkActionResult;\n+        return results;\n     }\n \n-    public BulkActionResult reactivate(final String etag, final String userKey, final List<StatusBean> statuses) {\n-        StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses, true);\n-        statusPatch.setKey(userKey);\n-        statusPatch.setType(StatusPatchType.REACTIVATE);\n-\n-        BulkActionResult bulkActionResult;\n-        synchronized (this) {\n-            bulkActionResult = new BulkActionResult();\n-            Map<String, BulkActionResult.Status> results = bulkActionResult.getResults();\n-            UserService service = getService(etag, UserService.class);\n+    public Map<String, String> suspend(\n+            final String etag, final String userKey, final List<StatusBean> statuses) {\n \n-            ProvisioningResult<UserTO> provisioningResult = service.status(statusPatch).readEntity(\n-                    new GenericType<ProvisioningResult<UserTO>>() {\n-            });\n+        return status(StatusPatchType.SUSPEND, etag, userKey, statuses);\n+    }\n \n-            if (statusPatch.isOnSyncope()) {\n-                results.put(Constants.SYNCOPE,\n-                        \"active\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n-                        ? BulkActionResult.Status.SUCCESS\n-                        : BulkActionResult.Status.FAILURE);\n-            }\n+    public Map<String, String> reactivate(\n+            final String etag, final String userKey, final List<StatusBean> statuses) {\n \n-            for (PropagationStatus status : provisioningResult.getPropagationStatuses()) {\n-                results.put(status.getResource(), BulkActionResult.Status.valueOf(status.getStatus().name()));\n-            }\n-            resetClient(UserService.class);\n-        }\n-        return bulkActionResult;\n+        return status(StatusPatchType.REACTIVATE, etag, userKey, statuses);\n     }\n }"},{"sha":"fe67ff6dc7c605cb41c9e6e038add4679859181a","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -247,20 +247,20 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n-        List<ActionLink.ActionType> bulkActions = new ArrayList<>();\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        List<ActionLink.ActionType> batches = new ArrayList<>();\n         if (statusOnly) {\n-            bulkActions.add(ActionLink.ActionType.SUSPEND);\n-            bulkActions.add(ActionLink.ActionType.REACTIVATE);\n+            batches.add(ActionLink.ActionType.SUSPEND);\n+            batches.add(ActionLink.ActionType.REACTIVATE);\n         } else {\n-            bulkActions.add(ActionLink.ActionType.UNLINK);\n-            bulkActions.add(ActionLink.ActionType.LINK);\n-            bulkActions.add(ActionLink.ActionType.DEPROVISION);\n-            bulkActions.add(ActionLink.ActionType.PROVISION);\n-            bulkActions.add(ActionLink.ActionType.ASSIGN);\n-            bulkActions.add(ActionLink.ActionType.UNASSIGN);\n+            batches.add(ActionLink.ActionType.UNLINK);\n+            batches.add(ActionLink.ActionType.LINK);\n+            batches.add(ActionLink.ActionType.DEPROVISION);\n+            batches.add(ActionLink.ActionType.PROVISION);\n+            batches.add(ActionLink.ActionType.ASSIGN);\n+            batches.add(ActionLink.ActionType.UNASSIGN);\n         }\n-        return bulkActions;\n+        return batches;\n     }\n \n     @Override"},{"sha":"bba8d2f0729846e906440dff77575f679714c6fc","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -215,15 +215,15 @@ public void updateResultTable(final String type, final AjaxRequestTarget target)\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n-        List<ActionLink.ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionLink.ActionType.UNLINK);\n-        bulkActions.add(ActionLink.ActionType.LINK);\n-        bulkActions.add(ActionLink.ActionType.DEPROVISION);\n-        bulkActions.add(ActionLink.ActionType.PROVISION);\n-        bulkActions.add(ActionLink.ActionType.ASSIGN);\n-        bulkActions.add(ActionLink.ActionType.UNASSIGN);\n-        return bulkActions;\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        List<ActionLink.ActionType> batches = new ArrayList<>();\n+        batches.add(ActionLink.ActionType.UNLINK);\n+        batches.add(ActionLink.ActionType.LINK);\n+        batches.add(ActionLink.ActionType.DEPROVISION);\n+        batches.add(ActionLink.ActionType.PROVISION);\n+        batches.add(ActionLink.ActionType.ASSIGN);\n+        batches.add(ActionLink.ActionType.UNASSIGN);\n+        return batches;\n     }\n \n     @Override"},{"sha":"267987f0ba60b1763530329c3854eb35b9d54e07","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -157,10 +157,10 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n-        final List<ActionLink.ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionLink.ActionType.DELETE);\n-        return bulkActions;\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        List<ActionLink.ActionType> batches = new ArrayList<>();\n+        batches.add(ActionLink.ActionType.DELETE);\n+        return batches;\n     }\n \n     protected class ExecProvider extends DirectoryDataProvider<ExecTO> {"},{"sha":"3a584ca63105efbeb974a9836566fd2431035052","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -176,11 +176,11 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        final List<ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionType.DELETE);\n-        bulkActions.add(ActionType.EXECUTE);\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        List<ActionType> batches = new ArrayList<>();\n+        batches.add(ActionType.DELETE);\n+        batches.add(ActionType.EXECUTE);\n+        return batches;\n     }\n \n     @Override"},{"sha":"67be4c8f30fdcae394a372ae52b1ed51f01d0c5e","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -183,11 +183,11 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        final List<ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionType.DELETE);\n-        bulkActions.add(ActionType.EXECUTE);\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        List<ActionType> batches = new ArrayList<>();\n+        batches.add(ActionType.DELETE);\n+        batches.add(ActionType.EXECUTE);\n+        return batches;\n     }\n \n     @Override"},{"sha":"2f442874831371200f65309e38eecc8b26190c7f","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -43,6 +44,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n@@ -137,13 +139,18 @@ public void populateItem(\n                     final String componentId,\n                     final IModel<T> rowModel) {\n \n-                JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n-                JobActionPanel panel = new JobActionPanel(\n-                        componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this, pageRef);\n-                MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n-                        String.format(\"%s,%s\",\n-                                StandardEntitlement.TASK_EXECUTE,\n-                                StandardEntitlement.TASK_UPDATE));\n+                Component panel;\n+                try {\n+                    JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n+                    panel = new JobActionPanel(componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this, pageRef);\n+                    MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n+                            String.format(\"%s,%s\",\n+                                    StandardEntitlement.TASK_EXECUTE,\n+                                    StandardEntitlement.TASK_UPDATE));\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not get job for task {}\", rowModel.getObject().getKey(), e);\n+                    panel = new Label(componentId, Model.of());\n+                }\n                 cellItem.add(panel);\n             }\n "},{"sha":"0dc445de8226aa14750010927109a2b715408584","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -281,12 +281,12 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionType> getBulkActions() {\n-        final List<ActionType> bulkActions = new ArrayList<>();\n-        bulkActions.add(ActionType.DELETE);\n-        bulkActions.add(ActionType.EXECUTE);\n-        bulkActions.add(ActionType.DRYRUN);\n-        return bulkActions;\n+    protected Collection<ActionType> getBatches() {\n+        List<ActionType> batches = new ArrayList<>();\n+        batches.add(ActionType.DELETE);\n+        batches.add(ActionType.EXECUTE);\n+        batches.add(ActionType.DRYRUN);\n+        return batches;\n     }\n \n     @Override"},{"sha":"b586966153d1bcfc0367cb0721b7328688134776","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -69,8 +69,6 @@ public class Topology extends BasePage {\n \n     public static final String CONNECTOR_SERVER_LOCATION_PREFIX = \"connid://\";\n \n-    public static final String ROOT_NAME = \"Syncope\";\n-\n     private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n \n     private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n@@ -200,15 +198,16 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n         // -----------------------------------------\n         // Add Syncope (root topologynode)\n         // -----------------------------------------\n-        final TopologyNode syncopeTopologyNode = new TopologyNode(ROOT_NAME, ROOT_NAME, TopologyNode.Kind.SYNCOPE);\n+        String rootName = StringUtils.capitalize(Constants.SYNCOPE);\n+        final TopologyNode syncopeTopologyNode = new TopologyNode(rootName, rootName, TopologyNode.Kind.SYNCOPE);\n         syncopeTopologyNode.setX(origX);\n         syncopeTopologyNode.setY(origY);\n \n         final URI uri = WebClient.client(BaseRestClient.getSyncopeService()).getBaseURI();\n         syncopeTopologyNode.setHost(uri.getHost());\n         syncopeTopologyNode.setPort(uri.getPort());\n \n-        body.add(topologyNodePanel(\"syncope\", syncopeTopologyNode));\n+        body.add(topologyNodePanel(Constants.SYNCOPE, syncopeTopologyNode));\n \n         final Map<Serializable, Map<Serializable, TopologyNode>> connections = new HashMap<>();\n         final Map<Serializable, TopologyNode> syncopeConnections = new HashMap<>();"},{"sha":"039070662db7ea99acbf492c23d1f3cd65105e9d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/BatchResponseColumn.java","status":"renamed","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FBatchResponseColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FBatchResponseColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FBatchResponseColumn.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n \n import java.lang.reflect.InvocationTargetException;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.wicket.Component;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n@@ -34,47 +34,41 @@\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.BeansException;\n \n-public class BulkActionResultColumn<T, S> extends AbstractColumn<T, S> {\n+public class BatchResponseColumn<T, S> extends AbstractColumn<T, S> {\n \n     private static final long serialVersionUID = 7955560320949560716L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(BulkActionResultColumn.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(BatchResponseColumn.class);\n \n-    private final BulkActionResult results;\n+    private final Map<String, String> results;\n \n     private final String keyFieldName;\n \n-    public BulkActionResultColumn(final BulkActionResult results, final String keyFieldName) {\n+    public BatchResponseColumn(final Map<String, String> results, final String keyFieldName) {\n         super(new Model<String>());\n         this.results = results;\n         this.keyFieldName = keyFieldName;\n     }\n \n-    @Override\n-    public String getCssClass() {\n-        return \"bulkResultColumn\";\n-    }\n-\n     @Override\n     public Component getHeader(final String componentId) {\n-        final Label label = new Label(componentId, new Model<>());\n-        label.setDefaultModel(new StringResourceModel(\"bulk.action.result.header\", label, new Model<>(\"Result\")));\n+        Label label = new Label(componentId, new Model<>());\n+        label.setDefaultModel(new StringResourceModel(\"batch.result.header\", label, new Model<>(\"Result\")));\n         return label;\n     }\n \n     @Override\n     public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel) {\n         try {\n-            final Object id = BeanUtils.getPropertyDescriptor(rowModel.getObject().getClass(), keyFieldName).\n+            Object key = BeanUtils.getPropertyDescriptor(rowModel.getObject().getClass(), keyFieldName).\n                     getReadMethod().invoke(rowModel.getObject(), new Object[0]);\n-            final Status status = results.getResults().containsKey(id.toString())\n-                    ? results.getResults().get(id.toString())\n-                    : Status.NOT_ATTEMPTED;\n-\n-            item.add(new Label(componentId, new StringResourceModel(status.name(), item, new Model<>(status.name()))));\n+            String status = results.containsKey(key.toString())\n+                    ? results.get(key.toString())\n+                    : ExecStatus.NOT_ATTEMPTED.name();\n \n+            item.add(new Label(componentId, new StringResourceModel(status, item, new Model<>(status))));\n         } catch (BeansException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n-            LOG.error(\"Errore retrieving target id value\", e);\n+            LOG.error(\"Errore retrieving target key value\", e);\n         }\n     }\n }","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/BulkActionResultColumn.java"},{"sha":"5760b37a67f0cd0350b225145e35a7eaa166d21a","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -332,7 +332,7 @@ protected String paginatorRowsKey() {\n         }\n \n         @Override\n-        protected Collection<ActionLink.ActionType> getBulkActions() {\n+        protected Collection<ActionLink.ActionType> getBatches() {\n             return Collections.<ActionLink.ActionType>emptyList();\n         }\n \n@@ -614,7 +614,7 @@ protected String paginatorRowsKey() {\n         }\n \n         @Override\n-        protected Collection<ActionLink.ActionType> getBulkActions() {\n+        protected Collection<ActionLink.ActionType> getBatches() {\n             return Collections.<ActionLink.ActionType>emptyList();\n         }\n "},{"sha":"7ae973d4244ca90f327c7dbfecae93b5e3c37406","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconDetailsModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconDetailsModalPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -103,7 +103,7 @@ protected String paginatorRowsKey() {\n         }\n \n         @Override\n-        protected Collection<ActionLink.ActionType> getBulkActions() {\n+        protected Collection<ActionLink.ActionType> getBatches() {\n             return Collections.<ActionLink.ActionType>emptyList();\n         }\n "},{"sha":"526e5abec9a217637bf50308ed795a6ead8d65e0","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -348,7 +348,7 @@ protected String paginatorRowsKey() {\n         }\n \n         @Override\n-        protected Collection<ActionLink.ActionType> getBulkActions() {\n+        protected Collection<ActionLink.ActionType> getBatches() {\n             return Collections.<ActionLink.ActionType>emptyList();\n         }\n "},{"sha":"ec3d70ede88cf02b2d4bc5be674d9767ed871efe","filename":"client/console/src/main/resources/META-INF/resources/css/batch.css","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbatch.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbatch.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbatch.css?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -16,11 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-div.bulkAction{\n+div.batch{\n   display:inline-table;\n }\n \n-div.bulkActionCell{\n+div.batchCell{\n   display: table-cell;\n   vertical-align: middle;\n   text-align: center;","previous_filename":"client/console/src/main/resources/META-INF/resources/css/bulk.css"},{"sha":"f369ec6ae350ff80e50ccbaf7e8b47168e4b5915","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchContent.html","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.html?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,7 +18,7 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:head>\n-    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/bulk.css\" media=\"all\"/>\n+    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/batch.css\" media=\"all\"/>\n   </wicket:head>\n   <wicket:panel>\n     <div wicket:id=\"container\" id=\"selectedObjects\" class=\"table-responsive dataTable\">","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.html"},{"sha":"cc83de798491f2970e84ee9b3cbdb24a2a313848","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchContent.properties","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,4 +18,5 @@ SUCCESS=SUCCESS\n FAILURE=FAILURE\n CREATED=PENDING\n NOT_ATTEMPTED=NOT ATTEMPTED\n-bulk.action.result.header=Result\n+batch.result.header=Result\n+UNKNOWN=UNKNOWN","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent.properties"},{"sha":"c10493c59f2851633a1bfe2a297b44b6f13c6407","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchContent_it.properties","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_it.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,4 +18,5 @@ SUCCESS=SUCCESSO\n FAILURE=FALLIMENTO\n CREATED=IN CORSO\n NOT_ATTEMPTED=NON EFFETTUATO\n-bulk.action.result.header=Risultato\n+batch.result.header=Risultato\n+UNKNOWN=SCONOSCIUTO","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent_it.properties"},{"sha":"9008a3e870a5f8b6e14c39e851a1586666837c86","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchContent_ja.properties","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_ja.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,4 +18,5 @@ SUCCESS=\\u6210\\u529f\n FAILURE=\\u5931\\u6557\n CREATED=\\u4fdd\\u7559\n NOT_ATTEMPTED=\\u672a\\u8a66\\u884c\n-bulk.action.result.header=\\u7d50\\u679c\n+batch.result.header=\\u7d50\\u679c\n+UNKNOWN=UNKNOWN","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent_ja.properties"},{"sha":"cc83de798491f2970e84ee9b3cbdb24a2a313848","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchContent_pt_BR.properties","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_pt_BR.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,4 +18,5 @@ SUCCESS=SUCCESS\n FAILURE=FAILURE\n CREATED=PENDING\n NOT_ATTEMPTED=NOT ATTEMPTED\n-bulk.action.result.header=Result\n+batch.result.header=Result\n+UNKNOWN=UNKNOWN","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent_pt_BR.properties"},{"sha":"20c4b0a020be9a172f80f0c87c322849c8e73e5f","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchContent_ru.properties","status":"renamed","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent_ru.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -15,13 +15,9 @@\n # specific language governing permissions and limitations\n # under the License.\n #\n-# SUCCESS=ВЫПОЛНЕНО\n SUCCESS=\\u0412\\u042b\\u041f\\u041e\\u041b\\u041d\\u0415\\u041d\\u041e\n-# FAILURE=ОШИБКА\n FAILURE=\\u041e\\u0428\\u0418\\u0411\\u041a\\u0410\n-# CREATED=ОЖИДАНИЕ\n CREATED=\\u041e\\u0416\\u0418\\u0414\\u0410\\u041d\\u0418\\u0415\n-# NOT_ATTEMPTED=ПОПЫТКА НЕ ВЫПОЛНЯЛАСЬ\n NOT_ATTEMPTED=\\u041f\\u041e\\u041f\\u042b\\u0422\\u041a\\u0410 \\u041d\\u0415 \\u0412\\u042b\\u041f\\u041e\\u041b\\u041d\\u042f\\u041b\\u0410\\u0421\\u042c\n-# bulk.action.result.header=Результат\n-bulk.action.result.header=\\u0420\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\n+batch.result.header=\\u0420\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\n+UNKNOWN=UNKNOWN","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkContent_ru.properties"},{"sha":"dda032eee7264e924384d4d855ddb15e0ed91572","filename":"client/console/src/main/resources/org/apache/syncope/client/console/batch/BatchModal.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchModal.html?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","previous_filename":"client/console/src/main/resources/org/apache/syncope/client/console/bulk/BulkActionModal.html"},{"sha":"b904a65035b6c2668adb02393938c9cb91c28267","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AjaxDataTablePanel.html","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.html?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,24 +19,24 @@\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <span wicket:id=\"tablePanel\">[Table panel]</span>\n-    <div wicket:id=\"bulkModal\" />\n+    <div wicket:id=\"batchModal\" />\n \n-    <wicket:fragment wicket:id=\"bulkAvailable\">\n+    <wicket:fragment wicket:id=\"batchAvailable\">\n       <form wicket:id=\"groupForm\">\n         <span wicket:id=\"checkgroup\">\n           <table class=\"ui-widget ui-widget-content table-hover\" wicket:id=\"dataTable\">[DataTable]</table>\n         </span>\n       </form>\n-      <div class=\"bulkAction\">\n-        <div class=\"bulkActionCell\">\n-          <a href=\"#\" wicket:id=\"bulkActionLink\">\n-            <i class=\"fa fa-gear\" alt=\"bulk action icon\"  title=\"Bulk action\"></i>\n+      <div class=\"batch\">\n+        <div class=\"batchCell\">\n+          <a href=\"#\" wicket:id=\"batchLink\">\n+            <i class=\"fa fa-gear\" alt=\"batch icon\"  title=\"Batch\"></i>\n           </a>\n         </div>\n       </div>\n     </wicket:fragment>\n \n-    <wicket:fragment wicket:id=\"bulkNotAvailable\">\n+    <wicket:fragment wicket:id=\"batchNotAvailable\">\n       <table class=\"ui-widget ui-widget-content table-hover\" wicket:id=\"dataTable\">[DataTable]</table>\n     </wicket:fragment>\n "},{"sha":"ea31e874e40078e9b9b0194614fbb159e69c9f41","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DirectoryPanel.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -35,7 +35,7 @@ any.new=New ${anyTO.type}\n any.finish=Submit ${anyTO.type}\n any.cancel=Cancel ${anyTO.type}\n any.attr.display=Attributes to be displayed\n-bulk.action=Bulk action\n+batch=Batch\n any.propagation.tasks=Propagation tasks for ${type} ${name}\n any.notification.tasks=Notification tasks for ${type} ${name}\n notification.tasks=Tasks about notification ${key}"},{"sha":"39d1dc52b02a10fe49c8f0cbafee1044bf8fef03","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DirectoryPanel_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_it.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -35,7 +35,7 @@ any.new=Nuovo ${anyTO.type}\n any.attr.display=Attributi da mostrare\n any.finish=Invia ${anyTO.type}\n any.cancel=Annulla ${anyTO.type}\n-bulk.action=Operazioni di gruppo\n+batch=Batch\n any.propagation.tasks=Task di propagazione per ${type} ${name}\n any.notification.tasks=Task di notifica per ${type} ${name}\n notification.tasks=Task relativi alla notifica ${key}"},{"sha":"69ac68dd6fc3d6e2455cbd065286ec223cd5b39e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DirectoryPanel_ja.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_ja.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -35,7 +35,7 @@ any.new=\\u65b0\\u3057\\u3044 ${anyTO.type}\n any.finish=${anyTO.type} \\u3092\\u5b9f\\u884c\n any.cancel=${anyTO.type} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb\n any.attr.display=\\u8868\\u793a\\u3059\\u308b\\u5c5e\\u6027\n-bulk.action=\\u4e00\\u62ec\\u30a2\\u30af\\u30b7\\u30e7\\u30f3\n+batch=Batch\n any.propagation.tasks=${type} ${name} \\u306e\\u4f1d\\u64ad\\u30bf\\u30b9\\u30af\n any.notification.tasks=${type} ${name} \\u306e\\u901a\\u77e5\\u30bf\\u30b9\\u30af\n notification.tasks=\\u901a\\u77e5 ${key} \\u306b\\u95a2\\u3059\\u308b\\u30bf\\u30b9\\u30af"},{"sha":"8f55e7bf7a23dbddef8a51a6254c66db7697a7bf","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_pt_BR.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -35,7 +35,7 @@ any.new=Novo ${anyTO.type}\n any.attr.display=Atributos a ser exibido\n any.finish=Apresentar ${anyTO.type}\n any.cancel=Cancelar ${anyTO.type}\n-bulk.action=A\\u00e7\\u00e3o Composta\n+batch=Batch\n any.propagation.tasks=Propagation tasks for ${type} ${name}\n any.notification.tasks=Notification tasks for ${type} ${name}\n notification.tasks=Tasks about notification ${key}"},{"sha":"b88d40e79bae0011e55312591635a52acf978ae3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/DirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel_ru.properties?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -36,7 +36,7 @@ any.new=\\u0421\\u043e\\u0437\\u0434\\u0430\\u0442\\u044c ${anyTO.type}\n any.finish=\\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c ${anyTO.type}\n any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${anyTO.type}\n any.attr.display=\\u041f\\u043e\\u043a\\u0430\\u0437\\u044b\\u0432\\u0430\\u0442\\u044c \\u0430\\u0442\\u0440\\u0438\\u0431\\u0443\\u0442\\u044b\n-bulk.action=\\u041c\\u0430\\u0441\\u0441\\u043e\\u0432\\u043e\\u0435 \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0435\n+batch=Batch\n any.propagation.tasks=\\u0417\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u044f \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0439 \\u0434\\u043b\\u044f ${type} ${name}\n any.notification.tasks=\\u0417\\u0430\\u0434\\u0430\\u0447\\u0438 \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043a\\u0438 \\u0443\\u0432\\u0435\\u0434\\u043e\\u043c\\u043b\\u0435\\u043d\\u0438\\u0439 \\u0434\\u043b\\u044f ${type} ${name}\n notification.tasks=\\u0417\\u0430\\u0434\\u0430\\u0447\\u0438 \\u043e\\u0442\\u043f\\u0440\\u0430\\u0432\\u043a\\u0438 \\u0443\\u0432\\u0435\\u0434\\u043e\\u043c\\u043b\\u0435\\u043d\\u0438\\u0439 ${key}"},{"sha":"98e723fa6b8c985337a5df9f24e6d26b443bf4e7","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -126,7 +126,7 @@ protected void init() {\n                 : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n \n         clientFactory = new SyncopeClientFactoryBean().\n-                setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath).\n+                setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\")).\n                 setContentType(SyncopeClientFactoryBean.ContentType.JSON).\n                 setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n "},{"sha":"466b266ab80b962348059a27bdf901eeb55b09bb","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -48,6 +48,8 @@\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AccessTokenService;\n+import org.apache.syncope.common.rest.api.service.AnyService;\n+import org.apache.syncope.common.rest.api.service.ExecutableService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n \n /**\n@@ -234,6 +236,9 @@ public <T> T getService(final Class<T> serviceClass) {\n \n             Client client = WebClient.client(serviceInstance);\n             client.type(mediaType).accept(mediaType);\n+            if (serviceInstance instanceof AnyService || serviceInstance instanceof ExecutableService) {\n+                client.accept(RESTHeaders.MULTIPART_MIXED);\n+            }\n \n             ClientConfiguration config = WebClient.getConfig(client);\n             config.getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n@@ -360,6 +365,23 @@ public <T> EntityTag getLatestEntityTag(final T service) {\n         return WebClient.client(service).getResponse().getEntityTag();\n     }\n \n+    /**\n+     * Initiates a new Batch request.\n+     *\n+     * The typical operation flow is:\n+     * <pre>\n+     * BatchRequest batchRequest = syncopeClient.batch();\n+     * batchRequest.getService(UserService.class).create(...);\n+     * batchRequest.getService(UserService.class).update(...);\n+     * batchRequest.getService(GroupService.class).update(...);\n+     * batchRequest.getService(GroupService.class).delete(...);\n+     * ...\n+     * BatchResponse batchResponse = batchRequest().commit();\n+     * List&lt;BatchResponseItem&gt; items = batchResponse.getItems()\n+     * </pre>\n+     *\n+     * @return empty Batch request\n+     */\n     public BatchRequest batch() {\n         return new BatchRequest(\n                 mediaType,"},{"sha":"bc62a93d5f4f5c5ae06d25bff5201d3efc0b7589","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchRequest.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchRequest.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -31,6 +31,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * Encapsulates the Batch request management via CXF Proxy Client.\n+ */\n public class BatchRequest {\n \n     private static final Logger LOG = LoggerFactory.getLogger(BatchRequest.class);\n@@ -78,10 +81,26 @@ public List<BatchRequestItem> getItems() {\n         return bcfb.getBatchRequestItems();\n     }\n \n+    /**\n+     * Sends the current request, with items accumulated by invoking methods on proxies obtained via\n+     * {@link #getService(java.lang.Class)}, to the Batch service, and awaits for synchronous response.\n+     * It also clears out the accumulated items, in case of reuse of this instance for subsequent requests.\n+     * \n+     * @return batch response\n+     */\n     public BatchResponse commit() {\n         return commit(false);\n     }\n \n+    /**\n+     * Sends the current request, with items accumulated by invoking methods on proxies obtained via\n+     * {@link #getService(java.lang.Class)}, to the Batch service, and awaits for a synchronous or asynchronous\n+     * response, depending on the {@code async} parameter.\n+     * It also clears out the accumulated items, in case of reuse of this instance for subsequent requests.\n+     * \n+     * @param async whether asynchronous Batch process is requested, or not\n+     * @return batch response\n+     */\n     public BatchResponse commit(final boolean async) {\n         String boundary = \"--batch_\" + UUID.randomUUID().toString();\n "},{"sha":"80a32e85e215ecba11ce02bafabea9366c51bc98","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/batch/BatchResponse.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2Fbatch%2FBatchResponse.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -34,6 +34,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+/**\n+ * Encapsulates the Batch response management via CXF Proxy Client.\n+ */\n public class BatchResponse {\n \n     private static final Logger LOG = LoggerFactory.getLogger(BatchResponse.class);\n@@ -63,7 +66,7 @@ public Response getResponse() {\n     }\n \n     /**\n-     * If asynchronous processing was requested, query the monitor URI.\n+     * If asynchronous processing was requested, queries the monitor URI.\n      *\n      * @return the last Response received from the Batch service\n      */"},{"sha":"c3edf7ce745b6e2eb57c25085207b3efd7eb06c1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkAction.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java?ref=0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4","patch":"@@ -1,68 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlEnum;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-\n-@XmlRootElement(name = \"bulkAction\")\n-@XmlType\n-public class BulkAction extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 1395353278878758961L;\n-\n-    @XmlEnum\n-    @XmlType(name = \"bulkActionType\")\n-    public enum Type {\n-\n-        MUSTCHANGEPASSWORD,\n-        DELETE,\n-        REACTIVATE,\n-        SUSPEND,\n-        DRYRUN,\n-        EXECUTE\n-\n-    }\n-\n-    private Type type;\n-\n-    private final List<String> targets = new ArrayList<>();\n-\n-    public Type getType() {\n-        return type;\n-    }\n-\n-    public void setType(final Type type) {\n-        this.type = type;\n-    }\n-\n-    @XmlElementWrapper(name = \"targets\")\n-    @XmlElement(name = \"target\")\n-    @JsonProperty(\"targets\")\n-    public List<String> getTargets() {\n-        return targets;\n-    }\n-}"},{"sha":"53b7cf6d9fad85e17945257db99d792653674460","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java?ref=0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4","patch":"@@ -1,77 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import javax.xml.bind.annotation.XmlAccessType;\n-import javax.xml.bind.annotation.XmlAccessorType;\n-import javax.xml.bind.annotation.XmlEnum;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlSeeAlso;\n-import javax.xml.bind.annotation.XmlType;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n-\n-@XmlRootElement(name = \"bulkActionResult\")\n-@XmlType\n-@XmlAccessorType(XmlAccessType.FIELD)\n-@XmlSeeAlso(BulkActionResult.Status.class)\n-public class BulkActionResult extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 2868894178821778133L;\n-\n-    @XmlEnum\n-    @XmlType(name = \"bulkActionStatus\")\n-    public enum Status {\n-\n-        // general bulk action result statuses\n-        SUCCESS,\n-        FAILURE,\n-        // specific propagation task execution statuses\n-        CREATED,\n-        NOT_ATTEMPTED;\n-\n-    }\n-\n-    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n-    private final Map<String, Status> results = new HashMap<>();\n-\n-    @JsonProperty\n-    public Map<String, Status> getResults() {\n-        return results;\n-    }\n-\n-    @JsonIgnore\n-    public List<String> getResultByStatus(final Status status) {\n-        final List<String> result = new ArrayList<>();\n-\n-        results.entrySet().stream().\n-                filter((entry) -> (entry.getValue() == status)).\n-                forEachOrdered(entry -> result.add(entry.getKey()));\n-\n-        return Collections.unmodifiableList(result);\n-    }\n-}"},{"sha":"ee6f627a20cc5792dd9ae92b4738c08cf4890152","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationStatus.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n \n /**\n  * Single propagation status.\n@@ -50,7 +50,7 @@ public class PropagationStatus extends AbstractBaseBean {\n     /**\n      * Propagation task execution status.\n      */\n-    private PropagationTaskExecStatus status;\n+    private ExecStatus status;\n \n     /**\n      * Propagation task execution failure message.\n@@ -81,11 +81,11 @@ public void setResource(final String resource) {\n         this.resource = resource;\n     }\n \n-    public PropagationTaskExecStatus getStatus() {\n+    public ExecStatus getStatus() {\n         return status;\n     }\n \n-    public void setStatus(final PropagationTaskExecStatus status) {\n+    public void setStatus(final ExecStatus status) {\n         this.status = status;\n     }\n "},{"sha":"8b25c5eaf34d54ae3937d9f555dd9b39cb1c9bc7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ExecStatus.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FExecStatus.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.ws.rs.core.Response;\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+/**\n+ * Status of some execution.\n+ */\n+@XmlEnum\n+public enum ExecStatus {\n+\n+    CREATED(Response.Status.CREATED.getStatusCode()),\n+    SUCCESS(Response.Status.OK.getStatusCode()),\n+    FAILURE(Response.Status.BAD_REQUEST.getStatusCode()),\n+    NOT_ATTEMPTED(Response.Status.PRECONDITION_REQUIRED.getStatusCode());\n+\n+    protected int httpStatus;\n+\n+    ExecStatus(final int httpStatus) {\n+        this.httpStatus = httpStatus;\n+    }\n+\n+    public int getHttpStatus() {\n+        return httpStatus;\n+    }\n+\n+    public static ExecStatus fromHttpStatus(final int httpStatus) {\n+        ExecStatus status = null;\n+        for (ExecStatus value : values()) {\n+            if (httpStatus == value.getHttpStatus()) {\n+                status = value;\n+            }\n+        }\n+        if (status == null && httpStatus == Response.Status.NO_CONTENT.getStatusCode()) {\n+            return ExecStatus.SUCCESS;\n+        }\n+        return status;\n+    }\n+}"},{"sha":"6ae4a36fecb6b9e3a013aa3eb0bdf1415d9468d9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationTaskExecStatus.java","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java?ref=0dcef9eb4dd040eddad846d8bc8b9b5d578d20b4","patch":"@@ -1,34 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlEnum;\n-\n-/**\n- * Status of a propagation task execution.\n- */\n-@XmlEnum\n-public enum PropagationTaskExecStatus {\n-\n-    CREATED,\n-    SUCCESS,\n-    FAILURE,\n-    NOT_ATTEMPTED;\n-\n-}"},{"sha":"1644bce9e21b4b679cd49c257b041568faea1b8c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ProvisionAction.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FProvisionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FProvisionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FProvisionAction.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlEnum;\n \n @XmlEnum\n-public enum BulkMembersActionType {\n+public enum ProvisionAction {\n \n     PROVISION,\n     DEPROVISION;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/BulkMembersActionType.java"},{"sha":"64210867d07701f10ba135ece6637910200fb236","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ReportExecStatus.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReportExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReportExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReportExecStatus.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -28,7 +28,4 @@ public enum ReportExecStatus {\n     SUCCESS,\n     FAILURE;\n \n-    public static ReportExecStatus fromString(final String value) {\n-        return ReportExecStatus.valueOf(value.toUpperCase());\n-    }\n }"},{"sha":"0d444f271cd345f9e13155153a92134864ce878d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/TaskType.java","status":"modified","additions":32,"deletions":5,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,14 +19,41 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n \n @XmlEnum\n public enum TaskType {\n \n-    PROPAGATION,\n-    NOTIFICATION,\n-    SCHEDULED,\n-    PULL,\n-    PUSH;\n+    PROPAGATION(PropagationTaskTO.class),\n+    NOTIFICATION(NotificationTaskTO.class),\n+    SCHEDULED(SchedTaskTO.class),\n+    PULL(PullTaskTO.class),\n+    PUSH(PushTaskTO.class);\n \n+    private final Class<? extends TaskTO> toClass;\n+\n+    TaskType(final Class<? extends TaskTO> toClass) {\n+        this.toClass = toClass;\n+    }\n+\n+    public Class<? extends TaskTO> getToClass() {\n+        return toClass;\n+    }\n+\n+    public static TaskType fromTOClass(final Class<? extends TaskTO> clazz) {\n+        return PushTaskTO.class.isAssignableFrom(clazz)\n+                ? TaskType.PUSH\n+                : PullTaskTO.class.isAssignableFrom(clazz)\n+                ? TaskType.PULL\n+                : NotificationTaskTO.class.isAssignableFrom(clazz)\n+                ? TaskType.NOTIFICATION\n+                : PropagationTaskTO.class.isAssignableFrom(clazz)\n+                ? TaskType.PROPAGATION\n+                : TaskType.SCHEDULED;\n+    }\n }"},{"sha":"680c9261d0cef0883b09fce61a1e5bcc6631e913","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecDeleteQuery.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecDeleteQuery.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -24,13 +24,13 @@\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n-public class BulkExecDeleteQuery extends AbstractBaseBean {\n+public class ExecDeleteQuery extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 3846547401120638351L;\n \n     public static class Builder {\n \n-        private final BulkExecDeleteQuery instance = new BulkExecDeleteQuery();\n+        private final ExecDeleteQuery instance = new ExecDeleteQuery();\n \n         public Builder key(final String key) {\n             instance.setKey(key);\n@@ -57,7 +57,7 @@ public Builder endedAfter(final Date date) {\n             return this;\n         }\n \n-        public BulkExecDeleteQuery build() {\n+        public ExecDeleteQuery build() {\n             return instance;\n         }\n     }\n@@ -145,5 +145,4 @@ public void setEndedAfter(final Date endedAfter) {\n             this.endedAfter = null;\n         }\n     }\n-\n }","previous_filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/BulkExecDeleteQuery.java"},{"sha":"eb3f9aa23e15fb088132d0ee6fc2e7d5adb1d3b8","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":6,"deletions":44,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -43,8 +43,6 @@\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n@@ -190,7 +188,7 @@ void delete(\n      * Executes resource-related operations on given entity.\n      *\n      * @param patch external resources to be used for propagation-related operations\n-     * @return Response object featuring BulkActionResult as Entity\n+     * @return batch results as Response entity\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n             description = \"Allows client to specify a preference for the result to be returned from the server\",\n@@ -212,9 +210,7 @@ void delete(\n             @Schema(implementation = ResourceDeassociationAction.class))\n     @ApiResponses({\n         @ApiResponse(responseCode = \"200\",\n-                description = \"Bulk action result\", content =\n-                @Content(schema =\n-                        @Schema(implementation = BulkActionResult.class))),\n+                description = \"Batch results available, returned as Response entity\"),\n         @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n@@ -226,15 +222,15 @@ void delete(\n                 + \" date of the entity\") })\n     @POST\n     @Path(\"{key}/deassociate/{action}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces(RESTHeaders.MULTIPART_MIXED)\n     Response deassociate(@NotNull DeassociationPatch patch);\n \n     /**\n      * Executes resource-related operations on given entity.\n      *\n      * @param patch external resources to be used for propagation-related operations\n-     * @return Response object featuring BulkActionResult as Entity\n+     * @return batch results as Response entity\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n             description = \"Allows client to specify a preference for the result to be returned from the server\",\n@@ -256,9 +252,7 @@ void delete(\n             @Schema(implementation = ResourceAssociationAction.class))\n     @ApiResponses({\n         @ApiResponse(responseCode = \"200\",\n-                description = \"Bulk action result\", content =\n-                @Content(schema =\n-                        @Schema(implementation = BulkActionResult.class))),\n+                description = \"Batch results available, returned as Response entity\"),\n         @ApiResponse(responseCode = \"204\",\n                 description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n                 @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n@@ -270,39 +264,7 @@ void delete(\n                 + \" date of the entity\") })\n     @POST\n     @Path(\"{key}/associate/{action}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces(RESTHeaders.MULTIPART_MIXED)\n     Response associate(@NotNull AssociationPatch patch);\n-\n-    /**\n-     * Executes the provided bulk action.\n-     *\n-     * @param bulkAction list of any object ids against which the bulk action will be performed.\n-     * @return Response object featuring BulkActionResult as Entity\n-     */\n-    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n-            description = \"Allows client to specify a preference for the result to be returned from the server\",\n-            allowEmptyValue = true, schema =\n-            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n-    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n-            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n-            + \" with External Resources with no priority set\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"boolean\", defaultValue = \"false\"))\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"200\",\n-                description = \"Bulk action result\", content =\n-                @Content(schema =\n-                        @Schema(implementation = BulkActionResult.class))),\n-        @ApiResponse(responseCode = \"204\",\n-                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n-                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\")) })\n-    @POST\n-    @Path(\"bulk\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response bulk(@NotNull BulkAction bulkAction);\n }"},{"sha":"808aae818f85d407e7e74078e3552ed268a7ed32","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ExecutableService.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FExecutableService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -33,13 +33,13 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n \n@@ -83,12 +83,15 @@ public interface ExecutableService extends JAXRSService {\n      * Deletes the executions belonging matching the given query.\n      *\n      * @param query query conditions\n-     * @return bulk action result\n+     * @return batch results as Response entity\n      */\n     @DELETE\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\",\n+                    description = \"Batch results available, returned as Response entity\"))\n     @Path(\"{key}/executions\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n+    @Produces(RESTHeaders.MULTIPART_MIXED)\n+    Response deleteExecutions(@BeanParam ExecDeleteQuery query);\n \n     /**\n      * Executes the executable matching the given query."},{"sha":"05c2ba7d387c4c5c166da8846a186807c1c0a03b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n@@ -212,13 +212,13 @@ public interface GroupService extends AnyService<GroupTO> {\n      * (De)provision all members of the given group from / onto all the resources associated to it.\n      *\n      * @param key group key\n-     * @param actionType action type to perform on all group members\n+     * @param action action type to perform on all group members\n      * @return execution report for the task generated on purpose\n      */\n     @POST\n-    @Path(\"{key}/members/{actionType}\")\n+    @Path(\"{key}/members/{action}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    ExecTO bulkMembersAction(\n+    ExecTO provisionMembers(\n             @NotNull @PathParam(\"key\") String key,\n-            @NotNull @PathParam(\"actionType\") BulkMembersActionType actionType);\n+            @NotNull @PathParam(\"action\") ProvisionAction action);\n }"},{"sha":"11bffe08de01bb880cf1a3d0630912a6f23e09dc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for tasks.\n+ * REST operations for reconciliation.\n  */\n @Tag(name = \"Reconciliation\")\n @SecurityRequirements({"},{"sha":"27b7813ac41e95cf24ae7953716a7bb1d8a28b23","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -41,12 +41,9 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n \n@@ -204,22 +201,4 @@ void removeSyncToken(\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void check(@NotNull ResourceTO resourceTO);\n-\n-    /**\n-     * De-associate any objects from the given resource.\n-     *\n-     * @param patch any objects to be used for propagation-related operations\n-     * @return Bulk action result\n-     */\n-    @Parameter(name = \"key\", description = \"Resource's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @Parameter(name = \"anyTypeKey\", description = \"AnyType's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @Parameter(name = \"action\", description = \"Deassociation action\", in = ParameterIn.PATH, schema =\n-            @Schema(implementation = ResourceDeassociationAction.class))\n-    @POST\n-    @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{action}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    BulkActionResult bulkDeassociation(@NotNull ResourceDeassociationPatch patch);\n }"},{"sha":"9e5ff711ef46e137cafab2983c6e9c920d9c0412","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -124,7 +124,7 @@ public interface SyncopeService extends JAXRSService {\n     /**\n      * Gets batch results, in case asynchronous was requested.\n      *\n-     * @return batch results returned as Response entity\n+     * @return batch results as Response entity\n      */\n     @GET\n     @ApiResponses({"},{"sha":"07a18d85558586792caada4119d3e08830c8b9ac","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -43,8 +43,6 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.TaskTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -140,16 +138,4 @@ <T extends TaskTO> T read(\n     @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") TaskType type, @NotNull @PathParam(\"key\") String key);\n-\n-    /**\n-     * Executes the provided bulk action.\n-     *\n-     * @param bulkAction list of task ids against which the bulk action will be performed.\n-     * @return Bulk action result\n-     */\n-    @POST\n-    @Path(\"bulk\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    BulkActionResult bulk(@NotNull BulkAction bulkAction);\n }"},{"sha":"a25325dc0f92a3fb0bd252c257411d8843af5dd5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -22,10 +22,10 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n \n public abstract class AbstractExecutableLogic<T extends AbstractBaseBean> extends AbstractJobLogic<T> {\n@@ -39,7 +39,7 @@ public abstract Pair<Integer, List<ExecTO>> listExecutions(\n \n     public abstract ExecTO deleteExecution(String executionKey);\n \n-    public abstract BulkActionResult deleteExecutions(\n+    public abstract List<BatchResponseItem> deleteExecutions(\n             String key, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n \n     public abstract JobTO getJob(String key);"},{"sha":"5524fd762a71af3c3a3a208ddd83ccd15a64b278","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n@@ -384,26 +384,27 @@ public ProvisioningResult<GroupTO> provision(\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_CREATE + \"') \"\n             + \"and hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n     @Transactional\n-    public ExecTO bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n+    public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n         Group group = groupDAO.find(key);\n         if (group == null) {\n             throw new NotFoundException(\"Group \" + key);\n         }\n \n         Implementation jobDelegate = implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n                 filter(impl -> GroupMemberProvisionTaskJobDelegate.class.getName().equals(impl.getBody())).\n-                findFirst().orElse(null);\n-        if (jobDelegate == null) {\n-            jobDelegate = entityFactory.newEntity(Implementation.class);\n-            jobDelegate.setKey(GroupMemberProvisionTaskJobDelegate.class.getSimpleName());\n-            jobDelegate.setEngine(ImplementationEngine.JAVA);\n-            jobDelegate.setType(ImplementationType.TASKJOB_DELEGATE);\n-            jobDelegate.setBody(GroupMemberProvisionTaskJobDelegate.class.getName());\n-            jobDelegate = implementationDAO.save(jobDelegate);\n-        }\n+                findFirst().orElseGet(() -> {\n+                    Implementation caz = entityFactory.newEntity(Implementation.class);\n+                    caz.setKey(GroupMemberProvisionTaskJobDelegate.class.getSimpleName());\n+                    caz.setEngine(ImplementationEngine.JAVA);\n+                    caz.setType(ImplementationType.TASKJOB_DELEGATE);\n+                    caz.setBody(GroupMemberProvisionTaskJobDelegate.class.getName());\n+                    caz = implementationDAO.save(caz);\n+                    return caz;\n+                });\n \n         SchedTask task = entityFactory.newEntity(SchedTask.class);\n-        task.setName(\"Bulk member provision for group \" + group.getName());\n+        task.setName((action == ProvisionAction.DEPROVISION ? \"de\" : \"\")\n+                + \"provision members of group \" + group.getName());\n         task.setActive(true);\n         task.setJobDelegate(jobDelegate);\n         task = taskDAO.save(task);\n@@ -416,7 +417,7 @@ public ExecTO bulkMembersAction(final String key, final BulkMembersActionType ac\n \n             jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, false);\n             jobDataMap.put(GroupMemberProvisionTaskJobDelegate.GROUP_KEY_JOBDETAIL_KEY, key);\n-            jobDataMap.put(GroupMemberProvisionTaskJobDelegate.ACTION_TYPE_JOBDETAIL_KEY, actionType);\n+            jobDataMap.put(GroupMemberProvisionTaskJobDelegate.ACTION_JOBDETAIL_KEY, action);\n \n             scheduler.getScheduler().triggerJob(\n                     JobNamer.getJobKey(task),"},{"sha":"95aa956f4d716500a46396ca0ded94df9ff145a6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -22,12 +22,15 @@\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n import java.util.zip.ZipInputStream;\n+import javax.ws.rs.core.Response;\n import javax.xml.transform.stream.StreamSource;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n import org.apache.cocoon.pipeline.Pipeline;\n@@ -39,7 +42,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -49,6 +51,8 @@\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.core.logic.cocoon.FopSerializer;\n import org.apache.syncope.core.logic.cocoon.TextSerializer;\n import org.apache.syncope.core.logic.cocoon.XSLTTransformer;\n@@ -62,6 +66,7 @@\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n+import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.SchedulerException;\n@@ -332,7 +337,7 @@ public ExecTO deleteExecution(final String executionKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n     @Override\n-    public BulkActionResult deleteExecutions(\n+    public List<BatchResponseItem> deleteExecutions(\n             final String key,\n             final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n \n@@ -341,19 +346,24 @@ public BulkActionResult deleteExecutions(\n             throw new NotFoundException(\"Report \" + key);\n         }\n \n-        BulkActionResult result = new BulkActionResult();\n+        List<BatchResponseItem> batchResponseItems = new ArrayList<>();\n \n         reportExecDAO.findAll(report, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n+            BatchResponseItem item = new BatchResponseItem();\n+            item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(exec.getKey()));\n+            batchResponseItems.add(item);\n+\n             try {\n                 reportExecDAO.delete(exec);\n-                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n+                item.setStatus(Response.Status.OK.getStatusCode());\n             } catch (Exception e) {\n                 LOG.error(\"Error deleting execution {} of report {}\", exec.getKey(), key, e);\n-                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n+                item.setStatus(Response.Status.BAD_REQUEST.getStatusCode());\n+                item.setContent(ExceptionUtils2.getFullStackTrace(e));\n             }\n         });\n \n-        return result;\n+        return batchResponseItems;\n     }\n \n     @Override"},{"sha":"17f73767d0bf877ce41253aefd5a115b64dc4572","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":20,"deletions":7,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,16 +19,18 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.TaskTO;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n@@ -39,6 +41,8 @@\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n@@ -56,6 +60,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n+import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n@@ -349,28 +354,36 @@ public ExecTO deleteExecution(final String execKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n     @Override\n-    public BulkActionResult deleteExecutions(\n+    public List<BatchResponseItem> deleteExecutions(\n             final String key,\n-            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+            final Date startedBefore,\n+            final Date startedAfter,\n+            final Date endedBefore,\n+            final Date endedAfter) {\n \n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n         }\n \n-        BulkActionResult result = new BulkActionResult();\n+        List<BatchResponseItem> batchResponseItems = new ArrayList<>();\n \n         taskExecDAO.findAll(task, startedBefore, startedAfter, endedBefore, endedAfter).forEach(exec -> {\n+            BatchResponseItem item = new BatchResponseItem();\n+            item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(exec.getKey()));\n+            batchResponseItems.add(item);\n+\n             try {\n                 taskExecDAO.delete(exec);\n-                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n+                item.setStatus(Response.Status.OK.getStatusCode());\n             } catch (Exception e) {\n                 LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), key, e);\n-                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n+                item.setStatus(Response.Status.BAD_REQUEST.getStatusCode());\n+                item.setContent(ExceptionUtils2.getFullStackTrace(e));\n             }\n         });\n \n-        return result;\n+        return batchResponseItems;\n     }\n \n     @Override"},{"sha":"a50d105e0b75408a83c8374d58ad0985c1377942","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PropagationTaskValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -22,7 +22,7 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n \n@@ -43,7 +43,7 @@ public boolean isValid(final PropagationTask task, final ConstraintValidatorCont\n                 List<? extends TaskExec> executions = task.getExecs();\n                 for (TaskExec execution : executions) {\n                     try {\n-                        PropagationTaskExecStatus.valueOf(execution.getStatus());\n+                        ExecStatus.valueOf(execution.getStatus());\n                     } catch (IllegalArgumentException e) {\n                         LOG.error(\"Invalid execution status '\" + execution.getStatus() + \"'\", e);\n                         isValid = false;"},{"sha":"af257f511225adcfdfa6b722d25c72506c9567c3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -24,7 +24,7 @@\n import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -78,7 +78,7 @@ public void issueSYNCOPE214() {\n         TaskExec exec = entityFactory.newEntity(TaskExec.class);\n         exec.setStart(new Date());\n         exec.setEnd(new Date());\n-        exec.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n+        exec.setStatus(ExecStatus.SUCCESS.name());\n         exec.setMessage(faultyMessage);\n \n         task.add(exec);"},{"sha":"d48cdf9a36510fbaaf8eb9e39eac751bc5a0853e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -150,7 +150,7 @@ public void addPropagationTaskExecution() {\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n-        execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n+        execution.setStatus(ExecStatus.CREATED.name());\n         execution.setStart(new Date());\n         task.add(execution);\n "},{"sha":"78ac2cc24c21d507bd3306a221aaabd2f8e27f84","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationReporter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationReporter.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n /**\n@@ -50,7 +50,7 @@ public interface PropagationReporter {\n      */\n     void onSuccessOrNonPriorityResourceFailures(\n             PropagationTaskTO propagationTask,\n-            PropagationTaskExecStatus execStatus,\n+            ExecStatus execStatus,\n             String failureReason,\n             ConnectorObject beforeObj,\n             ConnectorObject afterObj);"},{"sha":"2356cfb81db5fa8792949e9a086d3a054a1875d4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -41,7 +41,7 @@\n \n public class GroupMemberProvisionTaskJobDelegate extends AbstractSchedTaskJobDelegate {\n \n-    public static final String ACTION_TYPE_JOBDETAIL_KEY = \"actionType\";\n+    public static final String ACTION_JOBDETAIL_KEY = \"action\";\n \n     public static final String GROUP_KEY_JOBDETAIL_KEY = \"groupKey\";\n \n@@ -59,15 +59,15 @@ public class GroupMemberProvisionTaskJobDelegate extends AbstractSchedTaskJobDel\n \n     private String groupKey;\n \n-    private BulkMembersActionType actionType;\n+    private ProvisionAction action;\n \n     @Transactional\n     @Override\n     public void execute(final String taskKey, final boolean dryRun, final JobExecutionContext context)\n             throws JobExecutionException {\n \n         groupKey = context.getMergedJobDataMap().getString(GROUP_KEY_JOBDETAIL_KEY);\n-        actionType = (BulkMembersActionType) context.getMergedJobDataMap().get(ACTION_TYPE_JOBDETAIL_KEY);\n+        action = (ProvisionAction) context.getMergedJobDataMap().get(ACTION_JOBDETAIL_KEY);\n \n         super.execute(taskKey, dryRun, context);\n     }\n@@ -77,7 +77,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         Group group = groupDAO.authFind(groupKey);\n \n         StringBuilder result = new StringBuilder(\"Group \").append(group.getName()).append(\" members \");\n-        if (actionType == BulkMembersActionType.DEPROVISION) {\n+        if (action == ProvisionAction.DEPROVISION) {\n             result.append(\"de\");\n         }\n         result.append(\"provision\\n\\n\");\n@@ -89,11 +89,11 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         List<User> users = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.USER);\n         Collection<String> groupResourceKeys = groupDAO.findAllResourceKeys(groupKey);\n         status.set(\"About to \"\n-                + (actionType == BulkMembersActionType.DEPROVISION ? \"de\" : \"\") + \"provision \"\n+                + (action == ProvisionAction.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + users.size() + \" users from \" + groupResourceKeys);\n \n         for (int i = 0; i < users.size() && !interrupt; i++) {\n-            List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n+            List<PropagationStatus> statuses = action == ProvisionAction.DEPROVISION\n                     ? userProvisioningManager.deprovision(users.get(i).getKey(), groupResourceKeys, false)\n                     : userProvisioningManager.provision(users.get(i).getKey(), true, null, groupResourceKeys, false);\n             for (PropagationStatus propagationStatus : statuses) {\n@@ -117,11 +117,11 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         membershipCond.setGroup(groupKey);\n         List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n         status.set(\"About to \"\n-                + (actionType == BulkMembersActionType.DEPROVISION ? \"de\" : \"\") + \"provision \"\n+                + (action == ProvisionAction.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + anyObjects.size() + \" any objects from \" + groupResourceKeys);\n \n         for (int i = 0; i < anyObjects.size() && !interrupt; i++) {\n-            List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n+            List<PropagationStatus> statuses = action == ProvisionAction.DEPROVISION\n                     ? anyObjectProvisioningManager.deprovision(anyObjects.get(i).getKey(), groupResourceKeys, false)\n                     : anyObjectProvisioningManager.provision(anyObjects.get(i).getKey(), groupResourceKeys, false);\n \n@@ -151,5 +151,4 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n         // always record execution result\n         return true;\n     }\n-\n }"},{"sha":"766f345b047ea885fa5681e8955f762dd9260db7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -377,7 +377,7 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n         Date start = new Date();\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n-        execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n+        execution.setStatus(ExecStatus.CREATED.name());\n \n         String taskExecutionMessage = null;\n         String failureReason = null;\n@@ -423,8 +423,8 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n             }\n \n             execution.setStatus(propagationAttempted.get()\n-                    ? PropagationTaskExecStatus.SUCCESS.name()\n-                    : PropagationTaskExecStatus.NOT_ATTEMPTED.name());\n+                    ? ExecStatus.SUCCESS.name()\n+                    : ExecStatus.NOT_ATTEMPTED.name());\n \n             LOG.debug(\"Successfully propagated to {}\", task.getResource());\n             result = Result.SUCCESS;\n@@ -449,7 +449,7 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n             }\n \n             try {\n-                execution.setStatus(PropagationTaskExecStatus.FAILURE.name());\n+                execution.setStatus(ExecStatus.FAILURE.name());\n             } catch (Exception wft) {\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n@@ -503,9 +503,8 @@ protected TaskExec execute(final PropagationTaskTO taskTO, final PropagationRepo\n             }\n \n             if (reporter != null) {\n-                reporter.onSuccessOrNonPriorityResourceFailures(\n-                        taskTO,\n-                        PropagationTaskExecStatus.valueOf(execution.getStatus()),\n+                reporter.onSuccessOrNonPriorityResourceFailures(taskTO,\n+                        ExecStatus.valueOf(execution.getStatus()),\n                         failureReason,\n                         beforeObj,\n                         afterObj);\n@@ -568,7 +567,7 @@ public PropagationReporter execute(final Collection<PropagationTaskTO> tasks, fi\n     protected boolean hasToBeregistered(final PropagationTask task, final TaskExec execution) {\n         boolean result;\n \n-        boolean failed = PropagationTaskExecStatus.valueOf(execution.getStatus()) != PropagationTaskExecStatus.SUCCESS;\n+        boolean failed = ExecStatus.valueOf(execution.getStatus()) != ExecStatus.SUCCESS;\n \n         switch (task.getOperation()) {\n "},{"sha":"a2df73cf585aa2c2b2bc3326ce788de988a24e90","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -25,7 +25,7 @@\n import java.util.Optional;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n@@ -48,7 +48,7 @@ protected boolean add(final PropagationStatus status) {\n     @Override\n     public void onSuccessOrNonPriorityResourceFailures(\n             final PropagationTaskTO taskTO,\n-            final PropagationTaskExecStatus executionStatus,\n+            final ExecStatus executionStatus,\n             final String failureReason,\n             final ConnectorObject beforeObj,\n             final ConnectorObject afterObj) {\n@@ -79,7 +79,7 @@ public void onPriorityResourceFailure(final String failingResource, final Collec\n         if (propagationTask.isPresent()) {\n             PropagationStatus status = new PropagationStatus();\n             status.setResource(propagationTask.get().getResource());\n-            status.setStatus(PropagationTaskExecStatus.FAILURE);\n+            status.setStatus(ExecStatus.FAILURE);\n             status.setFailureReason(\n                     \"Propagation error: \" + failingResource + \" priority resource failed to propagate.\");\n             add(status);"},{"sha":"adaa8f798ed6a529f22b3344b63bef983ac7f7c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -35,7 +35,7 @@\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -99,15 +99,15 @@ protected void doExecute(\n         // first process priority resources sequentially and fail as soon as any propagation failure is reported\n         prioritizedTasks.forEach(task -> {\n             TaskExec execution = null;\n-            PropagationTaskExecStatus execStatus;\n+            ExecStatus execStatus;\n             try {\n                 execution = newPropagationTaskCallable(task, reporter).call();\n-                execStatus = PropagationTaskExecStatus.valueOf(execution.getStatus());\n+                execStatus = ExecStatus.valueOf(execution.getStatus());\n             } catch (Exception e) {\n                 LOG.error(\"Unexpected exception\", e);\n-                execStatus = PropagationTaskExecStatus.FAILURE;\n+                execStatus = ExecStatus.FAILURE;\n             }\n-            if (execStatus != PropagationTaskExecStatus.SUCCESS) {\n+            if (execStatus != ExecStatus.SUCCESS) {\n                 throw new PropagationException(task.getResource(), execution == null ? null : execution.getMessage());\n             }\n         });\n@@ -128,8 +128,7 @@ protected void doExecute(\n         if (!nullPriority.isEmpty()) {\n             if (nullPriorityAsync) {\n                 nullPriority.forEach((task, exec) -> {\n-                    reporter.onSuccessOrNonPriorityResourceFailures(\n-                            task, PropagationTaskExecStatus.CREATED, null, null, null);\n+                    reporter.onSuccessOrNonPriorityResourceFailures(task, ExecStatus.CREATED, null, null, null);\n                 });\n             } else {\n                 final Set<Future<TaskExec>> nullPriorityFutures = new HashSet<>(nullPriority.values());"},{"sha":"4d4227120522198f8083452e746c15c6ec65614a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -485,7 +485,7 @@ protected ResourceOperation toResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected ProvisioningReport.Status toProvisioningReportStatus(final PropagationTaskExecStatus status) {\n+    protected ProvisioningReport.Status toProvisioningReportStatus(final ExecStatus status) {\n         switch (status) {\n             case FAILURE:\n                 return ProvisioningReport.Status.FAILURE;"},{"sha":"4973407781aa970f7379e3eebba890cb299a8b2d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.MatchingRule;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -444,7 +444,7 @@ private ResourceOperation toResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    private ProvisioningReport.Status toProvisioningReportStatus(final PropagationTaskExecStatus status) {\n+    private ProvisioningReport.Status toProvisioningReportStatus(final ExecStatus status) {\n         switch (status) {\n             case FAILURE:\n                 return ProvisioningReport.Status.FAILURE;"},{"sha":"59a451ab9290279ccbb48d1c312e988b321d4867","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":94,"deletions":124,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n@@ -30,29 +32,27 @@\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n-import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>\n         extends AbstractServiceImpl\n@@ -230,28 +230,60 @@ public Response deassociate(final DeassociationPatch patch) {\n                 break;\n \n             default:\n-                updated = new ProvisioningResult<>();\n-                updated.setEntity(getAnyLogic().read(patch.getKey()));\n+                throw new BadRequestException(\"Missing action\");\n         }\n \n-        BulkActionResult result = new BulkActionResult();\n-\n+        List<BatchResponseItem> batchResponseItems;\n         if (patch.getAction() == ResourceDeassociationAction.UNLINK) {\n-            patch.getResources().forEach(resource -> {\n-                result.getResults().put(\n-                        resource,\n-                        updated.getEntity().getResources().contains(resource)\n-                        ? BulkActionResult.Status.FAILURE\n-                        : BulkActionResult.Status.SUCCESS);\n-            });\n+            batchResponseItems = patch.getResources().stream().map(resource -> {\n+                BatchResponseItem item = new BatchResponseItem();\n+\n+                item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(resource));\n+\n+                item.setStatus(updated.getEntity().getResources().contains(resource)\n+                        ? Response.Status.BAD_REQUEST.getStatusCode()\n+                        : Response.Status.OK.getStatusCode());\n+\n+                if (getPreference() == Preference.RETURN_NO_CONTENT) {\n+                    item.getHeaders().put(\n+                            RESTHeaders.PREFERENCE_APPLIED,\n+                            Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                } else {\n+                    item.setContent(POJOHelper.serialize(updated.getEntity()));\n+                }\n+\n+                return item;\n+            }).collect(Collectors.toList());\n         } else {\n-            updated.getPropagationStatuses().forEach(propagationStatusTO\n-                    -> result.getResults().put(\n-                            propagationStatusTO.getResource(),\n-                            BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString())));\n+            batchResponseItems = updated.getPropagationStatuses().stream().\n+                    map(status -> {\n+                        BatchResponseItem item = new BatchResponseItem();\n+\n+                        item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(status.getResource()));\n+\n+                        item.setStatus(status.getStatus().getHttpStatus());\n+\n+                        if (status.getFailureReason() != null) {\n+                            item.getHeaders().put(RESTHeaders.ERROR_INFO, Arrays.asList(status.getFailureReason()));\n+                        }\n+\n+                        if (getPreference() == Preference.RETURN_NO_CONTENT) {\n+                            item.getHeaders().put(\n+                                    RESTHeaders.PREFERENCE_APPLIED,\n+                                    Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                        } else {\n+                            item.setContent(POJOHelper.serialize(updated.getEntity()));\n+                        }\n+\n+                        return item;\n+                    }).collect(Collectors.toList());\n         }\n \n-        return modificationResponse(result);\n+        String boundary = \"deassociate_\" + GENERATOR.generate().toString();\n+        return Response.ok(BatchPayloadGenerator.generate(\n+                batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n+                type(RESTHeaders.multipartMixedWith(boundary)).\n+                build();\n     }\n \n     @Override\n@@ -287,121 +319,59 @@ public Response associate(final AssociationPatch patch) {\n                 break;\n \n             default:\n-                updated = new ProvisioningResult<>();\n-                updated.setEntity(getAnyLogic().read(patch.getKey()));\n+                throw new BadRequestException(\"Missing action\");\n         }\n \n-        BulkActionResult result = new BulkActionResult();\n-\n+        List<BatchResponseItem> batchResponseItems;\n         if (patch.getAction() == ResourceAssociationAction.LINK) {\n-            patch.getResources().forEach(resource -> {\n-                result.getResults().put(\n-                        resource,\n-                        updated.getEntity().getResources().contains(resource)\n-                        ? BulkActionResult.Status.SUCCESS\n-                        : BulkActionResult.Status.FAILURE);\n-            });\n-        } else {\n-            updated.getPropagationStatuses().forEach(propagationStatusTO\n-                    -> result.getResults().put(\n-                            propagationStatusTO.getResource(),\n-                            BulkActionResult.Status.valueOf(propagationStatusTO.getStatus().toString())));\n-        }\n+            batchResponseItems = patch.getResources().stream().map(resource -> {\n+                BatchResponseItem item = new BatchResponseItem();\n \n-        return modificationResponse(result);\n-    }\n+                item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(resource));\n \n-    @Override\n-    public Response bulk(final BulkAction bulkAction) {\n-        AbstractAnyLogic<TO, P> logic = getAnyLogic();\n-\n-        BulkActionResult result = new BulkActionResult();\n-\n-        switch (bulkAction.getType()) {\n-            case MUSTCHANGEPASSWORD:\n-                if (logic instanceof UserLogic) {\n-                    bulkAction.getTargets().forEach(key -> {\n-                        try {\n-                            final UserPatch userPatch = new UserPatch();\n-                            userPatch.setKey(key);\n-                            userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n-\n-                            result.getResults().put(\n-                                    ((UserLogic) logic).update(userPatch, false).getEntity().getKey(),\n-                                    BulkActionResult.Status.SUCCESS);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error performing delete for user {}\", key, e);\n-                            result.getResults().put(key, BulkActionResult.Status.FAILURE);\n-                        }\n-                    });\n+                item.setStatus(updated.getEntity().getResources().contains(resource)\n+                        ? Response.Status.OK.getStatusCode()\n+                        : Response.Status.BAD_REQUEST.getStatusCode());\n+\n+                if (getPreference() == Preference.RETURN_NO_CONTENT) {\n+                    item.getHeaders().put(\n+                            RESTHeaders.PREFERENCE_APPLIED,\n+                            Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n                 } else {\n-                    throw new BadRequestException();\n+                    item.setContent(POJOHelper.serialize(updated.getEntity()));\n                 }\n-                break;\n \n-            case DELETE:\n-                bulkAction.getTargets().forEach(key -> {\n-                    try {\n-                        result.getResults().put(\n-                                logic.delete(key, isNullPriorityAsync()).getEntity().getKey(),\n-                                BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing delete for user {}\", key, e);\n-                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n-                    }\n-                });\n-                break;\n+                return item;\n+            }).collect(Collectors.toList());\n+        } else {\n+            batchResponseItems = updated.getPropagationStatuses().stream().\n+                    map(status -> {\n+                        BatchResponseItem item = new BatchResponseItem();\n+\n+                        item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(status.getResource()));\n \n-            case SUSPEND:\n-                if (logic instanceof UserLogic) {\n-                    bulkAction.getTargets().forEach(key -> {\n-                        StatusPatch statusPatch = new StatusPatch.Builder().key(key).\n-                                type(StatusPatchType.SUSPEND).\n-                                onSyncope(true).\n-                                build();\n-\n-                        try {\n-                            result.getResults().put(\n-                                    ((UserLogic) logic).\n-                                            status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n-                                    BulkActionResult.Status.SUCCESS);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error performing suspend for user {}\", key, e);\n-                            result.getResults().put(key, BulkActionResult.Status.FAILURE);\n+                        item.setStatus(status.getStatus().getHttpStatus());\n+\n+                        if (status.getFailureReason() != null) {\n+                            item.getHeaders().put(RESTHeaders.ERROR_INFO, Arrays.asList(status.getFailureReason()));\n                         }\n-                    });\n-                } else {\n-                    throw new BadRequestException();\n-                }\n-                break;\n \n-            case REACTIVATE:\n-                if (logic instanceof UserLogic) {\n-                    bulkAction.getTargets().forEach(key -> {\n-                        StatusPatch statusPatch = new StatusPatch.Builder().key(key).\n-                                type(StatusPatchType.REACTIVATE).\n-                                onSyncope(true).\n-                                build();\n-\n-                        try {\n-                            result.getResults().put(\n-                                    ((UserLogic) logic).\n-                                            status(statusPatch, isNullPriorityAsync()).getEntity().getKey(),\n-                                    BulkActionResult.Status.SUCCESS);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error performing reactivate for user {}\", key, e);\n-                            result.getResults().put(key, BulkActionResult.Status.FAILURE);\n+                        if (getPreference() == Preference.RETURN_NO_CONTENT) {\n+                            item.getHeaders().put(\n+                                    RESTHeaders.PREFERENCE_APPLIED,\n+                                    Arrays.asList(Preference.RETURN_NO_CONTENT.toString()));\n+                        } else {\n+                            item.setContent(POJOHelper.serialize(updated.getEntity()));\n                         }\n-                    });\n-                } else {\n-                    throw new BadRequestException();\n-                }\n-                break;\n \n-            default:\n+                        return item;\n+                    }).collect(Collectors.toList());\n         }\n \n-        return modificationResponse(result);\n+        String boundary = \"associate_\" + GENERATOR.generate().toString();\n+        return Response.ok(BatchPayloadGenerator.generate(\n+                batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n+                type(RESTHeaders.multipartMixedWith(boundary)).\n+                build();\n     }\n-\n }"},{"sha":"569da48649826f887f964fa134fdc1a4b08502be","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,13 +19,17 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.List;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.JobAction;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadGenerator;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ExecutableService;\n@@ -56,13 +60,19 @@ public void deleteExecution(final String executionKey) {\n     }\n \n     @Override\n-    public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n-        return getExecutableLogic().deleteExecutions(\n+    public Response deleteExecutions(final ExecDeleteQuery query) {\n+        List<BatchResponseItem> batchResponseItems = getExecutableLogic().deleteExecutions(\n                 query.getKey(),\n                 query.getStartedBefore(),\n                 query.getStartedAfter(),\n                 query.getEndedBefore(),\n                 query.getEndedAfter());\n+\n+        String boundary = \"deleteExecutions_\" + GENERATOR.generate().toString();\n+        return Response.ok(BatchPayloadGenerator.generate(\n+                batchResponseItems, SyncopeConstants.DOUBLE_DASH + boundary)).\n+                type(RESTHeaders.multipartMixedWith(boundary)).\n+                build();\n     }\n \n     @Override\n@@ -84,5 +94,4 @@ public List<JobTO> listJobs() {\n     public void actionJob(final String key, final JobAction action) {\n         getExecutableLogic().actionJob(key, action);\n     }\n-\n }"},{"sha":"c92e7a291f7a846b59b0950b4d2052839a7bfddd","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -56,6 +58,8 @@ abstract class AbstractServiceImpl implements JAXRSService {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n \n+    protected static final RandomBasedGenerator GENERATOR = Generators.randomBasedGenerator();\n+\n     protected static final String OPTIONS_ALLOW = \"GET,POST,OPTIONS,HEAD\";\n \n     @Context"},{"sha":"add4b985889fa30b81bcaf513c82b763427ff37f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n@@ -89,8 +89,7 @@ public List<GroupTO> own() {\n     }\n \n     @Override\n-    public ExecTO bulkMembersAction(final String key, final BulkMembersActionType actionType) {\n-        return logic.bulkMembersAction(key, actionType);\n+    public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n+        return logic.provisionMembers(key, action);\n     }\n-\n }"},{"sha":"70ac9ee9f7616f92cae19c4f8948e80e7e69aa28","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -19,26 +19,19 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriBuilder;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n-import org.apache.syncope.core.logic.AbstractResourceAssociator;\n import org.apache.syncope.core.logic.AnyObjectLogic;\n import org.apache.syncope.core.logic.ResourceLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n@@ -141,44 +134,4 @@ public PagedConnObjectTOResult listConnObjects(\n     public void check(final ResourceTO resourceTO) {\n         logic.check(resourceTO);\n     }\n-\n-    @Override\n-    public BulkActionResult bulkDeassociation(final ResourceDeassociationPatch patch) {\n-        AbstractResourceAssociator<? extends AnyTO> associator =\n-                patch.getAnyTypeKey().equalsIgnoreCase(AnyTypeKind.USER.name())\n-                ? userLogic\n-                : patch.getAnyTypeKey().equalsIgnoreCase(AnyTypeKind.GROUP.name())\n-                ? groupLogic\n-                : anyObjectLogic;\n-\n-        BulkActionResult result = new BulkActionResult();\n-\n-        for (String anyKey : patch.getAnyKyes()) {\n-            Set<String> resources = Collections.singleton(patch.getKey());\n-            try {\n-                switch (patch.getAction()) {\n-                    case DEPROVISION:\n-                        associator.deprovision(anyKey, resources, isNullPriorityAsync());\n-                        break;\n-\n-                    case UNASSIGN:\n-                        associator.unassign(anyKey, resources, isNullPriorityAsync());\n-                        break;\n-\n-                    case UNLINK:\n-                        associator.unlink(anyKey, resources);\n-                        break;\n-\n-                    default:\n-                }\n-\n-                result.getResults().put(anyKey, BulkActionResult.Status.SUCCESS);\n-            } catch (Exception e) {\n-                LOG.warn(\"While executing {} on {} {}\", patch.getAction(), patch.getAnyTypeKey(), anyKey, e);\n-                result.getResults().put(anyKey, BulkActionResult.Status.FAILURE);\n-            }\n-        }\n-\n-        return result;\n-    }\n }"},{"sha":"cd485086ef7c7c5070d7548decd17da94c0628a4","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -24,8 +24,6 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.TaskTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -93,50 +91,4 @@ public <T extends TaskTO> T read(final TaskType type, final String key, final bo\n     public void update(final TaskType type, final SchedTaskTO taskTO) {\n         logic.updateSchedTask(type, taskTO);\n     }\n-\n-    @Override\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        BulkActionResult result = new BulkActionResult();\n-\n-        switch (bulkAction.getType()) {\n-            case DELETE:\n-                for (String key : bulkAction.getTargets()) {\n-                    try {\n-                        result.getResults().put(logic.delete(null, key).getKey(), BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing delete for task {}\", key, e);\n-                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            case DRYRUN:\n-                for (String key : bulkAction.getTargets()) {\n-                    try {\n-                        logic.execute(key, null, true);\n-                        result.getResults().put(key, BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing dryrun for task {}\", key, e);\n-                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            case EXECUTE:\n-                for (String key : bulkAction.getTargets()) {\n-                    try {\n-                        logic.execute(key, null, false);\n-                        result.getResults().put(key, BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing execute for task {}\", key, e);\n-                        result.getResults().put(key, BulkActionResult.Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n }"},{"sha":"00307c82d9456867b86d55c2058d9fc55f6f1c9f","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/panels/CamelRoutesDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCamelRoutesDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -93,7 +93,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"e3f449e4c0aa8a85898783e9968f6b0e11aa1e30","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -159,7 +159,7 @@ protected List<IColumn<OIDCProviderTO, String>> getColumns() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n \n     }"},{"sha":"2e602e55b3802358b68153f440eef42c1a811a10","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -177,7 +177,7 @@ protected String paginatorRowsKey() {\n     }\n \n     @Override\n-    protected Collection<ActionLink.ActionType> getBulkActions() {\n+    protected Collection<ActionLink.ActionType> getBatches() {\n         return Collections.<ActionLink.ActionType>emptyList();\n     }\n "},{"sha":"151f4269a4c8d57f892ca2d4891ed4ee290d52b7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -22,6 +22,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.net.URI;\n import java.util.ArrayList;\n@@ -69,6 +70,8 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchPayloadParser;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n@@ -536,6 +539,12 @@ protected ResourceTO createResource(final ResourceTO resourceTO) {\n         return getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n     }\n \n+    protected List<BatchResponseItem> parseBatchResponse(final Response response) throws IOException {\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        return BatchPayloadParser.parse(\n+                (InputStream) response.getEntity(), response.getMediaType(), new BatchResponseItem());\n+    }\n+\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\", \"UseOfObsoleteCollectionType\" })\n     protected InitialDirContext getLdapResourceDirContext(final String bindDn, final String bindPwd)\n             throws NamingException {"},{"sha":"d347743a0254bfedb327aaccc1dec731e1b43a45","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/BatchesITCase.java","status":"renamed","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBatchesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBatchesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FBatchesITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -31,7 +31,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n-public class BulkActionITCase extends AbstractConsoleITCase {\n+public class BatchesITCase extends AbstractConsoleITCase {\n \n     private static final String TAB_PANEL = \"body:content:body:container:content:tabbedPanel:panel:searchResult:\";\n \n@@ -43,7 +43,7 @@ public void login() {\n     }\n \n     @Test\n-    public void usersBulkAction() {\n+    public void users() {\n         TESTER.clickLink(\"body:realmsLI:realms\");\n         TESTER.clickLink(\"body:content:body:container:content:tabbedPanel:tabs-container:tabs:1:link\");\n \n@@ -56,18 +56,18 @@ public void usersBulkAction() {\n \n         formTester.select(\"checkgroup\", 2);\n \n-        TESTER.executeAjaxEvent(CONTAINER + \"searchContainer:resultTable:tablePanel:bulkActionLink\",\n+        TESTER.executeAjaxEvent(CONTAINER + \"searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(CONTAINER\n-                + \"searchContainer:resultTable:bulkModal:form:content:content:container\", WebMarkupContainer.class);\n+                + \"searchContainer:resultTable:batchModal:form:content:content:container\", WebMarkupContainer.class);\n \n         assertNotNull(findComponentByProp(\"username\", CONTAINER\n-                + \"searchContainer:resultTable:bulkModal:form:content:content:container\", \"rossini\"));\n+                + \"searchContainer:resultTable:batchModal:form:content:content:container\", \"rossini\"));\n     }\n \n     @Test\n-    public void userResourceBulkAction() {\n+    public void userResource() {\n         TESTER.clickLink(\"body:realmsLI:realms\");\n         TESTER.clickLink(\"body:content:body:container:content:tabbedPanel:tabs-container:tabs:1:link\");\n \n@@ -99,7 +99,7 @@ public void userResourceBulkAction() {\n         formTester.select(\"checkgroup\", 0);\n \n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n-                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:bulkActionLink\",\n+                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n@@ -110,16 +110,16 @@ public void userResourceBulkAction() {\n     }\n \n     @Test\n-    public void userStatusBulkAction() {\n-        userStatusBulkAction(1, \"resource-testdb2\");\n+    public void userStatus() {\n+        userStatusBatch(1, \"resource-testdb2\");\n     }\n \n     @Test\n-    public void userStatusOnSyncopeOnlyBulkAction() {\n-        userStatusBulkAction(0, Constants.SYNCOPE);\n+    public void userStatusOnSyncopeOnly() {\n+        userStatusBatch(0, Constants.SYNCOPE);\n     }\n \n-    private void userStatusBulkAction(final int index, final String resource) {\n+    private void userStatusBatch(final int index, final String resource) {\n         // suspend \n         TESTER.clickLink(\"body:realmsLI:realms\");\n         TESTER.clickLink(\"body:content:body:container:content:tabbedPanel:tabs-container:tabs:1:link\");\n@@ -154,7 +154,7 @@ private void userStatusBulkAction(final int index, final String resource) {\n         formTester.select(\"checkgroup\", index);\n \n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n-                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:bulkActionLink\",\n+                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n@@ -209,7 +209,7 @@ private void userStatusBulkAction(final int index, final String resource) {\n         formTester.select(\"checkgroup\", index);\n \n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n-                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:bulkActionLink\",\n+                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n@@ -243,7 +243,7 @@ private void userStatusBulkAction(final int index, final String resource) {\n     }\n \n     @Test\n-    public void groupResourceBulkAction() {\n+    public void groupResource() {\n         TESTER.clickLink(\"body:realmsLI:realms\");\n         TESTER.clickLink(\"body:content:body:container:content:tabbedPanel:tabs-container:tabs:2:link\");\n \n@@ -279,7 +279,7 @@ public void groupResourceBulkAction() {\n         formTester.select(\"checkgroup\", 0);\n \n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n-                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:bulkActionLink\",\n+                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n@@ -290,7 +290,7 @@ public void groupResourceBulkAction() {\n     }\n \n     @Test\n-    public void printerResourceBulkAction() {\n+    public void printerResource() {\n         TESTER.clickLink(\"body:realmsLI:realms\");\n         TESTER.clickLink(\"body:content:body:container:content:tabbedPanel:tabs-container:tabs:3:link\");\n \n@@ -327,7 +327,7 @@ public void printerResourceBulkAction() {\n         formTester.select(\"checkgroup\", 0);\n \n         TESTER.executeAjaxEvent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n-                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:bulkActionLink\",\n+                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(TAB_PANEL + \"outerObjectsRepeater:2:outer:form:content:status:\"\n@@ -354,7 +354,7 @@ public void executePropagationTask() {\n         formTester.select(\"checkgroup\", 0);\n \n         TESTER.executeAjaxEvent(\"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:\"\n-                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:bulkActionLink\",\n+                + \"firstLevelContainer:first:container:content:searchContainer:resultTable:tablePanel:batchLink\",\n                 Constants.ON_CLICK);\n \n         TESTER.assertComponent(\"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:secondLevelContainer:\"","previous_filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/BulkActionITCase.java"},{"sha":"8ab5b6f9c1b48e1b8be416c5414590f96687ea9a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -80,7 +80,7 @@ public void showTopologyToggleMenu() {\n     }\n \n     @Test\n-    public void resourceBulkAction() {\n+    public void resourceBatchAction() {\n         Component component = findComponentByProp(\"key\", \"body:resources\", \"ws-target-resource-1\");\n         assertNotNull(component);\n         TESTER.executeAjaxEvent(component.getPageRelativePath() + \":res\", Constants.ON_CLICK);"},{"sha":"7ec16f17bde52b718043a166c302c55d79d8e08f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -48,7 +48,6 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -524,7 +523,7 @@ public void issueSYNCOPE164() throws Exception {\n         // 2. unlink the resource from the created user\n         DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(user.getKey()).\n                 action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_TESTDB).build();\n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n \n         // 3. change password on Syncope\n         UserPatch userPatch = new UserPatch();"},{"sha":"aaa26fc963f459859b3a3ce275d09a571dbe56ea","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.io.IOException;\n import java.security.AccessControlException;\n import java.util.Collections;\n import java.util.List;\n@@ -56,7 +57,6 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n@@ -76,12 +76,12 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.BulkMembersActionType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.ProvisionAction;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -312,7 +312,7 @@ public void updateAsGroupOwner() {\n     }\n \n     @Test\n-    public void unlink() {\n+    public void unlink() throws IOException {\n         GroupTO actual = createGroup(getSampleTO(\"unlink\")).getEntity();\n         assertNotNull(actual);\n \n@@ -321,7 +321,7 @@ public void unlink() {\n         DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build();\n \n-        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n \n         actual = groupService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -331,7 +331,7 @@ public void unlink() {\n     }\n \n     @Test\n-    public void link() {\n+    public void link() throws IOException {\n         GroupTO groupTO = getSampleTO(\"link\");\n         groupTO.getResources().clear();\n \n@@ -348,7 +348,7 @@ public void link() {\n         AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceAssociationAction.LINK).resource(RESOURCE_NAME_LDAP).build();\n \n-        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n \n         actual = groupService.read(actual.getKey());\n         assertFalse(actual.getResources().isEmpty());\n@@ -362,7 +362,7 @@ public void link() {\n     }\n \n     @Test\n-    public void unassign() {\n+    public void unassign() throws IOException {\n         GroupTO groupTO = null;\n \n         try {\n@@ -377,7 +377,7 @@ public void unassign() {\n             deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n             deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-            assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertNotNull(groupTO);\n@@ -397,7 +397,7 @@ public void unassign() {\n     }\n \n     @Test\n-    public void assign() {\n+    public void assign() throws IOException {\n         GroupTO groupTO = getSampleTO(\"assign\");\n         groupTO.getResources().clear();\n \n@@ -415,7 +415,7 @@ public void assign() {\n             AssociationPatch associationPatch = new AssociationPatch.Builder().key(groupTO.getKey()).\n                     action(ResourceAssociationAction.ASSIGN).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertFalse(groupTO.getResources().isEmpty());\n@@ -429,7 +429,7 @@ public void assign() {\n     }\n \n     @Test\n-    public void deprovision() {\n+    public void deprovision() throws IOException {\n         GroupTO groupTO = null;\n \n         try {\n@@ -442,7 +442,7 @@ public void deprovision() {\n             DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(groupTO.getKey()).\n                     action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertNotNull(groupTO);\n@@ -462,7 +462,7 @@ public void deprovision() {\n     }\n \n     @Test\n-    public void provision() {\n+    public void provision() throws IOException {\n         GroupTO groupTO = getSampleTO(\"provision\");\n         groupTO.getResources().clear();\n \n@@ -480,7 +480,7 @@ public void provision() {\n             AssociationPatch associationPatch = new AssociationPatch.Builder().key(groupTO.getKey()).\n                     action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertTrue(groupTO.getResources().isEmpty());\n@@ -495,7 +495,7 @@ public void provision() {\n     }\n \n     @Test\n-    public void deprovisionUnlinked() {\n+    public void deprovisionUnlinked() throws IOException {\n         GroupTO groupTO = getSampleTO(\"deprovision\");\n         groupTO.getResources().clear();\n \n@@ -513,7 +513,7 @@ public void deprovisionUnlinked() {\n             AssociationPatch associationPatch = new AssociationPatch.Builder().key(groupTO.getKey()).\n                     action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertTrue(groupTO.getResources().isEmpty());\n@@ -524,7 +524,7 @@ public void deprovisionUnlinked() {\n             DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(groupTO.getKey()).\n                     action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertNotNull(groupTO);\n@@ -776,7 +776,7 @@ public void capabilitiesOverride() {\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n             group = result.getEntity();\n \n             // 2. update succeeds\n@@ -789,7 +789,7 @@ public void capabilitiesOverride() {\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n             group = result.getEntity();\n \n             // 3. set capability override with only search allowed, but not enable\n@@ -811,7 +811,7 @@ public void capabilitiesOverride() {\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n             group = result.getEntity();\n \n             // 5. enable capability override\n@@ -833,7 +833,7 @@ public void capabilitiesOverride() {\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-            assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED, result.getPropagationStatuses().get(0).getStatus());\n+            assertEquals(ExecStatus.NOT_ATTEMPTED, result.getPropagationStatuses().get(0).getStatus());\n         } finally {\n             ldap.getCapabilitiesOverride().clear();\n             ldap.setOverrideCapabilities(false);\n@@ -874,7 +874,7 @@ public void typeExtensions() {\n     }\n \n     @Test\n-    public void bulkMembersAction() throws InterruptedException {\n+    public void provisionMembers() throws InterruptedException {\n         // 1. create group without resources\n         GroupTO groupTO = getBasicSampleTO(\"forProvision\");\n         groupTO = createGroup(groupTO).getEntity();\n@@ -893,7 +893,7 @@ public void bulkMembersAction() throws InterruptedException {\n \n         PropagationStatus propStatus = groupUpdateResult.getPropagationStatuses().get(0);\n         assertEquals(RESOURCE_NAME_LDAP, propStatus.getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, propStatus.getStatus());\n+        assertEquals(ExecStatus.SUCCESS, propStatus.getStatus());\n \n         // 4. verify that the user above is not found on LDAP\n         try {\n@@ -904,8 +904,8 @@ public void bulkMembersAction() throws InterruptedException {\n         }\n \n         try {\n-            // 5. bulk provision group members\n-            ExecTO exec = groupService.bulkMembersAction(groupTO.getKey(), BulkMembersActionType.PROVISION);\n+            // 5. provision group members\n+            ExecTO exec = groupService.provisionMembers(groupTO.getKey(), ProvisionAction.PROVISION);\n             assertNotNull(exec.getRefKey());\n \n             int i = 0;"},{"sha":"d51dca189f0c98bcf565c820ec91a55bec5a6859","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n@@ -47,7 +46,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n@@ -263,7 +262,7 @@ public void pull() {\n             patch.setKey(user.getKey());\n             patch.setAction(ResourceDeassociationAction.UNLINK);\n             patch.getResources().add(newResource.getKey());\n-            assertNotNull(userService.deassociate(patch).readEntity(BulkActionResult.class));\n+            assertNotNull(parseBatchResponse(userService.deassociate(patch)));\n \n             userService.delete(user.getKey());\n \n@@ -278,7 +277,7 @@ public void pull() {\n \n             ExecTO execution = AbstractTaskITCase.execProvisioningTask(\n                     taskService, TaskType.PULL, newTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // 5. verify that pulled user has\n             PagedResult<UserTO> users = userService.search(new AnyQuery.Builder()."},{"sha":"6480700bc5cd63c1d739ad649cccfe1e7d12b3d8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -206,7 +206,7 @@ public void createResourceAndPull() {\n             // verify execution status\n             String status = execution.getStatus();\n             assertNotNull(status);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(status));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(status));\n \n             // verify that pulled user is found\n             PagedResult<UserTO> matchingUsers = adminClient.getService(UserService.class).search(new AnyQuery.Builder()."},{"sha":"d9060fcbcff63f797ea510de7be1567c05128ae0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -23,19 +23,20 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n@@ -52,6 +53,7 @@\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n import org.junit.jupiter.api.Test;\n \n public class PropagationTaskITCase extends AbstractTaskITCase {\n@@ -92,9 +94,9 @@ public void read() {\n     }\n \n     @Test\n-    public void bulkAction() {\n+    public void batch() throws IOException {\n         // create user with testdb resource\n-        UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBulk@apache.org\");\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"taskBatch@apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n         userTO = createUser(userTO).getEntity();\n \n@@ -104,13 +106,16 @@ public void bulkAction() {\n                         getResult());\n         assertFalse(tasks.isEmpty());\n \n-        BulkAction bulkAction = new BulkAction();\n-        bulkAction.setType(BulkAction.Type.DELETE);\n-        tasks.forEach(taskTO -> bulkAction.getTargets().add(taskTO.getKey()));\n+        BatchRequest batchRequest = adminClient.batch();\n \n-        taskService.bulk(bulkAction);\n+        TaskService batchTaskService = batchRequest.getService(TaskService.class);\n+        tasks.forEach(task -> batchTaskService.delete(TaskType.PROPAGATION, task.getKey()));\n \n-        assertFalse(taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(100).build()).\n+        Response response = batchRequest.commit().getResponse();\n+        parseBatchResponse(response);\n+\n+        assertFalse(taskService.search(\n+                new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(100).build()).\n                 getResult().containsAll(tasks));\n     }\n "},{"sha":"c5c90e5103f5768e95db1495382b65b949e2f9c8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -77,7 +77,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -238,7 +238,7 @@ public void fromCSV() throws Exception {\n             assertNotNull(usersPre);\n \n             ExecTO exec = execProvisioningTask(taskService, TaskType.PULL, PULL_TASK_KEY, 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(exec.getStatus()));\n \n             LOG.debug(\"Execution of task {}:\\n{}\", PULL_TASK_KEY, exec);\n \n@@ -328,7 +328,7 @@ public void reconcileFromDB() {\n         try {\n             ExecTO execution = execProvisioningTask(\n                     taskService, TaskType.PULL, \"83f7e85d-9774-43fe-adba-ccd856312994\", 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             userTO = userService.read(\"testuser1\");\n             assertNotNull(userTO);\n@@ -341,7 +341,7 @@ public void reconcileFromDB() {\n             // re-execute the same PullTask: now user must be active\n             execution = execProvisioningTask(\n                     taskService, TaskType.PULL, \"83f7e85d-9774-43fe-adba-ccd856312994\", 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             userTO = userService.read(\"testuser1\");\n             assertNotNull(userTO);\n@@ -364,7 +364,7 @@ public void reconcileFromLDAP() {\n                 taskService, TaskType.PULL, \"1e419ca4-ea81-4493-a14f-28b90113686d\", 50, false);\n \n         // 1. verify execution status\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+        assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n         // 2. verify that pulled group is found\n         PagedResult<GroupTO> matchingGroups = groupService.search(new AnyQuery.Builder().realm(\n@@ -575,7 +575,7 @@ public void filteredReconciliation() throws IOException {\n \n             // 3. exec task\n             ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, task.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // 4. verify that only enabled user was pulled\n             userTO = userService.read(\"user2\");\n@@ -657,7 +657,7 @@ public void syncTokenWithErrors() {\n                     + \"false, 'syncTokenWithErrors1@syncope.apache.org', '2015-05-23 13:53:24.293')\");\n \n             ExecTO exec = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(exec.getStatus()));\n \n             resForTest = resourceService.read(resForTest.getKey());\n             assertTrue(resForTest.getProvision(AnyTypeKind.USER.name()).get().getSyncToken().contains(\"2014-05-23\"));\n@@ -667,7 +667,7 @@ public void syncTokenWithErrors() {\n                     + \"WHERE ID=1041\");\n \n             exec = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(exec.getStatus()));\n \n             resForTest = resourceService.read(resForTest.getKey());\n             assertTrue(resForTest.getProvision(AnyTypeKind.USER.name()).get().getSyncToken().contains(\"2016-05-23\"));\n@@ -719,7 +719,7 @@ public void remediation() {\n         try {\n             // 3. execute the pull task and verify that:\n             ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // 3a. user was not pulled\n             try {\n@@ -824,7 +824,7 @@ public void issueSYNCOPE68() {\n             assertFalse(((UserTO) actual.getTemplates().get(AnyTypeKind.USER.name())).getMemberships().isEmpty());\n \n             ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, actual.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             userTO = userService.read(\"testuser2\");\n             assertNotNull(userTO);\n@@ -954,13 +954,13 @@ public void issueSYNCOPE272() {\n         try {\n             assertNotNull(userTO);\n             assertEquals(1, result.getPropagationStatuses().size());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n             ExecTO taskExecTO = execProvisioningTask(\n                     taskService, TaskType.PULL, \"986867e2-993b-430e-8feb-aa9abb4c1dcd\", 50, false);\n \n             assertNotNull(taskExecTO.getStatus());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(taskExecTO.getStatus()));\n \n             userTO = userService.read(userTO.getKey());\n             assertNotNull(userTO);\n@@ -1066,7 +1066,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         assertEquals(actual.getJobDelegate(), pullTask.getJobDelegate());\n \n         ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+        assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n         // 5. Test the pulled user\n         Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(user.getUsername(), newCleanPassword).self();\n@@ -1151,7 +1151,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             assertNotNull(pullTask);\n \n             ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // 7. Test the pulled user\n             self = clientFactory.create(user.getUsername(), oldCleanPassword).self();\n@@ -1211,7 +1211,7 @@ public void issueSYNCOPE1062() {\n \n             // 3. exec the pull task\n             ExecTO execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // the user is successfully pulled...\n             user = userService.read(\"pullFromLDAP\");\n@@ -1247,7 +1247,7 @@ public void issueSYNCOPE1062() {\n \n             // 5. exec the pull task again\n             execution = execProvisioningTask(taskService, TaskType.PULL, pullTask.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(execution.getStatus()));\n \n             // the internal is updated...\n             user = userService.read(\"pullFromLDAP\");"},{"sha":"da4570bf0d9c20988db30bc5efa5399e00361103","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -51,7 +51,7 @@\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.MatchingRule;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -340,7 +340,7 @@ public void orgUnit() {\n         assertNotNull(pushTask);\n \n         ExecTO exec = execProvisioningTask(taskService, TaskType.PUSH, pushTask.getKey(), 50, false);\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n+        assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(exec.getStatus()));\n \n         // 2. check\n         assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, \"ou=odd,o=isp\"));\n@@ -428,7 +428,7 @@ public void issueSYNCOPE598() {\n \n             // execute the new task\n             ExecTO exec = execProvisioningTask(taskService, TaskType.PUSH, push.getKey(), 50, false);\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(exec.getStatus()));\n+            assertEquals(ExecStatus.SUCCESS, ExecStatus.valueOf(exec.getStatus()));\n         } finally {\n             groupService.delete(groupTO.getKey());\n             if (newResourceTO != null) {"},{"sha":"f62f2f9b92c5cd5dc7c9742a6768762d74b7e665","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -229,23 +229,23 @@ public void propagate() {\n         assertNotNull(result);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n         ProvisioningResult<RealmTO> resultChild = realmService.create(\"/test\", childRealm).readEntity(\n                 new GenericType<ProvisioningResult<RealmTO>>() {\n         });\n         assertNotNull(resultChild);\n         assertEquals(1, resultChild.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultChild.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, resultChild.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, resultChild.getPropagationStatuses().get(0).getStatus());\n \n         ProvisioningResult<RealmTO> resultDescendant = realmService.create(\"/test/child\", descendantRealm).readEntity(\n                 new GenericType<ProvisioningResult<RealmTO>>() {\n         });\n         assertNotNull(resultDescendant);\n         assertEquals(1, resultDescendant.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP_ORGUNIT, resultDescendant.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, resultDescendant.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, resultDescendant.getPropagationStatuses().get(0).getStatus());\n \n         // 3. check on LDAP\n         assertNotNull("},{"sha":"d8c5d27379e0d1a37b1c7d331a0c46df8044bb40","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n@@ -51,7 +50,8 @@\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -279,7 +279,7 @@ public void executeAndExport() throws IOException {\n     }\n \n     @Test\n-    public void deleteExecutions() {\n+    public void deleteExecutions() throws IOException {\n         Date start = new Date();\n         try {\n             Thread.sleep(1000);\n@@ -302,13 +302,12 @@ public void deleteExecutions() {\n         }\n         Date end = new Date();\n \n-        BulkActionResult result = reportService.deleteExecutions(\n-                new BulkExecDeleteQuery.Builder().key(reportTO.getKey()).startedAfter(start).endedBefore(end).build());\n-        assertNotNull(result);\n-\n-        assertEquals(1, result.getResults().size());\n-        assertEquals(execKey, result.getResults().keySet().iterator().next());\n-        assertEquals(BulkActionResult.Status.SUCCESS, result.getResults().entrySet().iterator().next().getValue());\n+        Response response = reportService.deleteExecutions(\n+                new ExecDeleteQuery.Builder().key(reportTO.getKey()).startedAfter(start).endedBefore(end).build());\n+        List<BatchResponseItem> batchResponseItems = parseBatchResponse(response);\n+        assertEquals(1, batchResponseItems.size());\n+        assertEquals(execKey, batchResponseItems.get(0).getHeaders().get(RESTHeaders.RESOURCE_KEY).get(0));\n+        assertEquals(Response.Status.OK.getStatusCode(), batchResponseItems.get(0).getStatus());\n     }\n \n     @Test"},{"sha":"b05480c16e7a86e3f46846a304385b1f316a2e2f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":82,"deletions":56,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -27,7 +27,9 @@\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n+import java.io.IOException;\n import java.security.AccessControlException;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n@@ -43,6 +45,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n@@ -57,9 +60,6 @@\n import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -76,12 +76,13 @@\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -148,7 +149,7 @@ public void createUserWithNoPropagation() {\n         PropagationTaskTO taskTO = tasks.getResult().get(0);\n         assertNotNull(taskTO);\n         assertFalse(taskTO.getExecutions().isEmpty());\n-        assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED.name(), taskTO.getExecutions().get(0).getStatus());\n+        assertEquals(ExecStatus.NOT_ATTEMPTED.name(), taskTO.getExecutions().get(0).getStatus());\n     }\n \n     @Test\n@@ -218,7 +219,7 @@ public void createUserWithDbPropagation() {\n         ProvisioningResult<UserTO> result = createUser(userTO);\n         assertNotNull(result);\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n     @Test\n@@ -426,7 +427,7 @@ public void delete() {\n \n         // check for propagation result\n         assertFalse(result.getPropagationStatuses().isEmpty());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n         try {\n             userService.delete(userTO.getKey());\n@@ -455,7 +456,7 @@ public void deleteByUsername() {\n \n         // check for propagation result\n         assertFalse(result.getPropagationStatuses().isEmpty());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n         try {\n             userService.read(userTO.getKey());\n@@ -875,11 +876,11 @@ private void verifyAsyncResult(final List<PropagationStatus> statuses) {\n         statuses.forEach(status -> {\n             byResource.put(status.getResource(), status);\n         });\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, byResource.get(RESOURCE_NAME_LDAP).getStatus());\n-        assertTrue(byResource.get(RESOURCE_NAME_TESTDB).getStatus() == PropagationTaskExecStatus.CREATED\n-                || byResource.get(RESOURCE_NAME_TESTDB).getStatus() == PropagationTaskExecStatus.SUCCESS);\n-        assertTrue(byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == PropagationTaskExecStatus.CREATED\n-                || byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == PropagationTaskExecStatus.SUCCESS);\n+        assertEquals(ExecStatus.SUCCESS, byResource.get(RESOURCE_NAME_LDAP).getStatus());\n+        assertTrue(byResource.get(RESOURCE_NAME_TESTDB).getStatus() == ExecStatus.CREATED\n+                || byResource.get(RESOURCE_NAME_TESTDB).getStatus() == ExecStatus.SUCCESS);\n+        assertTrue(byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == ExecStatus.CREATED\n+                || byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == ExecStatus.SUCCESS);\n     }\n \n     @Test\n@@ -1034,39 +1035,64 @@ public void mappingPurpose() {\n     }\n \n     @Test\n-    public void bulkActions() {\n-        BulkAction bulkAction = new BulkAction();\n-\n+    public void batch() throws IOException {\n+        List<String> users = new ArrayList<>();\n         for (int i = 0; i < 10; i++) {\n-            UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n-            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getEntity().getKey()));\n+            UserTO userTO = getUniqueSampleTO(\"batch_\" + i + \"@apache.org\");\n+            users.add(String.valueOf(createUser(userTO).getEntity().getKey()));\n         }\n \n         // check for a fail\n-        bulkAction.getTargets().add(String.valueOf(Long.MAX_VALUE));\n-\n-        assertEquals(11, bulkAction.getTargets().size());\n-\n-        bulkAction.setType(BulkAction.Type.SUSPEND);\n-        BulkActionResult res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n-        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n-        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n-        assertEquals(\"suspended\", userService.read(res.getResultByStatus(Status.SUCCESS).get(3)).getStatus());\n-\n-        bulkAction.setType(BulkAction.Type.REACTIVATE);\n-        res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n-        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n-        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n-        assertEquals(\"active\", userService.read(res.getResultByStatus(Status.SUCCESS).get(3)).getStatus());\n-\n-        bulkAction.setType(BulkAction.Type.DELETE);\n-        res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n-        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n-        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+        users.add(UUID.randomUUID().toString());\n+\n+        assertEquals(11, users.size());\n+\n+        BatchRequest batchRequest = adminClient.batch();\n+\n+        UserService batchUserService = batchRequest.getService(UserService.class);\n+        users.forEach(user -> {\n+            batchUserService.status(\n+                    new StatusPatch.Builder().key(user).type(StatusPatchType.SUSPEND).onSyncope(true).build());\n+        });\n+        List<BatchResponseItem> batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n+        assertEquals(10, batchResponseItems.stream().\n+                filter(item -> Response.Status.OK.getStatusCode() == item.getStatus()).count());\n+        assertEquals(1, batchResponseItems.stream().\n+                filter(item -> Response.Status.NOT_FOUND.getStatusCode() == item.getStatus()).count());\n+        assertEquals(\"suspended\", userService.read(users.get(3)).getStatus());\n+\n+        UserService batchUserService2 = batchRequest.getService(UserService.class);\n+        users.forEach(user -> {\n+            batchUserService2.status(\n+                    new StatusPatch.Builder().key(user).type(StatusPatchType.REACTIVATE).onSyncope(true).build());\n+        });\n+        batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n+        assertEquals(10, batchResponseItems.stream().\n+                filter(item -> Response.Status.OK.getStatusCode() == item.getStatus()).count());\n+        assertEquals(1, batchResponseItems.stream().\n+                filter(item -> Response.Status.NOT_FOUND.getStatusCode() == item.getStatus()).count());\n+        assertEquals(\"active\", userService.read(users.get(3)).getStatus());\n+\n+        UserService batchUserService3 = batchRequest.getService(UserService.class);\n+        users.forEach(user -> {\n+            batchUserService3.delete(user);\n+        });\n+        batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n+        assertEquals(10, batchResponseItems.stream().\n+                filter(item -> Response.Status.OK.getStatusCode() == item.getStatus()).count());\n+        assertEquals(1, batchResponseItems.stream().\n+                filter(item -> Response.Status.NOT_FOUND.getStatusCode() == item.getStatus()).count());\n+\n+        try {\n+            userService.read(users.get(3));\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n     }\n \n     @Test\n-    public void unlink() {\n+    public void unlink() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"unlink@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1081,7 +1107,7 @@ public void unlink() {\n         DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1091,7 +1117,7 @@ public void unlink() {\n     }\n \n     @Test\n-    public void link() {\n+    public void link() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"link@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1112,7 +1138,7 @@ public void link() {\n         AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceAssociationAction.LINK).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1127,7 +1153,7 @@ public void link() {\n     }\n \n     @Test\n-    public void unassign() {\n+    public void unassign() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"unassign@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1142,7 +1168,7 @@ public void unassign() {\n         DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.UNASSIGN).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1157,7 +1183,7 @@ public void unassign() {\n     }\n \n     @Test\n-    public void assign() {\n+    public void assign() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"assign@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1178,7 +1204,7 @@ public void assign() {\n         AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n                 value(\"password\").action(ResourceAssociationAction.ASSIGN).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1187,7 +1213,7 @@ public void assign() {\n     }\n \n     @Test\n-    public void deprovision() {\n+    public void deprovision() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"deprovision@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1202,7 +1228,7 @@ public void deprovision() {\n         DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1217,7 +1243,7 @@ public void deprovision() {\n     }\n \n     @Test\n-    public void provision() {\n+    public void provision() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"provision@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1238,7 +1264,7 @@ public void provision() {\n         AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n                 value(\"password\").action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1247,7 +1273,7 @@ public void provision() {\n     }\n \n     @Test\n-    public void deprovisionUnlinked() {\n+    public void deprovisionUnlinked() throws IOException {\n         UserTO userTO = getUniqueSampleTO(\"provision@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n@@ -1268,7 +1294,7 @@ public void deprovisionUnlinked() {\n         AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n                 value(\"password\").action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1278,7 +1304,7 @@ public void deprovisionUnlinked() {\n         DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1303,7 +1329,7 @@ public void restResource() {\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n         assertEquals(\"surname\", userTO.getPlainAttr(\"surname\").get().getValues().get(0));\n \n@@ -1323,7 +1349,7 @@ public void restResource() {\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n         assertEquals(\"surname2\", result.getEntity().getPlainAttr(\"surname\").get().getValues().get(0));\n \n@@ -1337,7 +1363,7 @@ public void restResource() {\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertEquals(\"rest-target-resource\", result.getPropagationStatuses().get(0).getResource());\n \n         // verify user was removed by the backend REST service"},{"sha":"c6bfcad8d33902f6d184c18a0c1af048d5600dd0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -73,7 +73,7 @@\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n@@ -220,7 +220,7 @@ public void issue280() {\n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n-        assertEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, propagations.get(0).getStatus());\n \n         String resource = propagations.get(0).getResource();\n         assertEquals(RESOURCE_NAME_TESTDB, resource);\n@@ -239,7 +239,7 @@ public void issue281() {\n         List<PropagationStatus> propagations = result.getPropagationStatuses();\n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n+        assertNotEquals(ExecStatus.SUCCESS, propagations.get(0).getStatus());\n \n         String resource = propagations.get(0).getResource();\n         assertEquals(RESOURCE_NAME_CSV, resource);\n@@ -350,7 +350,7 @@ public void issueSYNCOPE185() {\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         // 2. delete this user\n@@ -407,7 +407,7 @@ public void issueSYNCOPE267() {\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         ConnObjectTO connObjectTO =\n@@ -450,7 +450,7 @@ public void issueSYNCOPE279() {\n         ProvisioningResult<UserTO> result = createUser(userTO);\n         assertEquals(RESOURCE_NAME_TIMEOUT, result.getPropagationStatuses().get(0).getResource());\n         assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n-        assertEquals(PropagationTaskExecStatus.FAILURE, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.FAILURE, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n     @Test\n@@ -557,7 +557,7 @@ public void issueSYNCOPE136AES() {\n             PropagationStatus prop = props.iterator().next();\n             assertNotNull(prop);\n             assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+            assertEquals(ExecStatus.SUCCESS, prop.getStatus());\n         } finally {\n             // restore initial cipher algorithm\n             pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n@@ -594,7 +594,7 @@ public void issueSYNCOPE136Random() {\n         PropagationStatus prop = props.iterator().next();\n         assertNotNull(prop);\n         assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+        assertEquals(ExecStatus.SUCCESS, prop.getStatus());\n     }\n \n     @Test\n@@ -744,7 +744,7 @@ public void issueSYNCOPE383() {\n         assertNotNull(result);\n         userTO = result.getEntity();\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertNotEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n         userTO = result.getEntity();\n \n@@ -757,7 +757,7 @@ public void issueSYNCOPE383() {\n \n         result = updateUser(userPatch);\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n     }\n \n     @Test\n@@ -794,7 +794,7 @@ public void issueSYNCOPE402() {\n         assertNotNull(ws1PropagationStatus);\n         assertEquals(RESOURCE_NAME_WS1, ws1PropagationStatus.getResource());\n         assertNotNull(ws1PropagationStatus.getFailureReason());\n-        assertEquals(PropagationTaskExecStatus.FAILURE, ws1PropagationStatus.getStatus());\n+        assertEquals(ExecStatus.FAILURE, ws1PropagationStatus.getStatus());\n     }\n \n     @Test\n@@ -862,7 +862,7 @@ public void issueSYNCOPE435() {\n         assertNotNull(result);\n         userTO = result.getEntity();\n         assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertNotEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertTrue(result.getPropagationStatuses().get(0).getFailureReason().\n                 startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n     }\n@@ -908,7 +908,7 @@ public void issueSYNCOPE493() {\n         ProvisioningResult<UserTO> result = createUser(userTO);\n         assertNotNull(userTO);\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         ConnObjectTO actual =\n@@ -949,7 +949,7 @@ public void issueSYNCOPE493() {\n         result = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         ConnObjectTO newUser =\n@@ -1304,7 +1304,7 @@ public void issueSYNCOPE686() {\n             PropagationStatus prop = props.iterator().next();\n             assertNotNull(prop);\n             assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+            assertEquals(ExecStatus.SUCCESS, prop.getStatus());\n         } finally {\n             // restore initial cipher algorithm\n             pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n@@ -1431,9 +1431,9 @@ public void issueSYNCOPE1166() {\n         assertNotNull(result);\n         assertEquals(2, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(1).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n     }\n \n     @Test"},{"sha":"14b1928b9eed9abe2103afaec37ba5000b29bae2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a2fdbbddb1b61e04bfa092c40b2c1ef050de33/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=34a2fdbbddb1b61e04bfa092c40b2c1ef050de33","patch":"@@ -54,7 +54,7 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n@@ -137,7 +137,7 @@ public void issueSYNCOPE260() {\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         ConnObjectTO connObjectTO =\n@@ -156,7 +156,7 @@ public void issueSYNCOPE260() {\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -196,7 +196,7 @@ public void issueSYNCOPE260() {\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n         userTO = result.getEntity();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -545,8 +545,8 @@ public void issueSYNCOPE453() {\n \n             ProvisioningResult<UserTO> result = createUser(userTO);\n             assertEquals(2, result.getPropagationStatuses().size());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n             userTO = result.getEntity();\n \n             JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);"}]}