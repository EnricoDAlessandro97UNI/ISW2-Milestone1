{"sha":"ccf3091eff236d5a2ce5ba063e794ab196256246","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNjZjMwOTFlZmYyMzZkNWEyY2U1YmEwNjNlNzk0YWIxOTYyNTYyNDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-07-21T10:24:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-07-21T10:24:21Z"},"message":"Elasticsearch: remove usage of deprecated methods + adjust with dynamic domain management","tree":{"sha":"917ff9ac939a388f8306ee1048dfb3a285bebbd8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/917ff9ac939a388f8306ee1048dfb3a285bebbd8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ccf3091eff236d5a2ce5ba063e794ab196256246","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccf3091eff236d5a2ce5ba063e794ab196256246","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ccf3091eff236d5a2ce5ba063e794ab196256246","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccf3091eff236d5a2ce5ba063e794ab196256246/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fc974e15fdc7752d5751ae7af349c4d1b1a52b74","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fc974e15fdc7752d5751ae7af349c4d1b1a52b74","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fc974e15fdc7752d5751ae7af349c4d1b1a52b74"}],"stats":{"total":298,"additions":193,"deletions":105},"files":[{"sha":"a854a31893a8fcc237cbc6935602dba70d91f6f6","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchIndexManager.java","status":"modified","additions":76,"deletions":9,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchIndexManager.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -19,19 +19,29 @@\n package org.apache.syncope.ext.elasticsearch.client;\n \n import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n import org.elasticsearch.action.delete.DeleteRequest;\n import org.elasticsearch.action.delete.DeleteResponse;\n import org.elasticsearch.action.get.GetRequest;\n import org.elasticsearch.action.get.GetResponse;\n import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.support.master.AcknowledgedResponse;\n import org.elasticsearch.action.update.UpdateRequest;\n import org.elasticsearch.action.update.UpdateResponse;\n import org.elasticsearch.client.RequestOptions;\n import org.elasticsearch.client.RestHighLevelClient;\n+import org.elasticsearch.client.indices.CreateIndexRequest;\n+import org.elasticsearch.client.indices.CreateIndexResponse;\n+import org.elasticsearch.client.indices.GetIndexRequest;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -50,19 +60,77 @@ public class ElasticsearchIndexManager {\n     @Autowired\n     private ElasticsearchUtils elasticsearchUtils;\n \n+    public boolean existsIndex(final String domain, final AnyTypeKind kind) throws IOException {\n+        return client.indices().exists(\n+                new GetIndexRequest(elasticsearchUtils.getContextDomainName(domain, kind)), RequestOptions.DEFAULT);\n+    }\n+\n+    public void createIndex(final String domain, final AnyTypeKind kind)\n+            throws InterruptedException, ExecutionException, IOException {\n+\n+        XContentBuilder settings = XContentFactory.jsonBuilder().\n+                startObject().\n+                startObject(\"analysis\").\n+                startObject(\"analyzer\").\n+                startObject(\"string_lowercase\").\n+                field(\"type\", \"custom\").\n+                field(\"tokenizer\", \"standard\").\n+                field(\"filter\").\n+                startArray().\n+                value(\"lowercase\").\n+                endArray().\n+                endObject().\n+                endObject().\n+                endObject().\n+                startObject(\"index\").\n+                field(\"number_of_shards\", elasticsearchUtils.getNumberOfShards()).\n+                field(\"number_of_replicas\", elasticsearchUtils.getNumberOfReplicas()).\n+                endObject().\n+                endObject();\n+\n+        XContentBuilder mapping = XContentFactory.jsonBuilder().\n+                startObject().\n+                startArray(\"dynamic_templates\").\n+                startObject().\n+                startObject(\"strings\").\n+                field(\"match_mapping_type\", \"string\").\n+                startObject(\"mapping\").\n+                field(\"type\", \"keyword\").\n+                field(\"analyzer\", \"string_lowercase\").\n+                endObject().\n+                endObject().\n+                endObject().\n+                endArray().\n+                endObject();\n+\n+        CreateIndexResponse response = client.indices().create(\n+                new CreateIndexRequest(elasticsearchUtils.getContextDomainName(domain, kind)).\n+                        settings(settings).\n+                        mapping(mapping), RequestOptions.DEFAULT);\n+        LOG.debug(\"Successfully created {} for {}: {}\",\n+                elasticsearchUtils.getContextDomainName(domain, kind), kind.name(), response);\n+    }\n+\n+    public void removeIndex(final String domain, final AnyTypeKind kind) throws IOException {\n+        AcknowledgedResponse acknowledgedResponse = client.indices().delete(\n+                new DeleteIndexRequest(elasticsearchUtils.getContextDomainName(domain, kind)), RequestOptions.DEFAULT);\n+        LOG.debug(\"Successfully removed {}: {}\",\n+                elasticsearchUtils.getContextDomainName(domain, kind), acknowledgedResponse);\n+    }\n+\n     @TransactionalEventListener\n     public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException {\n         GetRequest getRequest = new GetRequest(\n-                elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n-                event.getAny().getType().getKind().name(),\n+                elasticsearchUtils.getContextDomainName(\n+                        AuthContextUtils.getDomain(), event.getAny().getType().getKind()),\n                 event.getAny().getKey());\n         GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);\n         if (getResponse.isExists()) {\n             LOG.debug(\"About to update index for {}\", event.getAny());\n \n             UpdateRequest request = new UpdateRequest(\n-                    elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n-                    event.getAny().getType().getKind().name(),\n+                    elasticsearchUtils.getContextDomainName(\n+                            AuthContextUtils.getDomain(), event.getAny().getType().getKind()),\n                     event.getAny().getKey()).\n                     retryOnConflict(elasticsearchUtils.getRetryOnConflict()).\n                     doc(elasticsearchUtils.builder(event.getAny()));\n@@ -72,9 +140,9 @@ public void after(final AnyCreatedUpdatedEvent<Any<?>> event) throws IOException\n             LOG.debug(\"About to create index for {}\", event.getAny());\n \n             IndexRequest request = new IndexRequest(\n-                    elasticsearchUtils.getContextDomainName(event.getAny().getType().getKind()),\n-                    event.getAny().getType().getKind().name(),\n-                    event.getAny().getKey()).\n+                    elasticsearchUtils.getContextDomainName(\n+                            AuthContextUtils.getDomain(), event.getAny().getType().getKind())).\n+                    id(event.getAny().getKey()).\n                     source(elasticsearchUtils.builder(event.getAny()));\n             IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n             LOG.debug(\"Index successfully created for {}: {}\", event.getAny(), response);\n@@ -86,8 +154,7 @@ public void after(final AnyDeletedEvent event) throws IOException {\n         LOG.debug(\"About to delete index for {}[{}]\", event.getAnyTypeKind(), event.getAnyKey());\n \n         DeleteRequest request = new DeleteRequest(\n-                elasticsearchUtils.getContextDomainName(event.getAnyTypeKind()),\n-                event.getAnyTypeKind().name(),\n+                elasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), event.getAnyTypeKind()),\n                 event.getAnyKey());\n         DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);\n         LOG.debug(\"Index successfully deleted for {}[{}]: {}\","},{"sha":"73f6436c4e05c68377987d54e1ba9d00100c1e01","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.elasticsearch.common.xcontent.XContentBuilder;\n import org.elasticsearch.common.xcontent.XContentFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -209,7 +208,7 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n         return builder.endObject();\n     }\n \n-    public String getContextDomainName(final AnyTypeKind kind) {\n-        return AuthContextUtils.getDomain().toLowerCase() + \"_\" + kind.name().toLowerCase();\n+    public String getContextDomainName(final String domain, final AnyTypeKind kind) {\n+        return domain.toLowerCase() + \"_\" + kind.name().toLowerCase();\n     }\n }"},{"sha":"1697683c052ee3ab525d2f535de297eab39785c3","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainIndexLoader.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainIndexLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainIndexLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainIndexLoader.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import javax.sql.DataSource;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.Ordered;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DomainIndexLoader implements SyncopeCoreLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DomainIndexLoader.class);\n+\n+    @Autowired\n+    private ElasticsearchIndexManager indexManager;\n+\n+    @Override\n+    public int getOrder() {\n+        return Ordered.LOWEST_PRECEDENCE;\n+    }\n+\n+    @Override\n+    public void load(final String domain, final DataSource datasource) {\n+        try {\n+            if (!indexManager.existsIndex(domain, AnyTypeKind.USER)) {\n+                indexManager.createIndex(domain, AnyTypeKind.USER);\n+            }\n+            if (!indexManager.existsIndex(domain, AnyTypeKind.GROUP)) {\n+                indexManager.createIndex(domain, AnyTypeKind.GROUP);\n+            }\n+            if (!indexManager.existsIndex(domain, AnyTypeKind.ANY_OBJECT)) {\n+                indexManager.createIndex(domain, AnyTypeKind.ANY_OBJECT);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While creating index for domain {}\", domain, e);\n+        }\n+    }\n+}"},{"sha":"63a768865beb13b231c54b341e30ffe56bd81cfd","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchType;\n@@ -139,7 +140,7 @@ private SearchRequest searchRequest(\n                 size(size);\n         sortBuilders.forEach(sort -> sourceBuilder.sort(sort));\n \n-        return new SearchRequest(elasticsearchUtils.getContextDomainName(kind)).\n+        return new SearchRequest(elasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n                 searchType(SearchType.QUERY_THEN_FETCH).\n                 source(sourceBuilder);\n     }"},{"sha":"8b8c3f497e17fc6389110ea4d735c205fcb3cf73","filename":"ext/elasticsearch/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ElasticsearchReindex.java","status":"modified","additions":26,"deletions":81,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FElasticsearchReindex.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import java.io.IOException;\n-import java.util.concurrent.ExecutionException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -30,18 +28,12 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchIndexManager;\n import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n-import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n-import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\n-import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\n-import org.elasticsearch.action.admin.indices.get.GetIndexRequest;\n import org.elasticsearch.action.index.IndexRequest;\n import org.elasticsearch.action.index.IndexResponse;\n-import org.elasticsearch.action.support.master.AcknowledgedResponse;\n import org.elasticsearch.client.RequestOptions;\n import org.elasticsearch.client.RestHighLevelClient;\n-import org.elasticsearch.common.xcontent.XContentBuilder;\n-import org.elasticsearch.common.xcontent.XContentFactory;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -53,6 +45,9 @@ public class ElasticsearchReindex extends AbstractSchedTaskJobDelegate {\n     @Autowired\n     private RestHighLevelClient client;\n \n+    @Autowired\n+    private ElasticsearchIndexManager indexManager;\n+\n     @Autowired\n     private ElasticsearchUtils elasticsearchUtils;\n \n@@ -71,22 +66,29 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             LOG.debug(\"Start rebuilding indexes\");\n \n             try {\n-                removeIndexIfExists(AnyTypeKind.USER);\n-                removeIndexIfExists(AnyTypeKind.GROUP);\n-                removeIndexIfExists(AnyTypeKind.ANY_OBJECT);\n+                if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)) {\n+                    indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER);\n+                }\n+                indexManager.createIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER);\n \n-                createIndex(AnyTypeKind.USER);\n-                createIndex(AnyTypeKind.GROUP);\n-                createIndex(AnyTypeKind.ANY_OBJECT);\n+                if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP)) {\n+                    indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP);\n+                }\n+                indexManager.createIndex(AuthContextUtils.getDomain(), AnyTypeKind.GROUP);\n+\n+                if (indexManager.existsIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)) {\n+                    indexManager.removeIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT);\n+                }\n+                indexManager.createIndex(AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT);\n \n                 LOG.debug(\"Indexing users...\");\n                 for (int page = 1; page <= (userDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n \n                     for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest request = new IndexRequest(\n-                                elasticsearchUtils.getContextDomainName(AnyTypeKind.USER),\n-                                AnyTypeKind.USER.name(),\n-                                user.getKey()).\n+                                elasticsearchUtils.getContextDomainName(\n+                                        AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n+                                id(user.getKey()).\n                                 source(elasticsearchUtils.builder(user));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", user, response);\n@@ -97,9 +99,9 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                 for (int page = 1; page <= (groupDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (Group group : groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest request = new IndexRequest(\n-                                elasticsearchUtils.getContextDomainName(AnyTypeKind.GROUP),\n-                                AnyTypeKind.GROUP.name(),\n-                                group.getKey()).\n+                                elasticsearchUtils.getContextDomainName(\n+                                        AuthContextUtils.getDomain(), AnyTypeKind.GROUP)).\n+                                id(group.getKey()).\n                                 source(elasticsearchUtils.builder(group));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", group, response);\n@@ -110,9 +112,9 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                 for (int page = 1; page <= (anyObjectDAO.count() / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                     for (AnyObject anyObject : anyObjectDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\n                         IndexRequest request = new IndexRequest(\n-                                elasticsearchUtils.getContextDomainName(AnyTypeKind.ANY_OBJECT),\n-                                AnyTypeKind.ANY_OBJECT.name(),\n-                                anyObject.getKey()).\n+                                elasticsearchUtils.getContextDomainName(\n+                                        AuthContextUtils.getDomain(), AnyTypeKind.ANY_OBJECT)).\n+                                id(anyObject.getKey()).\n                                 source(elasticsearchUtils.builder(anyObject));\n                         IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n                         LOG.debug(\"Index successfully created for {}: {}\", anyObject, response);\n@@ -128,63 +130,6 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         return \"SUCCESS\";\n     }\n \n-    private void removeIndexIfExists(final AnyTypeKind kind) throws IOException {\n-        if (client.indices().exists(\n-                new GetIndexRequest().indices(elasticsearchUtils.getContextDomainName(kind)), RequestOptions.DEFAULT)) {\n-\n-            AcknowledgedResponse acknowledgedResponse = client.indices().delete(\n-                    new DeleteIndexRequest(elasticsearchUtils.getContextDomainName(kind)), RequestOptions.DEFAULT);\n-            LOG.debug(\"Successfully removed {}: {}\",\n-                    elasticsearchUtils.getContextDomainName(kind), acknowledgedResponse);\n-        }\n-    }\n-\n-    private void createIndex(final AnyTypeKind kind)\n-            throws InterruptedException, ExecutionException, IOException {\n-\n-        XContentBuilder settings = XContentFactory.jsonBuilder().\n-                startObject().\n-                startObject(\"analysis\").\n-                startObject(\"analyzer\").\n-                startObject(\"string_lowercase\").\n-                field(\"type\", \"custom\").\n-                field(\"tokenizer\", \"standard\").\n-                field(\"filter\").\n-                startArray().\n-                value(\"lowercase\").\n-                endArray().\n-                endObject().\n-                endObject().\n-                endObject().\n-                startObject(\"index\").\n-                field(\"number_of_shards\", elasticsearchUtils.getNumberOfShards()).\n-                field(\"number_of_replicas\", elasticsearchUtils.getNumberOfReplicas()).\n-                endObject().\n-                endObject();\n-\n-        XContentBuilder mapping = XContentFactory.jsonBuilder().\n-                startObject().\n-                startArray(\"dynamic_templates\").\n-                startObject().\n-                startObject(\"strings\").\n-                field(\"match_mapping_type\", \"string\").\n-                startObject(\"mapping\").\n-                field(\"type\", \"keyword\").\n-                field(\"analyzer\", \"string_lowercase\").\n-                endObject().\n-                endObject().\n-                endObject().\n-                endArray().\n-                endObject();\n-\n-        CreateIndexResponse response = client.indices().create(\n-                new CreateIndexRequest(elasticsearchUtils.getContextDomainName(kind)).\n-                        settings(settings).\n-                        mapping(kind.name(), mapping), RequestOptions.DEFAULT);\n-        LOG.debug(\"Successfully created {} for {}: {}\",\n-                elasticsearchUtils.getContextDomainName(kind), kind.name(), response);\n-    }\n-\n     @Override\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return true;"},{"sha":"f652f72004c59f99b4a6a0327f1981ca9784d770","filename":"fit/core-reference/src/main/java/org/apache/syncope/core/logic/init/ElasticsearchInit.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FElasticsearchInit.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -48,17 +48,16 @@ public class ElasticsearchInit {\n     public void init() {\n         Implementation reindex = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).\n                 stream().\n-                filter(impl -> impl.getEngine() == ImplementationEngine.JAVA\n-                && ES_REINDEX.equals(impl.getBody())).\n-                findAny().orElse(null);\n-        if (reindex == null) {\n-            reindex = entityFactory.newEntity(Implementation.class);\n-            reindex.setKey(ES_REINDEX);\n-            reindex.setEngine(ImplementationEngine.JAVA);\n-            reindex.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n-            reindex.setBody(ES_REINDEX);\n-            reindex = implementationDAO.save(reindex);\n-        }\n+                filter(impl -> impl.getEngine() == ImplementationEngine.JAVA && ES_REINDEX.equals(impl.getBody())).\n+                findAny().\n+                orElseGet(() -> {\n+                    Implementation impl = entityFactory.newEntity(Implementation.class);\n+                    impl.setKey(ES_REINDEX);\n+                    impl.setEngine(ImplementationEngine.JAVA);\n+                    impl.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n+                    impl.setBody(ES_REINDEX);\n+                    return implementationDAO.save(impl);\n+                });\n \n         SchedTaskTO task = new SchedTaskTO();\n         task.setJobDelegate(reindex.getKey());"},{"sha":"02935dd7a976db135e833c961415c97f1c9637ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.ElasticsearchDetector;\n import org.junit.jupiter.api.Test;\n \n public class KeymasterITCase extends AbstractITCase {\n@@ -273,6 +274,14 @@ public void domainCRUD() throws Exception {\n         assertNotNull(user);\n         assertEquals(\"monteverdi\", user.getUsername());\n \n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         users = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).page(1).size(1).build());\n         assertNotNull(users);"},{"sha":"ad0505ba355e320d4493784653127aa1ff7f25b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ccf3091eff236d5a2ce5ba063e794ab196256246/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ccf3091eff236d5a2ce5ba063e794ab196256246/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=ccf3091eff236d5a2ce5ba063e794ab196256246","patch":"@@ -541,6 +541,14 @@ public void issueSYNCOPE1223() {\n         req.getPlainAttrs().add(new AttrPatch.Builder(attr(\"ctype\", \"ou=sample,o=isp\")).build());\n         userService.update(req);\n \n+\tif (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n         try {\n             PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().fiql(\n                     SyncopeClient.getUserSearchConditionBuilder().is(\"ctype\").equalTo(\"ou=sample%252Co=isp\").query())."}]}