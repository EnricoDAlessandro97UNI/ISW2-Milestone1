{"sha":"3c19c4f594a7c080b61cfa92a892c05cd317d1bc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNjMTljNGY1OTRhN2MwODBiNjFjZmE5MmE4OTJjMDVjZDMxN2QxYmM=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"marco.disabatino@tirasa.net","date":"2020-02-05T22:40:11Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-02-06T09:33:12Z"},"message":"[SYNCOPE-1538] Replaced DropDown with a search field","tree":{"sha":"51fea0fb3e69953ea5c311ef1603266e4afc8378","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/51fea0fb3e69953ea5c311ef1603266e4afc8378"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3c19c4f594a7c080b61cfa92a892c05cd317d1bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3c19c4f594a7c080b61cfa92a892c05cd317d1bc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3c19c4f594a7c080b61cfa92a892c05cd317d1bc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dbae236c12f67f41fb1a2737d70b95d24f1b605c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dbae236c12f67f41fb1a2737d70b95d24f1b605c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dbae236c12f67f41fb1a2737d70b95d24f1b605c"}],"stats":{"total":786,"additions":623,"deletions":163},"files":[{"sha":"ec1bbc874eca5c7d2383fa992ad19ddf7d76b635","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":26,"deletions":7,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -19,15 +19,18 @@\n package org.apache.syncope.client.console.status;\n \n import java.util.Comparator;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.rest.ReconciliationRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n@@ -44,6 +47,7 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.model.CompoundPropertyModel;\n@@ -109,20 +113,35 @@ public ReconTaskPanel(\n         if (taskTO instanceof PushTaskTO) {\n             form.add(new Label(\"realm\", \"\"));\n         } else {\n-            AjaxDropDownChoicePanel<String> realm = new AjaxDropDownChoicePanel<>(\n-                    \"realm\", \"destinationRealm\", new PropertyModel<>(taskTO, \"destinationRealm\"), false);\n+            boolean isSearchEnabled = RealmsUtils.enableSearchRealm();\n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n+            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+\n+            AjaxSearchFieldPanel realm = new AjaxSearchFieldPanel(\n+                    \"realm\", \"destinationRealm\", new PropertyModel<String>(taskTO, \"destinationRealm\"), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return (RealmsUtils.checkInput(input)\n+                            ? (isSearchEnabled\n+                                    ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n+                                    : RealmRestClient.list())\n+                            : List.<RealmTO>of()).stream().\n+                            sorted(Comparator.comparing(RealmTO::getName)).\n+                            map(RealmTO::getFullPath).collect(Collectors.toList()).iterator();\n+                }\n+            };\n+\n             form.add(realm);\n             realm.addRequiredLabel();\n             realm.setOutputMarkupId(true);\n \n             if (isOnSyncope) {\n                 realm.getField().setModelObject(SyncopeConstants.ROOT_REALM);\n                 realm.setVisible(false);\n-            } else {\n-                realm.setChoices(RealmRestClient.list().stream().\n-                        sorted(Comparator.comparing(RealmTO::getName)).\n-                        map(RealmTO::getFullPath).\n-                        collect(Collectors.toList()));\n             }\n         }\n "},{"sha":"a424311251cb371b96f2b82ac4e3abfa6ec308dd","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":1,"deletions":15,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.client.console.rest.BaseRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.WebMarkupContainerNoVeil;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n@@ -53,7 +54,6 @@\n import org.apache.wicket.ajax.AbstractAjaxTimerBehavior;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.IAjaxIndicatorAware;\n import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n@@ -599,18 +599,4 @@ public void onEvent(final IEvent<?> event) {\n                     resourceCreateEvent.getKind()));\n         }\n     }\n-\n-    private static class WebMarkupContainerNoVeil extends WebMarkupContainer implements IAjaxIndicatorAware {\n-\n-        private static final long serialVersionUID = 6883930486048460708L;\n-\n-        WebMarkupContainerNoVeil(final String id) {\n-            super(id);\n-        }\n-\n-        @Override\n-        public String getAjaxIndicatorMarkupId() {\n-            return StringUtils.EMPTY;\n-        }\n-    }\n }"},{"sha":"243d40045c5f1b1dffcea39ee0cb3efa1d574313","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -19,54 +19,57 @@\n package org.apache.syncope.client.console.wizards.resources;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n-import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n-import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n \n public class ConnectorDetailsPanel extends WizardStep {\n \n     private static final long serialVersionUID = -2435937897614232137L;\n \n-    private final LoadableDetachableModel<List<String>> realms;\n-\n     public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n         super();\n         setOutputMarkupId(true);\n \n-        final List<String> authRealms = SyncopeConsoleSession.get().getAuthRealms();\n-        realms = new LoadableDetachableModel<List<String>>() {\n+        boolean isSearchEnabled = RealmsUtils.enableSearchRealm();\n+\n+        final AutoCompleteSettings settings = new AutoCompleteSettings();\n+        settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n+        settings.setShowListOnEmptyInput(!isSearchEnabled);\n+\n+        AjaxSearchFieldPanel realm = new AjaxSearchFieldPanel(\n+                \"adminRealm\", \"adminRealm\", new PropertyModel<>(connInstanceTO, \"adminRealm\"), settings) {\n \n-            private static final long serialVersionUID = 5275935387613157437L;\n+            private static final long serialVersionUID = -6390474600233486704L;\n \n             @Override\n-            protected List<String> load() {\n-                return RealmRestClient.list().stream().\n-                        filter(realm -> authRealms.stream().\n-                        anyMatch(authRealm -> realm.getFullPath().startsWith(authRealm))).\n-                        map(RealmTO::getFullPath).\n-                        sorted().\n-                        collect(Collectors.toList());\n+            protected Iterator<String> getChoices(final String input) {\n+                return (isSearchEnabled\n+                        ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n+                        : RealmRestClient.list()).\n+                        stream().filter(realm -> SyncopeConsoleSession.get().getAuthRealms().stream().anyMatch(\n+                        authRealm -> realm.getFullPath().startsWith(authRealm))).\n+                        map(item -> item.getFullPath()).collect(Collectors.toList()).iterator();\n             }\n         };\n \n-        AjaxDropDownChoicePanel<String> realm = new AjaxDropDownChoicePanel<>(\n-                \"adminRealm\", \"adminRealm\", new PropertyModel<>(connInstanceTO, \"adminRealm\"), false);\n-        realm.setChoices(realms);\n         realm.setOutputMarkupId(true);\n         realm.addRequiredLabel();\n         add(realm);\n@@ -137,32 +140,31 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).max(Integer.MAX_VALUE).build(\n                 \"connRequestTimeout\", \"connRequestTimeout\", Integer.class,\n-                new PropertyModel<Integer>(connInstanceTO, \"connRequestTimeout\")));\n+                new PropertyModel<>(connInstanceTO, \"connRequestTimeout\")));\n \n         add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).max(Integer.MAX_VALUE).build(\n                 \"poolMaxObjects\", \"poolMaxObjects\", Integer.class,\n-                new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxObjects\")));\n+                new PropertyModel<>(connInstanceTO.getPoolConf(), \"maxObjects\")));\n \n         add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).max(Integer.MAX_VALUE).build(\n                 \"poolMinIdle\", \"poolMinIdle\", Integer.class,\n-                new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"minIdle\")));\n+                new PropertyModel<>(connInstanceTO.getPoolConf(), \"minIdle\")));\n \n         add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).max(Integer.MAX_VALUE).build(\n                 \"poolMaxIdle\", \"poolMaxIdle\", Integer.class,\n-                new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxIdle\")));\n+                new PropertyModel<>(connInstanceTO.getPoolConf(), \"maxIdle\")));\n \n         add(new AjaxSpinnerFieldPanel.Builder<Long>().min(0L).max(Long.MAX_VALUE).build(\n                 \"poolMaxWait\", \"poolMaxWait\", Long.class,\n-                new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"maxWait\")));\n+                new PropertyModel<>(connInstanceTO.getPoolConf(), \"maxWait\")));\n \n         add(new AjaxSpinnerFieldPanel.Builder<Long>().min(0L).max(Long.MAX_VALUE).build(\n                 \"poolMinEvictableIdleTime\", \"poolMinEvictableIdleTime\", Long.class,\n-                new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\")));\n+                new PropertyModel<>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\")));\n     }\n \n     private static List<String> getVersions(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n-        return bundles.stream().filter(object\n-                -> object.getLocation().equals(connInstanceTO.getLocation())\n+        return bundles.stream().filter(object -> object.getLocation().equals(connInstanceTO.getLocation())\n                 && object.getBundleName().equals(connInstanceTO.getBundleName())).\n                 map(ConnBundleTO::getVersion).collect(Collectors.toList());\n     }"},{"sha":"43dc24948be46d6d82e81d6e715e97898c806cd2","filename":"client/idrepo/common-ui/src/main/resources/META-INF/resources/ui-commons/css/syncopeUI.scss","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2FsyncopeUI.scss","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2FsyncopeUI.scss","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fui-commons%2Fcss%2FsyncopeUI.scss?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -1112,23 +1112,12 @@ div#tablehandling ul.menu li a {\n   padding: 0px !important;\n }\n \n-.realm-live-search .dropdown-menu li a {\n-  height: 22px;\n-}\n-\n-.realm-live-search #bs-select-1-0 {\n-  display: none;\n+.realm-choice #realm-choice-field {\n+  padding-right: 20px;\n }\n \n-.realm-live-search.dropdown.bootstrap-select .bs-caret {\n-    display: none;\n-}\n-.realm-live-search.bootstrap-select>.dropdown-toggle {\n-    width: 50px;\n-    background: transparent;\n-    border: none;\n-    color: #3c8dbc;\n-    float: right;\n+.realm-choice #realm-choice-folder {\n+  color: #3c8dbc;\n }\n \n /* Form wrappers"},{"sha":"256401289ecdcb82315b74ef0b062e3421a5d7af","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/RealmsUtils.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.RealmRestClient;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n+\n+public final class RealmsUtils {\n+\n+    public static final int REALMS_VIEW_SIZE = 20;\n+    \n+    private RealmsUtils() {\n+        // private constructor for static utility class\n+    }\n+\n+    public static boolean enableSearchRealm() {\n+        return new RealmRestClient().search(\n+                new RealmQuery.Builder().keyword(\n+                        SyncopeConsoleSession.get().getAuthRealms().contains(SyncopeConstants.ROOT_REALM)\n+                        ? SyncopeConstants.ROOT_REALM\n+                        : SyncopeConsoleSession.get().getAuthRealms().iterator().next()).build()).\n+                getTotalCount() > REALMS_VIEW_SIZE;\n+    }\n+\n+    public static boolean checkInput(final String input) {\n+        return StringUtils.isNotBlank(input) && !\"*\".equals(input);\n+    }\n+\n+    public static RealmQuery buildQuery(final String input) {\n+        return new RealmQuery.Builder().keyword(input.contains(\"*\") ? input : \"*\" + input + \"*\").build();\n+    }\n+}"},{"sha":"e7d52c39ecce9c52996b81c10152a21128f6b536","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":106,"deletions":57,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -25,56 +25,60 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.button.dropdown.DropDownButton;\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.GlyphIconType;\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;\n-import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.select.BootstrapSelect;\n-import de.agilecoders.wicket.extensions.markup.html.bootstrap.form.select.BootstrapSelectConfig;\n-import de.agilecoders.wicket.jquery.Key;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Comparator;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.WebMarkupContainerNoVeil;\n import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteRenderer;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.IAutoCompleteRenderer;\n import org.apache.wicket.markup.ComponentTag;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.link.AbstractLink;\n import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.Response;\n \n public class RealmChoicePanel extends Panel {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    private static final int REALMS_VIEW_SIZE = 15;\n+    private static final String SEARCH_REALMS = \"searchRealms\";\n \n     private final PageReference pageRef;\n \n     private final LoadableDetachableModel<List<Pair<String, RealmTO>>> realmTree;\n \n     private final LoadableDetachableModel<List<DynRealmTO>> dynRealmTree;\n \n-    private final WebMarkupContainer container;\n+    private final WebMarkupContainerNoVeil container;\n \n     private Model<RealmTO> model;\n \n@@ -84,11 +88,18 @@ public class RealmChoicePanel extends Panel {\n \n     private final List<AbstractLink> links = new ArrayList<>();\n \n+    private String searchQuery;\n+\n+    private List<RealmTO> realmsChoices;\n+\n+    private final boolean isSearchEnabled;\n+\n     public RealmChoicePanel(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n         availableRealms = SyncopeConsoleSession.get().getAuthRealms();\n         tree = new HashMap<>();\n+        isSearchEnabled = RealmsUtils.enableSearchRealm();\n \n         realmTree = new LoadableDetachableModel<List<Pair<String, RealmTO>>>() {\n \n@@ -113,7 +124,12 @@ private void getChildren(\n             protected List<Pair<String, RealmTO>> load() {\n                 Map<String, Pair<RealmTO, List<RealmTO>>> map = reloadRealmParentMap();\n                 List<Pair<String, RealmTO>> full = new ArrayList<>();\n-                getChildren(full, null, map, StringUtils.EMPTY);\n+                if (isSearchEnabled) {\n+                    full = map.entrySet().stream().map(\n+                            el -> Pair.of(el.getKey(), el.getValue().getKey())).collect(Collectors.toList());\n+                } else {\n+                    getChildren(full, null, map, StringUtils.EMPTY);\n+                }\n                 return full.stream().filter(realm -> availableRealms.stream().anyMatch(\n                         availableRealm -> realm.getValue().getFullPath().startsWith(availableRealm))).\n                         collect(Collectors.toList());\n@@ -143,8 +159,13 @@ protected List<DynRealmTO> load() {\n             }\n         };\n \n-        model = Model.of(realmTree.getObject().stream().findFirst().get().getValue());\n-        container = new WebMarkupContainer(\"container\", realmTree);\n+        RealmTO realmTO = RealmRestClient.search(\n+                new RealmQuery.Builder().keyword(\"*\" + availableRealms.stream().findFirst().get() + \"*\").build()).\n+                getResult().stream().findFirst().get();\n+\n+        model = Model.of(realmTO);\n+        searchQuery = realmTO.getName();\n+        container = new WebMarkupContainerNoVeil(\"container\", realmTree);\n         container.setOutputMarkupId(true);\n         add(container);\n         reloadRealmTree();\n@@ -166,63 +187,71 @@ public final void reloadRealmTree() {\n         label.setOutputMarkupId(true);\n         container.addOrReplace(label);\n \n-        if ((realmTree.getObject().size() + dynRealmTree.getObject().size()) > REALMS_VIEW_SIZE) {\n-            List<Pair<String, RealmTO>> realms = Stream.of(\n-                    realmTree.getObject(),\n-                    dynRealmTree.getObject().stream().map(\n-                            item -> {\n-                                final RealmTO realmTO = new RealmTO();\n-                                realmTO.setKey(item.getKey());\n-                                realmTO.setName(item.getKey());\n-                                realmTO.setFullPath(item.getKey());\n-                                return Pair.of(item.getKey(), realmTO);\n-                            }).collect(Collectors.toList())).flatMap(Collection::stream).collect(Collectors.toList());\n-\n-            BootstrapSelectConfig config = new BootstrapSelectConfig().withLiveSearch(true);\n-            config.put(new Key<>(\"styleBase\", \"btn\"), \"btn glyphicon glyphicon-folder-open\");\n-            BootstrapSelect<Pair<String, RealmTO>> select =\n-                    new BootstrapSelect<>(\"realmsLiveSearch\", new Model<>(), realms);\n-            select.with(config);\n-            select.setOutputMarkupId(true);\n-            select.setChoiceRenderer(new IChoiceRenderer<Pair<String, RealmTO>>() {\n-\n-                private static final long serialVersionUID = 5978544741356774985L;\n+        if (isSearchEnabled) {\n+            realmsChoices = buildRealmChoices();\n+            final AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(false);\n+            settings.setShowListOnEmptyInput(false);\n \n-                @Override\n-                public Object getDisplayValue(final Pair<String, RealmTO> object) {\n-                    return object.getKey();\n-                }\n+            final AutoCompleteTextField<String> searchRealms =\n+                    new AutoCompleteTextField<String>(SEARCH_REALMS, new Model<String>(), settings) {\n+\n+                private static final long serialVersionUID = -6635259975264955783L;\n \n                 @Override\n-                public String getIdValue(final Pair<String, RealmTO> object, final int index) {\n-                    return object.getKey();\n+                protected Iterator<String> getChoices(final String input) {\n+                    searchQuery = input;\n+                    realmsChoices = RealmsUtils.checkInput(input)\n+                            ? buildRealmChoices()\n+                            : List.of();\n+                    return realmsChoices.stream().\n+                            map(item -> item.getFullPath()).sorted().collect(Collectors.toList()).iterator();\n                 }\n \n                 @Override\n-                public Pair<String, RealmTO> getObject(final String id,\n-                        final IModel<? extends List<? extends Pair<String, RealmTO>>> choices) {\n-\n-                    return choices.getObject().stream().\n-                            filter(object -> object.getKey().equals(id)).findFirst().orElse(null);\n+                protected AutoCompleteBehavior<String> newAutoCompleteBehavior(\n+                        final IAutoCompleteRenderer<String> renderer,\n+                        final AutoCompleteSettings settings) {\n+                    return super.newAutoCompleteBehavior(new AbstractAutoCompleteRenderer<String>() {\n+\n+                        private static final long serialVersionUID = -4789925973199139157L;\n+\n+                        @Override\n+                        protected void renderChoice(\n+                                final String object,\n+                                final Response response,\n+                                final String criteria) {\n+                            response.write(object);\n+                        }\n+\n+                        @Override\n+                        protected String getTextValue(final String object) {\n+                            return object;\n+                        }\n+                    }, settings);\n                 }\n-            });\n-            select.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+            };\n+\n+            searchRealms.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n                 private static final long serialVersionUID = -6139318907146065915L;\n \n                 @Override\n                 protected void onUpdate(final AjaxRequestTarget target) {\n-                    model.setObject(select.getModelObject().getValue());\n-                    label.setDefaultModelObject(model.getObject().getFullPath());\n-                    realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n-                    target.add(label);\n-                    send(pageRef.getPage(), Broadcast.EXACT,\n-                            new ChosenRealm<>(select.getModelObject().getValue(), target));\n+                    realmsChoices.stream().filter(\n+                            item -> item.getFullPath().equals(searchRealms.getModelObject())).\n+                            findFirst().ifPresent(realm -> {\n+                                model.setObject(realm);\n+                                label.setDefaultModelObject(model.getObject().getFullPath());\n+                                realmLabel.setDefaultModel(new ResourceModel(\"realmLabel\", \"Realm\"));\n+                                target.add(label);\n+                                send(pageRef.getPage(), Broadcast.EXACT, new ChosenRealm<>(realm, target));\n+                            });\n                 }\n             });\n-            buildRealmLinks(label, realmLabel);\n+\n             Fragment fragment = new Fragment(\"realmsFragment\", \"realmsSearchFragment\", container);\n-            fragment.addOrReplace(select);\n+            fragment.addOrReplace(searchRealms);\n             container.addOrReplace(fragment);\n         } else {\n             final DropDownButton realms = new DropDownButton(\n@@ -360,14 +389,20 @@ public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target, fi\n     }\n \n     private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n-        return reloadRealmParentMap(RealmRestClient.list().stream().\n+        List<RealmTO> realmsToList = isSearchEnabled\n+                ? RealmRestClient.search(RealmsUtils.buildQuery(searchQuery)).getResult()\n+                : RealmRestClient.list();\n+\n+        return reloadRealmParentMap(realmsToList.stream().\n                 sorted(Comparator.comparing(RealmTO::getName)).\n                 collect(Collectors.toList()));\n     }\n \n     private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final List<RealmTO> realms) {\n         tree.clear();\n-        tree.put(null, Pair.<RealmTO, List<RealmTO>>of(realms.get(0), new ArrayList<>()));\n+        if (!isSearchEnabled) {\n+            tree.put(null, Pair.<RealmTO, List<RealmTO>>of(realms.get(0), new ArrayList<>()));\n+        }\n \n         final Map<String, List<RealmTO>> cache = new HashMap<>();\n \n@@ -388,10 +423,23 @@ private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap(final Lis\n                 cache.put(realm.getParent(), List.of(realm));\n             }\n         });\n-\n         return tree;\n     }\n \n+    private List<RealmTO> buildRealmChoices() {\n+        return Stream.of(\n+                realmTree.getObject().stream().map(item -> item.getValue()).collect(Collectors.toList()),\n+                dynRealmTree.getObject().stream().map(\n+                        item -> {\n+                            final RealmTO realmTO = new RealmTO();\n+                            realmTO.setKey(item.getKey());\n+                            realmTO.setName(item.getKey());\n+                            realmTO.setFullPath(item.getKey());\n+                            return realmTO;\n+                        }).collect(Collectors.toList())).flatMap(Collection::stream).\n+                collect(Collectors.toList());\n+    }\n+\n     /**\n      * Gets current selected realm.\n      *\n@@ -415,6 +463,7 @@ public RealmTO moveToParentRealm(final String key) {\n             }\n         }\n         return null;\n+\n     }\n \n     public static class ChosenRealm<T> {"},{"sha":"5482c3d8c0b00694f865713cdb715a0eb8df0a0b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RealmRestClient.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -23,8 +23,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n \n@@ -35,6 +37,10 @@ public class RealmRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n \n+    public static PagedResult<RealmTO> search(final RealmQuery query) {\n+        return getService(RealmService.class).search(query);\n+    }\n+\n     public static List<RealmTO> list() {\n         return getService(RealmService.class).list(SyncopeConstants.ROOT_REALM);\n     }"},{"sha":"04fa1c2da13e2a16e4b5e84d99dac397149c9453","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":43,"deletions":25,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -19,17 +19,19 @@\n package org.apache.syncope.client.console.tasks;\n \n import java.io.Serializable;\n-import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n@@ -43,11 +45,11 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n \n@@ -61,23 +63,12 @@\n \n     private CrontabPanel crontabPanel;\n \n-    private final LoadableDetachableModel<List<String>> realms = new LoadableDetachableModel<List<String>>() {\n-\n-        private static final long serialVersionUID = 5275935387613157437L;\n-\n-        @Override\n-        protected List<String> load() {\n-            List<String> result = RealmRestClient.list().stream().\n-                    map(RealmTO::getFullPath).collect(Collectors.toList());\n-            Collections.sort(result);\n-\n-            return result;\n-        }\n-    };\n+    private final boolean isSearchEnabled;\n \n     public SchedTaskWizardBuilder(final TaskType type, final T taskTO, final PageReference pageRef) {\n         super(taskTO, pageRef);\n         this.type = type;\n+        this.isSearchEnabled = RealmsUtils.enableSearchRealm();\n     }\n \n     @Override\n@@ -106,6 +97,12 @@ protected WizardModel buildModelSteps(final SchedTaskTO modelObject, final Wizar\n         return wizardModel;\n     }\n \n+    private List<RealmTO> searchRealms(final String realmQuery) {\n+        return isSearchEnabled\n+                ? RealmRestClient.search(RealmsUtils.buildQuery(realmQuery)).getResult()\n+                : RealmRestClient.list();\n+    }\n+\n     public class Profile extends WizardStep {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n@@ -191,14 +188,27 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 }\n             });\n \n-            AjaxDropDownChoicePanel<String> destinationRealm = new AjaxDropDownChoicePanel<>(\n-                    \"destinationRealm\", \"destinationRealm\",\n-                    new PropertyModel<String>(taskTO, \"destinationRealm\"), false).\n-                    setChoices(realms);\n+            final AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n+            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+\n+            final AjaxSearchFieldPanel destinationRealm =\n+                    new AjaxSearchFieldPanel(\"destinationRealm\", \"destinationRealm\",\n+                            new PropertyModel<String>(taskTO, \"destinationRealm\"), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return (RealmsUtils.checkInput(input)\n+                            ? searchRealms(input).stream().map(RealmTO::getFullPath).collect(Collectors.toList())\n+                            : List.<String>of()).iterator();\n+                }\n+            };\n+\n             if (taskTO instanceof PullTaskTO) {\n                 destinationRealm.addRequiredLabel();\n             }\n-            destinationRealm.setNullValid(!(taskTO instanceof PullTaskTO));\n             pullTaskSpecifics.add(destinationRealm);\n \n             AjaxCheckBoxPanel remediation = new AjaxCheckBoxPanel(\n@@ -215,14 +225,22 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 pushTaskSpecifics.setEnabled(false).setVisible(false);\n             }\n \n-            AjaxDropDownChoicePanel<String> sourceRealm = new AjaxDropDownChoicePanel<>(\n-                    \"sourceRealm\", \"sourceRealm\",\n-                    new PropertyModel<String>(taskTO, \"sourceRealm\"), false).\n-                    setChoices(realms);\n+            final AjaxSearchFieldPanel sourceRealm = new AjaxSearchFieldPanel(\"sourceRealm\", \"sourceRealm\",\n+                    new PropertyModel<String>(taskTO, \"sourceRealm\"), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return (RealmsUtils.checkInput(input)\n+                            ? searchRealms(input).stream().map(RealmTO::getFullPath).collect(Collectors.toList())\n+                            : List.<String>of()).iterator();\n+                }\n+            };\n+\n             if (taskTO instanceof PushTaskTO) {\n                 sourceRealm.addRequiredLabel();\n             }\n-            sourceRealm.setNullValid(!(taskTO instanceof PushTaskTO));\n             pushTaskSpecifics.add(sourceRealm);\n \n             // ------------------------------"},{"sha":"9faf87e56a96b505d4da16c48a385def2d5951a7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/WebMarkupContainerNoVeil.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2FWebMarkupContainerNoVeil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2FWebMarkupContainerNoVeil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2FWebMarkupContainerNoVeil.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.markup.html;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.ajax.IAjaxIndicatorAware;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.IModel;\n+\n+public class WebMarkupContainerNoVeil extends WebMarkupContainer implements IAjaxIndicatorAware {\n+\n+    private static final long serialVersionUID = 6883930486048460708L;\n+\n+    public WebMarkupContainerNoVeil(final String id) {\n+        super(id);\n+    }\n+\n+    public WebMarkupContainerNoVeil(final String id, final IModel<?> model) {\n+        super(id, model);\n+    }\n+\n+    @Override\n+    public String getAjaxIndicatorMarkupId() {\n+        return StringUtils.EMPTY;\n+    }\n+}"},{"sha":"6204cd0494f2bfd1e57d01101fd9d64b4d1e92dc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxSearchFieldPanel.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSearchFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSearchFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSearchFieldPanel.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.markup.html.form;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAutoCompleteBehavior;\n+import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.IAutoCompleteRenderer;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.validation.IValidator;\n+\n+public class AjaxSearchFieldPanel extends FieldPanel<String> implements Cloneable {\n+\n+    private static final long serialVersionUID = 6890905510177974519L;\n+\n+    private List<String> choices = Collections.emptyList();\n+\n+    private final IAutoCompleteRenderer<String> renderer;\n+\n+    private final AutoCompleteSettings settings;\n+\n+    public AjaxSearchFieldPanel(final String id, final String name, final IModel<String> model) {\n+        this(id, name, model, null, null);\n+    }\n+\n+    public AjaxSearchFieldPanel(\n+            final String id, final String name,\n+            final IModel<String> model,\n+            final AutoCompleteSettings settings) {\n+        this(id, name, model, null, settings);\n+    }\n+\n+    public AjaxSearchFieldPanel(\n+            final String id, final String name,\n+            final IModel<String> model,\n+            final IAutoCompleteRenderer<String> renderer,\n+            final AutoCompleteSettings settings) {\n+        super(id, name, model);\n+\n+        this.settings = settings;\n+        this.renderer = renderer;\n+\n+        field = new AutoCompleteTextField<String>(\"textField\", model, settings) {\n+\n+            private static final long serialVersionUID = -6648767303091874219L;\n+\n+            @Override\n+            protected Iterator<String> getChoices(final String input) {\n+                return AjaxSearchFieldPanel.this.getChoices(input);\n+            }\n+\n+            @Override\n+            protected AutoCompleteBehavior<String> newAutoCompleteBehavior(\n+                    final IAutoCompleteRenderer<String> renderer, final AutoCompleteSettings settings) {\n+\n+                return new IndicatorAutoCompleteBehavior<String>(\n+                        AjaxSearchFieldPanel.this.renderer != null ? AjaxSearchFieldPanel.this.renderer : renderer,\n+                        AjaxSearchFieldPanel.this.settings != null ? AjaxSearchFieldPanel.this.settings : settings) {\n+\n+                    private static final long serialVersionUID = 1070808433195962931L;\n+\n+                    @Override\n+                    protected Iterator<String> getChoices(final String input) {\n+                        return AjaxSearchFieldPanel.this.getChoices(input);\n+                    }\n+                };\n+            }\n+        };\n+        add(field.setLabel(new ResourceModel(name, name)).setOutputMarkupId(true));\n+\n+        if (!isReadOnly()) {\n+            field.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -6139318907146065915L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    AjaxSearchFieldPanel.this.onUpdateBehavior();\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public FieldPanel<String> setRequired(final boolean required) {\n+        return super.setRequired(required);\n+    }\n+\n+    public List<String> getChoices() {\n+        return choices;\n+    }\n+\n+    public void addValidator(final IValidator<String> validator) {\n+        this.field.add(validator);\n+    }\n+\n+    public void onUpdateBehavior() {\n+    }\n+\n+    protected Iterator<String> getChoices(final String input) {\n+        return choices.iterator();\n+    }\n+\n+    @Override\n+    public FieldPanel<String> clone() {\n+        final AjaxSearchFieldPanel panel = (AjaxSearchFieldPanel) super.clone();\n+        return panel;\n+    }\n+}"},{"sha":"6469044edb8117d0f4b0b0d865cb61c4baf066d7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":36,"deletions":12,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -19,20 +19,25 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.pages.Realms;\n import org.apache.syncope.client.console.rest.RealmRestClient;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSearchFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.link.AbstractLink;\n+import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.model.PropertyModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -54,27 +59,46 @@ public Details(\n             final PageReference pageRef) {\n \n         this.pageRef = pageRef;\n-\n+        final List<String> authRealms = SyncopeConsoleSession.get().getAuthRealms();\n         final T inner = wrapper.getInnerObject();\n+        final Fragment fragment;\n \n         if (templateMode) {\n             realm = new AjaxTextFieldPanel(\n                     \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(inner, \"realm\"), false);\n             AjaxTextFieldPanel.class.cast(realm).enableJexlHelp();\n+            fragment = new Fragment(\"realmsFragment\", \"realmsTemplateFragment\", this);\n         } else {\n-            final List<RealmTO> realms = pageRef.getPage() instanceof Realms\n-                    ? getRealmsFromLinks(Realms.class.cast(pageRef.getPage()).getRealmChoicePanel().getLinks())\n-                    : RealmRestClient.list();\n-\n-            realm = new AjaxDropDownChoicePanel<>(\n-                    \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(inner, \"realm\"), false);\n-\n-            ((AjaxDropDownChoicePanel<String>) realm).setChoices(\n-                    realms.stream().map(RealmTO::getFullPath).collect(Collectors.toList()));\n+            boolean isSearchEnabled = RealmsUtils.enableSearchRealm();\n+            final AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n+            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+\n+            realm = new AjaxSearchFieldPanel(\"destinationRealm\", \"destinationRealm\",\n+                    new PropertyModel<>(inner, \"realm\"), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return (isSearchEnabled\n+                            ? RealmRestClient.search(RealmsUtils.buildQuery(input)).getResult()\n+                            : pageRef.getPage() instanceof Realms\n+                            ? getRealmsFromLinks(Realms.class.cast(pageRef.getPage()).getRealmChoicePanel().getLinks())\n+                            : RealmRestClient.list()).\n+                            stream().filter(realm -> authRealms.stream().anyMatch(\n+                            authRealm -> realm.getFullPath().startsWith(authRealm))).\n+                            map(item -> item.getFullPath()).collect(Collectors.toList()).iterator();\n+                }\n+            };\n+\n+            fragment = new Fragment(\"realmsFragment\", \"realmsSearchFragment\", this);\n         }\n-        add(realm);\n+        fragment.addOrReplace(realm);\n+        addOrReplace(fragment);\n         add(getGeneralStatusInformation(\"generalStatusInformation\", inner).\n                 setEnabled(includeStatusPanel).setVisible(includeStatusPanel).setRenderBodyOnly(true));\n+\n     }\n \n     public Details<T> disableRealmSpecification() {"},{"sha":"3d015ed983fd0e65a8507e83cba5f6d76fb3384a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel.html","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.html?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -20,13 +20,18 @@\n   <wicket:panel>\n     <div wicket:id=\"container\" class=\"realm-header\">\n       <div class=\"realm-label\">\n-        <label wicket:id=\"realmLabel\"/>: <label wicket:id=\"realm\"/>\n+        <label wicket:id=\"realmLabel\"/>: <label wicket:id=\"realm\"/> \n       </div>\n       <span wicket:id=\"realmsFragment\"></span>\n \n-      <wicket:fragment wicket:id=\"realmsSearchFragment\">\n+      <wicket:fragment wicket:id=\"realmsSearchFragment\"> \n         <div class=\"realm-choice\">\n-          <select wicket:id=\"realmsLiveSearch\" class=\"realm-live-search\"></select> \n+          <div id=\"realm-choice-field\" class=\"input-group\">\n+            <span class=\"input-group-addon\"> \n+              <i id=\"realm-choice-folder\" class=\"glyphicon glyphicon-folder-open\"></i>\n+            </span>\n+            <input type=\"text\" class=\"form-control\" wicket:id=\"searchRealms\" wicket:message=\"placeholder:search\"/>\n+          </div>\n         </div>\n       </wicket:fragment>\n       <wicket:fragment wicket:id=\"realmsListFragment\">"},{"sha":"ccd697fa7d00f08a1c2d9aacd09bf5bbba1c5062","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.properties?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+search=Search"},{"sha":"60881c2d9d2b449516bce9e1de158a3b92b06970","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel_fr_CA.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_fr_CA.properties?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+search=Recherche"},{"sha":"1522846130f5a8560c43125950123afe7b7db688","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel_it.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_it.properties?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+search=Cerca"},{"sha":"6c85ab86622c40771a29dfa734a2fa41e197396f","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel_ja.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_ja.properties?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+search=\\u691c\\u7d22"},{"sha":"0ead5fe2cf2d4650802767c7b52655ee7256cb89","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel_pt_BR.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_pt_BR.properties?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+search=Pesquisa"},{"sha":"2164746188dc0c99424e697fc03950a5df319c04","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/RealmChoicePanel_ru.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel_ru.properties?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+search=\\u041f\\u043e\\u0438\\u0441\\u043a \\u0434\\u043b\\u044f"},{"sha":"e9123ef791f2e7052acf444b301804879e572ffa","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AjaxCharacterFieldPanel.html","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCharacterFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCharacterFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCharacterFieldPanel.html?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -20,11 +20,9 @@\n   <wicket:extend>\n     <wicket:enclosure child=\"field-label\">\n       <label wicket:id=\"field-label\">[LABEL]</label><span wicket:id=\"required\"/>\n-      <span wicket:id=\"jexlInfo\" class=\"glyphicon glyphicon-info-sign\" style=\"cursor: pointer\"></span>\n-      <span wicket:id=\"externalAction\"/>\n     </wicket:enclosure>\n     <fieldset class=\"input-group\">\n-      <input type=\"text\" class=\"form-control\" wicket:id=\"textField\" placeholder=\"\"/>\n+      <input type=\"text\" class=\"form-control\" wicket:id=\"searchField\" placeholder=\"\"/>\n     </fieldset>\n   </wicket:extend>\n </html>"},{"sha":"78d702bbd055ec71894b9940fecd630beffc0fec","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AjaxSearchFieldPanel.html","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSearchFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSearchFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxSearchFieldPanel.html?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -0,0 +1,29 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <wicket:enclosure child=\"field-label\">\n+      <label wicket:id=\"field-label\">[LABEL]</label><span wicket:id=\"required\"/>\n+      <span wicket:id=\"externalAction\"/>\n+    </wicket:enclosure>\n+    <fieldset class=\"input-group\">\n+      <input type=\"text\" class=\"form-control\" wicket:id=\"textField\" placeholder=\"\"/>\n+    </fieldset>\n+  </wicket:extend>\n+</html>"},{"sha":"aff6e32f2637b08dfe9bdf81e636defe84b12144","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/any/Details.html","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3c19c4f594a7c080b61cfa92a892c05cd317d1bc/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.html?ref=3c19c4f594a7c080b61cfa92a892c05cd317d1bc","patch":"@@ -20,7 +20,13 @@\n   <wicket:panel>\n     <div class=\"details\">\n       <div class=\"form-group\">\n-        <span wicket:id=\"destinationRealm\">[DESTINATION REALM]</span>\n+        <span wicket:id=\"realmsFragment\"></span>\n+        <wicket:fragment wicket:id=\"realmsSearchFragment\"> \n+          <span wicket:id=\"destinationRealm\">[DESTINATION REALM]</span>\n+        </wicket:fragment>\n+        <wicket:fragment wicket:id=\"realmsTemplateFragment\"> \n+          <span wicket:id=\"destinationRealm\">[DESTINATION REALM]</span>\n+        </wicket:fragment>\n       </div>\n       <wicket:child/>\n     </div>"}]}