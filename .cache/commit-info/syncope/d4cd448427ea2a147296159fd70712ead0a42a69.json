{"sha":"d4cd448427ea2a147296159fd70712ead0a42a69","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0Y2Q0NDg0MjdlYTJhMTQ3Mjk2MTU5ZmQ3MDcxMmVhZDBhNDJhNjk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-06T08:32:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-06T08:32:52Z"},"message":"[SYNCOPE-1149] Simplify","tree":{"sha":"8ee9dc32ea97c272cbe4d6fe895fd3a4d19ae58f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8ee9dc32ea97c272cbe4d6fe895fd3a4d19ae58f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d4cd448427ea2a147296159fd70712ead0a42a69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4cd448427ea2a147296159fd70712ead0a42a69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4cd448427ea2a147296159fd70712ead0a42a69","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4cd448427ea2a147296159fd70712ead0a42a69/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2035f6b4d7d9d3624e6c52a070f081dd54835606","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2035f6b4d7d9d3624e6c52a070f081dd54835606","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2035f6b4d7d9d3624e6c52a070f081dd54835606"}],"stats":{"total":201,"additions":44,"deletions":157},"files":[{"sha":"4668750fdaaa239f052009416cf6448f603b5b46","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":5,"deletions":23,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4cd448427ea2a147296159fd70712ead0a42a69/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4cd448427ea2a147296159fd70712ead0a42a69/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=d4cd448427ea2a147296159fd70712ead0a42a69","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n@@ -37,7 +36,6 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n@@ -63,7 +61,6 @@\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -404,24 +401,20 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n             authorities = getAdminAuthorities();\n         } else {\n             JWTSSOProvider jwtSSOProvider = getJWTSSOProvider(authentication.getClaims().getIssuer());\n-            Pair<User, AccessToken> resolved = jwtSSOProvider.resolve(authentication.getClaims());\n+            Pair<User, Set<SyncopeGrantedAuthority>> resolved = jwtSSOProvider.resolve(authentication.getClaims());\n             if (resolved == null || resolved.getLeft() == null) {\n                 throw new AuthenticationCredentialsNotFoundException(\n                         \"Could not find User \" + authentication.getClaims().getSubject()\n                         + \" for JWT \" + authentication.getClaims().getTokenId());\n             }\n-            if (resolved == null || resolved.getRight() == null) {\n-                throw new AuthenticationCredentialsNotFoundException(\n-                        \"Could not find an Access Token for JWT \" + authentication.getClaims().getTokenId());\n-            }\n \n             User user = resolved.getLeft();\n             username = user.getUsername();\n-            AccessToken accessToken = resolved.getRight();\n-            LOG.debug(\"JWT {} issued by {} resolved to User {} and Access Token {}\",\n+            authorities = SetUtils.emptyIfNull(resolved.getRight());\n+            LOG.debug(\"JWT {} issued by {} resolved to User {} with authorities {}\",\n                     authentication.getClaims().getTokenId(),\n                     authentication.getClaims().getIssuer(),\n-                    username, accessToken.getKey());\n+                    username, authorities);\n \n             if (BooleanUtils.isTrue(user.isSuspended())) {\n                 throw new DisabledException(\"User \" + username + \" is suspended\");\n@@ -433,20 +426,9 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n             }\n \n             if (BooleanUtils.isTrue(user.isMustChangePassword())) {\n+                LOG.debug(\"User {} must change password, resetting authorities\", username);\n                 authorities = Collections.singleton(\n                         new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n-            } else {\n-                LOG.debug(\"Authorities found in JWT, fetching...\");\n-\n-                try {\n-                    authorities = POJOHelper.deserialize(\n-                            ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n-                            new TypeReference<Set<SyncopeGrantedAuthority>>() {\n-                    });\n-                } catch (Throwable t) {\n-                    LOG.error(\"Could not read stored authorities\", t);\n-                    authorities = Collections.emptySet();\n-                }\n             }\n         }\n "},{"sha":"2ddf002156ddce103268a9ea8255df09cd8a3ab7","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAccessToken.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2035f6b4d7d9d3624e6c52a070f081dd54835606/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2035f6b4d7d9d3624e6c52a070f081dd54835606/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAccessToken.java?ref=2035f6b4d7d9d3624e6c52a070f081dd54835606","patch":"@@ -1,103 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.spring.security;\n-\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.UUID;\n-import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.AccessToken;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-\n-/**\n- * Convenience {@link AccessToken} implementation wrapping the received JWT, for usage with custom\n- * {@link JWTSSOProvider#resolve} implementations.\n- */\n-public class JWTAccessToken implements AccessToken {\n-\n-    private static final long serialVersionUID = -3824671946137458487L;\n-\n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n-    private final String key = UUID.randomUUID().toString();\n-\n-    private final JwtClaims claims;\n-\n-    private byte[] authorities;\n-\n-    public JWTAccessToken(final JwtClaims claims) throws Exception {\n-        this.claims = claims;\n-        this.authorities = ENCRYPTOR.encode(\n-                POJOHelper.serialize(Collections.emptySet()), CipherAlgorithm.AES).\n-                getBytes();\n-    }\n-\n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @Override\n-    public String getBody() {\n-        return null;\n-    }\n-\n-    @Override\n-    public Date getExpiryTime() {\n-        return new Date(claims.getExpiryTime());\n-    }\n-\n-    @Override\n-    public String getOwner() {\n-        return claims.getSubject();\n-    }\n-\n-    @Override\n-    public byte[] getAuthorities() {\n-        return authorities;\n-    }\n-\n-    @Override\n-    public void setKey(final String key) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void setBody(final String body) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void setExpiryTime(final Date expiryTime) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void setOwner(final String owner) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void setAuthorities(final byte[] authorities) {\n-        this.authorities = ArrayUtils.clone(authorities);\n-    }\n-\n-}"},{"sha":"a78c2ffc1bb7dc7854c3607f0620c56f6970d1a0","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTSSOProvider.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4cd448427ea2a147296159fd70712ead0a42a69/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4cd448427ea2a147296159fd70712ead0a42a69/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTSSOProvider.java?ref=d4cd448427ea2a147296159fd70712ead0a42a69","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n-import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n /**\n@@ -38,11 +38,11 @@ public interface JWTSSOProvider extends JwsSignatureVerifier {\n     String getIssuer();\n \n     /**\n-     * Attempts to resolve the given JWT claims into internal {@link User} and {@link AccessToken}.\n+     * Attempts to resolve the given JWT claims into internal {@link User} and authorities.\n      * <strong>IMPORTANT</strong>: this is not invoked for the {@code}admin{@code} super-user.\n      *\n      * @param jwtClaims JWT claims\n-     * @return internal User and Access Token matching the provided JWT claims, if found; otherwise null\n+     * @return internal User, with authorities, matching the provided JWT claims, if found; otherwise null\n      */\n-    Pair<User, AccessToken> resolve(JwtClaims jwtClaims);\n+    Pair<User, Set<SyncopeGrantedAuthority>> resolve(JwtClaims jwtClaims);\n }"},{"sha":"f5d785271a95a88dc7e1137cbabe8316a07f1325","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeJWTSSOProvider.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4cd448427ea2a147296159fd70712ead0a42a69/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4cd448427ea2a147296159fd70712ead0a42a69/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeJWTSSOProvider.java?ref=d4cd448427ea2a147296159fd70712ead0a42a69","patch":"@@ -18,17 +18,24 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.Collections;\n+import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -37,6 +44,10 @@\n  */\n public class SyncopeJWTSSOProvider implements JWTSSOProvider {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeJWTSSOProvider.class);\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     @Resource(name = \"jwtIssuer\")\n     private String jwtIssuer;\n \n@@ -71,8 +82,23 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Pair<User, AccessToken> resolve(final JwtClaims jwtClaims) {\n-        return Pair.of(userDAO.findByUsername(jwtClaims.getSubject()), accessTokenDAO.find(jwtClaims.getTokenId()));\n+    public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaims) {\n+        User user = userDAO.findByUsername(jwtClaims.getSubject());\n+        Set<SyncopeGrantedAuthority> authorities = null;\n+        if (user != null) {\n+            AccessToken accessToken = accessTokenDAO.find(jwtClaims.getTokenId());\n+            try {\n+                authorities = POJOHelper.deserialize(\n+                        ENCRYPTOR.decode(new String(accessToken.getAuthorities()), CipherAlgorithm.AES),\n+                        new TypeReference<Set<SyncopeGrantedAuthority>>() {\n+                });\n+            } catch (Throwable t) {\n+                LOG.error(\"Could not read stored authorities\", t);\n+                authorities = Collections.emptySet();\n+            }\n+        }\n+\n+        return Pair.of(user, authorities);\n     }\n \n }"},{"sha":"199ba24af98afb6317f959feada40b1bf5647155","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/CustomJWTSSOProvider.java","status":"modified","additions":5,"deletions":23,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4cd448427ea2a147296159fd70712ead0a42a69/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4cd448427ea2a147296159fd70712ead0a42a69/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCustomJWTSSOProvider.java?ref=d4cd448427ea2a147296159fd70712ead0a42a69","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.fit.core.reference;\n \n import java.util.List;\n+import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier;\n@@ -27,19 +28,13 @@\n import org.apache.cxf.rs.security.jose.jws.JwsVerificationSignature;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n-import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.core.spring.security.JWTAccessToken;\n import org.apache.syncope.core.spring.security.JWTSSOProvider;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -48,10 +43,6 @@\n  */\n public class CustomJWTSSOProvider implements JWTSSOProvider {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(CustomJWTSSOProvider.class);\n-\n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n     public static final String ISSUER = \"custom-issuer\";\n \n     public static final String CUSTOM_KEY = \"12345678910987654321\";\n@@ -90,7 +81,7 @@ public JwsVerificationSignature createJwsVerificationSignature(final JwsHeaders\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Pair<User, AccessToken> resolve(final JwtClaims jwtClaims) {\n+    public Pair<User, Set<SyncopeGrantedAuthority>> resolve(final JwtClaims jwtClaims) {\n         AttributeCond userIdCond = new AttributeCond();\n         userIdCond.setSchema(\"userId\");\n         userIdCond.setType(AttributeCond.Type.EQ);\n@@ -99,18 +90,9 @@ public Pair<User, AccessToken> resolve(final JwtClaims jwtClaims) {\n         List<User> matching = searchDAO.search(SearchCond.getLeafCond(userIdCond), AnyTypeKind.USER);\n         if (matching.size() == 1) {\n             User user = matching.get(0);\n+            Set<SyncopeGrantedAuthority> authorities = authDataAccessor.getAuthorities(user.getUsername());\n \n-            AccessToken accessToken = null;\n-            try {\n-                accessToken = new JWTAccessToken(jwtClaims);\n-                accessToken.setAuthorities(ENCRYPTOR.encode(\n-                        POJOHelper.serialize(authDataAccessor.getAuthorities(user.getUsername())), CipherAlgorithm.AES).\n-                        getBytes());\n-            } catch (Exception e) {\n-                LOG.error(\"Could not fetch or store authorities\", e);\n-            }\n-\n-            return Pair.of(user, accessToken);\n+            return Pair.of(user, authorities);\n         }\n \n         return null;"},{"sha":"5beb9b6b059eee13f091c4fdd33f9404113fd768","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d4cd448427ea2a147296159fd70712ead0a42a69/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d4cd448427ea2a147296159fd70712ead0a42a69/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=d4cd448427ea2a147296159fd70712ead0a42a69","patch":"@@ -512,8 +512,8 @@ public void thirdPartyTokenBadSignature() throws ParseException {\n         JwtToken jwtToken = new JwtToken(jwsHeaders, jwtClaims);\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n-        JwsSignatureProvider jwsSignatureProvider =\n-                new HmacJwsSignatureProvider((CustomJWTSSOProvider.CUSTOM_KEY + \"_\").getBytes(), SignatureAlgorithm.HS512);\n+        JwsSignatureProvider jwsSignatureProvider = new HmacJwsSignatureProvider(\n+                (CustomJWTSSOProvider.CUSTOM_KEY + \"_\").getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);"}]}