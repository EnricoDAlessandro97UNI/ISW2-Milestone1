{"sha":"f9af4eb39c111a154b8b2a644dd0f119bb9059f7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY5YWY0ZWIzOWMxMTFhMTU0YjhiMmE2NDRkZDBmMTE5YmI5MDU5Zjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-21T12:36:11Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-03-21T12:36:11Z"},"message":"All verified with Oracle - harder as always...","tree":{"sha":"2c38a9f40469b2b8ddc1871fb13cf47f6f0a18ac","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2c38a9f40469b2b8ddc1871fb13cf47f6f0a18ac"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f9af4eb39c111a154b8b2a644dd0f119bb9059f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f9af4eb39c111a154b8b2a644dd0f119bb9059f7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f9af4eb39c111a154b8b2a644dd0f119bb9059f7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b8bbd7eb23c2730871abdeb172ed4920fddbdd1b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b8bbd7eb23c2730871abdeb172ed4920fddbdd1b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b8bbd7eb23c2730871abdeb172ed4920fddbdd1b"}],"stats":{"total":118,"additions":54,"deletions":64},"files":[{"sha":"96e49d0697c5468b2b68e7cf3740941f5ad204d9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AuditReportletConf.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAuditReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAuditReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAuditReportletConf.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -27,8 +27,6 @@ public class AuditReportletConf extends AbstractReportletConf {\n \n     private static final long serialVersionUID = -4814950086361753689L;\n \n-    private int page = 0;\n-\n     private int size = 10;\n \n     public AuditReportletConf() {\n@@ -39,14 +37,6 @@ public AuditReportletConf(final String name) {\n         super(name);\n     }\n \n-    public int getPage() {\n-        return page;\n-    }\n-\n-    public void setPage(final int page) {\n-        this.page = page;\n-    }\n-\n     public int getSize() {\n         return size;\n     }"},{"sha":"7a0270f87d9745fdc949c6bed03ed89ac3e8ec8f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJob.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -68,14 +68,16 @@ public Void exec() {\n                         try {\n                             delegate.execute();\n                         } catch (Exception e) {\n+                            LOG.error(\"While sending out notifications\", e);\n                             throw new RuntimeException(e);\n                         }\n \n                         return null;\n                     }\n                 });\n             } catch (RuntimeException e) {\n-                throw new JobExecutionException(e.getCause());\n+                LOG.error(\"While sending out notifications\", e);\n+                throw new JobExecutionException(\"While sending out notifications\", e);\n             }\n         }\n "},{"sha":"ffd94a4e183c89eca85f305861b51bfbc1ec1a16","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/AuditReportlet.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FAuditReportlet.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -49,8 +49,9 @@ public class AuditReportlet extends AbstractReportlet {\n \n     private void doExtractConf(final ContentHandler handler) throws SAXException {\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n-        List<Map<String, Object>> rows = jdbcTemplate.queryForList(\n-                String.format(\"SELECT * FROM SYNCOPEAUDIT LIMIT %d OFFSET %d\", conf.getSize(), conf.getPage()));\n+        jdbcTemplate.setMaxRows(conf.getSize());\n+        List<Map<String, Object>> rows = jdbcTemplate.\n+                queryForList(\"SELECT * FROM SYNCOPEAUDIT ORDER BY EVENT_DATE DESC\");\n \n         handler.startElement(\"\", \"\", \"events\", null);\n         AttributesImpl atts = new AttributesImpl();"},{"sha":"cd4bf0a87a0d80e11b22fbc771814c3c93ff9eef","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJob.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -24,12 +24,16 @@\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Quartz job for executing a given report.\n  */\n public class ReportJob extends AbstractInterruptableJob {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(ReportJob.class);\n+\n     /**\n      * Key, set by the caller, for identifying the report to be executed.\n      */\n@@ -60,14 +64,16 @@ public Void exec() {\n                     try {\n                         delegate.execute(reportKey);\n                     } catch (Exception e) {\n+                        LOG.error(\"While executing report {}\", reportKey, e);\n                         throw new RuntimeException(e);\n                     }\n \n                     return null;\n                 }\n             });\n         } catch (RuntimeException e) {\n-            throw new JobExecutionException(e.getCause());\n+            LOG.error(\"While executing report {}\", reportKey, e);\n+            throw new JobExecutionException(\"While executing report \" + reportKey, e);\n         }\n     }\n "},{"sha":"5d5430d3896c0652e920adf6d0f0e7696eecc02f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJobDelegate.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -152,14 +152,16 @@ public void execute(final Long reportKey) throws JobExecutionException {\n                     // invoke reportlet\n                     try {\n                         reportlet.extract(reportletConf, handler);\n-                    } catch (Exception e) {\n+                    } catch (Throwable t) {\n+                        LOG.error(\"While executing reportlet {} for report {}\", reportlet, reportKey, t);\n+\n                         execution.setStatus(ReportExecStatus.FAILURE);\n \n-                        Throwable t = e instanceof ReportException\n-                                ? e.getCause()\n-                                : e;\n+                        Throwable effective = t instanceof ReportException\n+                                ? t.getCause()\n+                                : t;\n                         reportExecutionMessage.\n-                                append(ExceptionUtils2.getFullStackTrace(t)).\n+                                append(ExceptionUtils2.getFullStackTrace(effective)).\n                                 append(\"\\n==================\\n\");\n                     }\n                 }"},{"sha":"bc36174d757390fcc33bc853cc50cb8c150b52e5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -154,7 +154,7 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Enumerated(EnumType.STRING)\n     @Column(name = \"capabilityOverride\")\n-    @CollectionTable(name = \"ExternalResource_capabilitiesOverride\",\n+    @CollectionTable(name = \"ExternalResource_capOverride\",\n             joinColumns =\n             @JoinColumn(name = \"resource_name\", referencedColumnName = \"name\"))\n     private Set<ConnectorCapability> capabilitiesOverride = new HashSet<>();"},{"sha":"9115bee823d24f79ea0c76ed93359b7b855cab1f","filename":"core/persistence-jpa/src/main/resources/audit/audit_oracle.sql","status":"modified","additions":1,"deletions":15,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -15,24 +15,10 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-BEGIN\n-    BEGIN\n-         EXECUTE IMMEDIATE 'DROP TABLE SYNCOPEAUDIT';\n-    EXCEPTION\n-         WHEN OTHERS THEN\n-                IF SQLCODE != -942 THEN\n-                     RAISE;\n-                END IF;\n-    END;\n-\n-    EXECUTE IMMEDIATE '\n CREATE TABLE SYNCOPEAUDIT (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,\n   MESSAGE CLOB NOT NULL,\n   THROWABLE CLOB\n-)\n-';\n-\n-END;\n+);"},{"sha":"1aa0e3f691f91be534cd8399c5f1402b15d8682e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -94,7 +94,7 @@ public void execute(final Long taskKey, final boolean dryRun) throws JobExecutio\n             execution.setStatus(TaskJob.Status.SUCCESS.name());\n             result = AuditElements.Result.SUCCESS;\n         } catch (JobExecutionException e) {\n-            LOG.error(\"While executing task \" + taskKey, e);\n+            LOG.error(\"While executing task {}\" , taskKey, e);\n             result = AuditElements.Result.FAILURE;\n \n             execution.setMessage(ExceptionUtils2.getFullStackTrace(e));"},{"sha":"0fcc46154cf1c08446514398ae979a0d451c97e9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -26,9 +26,13 @@\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class TaskJob extends AbstractInterruptableJob {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(TaskJob.class);\n+\n     public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n \n     public static final String DELEGATE_CLASS_KEY = \"delegateClass\";\n@@ -75,6 +79,7 @@ public Void exec() {\n                                 createBean(delegateClass, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false)).\n                                 execute(taskKey, context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY));\n                     } catch (Exception e) {\n+                        LOG.error(\"While executing task {}\", taskKey, e);\n                         throw new RuntimeException(e);\n                     }\n \n@@ -83,7 +88,8 @@ public Void exec() {\n             }\n             );\n         } catch (RuntimeException e) {\n-            throw new JobExecutionException(e.getCause());\n+            LOG.error(\"While executing task {}\", taskKey, e);\n+            throw new JobExecutionException(\"While executing task \" + taskKey, e);\n         }\n     }\n }"},{"sha":"124ad87f69b1532085e170a3572e3923469e9573","filename":"fit/core-reference/pom.xml","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -594,31 +594,31 @@ under the License.\n       <id>jboss-it</id>\n \n       <dependencies>\n-\t<dependency>\n+        <dependency>\n           <groupId>javax.xml.ws</groupId>\n           <artifactId>jaxws-api</artifactId>\n           <version>2.2.11</version>\n-\t</dependency>\n-\t<dependency>\n-\t  <groupId>org.apache.cxf</groupId>\n-\t  <artifactId>cxf-core</artifactId>\n-\t  <version>${cxf.version}</version>\n-\t</dependency>\n-\t<dependency>\n-\t  <groupId>org.apache.cxf</groupId>\n-\t  <artifactId>cxf-rt-transports-http</artifactId>\n-\t  <version>${cxf.version}</version>\n-\t</dependency>\n-\t<dependency>\n-\t  <groupId>org.apache.cxf</groupId>\n-\t  <artifactId>cxf-rt-ws-policy</artifactId>\n-\t  <version>${cxf.version}</version>\n-\t</dependency>\n-\t<dependency>\n-\t  <groupId>org.apache.cxf</groupId>\n-\t  <artifactId>cxf-rt-wsdl</artifactId>\n-\t  <version>${cxf.version}</version>\n-\t</dependency>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.cxf</groupId>\n+          <artifactId>cxf-core</artifactId>\n+          <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.cxf</groupId>\n+          <artifactId>cxf-rt-transports-http</artifactId>\n+          <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.cxf</groupId>\n+          <artifactId>cxf-rt-ws-policy</artifactId>\n+          <version>${cxf.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.cxf</groupId>\n+          <artifactId>cxf-rt-wsdl</artifactId>\n+          <version>${cxf.version}</version>\n+        </dependency>\n \n         <dependency>\n           <groupId>org.apache.syncope.core</groupId>\n@@ -719,7 +719,7 @@ under the License.\n               <container>\n                 <containerId>wildfly10x</containerId>\n                 <zipUrlInstaller>\n-\t\t  <url>http://download.jboss.org/wildfly/10.0.0.Final/wildfly-10.0.0.Final.zip</url>\n+                  <url>http://download.jboss.org/wildfly/10.0.0.Final/wildfly-10.0.0.Final.zip</url>\n                   <downloadDir>${settings.localRepository}/org/codehaus/cargo/cargo-container-archives</downloadDir>\n                   <extractDir>${project.build.directory}/cargo/extract</extractDir>\n                 </zipUrlInstaller>"},{"sha":"1109d6208c71898652d9d8aaedaa505653e64682","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f9af4eb39c111a154b8b2a644dd0f119bb9059f7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=f9af4eb39c111a154b8b2a644dd0f119bb9059f7","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -174,10 +173,8 @@ public void list() {\n \n     @Test\n     public void listByAnyTypeClass() {\n-        final String clazz = anyTypeService.read(AnyTypeKind.USER.name()).getClasses().get(0);\n-\n         List<PlainSchemaTO> userSchemas = schemaService.list(\n-                new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(clazz).build());\n+                new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClass(\"minimal user\").build());\n \n         assertTrue(IterableUtils.matchesAny(userSchemas, new Predicate<PlainSchemaTO>() {\n "}]}