{"sha":"49e013436f13856093548672105d79e5d6edb9a7","node_id":"C_kwDOJfYA1toAKDQ5ZTAxMzQzNmYxMzg1NjA5MzU0ODY3MjEwNWQ3OWU1ZDZlZGI5YTc","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-10-27T10:51:49Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-10-27T10:51:49Z"},"message":"[SYNCOPE-1705] Encapsulating each object processing into an inner transaction (#383)","tree":{"sha":"5733bb69baf132e0d620811984581a15ff062107","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5733bb69baf132e0d620811984581a15ff062107"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/49e013436f13856093548672105d79e5d6edb9a7","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWmLFCRBK7hj4Ov3rIwAA6/0IAB7xoKElmWDBub1C2HjWsyYK\nDR1QP4fKFkHonOgX4CSbo1GhKTHyZOetrr1GBvwpHUvwn3EpdMK1lHBF1FlqJ6Gx\nw/gud4H+yIPqA39Iw4ekRhFgldIirVJem5wgIwSssdzTu4a0sc0pqmfmImJ9OaTH\nBXeOeWwXqfzeXV97dOysU47seS3PO645O+Pazl8WoNE4APgq1uIdO5OF2tUD0kIG\nfehnGf7f90uUtoW0L5zpU96mVeNWM8gIfcjVRxLn8bGO2xLZmy3SdzqyO22+2rmd\nQUohyY3Yha1acqxBu2CHu5gEFtxmKLX2E2JmXh7UcbfawfLS6X0lC1431g1kI2s=\n=c5uo\n-----END PGP SIGNATURE-----\n","payload":"tree 5733bb69baf132e0d620811984581a15ff062107\nparent fffdd3a048b29d98e80c0f0bbb468c35801153f1\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1666867909 +0200\ncommitter GitHub <noreply@github.com> 1666867909 +0200\n\n[SYNCOPE-1705] Encapsulating each object processing into an inner transaction (#383)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49e013436f13856093548672105d79e5d6edb9a7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/49e013436f13856093548672105d79e5d6edb9a7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49e013436f13856093548672105d79e5d6edb9a7/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"fffdd3a048b29d98e80c0f0bbb468c35801153f1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fffdd3a048b29d98e80c0f0bbb468c35801153f1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fffdd3a048b29d98e80c0f0bbb468c35801153f1"}],"stats":{"total":345,"additions":99,"deletions":246},"files":[{"sha":"bc3ec6e880473cbfd512a32b94866bbe5d1997b4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -37,9 +37,9 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n     boolean anyItemHaving(Implementation transformer);\n \n-    List<ExternalResource> findByProvisionSorter(Implementation propagationActions);\n+    List<ExternalResource> findByProvisionSorter(Implementation provisionSorter);\n \n-    List<ExternalResource> findByPropagationActions(Implementation provisionSorter);\n+    List<ExternalResource> findByPropagationActions(Implementation propagationActions);\n \n     List<ExternalResource> findByPolicy(Policy policy);\n "},{"sha":"5fd3d497377ad0f87e59870e707e675ef8532e1f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RemediationDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRemediationDAO.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -41,5 +41,4 @@ public interface RemediationDAO extends DAO<Remediation> {\n     void delete(Remediation remediation);\n \n     void delete(String key);\n-\n }"},{"sha":"afbf49aac28465dbf94efb218ee379efbdf55641","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningActions.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -28,7 +28,7 @@ public interface ProvisioningActions {\n      * @param profile provisioning profile\n      * @throws JobExecutionException in case of generic failure\n      */\n-    default void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n+    default void beforeAll(ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n         // do nothing\n     }\n \n@@ -38,7 +38,7 @@ default void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecut\n      * @param profile provisioning profile\n      * @throws JobExecutionException in case of generic failure\n      */\n-    default void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n+    default void afterAll(ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n         // do nothing        \n     }\n }"},{"sha":"a9d9a525385e00caf15e36d87c4e5af5639ecb8b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fffdd3a048b29d98e80c0f0bbb468c35801153f1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=fffdd3a048b29d98e80c0f0bbb468c35801153f1","patch":"@@ -1,129 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.job;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import org.apache.syncope.common.lib.request.MembershipUR;\n-import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.job.JobManager;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-/**\n- * Quartz Job used for setting user memberships asynchronously, after the completion of\n- * {@link org.apache.syncope.core.provisioning.api.pushpull.PullActions}.\n- */\n-public class SetUMembershipsJob extends AbstractInterruptableJob {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SetUMembershipsJob.class);\n-\n-    public static final String MEMBERSHIPS_BEFORE_KEY = \"membershipsBefore\";\n-\n-    public static final String MEMBERSHIPS_AFTER_KEY = \"membershipsAfter\";\n-\n-    public static final String CONTEXT = \"context\";\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private UserProvisioningManager userProvisioningManager;\n-\n-    @Override\n-    public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        String executor = Optional.ofNullable(context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY)).\n-                orElse(securityProperties.getAdminUser());\n-\n-        try {\n-            AuthContextUtils.callAsAdmin(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY), () -> {\n-\n-                @SuppressWarnings(\"unchecked\")\n-                Map<String, Set<String>> membershipsBefore =\n-                        (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_BEFORE_KEY);\n-                LOG.debug(\"Memberships before pull (User -> Groups) {}\", membershipsBefore);\n-\n-                @SuppressWarnings(\"unchecked\")\n-                Map<String, Set<String>> membershipsAfter =\n-                        (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_AFTER_KEY);\n-                LOG.debug(\"Memberships after pull (User -> Groups) {}\", membershipsAfter);\n-\n-                List<UserUR> updateReqs = new ArrayList<>();\n-\n-                membershipsAfter.forEach((user, groups) -> {\n-                    UserUR userUR = new UserUR();\n-                    userUR.setKey(user);\n-                    updateReqs.add(userUR);\n-\n-                    groups.forEach(group -> {\n-                        Set<String> before = membershipsBefore.get(user);\n-                        if (before == null || !before.contains(group)) {\n-                            userUR.getMemberships().add(new MembershipUR.Builder(group).\n-                                    operation(PatchOperation.ADD_REPLACE).\n-                                    build());\n-                        }\n-                    });\n-                });\n-\n-                membershipsBefore.forEach((user, groups) -> {\n-                    UserUR userUR = updateReqs.stream().\n-                            filter(req -> user.equals(req.getKey())).findFirst().\n-                            orElseGet(() -> {\n-                                UserUR req = new UserUR.Builder(user).build();\n-                                updateReqs.add(req);\n-                                return req;\n-                            });\n-\n-                    groups.forEach(group -> {\n-                        Set<String> after = membershipsAfter.get(user);\n-                        if (after == null || !after.contains(group)) {\n-                            userUR.getMemberships().add(new MembershipUR.Builder(group).\n-                                    operation(PatchOperation.DELETE).\n-                                    build());\n-                        }\n-                    });\n-                });\n-\n-                updateReqs.stream().filter(req -> !req.isEmpty()).forEach(req -> {\n-                    LOG.debug(\"About to update User {}\", req);\n-                    userProvisioningManager.update(\n-                            req, true, executor, context.getMergedJobDataMap().getString(CONTEXT));\n-                });\n-\n-                return null;\n-            });\n-        } catch (RuntimeException e) {\n-            LOG.error(\"While setting memberships\", e);\n-            throw new JobExecutionException(\"While executing memberships\", e);\n-        } finally {\n-            ApplicationContextProvider.getBeanFactory().destroySingleton(context.getJobDetail().getKey().getName());\n-        }\n-    }\n-}"},{"sha":"12225b472fc548b30d638107a1ab02cb44737cdd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -36,7 +36,7 @@ public class DefaultPropagationReporter implements PropagationReporter {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DefaultPropagationReporter.class);\n \n-    protected final List<PropagationStatus> statuses = new ArrayList<>();\n+    protected final List<PropagationStatus> statuses = new CopyOnWriteArrayList<>();\n \n     protected boolean add(final PropagationStatus status) {\n         return statuses.stream().anyMatch(item -> item.getResource().equals(status.getResource()))"},{"sha":"29c7dc094a1b7bf4b1a6e4e9517acd908e593502","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":9,"deletions":55,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -70,9 +70,9 @@\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(rollbackFor = Throwable.class)\n public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHandler<PullTask, PullActions>\n         implements SyncopePullResultHandler {\n \n@@ -128,6 +128,7 @@ public void setPullExecutor(final SyncopePullExecutor executor) {\n         this.executor = executor;\n     }\n \n+    @Transactional(rollbackFor = Throwable.class, propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public boolean handle(final SyncDelta delta) {\n         Provision provision = null;\n@@ -265,15 +266,7 @@ protected List<ProvisioningReport> provision(\n                 if (profile.getTask().isRemediation()) {\n                     // set to SUCCESS to let the incremental flow go on in case of errors\n                     resultStatus = Result.SUCCESS;\n-                    createRemediation(\n-                            provision.getAnyType(),\n-                            null,\n-                            anyCR,\n-                            null,\n-                            taskDAO.exists(TaskType.PULL, profile.getTask().getKey())\n-                            ? profile.getTask() : null,\n-                            result,\n-                            delta);\n+                    createRemediation(provision.getAnyType(), null, anyCR, null, result, delta);\n                 } else {\n                     resultStatus = Result.FAILURE;\n                 }\n@@ -391,13 +384,7 @@ protected List<ProvisioningReport> update(\n                         if (profile.getTask().isRemediation()) {\n                             // set to SUCCESS to let the incremental flow go on in case of errors\n                             resultStatus = Result.SUCCESS;\n-                            createRemediation(\n-                                    provision.getAnyType(),\n-                                    anyUR,\n-                                    taskDAO.exists(TaskType.PULL, profile.getTask().getKey())\n-                                    ? profile.getTask() : null,\n-                                    result,\n-                                    delta);\n+                            createRemediation(provision.getAnyType(), null, null, anyUR, result, delta);\n                         } else {\n                             resultStatus = Result.FAILURE;\n                         }\n@@ -695,14 +682,7 @@ protected List<ProvisioningReport> delete(\n                             // set to SUCCESS to let the incremental flow go on in case of errors\n                             resultStatus = Result.SUCCESS;\n                             createRemediation(\n-                                    provision.getAnyType(),\n-                                    match.getAny().getKey(),\n-                                    null,\n-                                    null,\n-                                    taskDAO.exists(TaskType.PULL, profile.getTask().getKey())\n-                                    ? profile.getTask() : null,\n-                                    result,\n-                                    delta);\n+                                    provision.getAnyType(), match.getAny().getKey(), null, null, result, delta);\n                         }\n                     }\n \n@@ -989,43 +969,15 @@ protected void createRemediationIfNeeded(\n             final ProvisioningReport result) {\n \n         if (ProvisioningReport.Status.FAILURE == result.getStatus() && profile.getTask().isRemediation()) {\n-            createRemediation(\n-                    result.getAnyType(),\n-                    null,\n-                    null,\n-                    anyUR,\n-                    taskDAO.exists(TaskType.PULL, profile.getTask().getKey()) ? profile.getTask() : null,\n-                    result,\n-                    delta);\n+            createRemediation(result.getAnyType(), null, null, anyUR, result, delta);\n         }\n     }\n \n-    protected void createRemediation(\n-            final String anyType,\n-            final AnyCR anyCR,\n-            final PullTask pullTask,\n-            final ProvisioningReport result,\n-            final SyncDelta delta) {\n-\n-        createRemediation(anyType, null, anyCR, null, pullTask, result, delta);\n-    }\n-\n-    protected void createRemediation(\n-            final String anyType,\n-            final AnyUR anyUR,\n-            final PullTask pullTask,\n-            final ProvisioningReport result,\n-            final SyncDelta delta) {\n-\n-        createRemediation(anyType, null, null, anyUR, pullTask, result, delta);\n-    }\n-\n     protected void createRemediation(\n             final String anyType,\n             final String anyKey,\n             final AnyCR anyCR,\n             final AnyUR anyUR,\n-            final PullTask pullTask,\n             final ProvisioningReport result,\n             final SyncDelta delta) {\n \n@@ -1043,7 +995,9 @@ protected void createRemediation(\n         remediation.setError(result.getMessage());\n         remediation.setInstant(OffsetDateTime.now());\n         remediation.setRemoteName(delta.getObject().getName().getNameValue());\n-        remediation.setPullTask(pullTask);\n+        if (taskDAO.exists(TaskType.PULL, profile.getTask().getKey())) {\n+            remediation.setPullTask((PullTask) taskDAO.find(TaskType.PULL, profile.getTask().getKey()));\n+        }\n \n         remediation = remediationDAO.save(remediation);\n "},{"sha":"08164b5d9150619b3ddbd06ad3faaddfa4afe457","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -422,7 +422,7 @@ protected Optional<ProvisioningReport> provision(\n                 resultStatus = Result.FAILURE;\n \n                 if (profile.getTask().isRemediation()) {\n-                    createRemediation(provision.getAnyType(), req, profile.getTask(), report, delta);\n+                    createRemediation(provision.getAnyType(), null, null, req, report, delta);\n                 }\n             }\n \n@@ -541,7 +541,7 @@ protected Optional<ProvisioningReport> update(\n                 resultStatus = Result.FAILURE;\n \n                 if (profile.getTask().isRemediation()) {\n-                    createRemediation(provision.getAnyType(), userUR, profile.getTask(), report, delta);\n+                    createRemediation(provision.getAnyType(), null, null, userUR, report, delta);\n                 }\n             }\n \n@@ -617,7 +617,7 @@ protected Optional<ProvisioningReport> delete(\n                     output = e;\n \n                     if (profile.getTask().isRemediation()) {\n-                        createRemediation(provision.getAnyType(), req, profile.getTask(), report, delta);\n+                        createRemediation(provision.getAnyType(), null, null, req, report, delta);\n                     }\n                 }\n "},{"sha":"0dad00af249c58059fc0b840d3134a4cbcafb495","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":66,"deletions":15,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -18,25 +18,31 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.java.job.SetUMembershipsJob;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.apache.syncope.core.spring.implementation.InstanceScope;\n+import org.apache.syncope.core.spring.implementation.SyncopeImplementation;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -46,6 +52,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -54,7 +61,8 @@\n  *\n  * @see org.apache.syncope.core.provisioning.java.propagation.LDAPMembershipPropagationActions\n  */\n-public class LDAPMembershipPullActions extends SchedulingPullActions {\n+@SyncopeImplementation(scope = InstanceScope.PER_CONTEXT)\n+public class LDAPMembershipPullActions implements PullActions {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipPullActions.class);\n \n@@ -65,7 +73,10 @@ public class LDAPMembershipPullActions extends SchedulingPullActions {\n     protected GroupDAO groupDAO;\n \n     @Autowired\n-    private InboundMatcher inboundMatcher;\n+    protected InboundMatcher inboundMatcher;\n+\n+    @Autowired\n+    protected UserProvisioningManager userProvisioningManager;\n \n     protected final Map<String, Set<String>> membershipsBefore = new HashMap<>();\n \n@@ -137,7 +148,8 @@ public void beforeUpdate(\n             final AnyUR anyUR) throws JobExecutionException {\n \n         if (!(entity instanceof GroupTO)) {\n-            super.beforeUpdate(profile, delta, entity, anyUR);\n+            PullActions.super.beforeUpdate(profile, delta, entity, anyUR);\n+            return;\n         }\n \n         groupDAO.findUMemberships(groupDAO.find(entity.getKey())).forEach(uMembership -> {\n@@ -162,13 +174,15 @@ public void after(\n             final ProvisioningReport result) throws JobExecutionException {\n \n         if (!(entity instanceof GroupTO)) {\n-            super.after(profile, delta, entity, result);\n+            PullActions.super.after(profile, delta, entity, result);\n+            return;\n         }\n \n         Optional<Provision> provision = profile.getTask().getResource().\n                 getProvisionByAnyType(AnyTypeKind.USER.name()).filter(p -> p.getMapping() != null);\n         if (provision.isEmpty()) {\n-            super.after(profile, delta, entity, result);\n+            PullActions.super.after(profile, delta, entity, result);\n+            return;\n         }\n \n         getMembAttrValues(delta, profile.getConnector()).forEach(membValue -> {\n@@ -190,15 +204,52 @@ public void after(\n         });\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n-        Map<String, Object> jobMap = new HashMap<>();\n-        jobMap.put(SetUMembershipsJob.MEMBERSHIPS_BEFORE_KEY, membershipsBefore);\n-        jobMap.put(SetUMembershipsJob.MEMBERSHIPS_AFTER_KEY, membershipsAfter);\n-        jobMap.put(JobManager.EXECUTOR_KEY, profile.getExecutor());\n-        jobMap.put(\n-                SetUMembershipsJob.CONTEXT,\n-                \"PullTask \" + profile.getTask().getKey() + \" '\" + profile.getTask().getName() + \"'\");\n-        schedule(SetUMembershipsJob.class, jobMap);\n+        List<UserUR> updateReqs = new ArrayList<>();\n+\n+        membershipsAfter.forEach((user, groups) -> {\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(user);\n+            updateReqs.add(userUR);\n+\n+            groups.stream().forEach(group -> {\n+                Set<String> before = membershipsBefore.get(user);\n+                if (before == null || !before.contains(group)) {\n+                    userUR.getMemberships().add(new MembershipUR.Builder(group).\n+                            operation(PatchOperation.ADD_REPLACE).\n+                            build());\n+                }\n+            });\n+        });\n+\n+        membershipsBefore.forEach((user, groups) -> {\n+            UserUR userUR = updateReqs.stream().\n+                    filter(req -> user.equals(req.getKey())).findFirst().\n+                    orElseGet(() -> {\n+                        UserUR req = new UserUR.Builder(user).build();\n+                        updateReqs.add(req);\n+                        return req;\n+                    });\n+\n+            groups.forEach(group -> {\n+                Set<String> after = membershipsAfter.get(user);\n+                if (after == null || !after.contains(group)) {\n+                    userUR.getMemberships().add(new MembershipUR.Builder(group).\n+                            operation(PatchOperation.DELETE).\n+                            build());\n+                }\n+            });\n+        });\n+\n+        membershipsAfter.clear();\n+        membershipsBefore.clear();\n+\n+        String context = \"PullTask \" + profile.getTask().getKey() + \" '\" + profile.getTask().getName() + \"'\";\n+        updateReqs.stream().filter(req -> !req.isEmpty()).forEach(req -> {\n+            LOG.debug(\"About to update memberships for User {}\", req.getKey());\n+            userProvisioningManager.update(req, true, profile.getExecutor(), context);\n+        });\n     }\n }"},{"sha":"c4fdbb0863921053d430ea205039e8a5697ddb83","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -41,6 +41,8 @@\n  * Superclass for pull actions that need to schedule actions to run after their completion.\n  *\n  * @see LDAPMembershipPullActions for a concrete example\n+ * @deprecated From 3.0.0-M2 this class is not needed anymore and will be removed from 3.0.0 onwards.\n+ * After SYNCOPE-1705 there is no need anymore to schedule a job to run after the current pull task execution\n  */\n public abstract class SchedulingPullActions implements PullActions {\n "},{"sha":"0d3a976d6a20d4e363593f467512cb1f227f338f","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActionsTest.java","status":"modified","additions":11,"deletions":35,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActionsTest.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.Mapping;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -68,10 +69,7 @@\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.quartz.JobExecutionException;\n-import org.quartz.Scheduler;\n-import org.quartz.SchedulerException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.test.util.ReflectionTestUtils;\n \n public class LDAPMembershipPullActionsTest extends AbstractTest {\n@@ -104,10 +102,13 @@ public class LDAPMembershipPullActionsTest extends AbstractTest {\n     private Map<String, Set<String>> membershipsAfter;\n \n     @Mock\n-    private ProvisioningTask<?> provisioningTask;\n+    private ProvisioningTask<?> pullTask;\n \n     @Mock\n-    private ExternalResource externalResource;\n+    private ExternalResource resource;\n+\n+    @Mock\n+    private Provision provision;\n \n     @Mock\n     private Connector connector;\n@@ -150,8 +151,10 @@ public void initTest() {\n         connConfProperties = new HashSet<>();\n         connConfProperties.add(connConfProperty);\n \n-        lenient().when(profile.getTask()).thenAnswer(ic -> provisioningTask);\n-        lenient().when(provisioningTask.getResource()).thenReturn(externalResource);\n+        lenient().when(profile.getTask()).thenAnswer(ic -> pullTask);\n+        lenient().when(pullTask.getResource()).thenReturn(resource);\n+        lenient().when(resource.getProvisionByAnyType(anyString())).thenReturn(Optional.of(provision));\n+        lenient().when(provision.getMapping()).thenReturn(new Mapping());\n         lenient().when(anyTypeDAO.findUser()).thenAnswer(ic -> {\n             AnyType userAnyType = mock(AnyType.class);\n             lenient().when(userAnyType.getKey()).thenReturn(AnyTypeKind.USER.name());\n@@ -192,27 +195,14 @@ public void beforeUpdate() throws JobExecutionException {\n         assertEquals(1, membershipsBefore.get(user.getKey()).size());\n     }\n \n-    @Test\n-    public void afterWithEmptyAttributes(final @Mock Attribute attribute) throws JobExecutionException {\n-        entity = new GroupTO();\n-\n-        when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvisionByAnyType(anyString())).thenAnswer(ic -> Optional.of(mock(Provision.class)));\n-\n-        ldapMembershipPullActions.after(profile, syncDelta, entity, result);\n-\n-        assertEquals(List.of(), attribute.getValue());\n-    }\n-\n     @Test\n     public void after() throws JobExecutionException {\n-        entity = new UserTO();\n+        entity = new GroupTO();\n         String expectedUid = UUID.randomUUID().toString();\n         Attribute attribute = new Uid(expectedUid);\n         List<String> expected = List.of(expectedUid);\n \n         when(connectorObj.getAttributeByName(anyString())).thenReturn(attribute);\n-        when(externalResource.getProvisionByAnyType(anyString())).thenAnswer(ic -> Optional.empty());\n         when(inboundMatcher.match(any(AnyType.class), anyString(), any(ExternalResource.class), any(Connector.class))).\n                 thenReturn(Optional.of(new PullMatch(MatchType.ANY, user)));\n \n@@ -222,18 +212,4 @@ public void after() throws JobExecutionException {\n         verify(membershipsAfter).put(anyString(), any());\n         assertEquals(expected, attribute.getValue());\n     }\n-\n-    @Test\n-    public void afterAll(\n-            final @Mock Map<String, Object> jobMap,\n-            final @Mock SchedulerFactoryBean schedulerFactoryBean,\n-            final @Mock Scheduler scheduler) throws JobExecutionException, SchedulerException {\n-\n-        ReflectionTestUtils.setField(ldapMembershipPullActions, \"scheduler\", schedulerFactoryBean);\n-        when(schedulerFactoryBean.getScheduler()).thenReturn(scheduler);\n-\n-        ldapMembershipPullActions.afterAll(profile);\n-\n-        verify(scheduler).scheduleJob(any(), any());\n-    }\n }"},{"sha":"b6c15710086457e013c8429217f473e847c800d0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49e013436f13856093548672105d79e5d6edb9a7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49e013436f13856093548672105d79e5d6edb9a7/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=49e013436f13856093548672105d79e5d6edb9a7","patch":"@@ -436,7 +436,7 @@ public void reconcileFromLDAP() {\n         assertEquals(\"odd\", userConnObject.getAttr(\"title\").get().getValues().get(0));\n         Attr userDn = userConnObject.getAttr(Name.NAME).get();\n         updateLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD,\n-                userDn.getValues().get(0), Collections.singletonMap(\"title\", (String) null));\n+                userDn.getValues().get(0), Collections.singletonMap(\"title\", null));\n \n         // SYNCOPE-317\n         execProvisioningTask(\n@@ -1083,7 +1083,7 @@ public void issueSYNCOPE272() {\n     @Test\n     public void issueSYNCOPE307() {\n         assumeFalse(ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform()));\n-        \n+\n         UserCR userCR = UserITCase.getUniqueSample(\"s307@apache.org\");\n         userCR.setUsername(\"test0\");\n         userCR.getPlainAttrs().removeIf(attr -> \"firstname\".equals(attr.getSchema()));"}]}