{"sha":"7451efb6d274cc446da952d7b607357b0422f30f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc0NTFlZmI2ZDI3NGNjNDQ2ZGE5NTJkN2I2MDczNTdiMDQyMmYzMGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-06T14:55:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-06T14:56:07Z"},"message":"[SYNCOPE-1145] Core and Common implementation completed, Console still TODO","tree":{"sha":"28e15a04ff56b32d57e7a13826f8bb6981953fc9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/28e15a04ff56b32d57e7a13826f8bb6981953fc9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7451efb6d274cc446da952d7b607357b0422f30f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7451efb6d274cc446da952d7b607357b0422f30f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7451efb6d274cc446da952d7b607357b0422f30f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7451efb6d274cc446da952d7b607357b0422f30f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d4cd448427ea2a147296159fd70712ead0a42a69","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d4cd448427ea2a147296159fd70712ead0a42a69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d4cd448427ea2a147296159fd70712ead0a42a69"}],"stats":{"total":1906,"additions":1665,"deletions":241},"files":[{"sha":"580e2c8ac88441cf704170040c99dec185417840","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorConfPanel.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -87,11 +87,9 @@ public ConnConfProperty transform(final ConnConfPropSchema key) {\n                 final ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(key);\n \n-                if (instance.getConfMap().containsKey(key.getName())\n-                        && instance.getConfMap().get(key.getName()).getValues() != null) {\n-\n-                    property.getValues().addAll(instance.getConfMap().get(key.getName()).getValues());\n-                    property.setOverridable(instance.getConfMap().get(key.getName()).isOverridable());\n+                if (instance.getConf(key.getName()) != null && instance.getConf(key.getName()).getValues() != null) {\n+                    property.getValues().addAll(instance.getConf(key.getName()).getValues());\n+                    property.setOverridable(instance.getConf(key.getName()).isOverridable());\n                 }\n \n                 if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {"},{"sha":"a410a730d9d5a659d0a8aa3b223ba16a3bb0ccb9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractHistoryConf.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.Date;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"abstractHistoryConf\")\n+@XmlType\n+@XmlSeeAlso({ ConnInstanceHistoryConfTO.class, ResourceHistoryConfTO.class })\n+public abstract class AbstractHistoryConf extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = -8001640160293506651L;\n+\n+    private String key;\n+\n+    private String creator;\n+\n+    private Date creation;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getCreator() {\n+        return creator;\n+    }\n+\n+    public void setCreator(final String creator) {\n+        this.creator = creator;\n+    }\n+\n+    public Date getCreation() {\n+        return creation == null\n+                ? null\n+                : new Date(creation.getTime());\n+    }\n+\n+    public void setCreation(final Date creation) {\n+        this.creation = creation == null\n+                ? null\n+                : new Date(creation.getTime());\n+    }\n+\n+}"},{"sha":"6583c54d61e3353c79c0668e64b567de5d719817","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceHistoryConfTO.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceHistoryConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceHistoryConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceHistoryConfTO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"connInstanceHistoryConf\")\n+@XmlType\n+public class ConnInstanceHistoryConfTO extends AbstractHistoryConf {\n+\n+    private static final long serialVersionUID = 8067539341757100479L;\n+\n+    private ConnInstanceTO connInstanceTO;\n+\n+    public ConnInstanceTO getConnInstanceTO() {\n+        return connInstanceTO;\n+    }\n+\n+    public void setConnInstanceTO(final ConnInstanceTO connInstanceTO) {\n+        this.connInstanceTO = connInstanceTO;\n+    }\n+\n+}"},{"sha":"d7c8be7a93b5d4a0344b23fee257ad4f4bc2298d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -20,17 +20,16 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.Collections;\n import java.util.EnumSet;\n-import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -112,15 +111,14 @@ public Set<ConnConfProperty> getConf() {\n     }\n \n     @JsonIgnore\n-    public Map<String, ConnConfProperty> getConfMap() {\n-        Map<String, ConnConfProperty> result = new HashMap<>();\n-\n-        for (ConnConfProperty prop : getConf()) {\n-            result.put(prop.getSchema().getName(), prop);\n-        }\n-        result = Collections.unmodifiableMap(result);\n-\n-        return Collections.unmodifiableMap(result);\n+    public ConnConfProperty getConf(final String schemaName) {\n+        return IterableUtils.find(conf, new Predicate<ConnConfProperty>() {\n+\n+            @Override\n+            public boolean evaluate(final ConnConfProperty object) {\n+                return object.getSchema().getName().equals(schemaName);\n+            }\n+        });\n     }\n \n     @XmlElementWrapper(name = \"capabilities\")"},{"sha":"388b63c21d90ce8a02ec66909d2445f5062a0050","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceHistoryConfTO.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceHistoryConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceHistoryConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceHistoryConfTO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"resourceHistoryConf\")\n+@XmlType\n+public class ResourceHistoryConfTO extends AbstractHistoryConf {\n+\n+    private static final long serialVersionUID = -7308499697925335157L;\n+\n+    private ResourceTO resourceTO;\n+\n+    public ResourceTO getResourceTO() {\n+        return resourceTO;\n+    }\n+\n+    public void setResourceTO(final ResourceTO resourceTO) {\n+        this.resourceTO = resourceTO;\n+    }\n+\n+}"},{"sha":"9bf8de36aa0ada0555151c0fec85360ba8452488","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -128,6 +128,12 @@ public final class StandardEntitlement {\n \n     public static final String RESOURCE_LIST_CONNOBJECT = \"RESOURCE_LIST_CONNOBJECT\";\n \n+    public static final String RESOURCE_HISTORY_LIST = \"RESOURCE_HISTORY_LIST\";\n+\n+    public static final String RESOURCE_HISTORY_RESTORE = \"RESOURCE_HISTORY_RESTORE\";\n+\n+    public static final String RESOURCE_HISTORY_DELETE = \"RESOURCE_HISTORY_DELETE\";\n+\n     public static final String CONNECTOR_LIST = \"CONNECTOR_LIST\";\n \n     public static final String CONNECTOR_CREATE = \"CONNECTOR_CREATE\";\n@@ -140,6 +146,12 @@ public final class StandardEntitlement {\n \n     public static final String CONNECTOR_RELOAD = \"CONNECTOR_RELOAD\";\n \n+    public static final String CONNECTOR_HISTORY_LIST = \"CONNECTOR_HISTORY_LIST\";\n+\n+    public static final String CONNECTOR_HISTORY_RESTORE = \"CONNECTOR_HISTORY_RESTORE\";\n+\n+    public static final String CONNECTOR_HISTORY_DELETE = \"CONNECTOR_HISTORY_DELETE\";\n+\n     public static final String CONFIGURATION_EXPORT = \"CONFIGURATION_EXPORT\";\n \n     public static final String CONFIGURATION_LIST = \"CONFIGURATION_LIST\";"},{"sha":"28a0b3cf7a8b665fcc71797f7fa23993b1d02277","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n+\n+/**\n+ * REST operations for connector instance configuration versioning.\n+ */\n+@Path(\"connectorsHistory\")\n+public interface ConnectorHistoryService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all connector configuration history instances for the given connector instance key.\n+     *\n+     * @param connectorKey connector instance key\n+     * @return list of all connector configuration history instances for the given connector instance key\n+     */\n+    @GET\n+    @Path(\"{connectorKey}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<ConnInstanceHistoryConfTO> list(@NotNull @PathParam(\"connectorKey\") String connectorKey);\n+\n+    /**\n+     * Restores the connector configuration history instance matching the provided key.\n+     * \n+     * @param key connector configuration history instance key to be restored\n+     */\n+    @POST\n+    @Path(\"{key}\")\n+    void restore(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Deletes the connector configuration history instance matching the provided key.\n+     *\n+     * @param key connector configuration history instance key to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"fbf748a559c790a7cd1355d17d7df0c6081e8f67","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceHistoryService.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceHistoryService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceHistoryService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceHistoryService.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n+\n+/**\n+ * REST operations for resource configuration versioning.\n+ */\n+@Path(\"resourcesHistory\")\n+public interface ResourceHistoryService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all resource configuration history for the given resource key.\n+     *\n+     * @param resourceKey resource key\n+     * @return list of all resource configuration history for the given resource key\n+     */\n+    @GET\n+    @Path(\"{resourceKey}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<ResourceHistoryConfTO> list(@NotNull @PathParam(\"resourceKey\") String resourceKey);\n+\n+    /**\n+     * Restores the resource configuration history matching the provided key.\n+     *\n+     * @param key resource configuration history key to be restored\n+     */\n+    @POST\n+    @Path(\"{key}\")\n+    void restore(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Deletes the resource configuration history matching the provided key.\n+     *\n+     * @param key resource configuration history key to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"2d0afa76dcb86a324e2fa9b84ff9b46e96f44d7f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorHistoryLogic.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ConnectorHistoryLogic extends AbstractTransactionalLogic<ConnInstanceHistoryConfTO> {\n+\n+    @Autowired\n+    private ConnInstanceHistoryConfDAO connInstanceHistoryConfDAO;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Autowired\n+    private ConnInstanceDataBinder binder;\n+\n+    private ConnInstanceHistoryConfTO getConnInstanceHistoryConfTO(final ConnInstanceHistoryConf history) {\n+        ConnInstanceHistoryConfTO historyTO = new ConnInstanceHistoryConfTO();\n+        historyTO.setKey(history.getKey());\n+        historyTO.setCreator(history.getCreator());\n+        historyTO.setCreation(history.getCreation());\n+        historyTO.setConnInstanceTO(history.getConf());\n+\n+        return historyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_LIST + \"')\")\n+    public List<ConnInstanceHistoryConfTO> list(final String key) {\n+        ConnInstance connInstance = connInstanceDAO.find(key);\n+        if (connInstance == null) {\n+            throw new NotFoundException(\"Connector '\" + key + \"'\");\n+        }\n+\n+        return CollectionUtils.collect(connInstanceHistoryConfDAO.findByEntity(connInstance),\n+                new Transformer<ConnInstanceHistoryConf, ConnInstanceHistoryConfTO>() {\n+\n+            @Override\n+            public ConnInstanceHistoryConfTO transform(final ConnInstanceHistoryConf input) {\n+                return getConnInstanceHistoryConfTO(input);\n+            }\n+\n+        }, new ArrayList<ConnInstanceHistoryConfTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_RESTORE + \"')\")\n+    public void restore(final String key) {\n+        ConnInstanceHistoryConf connInstanceHistoryConf = connInstanceHistoryConfDAO.find(key);\n+        if (connInstanceHistoryConf == null) {\n+            throw new NotFoundException(\"Connector History Conf '\" + key + \"'\");\n+        }\n+\n+        binder.update(connInstanceHistoryConf.getConf());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_HISTORY_DELETE + \"')\")\n+    public void delete(final String key) {\n+        ConnInstanceHistoryConf connInstanceHistoryConf = connInstanceHistoryConfDAO.find(key);\n+        if (connInstanceHistoryConf == null) {\n+            throw new NotFoundException(\"Connector History Conf '\" + key + \"'\");\n+        }\n+\n+        connInstanceHistoryConfDAO.delete(key);\n+    }\n+\n+    @Override\n+    protected ConnInstanceHistoryConfTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        if (!\"list\".equals(method.getName())) {\n+            try {\n+                String key = (String) args[0];\n+                return getConnInstanceHistoryConfTO(connInstanceHistoryConfDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"e84dfe5e691f3d029413217815bbff4e84ae7441","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":2,"deletions":24,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -77,34 +77,12 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_CREATE + \"')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n-        ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n-        try {\n-            connInstance = connInstanceDAO.save(connInstance);\n-        } catch (SyncopeClientException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n-            ex.getElements().add(e.getMessage());\n-            throw ex;\n-        }\n-\n-        return binder.getConnInstanceTO(connInstance);\n+        return binder.getConnInstanceTO(connInstanceDAO.save(binder.getConnInstance(connInstanceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_UPDATE + \"')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n-        ConnInstance connInstance = binder.update(connInstanceTO.getKey(), connInstanceTO);\n-        try {\n-            connInstance = connInstanceDAO.save(connInstance);\n-        } catch (SyncopeClientException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n-            ex.getElements().add(e.getMessage());\n-            throw ex;\n-        }\n-\n-        return binder.getConnInstanceTO(connInstance);\n+        return binder.getConnInstanceTO(binder.update(connInstanceTO));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_DELETE + \"')\")"},{"sha":"fc95f8182a7e207f9a56db10ceae6655494d7325","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceHistoryLogic.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ResourceHistoryLogic extends AbstractTransactionalLogic<ResourceHistoryConfTO> {\n+\n+    @Autowired\n+    private ExternalResourceHistoryConfDAO resourceHistoryConfDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ResourceDataBinder binder;\n+\n+    private ResourceHistoryConfTO getResourceHistoryConfTO(final ExternalResourceHistoryConf history) {\n+        ResourceHistoryConfTO historyTO = new ResourceHistoryConfTO();\n+        historyTO.setKey(history.getKey());\n+        historyTO.setCreator(history.getCreator());\n+        historyTO.setCreation(history.getCreation());\n+        historyTO.setResourceTO(history.getConf());\n+\n+        return historyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_LIST + \"')\")\n+    public List<ResourceHistoryConfTO> list(final String key) {\n+        ExternalResource resource = resourceDAO.find(key);\n+        if (resource == null) {\n+            throw new NotFoundException(\"Resource '\" + key + \"'\");\n+        }\n+\n+        return CollectionUtils.collect(resourceHistoryConfDAO.findByEntity(resource),\n+                new Transformer<ExternalResourceHistoryConf, ResourceHistoryConfTO>() {\n+\n+            @Override\n+            public ResourceHistoryConfTO transform(final ExternalResourceHistoryConf input) {\n+                return getResourceHistoryConfTO(input);\n+            }\n+        }, new ArrayList<ResourceHistoryConfTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_RESTORE + \"')\")\n+    public void restore(final String key) {\n+        ExternalResourceHistoryConf resourceHistoryConf = resourceHistoryConfDAO.find(key);\n+        if (resourceHistoryConf == null) {\n+            throw new NotFoundException(\"Resource History Conf '\" + key + \"'\");\n+        }\n+\n+        binder.update(resourceHistoryConf.getEntity(), resourceHistoryConf.getConf());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_HISTORY_DELETE + \"')\")\n+    public void delete(final String key) {\n+        ExternalResourceHistoryConf resourceHistoryConf = resourceHistoryConfDAO.find(key);\n+        if (resourceHistoryConf == null) {\n+            throw new NotFoundException(\"Resource History Conf '\" + key + \"'\");\n+        }\n+\n+        resourceHistoryConfDAO.delete(key);\n+    }\n+\n+    @Override\n+    protected ResourceHistoryConfTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        if (!\"list\".equals(method.getName())) {\n+            try {\n+                String key = (String) args[0];\n+                return getResourceHistoryConfTO(resourceHistoryConfDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"5269c1e134182eaadef77a5404fb8e047c4936a2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":9,"deletions":31,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -125,18 +125,7 @@ public ResourceTO create(final ResourceTO resourceTO) {\n             throw new DuplicateException(resourceTO.getKey());\n         }\n \n-        ExternalResource resource = null;\n-        try {\n-            resource = resourceDAO.save(binder.create(resourceTO));\n-        } catch (SyncopeClientException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidExternalResource);\n-            ex.getElements().add(e.getMessage());\n-            throw ex;\n-        }\n-\n-        return binder.getResourceTO(resource);\n+        return binder.getResourceTO(resourceDAO.save(binder.create(resourceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n@@ -146,18 +135,7 @@ public ResourceTO update(final ResourceTO resourceTO) {\n             throw new NotFoundException(\"Resource '\" + resourceTO.getKey() + \"'\");\n         }\n \n-        resource = binder.update(resource, resourceTO);\n-        try {\n-            resource = resourceDAO.save(resource);\n-        } catch (SyncopeClientException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidExternalResource);\n-            ex.getElements().add(e.getMessage());\n-            throw ex;\n-        }\n-\n-        return binder.getResourceTO(resource);\n+        return binder.getResourceTO(resourceDAO.save(binder.update(resource, resourceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n@@ -208,25 +186,25 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_DELETE + \"')\")\n-    public ResourceTO delete(final String resourceName) {\n-        ExternalResource resource = resourceDAO.find(resourceName);\n+    public ResourceTO delete(final String key) {\n+        ExternalResource resource = resourceDAO.find(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n \n         ResourceTO resourceToDelete = binder.getResourceTO(resource);\n \n-        resourceDAO.delete(resourceName);\n+        resourceDAO.delete(key);\n \n         return resourceToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public ResourceTO read(final String resourceName) {\n-        ExternalResource resource = resourceDAO.find(resourceName);\n+    public ResourceTO read(final String key) {\n+        ExternalResource resource = resourceDAO.find(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n \n         return binder.getResourceTO(resource);"},{"sha":"97da0f66da5ceb4df996b844baefa89d4d4c2340","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -95,7 +95,7 @@ private boolean doesSchemaExist(final SchemaType schemaType, final String name)\n     public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final T schemaTO) {\n         if (StringUtils.isBlank(schemaTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n-            sce.getElements().add(\"Schema name\");\n+            sce.getElements().add(\"Schema key\");\n             throw sce;\n         }\n \n@@ -124,23 +124,23 @@ public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_DELETE + \"')\")\n-    public void delete(final SchemaType schemaType, final String schemaName) {\n-        if (!doesSchemaExist(schemaType, schemaName)) {\n-            throw new NotFoundException(schemaType + \"/\" + schemaName);\n+    public void delete(final SchemaType schemaType, final String schemaKey) {\n+        if (!doesSchemaExist(schemaType, schemaKey)) {\n+            throw new NotFoundException(schemaType + \"/\" + schemaKey);\n         }\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                virSchemaDAO.delete(schemaName);\n+                virSchemaDAO.delete(schemaKey);\n                 break;\n \n             case DERIVED:\n-                derSchemaDAO.delete(schemaName);\n+                derSchemaDAO.delete(schemaKey);\n                 break;\n \n             case PLAIN:\n             default:\n-                plainSchemaDAO.delete(schemaName);\n+                plainSchemaDAO.delete(schemaKey);\n         }\n     }\n \n@@ -207,32 +207,32 @@ public T transform(final PlainSchema input) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final String schemaName) {\n+    public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final String schemaKey) {\n         T read;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.find(schemaName);\n+                VirSchema virSchema = virSchemaDAO.find(schemaKey);\n                 if (virSchema == null) {\n-                    throw new NotFoundException(\"Virtual Schema '\" + schemaName + \"'\");\n+                    throw new NotFoundException(\"Virtual Schema '\" + schemaKey + \"'\");\n                 }\n \n                 read = (T) binder.getVirSchemaTO(virSchema);\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.find(schemaName);\n+                DerSchema derSchema = derSchemaDAO.find(schemaKey);\n                 if (derSchema == null) {\n-                    throw new NotFoundException(\"Derived schema '\" + schemaName + \"'\");\n+                    throw new NotFoundException(\"Derived schema '\" + schemaKey + \"'\");\n                 }\n \n                 read = (T) binder.getDerSchemaTO(derSchema);\n                 break;\n \n             case PLAIN:\n             default:\n-                PlainSchema schema = plainSchemaDAO.find(schemaName);\n+                PlainSchema schema = plainSchemaDAO.find(schemaKey);\n                 if (schema == null) {\n-                    throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n+                    throw new NotFoundException(\"Schema '\" + schemaKey + \"'\");\n                 }\n \n                 read = (T) binder.getPlainSchemaTO(schema);"},{"sha":"1caad698fbc3858008fe0dd481e319087f69c48a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ConnInstanceHistoryConfDAO.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConnInstanceHistoryConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConnInstanceHistoryConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConnInstanceHistoryConfDAO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n+\n+public interface ConnInstanceHistoryConfDAO extends DAO<ConnInstanceHistoryConf> {\n+\n+    ConnInstanceHistoryConf find(String key);\n+\n+    List<ConnInstanceHistoryConf> findByEntity(ConnInstance entity);\n+\n+    ConnInstanceHistoryConf save(ConnInstanceHistoryConf conf);\n+\n+    void delete(String key);\n+\n+    void deleteByEntity(ConnInstance entity);\n+}"},{"sha":"1c4db5a4bf05dc0bc2260e54593c2c1841262e57","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceHistoryConfDAO.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceHistoryConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceHistoryConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceHistoryConfDAO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+\n+public interface ExternalResourceHistoryConfDAO extends DAO<ExternalResourceHistoryConf> {\n+\n+    ExternalResourceHistoryConf find(String key);\n+\n+    List<ExternalResourceHistoryConf> findByEntity(ExternalResource entity);\n+\n+    ExternalResourceHistoryConf save(ExternalResourceHistoryConf conf);\n+\n+    void delete(String key);\n+\n+    void deleteByEntity(ExternalResource entity);\n+}"},{"sha":"88a448105680dd954ed87187842abe153a2fdaf0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstanceHistoryConf.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstanceHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstanceHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstanceHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+\n+public interface ConnInstanceHistoryConf extends HistoryConf<ConnInstance, ConnInstanceTO> {\n+}"},{"sha":"5da50c1c7d2c79e38bfd8c4666f4ad36ff627725","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/HistoryConf.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Date;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+\n+public interface HistoryConf<E extends Entity, T extends EntityTO> extends Entity {\n+\n+    String getCreator();\n+\n+    void setCreator(String creator);\n+\n+    Date getCreation();\n+\n+    void setCreation(Date creation);\n+\n+    E getEntity();\n+\n+    void setEntity(E entity);\n+\n+    T getConf();\n+\n+    void setConf(T conf);\n+}"},{"sha":"0fd8a25c323cb182d9fd33c5737cadf7af8bb84e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResourceHistoryConf.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResourceHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResourceHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResourceHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.resource;\n+\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.core.persistence.api.entity.HistoryConf;\n+\n+public interface ExternalResourceHistoryConf extends HistoryConf<ExternalResource, ResourceTO> {\n+}"},{"sha":"8972b8bddaa3aecd4c8c25334d392a51b0cfcc59","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -24,6 +24,7 @@\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -36,6 +37,9 @@\n @Repository\n public class JPAConnInstanceDAO extends AbstractDAO<ConnInstance> implements ConnInstanceDAO {\n \n+    @Autowired\n+    private ConnInstanceHistoryConfDAO connInstanceHistoryConfDAO;\n+\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -85,8 +89,10 @@ public void execute(final ExternalResource input) {\n \n         });\n \n+        connInstanceHistoryConfDAO.deleteByEntity(connInstance);\n+\n         entityManager().remove(connInstance);\n \n-        connRegistry.unregisterConnector(key.toString());\n+        connRegistry.unregisterConnector(key);\n     }\n }"},{"sha":"001d7fb62dc0e42231644bcfa047d7876b07855a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceHistoryConfDAO.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceHistoryConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceHistoryConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceHistoryConfDAO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstanceHistoryConf;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAConnInstanceHistoryConfDAO\n+        extends AbstractDAO<ConnInstanceHistoryConf> implements ConnInstanceHistoryConfDAO {\n+\n+    @Override\n+    public ConnInstanceHistoryConf find(final String key) {\n+        return entityManager().find(JPAConnInstanceHistoryConf.class, key);\n+    }\n+\n+    @Override\n+    public List<ConnInstanceHistoryConf> findByEntity(final ConnInstance entity) {\n+        TypedQuery<ConnInstanceHistoryConf> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAConnInstanceHistoryConf.class.getSimpleName()\n+                + \" e WHERE e.entity=:entity ORDER BY e.creation DESC\", ConnInstanceHistoryConf.class);\n+        query.setParameter(\"entity\", entity);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public ConnInstanceHistoryConf save(final ConnInstanceHistoryConf conf) {\n+        return entityManager().merge(conf);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        ConnInstanceHistoryConf conf = find(key);\n+        if (conf == null) {\n+            return;\n+        }\n+\n+        entityManager().remove(conf);\n+    }\n+\n+    @Override\n+    public void deleteByEntity(final ConnInstance entity) {\n+        Query query = entityManager().createQuery(\n+                \"DELETE FROM \" + JPAConnInstanceHistoryConf.class.getSimpleName() + \" e WHERE e.entity=:entity\");\n+        query.setParameter(\"entity\", entity);\n+        query.executeUpdate();\n+    }\n+\n+}"},{"sha":"c49bd5ab5f5a555a10584aaff3bdf882e3a5ac65","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -76,6 +77,8 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem\n \n     private RealmDAO realmDAO;\n \n+    private ExternalResourceHistoryConfDAO externalResourceHistoryConfDAO;\n+\n     private TaskDAO taskDAO() {\n         synchronized (this) {\n             if (taskDAO == null) {\n@@ -139,6 +142,16 @@ private RealmDAO realmDAO() {\n         return realmDAO;\n     }\n \n+    private ExternalResourceHistoryConfDAO externalResourceHistoryConfDAO() {\n+        synchronized (this) {\n+            if (externalResourceHistoryConfDAO == null) {\n+                externalResourceHistoryConfDAO = ApplicationContextProvider.getApplicationContext().\n+                        getBean(ExternalResourceHistoryConfDAO.class);\n+            }\n+        }\n+        return externalResourceHistoryConfDAO;\n+    }\n+\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n@@ -286,6 +299,8 @@ public void delete(final String name) {\n             }\n         }\n \n+        externalResourceHistoryConfDAO().deleteByEntity(resource);\n+\n         if (resource.getConnector() != null && resource.getConnector().getResources() != null\n                 && !resource.getConnector().getResources().isEmpty()) {\n "},{"sha":"ba43355de5b4068fe8426c521541a39ed81c734e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceHistoryConfDAO.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceHistoryConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceHistoryConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceHistoryConfDAO.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAExternalResourceHistoryConfDAO\n+        extends AbstractDAO<ExternalResourceHistoryConf> implements ExternalResourceHistoryConfDAO {\n+\n+    @Override\n+    public ExternalResourceHistoryConf find(final String key) {\n+        return entityManager().find(JPAExternalResourceHistoryConf.class, key);\n+    }\n+\n+    @Override\n+    public List<ExternalResourceHistoryConf> findByEntity(final ExternalResource entity) {\n+        TypedQuery<ExternalResourceHistoryConf> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAExternalResourceHistoryConf.class.getSimpleName()\n+                + \" e WHERE e.entity=:entity ORDER BY e.creation DESC\", ExternalResourceHistoryConf.class);\n+        query.setParameter(\"entity\", entity);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public ExternalResourceHistoryConf save(final ExternalResourceHistoryConf conf) {\n+        return entityManager().merge(conf);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        ExternalResourceHistoryConf conf = find(key);\n+        if (conf == null) {\n+            return;\n+        }\n+\n+        entityManager().remove(conf);\n+    }\n+\n+    @Override\n+    public void deleteByEntity(final ExternalResource entity) {\n+        Query query = entityManager().createQuery(\n+                \"DELETE FROM \" + JPAExternalResourceHistoryConf.class.getSimpleName() + \" e WHERE e.entity=:entity\");\n+        query.setParameter(\"entity\", entity);\n+        query.executeUpdate();\n+    }\n+\n+}"},{"sha":"9ee2c657162fcd92c150d4e7ff96573cc5fb82c9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractHistoryConf.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Lob;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.HistoryConf;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@MappedSuperclass\n+public abstract class AbstractHistoryConf<E extends Entity, T extends EntityTO>\n+        extends AbstractGeneratedKeyEntity implements HistoryConf<E, T> {\n+\n+    private static final long serialVersionUID = -7210303753586235180L;\n+\n+    @Column(nullable = false)\n+    private String creator;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date creation;\n+\n+    @Lob\n+    protected String conf;\n+\n+    @Override\n+    public String getCreator() {\n+        return creator;\n+    }\n+\n+    @Override\n+    public void setCreator(final String creator) {\n+        this.creator = creator;\n+    }\n+\n+    @Override\n+    public Date getCreation() {\n+        return creation == null\n+                ? null\n+                : new Date(creation.getTime());\n+    }\n+\n+    @Override\n+    public void setCreation(final Date creation) {\n+        this.creation = creation == null\n+                ? null\n+                : new Date(creation.getTime());\n+    }\n+\n+    @Override\n+    public void setConf(final T conf) {\n+        this.conf = POJOHelper.serialize(conf);\n+    }\n+\n+}"},{"sha":"9001676e3d30f4857221dd08d637b995b5d5c359","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstanceHistoryConf.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstanceHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstanceHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstanceHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAConnInstanceHistoryConf.TABLE)\n+public class JPAConnInstanceHistoryConf\n+        extends AbstractHistoryConf<ConnInstance, ConnInstanceTO> implements ConnInstanceHistoryConf {\n+\n+    private static final long serialVersionUID = -4152915369607435186L;\n+\n+    public static final String TABLE = \"ConnInstanceHistoryConf\";\n+\n+    @OneToOne\n+    private JPAConnInstance entity;\n+\n+    @Override\n+    public ConnInstance getEntity() {\n+        return entity;\n+    }\n+\n+    @Override\n+    public void setEntity(final ConnInstance entity) {\n+        checkType(entity, JPAConnInstance.class);\n+        this.entity = (JPAConnInstance) entity;\n+    }\n+\n+    @Override\n+    public ConnInstanceTO getConf() {\n+        return StringUtils.isBlank(conf)\n+                ? null\n+                : POJOHelper.deserialize(conf, ConnInstanceTO.class);\n+    }\n+}"},{"sha":"88f4e5a422d0a03e132a4119ff4c2533ad863fc6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n@@ -125,6 +126,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnit;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResourceHistoryConf;\n \n @Component\n public class JPAEntityFactory implements EntityFactory {\n@@ -184,12 +187,16 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPANotification();\n         } else if (reference.equals(ExternalResource.class)) {\n             result = (E) new JPAExternalResource();\n+        } else if (reference.equals(ExternalResourceHistoryConf.class)) {\n+            result = (E) new JPAExternalResourceHistoryConf();\n         } else if (reference.equals(Provision.class)) {\n             result = (E) new JPAProvision();\n         } else if (reference.equals(OrgUnit.class)) {\n             result = (E) new JPAOrgUnit();\n         } else if (reference.equals(ConnInstance.class)) {\n             result = (E) new JPAConnInstance();\n+        } else if (reference.equals(ConnInstanceHistoryConf.class)) {\n+            result = (E) new JPAConnInstanceHistoryConf();\n         } else if (reference.equals(PlainSchema.class)) {\n             result = (E) new JPAPlainSchema();\n         } else if (reference.equals(APlainAttr.class)) {"},{"sha":"31fa7265de568ab2353c663d2deb44fb574e0f1b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResourceHistoryConf.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResourceHistoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResourceHistoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResourceHistoryConf.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.resource;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractHistoryConf;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAExternalResourceHistoryConf.TABLE)\n+public class JPAExternalResourceHistoryConf\n+        extends AbstractHistoryConf<ExternalResource, ResourceTO> implements ExternalResourceHistoryConf {\n+\n+    public static final String TABLE = \"ExternalResourceHistoryConf\";\n+\n+    private static final long serialVersionUID = 4994551965604592529L;\n+\n+    @OneToOne\n+    private JPAExternalResource entity;\n+\n+    @Override\n+    public ExternalResource getEntity() {\n+        return entity;\n+    }\n+\n+    @Override\n+    public void setEntity(final ExternalResource entity) {\n+        checkType(entity, JPAExternalResource.class);\n+        this.entity = (JPAExternalResource) entity;\n+    }\n+\n+    @Override\n+    public ResourceTO getConf() {\n+        return StringUtils.isBlank(conf)\n+                ? null\n+                : POJOHelper.deserialize(conf, ResourceTO.class);\n+    }\n+}"},{"sha":"9d425356b683c8eac74bd092e9353274fbc4c31e","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -152,6 +152,23 @@ under the License.\n   <CPlainAttrValue id=\"447e2456-3ff5-41bc-8ff1-cbb0567546cb\"\n                    attribute_id=\"cfec3140-562d-459c-ac6a-e3e10758661d\" longValue=\"120\"/>\n   \n+  <!--  Connector and Resource configuration history -->                   \n+  <SyncopeSchema id=\"connector.conf.history.size\"/>\n+  <PlainSchema id=\"connector.conf.history.size\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"ae36c6ab-0f39-40d7-b6e6-3b8394547c9c\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"connector.conf.history.size\"/>\n+  <CPlainAttrValue id=\"4989ce5d-7b42-4a5c-b725-54286888df10\"\n+                   attribute_id=\"ae36c6ab-0f39-40d7-b6e6-3b8394547c9c\" longValue=\"10\"/>\n+  \n+  <SyncopeSchema id=\"resource.conf.history.size\"/>\n+  <PlainSchema id=\"resource.conf.history.size\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"ae7ae53a-74cf-48b0-9a57-6d2c94928e60\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"resource.conf.history.size\"/>\n+  <CPlainAttrValue id=\"059ac3e1-687f-4dd9-a28b-a23f8b436f31\"\n+                   attribute_id=\"ae7ae53a-74cf-48b0-9a57-6d2c94928e60\" longValue=\"10\"/>\n+\n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n   <AnyType_AnyTypeClass anyType_id=\"USER\" anyTypeClass_id=\"BaseUser\"/>"},{"sha":"ffe1edcac6645ee04e9de944a598b3ee27b92f1d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -47,7 +47,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n-        assertEquals(41, schemas.size());\n+        assertEquals(43, schemas.size());\n     }\n \n     @Test"},{"sha":"43c0b65ba5622e9200cf658f53468a8ed27ba21f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ConnInstanceHistoryConfTest.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FConnInstanceHistoryConfTest.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ConnInstanceHistoryConfTest extends AbstractTest {\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Autowired\n+    private ConnInstanceHistoryConfDAO connInstanceHistoryConfDAO;\n+\n+    @Test\n+    public void createDelete() {\n+        ConnInstance ldapConnector = connInstanceDAO.find(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n+        assertNotNull(ldapConnector);\n+\n+        ConnInstanceHistoryConf ldapHistory = entityFactory.newEntity(ConnInstanceHistoryConf.class);\n+        ldapHistory.setCreation(new Date());\n+        ldapHistory.setCreator(\"me\");\n+        ldapHistory.setEntity(ldapConnector);\n+        ldapHistory.setConf(new ConnInstanceTO());\n+\n+        ldapHistory = connInstanceHistoryConfDAO.save(ldapHistory);\n+        assertNotNull(ldapHistory.getKey());\n+\n+        connInstanceHistoryConfDAO.flush();\n+\n+        List<ConnInstanceHistoryConf> history = connInstanceHistoryConfDAO.findByEntity(ldapConnector);\n+        assertEquals(1, history.size());\n+        assertEquals(ldapHistory, history.get(0));\n+\n+        connInstanceHistoryConfDAO.delete(ldapHistory.getKey());\n+\n+        connInstanceHistoryConfDAO.flush();\n+\n+        assertNull(connInstanceHistoryConfDAO.find(ldapHistory.getKey()));\n+        assertTrue(connInstanceHistoryConfDAO.findByEntity(ldapConnector).isEmpty());\n+    }\n+}"},{"sha":"2bc36a66acd9f8755a5e9c90407fdd0cdaf620e9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceHistoryConfTest.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceHistoryConfTest.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ResourceHistoryConfTest extends AbstractTest {\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ExternalResourceHistoryConfDAO resourceHistoryConfDAO;\n+\n+    @Test\n+    public void createDelete() {\n+        ExternalResource ldapResource = resourceDAO.find(\"resource-ldap\");\n+        assertNotNull(ldapResource);\n+\n+        ExternalResourceHistoryConf ldapHistory = entityFactory.newEntity(ExternalResourceHistoryConf.class);\n+        ldapHistory.setCreation(new Date());\n+        ldapHistory.setCreator(\"me\");\n+        ldapHistory.setEntity(ldapResource);\n+        ldapHistory.setConf(new ResourceTO());\n+\n+        ldapHistory = resourceHistoryConfDAO.save(ldapHistory);\n+        assertNotNull(ldapHistory.getKey());\n+\n+        resourceHistoryConfDAO.flush();\n+\n+        List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(ldapResource);\n+        assertEquals(1, history.size());\n+        assertEquals(ldapHistory, history.get(0));\n+\n+        resourceHistoryConfDAO.delete(ldapHistory.getKey());\n+\n+        resourceHistoryConfDAO.flush();\n+\n+        assertNull(resourceHistoryConfDAO.find(ldapHistory.getKey()));\n+        assertTrue(resourceHistoryConfDAO.findByEntity(ldapResource).isEmpty());\n+    }\n+}"},{"sha":"83bacf057527dac91f92e1fc22500509695a96e8","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -151,7 +151,24 @@ under the License.\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"jwt.lifetime.minutes\"/>\n   <CPlainAttrValue id=\"447e2456-3ff5-41bc-8ff1-cbb0567546cb\"\n                    attribute_id=\"cfec3140-562d-459c-ac6a-e3e10758661d\" longValue=\"120\"/>\n-\n+    \n+  <!--  Connector and Resource configuration history -->                   \n+  <SyncopeSchema id=\"connector.conf.history.size\"/>\n+  <PlainSchema id=\"connector.conf.history.size\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"ae36c6ab-0f39-40d7-b6e6-3b8394547c9c\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"connector.conf.history.size\"/>\n+  <CPlainAttrValue id=\"4989ce5d-7b42-4a5c-b725-54286888df10\"\n+                   attribute_id=\"ae36c6ab-0f39-40d7-b6e6-3b8394547c9c\" longValue=\"10\"/>\n+  \n+  <SyncopeSchema id=\"resource.conf.history.size\"/>\n+  <PlainSchema id=\"resource.conf.history.size\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"ae7ae53a-74cf-48b0-9a57-6d2c94928e60\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"resource.conf.history.size\"/>\n+  <CPlainAttrValue id=\"059ac3e1-687f-4dd9-a28b-a23f8b436f31\"\n+                   attribute_id=\"ae7ae53a-74cf-48b0-9a57-6d2c94928e60\" longValue=\"10\"/>\n+  \n   <!-- sample policies -->\n   <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\"\n               specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>"},{"sha":"ae7074fb39de3dc4cb8474f7381b9d9fe5fe07a3","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ConnInstanceDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConnInstanceDataBinder.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -31,6 +31,6 @@ public interface ConnInstanceDataBinder {\n \n     ConnInstanceTO getConnInstanceTO(ConnInstance connInstance);\n \n-    ConnInstance update(String key, ConnInstanceTO connInstanceTO);\n+    ConnInstance update(ConnInstanceTO connInstanceTO);\n \n }"},{"sha":"ba4d62d51efdb16e831d3b7d714310c25ab9d211","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":43,"deletions":10,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -22,6 +22,8 @@\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -31,15 +33,20 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.utils.ConnPoolConfUtils;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.apache.syncope.core.spring.BeanUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -55,6 +62,12 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n+    @Autowired\n+    private ConnInstanceHistoryConfDAO connInstanceHistoryConfDAO;\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -102,14 +115,31 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n     }\n \n     @Override\n-    public ConnInstance update(final String key, final ConnInstanceTO connInstanceTO) {\n-        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n-\n-        if (key == null) {\n-            sce.getElements().add(\"connector key\");\n+    public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n+        if (connInstance == null) {\n+            throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n+        }\n+\n+        // 1. save the current configuration, before update\n+        ConnInstanceHistoryConf connInstanceHistoryConf = entityFactory.newEntity(ConnInstanceHistoryConf.class);\n+        connInstanceHistoryConf.setCreator(AuthContextUtils.getUsername());\n+        connInstanceHistoryConf.setCreation(new Date());\n+        connInstanceHistoryConf.setEntity(connInstance);\n+        connInstanceHistoryConf.setConf(getConnInstanceTO(connInstance));\n+        connInstanceHistoryConfDAO.save(connInstanceHistoryConf);\n+\n+        // 2. ensure the maximum history size is not exceeded\n+        List<ConnInstanceHistoryConf> history = connInstanceHistoryConfDAO.findByEntity(connInstance);\n+        long maxHistorySize = confDAO.find(\"connector.conf.history.size\", \"10\").getValues().get(0).getLongValue();\n+        if (maxHistorySize < history.size()) {\n+            // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n+            for (int i = 0; i < history.size() - maxHistorySize; i++) {\n+                connInstanceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n+            }\n         }\n \n-        ConnInstance connInstance = connInstanceDAO.find(key);\n+        // 3. actual update\n         connInstance.getCapabilities().clear();\n         connInstance.getCapabilities().addAll(connInstanceTO.getCapabilities());\n \n@@ -148,8 +178,12 @@ public ConnInstance update(final String key, final ConnInstanceTO connInstanceTO\n                     ConnPoolConfUtils.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n         }\n \n-        if (!sce.isEmpty()) {\n-            throw sce;\n+        try {\n+            connInstance = connInstanceDAO.save(connInstance);\n+        } catch (Exception e) {\n+            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n+            ex.getElements().add(e.getMessage());\n+            throw ex;\n         }\n \n         return connInstance;\n@@ -188,8 +222,7 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n         connInstanceTO.setLocation(info.getLeft().toASCIIString());\n         // refresh stored properties in the given connInstance with direct information from underlying connector\n-        ConfigurationProperties properties =\n-                connIdBundleManager.getConfigurationProperties(info.getRight());\n+        ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n         for (final String propName : properties.getPropertyNames()) {\n             ConnConfPropSchema schema = build(properties.getProperty(propName));\n "},{"sha":"e6293cf220c93f75c2df9b9d909d7a070edff79c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":31,"deletions":2,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -18,8 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IteratorUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -46,19 +48,23 @@\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResourceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -87,6 +93,12 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n+    @Autowired\n+    private ExternalResourceHistoryConfDAO resourceHistoryConfDAO;\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -100,8 +112,25 @@ public ExternalResource create(final ResourceTO resourceTO) {\n \n     @Override\n     public ExternalResource update(final ExternalResource resource, final ResourceTO resourceTO) {\n-        if (resourceTO == null) {\n-            return null;\n+        if (resource.getKey() != null) {\n+            // 1. save the current configuration, before update\n+            ExternalResourceHistoryConf resourceHistoryConf =\n+                    entityFactory.newEntity(ExternalResourceHistoryConf.class);\n+            resourceHistoryConf.setCreator(AuthContextUtils.getUsername());\n+            resourceHistoryConf.setCreation(new Date());\n+            resourceHistoryConf.setEntity(resource);\n+            resourceHistoryConf.setConf(getResourceTO(resource));\n+            resourceHistoryConfDAO.save(resourceHistoryConf);\n+\n+            // 2. ensure the maximum history size is not exceeded\n+            List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(resource);\n+            long maxHistorySize = confDAO.find(\"resource.conf.history.size\", \"10\").getValues().get(0).getLongValue();\n+            if (maxHistorySize < history.size()) {\n+            // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n+                for (int i = 0; i < history.size() - maxHistorySize; i++) {\n+                    resourceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n+                }\n+            }\n         }\n \n         resource.setKey(resourceTO.getKey());"},{"sha":"2635413c1ecb0c2b10ef10d52a8f07be19b44a59","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -153,7 +153,7 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     protected TaskDataBinder taskDataBinder;\n \n     @Autowired\n-    private TaskUtilsFactory taskUtilsFactory;\n+    protected TaskUtilsFactory taskUtilsFactory;\n \n     @Autowired\n     protected EntityFactory entityFactory;\n@@ -365,6 +365,8 @@ protected Uid delete(\n     protected TaskExec execute(final PropagationTask task, final PropagationReporter reporter) {\n         List<PropagationActions> actions = getPropagationActions(task.getResource());\n \n+        String resource = task.getResource().getKey();\n+\n         Date start = new Date();\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n@@ -384,7 +386,6 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         Uid uid = null;\n         Connector connector = null;\n         Result result;\n-        String resource = task.getResource().getKey();\n         try {\n             provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName()));\n             orgUnit = task.getResource().getOrgUnit();\n@@ -507,10 +508,9 @@ protected TaskExec execute(final PropagationTask task, final PropagationReporter\n         for (PropagationActions action : actions) {\n             action.after(task, execution, afterObj);\n         }\n-        \n+\n         String anyTypeKind = task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase();\n         String operation = task.getOperation().name().toLowerCase();\n-        // SYNCOPE-1139, check if notification or audit are requested and use TOs instead of persistence objects\n         boolean notificationsAvailable = notificationManager.notificationsAvailable(\n                 AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource, operation);\n         boolean auditRequested = auditManager.auditRequested(AuditElements.EventCategoryType.PROPAGATION, anyTypeKind,"},{"sha":"3424c5ea4fc5d2ea82522146e408c4b1df69642b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorHistoryServiceImpl.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorHistoryServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorHistoryServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorHistoryServiceImpl.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n+import org.apache.syncope.common.rest.api.service.ConnectorHistoryService;\n+import org.apache.syncope.core.logic.ConnectorHistoryLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ConnectorHistoryServiceImpl extends AbstractServiceImpl implements ConnectorHistoryService {\n+\n+    @Autowired\n+    private ConnectorHistoryLogic logic;\n+\n+    @Override\n+    public List<ConnInstanceHistoryConfTO> list(final String connectorKey) {\n+        return logic.list(connectorKey);\n+    }\n+\n+    @Override\n+    public void restore(final String key) {\n+        logic.restore(key);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"b69b5bee7fb74d3ac3a030b30a223d133e7d86bd","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceHistoryServiceImpl.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceHistoryServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceHistoryServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceHistoryServiceImpl.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n+import org.apache.syncope.common.rest.api.service.ResourceHistoryService;\n+import org.apache.syncope.core.logic.ResourceHistoryLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ResourceHistoryServiceImpl extends AbstractServiceImpl implements ResourceHistoryService {\n+\n+    @Autowired\n+    private ResourceHistoryLogic logic;\n+\n+    @Override\n+    public List<ResourceHistoryConfTO> list(final String resourceKey) {\n+        return logic.list(resourceKey);\n+    }\n+\n+    @Override\n+    public void restore(final String key) {\n+        logic.restore(key);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"880ed66efb84048f926954995be1702fb2a3bca0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -25,7 +25,6 @@\n import java.io.InputStream;\n import java.net.URI;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n import javax.naming.Context;\n@@ -61,7 +60,6 @@\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -105,6 +103,9 @@\n import org.springframework.jdbc.core.JdbcTemplate;\n \n import com.google.common.net.HttpHeaders;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.rest.api.service.ConnectorHistoryService;\n+import org.apache.syncope.common.rest.api.service.ResourceHistoryService;\n \n @FixMethodOrder(MethodSorters.JVM)\n public abstract class AbstractITCase {\n@@ -209,10 +210,14 @@ public abstract class AbstractITCase {\n \n     protected static ResourceService resourceService;\n \n+    protected static ResourceHistoryService resourceHistoryService;\n+\n     protected static ConfigurationService configurationService;\n \n     protected static ConnectorService connectorService;\n \n+    protected static ConnectorHistoryService connectorHistoryService;\n+\n     protected static LoggerService loggerService;\n \n     protected static ReportTemplateService reportTemplateService;\n@@ -289,8 +294,10 @@ public static void restSetup() {\n         userWorkflowService = adminClient.getService(UserWorkflowService.class);\n         groupService = adminClient.getService(GroupService.class);\n         resourceService = adminClient.getService(ResourceService.class);\n+        resourceHistoryService = adminClient.getService(ResourceHistoryService.class);\n         configurationService = adminClient.getService(ConfigurationService.class);\n         connectorService = adminClient.getService(ConnectorService.class);\n+        connectorHistoryService = adminClient.getService(ConnectorHistoryService.class);\n         loggerService = adminClient.getService(LoggerService.class);\n         reportTemplateService = adminClient.getService(ReportTemplateService.class);\n         reportService = adminClient.getService(ReportService.class);\n@@ -507,18 +514,17 @@ protected ResourceTO createResource(final ResourceTO resourceTO) {\n     protected InitialDirContext getLdapResourceDirContext(final String bindDn, final String bindPwd)\n             throws NamingException {\n         ResourceTO ldapRes = resourceService.read(RESOURCE_NAME_LDAP);\n-        final Map<String, ConnConfProperty> ldapConnConf =\n-                connectorService.read(ldapRes.getConnector(), Locale.ENGLISH.getLanguage()).getConfMap();\n+        ConnInstanceTO ldapConn = connectorService.read(ldapRes.getConnector(), Locale.ENGLISH.getLanguage());\n \n         Properties env = new Properties();\n         env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConnConf.get(\"host\").getValues().get(0)\n-                + \":\" + ldapConnConf.get(\"port\").getValues().get(0) + \"/\");\n+        env.put(Context.PROVIDER_URL, \"ldap://\" + ldapConn.getConf(\"host\").getValues().get(0)\n+                + \":\" + ldapConn.getConf(\"port\").getValues().get(0) + \"/\");\n         env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n         env.put(Context.SECURITY_PRINCIPAL,\n-                bindDn == null ? ldapConnConf.get(\"principal\").getValues().get(0) : bindDn);\n+                bindDn == null ? ldapConn.getConf(\"principal\").getValues().get(0) : bindDn);\n         env.put(Context.SECURITY_CREDENTIALS,\n-                bindPwd == null ? ldapConnConf.get(\"credentials\").getValues().get(0) : bindPwd);\n+                bindPwd == null ? ldapConn.getConf(\"credentials\").getValues().get(0) : bindPwd);\n \n         return new InitialDirContext(env);\n     }"},{"sha":"c5190b3b65cad65193a8114b713256172df6b9c9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":134,"deletions":102,"changes":236,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -20,31 +20,33 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n-import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n@@ -268,97 +270,9 @@ public void update() {\n         assertEquals(Integer.valueOf(20), actual.getConnRequestTimeout());\n     }\n \n-    private List<ResourceTO> filter(final List<ResourceTO> input, final String connectorKey) {\n-        List<ResourceTO> result = new ArrayList<>();\n-\n-        for (ResourceTO resource : input) {\n-            if (connectorKey.equals(resource.getConnector())) {\n-                result.add(resource);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     @Test\n-    public void issueSYNCOPE10() {\n-        // ----------------------------------\n-        // Copy resource and connector in order to create new objects.\n-        // ----------------------------------\n-        // Retrieve a connector instance template.\n-        ConnInstanceTO connInstanceTO = connectorService.read(\n-                \"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\", Locale.ENGLISH.getLanguage());\n-        assertNotNull(connInstanceTO);\n-\n-        // check for resource\n-        List<ResourceTO> resources =\n-                filter(resourceService.list(), \"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\");\n-        assertEquals(4, resources.size());\n-\n-        // Retrieve a resource TO template.\n-        ResourceTO resourceTO = resources.get(0);\n-\n-        // Make it new.\n-        resourceTO.setKey(\"newAbout103\" + getUUIDString());\n-\n-        // Make it new.\n-        connInstanceTO.setKey(null);\n-        connInstanceTO.setDisplayName(\"newDisplayName\" + getUUIDString());\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // Create a new connector instance.\n-        // ----------------------------------\n-        Response response = connectorService.create(connInstanceTO);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n-        }\n-\n-        connInstanceTO = getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n-        assertNotNull(connInstanceTO);\n-        assertFalse(connInstanceTO.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n-\n-        String connKey = connInstanceTO.getKey();\n-\n-        // Link resourceTO to the new connector instance.\n-        resourceTO.setConnector(connKey);\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // Check for connector instance update after resource creation.\n-        // ----------------------------------\n-        response = resourceService.create(resourceTO);\n-        resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n-\n-        assertNotNull(resourceTO);\n-\n-        resources = filter(resourceService.list(), connKey);\n-        assertEquals(1, resources.size());\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // Check for spring bean.\n-        // ----------------------------------\n-        ConnInstanceTO connInstanceBean = connectorService.readByResource(\n-                resourceTO.getKey(), Locale.ENGLISH.getLanguage());\n-        assertNotNull(connInstanceBean);\n-        assertFalse(connInstanceBean.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n-        // ----------------------------------\n-\n-        // ----------------------------------\n-        // Check for spring bean update after connector instance update.\n-        // ----------------------------------\n-        connInstanceTO.getCapabilities().add(ConnectorCapability.AUTHENTICATE);\n-\n-        connectorService.update(connInstanceTO);\n-        ConnInstanceTO actual = connectorService.read(connInstanceTO.getKey(), Locale.ENGLISH.getLanguage());\n-        assertNotNull(actual);\n-        assertTrue(connInstanceTO.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n-\n-        // check for spring bean update\n-        connInstanceBean = connectorService.readByResource(resourceTO.getKey(), Locale.ENGLISH.getLanguage());\n-        assertTrue(connInstanceBean.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n-        // ----------------------------------\n+    public void reload() {\n+        connectorService.reload();\n     }\n \n     @Test\n@@ -425,11 +339,9 @@ public void checkSelectedLanguage() {\n         // 1. Check Italian\n         List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(\"it\");\n \n-        Map<String, ConnConfProperty> instanceConfMap;\n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n             if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n-                instanceConfMap = instance.getConfMap();\n-                assertEquals(\"Utente\", instanceConfMap.get(\"user\").getSchema().getDisplayName());\n+                assertEquals(\"Utente\", instance.getConf(\"user\").getSchema().getDisplayName());\n             }\n         }\n \n@@ -438,8 +350,7 @@ public void checkSelectedLanguage() {\n \n         for (ConnInstanceTO instance : connectorInstanceTOs) {\n             if (\"net.tirasa.connid.bundles.db.table\".equals(instance.getBundleName())) {\n-                instanceConfMap = instance.getConfMap();\n-                assertEquals(\"User\", instanceConfMap.get(\"user\").getSchema().getDisplayName());\n+                assertEquals(\"User\", instance.getConf(\"user\").getSchema().getDisplayName());\n             }\n         }\n     }\n@@ -573,6 +484,132 @@ public String transform(final ConnIdObjectClassTO info) {\n         assertTrue(objectClasses.contains(ObjectClass.GROUP_NAME));\n     }\n \n+    @Test\n+    public void history() {\n+        List<ConnInstanceHistoryConfTO> history = connectorHistoryService.list(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n+        assertNotNull(history);\n+        int pre = history.size();\n+\n+        ConnInstanceTO ldapConn = connectorService.read(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\", null);\n+        String originalDisplayName = ldapConn.getDisplayName();\n+        Set<ConnectorCapability> originalCapabilities = new HashSet<>(ldapConn.getCapabilities());\n+        ConnConfProperty originalConfProp = SerializationUtils.clone(ldapConn.getConf(\"maintainPosixGroupMembership\"));\n+        assertEquals(1, originalConfProp.getValues().size());\n+        assertEquals(\"false\", originalConfProp.getValues().get(0));\n+\n+        ldapConn.setDisplayName(originalDisplayName + \" modified\");\n+        ldapConn.getCapabilities().clear();\n+        ldapConn.getConf(\"maintainPosixGroupMembership\").getValues().set(0, \"true\");\n+        connectorService.update(ldapConn);\n+\n+        ldapConn = connectorService.read(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\", null);\n+        assertNotEquals(originalDisplayName, ldapConn.getDisplayName());\n+        assertNotEquals(originalCapabilities, ldapConn.getCapabilities());\n+        assertNotEquals(originalConfProp, ldapConn.getConf(\"maintainPosixGroupMembership\"));\n+\n+        history = connectorHistoryService.list(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\");\n+        assertEquals(pre + 1, history.size());\n+\n+        connectorHistoryService.restore(history.get(0).getKey());\n+\n+        ldapConn = connectorService.read(\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\", null);\n+        assertEquals(originalDisplayName, ldapConn.getDisplayName());\n+        assertEquals(originalCapabilities, ldapConn.getCapabilities());\n+        assertEquals(originalConfProp, ldapConn.getConf(\"maintainPosixGroupMembership\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE10() {\n+        // ----------------------------------\n+        // Copy resource and connector in order to create new objects.\n+        // ----------------------------------\n+        // Retrieve a connector instance template.\n+        ConnInstanceTO connInstanceTO = connectorService.read(\n+                \"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\", Locale.ENGLISH.getLanguage());\n+        assertNotNull(connInstanceTO);\n+\n+        // check for resource\n+        Collection<ResourceTO> resources = CollectionUtils.select(resourceService.list(), new Predicate<ResourceTO>() {\n+\n+            @Override\n+            public boolean evaluate(final ResourceTO object) {\n+                return \"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\".equals(object.getConnector());\n+            }\n+        });\n+        assertEquals(4, resources.size());\n+\n+        // Retrieve a resource TO template.\n+        ResourceTO resourceTO = resources.iterator().next();\n+\n+        // Make it new.\n+        resourceTO.setKey(\"newAbout103\" + getUUIDString());\n+\n+        // Make it new.\n+        connInstanceTO.setKey(null);\n+        connInstanceTO.setDisplayName(\"newDisplayName\" + getUUIDString());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Create a new connector instance.\n+        // ----------------------------------\n+        Response response = connectorService.create(connInstanceTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n+        }\n+\n+        connInstanceTO = getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n+        assertNotNull(connInstanceTO);\n+        assertFalse(connInstanceTO.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n+\n+        final String connKey = connInstanceTO.getKey();\n+\n+        // Link resourceTO to the new connector instance.\n+        resourceTO.setConnector(connKey);\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for connector instance update after resource creation.\n+        // ----------------------------------\n+        response = resourceService.create(resourceTO);\n+        resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n+\n+        assertNotNull(resourceTO);\n+\n+        resources = CollectionUtils.select(resourceService.list(), new Predicate<ResourceTO>() {\n+\n+            @Override\n+            public boolean evaluate(final ResourceTO object) {\n+                return connKey.equals(object.getConnector());\n+            }\n+        });\n+        assertEquals(1, resources.size());\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for spring bean.\n+        // ----------------------------------\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(\n+                resourceTO.getKey(), Locale.ENGLISH.getLanguage());\n+        assertNotNull(connInstanceBean);\n+        assertFalse(connInstanceBean.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n+        // ----------------------------------\n+\n+        // ----------------------------------\n+        // Check for spring bean update after connector instance update.\n+        // ----------------------------------\n+        connInstanceTO.getCapabilities().add(ConnectorCapability.AUTHENTICATE);\n+\n+        connectorService.update(connInstanceTO);\n+        ConnInstanceTO actual = connectorService.read(connInstanceTO.getKey(), Locale.ENGLISH.getLanguage());\n+        assertNotNull(actual);\n+        assertTrue(connInstanceTO.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n+\n+        // check for spring bean update\n+        connInstanceBean = connectorService.readByResource(resourceTO.getKey(), Locale.ENGLISH.getLanguage());\n+        assertTrue(connInstanceBean.getCapabilities().contains(ConnectorCapability.AUTHENTICATE));\n+        // ----------------------------------\n+    }\n+\n     @Test\n     public void issueSYNCOPE112() {\n         // ----------------------------------------\n@@ -685,11 +722,6 @@ public void issueSYNCOPE112() {\n         }\n     }\n \n-    @Test\n-    public void reload() {\n-        connectorService.reload();\n-    }\n-\n     @Test\n     public void issueSYNCOPE605() {\n         ConnInstanceTO connectorInstanceTO = connectorService.read("},{"sha":"d1d85f807cecc41a8a62c4160cfd68ed3e2c9ee1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -563,7 +563,7 @@ public void syncTokenWithErrors() {\n         try {\n             connForTest.getCapabilities().add(ConnectorCapability.SYNC);\n \n-            ConnConfProperty changeLogColumn = connForTest.getConfMap().get(\"changeLogColumn\");\n+            ConnConfProperty changeLogColumn = connForTest.getConf(\"changeLogColumn\");\n             assertNotNull(changeLogColumn);\n             assertTrue(changeLogColumn.getValues().isEmpty());\n             changeLogColumn.getValues().add(\"lastModification\");\n@@ -953,7 +953,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             ResourceTO ldapResource = resourceService.read(RESOURCE_NAME_LDAP);\n             resourceConnector = connectorService.read(\n                     ldapResource.getConnector(), Locale.ENGLISH.getLanguage());\n-            property = resourceConnector.getConfMap().get(\"retrievePasswordsWithSearch\");\n+            property = resourceConnector.getConf(\"retrievePasswordsWithSearch\");\n             property.getValues().clear();\n             property.getValues().add(Boolean.TRUE);\n             connectorService.update(resourceConnector);"},{"sha":"751ce0e9af99cb272442f25b59597e5d4ed663e7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":63,"deletions":23,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7451efb6d274cc446da952d7b607357b0422f30f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=7451efb6d274cc446da952d7b607357b0422f30f","patch":"@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n@@ -35,6 +36,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -46,13 +48,15 @@\n import org.apache.syncope.common.lib.to.OrgUnitTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ResourceHistoryConfTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -497,29 +501,6 @@ public void read() {\n         assertFalse(provision.getMapping().getLinkingItems().isEmpty());\n     }\n \n-    @Test\n-    public void issueSYNCOPE323() {\n-        ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);\n-        assertNotNull(actual);\n-\n-        try {\n-            createResource(actual);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n-            assertEquals(ClientExceptionType.EntityExists, e.getType());\n-        }\n-\n-        actual.setKey(null);\n-        try {\n-            createResource(actual);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n-            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n-        }\n-    }\n-\n     @Test\n     public void anonymous() {\n         ResourceService unauthenticated = clientFactory.create().getService(ResourceService.class);\n@@ -592,6 +573,65 @@ public String transform(final ConnObjectTO input) {\n         }\n     }\n \n+    @Test\n+    public void history() {\n+        List<ResourceHistoryConfTO> history = resourceHistoryService.list(RESOURCE_NAME_LDAP);\n+        assertNotNull(history);\n+        int pre = history.size();\n+\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        TraceLevel originalTraceLevel = SerializationUtils.clone(ldap.getUpdateTraceLevel());\n+        assertEquals(TraceLevel.ALL, originalTraceLevel);\n+        ProvisionTO originalProvision = SerializationUtils.clone(ldap.getProvision(AnyTypeKind.USER.name()));\n+        assertEquals(ObjectClass.ACCOUNT_NAME, originalProvision.getObjectClass());\n+        boolean originalFlag = ldap.isRandomPwdIfNotProvided();\n+        assertTrue(originalFlag);\n+\n+        ldap.setUpdateTraceLevel(TraceLevel.FAILURES);\n+        ldap.getProvision(AnyTypeKind.USER.name()).setObjectClass(\"ANOTHER\");\n+        ldap.setRandomPwdIfNotProvided(false);\n+        resourceService.update(ldap);\n+\n+        ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotEquals(originalTraceLevel, ldap.getUpdateTraceLevel());\n+        assertNotEquals(\n+                originalProvision.getObjectClass(), ldap.getProvision(AnyTypeKind.USER.name()).getObjectClass());\n+        assertNotEquals(originalFlag, ldap.isRandomPwdIfNotProvided());\n+\n+        history = resourceHistoryService.list(RESOURCE_NAME_LDAP);\n+        assertEquals(pre + 1, history.size());\n+\n+        resourceHistoryService.restore(history.get(0).getKey());\n+\n+        ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertEquals(originalTraceLevel, ldap.getUpdateTraceLevel());\n+        assertEquals(originalProvision.getObjectClass(), ldap.getProvision(AnyTypeKind.USER.name()).getObjectClass());\n+        assertEquals(originalFlag, ldap.isRandomPwdIfNotProvided());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE323() {\n+        ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(actual);\n+\n+        try {\n+            createResource(actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.CONFLICT, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n+        }\n+\n+        actual.setKey(null);\n+        try {\n+            createResource(actual);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(Response.Status.BAD_REQUEST, e.getType().getResponseStatus());\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE360() {\n         final String name = \"SYNCOPE360-\" + getUUIDString();"}]}