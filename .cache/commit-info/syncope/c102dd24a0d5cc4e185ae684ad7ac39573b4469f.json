{"sha":"c102dd24a0d5cc4e185ae684ad7ac39573b4469f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxMDJkZDI0YTBkNWNjNGUxODVhZTY4NGFkN2FjMzk1NzNiNDQ2OWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-25T13:37:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-02-26T11:08:17Z"},"message":"[SYNCOPE-744][SYNCOPE-750] Further improvements for jobs and executions widget","tree":{"sha":"9e6ce431579ca30449e344176e4211068c9eb649","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9e6ce431579ca30449e344176e4211068c9eb649"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c102dd24a0d5cc4e185ae684ad7ac39573b4469f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c102dd24a0d5cc4e185ae684ad7ac39573b4469f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c102dd24a0d5cc4e185ae684ad7ac39573b4469f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c2226917062427c11c6eac1719e33794db640557","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c2226917062427c11c6eac1719e33794db640557","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c2226917062427c11c6eac1719e33794db640557"}],"stats":{"total":817,"additions":339,"deletions":478},"files":[{"sha":"a7234b1333fc8dbf26c46069fe892f618e05e5cf","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportResultManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n \n public class ReportResultManager extends CommonsResultManager {\n@@ -64,20 +64,20 @@ private void printReportletConf(final AbstractReportletConf reportletConf) {\n         }\n     }\n \n-    public void printReportExecutions(final List<ReportExecTO> reportExecTOs) {\n-        for (final ReportExecTO reportExecTO : reportExecTOs) {\n+    public void printReportExecutions(final List<ExecTO> reportExecTOs) {\n+        for (final ExecTO reportExecTO : reportExecTOs) {\n             System.out.println(\"       REPORT EXEC ID: \" + reportExecTO.getKey());\n             System.out.println(\"       status: \" + reportExecTO.getStatus());\n             System.out.println(\"       message: \" + reportExecTO.getMessage());\n             System.out.println(\"       start date: \" + reportExecTO.getStart());\n             System.out.println(\"       end date: \" + reportExecTO.getEnd());\n-            System.out.println(\"       report id: \" + reportExecTO.getReport());\n+            System.out.println(\"       report: \" + reportExecTO.getReference());\n         }\n     }\n \n     public void printJobs(final List<JobTO> jobTOs) {\n         for (final JobTO jobTO : jobTOs) {\n-            System.out.println(\"       REPORT ID/NAME: \" + jobTO.getReferenceKey() + \"/\" + jobTO.getReferenceName());\n+            System.out.println(\"       REPORT: \" + jobTO.getReference());\n             System.out.println(\"       status: \" + jobTO.getStatus());\n             System.out.println(\"       start date: \" + jobTO.getStart());\n             System.out.println(\"       running: \" + jobTO.isRunning());"},{"sha":"1072deb4f28582c701f76b696733cc321e9e582f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.TaskType;\n \n public class TaskResultManager extends CommonsResultManager {\n@@ -195,11 +195,11 @@ private void printTemplates(final Map<String, AnyTO> templates) {\n         }\n     }\n \n-    public void printTaskExecTOs(final List<TaskExecTO> taskExecTOs) {\n-        for (final TaskExecTO taskExecTO : taskExecTOs) {\n+    public void printTaskExecTOs(final List<ExecTO> taskExecTOs) {\n+        for (final ExecTO taskExecTO : taskExecTOs) {\n             System.out.println(\"     EXECUTIONS: \");\n             System.out.println(\"     - task execution key: \" + taskExecTO.getKey());\n-            System.out.println(\"       task: \" + taskExecTO.getTask());\n+            System.out.println(\"       task: \" + taskExecTO.getReference());\n             System.out.println(\"       message: \");\n             System.out.println(\"       ###############     <BEGIN MESSAGE>     ###############\");\n             System.out.println(\"       message: \" + taskExecTO.getMessage());\n@@ -213,7 +213,7 @@ public void printTaskExecTOs(final List<TaskExecTO> taskExecTOs) {\n \n     public void printJobs(final List<JobTO> jobTOs) {\n         for (final JobTO jobTO : jobTOs) {\n-            System.out.println(\"       TASK ID/NAME: \" + jobTO.getReferenceKey() + \"/\" + jobTO.getReferenceName());\n+            System.out.println(\"       TASK: \" + jobTO.getReference());\n             System.out.println(\"       status: \" + jobTO.getStatus());\n             System.out.println(\"       start date: \" + jobTO.getStart());\n             System.out.println(\"       running: \" + jobTO.isRunning());"},{"sha":"a1651ca0fe411f1f890618bd735240f783660040","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -21,8 +21,8 @@\n import java.util.List;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -56,7 +56,7 @@ public void deleteExecution(final String executionKey) {\n         taskService.deleteExecution(Long.valueOf(executionKey));\n     }\n \n-    public TaskExecTO execute(final String executionKey, final boolean dryRun) {\n+    public ExecTO execute(final String executionKey, final boolean dryRun) {\n         return taskService.execute(new ExecuteQuery.Builder().key(Long.valueOf(executionKey)).dryRun(dryRun).build());\n     }\n }"},{"sha":"f08e1cdc6ee4383356bc3a0cf4771d349cd05954","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -30,6 +30,7 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -206,9 +207,9 @@ public <T> void resetClient(final Class<T> service) {\n         WebClient.client(serviceInstance).reset();\n     }\n \n-    public DateFormat getDateFormat() {\n+    public FastDateFormat getDateFormat() {\n         Locale locale = getLocale() == null ? Locale.ENGLISH : getLocale();\n-        return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n+        return FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n     }\n \n     public NotificationPanel getNotificationPanel() {"},{"sha":"246370724addab862dca52d5f850750868bd2fa1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSearchResultPanel.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -76,6 +76,8 @@\n \n     private boolean checkBoxEnabled;\n \n+    private boolean showPaginator;\n+\n     /**\n      * Result table.\n      */\n@@ -127,6 +129,7 @@ protected AbstractSearchResultPanel(final String id, final Builder<T, W, E> buil\n \n         this.filtered = builder.filtered;\n         this.checkBoxEnabled = builder.checkBoxEnabled;\n+        this.showPaginator = builder.showPaginator;\n \n         this.restClient = builder.restClient;\n \n@@ -158,6 +161,7 @@ protected void initResultTable() {\n         // ---------------------------\n         final Form<?> paginatorForm = new Form<>(\"paginator\");\n         paginatorForm.setOutputMarkupPlaceholderTag(true);\n+        paginatorForm.setVisible(showPaginator);\n         container.add(paginatorForm);\n \n         final DropDownChoice<Integer> rowsChooser = new DropDownChoice<>(\n@@ -302,6 +306,8 @@ public void setRows(final int rows) {\n \n         protected boolean checkBoxEnabled = true;\n \n+        protected boolean showPaginator = true;\n+\n         /**\n          * Filter used in case of filtered search.\n          */\n@@ -324,6 +330,11 @@ public Builder<T, W, E> disableCheckBoxes() {\n             return this;\n         }\n \n+        public Builder<T, W, E> hidePaginator() {\n+            this.showPaginator = false;\n+            return this;\n+        }\n+\n         public Builder<T, W, E> setFiql(final String fiql) {\n             this.fiql = fiql;\n             return this;"},{"sha":"dc6388ada92c8f547b57ad59fef47635db10a673","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AnySearchResultPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnySearchResultPanel.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -168,7 +168,7 @@ protected Panel customResultBody(final String panelId, final AnyHandler<T> item,\n         return new StatusPanel(\n                 panelId,\n                 ((ProvisioningResult<T>) result).getAny(),\n-                new ListModel<StatusBean>(new ArrayList<StatusBean>()),\n+                new ListModel<>(new ArrayList<StatusBean>()),\n                 CollectionUtils.collect(\n                         ((ProvisioningResult<T>) result).getPropagationStatuses(),\n                         new SerializableTransformer<PropagationStatus, Pair<ConnObjectTO, ConnObjectWrapper>>() {"},{"sha":"a912bded2cafbf3c815a8ce75de83d9a4aaef921","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":3,"deletions":28,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.panels.SchemaTypePanel.SchemaProvider;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n@@ -44,7 +45,6 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n-import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -54,14 +54,11 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.springframework.beans.BeanWrapper;\n-import org.springframework.beans.BeanWrapperImpl;\n import org.springframework.util.ReflectionUtils;\n \n public class SchemaTypePanel extends AbstractTypesPanel<AbstractSchemaTO, SchemaProvider> {\n@@ -113,7 +110,7 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                                     SyncopeConsoleSession.get().getService(\n                                             SchemaService.class).update(schemaType, modelObject);\n                                 }\n-                                \n+\n                                 info(getString(Constants.OPERATION_SUCCEEDED));\n                                 modal.close(target);\n                             } catch (Exception e) {\n@@ -158,29 +155,7 @@ protected List<IColumn<AbstractSchemaTO, String>> getColumns() {\n \n             if (clazzField != null) {\n                 if (clazzField.getType().equals(Boolean.class) || clazzField.getType().equals(boolean.class)) {\n-                    columns.add(new AbstractColumn<AbstractSchemaTO, String>(new ResourceModel(field), field) {\n-\n-                        private static final long serialVersionUID = 8263694778917279290L;\n-\n-                        @Override\n-                        public void populateItem(final Item<ICellPopulator<AbstractSchemaTO>> item,\n-                                final String componentId, final IModel<AbstractSchemaTO> model) {\n-\n-                            BeanWrapper bwi = new BeanWrapperImpl(model.getObject());\n-                            Object obj = bwi.getPropertyValue(field);\n-\n-                            item.add(new Label(componentId, StringUtils.EMPTY));\n-                            if (Boolean.valueOf(obj.toString())) {\n-                                item.add(new AttributeModifier(\"class\", \"glyphicon glyphicon-ok\"));\n-                                item.add(new AttributeModifier(\"style\", \"display: table-cell; text-align: center;\"));\n-                            }\n-                        }\n-\n-                        @Override\n-                        public String getCssClass() {\n-                            return \"short_fixedsize\";\n-                        }\n-                    });\n+                    columns.add(new BooleanPropertyColumn<AbstractSchemaTO>(new ResourceModel(field), field, field));\n                 } else {\n                     final IColumn<AbstractSchemaTO, String> column = new PropertyColumn<AbstractSchemaTO, String>(\n                             new ResourceModel(field), field, field) {"},{"sha":"8280e5855db5d3fc2d3b8f5497483d8cda11e990","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -59,7 +59,7 @@ private enum Status {\n \n     private final Label header;\n \n-    private List<Component> outherObjects = new ArrayList<>();\n+    private List<Component> outerObjects = new ArrayList<>();\n \n     public TogglePanel(final String id) {\n         super(id);\n@@ -97,7 +97,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n             }\n         }));\n \n-        add(new ListView<Component>(\"outherObjectsRepeater\", outherObjects) {\n+        add(new ListView<Component>(\"outerObjectsRepeater\", outerObjects) {\n \n             private static final long serialVersionUID = -9180479401817023838L;\n \n@@ -113,13 +113,13 @@ protected void populateItem(final ListItem<Component> item) {\n     /**\n      * Add object outside the main container.\n      * Use this method just to be not influenced by specific inner object css'.\n-     * Be sure to provide <tt>outher</tt> as id.\n+     * Be sure to provide <tt>outer</tt> as id.\n      *\n      * @param childs components to be added.\n      * @return the current panel instance.\n      */\n-    public TogglePanel<T> addOutherObject(final Component... childs) {\n-        outherObjects.addAll(Arrays.asList(childs));\n+    public TogglePanel<T> addOuterObject(final Component... childs) {\n+        outerObjects.addAll(Arrays.asList(childs));\n         return this;\n     }\n "},{"sha":"cc6d577a0c89d6dd9257fb3efa5cf9f530b6cda3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/WorkflowTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FWorkflowTogglePanel.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -47,8 +47,8 @@ public class WorkflowTogglePanel extends TogglePanel<String> {\n \n     public WorkflowTogglePanel(final String id, final PageReference pageRef, final Image workflowDefDiagram) {\n         super(id);\n-        modal = new BaseModal<>(\"outher\");\n-        addOutherObject(modal);\n+        modal = new BaseModal<>(\"outer\");\n+        addOuterObject(modal);\n         modal.size(Modal.Size.Large);\n \n         container = new WebMarkupContainer(\"container\");"},{"sha":"92ff15a01863d14ff5e256b8b389f6abee7896b4","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n@@ -113,7 +113,7 @@ public <T extends AbstractTaskTO> List<T> list(\n                 getResult();\n     }\n \n-    public List<TaskExecTO> listExecutions(final Long taskId, final int page, final int size) {\n+    public List<ExecTO> listExecutions(final Long taskId, final int page, final int size) {\n         return getService(TaskService.class).\n                 listExecutions(new TaskExecQuery.Builder().key(taskId).page(page).size(size).build()).getResult();\n     }"},{"sha":"9fc136dcf3dc90a128aac0acf7f9258039f2fc7c","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/TaskExecutions.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutions.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -50,7 +50,7 @@\n import org.apache.wicket.model.StringResourceModel;\n \n public abstract class TaskExecutions\n-        extends AbstractSearchResultPanel<TaskExecTO, TaskExecTO, TaskExecProvider, TaskRestClient> {\n+        extends AbstractSearchResultPanel<ExecTO, ExecTO, TaskExecProvider, TaskRestClient> {\n \n     private static final long serialVersionUID = 2039393934721149162L;\n \n@@ -69,46 +69,46 @@ public TaskExecutions(final String id, final AbstractTaskTO taskTO, final PageRe\n     protected abstract void next(final String title, final SecondLevel secondLevel, final AjaxRequestTarget target);\n \n     @Override\n-    protected List<IColumn<TaskExecTO, String>> getColumns() {\n-        final List<IColumn<TaskExecTO, String>> columns = new ArrayList<IColumn<TaskExecTO, String>>();\n+    protected List<IColumn<ExecTO, String>> getColumns() {\n+        final List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n-        columns.add(new PropertyColumn<TaskExecTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"key\"), \"key\", \"key\"));\n \n-        columns.add(new DatePropertyColumn<TaskExecTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n+        columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n \n-        columns.add(new DatePropertyColumn<TaskExecTO>(new ResourceModel(\"end\"), \"end\", \"end\"));\n+        columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"end\"), \"end\", \"end\"));\n \n-        columns.add(new PropertyColumn<TaskExecTO, String>(new ResourceModel(\"status\"), \"status\", \"status\"));\n+        columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"status\"), \"status\", \"status\"));\n \n-        columns.add(new ActionColumn<TaskExecTO, String>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new ActionColumn<ExecTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = -3503023501954863131L;\n \n             @Override\n-            public ActionLinksPanel<TaskExecTO> getActions(\n-                    final String componentId, final IModel<TaskExecTO> model) {\n+            public ActionLinksPanel<ExecTO> getActions(\n+                    final String componentId, final IModel<ExecTO> model) {\n \n-                final TaskExecTO taskExecutionTO = model.getObject();\n+                final ExecTO taskExecutionTO = model.getObject();\n \n-                final ActionLinksPanel.Builder<TaskExecTO> panel = ActionLinksPanel.builder(pageRef);\n+                final ActionLinksPanel.Builder<ExecTO> panel = ActionLinksPanel.builder(pageRef);\n \n                 panel.\n-                        add(new ActionLink<TaskExecTO>() {\n+                        add(new ActionLink<ExecTO>() {\n \n                             private static final long serialVersionUID = -3722207913631435501L;\n \n                             @Override\n-                            public void onClick(final AjaxRequestTarget target, final TaskExecTO ignore) {\n+                            public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                                 next(new StringResourceModel(\"execution.view\", TaskExecutions.this, model).getObject(),\n                                         new ExecMessage(model.getObject().getMessage()), target);\n                             }\n                         }, ActionLink.ActionType.SEARCH, StandardEntitlement.TASK_READ).\n-                        add(new ActionLink<TaskExecTO>() {\n+                        add(new ActionLink<ExecTO>() {\n \n                             private static final long serialVersionUID = -3722207913631435501L;\n \n                             @Override\n-                            public void onClick(final AjaxRequestTarget target, final TaskExecTO ignore) {\n+                            public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                                 try {\n                                     restClient.deleteExecution(taskExecutionTO.getKey());\n                                     taskTO.getExecutions().remove(taskExecutionTO);\n@@ -162,28 +162,28 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         return bulkActions;\n     }\n \n-    protected class TaskExecProvider extends SearchableDataProvider<TaskExecTO> {\n+    protected class TaskExecProvider extends SearchableDataProvider<ExecTO> {\n \n         private static final long serialVersionUID = 8943636537120648961L;\n \n-        private final SortableDataProviderComparator<TaskExecTO> comparator;\n+        private final SortableDataProviderComparator<ExecTO> comparator;\n \n         private final Long taskId;\n \n         public TaskExecProvider(final Long taskId, final int paginatorRows) {\n             super(paginatorRows);\n             this.taskId = taskId;\n-            comparator = new SortableDataProviderComparator<TaskExecTO>(this);\n+            comparator = new SortableDataProviderComparator<>(this);\n         }\n \n-        public SortableDataProviderComparator<TaskExecTO> getComparator() {\n+        public SortableDataProviderComparator<ExecTO> getComparator() {\n             return comparator;\n         }\n \n         @Override\n-        public Iterator<TaskExecTO> iterator(final long first, final long count) {\n+        public Iterator<ExecTO> iterator(final long first, final long count) {\n             final int page = ((int) first / paginatorRows);\n-            List<TaskExecTO> list = taskRestClient.listExecutions(taskId, (page < 0 ? 0 : page) + 1, paginatorRows);\n+            List<ExecTO> list = taskRestClient.listExecutions(taskId, (page < 0 ? 0 : page) + 1, paginatorRows);\n             Collections.sort(list, comparator);\n             return list.iterator();\n         }\n@@ -194,14 +194,14 @@ public long size() {\n         }\n \n         @Override\n-        public IModel<TaskExecTO> model(final TaskExecTO taskExecution) {\n+        public IModel<ExecTO> model(final ExecTO taskExecution) {\n \n-            return new AbstractReadOnlyModel<TaskExecTO>() {\n+            return new AbstractReadOnlyModel<ExecTO>() {\n \n                 private static final long serialVersionUID = 7485475149862342421L;\n \n                 @Override\n-                public TaskExecTO getObject() {\n+                public ExecTO getObject() {\n                     return taskExecution;\n                 }\n             };"},{"sha":"424b212a4d869d1cca7a6d300c227aedf1e5154b","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -70,14 +70,14 @@ public TopologyTogglePanel(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n \n-        resourceModal = new BaseModal<>(\"outher\");\n+        resourceModal = new BaseModal<>(\"outer\");\n         resourceModal.addSumbitButton();\n         resourceModal.size(Modal.Size.Large);\n-        addOutherObject(resourceModal);\n+        addOuterObject(resourceModal);\n \n-        taskModal = new BaseModal<>(\"outher\");\n+        taskModal = new BaseModal<>(\"outer\");\n         taskModal.size(Modal.Size.Large);\n-        addOutherObject(taskModal);\n+        addOuterObject(taskModal);\n \n         container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupPlaceholderTag(true);"},{"sha":"843fd3a57b7b9934b7c34d5557059f5d8aadcad8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/BooleanPropertyColumn.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FBooleanPropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FBooleanPropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FBooleanPropertyColumn.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.springframework.beans.BeanWrapper;\n+import org.springframework.beans.BeanWrapperImpl;\n+\n+/**\n+ * Format column's value as boolean.\n+ */\n+public class BooleanPropertyColumn<T> extends PropertyColumn<T, String> {\n+\n+    private static final long serialVersionUID = 3527840552172947705L;\n+\n+    public BooleanPropertyColumn(final IModel<String> displayModel, final String sortProperty,\n+            final String propertyExpression) {\n+\n+        super(displayModel, sortProperty, propertyExpression);\n+    }\n+\n+    @Override\n+    public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel) {\n+\n+        BeanWrapper bwi = new BeanWrapperImpl(rowModel.getObject());\n+        Object obj = bwi.getPropertyValue(getPropertyExpression());\n+\n+        item.add(new Label(componentId, StringUtils.EMPTY));\n+        if (Boolean.valueOf(obj.toString())) {\n+            item.add(new AttributeModifier(\"class\", \"glyphicon glyphicon-ok\"));\n+            item.add(new AttributeModifier(\"style\", \"display: table-cell; text-align: center;\"));\n+        }\n+    }\n+}"},{"sha":"fec996b551f1f80ef904430e679d5ac35a94d0fa","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/DatePropertyColumn.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Date;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n-\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -42,7 +41,6 @@ public DatePropertyColumn(final IModel<String> displayModel, final String sortPr\n \n     @Override\n     public void populateItem(final Item<ICellPopulator<T>> item, final String componentId, final IModel<T> rowModel) {\n-\n         IModel<?> date = getDataModel(rowModel);\n \n         String convertedDate = \"\";"},{"sha":"ff04109b1760cabef0d44409ce98d8a9c8704d07","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":35,"deletions":81,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -18,26 +18,23 @@\n  */\n package org.apache.syncope.client.console.widgets;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.SearchableDataProvider;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n-import org.apache.syncope.common.lib.to.AbstractExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -57,7 +54,7 @@ public class JobWidget extends AbstractWidget {\n \n     private final List<JobTO> available;\n \n-    private final List<AbstractExecTO> recent;\n+    private final List<ExecTO> recent;\n \n     public JobWidget(final String id, final PageReference pageRef) {\n         super(id);\n@@ -75,10 +72,10 @@ public JobWidget(final String id, final PageReference pageRef) {\n \n         add(new AvailableJobsPanel(\"available\", pageRef));\n \n-        List<ReportExecTO> reportExecs = SyncopeConsoleSession.get().\n+        List<ExecTO> reportExecs = SyncopeConsoleSession.get().\n                 getService(ReportService.class).listRecentExecutions(10);\n \n-        List<TaskExecTO> taskExecs = SyncopeConsoleSession.get().\n+        List<ExecTO> taskExecs = SyncopeConsoleSession.get().\n                 getService(TaskService.class).listRecentExecutions(10);\n \n         recent = new ArrayList<>();\n@@ -126,37 +123,17 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n \n         @Override\n         protected List<IColumn<JobTO, String>> getColumns() {\n-            final List<IColumn<JobTO, String>> columns = new ArrayList<>();\n-\n-            for (Field field : JobTO.class.getDeclaredFields()) {\n-                if (field != null && !Modifier.isStatic(field.getModifiers())) {\n-                    final String fieldName = field.getName();\n-                    if (field.getType().isArray()\n-                            || Collection.class.isAssignableFrom(field.getType())\n-                            || Map.class.isAssignableFrom(field.getType())) {\n-\n-                        columns.add(new PropertyColumn<JobTO, String>(\n-                                new ResourceModel(field.getName()), field.getName()));\n-                    } else {\n-                        columns.add(new PropertyColumn<JobTO, String>(\n-                                new ResourceModel(field.getName()), field.getName(), field.getName()) {\n-\n-                            private static final long serialVersionUID = -6902459669035442212L;\n-\n-                            @Override\n-                            public String getCssClass() {\n-                                String css = super.getCssClass();\n-                                if (\"referenceKey\".equals(fieldName)) {\n-                                    css = StringUtils.isBlank(css)\n-                                            ? \"medium_fixedsize\"\n-                                            : css + \" medium_fixedsize\";\n-                                }\n-                                return css;\n-                            }\n-                        });\n-                    }\n-                }\n-            }\n+            List<IColumn<JobTO, String>> columns = new ArrayList<>();\n+\n+            columns.add(new PropertyColumn<JobTO, String>(new ResourceModel(\"reference\"), \"reference\", \"reference\"));\n+\n+            columns.add(new BooleanPropertyColumn<JobTO>(new ResourceModel(\"running\"), \"running\", \"running\"));\n+\n+            columns.add(new BooleanPropertyColumn<JobTO>(new ResourceModel(\"scheduled\"), \"scheduled\", \"scheduled\"));\n+\n+            columns.add(new DatePropertyColumn<JobTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n+\n+            columns.add(new PropertyColumn<JobTO, String>(new ResourceModel(\"status\"), \"status\", \"status\"));\n \n             return columns;\n         }\n@@ -193,24 +170,23 @@ public IModel<JobTO> model(final JobTO object) {\n     }\n \n     protected class RecentExecPanel extends AbstractSearchResultPanel<\n-        AbstractExecTO, AbstractExecTO, RecentExecProvider, BaseRestClient> {\n+        ExecTO, ExecTO, RecentExecProvider, BaseRestClient> {\n \n         private static final long serialVersionUID = -8214546246301342868L;\n \n         public RecentExecPanel(final String id, final PageReference pageRef) {\n-            super(id, new Builder<AbstractExecTO, AbstractExecTO, BaseRestClient>(null, pageRef) {\n+            super(id, new Builder<ExecTO, ExecTO, BaseRestClient>(null, pageRef) {\n \n                 private static final long serialVersionUID = 8769126634538601689L;\n \n                 @Override\n-                protected WizardMgtPanel<AbstractExecTO> newInstance(final String id) {\n+                protected WizardMgtPanel<ExecTO> newInstance(final String id) {\n                     return new RecentExecPanel(id, pageRef);\n                 }\n-            }.disableCheckBoxes());\n+            }.disableCheckBoxes().hidePaginator());\n \n             rows = ROWS;\n             initResultTable();\n-            container.get(\"paginator\").setVisible(false);\n         }\n \n         @Override\n@@ -229,49 +205,27 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n         }\n \n         @Override\n-        protected List<IColumn<AbstractExecTO, String>> getColumns() {\n-            final List<IColumn<AbstractExecTO, String>> columns = new ArrayList<>();\n-\n-            for (Field field : AbstractExecTO.class.getDeclaredFields()) {\n-                if (field != null && !Modifier.isStatic(field.getModifiers())) {\n-                    final String fieldName = field.getName();\n-                    if (field.getType().isArray()\n-                            || Collection.class.isAssignableFrom(field.getType())\n-                            || Map.class.isAssignableFrom(field.getType())) {\n-\n-                        columns.add(new PropertyColumn<AbstractExecTO, String>(\n-                                new ResourceModel(field.getName()), field.getName()));\n-                    } else {\n-                        columns.add(new PropertyColumn<AbstractExecTO, String>(\n-                                new ResourceModel(field.getName()), field.getName(), field.getName()) {\n-\n-                            private static final long serialVersionUID = -6902459669035442212L;\n-\n-                            @Override\n-                            public String getCssClass() {\n-                                String css = super.getCssClass();\n-                                if (\"key\".equals(fieldName)) {\n-                                    css = StringUtils.isBlank(css)\n-                                            ? \"medium_fixedsize\"\n-                                            : css + \" medium_fixedsize\";\n-                                }\n-                                return css;\n-                            }\n-                        });\n-                    }\n-                }\n-            }\n+        protected List<IColumn<ExecTO, String>> getColumns() {\n+            List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n+\n+            columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"reference\"), \"reference\", \"reference\"));\n+\n+            columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"start\"), \"start\", \"start\"));\n+\n+            columns.add(new DatePropertyColumn<ExecTO>(new ResourceModel(\"end\"), \"end\", \"end\"));\n+\n+            columns.add(new PropertyColumn<ExecTO, String>(new ResourceModel(\"status\"), \"status\", \"status\"));\n \n             return columns;\n         }\n \n     }\n \n-    protected final class RecentExecProvider extends SearchableDataProvider<AbstractExecTO> {\n+    protected final class RecentExecProvider extends SearchableDataProvider<ExecTO> {\n \n         private static final long serialVersionUID = 2835707012690698633L;\n \n-        private final SortableDataProviderComparator<AbstractExecTO> comparator;\n+        private final SortableDataProviderComparator<ExecTO> comparator;\n \n         private RecentExecProvider() {\n             super(ROWS);\n@@ -280,7 +234,7 @@ private RecentExecProvider() {\n         }\n \n         @Override\n-        public Iterator<AbstractExecTO> iterator(final long first, final long count) {\n+        public Iterator<ExecTO> iterator(final long first, final long count) {\n             Collections.sort(recent, comparator);\n             return recent.subList((int) first, (int) first + (int) count).iterator();\n         }\n@@ -291,7 +245,7 @@ public long size() {\n         }\n \n         @Override\n-        public IModel<AbstractExecTO> model(final AbstractExecTO object) {\n+        public IModel<ExecTO> model(final ExecTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }"},{"sha":"b6ceeb963c63da65bb8e76059a0a3a31448631e0","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -255,7 +255,7 @@ span.overridable div.checkbox {\n   padding: 0px;\n }\n \n-div#outher.modal-lg {\n+div#outer.modal-lg {\n   width: 1200px;\n }\n \n@@ -502,4 +502,4 @@ END - Result page\n \n .nav-tabs-custom > .nav-tabs > li.active {\n     border-top-color: #d2d6de !important;\n-}\n\\ No newline at end of file\n+}"},{"sha":"a8c6fab9867a31a8c5ebb1b151aa07302bc3ca63","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/TogglePanel.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.html?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -98,8 +98,8 @@\n       <wicket:child/>\n     </div>\n \n-    <span wicket:id=\"outherObjectsRepeater\">\n-      <div wicket:id=\"outher\"/>\n+    <span wicket:id=\"outerObjectsRepeater\">\n+      <div wicket:id=\"outer\"/>\n     </span>\n \n   </wicket:panel>"},{"sha":"48ba26af4330d2cfc251655dddf803a3d9efaf73","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.properties?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -14,9 +14,9 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-referenceKey=Key\n-referenceName=Name\n+reference=Reference\n running=Running\n scheduled=Scheduled\n start=Start\n message=Message\n+end=End"},{"sha":"48ba26af4330d2cfc251655dddf803a3d9efaf73","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget_it.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_it.properties?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -14,9 +14,9 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-referenceKey=Key\n-referenceName=Name\n+reference=Reference\n running=Running\n scheduled=Scheduled\n start=Start\n message=Message\n+end=End"},{"sha":"48ba26af4330d2cfc251655dddf803a3d9efaf73","filename":"client/console/src/main/resources/org/apache/syncope/client/console/widgets/JobWidget_pt_BR.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget_pt_BR.properties?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -14,9 +14,9 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-referenceKey=Key\n-referenceName=Name\n+reference=Reference\n running=Running\n scheduled=Scheduled\n start=Start\n message=Message\n+end=End"},{"sha":"0c6356b494cb73f37ba29d9f7f2f2d19f5dfb48c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractTaskTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractTaskTO.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -42,7 +42,7 @@ public abstract class AbstractTaskTO extends AbstractStartEndBean implements Ent\n \n     private String latestExecStatus;\n \n-    private final List<TaskExecTO> executions = new ArrayList<>();\n+    private final List<ExecTO> executions = new ArrayList<>();\n \n     @Override\n     public Long getKey() {\n@@ -66,7 +66,7 @@ public void setLatestExecStatus(final String latestExecStatus) {\n     @XmlElementWrapper(name = \"executions\")\n     @XmlElement(name = \"execution\")\n     @JsonProperty(\"executions\")\n-    public List<TaskExecTO> getExecutions() {\n+    public List<ExecTO> getExecutions() {\n         return executions;\n     }\n }"},{"sha":"1a81ddf6097e5febbedd56f4f427e453a3f0ad42","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ExecTO.java","status":"renamed","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FExecTO.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -18,15 +18,19 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlType\n-public class AbstractExecTO extends AbstractStartEndBean implements EntityTO<Long> {\n+@XmlRootElement(name = \"exec\")\n+@XmlType()\n+public class ExecTO extends AbstractStartEndBean implements EntityTO<Long> {\n \n     private static final long serialVersionUID = -4621191979198357081L;\n \n     private Long key;\n \n+    private String reference;\n+\n     private String status;\n \n     private String message;\n@@ -41,6 +45,14 @@ public void setKey(final Long key) {\n         this.key = key;\n     }\n \n+    public String getReference() {\n+        return reference;\n+    }\n+\n+    public void setReference(final String reference) {\n+        this.reference = reference;\n+    }\n+\n     public String getMessage() {\n         return message;\n     }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractExecTO.java"},{"sha":"8d7d81c7edd9146861bd3e2e116000b6060de0e4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/JobTO.java","status":"modified","additions":5,"deletions":15,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FJobTO.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -29,9 +29,7 @@ public class JobTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -7254450981751326711L;\n \n-    private Long referenceKey;\n-\n-    private String referenceName;\n+    private String reference;\n \n     private boolean running;\n \n@@ -41,20 +39,12 @@ public class JobTO extends AbstractBaseBean {\n \n     private Date start;\n \n-    public Long getReferenceKey() {\n-        return referenceKey;\n-    }\n-\n-    public void setReferenceKey(final Long referenceKey) {\n-        this.referenceKey = referenceKey;\n-    }\n-\n-    public String getReferenceName() {\n-        return referenceName;\n+    public String getReference() {\n+        return reference;\n     }\n \n-    public void setReferenceName(final String referenceName) {\n-        this.referenceName = referenceName;\n+    public void setReference(final String reference) {\n+        this.reference = reference;\n     }\n \n     public boolean isRunning() {"},{"sha":"5d78c584b51c22e2ff72b8efeaf127f294f89496","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReportExecTO.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c2226917062427c11c6eac1719e33794db640557/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c2226917062427c11c6eac1719e33794db640557/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportExecTO.java?ref=c2226917062427c11c6eac1719e33794db640557","patch":"@@ -1,40 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"reportExec\")\n-@XmlType\n-public class ReportExecTO extends AbstractExecTO {\n-\n-    private static final long serialVersionUID = -1025555939724089215L;\n-\n-    private long report;\n-\n-    public long getReport() {\n-        return report;\n-    }\n-\n-    public void setReport(final long report) {\n-        this.report = report;\n-    }\n-\n-}"},{"sha":"7260796fee48d91a49da12dbbd8fe9fbe763fb17","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -43,7 +43,7 @@ public class ReportTO extends AbstractStartEndBean implements EntityTO<Long> {\n \n     private String cronExpression;\n \n-    private final List<ReportExecTO> executions = new ArrayList<>();\n+    private final List<ExecTO> executions = new ArrayList<>();\n \n     private String latestExecStatus;\n \n@@ -92,7 +92,7 @@ public void setCronExpression(final String cronExpression) {\n     @XmlElementWrapper(name = \"executions\")\n     @XmlElement(name = \"execution\")\n     @JsonProperty(\"executions\")\n-    public List<ReportExecTO> getExecutions() {\n+    public List<ExecTO> getExecutions() {\n         return executions;\n     }\n "},{"sha":"314c51c0e4cfe35e8545c8dc82592e610686f1a4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/TaskExecTO.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c2226917062427c11c6eac1719e33794db640557/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c2226917062427c11c6eac1719e33794db640557/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskExecTO.java?ref=c2226917062427c11c6eac1719e33794db640557","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.TaskType;\n-\n-@XmlRootElement(name = \"taskExec\")\n-@XmlType\n-public class TaskExecTO extends AbstractExecTO {\n-\n-    private static final long serialVersionUID = -5401795154606268973L;\n-\n-    private long task;\n-\n-    private TaskType type;\n-\n-    public long getTask() {\n-        return task;\n-    }\n-\n-    public void setTask(final long task) {\n-        this.task = task;\n-    }\n-\n-    public TaskType getType() {\n-        return type;\n-    }\n-\n-    public void setType(final TaskType type) {\n-        this.type = type;\n-    }\n-\n-}"},{"sha":"4c259d6774493ae250539102fc8f841718699cdc","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -35,8 +35,8 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -107,7 +107,7 @@ public interface ReportService extends JAXRSService {\n     @GET\n     @Path(\"executions/recent\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<ReportExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+    List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n \n     /**\n      * Deletes report execution with matching key.\n@@ -138,7 +138,7 @@ public interface ReportService extends JAXRSService {\n     @POST\n     @Path(\"{key}/execute\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ReportExecTO execute(@BeanParam ExecuteQuery query);\n+    ExecTO execute(@BeanParam ExecuteQuery query);\n \n     /**\n      * Exports the report execution with matching key in the requested format."},{"sha":"f0ba12863f7184d22b3ac4f8eb10b16e8f995e69","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -37,10 +37,10 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -117,7 +117,7 @@ <T extends AbstractTaskTO> T read(\n     @GET\n     @Path(\"{key}/executions\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<TaskExecTO> listExecutions(@BeanParam TaskExecQuery query);\n+    PagedResult<ExecTO> listExecutions(@BeanParam TaskExecQuery query);\n \n     /**\n      * Returns the list of recently completed task executions, ordered by end date descendent.\n@@ -128,7 +128,7 @@ <T extends AbstractTaskTO> T read(\n     @GET\n     @Path(\"executions/recent\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<TaskExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n+    List<ExecTO> listRecentExecutions(@Min(1) @QueryParam(JAXRSService.PARAM_MAX) @DefaultValue(\"25\") int max);\n \n     /**\n      * Deletes the task execution matching the provided key.\n@@ -159,7 +159,7 @@ <T extends AbstractTaskTO> T read(\n     @POST\n     @Path(\"{key}/execute\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    TaskExecTO execute(@BeanParam ExecuteQuery query);\n+    ExecTO execute(@BeanParam ExecuteQuery query);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"c06cb626b802127acd1a717bc0791a11e43f41f7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -23,7 +23,6 @@\n import java.util.Comparator;\n import java.util.List;\n import org.apache.commons.collections4.ComparatorUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n@@ -82,7 +81,7 @@ public int compare(final JobTO job1, final JobTO job2) {\n     @Autowired\n     protected SchedulerFactoryBean scheduler;\n \n-    protected abstract Pair<Long, String> getReference(final JobKey jobKey);\n+    protected abstract String getReference(final JobKey jobKey);\n \n     protected List<JobTO> listJobs(final int max) {\n         List<JobTO> jobTOs = new ArrayList<>();\n@@ -93,12 +92,11 @@ protected List<JobTO> listJobs(final int max) {\n \n                 JobTO jobTO = new JobTO();\n \n-                Pair<Long, String> reference = getReference(jobKey);\n+                String reference = getReference(jobKey);\n                 if (reference != null) {\n                     jobTOs.add(jobTO);\n \n-                    jobTO.setReferenceKey(reference.getLeft());\n-                    jobTO.setReferenceName(reference.getRight());\n+                    jobTO.setReference(reference);\n \n                     List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n                     if (jobTriggers.isEmpty()) {"},{"sha":"ebe72a3ae4d606ebcc47a5b13f59c5ddceaded40","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -24,11 +24,11 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -105,8 +105,8 @@ public NotificationTO delete(final Long key) {\n     }\n \n     @Override\n-    protected Pair<Long, String> getReference(final JobKey jobKey) {\n-        return JobManager.NOTIFICATION_JOB.equals(jobKey) ? Pair.of(0L, jobKey.getName()) : null;\n+    protected String getReference(final JobKey jobKey) {\n+        return JobManager.NOTIFICATION_JOB.equals(jobKey) ? NotificationJob.class.getSimpleName() : null;\n     }\n \n     public JobTO getJob() {"},{"sha":"447de2497b6657eceea7149a64c3109563a9b82a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -38,9 +38,8 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -154,7 +153,7 @@ public ReportTO read(final Long key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n-    public ReportExecTO execute(final Long key, final Date startAt) {\n+    public ExecTO execute(final Long key, final Date startAt) {\n         Report report = reportDAO.find(key);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + key);\n@@ -181,8 +180,8 @@ public ReportExecTO execute(final Long key, final Date startAt) {\n             throw sce;\n         }\n \n-        ReportExecTO result = new ReportExecTO();\n-        result.setReport(key);\n+        ExecTO result = new ExecTO();\n+        result.setReference(binder.buildReference(report));\n         result.setStart(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n@@ -290,24 +289,24 @@ public ReportTO delete(final Long key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n-    public List<ReportExecTO> listRecentExecutions(final int max) {\n-        return CollectionUtils.collect(reportExecDAO.findRecent(max), new Transformer<ReportExec, ReportExecTO>() {\n+    public List<ExecTO> listRecentExecutions(final int max) {\n+        return CollectionUtils.collect(reportExecDAO.findRecent(max), new Transformer<ReportExec, ExecTO>() {\n \n             @Override\n-            public ReportExecTO transform(final ReportExec reportExec) {\n-                return binder.getReportExecTO(reportExec);\n+            public ExecTO transform(final ReportExec reportExec) {\n+                return binder.getExecTO(reportExec);\n             }\n-        }, new ArrayList<ReportExecTO>());\n+        }, new ArrayList<ExecTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n-    public ReportExecTO deleteExecution(final Long executionKey) {\n+    public ExecTO deleteExecution(final Long executionKey) {\n         ReportExec reportExec = reportExecDAO.find(executionKey);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionKey);\n         }\n \n-        ReportExecTO reportExecToDelete = binder.getReportExecTO(reportExec);\n+        ExecTO reportExecToDelete = binder.getExecTO(reportExec);\n         reportExecDAO.delete(reportExec);\n         return reportExecToDelete;\n     }\n@@ -338,11 +337,11 @@ public BulkActionResult deleteExecutions(\n     }\n \n     @Override\n-    protected Pair<Long, String> getReference(final JobKey jobKey) {\n+    protected String getReference(final JobKey jobKey) {\n         Long key = JobNamer.getReportKeyFromJobName(jobKey.getName());\n \n         Report report = reportDAO.find(key);\n-        return report == null ? null : Pair.of(key, report.getName());\n+        return report == null ? null : binder.buildReference(report);\n     }\n \n     @Override"},{"sha":"ccfa5194359b131f11cc04771f90848a75fe5bfd","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -26,13 +26,12 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.JobAction;\n@@ -176,23 +175,23 @@ public <T extends AbstractTaskTO> T read(final Long taskKey, final boolean detai\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public TaskExecTO execute(final Long taskKey, final Date startAt, final boolean dryRun) {\n+    public ExecTO execute(final Long taskKey, final Date startAt, final boolean dryRun) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskKey);\n         }\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n-        TaskExecTO result = null;\n+        ExecTO result = null;\n         switch (taskUtils.getType()) {\n             case PROPAGATION:\n                 TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n-                result = binder.getTaskExecTO(propExec);\n+                result = binder.getExecTO(propExec);\n                 break;\n \n             case NOTIFICATION:\n                 TaskExec notExec = notificationJobDelegate.executeSingle((NotificationTask) task);\n-                result = binder.getTaskExecTO(notExec);\n+                result = binder.getExecTO(notExec);\n                 break;\n \n             case SCHEDULED:\n@@ -225,8 +224,8 @@ public TaskExecTO execute(final Long taskKey, final Date startAt, final boolean\n                     throw sce;\n                 }\n \n-                result = new TaskExecTO();\n-                result.setTask(taskKey);\n+                result = new ExecTO();\n+                result.setReference(binder.buildReference(task));\n                 result.setStart(new Date());\n                 result.setStatus(\"JOB_FIRED\");\n                 result.setMessage(\"Job fired; waiting for results...\");\n@@ -265,7 +264,7 @@ public int countExecutions(final Long taskId) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public List<TaskExecTO> listExecutions(\n+    public List<ExecTO> listExecutions(\n             final Long taskKey, final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n         Task task = taskDAO.find(taskKey);\n@@ -274,34 +273,34 @@ public List<TaskExecTO> listExecutions(\n         }\n \n         return CollectionUtils.collect(taskExecDAO.findAll(task, page, size, orderByClauses),\n-                new Transformer<TaskExec, TaskExecTO>() {\n+                new Transformer<TaskExec, ExecTO>() {\n \n             @Override\n-            public TaskExecTO transform(final TaskExec taskExec) {\n-                return binder.getTaskExecTO(taskExec);\n+            public ExecTO transform(final TaskExec taskExec) {\n+                return binder.getExecTO(taskExec);\n             }\n-        }, new ArrayList<TaskExecTO>());\n+        }, new ArrayList<ExecTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n-    public List<TaskExecTO> listRecentExecutions(final int max) {\n-        return CollectionUtils.collect(taskExecDAO.findRecent(max), new Transformer<TaskExec, TaskExecTO>() {\n+    public List<ExecTO> listRecentExecutions(final int max) {\n+        return CollectionUtils.collect(taskExecDAO.findRecent(max), new Transformer<TaskExec, ExecTO>() {\n \n             @Override\n-            public TaskExecTO transform(final TaskExec taskExec) {\n-                return binder.getTaskExecTO(taskExec);\n+            public ExecTO transform(final TaskExec taskExec) {\n+                return binder.getExecTO(taskExec);\n             }\n-        }, new ArrayList<TaskExecTO>());\n+        }, new ArrayList<ExecTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n-    public TaskExecTO deleteExecution(final Long execKey) {\n+    public ExecTO deleteExecution(final Long execKey) {\n         TaskExec taskExec = taskExecDAO.find(execKey);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + execKey);\n         }\n \n-        TaskExecTO taskExecutionToDelete = binder.getTaskExecTO(taskExec);\n+        ExecTO taskExecutionToDelete = binder.getExecTO(taskExec);\n         taskExecDAO.delete(taskExec);\n         return taskExecutionToDelete;\n     }\n@@ -332,11 +331,11 @@ public BulkActionResult deleteExecutions(\n     }\n \n     @Override\n-    protected Pair<Long, String> getReference(final JobKey jobKey) {\n+    protected String getReference(final JobKey jobKey) {\n         Long key = JobNamer.getTaskKeyFromJobName(jobKey.getName());\n \n         Task task = taskDAO.find(key);\n-        return task == null || !(task instanceof SchedTask) ? null : Pair.of(key, ((SchedTask) task).getName());\n+        return task == null || !(task instanceof SchedTask) ? null : binder.buildReference(task);\n     }\n \n     @Override"},{"sha":"22a14e6f47d9aa4536651915003ceb148301c385","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ReportDataBinder.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FReportDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FReportDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FReportDataBinder.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -27,7 +27,9 @@ public interface ReportDataBinder {\n \n     void getReport(Report report, ReportTO reportTO);\n \n-    ReportExecTO getReportExecTO(ReportExec execution);\n+    String buildReference(Report report);\n+\n+    ExecTO getExecTO(ReportExec execution);\n \n     ReportTO getReportTO(Report report);\n "},{"sha":"2c7bedf5471df2617d4138edc3aee1ae4511af90","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/TaskDataBinder.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -30,10 +30,12 @@ public interface TaskDataBinder {\n \n     SchedTask createSchedTask(SchedTaskTO taskTO, TaskUtils taskUtil);\n \n-    TaskExecTO getTaskExecTO(TaskExec execution);\n+    void updateSchedTask(SchedTask task, SchedTaskTO taskTO, TaskUtils taskUtil);\n \n-    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtils taskUtil, boolean details);\n+    String buildReference(Task task);\n \n-    void updateSchedTask(SchedTask task, SchedTaskTO taskTO, TaskUtils taskUtil);\n+    ExecTO getExecTO(TaskExec execution);\n+\n+    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtils taskUtil, boolean details);\n \n }"},{"sha":"2f679269ef2ec8571c08a95d09185fce0389bf89","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":16,"deletions":9,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.common.lib.report.AbstractReportletConf;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n@@ -104,7 +104,7 @@ public ReportTO getReportTO(final Report report) {\n         }\n \n         for (ReportExec reportExec : report.getExecs()) {\n-            reportTO.getExecutions().add(getReportExecTO(reportExec));\n+            reportTO.getExecutions().add(getExecTO(reportExec));\n         }\n \n         String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(report).getName());\n@@ -123,15 +123,22 @@ public ReportTO getReportTO(final Report report) {\n     }\n \n     @Override\n-    public ReportExecTO getReportExecTO(final ReportExec execution) {\n-        ReportExecTO executionTO = new ReportExecTO();\n-        executionTO.setKey(execution.getKey());\n-        BeanUtils.copyProperties(execution, executionTO, IGNORE_REPORT_EXECUTION_PROPERTIES);\n+    public String buildReference(final Report report) {\n+        return \"Report \"\n+                + report.getKey() + \" \"\n+                + report.getName();\n+    }\n+\n+    @Override\n+    public ExecTO getExecTO(final ReportExec execution) {\n+        ExecTO execTO = new ExecTO();\n+        execTO.setKey(execution.getKey());\n+        BeanUtils.copyProperties(execution, execTO, IGNORE_REPORT_EXECUTION_PROPERTIES);\n         if (execution.getKey() != null) {\n-            executionTO.setKey(execution.getKey());\n+            execTO.setKey(execution.getKey());\n         }\n-        executionTO.setReport(execution.getReport().getKey());\n+        execTO.setReference(buildReference(execution.getReport()));\n \n-        return executionTO;\n+        return execTO;\n     }\n }"},{"sha":"837650baf195fc665e19cb2117ff913eef96b2e1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":22,"deletions":9,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -248,20 +248,33 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n     }\n \n     @Override\n-    public TaskExecTO getTaskExecTO(final TaskExec execution) {\n-        TaskExecTO executionTO = new TaskExecTO();\n-        BeanUtils.copyProperties(execution, executionTO, IGNORE_TASK_EXECUTION_PROPERTIES);\n+    public String buildReference(final Task task) {\n+        return taskUtilsFactory.getInstance(task).getType().name() + \" \"\n+                + \"Task \"\n+                + task.getKey() + \" \"\n+                + (task instanceof SchedTask\n+                        ? SchedTask.class.cast(task).getName() == null\n+                        ? StringUtils.EMPTY\n+                        : SchedTask.class.cast(task).getName()\n+                        : task instanceof PropagationTask\n+                                ? PropagationTask.class.cast(task).getConnObjectKey()\n+                                : StringUtils.EMPTY);\n+    }\n+\n+    @Override\n+    public ExecTO getExecTO(final TaskExec execution) {\n+        ExecTO execTO = new ExecTO();\n+        BeanUtils.copyProperties(execution, execTO, IGNORE_TASK_EXECUTION_PROPERTIES);\n \n         if (execution.getKey() != null) {\n-            executionTO.setKey(execution.getKey());\n+            execTO.setKey(execution.getKey());\n         }\n \n         if (execution.getTask() != null && execution.getTask().getKey() != null) {\n-            executionTO.setTask(execution.getTask().getKey());\n-            executionTO.setType(taskUtilsFactory.getInstance(execution.getTask()).getType());\n+            execTO.setReference(buildReference(execution.getTask()));\n         }\n \n-        return executionTO;\n+        return execTO;\n     }\n \n     private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n@@ -297,7 +310,7 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n         if (details) {\n             for (TaskExec execution : task.getExecs()) {\n                 if (execution != null) {\n-                    taskTO.getExecutions().add(getTaskExecTO(execution));\n+                    taskTO.getExecutions().add(getExecTO(execution));\n                 }\n             }\n         }"},{"sha":"800d8ef7c7033e55adf24c0ed251d264b2dc41ec","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -27,7 +27,7 @@\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -88,7 +88,7 @@ public void write(final OutputStream os) throws IOException {\n     }\n \n     @Override\n-    public ReportExecTO execute(final ExecuteQuery query) {\n+    public ExecTO execute(final ExecuteQuery query) {\n         return logic.execute(query.getKey(), query.getStartAt());\n     }\n \n@@ -98,7 +98,7 @@ public void delete(final Long key) {\n     }\n \n     @Override\n-    public List<ReportExecTO> listRecentExecutions(final int size) {\n+    public List<ExecTO> listRecentExecutions(final int size) {\n         return logic.listRecentExecutions(size);\n     }\n "},{"sha":"e7cf1c63ab756171003c175172c2b67bbd4b05c9","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n@@ -69,7 +69,7 @@ public void delete(final Long key) {\n     }\n \n     @Override\n-    public TaskExecTO execute(final ExecuteQuery query) {\n+    public ExecTO execute(final ExecuteQuery query) {\n         return logic.execute(query.getKey(), query.getStartAt(), query.getDryRun());\n     }\n \n@@ -110,7 +110,7 @@ public void update(final AbstractTaskTO taskTO) {\n     }\n \n     @Override\n-    public PagedResult<TaskExecTO> listExecutions(final TaskExecQuery query) {\n+    public PagedResult<ExecTO> listExecutions(final TaskExecQuery query) {\n         return buildPagedResult(\n                 logic.listExecutions(\n                         query.getKey(),\n@@ -123,7 +123,7 @@ public PagedResult<TaskExecTO> listExecutions(final TaskExecQuery query) {\n     }\n \n     @Override\n-    public List<TaskExecTO> listRecentExecutions(final int max) {\n+    public List<ExecTO> listRecentExecutions(final int max) {\n         return logic.listRecentExecutions(max);\n     }\n "},{"sha":"62d9dc901d6043406b42a105f919c2b65687dbee","filename":"fit/console-reference/pom.xml","status":"modified","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -368,64 +368,6 @@ under the License.\n                   <resource>\n                     <directory>${basedir}/../../common/rest-api/target/classes</directory>\n                   </resource>\n-\n-                  <resource>\n-                    <directory>${basedir}/../../core/logic/target/classes</directory>\n-                    <excludes>\n-                      <exclude>logicContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/rest-cxf/target/classes</directory>\n-                    <excludes>\n-                      <exclude>restCXFContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/misc/target/classes</directory>\n-                    <excludes>\n-                      <exclude>securityContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/persistence-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/persistence-jpa/target/classes</directory>\n-                    <excludes>\n-                      <exclude>persistenceContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/provisioning-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/provisioning-java/target/classes</directory>\n-                    <excludes>\n-                      <exclude>provisioningContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/workflow-api/target/classes</directory>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/workflow-java/target/classes</directory>\n-                    <excludes>\n-                      <exclude>workflowContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../core/workflow-activiti/target/classes</directory>\n-                    <excludes>\n-                      <exclude>workflowActivitiContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n-                  <resource>\n-                    <directory>${basedir}/../../ext/camel/provisioning-camel/target/classes</directory>\n-                    <excludes>\n-                      <exclude>provisioningCamelContext.xml</exclude>\n-                    </excludes>\n-                  </resource>\n                   \n                   <resource>\n                     <directory>${basedir}/../../client/console/target/classes</directory>"},{"sha":"0c41d5bdef876781bc08ccf84733414f40f17b65","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -64,11 +64,11 @@ public void executeSyncTask() {\n         wicketTester.clickLink(\"body:topologyLI:topology\");\n         wicketTester.executeAjaxEvent(\"body:resources:2:resources:0:res\", Constants.ON_CLICK);\n         wicketTester.clickLink(\"body:toggle:togglePanelContainer:container:actions:synchronization\");\n-        wicketTester.clickLink(\"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:\"\n+        wicketTester.clickLink(\"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:\"\n                 + \"first:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable:\"\n                 + \"body:rows:1:cells:10:cell:panelExecute:executeLink\");\n         wicketTester.clickLink(\n-                \"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:first:\"\n+                \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:first:\"\n                 + \"container:content:startAt:togglePanelContainer:startAtForm:startAt\");\n         wicketTester.assertInfoMessages(\"Operation executed successfully\");\n     }\n@@ -78,12 +78,12 @@ public void editPushTask() {\n         wicketTester.clickLink(\"body:topologyLI:topology\");\n         wicketTester.executeAjaxEvent(\"body:resources:5:resources:0:res\", Constants.ON_CLICK);\n         wicketTester.clickLink(\"body:toggle:togglePanelContainer:container:actions:push\");\n-        wicketTester.clickLink(\"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:\"\n+        wicketTester.clickLink(\"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:\"\n                 + \"first:container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable:\"\n                 + \"body:rows:1:cells:9:cell:panelEdit:editLink\");\n \n         final FormTester formTester = wicketTester.newFormTester(\n-                \"body:toggle:outherObjectsRepeater:1:outher:form:content:\"\n+                \"body:toggle:outerObjectsRepeater:1:outer:form:content:\"\n                 + \"tasks:firstLevelContainer:first:container:content:wizard:form\");\n \n         formTester.setValue(\"view:description:textField\", \"test\");\n@@ -99,11 +99,11 @@ public void createSchedTask() {\n         wicketTester.executeAjaxEvent(\"body:syncope\", Constants.ON_CLICK);\n         wicketTester.clickLink(\"body:toggle:togglePanelContainer:container:actions:tasks\");\n         wicketTester.clickLink(\n-                \"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:first:\"\n+                \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:first:\"\n                 + \"container:content:add\");\n \n         FormTester formTester = wicketTester.newFormTester(\n-                \"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:first:\"\n+                \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:first:\"\n                 + \"container:content:wizard:form\");\n         formTester.setValue(\"view:name:textField\", \"test\");\n         formTester.select(\"view:jobDelegateClassName:dropDownChoiceField\", 0);\n@@ -112,11 +112,11 @@ public void createSchedTask() {\n         wicketTester.cleanupFeedbackMessages();\n \n         formTester = wicketTester.newFormTester(\n-                \"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:first:\"\n+                \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:first:\"\n                 + \"container:content:wizard:form\");\n \n         wicketTester.assertComponent(\n-                \"body:toggle:outherObjectsRepeater:1:outher:form:content:tasks:firstLevelContainer:\"\n+                \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:firstLevelContainer:\"\n                 + \"first:container:content:wizard:form:view:schedule:seconds:textField\", TextField.class);\n \n         formTester.submit(\"buttons:finish\");"},{"sha":"00ce952d1b45b6b7f338f0ce10da7452cd8642ba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":11,"deletions":18,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -24,9 +24,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n@@ -36,9 +34,9 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -53,7 +51,7 @@ public abstract class AbstractTaskITCase extends AbstractITCase {\n \n     protected static final Long SCHED_TASK_ID = 5L;\n \n-    protected static class ThreadExec implements Callable<TaskExecTO> {\n+    protected static class ThreadExec implements Callable<ExecTO> {\n \n         private final TaskService taskService;\n \n@@ -73,7 +71,7 @@ public ThreadExec(\n         }\n \n         @Override\n-        public TaskExecTO call() throws Exception {\n+        public ExecTO call() throws Exception {\n             return execProvisioningTask(taskService, taskKey, maxWaitSeconds, dryRun);\n         }\n     }\n@@ -93,15 +91,15 @@ protected void removeTestUsers() {\n         }\n     }\n \n-    protected static TaskExecTO execTask(final TaskService taskService, final Long taskKey, final String initialStatus,\n+    protected static ExecTO execTask(final TaskService taskService, final Long taskKey, final String initialStatus,\n             final int maxWaitSeconds, final boolean dryRun) {\n \n         AbstractTaskTO taskTO = taskService.read(taskKey, true);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n         int preSyncSize = taskTO.getExecutions().size();\n-        TaskExecTO execution = taskService.execute(\n+        ExecTO execution = taskService.execute(\n                 new ExecuteQuery.Builder().key(taskTO.getKey()).dryRun(dryRun).build());\n         assertEquals(initialStatus, execution.getStatus());\n \n@@ -128,23 +126,23 @@ protected static TaskExecTO execTask(final TaskService taskService, final Long t\n         return taskTO.getExecutions().get(taskTO.getExecutions().size() - 1);\n     }\n \n-    public static TaskExecTO execProvisioningTask(\n+    public static ExecTO execProvisioningTask(\n             final TaskService taskService, final Long taskKey, final int maxWaitSeconds, final boolean dryRun) {\n \n         return execTask(taskService, taskKey, \"JOB_FIRED\", maxWaitSeconds, dryRun);\n     }\n \n-    protected static TaskExecTO execNotificationTask(\n+    protected static ExecTO execNotificationTask(\n             final TaskService taskService, final Long taskKey, final int maxWaitSeconds) {\n \n         return execTask(taskService, taskKey, NotificationJob.Status.SENT.name(), maxWaitSeconds, false);\n     }\n \n-    protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskService,\n+    protected void execProvisioningTasks(final TaskService taskService,\n             final Set<Long> taskKeys, final int maxWaitSeconds, final boolean dryRun) throws Exception {\n \n         ExecutorService service = Executors.newFixedThreadPool(taskKeys.size());\n-        List<Future<TaskExecTO>> futures = new ArrayList<>();\n+        List<Future<ExecTO>> futures = new ArrayList<>();\n \n         for (Long key : taskKeys) {\n             futures.add(service.submit(new ThreadExec(taskService, key, maxWaitSeconds, dryRun)));\n@@ -155,16 +153,11 @@ protected Map<Long, TaskExecTO> execProvisioningTasks(final TaskService taskServ\n             }\n         }\n \n-        Map<Long, TaskExecTO> res = new HashMap<>();\n-\n-        for (Future<TaskExecTO> future : futures) {\n-            TaskExecTO taskExecTO = future.get(100, TimeUnit.SECONDS);\n-            res.put(taskExecTO.getTask(), taskExecTO);\n+        for (Future<ExecTO> future : futures) {\n+            future.get(100, TimeUnit.SECONDS);\n         }\n \n         service.shutdownNow();\n-\n-        return res;\n     }\n \n     protected NotificationTaskTO findNotificationTaskBySender(final String sender) {"},{"sha":"bfbf63d842ef099eb1db60f8bdd518359c899df1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -204,7 +204,7 @@ public void createResourceAndSync() {\n         assertNotNull(resource);\n \n         // synchronize\n-        TaskExecTO execution = AbstractTaskITCase.execProvisioningTask(\n+        ExecTO execution = AbstractTaskITCase.execProvisioningTask(\n                 adminClient.getService(TaskService.class), task.getKey(), 50, false);\n \n         // verify execution status"},{"sha":"a2852bcf2e6820ff036ee0d074e6e5691716f54d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -197,7 +197,7 @@ public void notifyByMailWithRetry() throws Exception {\n             assertNotNull(taskTO);\n             assertFalse(taskTO.isExecuted());\n             assertFalse(taskTO.getExecutions().isEmpty());\n-            for (TaskExecTO exec : taskTO.getExecutions()) {\n+            for (ExecTO exec : taskTO.getExecutions()) {\n                 assertEquals(NotificationJob.Status.NOT_SENT.name(), exec.getStatus());\n             }\n         } finally {"},{"sha":"6868d7b9c0ab6b63cc77640caf0f00571c996f7a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -143,7 +143,7 @@ public void issueSYNCOPE741() {\n         assertFalse(task.getExecutions().isEmpty());\n \n         // check list executions\n-        PagedResult<TaskExecTO> execs = taskService.listExecutions(\n+        PagedResult<ExecTO> execs = taskService.listExecutions(\n                 new TaskExecQuery.Builder().key(1L).page(1).size(2).build());\n         assertTrue(execs.getTotalCount() >= execs.getResult().size());\n     }"},{"sha":"90c98e8ce4413d8d8183a30c78670c0fb9cc0c4f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PushTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPushTaskITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisionTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -327,7 +327,7 @@ public void issueSYNCOPE598() {\n             assertNotNull(push);\n \n             // execute the new task\n-            TaskExecTO pushExec = execProvisioningTask(taskService, push.getKey(), 50, false);\n+            ExecTO pushExec = execProvisioningTask(taskService, push.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(pushExec.getStatus()));\n         } finally {\n             groupService.delete(groupTO.getKey());"},{"sha":"ff32f2c41b64ad5dbcafa28cb2b5817895acc5cc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.LoggerTO;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n@@ -149,7 +149,7 @@ public void delete() {\n     }\n \n     private Long execute(final Long reportKey) {\n-        ReportExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n+        ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n         assertNotNull(execution);\n \n         int i = 0;\n@@ -294,7 +294,7 @@ public void issueSYNCOPE43() {\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n-        ReportExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n+        ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n         assertNotNull(execution);\n \n         int maxit = 50;\n@@ -323,7 +323,7 @@ public void issueSYNCOPE102() throws IOException {\n \n         // Execute (multiple requests)\n         for (int i = 0; i < 10; i++) {\n-            ReportExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n+            ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n             assertNotNull(execution);\n         }\n "},{"sha":"e3283a03a1b7a1975e6c8e0f85fff138c3b01e5f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n@@ -123,7 +123,7 @@ public void deferred() {\n             i++;\n         } while (task.getExecutions().isEmpty() && i < maxit);\n \n-        PagedResult<TaskExecTO> execs =\n+        PagedResult<ExecTO> execs =\n                 taskService.listExecutions(new TaskExecQuery.Builder().key(task.getKey()).build());\n         assertEquals(1, execs.getTotalCount());\n         assertTrue(execs.getResult().get(0).getStart().after(initial));\n@@ -198,7 +198,7 @@ public boolean evaluate(final JobTO job) {\n         } while (jobs.size() < 1 && i < maxit);\n \n         assertEquals(1, jobs.size());\n-        assertEquals(task.getKey(), jobs.get(0).getReferenceKey(), 0);\n+        assertEquals(\"SCHEDULED Task \" + task.getKey() + \" \" + task.getName(), jobs.get(0).getReference());\n \n         taskService.actionJob(task.getKey(), JobAction.STOP);\n "},{"sha":"27478eb23af99eda31884acf7bb844308a297b4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SyncTaskITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c102dd24a0d5cc4e185ae684ad7ac39573b4469f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSyncTaskITCase.java?ref=c102dd24a0d5cc4e185ae684ad7ac39573b4469f","patch":"@@ -56,7 +56,7 @@\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n-import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -258,9 +258,9 @@ public boolean evaluate(final AttrTO attributeTO) {\n \n     @Test\n     public void dryRun() {\n-        TaskExecTO execution = execProvisioningTask(taskService, SYNC_TASK_ID, 50, true);\n+        ExecTO execution = execProvisioningTask(taskService, SYNC_TASK_ID, 50, true);\n         assertEquals(\n-                \"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n+                \"Execution of \" + execution.getReference() + \" failed with message \" + execution.getMessage(),\n                 \"SUCCESS\", execution.getStatus());\n     }\n \n@@ -269,7 +269,7 @@ public void reconcileFromDB() {\n         UserTO userTO = null;\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         try {\n-            TaskExecTO execution = execProvisioningTask(taskService, 7L, 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, 7L, 50, false);\n             assertNotNull(execution.getStatus());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n@@ -337,7 +337,7 @@ public void reconcileFromLDAP() {\n         ldapCleanup();\n \n         // 0. synchronize\n-        TaskExecTO execution = execProvisioningTask(taskService, 11L, 50, false);\n+        ExecTO execution = execProvisioningTask(taskService, 11L, 50, false);\n \n         // 1. verify execution status\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n@@ -475,7 +475,7 @@ public void filteredReconciliation() {\n                     task.getReconciliationFilterBuilderClassName());\n \n             // 3. exec task\n-            TaskExecTO execution = execProvisioningTask(taskService, task.getKey(), 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, task.getKey(), 50, false);\n             assertNotNull(execution.getStatus());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n@@ -554,7 +554,7 @@ public void issueSYNCOPE68() {\n             assertFalse(actual.getTemplates().get(AnyTypeKind.USER.name()).getResources().isEmpty());\n             assertFalse(((UserTO) actual.getTemplates().get(AnyTypeKind.USER.name())).getMemberships().isEmpty());\n \n-            TaskExecTO execution = execProvisioningTask(taskService, actual.getKey(), 50, false);\n+            ExecTO execution = execProvisioningTask(taskService, actual.getKey(), 50, false);\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n             userTO = readUser(\"testuser2\");\n@@ -661,7 +661,7 @@ public void issueSYNCOPE272() {\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n-            TaskExecTO taskExecTO = execProvisioningTask(taskService, 24L, 50, false);\n+            ExecTO taskExecTO = execProvisioningTask(taskService, 24L, 50, false);\n \n             assertNotNull(taskExecTO.getStatus());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(taskExecTO.getStatus()));\n@@ -768,7 +768,7 @@ public void issueSYNCOPE313DB() throws Exception {\n         assertEquals(actual.getKey(), syncTask.getKey());\n         assertEquals(actual.getJobDelegateClassName(), syncTask.getJobDelegateClassName());\n \n-        TaskExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n+        ExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n         // 5. Test the sync'd user\n@@ -837,7 +837,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         syncTask = getObject(taskResponse.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(syncTask);\n \n-        TaskExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n+        ExecTO execution = execProvisioningTask(taskService, syncTask.getKey(), 50, false);\n         assertEquals(PropagationTaskExecStatus.SUCCESS, PropagationTaskExecStatus.valueOf(execution.getStatus()));\n \n         // 7. Test the sync'd user"}]}