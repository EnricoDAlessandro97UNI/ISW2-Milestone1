{"sha":"deac686f90acd387486824d0402bebdf72defd00","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRlYWM2ODZmOTBhY2QzODc0ODY4MjRkMDQwMmJlYmRmNzJkZWZkMDA=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-02-03T16:28:57Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-02-03T16:28:57Z"},"message":"[SYNCOPE-1007] fix for fiql generation in case of incomplete condition","tree":{"sha":"d7c784d41e4045484482d706ef3ebb672f60ba95","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d7c784d41e4045484482d706ef3ebb672f60ba95"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/deac686f90acd387486824d0402bebdf72defd00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/deac686f90acd387486824d0402bebdf72defd00","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/deac686f90acd387486824d0402bebdf72defd00","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/deac686f90acd387486824d0402bebdf72defd00/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"e9366d753ab2ee110029d86f4f1500c0a1a401cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e9366d753ab2ee110029d86f4f1500c0a1a401cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e9366d753ab2ee110029d86f4f1500c0a1a401cd"}],"stats":{"total":257,"additions":132,"deletions":125},"files":[{"sha":"4e5181a2cd0725ec0d627f0b5129c4569063d34b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":127,"deletions":123,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/deac686f90acd387486824d0402bebdf72defd00/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/deac686f90acd387486824d0402bebdf72defd00/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=deac686f90acd387486824d0402bebdf72defd00","patch":"@@ -205,160 +205,164 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n         for (SearchClause clause : clauses) {\n             prevCondition = condition;\n \n-            switch (clause.getType()) {\n-                case GROUP_MEMBER:\n-                    switch (clause.getComparator()) {\n-                        case EQUALS:\n-                            condition = ((GroupFiqlSearchConditionBuilder) builder).\n-                                    withMembers(clause.getValue());\n-                            break;\n-\n-                        case NOT_EQUALS:\n-                            condition = ((GroupFiqlSearchConditionBuilder) builder).\n-                                    withoutMembers(clause.getValue());\n-                            break;\n-\n-                        default:\n-                    }\n-                    break;\n-\n-                case GROUP_MEMBERSHIP:\n-                    if (StringUtils.isNotBlank(clause.getProperty())) {\n-                        String groupKey = clause.getProperty().split(\" \")[0];\n-\n-                        if (builder instanceof UserFiqlSearchConditionBuilder) {\n-                            condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n-                                    ? ((UserFiqlSearchConditionBuilder) builder).inGroups(groupKey)\n-                                    : ((UserFiqlSearchConditionBuilder) builder).notInGroups(groupKey);\n-                        } else {\n-                            condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n-                                    ? ((AnyObjectFiqlSearchConditionBuilder) builder).inGroups(groupKey)\n-                                    : ((AnyObjectFiqlSearchConditionBuilder) builder).notInGroups(groupKey);\n-                        }\n-                    }\n-                    break;\n-\n-                case RESOURCE:\n-                    if (StringUtils.isNotBlank(clause.getProperty())) {\n-                        condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n-                                ? builder.hasResources(clause.getProperty())\n-                                : builder.hasNotResources(clause.getProperty());\n-                    }\n-                    break;\n-\n-                case ATTRIBUTE:\n-                    if (StringUtils.isNotBlank(clause.getProperty())) {\n-                        SyncopeProperty property = builder.is(clause.getProperty());\n+            if (clause.getType() != null) {\n+                switch (clause.getType()) {\n+                    case GROUP_MEMBER:\n                         switch (clause.getComparator()) {\n-                            case IS_NULL:\n-                                condition = builder.isNull(clause.getProperty());\n-                                break;\n-\n-                            case IS_NOT_NULL:\n-                                condition = builder.isNotNull(clause.getProperty());\n-                                break;\n-\n-                            case LESS_THAN:\n-                                condition = StringUtils.isNumeric(clause.getProperty())\n-                                        ? property.lessThan(NumberUtils.toDouble(clause.getValue()))\n-                                        : property.lexicalBefore(clause.getValue());\n-                                break;\n-\n-                            case LESS_OR_EQUALS:\n-                                condition = StringUtils.isNumeric(clause.getProperty())\n-                                        ? property.lessOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n-                                        : property.lexicalNotAfter(clause.getValue());\n-                                break;\n-\n-                            case GREATER_THAN:\n-                                condition = StringUtils.isNumeric(clause.getProperty())\n-                                        ? property.greaterThan(NumberUtils.toDouble(clause.getValue()))\n-                                        : property.lexicalAfter(clause.getValue());\n-                                break;\n-\n-                            case GREATER_OR_EQUALS:\n-                                condition = StringUtils.isNumeric(clause.getProperty())\n-                                        ? property.greaterOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n-                                        : property.lexicalNotBefore(clause.getValue());\n+                            case EQUALS:\n+                                condition = ((GroupFiqlSearchConditionBuilder) builder).\n+                                        withMembers(clause.getValue());\n                                 break;\n \n                             case NOT_EQUALS:\n-                                condition = property.notEqualTolIgnoreCase(clause.getValue());\n+                                condition = ((GroupFiqlSearchConditionBuilder) builder).\n+                                        withoutMembers(clause.getValue());\n                                 break;\n \n-                            case EQUALS:\n                             default:\n-                                condition = property.equalToIgnoreCase(clause.getValue());\n-                                break;\n                         }\n-                    }\n-                    break;\n+                        break;\n+\n+                    case GROUP_MEMBERSHIP:\n+                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                            String groupKey = clause.getProperty().split(\" \")[0];\n+\n+                            if (builder instanceof UserFiqlSearchConditionBuilder) {\n+                                condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                        ? ((UserFiqlSearchConditionBuilder) builder).inGroups(groupKey)\n+                                        : ((UserFiqlSearchConditionBuilder) builder).notInGroups(groupKey);\n+                            } else {\n+                                condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                        ? ((AnyObjectFiqlSearchConditionBuilder) builder).inGroups(groupKey)\n+                                        : ((AnyObjectFiqlSearchConditionBuilder) builder).notInGroups(groupKey);\n+                            }\n+                        }\n+                        break;\n \n-                case ROLE_MEMBERSHIP:\n-                    if (StringUtils.isNotBlank(clause.getProperty())) {\n-                        switch (clause.getComparator()) {\n-                            case EQUALS:\n-                                condition = ((UserFiqlSearchConditionBuilder) builder).inRoles(clause.getProperty());\n-                                break;\n-                            case NOT_EQUALS:\n-                                condition = ((UserFiqlSearchConditionBuilder) builder).notInRoles(clause.getProperty());\n-                                break;\n-                            default:\n-                                break;\n+                    case RESOURCE:\n+                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                            condition = clause.getComparator() == SearchClause.Comparator.EQUALS\n+                                    ? builder.hasResources(clause.getProperty())\n+                                    : builder.hasNotResources(clause.getProperty());\n                         }\n-                    }\n-                    break;\n+                        break;\n \n-                case RELATIONSHIP:\n-                    if (StringUtils.isNotBlank(clause.getProperty())) {\n-                        if (builder instanceof UserFiqlSearchConditionBuilder) {\n+                    case ATTRIBUTE:\n+                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                            SyncopeProperty property = builder.is(clause.getProperty());\n                             switch (clause.getComparator()) {\n+                                case IS_NULL:\n+                                    condition = builder.isNull(clause.getProperty());\n+                                    break;\n+\n                                 case IS_NOT_NULL:\n-                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            inRelationshipTypes(clause.getProperty());\n+                                    condition = builder.isNotNull(clause.getProperty());\n                                     break;\n-                                case IS_NULL:\n-                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            notInRelationshipTypes(clause.getProperty());\n+\n+                                case LESS_THAN:\n+                                    condition = StringUtils.isNumeric(clause.getProperty())\n+                                            ? property.lessThan(NumberUtils.toDouble(clause.getValue()))\n+                                            : property.lexicalBefore(clause.getValue());\n                                     break;\n-                                case EQUALS:\n-                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            inRelationships(clause.getValue());\n+\n+                                case LESS_OR_EQUALS:\n+                                    condition = StringUtils.isNumeric(clause.getProperty())\n+                                            ? property.lessOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n+                                            : property.lexicalNotAfter(clause.getValue());\n+                                    break;\n+\n+                                case GREATER_THAN:\n+                                    condition = StringUtils.isNumeric(clause.getProperty())\n+                                            ? property.greaterThan(NumberUtils.toDouble(clause.getValue()))\n+                                            : property.lexicalAfter(clause.getValue());\n                                     break;\n+\n+                                case GREATER_OR_EQUALS:\n+                                    condition = StringUtils.isNumeric(clause.getProperty())\n+                                            ? property.greaterOrEqualTo(NumberUtils.toDouble(clause.getValue()))\n+                                            : property.lexicalNotBefore(clause.getValue());\n+                                    break;\n+\n                                 case NOT_EQUALS:\n-                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n-                                            notInRelationships(clause.getValue());\n+                                    condition = property.notEqualTolIgnoreCase(clause.getValue());\n                                     break;\n+\n+                                case EQUALS:\n                                 default:\n+                                    condition = property.equalToIgnoreCase(clause.getValue());\n                                     break;\n                             }\n-                        } else {\n+                        }\n+                        break;\n+\n+                    case ROLE_MEMBERSHIP:\n+                        if (StringUtils.isNotBlank(clause.getProperty())) {\n                             switch (clause.getComparator()) {\n-                                case IS_NOT_NULL:\n-                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            inRelationshipTypes(clause.getProperty());\n-                                    break;\n-                                case IS_NULL:\n-                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            notInRelationshipTypes(clause.getProperty());\n-                                    break;\n                                 case EQUALS:\n-                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            inRelationships(clause.getValue());\n+                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                            inRoles(clause.getProperty());\n                                     break;\n                                 case NOT_EQUALS:\n-                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n-                                            notInRelationships(clause.getValue());\n+                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                            notInRoles(clause.getProperty());\n                                     break;\n                                 default:\n                                     break;\n                             }\n                         }\n-                    }\n-                    break;\n+                        break;\n+\n+                    case RELATIONSHIP:\n+                        if (StringUtils.isNotBlank(clause.getProperty())) {\n+                            if (builder instanceof UserFiqlSearchConditionBuilder) {\n+                                switch (clause.getComparator()) {\n+                                    case IS_NOT_NULL:\n+                                        condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                                inRelationshipTypes(clause.getProperty());\n+                                        break;\n+                                    case IS_NULL:\n+                                        condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                                notInRelationshipTypes(clause.getProperty());\n+                                        break;\n+                                    case EQUALS:\n+                                        condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                                inRelationships(clause.getValue());\n+                                        break;\n+                                    case NOT_EQUALS:\n+                                        condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                                notInRelationships(clause.getValue());\n+                                        break;\n+                                    default:\n+                                        break;\n+                                }\n+                            } else {\n+                                switch (clause.getComparator()) {\n+                                    case IS_NOT_NULL:\n+                                        condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                                inRelationshipTypes(clause.getProperty());\n+                                        break;\n+                                    case IS_NULL:\n+                                        condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                                notInRelationshipTypes(clause.getProperty());\n+                                        break;\n+                                    case EQUALS:\n+                                        condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                                inRelationships(clause.getValue());\n+                                        break;\n+                                    case NOT_EQUALS:\n+                                        condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                                notInRelationships(clause.getValue());\n+                                        break;\n+                                    default:\n+                                        break;\n+                                }\n+                            }\n+                        }\n+                        break;\n \n-                default:\n-                    break;\n+                    default:\n+                        break;\n+                }\n             }\n \n             if (notTheFirst) {"},{"sha":"f64a345fa1f056ad63a1d18928a3890713c981f0","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWrapper.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/deac686f90acd387486824d0402bebdf72defd00/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/deac686f90acd387486824d0402bebdf72defd00/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWrapper.java?ref=deac686f90acd387486824d0402bebdf72defd00","patch":"@@ -76,8 +76,11 @@ public Map<String, String> getADynMembershipConds() {\n         if (this.aDynClauses != null && !this.aDynClauses.isEmpty()) {\n             for (Map.Entry<String, List<SearchClause>> entry : this.aDynClauses.entrySet()) {\n                 if (CollectionUtils.isNotEmpty(entry.getValue())) {\n-                    res.put(entry.getKey(), SearchUtils.buildFIQL(entry.getValue(),\n-                            SyncopeClient.getAnyObjectSearchConditionBuilder(entry.getKey())));\n+                    final String fiql = SearchUtils.buildFIQL(entry.getValue(),\n+                            SyncopeClient.getAnyObjectSearchConditionBuilder(entry.getKey()));\n+                    if (fiql != null) {\n+                        res.put(entry.getKey(), fiql);\n+                    }\n                 }\n             }\n         }"}]}