{"sha":"feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZlYjZiNjY5N2YwY2Q4MzM4Y2NlNGE2ZDg1OWFhYWE2ZjEwZmE5ZmY=","commit":{"author":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T16:30:26Z"},"committer":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T16:30:26Z"},"message":"sonar: fix unchecked casts\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1332743 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ba9c8e178ac8482e2ac16ba093a5720eee93bc1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8ba9c8e178ac8482e2ac16ba093a5720eee93bc1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/comments","author":null,"committer":null,"parents":[{"sha":"22be265678705f9a4e0e1908c160ad219a575759","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22be265678705f9a4e0e1908c160ad219a575759","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22be265678705f9a4e0e1908c160ad219a575759"}],"stats":{"total":69,"additions":45,"deletions":24},"files":[{"sha":"66d24cd592573308435e850a9c2dab687c590270","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","patch":"@@ -38,21 +38,16 @@\n public class MAttr extends AbstractAttr {\n \n     private static final long serialVersionUID = 3755864809152866489L;\n-\n     @Id\n     private Long id;\n-\n     @ManyToOne(fetch = FetchType.EAGER)\n     private Membership owner;\n-\n     @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"schema_name\")\n     private MSchema schema;\n-\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<MAttrValue> values;\n-\n     @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n     @Valid\n     private MAttrUniqueValue uniqueValue;\n@@ -74,6 +69,9 @@ public <T extends AbstractAttributable> T getOwner() {\n \n     @Override\n     public <T extends AbstractAttributable> void setOwner(T owner) {\n+        if (!(owner instanceof Membership)) {\n+            throw new ClassCastException(\"owner is expected to be typed Membership: \" + owner.getClass().getName());\n+        }\n         this.owner = (Membership) owner;\n     }\n \n@@ -84,19 +82,26 @@ public <T extends AbstractSchema> T getSchema() {\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(T schema) {\n+        if (!(schema instanceof MSchema)) {\n+            throw new ClassCastException(\"schema is expected to be typed MSchema: \" + schema.getClass().getName());\n+        }\n         this.schema = (MSchema) schema;\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n-\n+        if (!(attributeValue instanceof MAttrValue)) {\n+            throw new ClassCastException(\"attributeValue is expected to be typed MAttrValue: \" + attributeValue.getClass().getName());\n+        }\n         attributeValue.setAttribute(this);\n         return values.add((MAttrValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue) {\n-\n+        if (!(attributeValue instanceof MAttrValue)) {\n+            throw new ClassCastException(\"attributeValue is expected to be typed MAttrValue: \" + attributeValue.getClass().getName());\n+        }\n         boolean result = values.remove((MAttrValue) attributeValue);\n         attributeValue.setAttribute(null);\n         return result;\n@@ -126,7 +131,9 @@ public <T extends AbstractAttrValue> T getUniqueValue() {\n \n     @Override\n     public <T extends AbstractAttrValue> void setUniqueValue(final T uniqueAttributeValue) {\n-\n+        if (!(uniqueAttributeValue instanceof MAttrUniqueValue)) {\n+            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed MAttrUniqueValue: \" + uniqueAttributeValue.getClass().getName());\n+        }\n         this.uniqueValue = (MAttrUniqueValue) uniqueAttributeValue;\n     }\n }"},{"sha":"274f5345123b8dec820e26263eaed0b31dbaf362","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","patch":"@@ -38,21 +38,16 @@\n public class RAttr extends AbstractAttr {\n \n     private static final long serialVersionUID = 2848159565890995780L;\n-\n     @Id\n     private Long id;\n-\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeRole owner;\n-\n     @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"schema_name\")\n     private RSchema schema;\n-\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<RAttrValue> values;\n-\n     @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n     @Valid\n     private RAttrUniqueValue uniqueValue;\n@@ -74,6 +69,9 @@ public <T extends AbstractAttributable> T getOwner() {\n \n     @Override\n     public <T extends AbstractAttributable> void setOwner(T owner) {\n+        if (!(owner instanceof SyncopeRole)) {\n+            throw new ClassCastException(\"owner is expected to be typed SyncopeRole: \" + owner.getClass().getName());\n+        }\n         this.owner = (SyncopeRole) owner;\n     }\n \n@@ -84,18 +82,25 @@ public <T extends AbstractSchema> T getSchema() {\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(T schema) {\n+        if (!(schema instanceof RSchema)) {\n+            throw new ClassCastException(\"schema is expected to be typed RSchema: \" + schema.getClass().getName());\n+        }\n         this.schema = (RSchema) schema;\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n-\n+        if (!(attributeValue instanceof RAttrValue)) {\n+            throw new ClassCastException(\"attributeValue is expected to be typed RAttrValue: \" + attributeValue.getClass().getName());\n+        }\n         return values.add((RAttrValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue) {\n-\n+        if (!(attributeValue instanceof RAttrValue)) {\n+            throw new ClassCastException(\"attributeValue is expected to be typed RAttrValue: \" + attributeValue.getClass().getName());\n+        }\n         return values.remove((RAttrValue) attributeValue);\n     }\n \n@@ -123,7 +128,9 @@ public <T extends AbstractAttrValue> T getUniqueValue() {\n \n     @Override\n     public <T extends AbstractAttrValue> void setUniqueValue(final T uniqueAttributeValue) {\n-\n+        if (!(uniqueAttributeValue instanceof RAttrUniqueValue)) {\n+            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed RAttrUniqueValue: \" + uniqueAttributeValue.getClass().getName());\n+        }\n         this.uniqueValue = (RAttrUniqueValue) uniqueAttributeValue;\n     }\n }"},{"sha":"f01a33a806a58d6253153073e01257c4857ad7c6","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=feb6b6697f0cd8338cce4a6d859aaaa6f10fa9ff","patch":"@@ -41,33 +41,28 @@\n public class UAttr extends AbstractAttr {\n \n     private static final long serialVersionUID = 6333601983691157406L;\n-\n     /**\n      * Auto-generated id for this table.\n      */\n     @Id\n     private Long id;\n-\n     /**\n      * The owner of this attribute.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n-\n     /**\n      * The schema of this attribute.\n      */\n     @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"schema_name\")\n     private USchema schema;\n-\n     /**\n      * Values of this attribute (if schema is not UNIQUE).\n      */\n     @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n     @Valid\n     private List<UAttrValue> values;\n-\n     /**\n      * Value of this attribute (if schema is UNIQUE).\n      */\n@@ -95,6 +90,9 @@ public <T extends AbstractAttributable> T getOwner() {\n \n     @Override\n     public <T extends AbstractAttributable> void setOwner(final T owner) {\n+        if (!(owner instanceof SyncopeUser)) {\n+            throw new ClassCastException(\"owner is expected to be typed SyncopeUser: \" + owner.getClass().getName());\n+        }\n         this.owner = (SyncopeUser) owner;\n     }\n \n@@ -105,18 +103,25 @@ public <T extends AbstractSchema> T getSchema() {\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(final T schema) {\n+        if (!(schema instanceof USchema)) {\n+            throw new ClassCastException(\"schema is expected to be typed USchema: \" + schema.getClass().getName());\n+        }\n         this.schema = (USchema) schema;\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean addValue(final T attributeValue) {\n-\n+        if (!(attributeValue instanceof UAttrValue)) {\n+            throw new ClassCastException(\"attributeValue is expected to be typed UAttrValue: \" + attributeValue.getClass().getName());\n+        }\n         return values.add((UAttrValue) attributeValue);\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue) {\n-\n+        if (!(attributeValue instanceof UAttrValue)) {\n+            throw new ClassCastException(\"attributeValue is expected to be typed UAttrValue: \" + attributeValue.getClass().getName());\n+        }\n         return values.remove((UAttrValue) attributeValue);\n     }\n \n@@ -144,7 +149,9 @@ public <T extends AbstractAttrValue> T getUniqueValue() {\n \n     @Override\n     public <T extends AbstractAttrValue> void setUniqueValue(final T uniqueAttributeValue) {\n-\n+        if (!(uniqueAttributeValue instanceof UAttrUniqueValue)) {\n+            throw new ClassCastException(\"uniqueAttributeValue is expected to be typed UAttrUniqueValue: \" + uniqueAttributeValue.getClass().getName());\n+        }\n         this.uniqueValue = (UAttrUniqueValue) uniqueAttributeValue;\n     }\n }"}]}