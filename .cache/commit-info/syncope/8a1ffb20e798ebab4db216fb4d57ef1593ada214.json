{"sha":"8a1ffb20e798ebab4db216fb4d57ef1593ada214","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhhMWZmYjIwZTc5OGViYWI0ZGIyMTZmYjRkNTdlZjE1OTNhZGEyMTQ=","commit":{"author":{"name":"Misagh Moayyed","email":"misagh.moayyed@gmail.com","date":"2021-03-15T10:51:52Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-03-15T10:51:52Z"},"message":"Upgrade to CAS 6.4 RC2 and pac4j v5 RC2 (#244)\n\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@users.noreply.github.com>","tree":{"sha":"c218df43bde477769682e1722a652d9302b007a4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c218df43bde477769682e1722a652d9302b007a4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8a1ffb20e798ebab4db216fb4d57ef1593ada214","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTzxICRBK7hj4Ov3rIwAAdHIIAK+5Lu829FdK+QYLfTYXHVKF\nPrhMdE412G7zM/DDazlYzZGhW1V4+nohRY/zrkHq2+F2/+/unfhJfOeYmuZiM5r4\nfE44h+zlQThH8KYabPmGIT+GJSilE7WAnmJ4omqFzwv+9HXBKdcqtJJhbpKvon2w\n0j74sAOZ9rO4VeIsweX0QlE58smtDizpK7Nf5gjuJO509VUQP7++IpGiDnVwfzWS\nlxgcVggjEW1nmvLP0O9NYeacmR45UkyaAwhSxZcVR6YVd1KPT5zcBjo2xswlboNL\n6A0EFxtjh1pUSw7vzMvIeXTwp0LY0zaUQtph+ns3kSSrlkcEnOB/LPttOWr5vnM=\n=/eWB\n-----END PGP SIGNATURE-----\n","payload":"tree c218df43bde477769682e1722a652d9302b007a4\nparent 322295019120c83a071d5d3980f31c89808bd1ae\nauthor Misagh Moayyed <misagh.moayyed@gmail.com> 1615805512 +0330\ncommitter GitHub <noreply@github.com> 1615805512 +0330\n\nUpgrade to CAS 6.4 RC2 and pac4j v5 RC2 (#244)\n\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@users.noreply.github.com>"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a1ffb20e798ebab4db216fb4d57ef1593ada214","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a1ffb20e798ebab4db216fb4d57ef1593ada214","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a1ffb20e798ebab4db216fb4d57ef1593ada214/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"322295019120c83a071d5d3980f31c89808bd1ae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/322295019120c83a071d5d3980f31c89808bd1ae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/322295019120c83a071d5d3980f31c89808bd1ae"}],"stats":{"total":402,"additions":247,"deletions":155},"files":[{"sha":"f58bbb154de26bea6768720f6d9d8274da121da6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/bootstrap/dialog/BaseModal.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -382,6 +382,7 @@ private String addCloseHandlerScript(final String markupId, final String script)\n      * {@link BaseModal#setWindowClosedCallback(BaseModal.WindowClosedCallback)}, no ajax\n      * request will be fired.\n      */\n+    @FunctionalInterface\n     public interface WindowClosedCallback extends IClusterable {\n \n         /**"},{"sha":"0c4b0ed5a71847529bce0a66f79c8de9fd652253","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SAML2IdPAuthModuleConf.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSAML2IdPAuthModuleConf.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -67,14 +67,14 @@ public class SAML2IdPAuthModuleConf extends AbstractAuthModuleConf {\n      * will accept assertions based on a previous authentication for one hour.\n      * You can adjust this behavior by modifying this setting. The unit of time here is seconds.\n      */\n-    private int maximumAuthenticationLifetime = 3600;\n+    private String maximumAuthenticationLifetime = \"PT3600S\";\n \n     /**\n      * Maximum skew in seconds between SP and IDP clocks.\n      * This skew is added onto the {@code NotOnOrAfter} field in seconds\n      * for the SAML response validation.\n      */\n-    private int acceptedSkew = 300;\n+    private String acceptedSkew = \"PT300S\";\n \n     /**\n      * The entity id of the SP that is used in the SP metadata generation process.\n@@ -224,19 +224,19 @@ public void setIdentityProviderMetadataPath(final String identityProviderMetadat\n         this.identityProviderMetadataPath = identityProviderMetadataPath;\n     }\n \n-    public int getMaximumAuthenticationLifetime() {\n+    public String getMaximumAuthenticationLifetime() {\n         return maximumAuthenticationLifetime;\n     }\n \n-    public void setMaximumAuthenticationLifetime(final int maximumAuthenticationLifetime) {\n+    public void setMaximumAuthenticationLifetime(final String maximumAuthenticationLifetime) {\n         this.maximumAuthenticationLifetime = maximumAuthenticationLifetime;\n     }\n \n-    public int getAcceptedSkew() {\n+    public String getAcceptedSkew() {\n         return acceptedSkew;\n     }\n \n-    public void setAcceptedSkew(final int acceptedSkew) {\n+    public void setAcceptedSkew(final String acceptedSkew) {\n         this.acceptedSkew = acceptedSkew;\n     }\n "},{"sha":"1966dc2257f0d76ffe396a287e2ee2541f5bf955","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import org.apache.syncope.common.lib.BaseBean;\n \n+@FunctionalInterface\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AuthPolicyConf extends BaseBean {\n "},{"sha":"f4f70e6514c2587b41c919dfa0cb30f05a49e9be","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataService.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -38,6 +38,7 @@\n /**\n  * REST operations for SAML 2.0 IdP metadata.\n  */\n+@FunctionalInterface\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),"},{"sha":"874c175fc6c889b883c11caa5b08f232cf48c738","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPKeystoreService.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -38,6 +38,7 @@\n /**\n  * REST operations for SAML 2.0 SP Keystore.\n  */\n+@FunctionalInterface\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),"},{"sha":"4fba699599b8a395c85300e1c19c6aaa0a0aee30","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPMetadataService.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -38,6 +38,7 @@\n /**\n  * REST operations for SAML 2.0 SP metadata.\n  */\n+@FunctionalInterface\n @Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),"},{"sha":"3210c97401e0059e5f586c1ac9e47b02c3ce4246","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AccountGetter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import java.util.function.Function;\n import org.apache.syncope.core.persistence.api.entity.user.Account;\n \n+@FunctionalInterface\n @SuppressWarnings(\"squid:S1214\")\n public interface AccountGetter extends Function<Account, Account> {\n "},{"sha":"12f74c3448089d65bbdbf26b0dd0673c9f33444d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PlainAttrGetter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n \n+@FunctionalInterface\n @SuppressWarnings(\"squid:S1214\")\n public interface PlainAttrGetter extends BiFunction<Attributable<? extends PlainAttr<?>>, String, PlainAttr<?>> {\n "},{"sha":"a4207c54a50363f90cd62599cebe5eed785700f7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisionSorter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisionSorter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisionSorter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisionSorter.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import java.util.Comparator;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n+@FunctionalInterface\n public interface ProvisionSorter extends Comparator<Provision> {\n \n }"},{"sha":"67f9ba5e65fb61c18dffbb9590acf17c3fbaf167","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/wa/WAClientAppDataBinder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n \n+@FunctionalInterface\n public interface WAClientAppDataBinder {\n \n     WAClientApp getWAClientApp(ClientApp clientApp);"},{"sha":"831dd1f4bad7dce1cd86665fe19b38525fc717ec","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/SyncopeStreamPullExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n+@FunctionalInterface\n public interface SyncopeStreamPullExecutor {\n \n     List<ProvisioningReport> pull("},{"sha":"f8242a1df258d6a03f586764435ab1fbb358259a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/SyncopeStreamPushExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n+@FunctionalInterface\n public interface SyncopeStreamPushExecutor {\n \n     List<ProvisioningReport> push("},{"sha":"28404d9a95770f708fb1e0afe6d2115aa5f04283","filename":"docker/wa/src/main/resources/application.properties","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -36,6 +36,13 @@ management.endpoint.loggers.enabled=true\n management.endpoint.refresh.enabled=true\n management.endpoint.registeredServices.enabled=true\n \n+# Cache service definitions for 5 minutes\n+cas.service-registry.cache.duration=PT5M\n+\n+# Reload services and hydrate the cache every 5 minutes\n+cas.service-registry.schedule.repeat-interval=PT5M\n+cas.service-registry.schedule.start-delay=PT30S\n+\n ##\n # Allow configuration classes to override bean definitions from Spring Boot\n #"},{"sha":"5e5d25a94495d8e0cce12ee369a437241e4c4602","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogic.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.logic.oidc.NoOpSessionStore;\n import org.apache.syncope.core.logic.oidc.OIDC4UIContext;\n import org.apache.syncope.core.logic.oidc.OIDCClientCache;\n import org.apache.syncope.core.logic.oidc.OIDCUserManager;\n@@ -56,7 +57,6 @@\n import org.apache.syncope.core.persistence.api.dao.OIDCC4UIProviderDAO;\n import org.pac4j.core.exception.http.WithLocationAction;\n import org.pac4j.oidc.client.OidcClient;\n-import org.pac4j.oidc.config.OidcConfiguration;\n import org.pac4j.oidc.credentials.OidcCredentials;\n import org.pac4j.oidc.profile.OidcProfile;\n \n@@ -84,11 +84,11 @@ public class OIDCC4UILogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private OIDCUserManager userManager;\n \n-    private OidcClient<OidcConfiguration> getOidcClient(final OIDCC4UIProvider op, final String callbackUrl) {\n+    private OidcClient getOidcClient(final OIDCC4UIProvider op, final String callbackUrl) {\n         return oidcClientClientCache.get(op.getName()).orElseGet(() -> oidcClientClientCache.add(op, callbackUrl));\n     }\n \n-    private OidcClient<OidcConfiguration> getOidcClient(final String opName, final String callbackUrl) {\n+    private OidcClient getOidcClient(final String opName, final String callbackUrl) {\n         OIDCC4UIProvider op = opDAO.findByName(opName);\n         if (op == null) {\n             throw new NotFoundException(\"OIDC Provider '\" + opName + '\\'');\n@@ -100,11 +100,11 @@ private OidcClient<OidcConfiguration> getOidcClient(final String opName, final S\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public OIDCRequest createLoginRequest(final String redirectURI, final String opName) {\n         // 1. look for OidcClient\n-        OidcClient<OidcConfiguration> oidcClient = getOidcClient(opName, redirectURI);\n+        OidcClient oidcClient = getOidcClient(opName, redirectURI);\n         oidcClient.setCallbackUrl(redirectURI);\n \n         // 2. create OIDCRequest\n-        WithLocationAction action = oidcClient.getRedirectionAction(new OIDC4UIContext()).\n+        WithLocationAction action = oidcClient.getRedirectionAction(new OIDC4UIContext(), NoOpSessionStore.INSTANCE).\n                 map(WithLocationAction.class::cast).\n                 orElseThrow(() -> {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -126,7 +126,7 @@ public OIDCLoginResponse login(final String redirectURI, final String authorizat\n         }\n \n         // 1. look for configured client\n-        OidcClient<OidcConfiguration> oidcClient = getOidcClient(opName, redirectURI);\n+        OidcClient oidcClient = getOidcClient(opName, redirectURI);\n         oidcClient.setCallbackUrl(redirectURI);\n \n         // 2. get OpenID Connect tokens\n@@ -138,7 +138,7 @@ public OIDCLoginResponse login(final String redirectURI, final String authorizat\n \n             OIDC4UIContext ctx = new OIDC4UIContext();\n \n-            oidcClient.getAuthenticator().validate(credentials, ctx);\n+            oidcClient.getAuthenticator().validate(credentials, ctx, NoOpSessionStore.INSTANCE);\n \n             idToken = credentials.getIdToken().getJWTClaimsSet();\n             idTokenHint = credentials.getIdToken().serialize();\n@@ -257,7 +257,7 @@ public OIDCRequest createLogoutRequest(final String accessToken, final String re\n         }\n \n         // 1. look for OidcClient\n-        OidcClient<OidcConfiguration> oidcClient =\n+        OidcClient oidcClient =\n                 getOidcClient((String) claimsSet.getClaim(JWT_CLAIM_OP_NAME), redirectURI);\n         oidcClient.setCallbackUrl(redirectURI);\n \n@@ -267,6 +267,7 @@ public OIDCRequest createLogoutRequest(final String accessToken, final String re\n \n         WithLocationAction action = oidcClient.getLogoutAction(\n                 new OIDC4UIContext(),\n+                NoOpSessionStore.INSTANCE,\n                 profile,\n                 redirectURI).\n                 map(WithLocationAction.class::cast)."},{"sha":"18fd27d4ad48fdec227ce48bafc5b8c6747bd942","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/NoOpLogoutHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FNoOpLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FNoOpLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FNoOpLogoutHandler.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -20,5 +20,5 @@\n \n import org.pac4j.core.logout.handler.LogoutHandler;\n \n-public class NoOpLogoutHandler implements LogoutHandler<OIDC4UIContext> {\n+public class NoOpLogoutHandler implements LogoutHandler {\n }"},{"sha":"b60a9ba250fef2382e8a30e140482063001d44e9","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/NoOpSessionStore.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FNoOpSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FNoOpSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FNoOpSessionStore.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.logic.oidc;\n \n import java.util.Optional;\n+\n+import org.pac4j.core.context.WebContext;\n import org.pac4j.core.context.session.SessionStore;\n \n-public final class NoOpSessionStore implements SessionStore<OIDC4UIContext> {\n+public final class NoOpSessionStore implements SessionStore {\n \n     public static final NoOpSessionStore INSTANCE = new NoOpSessionStore();\n \n@@ -30,40 +32,37 @@ private NoOpSessionStore() {\n     }\n \n     @Override\n-    public String getOrCreateSessionId(final OIDC4UIContext context) {\n-        return \"<NO_KEY>\";\n+    public Optional<String> getSessionId(final WebContext webContext, final boolean b) {\n+        return Optional.empty();\n     }\n \n     @Override\n-    public Optional<Object> get(final OIDC4UIContext context, final String key) {\n+    public Optional<Object> get(final WebContext webContext, final String s) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public void set(final OIDC4UIContext context, final String key, final Object value) {\n-        // nothing to do\n+    public void set(final WebContext webContext, final String s, final Object o) {\n+\n     }\n \n     @Override\n-    public boolean destroySession(final OIDC4UIContext context) {\n+    public boolean destroySession(final WebContext webContext) {\n         return true;\n     }\n \n     @Override\n-    public Optional<?> getTrackableSession(final OIDC4UIContext context) {\n+    public Optional<Object> getTrackableSession(final WebContext webContext) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public Optional<SessionStore<OIDC4UIContext>> buildFromTrackableSession(\n-            final OIDC4UIContext context,\n-            final Object trackableSession) {\n-\n+    public Optional<SessionStore> buildFromTrackableSession(final WebContext webContext, final Object o) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public boolean renewSession(final OIDC4UIContext context) {\n+    public boolean renewSession(final WebContext webContext) {\n         return false;\n     }\n }"},{"sha":"deaed5f6d73d8f73d26bc7012786dee3811bb6c3","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDC4UIContext.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDC4UIContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDC4UIContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDC4UIContext.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -25,7 +25,6 @@\n import javax.ws.rs.HttpMethod;\n import org.pac4j.core.context.Cookie;\n import org.pac4j.core.context.WebContext;\n-import org.pac4j.core.context.session.SessionStore;\n \n public class OIDC4UIContext implements WebContext {\n \n@@ -34,11 +33,6 @@ public String getRequestMethod() {\n         return HttpMethod.GET;\n     }\n \n-    @Override\n-    public SessionStore<OIDC4UIContext> getSessionStore() {\n-        return NoOpSessionStore.INSTANCE;\n-    }\n-\n     @Override\n     public Optional<String> getRequestParameter(final String name) {\n         return Optional.empty();\n@@ -51,7 +45,7 @@ public Map<String, String[]> getRequestParameters() {\n \n     @Override\n     public Optional<String> getRequestAttribute(final String name) {\n-        throw new UnsupportedOperationException();\n+        return Optional.empty();\n     }\n \n     @Override\n@@ -66,17 +60,22 @@ public Optional<String> getRequestHeader(final String name) {\n \n     @Override\n     public String getRemoteAddr() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n     public void setResponseHeader(final String name, final String value) {\n         // nothing to do\n     }\n \n+    @Override\n+    public Optional<String> getResponseHeader(final String s) {\n+        return Optional.empty();\n+    }\n+\n     @Override\n     public String getServerName() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n@@ -86,17 +85,17 @@ public int getServerPort() {\n \n     @Override\n     public String getScheme() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n     public boolean isSecure() {\n-        throw new UnsupportedOperationException();\n+        return false;\n     }\n \n     @Override\n     public String getFullRequestURL() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n@@ -111,7 +110,7 @@ public void addResponseCookie(final Cookie cookie) {\n \n     @Override\n     public String getPath() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override"},{"sha":"063e343f39f6c5146c4bb5d219b7afc110985320","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCClientCache.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -50,7 +50,7 @@ public class OIDCClientCache {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(OIDCClientCache.class);\n \n-    private final List<OidcClient<OidcConfiguration>> cache = Collections.synchronizedList(new ArrayList<>());\n+    private final List<OidcClient> cache = Collections.synchronizedList(new ArrayList<>());\n \n     private static OIDCProviderMetadata getDiscoveryDocument(final String issuer) {\n         String discoveryDocumentURL = issuer + \"/.well-known/openid-configuration\";\n@@ -86,11 +86,11 @@ public static void importMetadata(final OIDCC4UIProviderTO opTO) {\n                 Optional.ofNullable(metadata.getEndSessionEndpointURI()).map(URI::toASCIIString).orElse(null));\n     }\n \n-    public Optional<OidcClient<OidcConfiguration>> get(final String opName) {\n+    public Optional<OidcClient> get(final String opName) {\n         return cache.stream().filter(c -> opName.equals(c.getName())).findFirst();\n     }\n \n-    public OidcClient<OidcConfiguration> add(final OIDCC4UIProvider op, final String callbackUrl) {\n+    public OidcClient add(final OIDCC4UIProvider op, final String callbackUrl) {\n         OIDCProviderMetadata metadata = new OIDCProviderMetadata(\n                 new Issuer(op.getIssuer()),\n                 List.of(SubjectType.PUBLIC),\n@@ -112,7 +112,7 @@ public OidcClient<OidcConfiguration> add(final OIDCC4UIProvider op, final String\n         config.setUseNonce(false);\n         config.setLogoutHandler(new NoOpLogoutHandler());\n \n-        OidcClient<OidcConfiguration> client = new OidcClient<>(config);\n+        OidcClient client = new OidcClient(config);\n         client.setName(op.getName());\n         client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n         client.setCallbackUrl(callbackUrl);"},{"sha":"e5c3b7986c1ec2325748a5d21806518ab989c77d","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogic.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.init.SAML2SP4UILoader;\n+import org.apache.syncope.core.logic.saml2.NoOpSessionStore;\n import org.apache.syncope.core.logic.saml2.SAML2ClientCache;\n import org.apache.syncope.core.logic.saml2.SAML2SP4UIContext;\n import org.apache.syncope.core.logic.saml2.SAML2SP4UIUserManager;\n@@ -54,6 +55,7 @@\n import org.opensaml.saml.saml2.core.LogoutResponse;\n import org.opensaml.saml.saml2.core.NameID;\n import org.opensaml.saml.saml2.core.StatusCode;\n+import org.pac4j.core.context.session.SessionStore;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -250,12 +252,11 @@ public SAML2Request createLoginRequest(\n \n             if (requestedAuthnContextProvider != null) {\n                 RequestedAuthnContext requestedAuthnContext = requestedAuthnContextProvider.get();\n-                SAML2Configuration cfg = saml2Client.getConfiguration();\n                 saml2Client.setRedirectionActionBuilder(new SAML2RedirectionActionBuilder(saml2Client) {\n-\n                     @Override\n-                    public Optional<RedirectionAction> getRedirectionAction(final WebContext wc) {\n-                        this.saml2ObjectBuilder = new SAML2AuthnRequestBuilder(cfg) {\n+                    public Optional<RedirectionAction> getRedirectionAction(final WebContext wc,\n+                                                                            final SessionStore sessionStore) {\n+                        this.saml2ObjectBuilder = new SAML2AuthnRequestBuilder() {\n \n                             @Override\n                             public AuthnRequest build(final SAML2MessageContext context) {\n@@ -264,7 +265,7 @@ public AuthnRequest build(final SAML2MessageContext context) {\n                                 return authnRequest;\n                             }\n                         };\n-                        return super.getRedirectionAction(wc);\n+                        return super.getRedirectionAction(wc, sessionStore);\n                     }\n                 });\n             }\n@@ -274,7 +275,7 @@ public AuthnRequest build(final SAML2MessageContext context) {\n         SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n                 saml2Client.getConfiguration().getAuthnRequestBindingType(),\n                 null);\n-        RedirectionAction action = saml2Client.getRedirectionAction(ctx).\n+        RedirectionAction action = saml2Client.getRedirectionAction(ctx, NoOpSessionStore.INSTANCE).\n                 orElseThrow(() -> {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n                     sce.getElements().add(\"No RedirectionAction generated for AuthnRequest\");\n@@ -301,10 +302,11 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n                     saml2Client.getConfiguration().getAuthnRequestBindingType(),\n                     saml2Response);\n \n-            credentials = saml2Client.getCredentialsExtractor().extract(ctx).\n+            credentials = (SAML2Credentials) saml2Client.getCredentialsExtractor().\n+                extract(ctx, NoOpSessionStore.INSTANCE).\n                     orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n \n-            saml2Client.getAuthenticator().validate(credentials, ctx);\n+            saml2Client.getAuthenticator().validate(credentials, ctx, NoOpSessionStore.INSTANCE);\n         } catch (Exception e) {\n             LOG.error(\"While validating AuthnResponse\", e);\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -457,6 +459,7 @@ public SAML2Request createLogoutRequest(\n                 saml2Client.getConfiguration().getSpLogoutRequestBindingType(), null);\n         RedirectionAction action = saml2Client.getLogoutAction(\n                 ctx,\n+                NoOpSessionStore.INSTANCE,\n                 saml2Profile, null).\n                 orElseThrow(() -> {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -488,7 +491,8 @@ public void validateLogoutResponse(final SAML2Response saml2Response) {\n \n         LogoutResponse logoutResponse;\n         try {\n-            SAML2MessageContext saml2Ctx = saml2Client.getContextProvider().buildContext(ctx);\n+            SAML2MessageContext saml2Ctx = saml2Client.getContextProvider().\n+                buildContext(saml2Client, ctx, NoOpSessionStore.INSTANCE);\n             saml2Client.getLogoutProfileHandler().receive(saml2Ctx);\n \n             logoutResponse = (LogoutResponse) saml2Ctx.getMessageContext().getMessage();"},{"sha":"301502ef92d8ee2ef2ebb776db2d5898c2875f91","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/NoOpLogoutHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpLogoutHandler.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -20,5 +20,5 @@\n \n import org.pac4j.core.logout.handler.LogoutHandler;\n \n-public class NoOpLogoutHandler implements LogoutHandler<SAML2SP4UIContext> {\n+public class NoOpLogoutHandler implements LogoutHandler {\n }"},{"sha":"c3c1bd5a926d0435ff14c1aab228b995673932c0","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/NoOpSessionStore.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FNoOpSessionStore.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.logic.saml2;\n \n import java.util.Optional;\n+\n+import org.pac4j.core.context.WebContext;\n import org.pac4j.core.context.session.SessionStore;\n \n-public final class NoOpSessionStore implements SessionStore<SAML2SP4UIContext> {\n+public final class NoOpSessionStore implements SessionStore {\n \n     public static final NoOpSessionStore INSTANCE = new NoOpSessionStore();\n \n@@ -30,40 +32,37 @@ private NoOpSessionStore() {\n     }\n \n     @Override\n-    public String getOrCreateSessionId(final SAML2SP4UIContext context) {\n-        return \"<NO_KEY>\";\n+    public Optional<String> getSessionId(final WebContext webContext, final boolean b) {\n+        return Optional.empty();\n     }\n \n     @Override\n-    public Optional<Object> get(final SAML2SP4UIContext context, final String key) {\n+    public Optional<Object> get(final WebContext webContext, final String s) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public void set(final SAML2SP4UIContext context, final String key, final Object value) {\n-        // nothing to do\n+    public void set(final WebContext webContext, final String s, final Object o) {\n+\n     }\n \n     @Override\n-    public boolean destroySession(final SAML2SP4UIContext context) {\n+    public boolean destroySession(final WebContext webContext) {\n         return true;\n     }\n \n     @Override\n-    public Optional<?> getTrackableSession(final SAML2SP4UIContext context) {\n+    public Optional<Object> getTrackableSession(final WebContext webContext) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public Optional<SessionStore<SAML2SP4UIContext>> buildFromTrackableSession(\n-            final SAML2SP4UIContext context,\n-            final Object trackableSession) {\n-\n+    public Optional<SessionStore> buildFromTrackableSession(final WebContext webContext, final Object o) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public boolean renewSession(final SAML2SP4UIContext context) {\n+    public boolean renewSession(final WebContext webContext) {\n         return false;\n     }\n }"},{"sha":"88918f493b8d3bfd42959fecb56549c0d7469a12","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2SP4UIContext.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.pac4j.core.context.Cookie;\n import org.pac4j.core.context.WebContext;\n-import org.pac4j.core.context.session.SessionStore;\n \n public class SAML2SP4UIContext implements WebContext {\n \n@@ -48,11 +47,6 @@ public String getRequestMethod() {\n                 : HttpMethod.GET;\n     }\n \n-    @Override\n-    public SessionStore<SAML2SP4UIContext> getSessionStore() {\n-        return NoOpSessionStore.INSTANCE;\n-    }\n-\n     @Override\n     public Optional<String> getRequestParameter(final String name) {\n         switch (name) {\n@@ -69,12 +63,12 @@ public Optional<String> getRequestParameter(final String name) {\n \n     @Override\n     public Map<String, String[]> getRequestParameters() {\n-        throw new UnsupportedOperationException();\n+        return Map.of();\n     }\n \n     @Override\n     public Optional<String> getRequestAttribute(final String name) {\n-        throw new UnsupportedOperationException();\n+        return Optional.empty();\n     }\n \n     @Override\n@@ -89,37 +83,42 @@ public Optional<String> getRequestHeader(final String name) {\n \n     @Override\n     public String getRemoteAddr() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n     public void setResponseHeader(final String name, final String value) {\n         // nothing to do\n     }\n \n+    @Override\n+    public Optional<String> getResponseHeader(final String s) {\n+        return Optional.empty();\n+    }\n+\n     @Override\n     public String getServerName() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n     public int getServerPort() {\n-        throw new UnsupportedOperationException();\n+        return -1;\n     }\n \n     @Override\n     public String getScheme() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n     public boolean isSecure() {\n-        throw new UnsupportedOperationException();\n+        return false;\n     }\n \n     @Override\n     public String getFullRequestURL() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override\n@@ -134,7 +133,7 @@ public void addResponseCookie(final Cookie cookie) {\n \n     @Override\n     public String getPath() {\n-        throw new UnsupportedOperationException();\n+        return null;\n     }\n \n     @Override"},{"sha":"2899bbcc4cac2472e6e0a85d043daab2c8a8e1a7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -25,7 +25,6 @@\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n import java.security.AccessControlException;\n import java.util.Map;\n import java.util.Set;"},{"sha":"48f70edc14313d8a90e3562bf59bddab3a3c2d26","filename":"fit/wa-reference/src/test/resources/application-saml2.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-saml2.properties?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -19,6 +19,7 @@ am.saml2.sp.authnrequest.binding=POST\n am.saml2.sp.logout.request.binding=POST\n am.saml2.sp.logout.response.binding=REDIRECT\n am.saml2.sp.entityId=http://localhost:8080\n+am.saml2.sp.metadata=/tmp/saml2-sp-metadata.xml\n am.saml2.sp.skew=300\n am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n am.saml2.keystore=classpath:/saml.keystore.jks"},{"sha":"5d6c3e7713a605d37af44b71f664b09a6ebec8f9","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -449,9 +449,9 @@ under the License.\n \n     <modernizer-maven.version>2.1.0</modernizer-maven.version>\n \n-    <pac4j.version>4.3.1</pac4j.version>\n+    <pac4j.version>5.0.0-RC2</pac4j.version>\n \n-    <cas.version>6.4.0-RC1</cas.version>\n+    <cas.version>6.4.0-RC2</cas.version>\n     <cas-client.version>3.6.2</cas-client.version>\n \n     <h2.version>1.4.200</h2.version>"},{"sha":"8a285fbb6ec8fd1b1554b8a3bd76a6d5e9612113","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -261,7 +261,7 @@ public InputStream retrieve() throws Exception {\n         cfg.setWantsAssertionsSigned(true);\n         cfg.setAuthnRequestSigned(true);\n         cfg.setSpLogoutRequestSigned(true);\n-\n+        cfg.setServiceProviderMetadataResourceFilepath(env.getProperty(\"am.saml2.sp.metadata\"));\n         cfg.setAcceptedSkew(env.getProperty(\"am.saml2.sp.skew\", int.class));\n \n         cfg.setLogoutHandler(new NoOpLogoutHandler());"},{"sha":"e41e7306c6e03751437c983f80d09b346a461085","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/NoOpLogoutHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpLogoutHandler.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -20,6 +20,6 @@\n \n import org.pac4j.core.logout.handler.LogoutHandler;\n \n-public class NoOpLogoutHandler implements LogoutHandler<ServerWebExchangeContext> {\n+public class NoOpLogoutHandler implements LogoutHandler {\n \n }"},{"sha":"a7d43ab92a1992e0af58e3f9f69112a672432488","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/NoOpSessionStore.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpSessionStore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpSessionStore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FNoOpSessionStore.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.sra.security.pac4j;\n \n import java.util.Optional;\n+\n+import org.pac4j.core.context.WebContext;\n import org.pac4j.core.context.session.SessionStore;\n \n-public final class NoOpSessionStore implements SessionStore<ServerWebExchangeContext> {\n+public final class NoOpSessionStore implements SessionStore {\n \n     public static final NoOpSessionStore INSTANCE = new NoOpSessionStore();\n \n@@ -30,40 +32,37 @@ private NoOpSessionStore() {\n     }\n \n     @Override\n-    public String getOrCreateSessionId(final ServerWebExchangeContext context) {\n-        return \"<NO_KEY>\";\n+    public Optional<String> getSessionId(final WebContext webContext, final boolean b) {\n+        return Optional.empty();\n     }\n \n     @Override\n-    public Optional<Object> get(final ServerWebExchangeContext context, final String key) {\n+    public Optional<Object> get(final WebContext webContext, final String s) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public void set(final ServerWebExchangeContext context, final String key, final Object value) {\n-        // nothing to do\n+    public void set(final WebContext webContext, final String s, final Object o) {\n+\n     }\n \n     @Override\n-    public boolean destroySession(final ServerWebExchangeContext context) {\n+    public boolean destroySession(final WebContext webContext) {\n         return true;\n     }\n \n     @Override\n-    public Optional<?> getTrackableSession(final ServerWebExchangeContext context) {\n+    public Optional<Object> getTrackableSession(final WebContext webContext) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public Optional<SessionStore<ServerWebExchangeContext>> buildFromTrackableSession(\n-            final ServerWebExchangeContext context,\n-            final Object trackableSession) {\n-\n+    public Optional<SessionStore> buildFromTrackableSession(final WebContext webContext, final Object o) {\n         return Optional.empty();\n     }\n \n     @Override\n-    public boolean renewSession(final ServerWebExchangeContext context) {\n+    public boolean renewSession(final WebContext webContext) {\n         return false;\n     }\n }"},{"sha":"7cce9f7f598b4d8ea40620ae80492c23a77bbc07","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerWebExchangeContext.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -26,7 +26,6 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.pac4j.core.context.Cookie;\n import org.pac4j.core.context.WebContext;\n-import org.pac4j.core.context.session.SessionStore;\n import org.pac4j.core.util.CommonHelper;\n import org.springframework.http.HttpCookie;\n import org.springframework.http.HttpHeaders;\n@@ -53,11 +52,6 @@ public ServerWebExchangeContext(final ServerWebExchange exchange) {\n         this.exchange = exchange;\n     }\n \n-    @Override\n-    public SessionStore<ServerWebExchangeContext> getSessionStore() {\n-        return NoOpSessionStore.INSTANCE;\n-    }\n-\n     @Override\n     public Optional<String> getRequestAttribute(final String name) {\n         return Optional.ofNullable(exchange.getAttribute(name));\n@@ -125,7 +119,12 @@ public ServerWebExchange getNative() {\n \n     @Override\n     public void setResponseHeader(final String name, final String value) {\n-        this.exchange.getResponse().getHeaders().set(name, value);\n+\n+    }\n+\n+    @Override\n+    public Optional<String> getResponseHeader(final String s) {\n+        return Optional.ofNullable(this.exchange.getResponse().getHeaders().getFirst(s));\n     }\n \n     @Override"},{"sha":"4f89ad9650f145c8648e9eb8d62634bba6aec447","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2LogoutResponseWebFilter.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Optional;\n import org.apache.syncope.sra.SessionConfig;\n+import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.core.exception.http.OkAction;\n@@ -82,7 +83,8 @@ private Mono<Void> handleLogoutResponse(\n             final ServerWebExchange exchange, final WebFilterChain chain, final ServerWebExchangeContext swec) {\n \n         try {\n-            SAML2MessageContext ctx = saml2Client.getContextProvider().buildContext(swec);\n+            SAML2MessageContext ctx = saml2Client.getContextProvider().\n+                buildContext(this.saml2Client, swec, NoOpSessionStore.INSTANCE);\n             saml2Client.getLogoutProfileHandler().receive(ctx);\n         } catch (OkAction e) {\n             LOG.debug(\"LogoutResponse was actually validated but no postLogoutURL was set\", e);\n@@ -103,7 +105,7 @@ private Mono<Void> handleLogoutRequest(\n \n                     return session.invalidate().then(Mono.defer(() -> {\n                         try {\n-                            saml2Client.getCredentialsExtractor().extract(swec);\n+                            saml2Client.getCredentialsExtractor().extract(swec, NoOpSessionStore.INSTANCE);\n                         } catch (RedirectionAction action) {\n                             return RedirectionActionUtils.handle(action, swec);\n                         }"},{"sha":"ef0b0326db64dc178c5bf1fe7dab9de41abd7289","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2RequestServerLogoutHandler.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n+import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.SessionConfig;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n@@ -57,7 +58,8 @@ public Mono<Void> logout(final WebFilterExchange exchange, final Authentication\n \n                     cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n                     return session.invalidate().then(\n-                            saml2Client.getLogoutAction(swec, credentials.getUserProfile(), null).\n+                            saml2Client.getLogoutAction(swec,\n+                                NoOpSessionStore.INSTANCE, credentials.getUserProfile(), null).\n                                     map(action -> RedirectionActionUtils.handle(action, swec)).\n                                     orElseThrow(() -> new IllegalStateException(\"No action generated\")));\n                 }).onErrorResume(Mono::error);"},{"sha":"6d9e9ec2ac9d10278b188cf7ce306d2e11f4d75d","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationRequestWebFilter.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n+import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.saml.client.SAML2Client;\n@@ -57,7 +58,7 @@ public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain\n \n                     ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange);\n \n-                    return saml2Client.getRedirectionAction(swec).\n+                    return saml2Client.getRedirectionAction(swec, NoOpSessionStore.INSTANCE).\n                             map(action -> RedirectionActionUtils.handle(action, swec)).\n                             orElseThrow(() -> new IllegalStateException(\"No action generated\"));\n                 }).onErrorResume(Mono::error);"},{"sha":"8b8239af195868f00293401b1ca77a8a7741c301","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationWebFilter.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.sra.security.saml2;\n \n import java.net.URI;\n+\n+import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n import org.apache.syncope.sra.session.SessionUtils;\n@@ -79,10 +81,11 @@ private ServerAuthenticationConverter convertSamlResponse() {\n                 flatMap(matchResult -> {\n                     ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange).setForm(form);\n \n-                    SAML2Credentials credentials = saml2Client.getCredentialsExtractor().extract(swec).\n+                    SAML2Credentials credentials = (SAML2Credentials) saml2Client.getCredentialsExtractor().\n+                        extract(swec, NoOpSessionStore.INSTANCE).\n                             orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n \n-                    saml2Client.getAuthenticator().validate(credentials, swec);\n+                    saml2Client.getAuthenticator().validate(credentials, swec, NoOpSessionStore.INSTANCE);\n \n                     return Mono.just(new SAML2AuthenticationToken(credentials));\n                 }));"},{"sha":"c6ab6c7594eea40610aa6d4bfbc04be5f21e6a9f","filename":"sra/src/test/resources/debug/application-debug.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -36,6 +36,7 @@ am.oidc.client.secret=oidcTestClientSecret\n #am.saml2.sp.logout.response.binding=REDIRECT\n #am.saml2.sp.entityId=http://localhost:8080\n #am.saml2.sp.skew=300\n+#am.saml2.sp.metadata=/tmp/saml2-sp-metadata.xml\n #am.saml2.idp=http://localhost:9080/syncope-wa/idp/metadata\n #am.saml2.keystore=classpath:/saml.keystore.jks\n #am.saml2.keystore.type=jks"},{"sha":"3a2b117b80fdd80885b614c615b6368caad5376c","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -50,10 +50,10 @@\n import org.apereo.cas.configuration.model.support.jdbc.authn.QueryJdbcAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.AbstractLdapAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.ldap.LdapAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.DuoSecurityMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.MultifactorAuthenticationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorProperties;\n-import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.gauth.GoogleAuthenticatorMultifactorAuthenticationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.pac4j.Pac4jDelegatedAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n@@ -177,7 +177,7 @@ private static Map<String, Object> mapAuthModule(\n             final String authModule,\n             final DuoMfaAuthModuleConf conf) {\n \n-        DuoSecurityMultifactorProperties props = new DuoSecurityMultifactorProperties();\n+        DuoSecurityMultifactorAuthenticationProperties props = new DuoSecurityMultifactorAuthenticationProperties();\n         props.setName(authModule);\n         props.setDuoApiHost(conf.getApiHost());\n         props.setDuoApplicationKey(conf.getApplicationKey());\n@@ -206,7 +206,8 @@ private static Map<String, Object> mapAuthModule(\n             final String authModule,\n             final GoogleMfaAuthModuleConf conf) {\n \n-        GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n+        GoogleAuthenticatorMultifactorAuthenticationProperties props =\n+            new GoogleAuthenticatorMultifactorAuthenticationProperties();\n         props.setName(authModule);\n         props.setIssuer(conf.getIssuer());\n         props.setCodeDigits(conf.getCodeDigits());\n@@ -236,7 +237,7 @@ private static Map<String, Object> mapAuthModule(\n             final String authModule,\n             final U2FAuthModuleConf conf) {\n \n-        U2FMultifactorProperties props = new U2FMultifactorProperties();\n+        U2FMultifactorAuthenticationProperties props = new U2FMultifactorAuthenticationProperties();\n         props.setName(authModule);\n         props.setExpireDevices(conf.getExpireDevices());\n         props.setExpireDevicesTimeUnit(TimeUnit.valueOf(conf.getExpireDevicesTimeUnit()));"},{"sha":"0dd676a0b0e706dcdaa469ac429b4b5d4a4962a0","filename":"wa/pom.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fpom.xml?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -33,8 +33,6 @@ under the License.\n   <packaging>pom</packaging>\n   \n   <properties>\n-    <nimbus-jose-jwt.version>8.20.2</nimbus-jose-jwt.version>\n-\n     <rootpom.basedir>${basedir}/..</rootpom.basedir>\n   </properties>\n "},{"sha":"43cf07fc664b65ac0f2fd44268f828a21c11a9e7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":41,"deletions":4,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -36,13 +36,19 @@\n import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n+import org.apache.syncope.wa.starter.mapping.AllowedAttrReleaseMapper;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapFor;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapper;\n import org.apache.syncope.wa.starter.mapping.AuthMapFor;\n import org.apache.syncope.wa.starter.mapping.AuthMapper;\n+import org.apache.syncope.wa.starter.mapping.CASSPTOMapper;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapFor;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapper;\n+import org.apache.syncope.wa.starter.mapping.DefaultAccessMapper;\n+import org.apache.syncope.wa.starter.mapping.DefaultAuthMapper;\n+import org.apache.syncope.wa.starter.mapping.OIDCRPTOMapper;\n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n+import org.apache.syncope.wa.starter.mapping.SAML2SPTOMapper;\n import org.apache.syncope.wa.starter.oidc.SyncopeWAOIDCJWKSGeneratorService;\n import org.apache.syncope.wa.starter.pac4j.saml.SyncopeWASAML2ClientCustomizer;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n@@ -52,7 +58,7 @@\n import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRepository;\n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n+import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n import org.apereo.cas.otp.repository.credentials.OneTimeTokenCredentialRepository;\n import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n@@ -124,6 +130,36 @@ public OpenAPI casSwaggerOpenApi() {\n                         new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"));\n     }\n \n+    @Bean\n+    public AttrReleaseMapper allowedAttrReleaseMapper() {\n+        return new AllowedAttrReleaseMapper();\n+    }\n+\n+    @Bean\n+    public ClientAppMapper casSPTOMapper() {\n+        return new CASSPTOMapper();\n+    }\n+\n+    @Bean\n+    public AccessMapper defaultAccessMapper() {\n+        return new DefaultAccessMapper();\n+    }\n+\n+    @Bean\n+    public AuthMapper defaultAuthMapper() {\n+        return new DefaultAuthMapper();\n+    }\n+\n+    @Bean\n+    public ClientAppMapper oidcRPTOMapper() {\n+        return new OIDCRPTOMapper();\n+    }\n+\n+    @Bean\n+    public ClientAppMapper saml2SPTOMapper() {\n+        return new SAML2SPTOMapper();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public RegisteredServiceMapper registeredServiceMapper() {\n@@ -194,7 +230,8 @@ public SamlIdPMetadataGenerator samlIdPMetadataGenerator(final WARestClient rest\n     @Autowired\n     @Bean\n     public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClient) {\n-        return new RestfulSamlIdPMetadataLocator(CipherExecutor.noOpOfStringToString(), restClient);\n+        return new RestfulSamlIdPMetadataLocator(CipherExecutor.noOpOfStringToString(),\n+            Caffeine.newBuilder().build(), restClient);\n     }\n \n     @Autowired\n@@ -218,7 +255,7 @@ public CasEventRepository casEventRepository(final WARestClient restClient) {\n \n     @Autowired\n     @Bean\n-    public DelegatedClientFactoryCustomizer<Client<?>> delegatedClientCustomizer(final WARestClient restClient) {\n+    public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {\n         return new SyncopeWASAML2ClientCustomizer(restClient);\n     }\n \n@@ -258,7 +295,7 @@ public WebAuthnCredentialRepository webAuthnCredentialRepository(final WARestCli\n     @Autowired\n     @RefreshScope\n     public U2FDeviceRepository u2fDeviceRepository(final WARestClient restClient) {\n-        U2FMultifactorProperties u2f = casProperties.getAuthn().getMfa().getU2f();\n+        U2FMultifactorAuthenticationProperties u2f = casProperties.getAuthn().getMfa().getU2f();\n         LocalDate expirationDate = LocalDate.now(ZoneId.systemDefault()).\n                 minus(u2f.getExpireDevices(), DateTimeUtils.toChronoUnit(u2f.getExpireDevicesTimeUnit()));\n         LoadingCache<String, String> requestStorage = Caffeine.newBuilder()."},{"sha":"4edd6bf620779c7f63bb0d32c7f84c51a0b6ada6","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n+@FunctionalInterface\n public interface AccessMapper {\n \n     RegisteredServiceAccessStrategy build(AccessPolicyConf conf);"},{"sha":"c1eb0ab33931a86969cd0c200244d845129590fb","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AllowedAttrReleaseMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -26,10 +26,8 @@\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n import org.apereo.cas.services.consent.DefaultRegisteredServiceConsentPolicy;\n import org.apereo.cas.util.model.TriStateBoolean;\n-import org.springframework.stereotype.Component;\n \n @AttrReleaseMapFor(attrReleasePolicyConfClass = AllowedAttrReleasePolicyConf.class)\n-@Component\n public class AllowedAttrReleaseMapper implements AttrReleaseMapper {\n \n     @Override"},{"sha":"42233ebec70af360fa6ad3d9dd5c1ec354b4f896","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n \n+@FunctionalInterface\n public interface AttrReleaseMapper {\n \n     RegisteredServiceAttributeReleasePolicy build(AttrReleasePolicyConf conf);"},{"sha":"4997dc702aade562f7eb212d3ca00778c50e5b4f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n \n+@FunctionalInterface\n public interface AuthMapper {\n \n     RegisteredServiceAuthenticationPolicy build(AuthPolicyConf conf);"},{"sha":"a7cb01ebc6835a69cef629e443a07bdd2e3858a2","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPTOMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -25,10 +25,8 @@\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n-import org.springframework.stereotype.Component;\n \n @ClientAppMapFor(clientAppClass = CASSPTO.class)\n-@Component\n public class CASSPTOMapper implements ClientAppMapper {\n \n     @Override"},{"sha":"b0fff5eaeffec020cd6bc52e02c5c18f87850c7f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -24,6 +24,7 @@\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n \n+@FunctionalInterface\n public interface ClientAppMapper {\n \n     RegisteredService build("},{"sha":"bdcda1f3834cee3f7f266b743f216e86a189e1d7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -22,10 +22,8 @@\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n-import org.springframework.stereotype.Component;\n \n @AccessMapFor(accessPolicyConfClass = DefaultAccessPolicyConf.class)\n-@Component\n public class DefaultAccessMapper implements AccessMapper {\n \n     @Override"},{"sha":"ae9fa8127db8678062c1cae21184532efda8aa1a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -25,10 +25,8 @@\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n-import org.springframework.stereotype.Component;\n \n @AuthMapFor(authPolicyConfClass = DefaultAuthPolicyConf.class)\n-@Component\n public class DefaultAuthMapper implements AuthMapper {\n \n     @Override"},{"sha":"a6cc2764074a20fe6de2ef9cf054cf47997ea8ed","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -43,10 +43,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.stereotype.Component;\n \n @ClientAppMapFor(clientAppClass = OIDCRPTO.class)\n-@Component\n public class OIDCRPTOMapper implements ClientAppMapper {\n \n     private static final Logger LOG = LoggerFactory.getLogger(OIDCRPTOMapper.class);"},{"sha":"5991515eb8928d069e08bd2ea7aa34df5886c0ec","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -21,6 +21,9 @@\n import java.util.Map;\n import java.util.Optional;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n@@ -29,6 +32,8 @@\n \n public class RegisteredServiceMapper {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(RegisteredServiceMapper.class);\n+\n     protected final Map<String, AuthMapper> authPolicyConfMappers;\n \n     protected final Map<String, AccessMapper> accessPolicyConfMappers;\n@@ -50,6 +55,13 @@ public RegisteredServiceMapper(\n     }\n \n     public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n+        String key = clientApp.getClientAppTO().getClass().getName();\n+        ClientAppMapper clientAppMapper = clientAppTOMappers.get(key);\n+        if (clientAppMapper == null) {\n+            LOG.warn(\"Unable to locate ClientAppMapper using key {}\", key);\n+            return null;\n+        }\n+        \n         RegisteredServiceAuthenticationPolicy authPolicy = null;\n         if (clientApp.getAuthPolicyConf() != null) {\n             AuthMapper authMapper =\n@@ -78,10 +90,6 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n             }\n         }\n \n-        ClientAppMapper clientAppMapper = clientAppTOMappers.get(clientApp.getClientAppTO().getClass().getName());\n-        if (clientAppMapper == null) {\n-            return null;\n-        }\n         return clientAppMapper.build(clientApp, authPolicy, accessStrategy, attributeReleasePolicy);\n     }\n }"},{"sha":"9c1c86cf459afd09555557339ee2d36b47fe7270","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -25,10 +25,8 @@\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n-import org.springframework.stereotype.Component;\n \n @ClientAppMapFor(clientAppClass = SAML2SPTO.class)\n-@Component\n public class SAML2SPTOMapper implements ClientAppMapper {\n \n     @Override"},{"sha":"75908452d0cd03f875c472433b6e2207ee503fa1","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -27,7 +27,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client<?>> {\n+public class SyncopeWASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientCustomizer.class);\n \n@@ -38,7 +38,7 @@ public SyncopeWASAML2ClientCustomizer(final WARestClient restClient) {\n     }\n \n     @Override\n-    public void customize(final Client<?> client) {\n+    public void customize(final Client client) {\n         if (client instanceof SAML2Client) {\n             LOG.debug(\"Customizing SAML2 client {}\", client.getName());\n             final SAML2Client saml2Client = (SAML2Client) client;"},{"sha":"8900e2d099eae6fad55e08ae1f91e98a68feed9f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.saml.idp.metadata;\n \n+import com.github.benmanes.caffeine.cache.Cache;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n@@ -40,9 +41,10 @@ public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocato\n \n     public RestfulSamlIdPMetadataLocator(\n             final CipherExecutor<String, String> metadataCipherExecutor,\n+            final Cache<String, SamlIdPMetadataDocument> metadataCache,\n             final WARestClient restClient) {\n \n-        super(metadataCipherExecutor);\n+        super(metadataCipherExecutor, metadataCache);\n         this.restClient = restClient;\n     }\n "},{"sha":"9573d33071567cb53f366e146e6fbaa0995eba9b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/SyncopeWAServiceRegistry.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -63,7 +63,12 @@ public RegisteredService save(final RegisteredService registeredService) {\n     public boolean delete(final RegisteredService registeredService) {\n         throw new UnsupportedOperationException(\"Deleting registered services from WA is not supported\");\n     }\n-    \n+\n+    @Override\n+    public void deleteAll() {\n+        throw new UnsupportedOperationException(\"Bulk deleting registered services from WA is not supported\");\n+    }\n+\n     @Override\n     public Collection<RegisteredService> load() {\n         SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n@@ -145,4 +150,6 @@ public RegisteredService findServiceByExactServiceName(final String name) {\n                     getService(WAClientAppService.class).read(name, null));\n         }\n     }\n+\n+\n }"},{"sha":"a2d254dd33f696d1f2ec6998fa3b7d37a51a9526","filename":"wa/starter/src/main/resources/application.properties","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fapplication.properties?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -40,9 +40,14 @@ management.endpoint.loggers.enabled=true\n management.endpoint.refresh.enabled=true\n management.endpoint.registeredServices.enabled=true\n \n-cas.events.core.enabled=false\n+# Cache service definitions for 5 minutes\n+cas.service-registry.cache.duration=PT5M\n+\n+# Reload services and hydrate the cache every 5 minutes\n+cas.service-registry.schedule.repeat-interval=PT5M\n+cas.service-registry.schedule.start-delay=PT30S\n \n-server.servlet.session.tracking-modes=cookie\n+cas.events.core.enabled=false\n \n ##\n # Allow configuration classes to override bean definitions from Spring Boot"},{"sha":"ff336c034ea374f938f322d67c3c8a9d081190ca","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/AbstractTest.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -20,13 +20,19 @@\n \n import java.util.UUID;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n import org.springframework.test.context.ContextConfiguration;\n \n-@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {\n-    \"cas.authn.accept.users=mrossi::password\",\n-    \"cas.authn.syncope.url=http://localhost:8080\",\n-    \"cas.sso.allow-missing-service-parameter=true\"\n+@SpringBootTest(\n+    classes = AbstractTest.SyncopeTestConfiguration.class,\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+    properties = {\n+        \"cas.authn.accept.users=mrossi::password\",\n+        \"cas.authn.syncope.url=http://localhost:8080\",\n+        \"cas.sso.allow-missing-service-parameter=true\"\n })\n @ContextConfiguration(initializers = ZookeeperTestingServer.class)\n public abstract class AbstractTest {\n@@ -37,4 +43,13 @@ public abstract class AbstractTest {\n     protected static String getUUIDString() {\n         return UUID.randomUUID().toString().substring(0, 8);\n     }\n+\n+    @TestConfiguration\n+    @ComponentScan(\"org.apache.syncope.wa.starter\")\n+    public static class SyncopeTestConfiguration {\n+        @Bean\n+        public SyncopeCoreTestingServer syncopeCoreTestingServer() {\n+            return new SyncopeCoreTestingServer();\n+        }\n+    }\n }"},{"sha":"7b0b9054baf2cfdee6ce1f83f9a9d5f1cf963e7e","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -32,7 +32,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n-import org.springframework.stereotype.Component;\n \n import javax.validation.constraints.NotNull;\n import javax.ws.rs.NotFoundException;\n@@ -45,7 +44,6 @@\n import java.util.UUID;\n import java.util.stream.Collectors;\n \n-@Component\n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n     public static final List<WAClientApp> APPS = new ArrayList<>();"},{"sha":"f7b26e3e1217345c1244d1a46a23f728a2eba86a","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/BaseSyncopeWASAML2ClientTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseSyncopeWASAML2ClientTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a1ffb20e798ebab4db216fb4d57ef1593ada214/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseSyncopeWASAML2ClientTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FBaseSyncopeWASAML2ClientTest.java?ref=8a1ffb20e798ebab4db216fb4d57ef1593ada214","patch":"@@ -35,9 +35,11 @@\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.FileSystemResource;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.math.BigInteger;\n import java.security.KeyPair;\n import java.security.KeyPairGenerator;\n@@ -83,12 +85,13 @@ protected static Certificate createSelfSignedCert(final KeyPair keyPair) throws\n         return cert;\n     }\n \n-    protected static SAML2Client getSAML2Client() {\n+    protected static SAML2Client getSAML2Client() throws Exception {\n         SAML2Configuration saml2Configuration = new SAML2Configuration();\n         saml2Configuration.setKeystorePassword(\"password\");\n         saml2Configuration.setPrivateKeyPassword(\"password\");\n         saml2Configuration.setKeystoreAlias(\"Syncope\");\n         saml2Configuration.setIdentityProviderMetadataResource(new ClassPathResource(\"idp-metadata.xml\"));\n+        saml2Configuration.setServiceProviderMetadataResource(new FileSystemResource(File.createTempFile(\"sp-metadata\", \".xml\")));\n         SAML2Client client = new SAML2Client(saml2Configuration);\n         client.setCallbackUrl(\"https://syncope.apache.org\");\n         return client;"}]}