{"sha":"bb9033956c9f5948628d4e2f2776fc0409533166","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJiOTAzMzk1NmM5ZjU5NDg2MjhkNGUyZjI3NzZmYzA0MDk1MzMxNjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-28T12:32:17Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-28T12:32:17Z"},"message":"[SYNCOPE-327] Fixing ThreadLocal messages related to SimpleDateFormat and DecimalFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1451182 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5cd8297bdaf2ff66ef1a725d189f91f22cc30f3c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5cd8297bdaf2ff66ef1a725d189f91f22cc30f3c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bb9033956c9f5948628d4e2f2776fc0409533166","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb9033956c9f5948628d4e2f2776fc0409533166","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bb9033956c9f5948628d4e2f2776fc0409533166","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb9033956c9f5948628d4e2f2776fc0409533166/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5de9702f07815f52b1adda625e8d68139cecf295","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5de9702f07815f52b1adda625e8d68139cecf295","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5de9702f07815f52b1adda625e8d68139cecf295"}],"stats":{"total":310,"additions":164,"deletions":146},"files":[{"sha":"fe1ddb5a0aa5511187b00b62f4f57865aa60e311","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -18,12 +18,8 @@\n  */\n package org.apache.syncope.console.wicket.markup.html.form;\n \n-import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n-import java.util.Locale;\n-\n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -42,14 +38,6 @@ public class DateTimeFieldPanel extends DateFieldPanel {\n \n     private Form form = null;\n \n-    protected static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            return new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.getDefault());\n-        }\n-    };\n-\n     public DateTimeFieldPanel(final String id, final String name, final IModel<Date> model, final String datePattern) {\n \n         super(id, name, model, datePattern);"},{"sha":"23ae36e33eed1f4b8b8e0e00ad499529b292d341","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":19,"deletions":36,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n-import java.text.DateFormat;\n-import java.text.DecimalFormat;\n import java.util.Date;\n import javax.persistence.Basic;\n import javax.persistence.MappedSuperclass;\n@@ -29,11 +27,10 @@\n import javax.validation.constraints.Min;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n-import org.apache.commons.lang.time.DateUtils;\n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.persistence.validation.entity.AttrValueCheck;\n+import org.apache.syncope.core.util.DataFormat;\n \n @MappedSuperclass\n @AttrValueCheck\n@@ -118,37 +115,29 @@ public <T extends AbstractAttrValue> void parseValue(final AbstractSchema schema\n \n             case Long:\n                 try {\n-                    if (schema.getFormatter() == null) {\n-                        this.setLongValue(Long.valueOf(value));\n-                    } else {\n-                        this.setLongValue(Long.valueOf(\n-                                ((DecimalFormat) schema.getFormatter()).parse(value).longValue()));\n-                    }\n+                    this.setLongValue(schema.getConversionPattern() == null\n+                            ? Long.valueOf(value)\n+                            : DataFormat.parseNumber(value, schema.getConversionPattern()).longValue());\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n                 break;\n \n             case Double:\n                 try {\n-                    if (schema.getFormatter() == null) {\n-                        this.setDoubleValue(Double.valueOf(value));\n-                    } else {\n-                        this.setDoubleValue(Double.valueOf(\n-                                ((DecimalFormat) schema.getFormatter()).parse(value).doubleValue()));\n-                    }\n+                    this.setDoubleValue(schema.getConversionPattern() == null\n+                            ? Double.valueOf(value)\n+                            : DataFormat.parseNumber(value, schema.getConversionPattern()).doubleValue());\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n                 break;\n \n             case Date:\n                 try {\n-                    if (schema.getFormatter() == null) {\n-                        this.setDateValue(DateUtils.parseDate(value, SyncopeConstants.DATE_PATTERNS));\n-                    } else {\n-                        this.setDateValue(new Date(((DateFormat) schema.getFormatter()).parse(value).getTime()));\n-                    }\n+                    this.setDateValue(schema.getConversionPattern() == null\n+                            ? DataFormat.parseDate(value)\n+                            : new Date(DataFormat.parseDate(value, schema.getConversionPattern()).getTime()));\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -195,27 +184,21 @@ public String getValueAsString() {\n                 break;\n \n             case Long:\n-                if (getAttribute().getSchema().getFormatter() == null) {\n-                    result = getLongValue().toString();\n-                } else {\n-                    result = getAttribute().getSchema().getFormatter().format(getLongValue());\n-                }\n+                result = getAttribute().getSchema().getConversionPattern() == null\n+                        ? getLongValue().toString()\n+                        : DataFormat.format(getLongValue(), getAttribute().getSchema().getConversionPattern());\n                 break;\n \n             case Double:\n-                if (getAttribute().getSchema().getFormatter() == null) {\n-                    result = getDoubleValue().toString();\n-                } else {\n-                    result = getAttribute().getSchema().getFormatter().format(getDoubleValue());\n-                }\n+                result = getAttribute().getSchema().getConversionPattern() == null\n+                        ? getDoubleValue().toString()\n+                        : DataFormat.format(getDoubleValue(), getAttribute().getSchema().getConversionPattern());\n                 break;\n \n             case Date:\n-                if (getAttribute().getSchema().getFormatter() == null) {\n-                    result = DATE_FORMAT.get().format(getDateValue());\n-                } else {\n-                    result = getAttribute().getSchema().getFormatter().format(getDateValue());\n-                }\n+                result = getAttribute().getSchema().getConversionPattern() == null\n+                        ? DataFormat.format(getDateValue())\n+                        : DataFormat.format(getDateValue(), false, getAttribute().getSchema().getConversionPattern());\n                 break;\n \n             default:"},{"sha":"9089a67809aa416c22edc47e6fb477623b05ec11","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -21,14 +21,11 @@\n import java.beans.PropertyDescriptor;\n import java.io.Serializable;\n import java.lang.reflect.Method;\n-import java.text.DecimalFormat;\n-import java.text.SimpleDateFormat;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n-import org.apache.syncope.common.SyncopeConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -40,30 +37,8 @@ public abstract class AbstractBaseBean implements Serializable {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractBaseBean.class);\n \n-    protected static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            return new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-        }\n-    };\n-\n-    protected static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT = new ThreadLocal<DecimalFormat>() {\n-\n-        @Override\n-        protected DecimalFormat initialValue() {\n-            return new DecimalFormat();\n-        }\n-    };\n-\n     private static final long serialVersionUID = -9017214159540857901L;\n \n-    public final SimpleDateFormat getDateFormatter() {\n-        final SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n-        dateFormatter.setLenient(false);\n-        return dateFormatter;\n-    }\n-\n     /**\n      * @param property the integer representing a boolean value\n      * @return the boolean value corresponding to the property param"},{"sha":"fa2e32dbe75638b79d9df5f5fd1e873993c47c98","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -21,9 +21,6 @@\n import static javax.persistence.EnumType.STRING;\n \n import java.lang.reflect.Constructor;\n-import java.text.DecimalFormat;\n-import java.text.Format;\n-import java.text.SimpleDateFormat;\n import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n@@ -208,39 +205,4 @@ public void setConversionPattern(final String conversionPattern) {\n \n         this.conversionPattern = conversionPattern;\n     }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends Format> T getFormatter() {\n-        T result = null;\n-\n-        if (getConversionPattern() != null) {\n-            switch (getType()) {\n-                case Long:\n-                    DecimalFormat longFormatter = DECIMAL_FORMAT.get();\n-                    longFormatter.applyPattern(getConversionPattern());\n-\n-                    result = (T) longFormatter;\n-                    break;\n-\n-                case Double:\n-                    DecimalFormat doubleFormatter = DECIMAL_FORMAT.get();\n-                    doubleFormatter.applyPattern(getConversionPattern());\n-\n-                    result = (T) doubleFormatter;\n-                    break;\n-\n-                case Date:\n-                    SimpleDateFormat dateFormatter = DATE_FORMAT.get();\n-                    dateFormatter.applyPattern(getConversionPattern());\n-                    dateFormatter.setLenient(false);\n-\n-                    result = (T) dateFormatter;\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        return result;\n-    }\n }"},{"sha":"4a50766e52ffbb8e6f7feb4b0df00e1b4c0cf009","filename":"core/src/main/java/org/apache/syncope/core/report/AbstractReportlet.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FAbstractReportlet.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -23,9 +23,6 @@\n import static org.apache.syncope.core.report.ReportXMLConst.ELEMENT_REPORTLET;\n import static org.apache.syncope.core.report.ReportXMLConst.XSD_STRING;\n \n-import java.text.SimpleDateFormat;\n-\n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.AbstractReportletConf;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -41,14 +38,6 @@\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractReportlet.class);\n \n-    protected static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            return new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-        }\n-    };\n-\n     protected T conf;\n \n     public T getConf() {"},{"sha":"06d8da11ea458e4db6bb669bd93b639bcf67eac6","filename":"core/src/main/java/org/apache/syncope/core/report/StaticReportlet.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FStaticReportlet.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.report;\n \n import org.apache.syncope.common.report.StaticReportletConf;\n+import org.apache.syncope.core.util.DataFormat;\n import org.springframework.util.StringUtils;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n@@ -51,7 +52,7 @@ public void doExtract(final ContentHandler handler) throws SAXException, ReportE\n \n         if (conf.getDateField() != null) {\n             handler.startElement(\"\", \"\", \"date\", null);\n-            String printed = DATE_FORMAT.get().format(conf.getDateField());\n+            String printed = DataFormat.format(conf.getDateField());\n             handler.characters(printed.toCharArray(), 0, printed.length() - 1);\n             handler.endElement(\"\", \"\", \"date\");\n         }"},{"sha":"d6b8b4e3f8e2d71032c00699ed417743b100a93a","filename":"core/src/main/java/org/apache/syncope/core/report/UserReportlet.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.DataFormat;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.xml.sax.ContentHandler;\n@@ -164,7 +165,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                                attributableTO.getClass().getSimpleName(), attributableTO.getId());\n+                            attributableTO.getClass().getSimpleName(), attributableTO.getId());\n                 }\n \n                 handler.endElement(\"\", \"\", \"derivedAttribute\");\n@@ -190,7 +191,7 @@ private void doExtractAttributes(final ContentHandler handler, final AbstractAtt\n                     }\n                 } else {\n                     LOG.debug(\"{} not found for {}[{}]\", attrName,\n-                                attributableTO.getClass().getSimpleName(), attributableTO.getId());\n+                            attributableTO.getClass().getSimpleName(), attributableTO.getId());\n                 }\n \n                 handler.endElement(\"\", \"\", \"virtualAttribute\");\n@@ -234,21 +235,21 @@ private void doExtract(final ContentHandler handler, final List<SyncopeUser> use\n                         type = XSD_DATETIME;\n                         value = user.getCreationDate() == null\n                                 ? \"\"\n-                                : DATE_FORMAT.get().format(user.getCreationDate());\n+                                : DataFormat.format(user.getCreationDate());\n                         break;\n \n                     case lastLoginDate:\n                         type = XSD_DATETIME;\n                         value = user.getLastLoginDate() == null\n                                 ? \"\"\n-                                : DATE_FORMAT.get().format(user.getLastLoginDate());\n+                                : DataFormat.format(user.getLastLoginDate());\n                         break;\n \n                     case changePwdDate:\n                         type = XSD_DATETIME;\n                         value = user.getChangePwdDate() == null\n                                 ? \"\"\n-                                : DATE_FORMAT.get().format(user.getChangePwdDate());\n+                                : DataFormat.format(user.getChangePwdDate());\n                         break;\n \n                     case passwordHistorySize:"},{"sha":"900fa9b2fc9c11b983f4d7893887f2a049ef4411","filename":"core/src/main/java/org/apache/syncope/core/util/DataFormat.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FDataFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FDataFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FDataFormat.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import java.text.DecimalFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.apache.commons.lang.time.DateUtils;\n+import org.apache.syncope.common.SyncopeConstants;\n+\n+/**\n+ * Utility class for parsing / formatting date and numbers.\n+ */\n+public final class DataFormat {\n+\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n+\n+        @Override\n+        protected SimpleDateFormat initialValue() {\n+            SimpleDateFormat sdf = new SimpleDateFormat();\n+            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+            return sdf;\n+        }\n+    };\n+\n+    private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT = new ThreadLocal<DecimalFormat>() {\n+\n+        @Override\n+        protected DecimalFormat initialValue() {\n+            return new DecimalFormat();\n+        }\n+    };\n+\n+    public static String format(final Date date) {\n+        return format(date, true);\n+    }\n+\n+    public static String format(final Date date, final boolean lenient) {\n+        return format(date, lenient, null);\n+    }\n+\n+    public static String format(final Date date, final boolean lenient, final String conversionPattern) {\n+        try {\n+            SimpleDateFormat sdf = DATE_FORMAT.get();\n+            if (conversionPattern != null) {\n+                sdf.applyPattern(conversionPattern);\n+            }\n+            sdf.setLenient(lenient);\n+            return sdf.format(date);\n+        } finally {\n+            DATE_FORMAT.remove();\n+        }\n+    }\n+\n+    public static String format(final long number) {\n+        return format(number, null);\n+    }\n+\n+    public static String format(final long number, final String conversionPattern) {\n+        try {\n+            DecimalFormat df = DECIMAL_FORMAT.get();\n+            if (conversionPattern != null) {\n+                df.applyPattern(conversionPattern);\n+            }\n+            return df.format(number);\n+        } finally {\n+            DECIMAL_FORMAT.remove();\n+        }\n+    }\n+\n+    public static String format(final double number) {\n+        return format(number, null);\n+    }\n+\n+    public static String format(final double number, final String conversionPattern) {\n+        try {\n+            DecimalFormat df = DECIMAL_FORMAT.get();\n+            if (conversionPattern != null) {\n+                df.applyPattern(conversionPattern);\n+            }\n+            return df.format(number);\n+        } finally {\n+            DECIMAL_FORMAT.remove();\n+        }\n+    }\n+\n+    public static Date parseDate(final String source) throws ParseException {\n+        return DateUtils.parseDate(source, SyncopeConstants.DATE_PATTERNS);\n+    }\n+\n+    public static Date parseDate(final String source, final String conversionPattern) throws ParseException {\n+        try {\n+            SimpleDateFormat sdf = DATE_FORMAT.get();\n+            sdf.applyPattern(conversionPattern);\n+            sdf.setLenient(false);\n+            return sdf.parse(source);\n+        } finally {\n+            DATE_FORMAT.remove();\n+        }\n+    }\n+\n+    public static Number parseNumber(final String source, final String conversionPattern) throws ParseException {\n+        try {\n+            DecimalFormat df = DECIMAL_FORMAT.get();\n+            df.applyPattern(conversionPattern);\n+            return df.parse(source);\n+        } finally {\n+            DECIMAL_FORMAT.remove();\n+        }\n+    }\n+\n+    private DataFormat() {\n+        // private empty constructor\n+    }\n+}"},{"sha":"cf077695bf8cfad23d2a5bca64fba68c57326996","filename":"core/src/main/java/org/apache/syncope/core/util/ImportExport.java","status":"modified","additions":4,"deletions":16,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -21,7 +21,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.lang.String;\n import java.sql.Blob;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n@@ -32,7 +31,6 @@\n import java.sql.Timestamp;\n import java.sql.Types;\n import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -57,7 +55,6 @@\n import javax.xml.transform.stream.StreamResult;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang.StringUtils;\n-import org.apache.commons.lang.time.DateUtils;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.core.util.multiparent.MultiParentNode;\n import org.apache.syncope.core.util.multiparent.MultiParentNodeOp;\n@@ -81,14 +78,6 @@ public class ImportExport extends DefaultHandler {\n \n     private static final String ROOT_ELEMENT = \"dataset\";\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            return new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-        }\n-    };\n-\n     @Autowired\n     private EntityManager entityManager;\n \n@@ -97,8 +86,8 @@ protected SimpleDateFormat initialValue() {\n \n     private final static Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED =\n             new HashSet<String>(Arrays.asList(new String[]{\"QRTZ_\", \"LOGGING\", \"REPORTEXEC\", \"TASKEXEC\",\n-                \"SYNCOPEUSER\", \"UATTR\", \"UATTRVALUE\", \"UATTRUNIQUEVALUE\", \"UDERATTR\", \"UVIRATTR\",\n-                \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\", \"USERREQUEST\"}));\n+        \"SYNCOPEUSER\", \"UATTR\", \"UATTRVALUE\", \"UATTRUNIQUEVALUE\", \"UDERATTR\", \"UVIRATTR\",\n+        \"MEMBERSHIP\", \"MATTR\", \"MATTRVALUE\", \"MATTRUNIQUEVALUE\", \"MDERATTR\", \"MVIRATTR\", \"USERREQUEST\"}));\n \n     private final static Map<String, String> TABLES_TO_BE_FILTERED =\n             Collections.singletonMap(\"TASK\", \"DTYPE <> 'PropagationTask'\");\n@@ -229,8 +218,7 @@ private void setParameters(final String tableName, final Attributes attrs, final\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n                     try {\n-                        query.setParameter(i + 1, DateUtils.parseDate(\n-                                attrs.getValue(i), SyncopeConstants.DATE_PATTERNS), TemporalType.TIMESTAMP);\n+                        query.setParameter(i + 1, DataFormat.parseDate(attrs.getValue(i)), TemporalType.TIMESTAMP);\n                     } catch (ParseException e) {\n                         LOG.error(\"Unparsable Date '{}'\", attrs.getValue(i));\n                         query.setParameter(i + 1, attrs.getValue(i));\n@@ -587,7 +575,7 @@ private String getValues(final ResultSet rs, final String columnName, final Inte\n                 case Types.TIMESTAMP:\n                     final Timestamp timestamp = rs.getTimestamp(columnName);\n                     if (timestamp != null) {\n-                        res = DATE_FORMAT.get().format(new Date(timestamp.getTime()));\n+                        res = DataFormat.format(new Date(timestamp.getTime()));\n                     }\n                     break;\n "},{"sha":"408a18db7f64a695fd92a5eed02fb1fe64b66f74","filename":"core/src/main/java/org/apache/syncope/core/util/JexlUtil.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb9033956c9f5948628d4e2f2776fc0409533166/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=bb9033956c9f5948628d4e2f2776fc0409533166","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n-import org.apache.syncope.core.persistence.beans.AbstractBaseBean;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.slf4j.Logger;\n@@ -110,7 +109,7 @@ public JexlContext addFieldsToContext(final Object attributable, final JexlConte\n                     context.set(fieldName, fieldValue == null\n                             ? \"\"\n                             : (field.getType().equals(Date.class)\n-                            ? ((AbstractBaseBean) attributable).getDateFormatter().format(fieldValue)\n+                            ? DataFormat.format((Date) fieldValue, false)\n                             : fieldValue));\n \n                     LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);"}]}