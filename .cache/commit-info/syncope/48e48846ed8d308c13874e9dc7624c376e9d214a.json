{"sha":"48e48846ed8d308c13874e9dc7624c376e9d214a","node_id":"C_kwDOJfYA1toAKDQ4ZTQ4ODQ2ZWQ4ZDMwOGMxMzg3NGU5ZGM3NjI0YzM3NmU5ZDIxNGE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-03-31T11:20:49Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-03-31T11:22:30Z"},"message":"Refactor WA mapper management (#433)","tree":{"sha":"3488e7cfb5d38e1ce15e5b3056d96a7ceb06df67","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3488e7cfb5d38e1ce15e5b3056d96a7ceb06df67"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/48e48846ed8d308c13874e9dc7624c376e9d214a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48e48846ed8d308c13874e9dc7624c376e9d214a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/48e48846ed8d308c13874e9dc7624c376e9d214a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48e48846ed8d308c13874e9dc7624c376e9d214a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4107331cd354a67f873b7c1769478716af0c0593","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4107331cd354a67f873b7c1769478716af0c0593","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4107331cd354a67f873b7c1769478716af0c0593"}],"stats":{"total":394,"additions":131,"deletions":263},"files":[{"sha":"641378b141cdcf835dc698d293a9521260f06e9d","filename":"fit/wa-reference/src/main/resources/wa-embedded.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa-embedded.properties?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -23,6 +23,9 @@ keymaster.password=${anonymousKey}\n cas.server.name=https://localhost:9443\n cas.server.prefix=${cas.server.name}/syncope-wa\n \n+cas.authn.syncope.url=${cas.server.name}/syncope\n+cas.authn.syncope.name=DefaultSyncopeAuthModule\n+\n service.discovery.address=https://localhost:9443/syncope-wa/\n \n ##"},{"sha":"eaab37b09bcc38fac211d2fe37d72708231ef271","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -428,7 +428,7 @@ under the License.\n     <flowable.version>7.0.0.M1</flowable.version>\n     <flowable-old.version>6.8.0</flowable-old.version>\n \n-    <elasticsearch.version>8.6.2</elasticsearch.version>\n+    <elasticsearch.version>8.7.0</elasticsearch.version>\n \n     <disruptor.version>3.4.4</disruptor.version>\n     "},{"sha":"e14d0dd9a6af47a7798eca38522ed4227c73e26e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WAContext.java","status":"modified","additions":11,"deletions":53,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -28,9 +28,7 @@\n import io.swagger.v3.oas.models.security.SecurityScheme;\n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n@@ -44,14 +42,10 @@\n import org.apache.syncope.wa.starter.events.WAEventRepository;\n import org.apache.syncope.wa.starter.gauth.WAGoogleMfaAuthCredentialRepository;\n import org.apache.syncope.wa.starter.gauth.WAGoogleMfaAuthTokenRepository;\n-import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n-import org.apache.syncope.wa.starter.mapping.AttrReleaseMapFor;\n import org.apache.syncope.wa.starter.mapping.AttrReleaseMapper;\n-import org.apache.syncope.wa.starter.mapping.AuthMapFor;\n import org.apache.syncope.wa.starter.mapping.AuthMapper;\n import org.apache.syncope.wa.starter.mapping.CASSPClientAppTOMapper;\n-import org.apache.syncope.wa.starter.mapping.ClientAppMapFor;\n import org.apache.syncope.wa.starter.mapping.ClientAppMapper;\n import org.apache.syncope.wa.starter.mapping.DefaultAccessMapper;\n import org.apache.syncope.wa.starter.mapping.DefaultAttrReleaseMapper;\n@@ -62,7 +56,6 @@\n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n import org.apache.syncope.wa.starter.mapping.RemoteEndpointAccessMapper;\n import org.apache.syncope.wa.starter.mapping.SAML2SPClientAppTOMapper;\n-import org.apache.syncope.wa.starter.mapping.TicketExpirationMapFor;\n import org.apache.syncope.wa.starter.mapping.TicketExpirationMapper;\n import org.apache.syncope.wa.starter.mapping.TimeBasedAccessMapper;\n import org.apache.syncope.wa.starter.oidc.WAOIDCJWKSGeneratorService;\n@@ -205,58 +198,23 @@ public ClientAppMapper saml2SPClientAppTOMapper() {\n     public RegisteredServiceMapper registeredServiceMapper(\n             final ConfigurableApplicationContext ctx,\n             final CasConfigurationProperties casProperties,\n-            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan) {\n-\n-        Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n-            AuthMapFor amf = ctx.findAnnotationOnBean(name, AuthMapFor.class);\n-            if (amf != null) {\n-                authPolicyConfMappers.put(amf.authPolicyConfClass().getName(), bean);\n-            }\n-        });\n-\n-        Map<String, AccessMapper> accessPolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n-            AccessMapFor amf = ctx.findAnnotationOnBean(name, AccessMapFor.class);\n-            if (amf != null) {\n-                accessPolicyConfMappers.put(amf.accessPolicyConfClass().getName(), bean);\n-            }\n-        });\n-\n-        Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n-            AttrReleaseMapFor armpf = ctx.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n-            if (armpf != null) {\n-                attrReleasePolicyConfMappers.put(armpf.attrReleasePolicyConfClass().getName(), bean);\n-            }\n-        });\n-\n-        Map<String, TicketExpirationMapper> ticketExpirationPolicyConfMappers = new HashMap<>();\n-        ctx.getBeansOfType(TicketExpirationMapper.class).forEach((name, bean) -> {\n-            TicketExpirationMapFor temf = ctx.findAnnotationOnBean(name, TicketExpirationMapFor.class);\n-            if (temf != null) {\n-                ticketExpirationPolicyConfMappers.put(temf.ticketExpirationPolicyConfClass().getName(), bean);\n-            }\n-        });\n-\n-        Map<String, ClientAppMapper> clientAppTOMappers = new HashMap<>();\n-        ctx.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n-            ClientAppMapFor clientAppMapFor = ctx.findAnnotationOnBean(name, ClientAppMapFor.class);\n-            if (clientAppMapFor != null) {\n-                clientAppTOMappers.put(clientAppMapFor.clientAppClass().getName(), bean);\n-            }\n-        });\n+            final ObjectProvider<AuthenticationEventExecutionPlan> authenticationEventExecutionPlan,\n+            final List<AuthMapper> authMappers,\n+            final List<AccessMapper> accessMappers,\n+            final List<AttrReleaseMapper> attrReleaseMappers,\n+            final List<TicketExpirationMapper> ticketExpirationMappers,\n+            final List<ClientAppMapper> clientAppMappers) {\n \n         return new RegisteredServiceMapper(\n                 ctx,\n                 Optional.ofNullable(casProperties.getAuthn().getPac4j().getCore().getName()).\n                         orElse(DelegatedClientAuthenticationHandler.class.getSimpleName()),\n                 authenticationEventExecutionPlan,\n-                authPolicyConfMappers,\n-                accessPolicyConfMappers,\n-                attrReleasePolicyConfMappers,\n-                ticketExpirationPolicyConfMappers,\n-                clientAppTOMappers);\n+                authMappers,\n+                accessMappers,\n+                attrReleaseMappers,\n+                ticketExpirationMappers,\n+                clientAppMappers);\n     }\n \n     @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)"},{"sha":"9ed254328844d704acd94aa6d18a7c34743f959b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapFor.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapFor.java?ref=4107331cd354a67f873b7c1769478716af0c0593","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.starter.mapping;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface AccessMapFor {\n-\n-    Class<? extends AccessPolicyConf> accessPolicyConfClass();\n-}"},{"sha":"e5878a96e64f2edb75d0727564ba74595e8d737a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AccessMapper.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAccessMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n-@FunctionalInterface\n public interface AccessMapper {\n \n+    boolean supports(AccessPolicyConf conf);\n+\n     RegisteredServiceAccessStrategy build(AccessPolicyTO policy);\n }"},{"sha":"f28390dce8381de07a223ad58dae058c506cbbfe","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapFor.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapFor.java?ref=4107331cd354a67f873b7c1769478716af0c0593","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.starter.mapping;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface AttrReleaseMapFor {\n-\n-    Class<? extends AttrReleasePolicyConf> attrReleasePolicyConfClass();\n-}"},{"sha":"7b54d36734808e6ec94a5ca7f98bf1e3f501bf34","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AttrReleaseMapper.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAttrReleaseMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n \n-@FunctionalInterface\n public interface AttrReleaseMapper {\n \n+    boolean supports(AttrReleasePolicyConf conf);\n+\n     RegisteredServiceAttributeReleasePolicy build(AttrReleasePolicyTO policy);\n }"},{"sha":"f5fb5e4a06217e161e20cf65f432c845a1386d76","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapFor.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapFor.java?ref=4107331cd354a67f873b7c1769478716af0c0593","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.starter.mapping;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface AuthMapFor {\n-\n-    Class<? extends AuthPolicyConf> authPolicyConfClass();\n-}"},{"sha":"d2f3f23e0234d4eb99c081d08d11653c24deb177","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapper.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -19,15 +19,17 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apereo.cas.authentication.AuthenticationEventExecutionPlan;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-@FunctionalInterface\n public interface AuthMapper {\n \n+    boolean supports(AuthPolicyConf conf);\n+\n     AuthMapperResult build(\n             ConfigurableApplicationContext ctx,\n             String pac4jCoreName,"},{"sha":"018d1a6edafad5ecc6c3c4ededf0ef094b1bd4fa","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AuthMapperResult.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapperResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapperResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAuthMapperResult.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -24,6 +24,8 @@\n \n public class AuthMapperResult {\n \n+    public static final AuthMapperResult EMPTY = new AuthMapperResult(null, null, null);\n+\n     private final RegisteredServiceAuthenticationPolicy authPolicy;\n \n     private final RegisteredServiceMultifactorPolicy mfaPolicy;"},{"sha":"8294aed3a0b9944bbe00b5204913de0a6abef900","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPClientAppTOMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPClientAppTOMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import org.apache.syncope.common.lib.to.CASSPClientAppTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.CasRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n@@ -32,9 +33,13 @@\n import org.apereo.cas.services.RegisteredServiceTicketGrantingTicketExpirationPolicy;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-@ClientAppMapFor(clientAppClass = CASSPClientAppTO.class)\n public class CASSPClientAppTOMapper extends AbstractClientAppMapper {\n \n+    @Override\n+    public boolean supports(final ClientAppTO clientApp) {\n+        return clientApp instanceof CASSPClientAppTO;\n+    }\n+\n     @Override\n     public RegisteredService map(\n             final ConfigurableApplicationContext ctx,"},{"sha":"5bd1b073584bef69a9226975be5a96e8a06878f0","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapFor.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapFor.java?ref=4107331cd354a67f873b7c1769478716af0c0593","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.starter.mapping;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.to.ClientAppTO;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface ClientAppMapFor {\n-\n-    Class<? extends ClientAppTO> clientAppClass();\n-}"},{"sha":"5dd8e7c9bb1b0099767ce8b0362ce57308c0d5ee","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n@@ -30,9 +31,10 @@\n import org.apereo.cas.services.RegisteredServiceTicketGrantingTicketExpirationPolicy;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-@FunctionalInterface\n public interface ClientAppMapper {\n \n+    boolean supports(ClientAppTO clientApp);\n+\n     RegisteredService map(\n             ConfigurableApplicationContext ctx,\n             WAClientApp clientApp,"},{"sha":"be4a7f13d5e93007bafd2b4a9d0298560068b887","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -21,14 +21,19 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n-@AccessMapFor(accessPolicyConfClass = DefaultAccessPolicyConf.class)\n public class DefaultAccessMapper implements AccessMapper {\n \n+    @Override\n+    public boolean supports(final AccessPolicyConf conf) {\n+        return conf instanceof DefaultAccessPolicyConf;\n+    }\n+\n     @Override\n     public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n         DefaultAccessPolicyConf conf = (DefaultAccessPolicyConf) policy.getConf();"},{"sha":"d3f982a2f2661e7d618d2c5ee81855d084447d6b","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAttrReleaseMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAttrReleaseMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.HashSet;\n+import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n import org.apereo.cas.authentication.principal.DefaultPrincipalAttributesRepository;\n@@ -34,9 +35,13 @@\n import org.apereo.cas.services.consent.DefaultRegisteredServiceConsentPolicy;\n import org.apereo.cas.util.model.TriStateBoolean;\n \n-@AttrReleaseMapFor(attrReleasePolicyConfClass = DefaultAttrReleasePolicyConf.class)\n public class DefaultAttrReleaseMapper implements AttrReleaseMapper {\n \n+    @Override\n+    public boolean supports(final AttrReleasePolicyConf conf) {\n+        return conf instanceof DefaultAttrReleasePolicyConf;\n+    }\n+\n     @Override\n     public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyTO policy) {\n         DefaultAttrReleasePolicyConf conf = (DefaultAttrReleasePolicyConf) policy.getConf();"},{"sha":"61ec5a5b6acb0c472e367caa0c92a81085a78d3c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.auth.MFAAuthModuleConf;\n import org.apache.syncope.common.lib.auth.Pac4jAuthModuleConf;\n+import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n@@ -42,11 +43,15 @@\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-@AuthMapFor(authPolicyConfClass = DefaultAuthPolicyConf.class)\n public class DefaultAuthMapper implements AuthMapper {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DefaultAuthMapper.class);\n \n+    @Override\n+    public boolean supports(final AuthPolicyConf conf) {\n+        return conf instanceof DefaultAuthPolicyConf;\n+    }\n+\n     @Override\n     public AuthMapperResult build(\n             final ConfigurableApplicationContext ctx,"},{"sha":"2a2f74cf866577cd43f81173bd11e7562b8f652d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultTicketExpirationMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultTicketExpirationMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultTicketExpirationMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultTicketExpirationMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Optional;\n import org.apache.syncope.common.lib.policy.DefaultTicketExpirationPolicyConf;\n+import org.apache.syncope.common.lib.policy.TicketExpirationPolicyConf;\n import org.apache.syncope.common.lib.policy.TicketExpirationPolicyTO;\n import org.apereo.cas.services.DefaultRegisteredServiceProxyGrantingTicketExpirationPolicy;\n import org.apereo.cas.services.DefaultRegisteredServiceProxyTicketExpirationPolicy;\n@@ -30,9 +31,13 @@\n import org.apereo.cas.services.RegisteredServiceServiceTicketExpirationPolicy;\n import org.apereo.cas.services.RegisteredServiceTicketGrantingTicketExpirationPolicy;\n \n-@TicketExpirationMapFor(ticketExpirationPolicyConfClass = DefaultTicketExpirationPolicyConf.class)\n public class DefaultTicketExpirationMapper implements TicketExpirationMapper {\n \n+    @Override\n+    public boolean supports(final TicketExpirationPolicyConf conf) {\n+        return conf instanceof DefaultTicketExpirationPolicyConf;\n+    }\n+\n     protected Optional<DefaultTicketExpirationPolicyConf> conf(final TicketExpirationPolicyTO policy) {\n         if (policy.getConf() instanceof DefaultTicketExpirationPolicyConf) {\n             return Optional.of((DefaultTicketExpirationPolicyConf) policy.getConf());"},{"sha":"7e3cf71cced64642d519f31b1f28e24f07e21b4a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/HttpRequestAccessMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FHttpRequestAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FHttpRequestAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FHttpRequestAccessMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -19,14 +19,19 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.Optional;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.HttpRequestAccessPolicyConf;\n import org.apereo.cas.services.HttpRequestRegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n \n-@AccessMapFor(accessPolicyConfClass = HttpRequestAccessPolicyConf.class)\n public class HttpRequestAccessMapper implements AccessMapper {\n \n+    @Override\n+    public boolean supports(final AccessPolicyConf conf) {\n+        return conf instanceof HttpRequestAccessPolicyConf;\n+    }\n+\n     @Override\n     public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n         HttpRequestAccessPolicyConf conf = (HttpRequestAccessPolicyConf) policy.getConf();"},{"sha":"7e7a0f25a37f6c1dbc93797a3e606fdfcf5191e5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPClientAppTOMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPClientAppTOMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -24,6 +24,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.to.OIDCRPClientAppTO;\n import org.apache.syncope.common.lib.types.OIDCGrantType;\n import org.apache.syncope.common.lib.types.OIDCResponseType;\n@@ -51,11 +52,15 @@\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-@ClientAppMapFor(clientAppClass = OIDCRPClientAppTO.class)\n public class OIDCRPClientAppTOMapper extends AbstractClientAppMapper {\n \n     private static final String CUSTOM_SCOPE = \"syncope\";\n \n+    @Override\n+    public boolean supports(final ClientAppTO clientApp) {\n+        return clientApp instanceof OIDCRPClientAppTO;\n+    }\n+\n     @Override\n     public RegisteredService map(\n             final ConfigurableApplicationContext ctx,"},{"sha":"f58104134fd12c3bff283a37c03d46cb7b5b924d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":37,"deletions":35,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import java.util.Map;\n+import java.util.List;\n import java.util.Optional;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAttrReleasePolicyConf;\n@@ -50,65 +50,67 @@ public class RegisteredServiceMapper {\n \n     protected final ObjectProvider<AuthenticationEventExecutionPlan> authEventExecPlan;\n \n-    protected final Map<String, AuthMapper> authPolicyConfMappers;\n+    protected final List<AuthMapper> authMappers;\n \n-    protected final Map<String, AccessMapper> accessPolicyConfMappers;\n+    protected final List<AccessMapper> accessMappers;\n \n-    protected final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers;\n+    protected final List<AttrReleaseMapper> attrReleaseMappers;\n \n-    protected final Map<String, TicketExpirationMapper> ticketExpirationPolicyConfMappers;\n+    protected final List<TicketExpirationMapper> ticketExpirationMappers;\n \n-    protected final Map<String, ClientAppMapper> clientAppTOMappers;\n+    protected final List<ClientAppMapper> clientAppMappers;\n \n     public RegisteredServiceMapper(\n             final ConfigurableApplicationContext ctx,\n             final String pac4jCoreName,\n             final ObjectProvider<AuthenticationEventExecutionPlan> authEventExecPlan,\n-            final Map<String, AuthMapper> authPolicyConfMappers,\n-            final Map<String, AccessMapper> accessPolicyConfMappers,\n-            final Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers,\n-            final Map<String, TicketExpirationMapper> ticketExpirationPolicyConfMappers,\n-            final Map<String, ClientAppMapper> clientAppTOMappers) {\n+            final List<AuthMapper> authMappers,\n+            final List<AccessMapper> accessMappers,\n+            final List<AttrReleaseMapper> attrReleaseMappers,\n+            final List<TicketExpirationMapper> ticketExpirationMappers,\n+            final List<ClientAppMapper> clientAppMappers) {\n \n         this.ctx = ctx;\n         this.pac4jCoreName = pac4jCoreName;\n         this.authEventExecPlan = authEventExecPlan;\n-        this.authPolicyConfMappers = authPolicyConfMappers;\n-        this.accessPolicyConfMappers = accessPolicyConfMappers;\n-        this.attrReleasePolicyConfMappers = attrReleasePolicyConfMappers;\n-        this.ticketExpirationPolicyConfMappers = ticketExpirationPolicyConfMappers;\n-        this.clientAppTOMappers = clientAppTOMappers;\n+        this.authMappers = authMappers;\n+        this.accessMappers = accessMappers;\n+        this.attrReleaseMappers = attrReleaseMappers;\n+        this.ticketExpirationMappers = ticketExpirationMappers;\n+        this.clientAppMappers = clientAppMappers;\n     }\n \n     public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n-        String key = clientApp.getClientAppTO().getClass().getName();\n-        ClientAppMapper clientAppMapper = clientAppTOMappers.get(key);\n+        ClientAppMapper clientAppMapper = clientAppMappers.stream().\n+                filter(m -> m.supports(clientApp.getClientAppTO())).\n+                findFirst().\n+                orElse(null);\n         if (clientAppMapper == null) {\n-            LOG.warn(\"Unable to locate ClientAppMapper using key {}\", key);\n+            LOG.warn(\"Unable to locate ClientAppMapper for {}\", clientApp.getClientAppTO().getClass().getName());\n             return null;\n         }\n \n         RegisteredServiceAuthenticationPolicy authPolicy = null;\n         RegisteredServiceMultifactorPolicy mfaPolicy = null;\n         RegisteredServiceDelegatedAuthenticationPolicy delegatedAuthPolicy = null;\n         if (clientApp.getAuthPolicy() != null) {\n-            AuthMapper authMapper = authPolicyConfMappers.get(\n-                    clientApp.getAuthPolicy().getConf().getClass().getName());\n-            AuthMapperResult result = Optional.ofNullable(authMapper).map(mapper -> mapper.build(\n+            Optional<AuthMapper> authMapper = authMappers.stream().\n+                    filter(m -> m.supports(clientApp.getAuthPolicy().getConf())).\n+                    findFirst();\n+            AuthMapperResult result = authMapper.map(mapper -> mapper.build(\n                     ctx, pac4jCoreName, authEventExecPlan, clientApp.getAuthPolicy(), clientApp.getAuthModules())).\n-                    orElseGet(() -> new AuthMapperResult(null, null, null));\n+                    orElse(AuthMapperResult.EMPTY);\n             authPolicy = result.getAuthPolicy();\n             mfaPolicy = result.getMfaPolicy();\n             delegatedAuthPolicy = result.getDelegateAuthPolicy();\n         }\n \n         RegisteredServiceAccessStrategy accessStrategy = null;\n         if (clientApp.getAccessPolicy() != null) {\n-            AccessMapper accessPolicyConfMapper = accessPolicyConfMappers.get(\n-                    clientApp.getAccessPolicy().getConf().getClass().getName());\n-            accessStrategy = Optional.ofNullable(accessPolicyConfMapper).\n-                    map(mapper -> mapper.build(clientApp.getAccessPolicy())).\n-                    orElse(null);\n+            Optional<AccessMapper> accessMapper = accessMappers.stream().\n+                    filter(m -> m.supports(clientApp.getAccessPolicy().getConf())).\n+                    findFirst();\n+            accessStrategy = accessMapper.map(mapper -> mapper.build(clientApp.getAccessPolicy())).orElse(null);\n         }\n         if (delegatedAuthPolicy != null) {\n             if (accessStrategy == null) {\n@@ -129,20 +131,20 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n                     arpTO.setConf(new DefaultAttrReleasePolicyConf());\n                     return arpTO;\n                 });\n-        AttrReleaseMapper attrReleasePolicyConfMapper = attrReleasePolicyConfMappers.get(\n-                attrReleasePolicyTO.getConf().getClass().getName());\n+        Optional<AttrReleaseMapper> attrReleaseMapper = attrReleaseMappers.stream().\n+                filter(m -> m.supports(attrReleasePolicyTO.getConf())).\n+                findFirst();\n         RegisteredServiceAttributeReleasePolicy attributeReleasePolicy =\n-                Optional.ofNullable(attrReleasePolicyConfMapper).\n-                        map(mapper -> mapper.build(attrReleasePolicyTO)).\n-                        orElse(null);\n+                attrReleaseMapper.map(mapper -> mapper.build(attrReleasePolicyTO)).orElse(null);\n \n         RegisteredServiceTicketGrantingTicketExpirationPolicy tgtExpirationPolicy = null;\n         RegisteredServiceServiceTicketExpirationPolicy stExpirationPolicy = null;\n         RegisteredServiceProxyGrantingTicketExpirationPolicy tgtProxyExpirationPolicy = null;\n         RegisteredServiceProxyTicketExpirationPolicy stProxyExpirationPolicy = null;\n         if (clientApp.getTicketExpirationPolicy() != null) {\n-            TicketExpirationMapper ticketExpirationMapper = ticketExpirationPolicyConfMappers.get(\n-                    clientApp.getTicketExpirationPolicy().getConf().getClass().getName());\n+            TicketExpirationMapper ticketExpirationMapper = ticketExpirationMappers.stream().\n+                    filter(m -> m.supports(clientApp.getTicketExpirationPolicy().getConf())).\n+                    findFirst().orElse(null);\n             if (ticketExpirationMapper != null) {\n                 tgtExpirationPolicy = ticketExpirationMapper.buildTGT(clientApp.getTicketExpirationPolicy());\n                 stExpirationPolicy = ticketExpirationMapper.buildST(clientApp.getTicketExpirationPolicy());"},{"sha":"0f46aba479da1658c456e249eba62eea10ccd4bf","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RemoteEndpointAccessMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRemoteEndpointAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRemoteEndpointAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRemoteEndpointAccessMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -19,14 +19,19 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.Optional;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.RemoteEndpointAccessPolicyConf;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RemoteEndpointServiceAccessStrategy;\n \n-@AccessMapFor(accessPolicyConfClass = RemoteEndpointAccessPolicyConf.class)\n public class RemoteEndpointAccessMapper implements AccessMapper {\n \n+    @Override\n+    public boolean supports(final AccessPolicyConf conf) {\n+        return conf instanceof RemoteEndpointAccessPolicyConf;\n+    }\n+\n     @Override\n     public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n         RemoteEndpointAccessPolicyConf conf = (RemoteEndpointAccessPolicyConf) policy.getConf();"},{"sha":"2aa6375b46be6d2bd0774d5516ae6aae5a703bc1","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPClientAppTOMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPClientAppTOMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Optional;\n import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n import org.apache.syncope.common.lib.to.SAML2SPClientAppTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n@@ -35,9 +36,13 @@\n import org.apereo.cas.util.model.TriStateBoolean;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-@ClientAppMapFor(clientAppClass = SAML2SPClientAppTO.class)\n public class SAML2SPClientAppTOMapper extends AbstractClientAppMapper {\n \n+    @Override\n+    public boolean supports(final ClientAppTO clientApp) {\n+        return clientApp instanceof SAML2SPClientAppTO;\n+    }\n+\n     @Override\n     public RegisteredService map(\n             final ConfigurableApplicationContext ctx,"},{"sha":"b13b2fe106708d0dee73243191edfb35957c6c4e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/TicketExpirationMapFor.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTicketExpirationMapFor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4107331cd354a67f873b7c1769478716af0c0593/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTicketExpirationMapFor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTicketExpirationMapFor.java?ref=4107331cd354a67f873b7c1769478716af0c0593","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.starter.mapping;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.common.lib.policy.TicketExpirationPolicyConf;\n-\n-@Target({ ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface TicketExpirationMapFor {\n-\n-    Class<? extends TicketExpirationPolicyConf> ticketExpirationPolicyConfClass();\n-}"},{"sha":"618873a376410a8272b3a3916581e284d49fac9a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/TicketExpirationMapper.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTicketExpirationMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTicketExpirationMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTicketExpirationMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import org.apache.syncope.common.lib.policy.TicketExpirationPolicyConf;\n import org.apache.syncope.common.lib.policy.TicketExpirationPolicyTO;\n import org.apereo.cas.services.RegisteredServiceProxyGrantingTicketExpirationPolicy;\n import org.apereo.cas.services.RegisteredServiceProxyTicketExpirationPolicy;\n@@ -26,6 +27,8 @@\n \n public interface TicketExpirationMapper {\n \n+    boolean supports(TicketExpirationPolicyConf conf);\n+\n     RegisteredServiceTicketGrantingTicketExpirationPolicy buildTGT(TicketExpirationPolicyTO policy);\n \n     RegisteredServiceServiceTicketExpirationPolicy buildST(TicketExpirationPolicyTO policy);"},{"sha":"9cb0f3deae0241cf55b43ba5a69f2efe19746e13","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/TimeBasedAccessMapper.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTimeBasedAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTimeBasedAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FTimeBasedAccessMapper.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -20,14 +20,19 @@\n \n import java.time.format.DateTimeFormatter;\n import java.util.Optional;\n+import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.TimeBasedAccessPolicyConf;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.TimeBasedRegisteredServiceAccessStrategy;\n \n-@AccessMapFor(accessPolicyConfClass = TimeBasedAccessPolicyConf.class)\n public class TimeBasedAccessMapper implements AccessMapper {\n \n+    @Override\n+    public boolean supports(final AccessPolicyConf conf) {\n+        return conf instanceof TimeBasedAccessPolicyConf;\n+    }\n+\n     @Override\n     public RegisteredServiceAccessStrategy build(final AccessPolicyTO policy) {\n         TimeBasedAccessPolicyConf conf = (TimeBasedAccessPolicyConf) policy.getConf();"},{"sha":"a6a2e9843d1823048eed006b03cb1b50558ded4d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/WAServiceRegistry.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/48e48846ed8d308c13874e9dc7624c376e9d214a/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java?ref=48e48846ed8d308c13874e9dc7624c376e9d214a","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -80,6 +81,7 @@ public Collection<RegisteredService> load() {\n             LOG.info(\"Loading application definitions\");\n             return waRestClient.getSyncopeClient().getService(WAClientAppService.class).list().stream().\n                     map(registeredServiceMapper::toRegisteredService).\n+                    filter(Objects::nonNull).\n                     collect(Collectors.toList());\n         }\n     }"}]}