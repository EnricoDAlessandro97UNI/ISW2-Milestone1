{"sha":"0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA4NzBjOWVlZTdhYjc5NDgzYjNjODIyYWM3Yzg0YWViNDMzZDNiYTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-25T08:01:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-03-25T08:01:10Z"},"message":"Upgrading GreenMail","tree":{"sha":"6cc8624cfb852cc397cd3e413dfcfa124067a2ec","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6cc8624cfb852cc397cd3e413dfcfa124067a2ec"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea2c60c973c485ceef19b956b70f4e989c0253c2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ea2c60c973c485ceef19b956b70f4e989c0253c2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ea2c60c973c485ceef19b956b70f4e989c0253c2"}],"stats":{"total":390,"additions":57,"deletions":333},"files":[{"sha":"133cec8df8b38082588e98cf17914c7533d47abe","filename":"fit/build-tools/src/main/java/com/icegreen/greenmail/smtp/InterruptableGreenMail.java","status":"removed","additions":0,"deletions":330,"changes":330,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ea2c60c973c485ceef19b956b70f4e989c0253c2/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableGreenMail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ea2c60c973c485ceef19b956b70f4e989c0253c2/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableGreenMail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Fsmtp%2FInterruptableGreenMail.java?ref=ea2c60c973c485ceef19b956b70f4e989c0253c2","patch":"@@ -1,330 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package com.icegreen.greenmail.smtp;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n-\n-import javax.mail.MessagingException;\n-import javax.mail.internet.MimeMessage;\n-\n-import com.icegreen.greenmail.Managers;\n-import com.icegreen.greenmail.configuration.ConfiguredGreenMail;\n-import com.icegreen.greenmail.configuration.GreenMailConfiguration;\n-import com.icegreen.greenmail.imap.ImapHostManager;\n-import com.icegreen.greenmail.imap.ImapServer;\n-import com.icegreen.greenmail.pop3.Pop3Server;\n-import com.icegreen.greenmail.server.AbstractServer;\n-import com.icegreen.greenmail.store.FolderException;\n-import com.icegreen.greenmail.store.InMemoryStore;\n-import com.icegreen.greenmail.store.MailFolder;\n-import com.icegreen.greenmail.store.StoredMessage;\n-import com.icegreen.greenmail.user.GreenMailUser;\n-import com.icegreen.greenmail.user.UserException;\n-import com.icegreen.greenmail.util.GreenMailUtil;\n-import com.icegreen.greenmail.util.ServerSetup;\n-import com.icegreen.greenmail.util.ServerSetupTest;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Utility class that manages a greenmail server with support for multiple protocols.\n- */\n-public class InterruptableGreenMail extends ConfiguredGreenMail {\n-\n-    protected static final Logger LOG = LoggerFactory.getLogger(InterruptableGreenMail.class);\n-\n-    protected Managers managers;\n-\n-    protected Map<String, AbstractServer> services;\n-\n-    protected ServerSetup[] config;\n-\n-    /**\n-     * Creates a SMTP, SMTPS, POP3, POP3S, IMAP, and IMAPS server binding onto non-default ports.\n-     * The ports numbers are defined in {@link ServerSetupTest}\n-     */\n-    public InterruptableGreenMail() {\n-        this(ServerSetupTest.ALL);\n-    }\n-\n-    /**\n-     * Call this constructor if you want to run one of the email servers only\n-     *\n-     * @param config Server setup to use\n-     */\n-    public InterruptableGreenMail(final ServerSetup config) {\n-        this(new ServerSetup[] { config });\n-    }\n-\n-    /**\n-     * Call this constructor if you want to run more than one of the email servers\n-     *\n-     * @param config Server setup to use\n-     */\n-    public InterruptableGreenMail(final ServerSetup[] config) {\n-        this.config = config;\n-        init();\n-    }\n-\n-    /**\n-     * Initialize\n-     */\n-    protected void init() {\n-        if (managers == null) {\n-            managers = new Managers();\n-        }\n-        if (services == null) {\n-            services = createServices(config, managers);\n-        }\n-    }\n-\n-    @Override\n-    public synchronized void start() {\n-        init();\n-\n-        final Collection<AbstractServer> servers = services.values();\n-        servers.forEach(service -> {\n-            service.startService();\n-        });\n-\n-        // Wait till all services are up and running\n-        servers.forEach(service -> {\n-            try {\n-                service.waitTillRunning(service.getServerSetup().getServerStartupTimeout());\n-            } catch (InterruptedException ex) {\n-                Thread.currentThread().interrupt();\n-                throw new IllegalStateException(\"Could not start mail service \" + service, ex);\n-            }\n-        });\n-\n-        LOG.debug(\"Started services, performing check if all up\");\n-        // Make sure if all services are up in a second loop, giving slow services more time.\n-        servers.stream().\n-                filter(service -> (!service.isRunning())).\n-                forEach((service) -> {\n-                    throw new IllegalStateException(\"Could not start mail server \" + service\n-                            + \", try to set server startup timeout > \"\n-                            + service.getServerSetup().getServerStartupTimeout()\n-                            + \" via \" + ServerSetup.class.getSimpleName() + \".setServerStartupTimeout(timeoutInMs) or \"\n-                            + \"-Dgreenmail.startup.timeout\");\n-                });\n-\n-        doConfigure();\n-    }\n-\n-    @Override\n-    public synchronized void stop() {\n-        LOG.debug(\"Stopping GreenMail ...\");\n-\n-        if (services != null) {\n-            services.values().forEach(service -> {\n-                LOG.debug(\"Stopping service {}\", service);\n-                service.stopService();\n-            });\n-        }\n-        managers = new Managers();\n-        services = null;\n-    }\n-\n-    @Override\n-    public void reset() {\n-        stop();\n-        start();\n-    }\n-\n-    /**\n-     * Create the required services according to the server setup\n-     *\n-     * @param config Service configuration\n-     * @param mgr Service managers\n-     * @return Services map\n-     */\n-    protected Map<String, AbstractServer> createServices(final ServerSetup[] config, final Managers mgr) {\n-        Map<String, AbstractServer> srvc = new HashMap<>();\n-        for (ServerSetup setup : config) {\n-            if (srvc.containsKey(setup.getProtocol())) {\n-                throw new IllegalArgumentException(\"Server '\" + setup.getProtocol()\n-                        + \"' was found at least twice in the array\");\n-            }\n-            final String protocol = setup.getProtocol();\n-            if (protocol.startsWith(ServerSetup.PROTOCOL_SMTP)) {\n-                srvc.put(protocol, new InterruptableSmtpServer(setup, mgr));\n-            } else if (protocol.startsWith(ServerSetup.PROTOCOL_POP3)) {\n-                srvc.put(protocol, new Pop3Server(setup, mgr));\n-            } else if (protocol.startsWith(ServerSetup.PROTOCOL_IMAP)) {\n-                srvc.put(protocol, new ImapServer(setup, mgr));\n-            }\n-        }\n-        return srvc;\n-    }\n-\n-    @Override\n-    public SmtpServer getSmtp() {\n-        return (SmtpServer) services.get(ServerSetup.PROTOCOL_SMTP);\n-    }\n-\n-    @Override\n-    public ImapServer getImap() {\n-        return (ImapServer) services.get(ServerSetup.PROTOCOL_IMAP);\n-\n-    }\n-\n-    @Override\n-    public Pop3Server getPop3() {\n-        return (Pop3Server) services.get(ServerSetup.PROTOCOL_POP3);\n-    }\n-\n-    @Override\n-    public SmtpServer getSmtps() {\n-        return (SmtpServer) services.get(ServerSetup.PROTOCOL_SMTPS);\n-    }\n-\n-    @Override\n-    public ImapServer getImaps() {\n-        return (ImapServer) services.get(ServerSetup.PROTOCOL_IMAPS);\n-\n-    }\n-\n-    @Override\n-    public Pop3Server getPop3s() {\n-        return (Pop3Server) services.get(ServerSetup.PROTOCOL_POP3S);\n-    }\n-\n-    @Override\n-    public Managers getManagers() {\n-        return managers;\n-    }\n-\n-    //~ Convenience Methods, often needed while testing ---------------------------------------------------------------\n-    @Override\n-    public boolean waitForIncomingEmail(final long timeout, final int emailCount) {\n-        final CountDownLatch waitObject = managers.getSmtpManager().createAndAddNewWaitObject(emailCount);\n-        final long endTime = System.currentTimeMillis() + timeout;\n-        while (waitObject.getCount() > 0) {\n-            final long waitTime = endTime - System.currentTimeMillis();\n-            if (waitTime < 0L) {\n-                return waitObject.getCount() == 0;\n-            }\n-            try {\n-                waitObject.await(waitTime, TimeUnit.MILLISECONDS);\n-            } catch (InterruptedException e) {\n-                // Continue loop, in case of premature interruption\n-            }\n-        }\n-        return waitObject.getCount() == 0;\n-    }\n-\n-    @Override\n-    public boolean waitForIncomingEmail(final int emailCount) {\n-        return waitForIncomingEmail(5000L, emailCount);\n-    }\n-\n-    @Override\n-    public MimeMessage[] getReceivedMessages() {\n-        List<StoredMessage> msgs = managers.getImapHostManager().getAllMessages();\n-        MimeMessage[] ret = new MimeMessage[msgs.size()];\n-        for (int i = 0; i < msgs.size(); i++) {\n-            StoredMessage storedMessage = msgs.get(i);\n-            ret[i] = storedMessage.getMimeMessage();\n-        }\n-        return ret;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public MimeMessage[] getReceviedMessagesForDomain(final String domain) {\n-        return getReceivedMessagesForDomain(domain);\n-    }\n-\n-    @Override\n-    public MimeMessage[] getReceivedMessagesForDomain(final String domain) {\n-        List<StoredMessage> msgs = managers.getImapHostManager().getAllMessages();\n-        List<MimeMessage> ret = new ArrayList<>();\n-        try {\n-            for (StoredMessage msg : msgs) {\n-                String tos = GreenMailUtil.getAddressList(msg.getMimeMessage().getAllRecipients());\n-                if (tos.toLowerCase().contains(domain)) {\n-                    ret.add(msg.getMimeMessage());\n-                }\n-            }\n-        } catch (MessagingException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return ret.toArray(new MimeMessage[ret.size()]);\n-    }\n-\n-    @Override\n-    public GreenMailUser setUser(final String login, final String password) {\n-        return setUser(login, login, password);\n-    }\n-\n-    @Override\n-    public GreenMailUser setUser(final String email, final String login, final String password) {\n-        GreenMailUser user = managers.getUserManager().getUser(login);\n-        if (null == user) {\n-            try {\n-                user = managers.getUserManager().createUser(email, login, password);\n-            } catch (UserException e) {\n-                throw new RuntimeException(e);\n-            }\n-        } else {\n-            user.setPassword(password);\n-        }\n-        return user;\n-    }\n-\n-    @Override\n-    public void setQuotaSupported(final boolean isEnabled) {\n-        managers.getImapHostManager().getStore().setQuotaSupported(isEnabled);\n-    }\n-\n-    @Override\n-    public void setUsers(final Properties users) {\n-        users.keySet().stream().\n-                map(String.class::cast).\n-                forEach(email -> {\n-                    String password = users.getProperty(email);\n-                    setUser(email, email, password);\n-                });\n-    }\n-\n-    @Override\n-    public InterruptableGreenMail withConfiguration(final GreenMailConfiguration config) {\n-        // Just overriding to return more specific type\n-        super.withConfiguration(config);\n-        return this;\n-    }\n-\n-    @Override\n-    public void purgeEmailFromAllMailboxes() throws FolderException {\n-        ImapHostManager imaphost = getManagers().getImapHostManager();\n-        InMemoryStore store = (InMemoryStore) imaphost.getStore();\n-        Collection<MailFolder> mailboxes = store.listMailboxes(\"*\");\n-        mailboxes.forEach(folder -> {\n-            folder.deleteAllMessages();\n-        });\n-    }\n-}"},{"sha":"101708e454950ea14c6c711f2513001f3b1836b8","filename":"fit/build-tools/src/main/java/com/icegreen/greenmail/util/InterruptableGreenMail.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Futil%2FInterruptableGreenMail.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Futil%2FInterruptableGreenMail.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Fcom%2Ficegreen%2Fgreenmail%2Futil%2FInterruptableGreenMail.java?ref=0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.icegreen.greenmail.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.icegreen.greenmail.Managers;\n+import com.icegreen.greenmail.imap.ImapServer;\n+import com.icegreen.greenmail.pop3.Pop3Server;\n+import com.icegreen.greenmail.server.AbstractServer;\n+import com.icegreen.greenmail.smtp.InterruptableSmtpServer;\n+\n+public class InterruptableGreenMail extends GreenMail {\n+\n+    public InterruptableGreenMail(final ServerSetup[] config) {\n+        super(config);\n+    }\n+\n+    @Override\n+    protected Map<String, AbstractServer> createServices(final ServerSetup[] config, final Managers mgr) {\n+        Map<String, AbstractServer> srvc = new HashMap<>();\n+        for (ServerSetup setup : config) {\n+            if (srvc.containsKey(setup.getProtocol())) {\n+                throw new IllegalArgumentException(\"Server '\" + setup.getProtocol()\n+                        + \"' was found at least twice in the array\");\n+            }\n+            final String protocol = setup.getProtocol();\n+            if (protocol.startsWith(ServerSetup.PROTOCOL_SMTP)) {\n+                srvc.put(protocol, new InterruptableSmtpServer(setup, mgr));\n+            } else if (protocol.startsWith(ServerSetup.PROTOCOL_POP3)) {\n+                srvc.put(protocol, new Pop3Server(setup, mgr));\n+            } else if (protocol.startsWith(ServerSetup.PROTOCOL_IMAP)) {\n+                srvc.put(protocol, new ImapServer(setup, mgr));\n+            }\n+        }\n+        return srvc;\n+    }\n+}"},{"sha":"ce2acbdcb2d252c6fb9a803cc94a735cf1824d27","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/GreenMailStartStopListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FGreenMailStartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FGreenMailStartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2FGreenMailStartStopListener.java?ref=0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.fit.buildtools;\n \n-import com.icegreen.greenmail.smtp.InterruptableGreenMail;\n+import com.icegreen.greenmail.util.InterruptableGreenMail;\n import com.icegreen.greenmail.util.ServerSetup;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletContextEvent;"},{"sha":"56e7655750b55118080e3880eeebfa5f2658d189","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/GreenMailServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FGreenMailServiceImpl.java?ref=0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","patch":"@@ -20,7 +20,7 @@\n \n import javax.ws.rs.core.Context;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n-import com.icegreen.greenmail.smtp.InterruptableGreenMail;\n+import com.icegreen.greenmail.util.InterruptableGreenMail;\n import org.apache.syncope.fit.buildtools.GreenMailStartStopListener;\n import com.icegreen.greenmail.smtp.InterruptableSmtpServer;\n import org.slf4j.Logger;"},{"sha":"2b56169d8b378de611f04357618f24645da63a50","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0870c9eee7ab79483b3c822ac7c84aeb433d3ba5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=0870c9eee7ab79483b3c822ac7c84aeb433d3ba5","patch":"@@ -1266,7 +1266,7 @@ under the License.\n       <dependency>\n         <groupId>com.icegreen</groupId>\n         <artifactId>greenmail</artifactId>\n-        <version>1.5.9</version>\n+        <version>1.5.10</version>\n         <exclusions>\n           <exclusion>\n             <groupId>junit</groupId>"}]}