{"sha":"65d652af618a54292bb8dcf5cf93147bb6b83c52","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY1ZDY1MmFmNjE4YTU0MjkyYmI4ZGNmNWNmOTMxNDdiYjZiODNjNTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-20T14:29:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-20T14:29:53Z"},"message":"[SYNCOPE-119] New security model implemented","tree":{"sha":"2367b53de3733f8f6ff7d1bfc314d7d07476e1b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2367b53de3733f8f6ff7d1bfc314d7d07476e1b5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/65d652af618a54292bb8dcf5cf93147bb6b83c52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65d652af618a54292bb8dcf5cf93147bb6b83c52","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/65d652af618a54292bb8dcf5cf93147bb6b83c52","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65d652af618a54292bb8dcf5cf93147bb6b83c52/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"18958ba234672741adba9b9fa42a503166b9692a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18958ba234672741adba9b9fa42a503166b9692a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/18958ba234672741adba9b9fa42a503166b9692a"}],"stats":{"total":9789,"additions":3605,"deletions":6184},"files":[{"sha":"9774a305a5411e424fd1b4578b93689fcfee45b2","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,7 +21,6 @@\n import com.beust.jcommander.JCommander;\n import com.beust.jcommander.ParameterException;\n import org.apache.syncope.client.cli.commands.ConfigurationCommand;\n-import org.apache.syncope.client.cli.commands.EntitlementCommand;\n import org.apache.syncope.client.cli.commands.LoggerCommand;\n import org.apache.syncope.client.cli.commands.NotificationCommand;\n import org.apache.syncope.client.cli.commands.PolicyCommand;\n@@ -54,8 +53,6 @@ public class SyncopeAdm {\n \n     private static PolicyCommand policyCommand;\n \n-    private static EntitlementCommand entitlementCommand;\n-\n     public static void main(final String[] args) {\n         LOG.debug(\"Starting with args \\n\");\n \n@@ -96,9 +93,6 @@ private static void instantiateCommands() {\n         policyCommand = new PolicyCommand();\n         jcommander.addCommand(policyCommand);\n         LOG.debug(\"Added PolicyCommand\");\n-        entitlementCommand = new EntitlementCommand();\n-        jcommander.addCommand(entitlementCommand);\n-        LOG.debug(\"Added EntitlementCommand\");\n     }\n \n     private static void executeCommand() {\n@@ -116,8 +110,6 @@ private static void executeCommand() {\n             reportCommand.execute();\n         } else if (\"policy\".equalsIgnoreCase(command)) {\n             policyCommand.execute();\n-        } else if (\"entitlement\".equalsIgnoreCase(command)) {\n-            entitlementCommand.execute();\n         }\n     }\n }"},{"sha":"e0058abd48cae6b4af33e17e751872bb971a5fc4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/EntitlementCommand.java","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FEntitlementCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FEntitlementCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FEntitlementCommand.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,70 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.wrap.EntitlementTO;\n-import org.apache.syncope.common.rest.api.service.EntitlementService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Parameters(\n-        commandNames = \"entitlement\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope entitlement service\")\n-public class EntitlementCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(EntitlementCommand.class);\n-\n-    private final String helpMessage = \"Usage: entitlement [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -lo, --list-own \\n\";\n-\n-    @Parameter(names = { \"-lo\", \"--list-own\" })\n-    public boolean listOwn = false;\n-\n-    @Override\n-    public void execute() {\n-        final EntitlementService entitlementService = SyncopeServices.get(EntitlementService.class);\n-        LOG.debug(\"Entitlement service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- entitlement help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            System.out.println(\"All entitlement:\");\n-            for (final EntitlementTO entitlementTO : entitlementService.getAllEntitlements()) {\n-                System.out.println(\"  *** \" + entitlementTO.getElement());\n-            }\n-        } else if (listOwn) {\n-            System.out.println(\"All own entitlement:\");\n-            for (final EntitlementTO entitlementTO : entitlementService.getOwnEntitlements()) {\n-                System.out.println(\"  *** \" + entitlementTO.getElement());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n-        }\n-    }\n-\n-}"},{"sha":"086ab257e06af0aa6861c1625e64525da98fda1a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -79,7 +79,7 @@ public void execute() {\n             } catch (final IllegalArgumentException ex) {\n                 System.out.println(\" - Error: \" + policyType + \" isn't a valid policy type, try with:\");\n                 for (final PolicyType type : PolicyType.values()) {\n-                    System.out.println(\"  *** \" + type.name() + \": \" + type.getDescription());\n+                    System.out.println(\"  *** \" + type.name());\n                 }\n             }\n         } else if (policyIdToRead > -1L) {"},{"sha":"b29d180b856e59ddb8bed645b5dc5e25b887bb5d","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/JexlHelpUtils.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FJexlHelpUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FJexlHelpUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FJexlHelpUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -23,11 +23,11 @@\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.link.ExternalLink;\n \n-public final class JexlHelpUtil {\n+public final class JexlHelpUtils {\n \n     private static final String JEXL_SYNTAX_URL = \"http://commons.apache.org/jexl/reference/syntax.html\";\n \n-    private JexlHelpUtil() {\n+    private JexlHelpUtils() {\n         // private constructor for static utility class\n     }\n ","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/JexlHelpUtil.java"},{"sha":"a4e246e4ba42cba29a2c1f9d72468c8d7d16c1fb","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/PreferenceManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,7 +27,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Map.Entry;\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n@@ -130,15 +129,15 @@ public List<String> getList(final Request request, final String key) {\n     }\n \n     public void set(final Request request, final Response response, final Map<String, List<String>> prefs) {\n-        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        Map<String, String> current = new HashMap<>();\n \n-        final Map<String, String> current = new HashMap<String, String>();\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n         if (prefString != null) {\n             current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n-        for (Entry<String, List<String>> entry : prefs.entrySet()) {\n+        for (Map.Entry<String, List<String>> entry : prefs.entrySet()) {\n             current.put(entry.getKey(), StringUtils.collectionToDelimitedString(entry.getValue(), \";\"));\n         }\n \n@@ -152,7 +151,7 @@ public void set(final Request request, final Response response, final Map<String\n     public void set(final Request request, final Response response, final String key, final String value) {\n         String prefString = cookieUtils.load(PREFMAN_KEY);\n \n-        final Map<String, String> current = new HashMap<String, String>();\n+        final Map<String, String> current = new HashMap<>();\n         if (prefString != null) {\n             current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n         }"},{"sha":"12c93d4fa0d9424e817a7a89f112da44b1952b1c","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/PreviewUtils.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,7 +28,7 @@\n import org.springframework.util.ClassUtils;\n \n @org.springframework.stereotype.Component\n-public class PreviewUtil {\n+public class PreviewUtils {\n \n     @Autowired\n     private ImplementationClassNamesLoader implementationClassNamesLoader;","previous_filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/PreviewUtil.java"},{"sha":"1abe7440d59122397f9fab3071150d942a13ffd1","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/DerSchemaModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDerSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDerSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDerSchemaModalPage.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.pages;\n \n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n@@ -68,9 +68,9 @@ public void setSchemaModalPage(final PageReference pageRef, final ModalWindow wi\n                 new PropertyModel<String>(schema, \"expression\"));\n         expression.addRequiredLabel();\n \n-        final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+        final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n-        final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+        final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtils.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n         schemaForm.add(questionMarkJexlHelp);\n         questionMarkJexlHelp.add(jexlHelp);\n "},{"sha":"3adba7d865d44ca8e03912b96e3593303c7b8104","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/PlainSchemaModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPlainSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPlainSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPlainSchemaModalPage.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,7 +25,7 @@\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -218,9 +218,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         });\n         schemaForm.add(mandatoryCondition);\n \n-        final WebMarkupContainer pwdJexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+        final WebMarkupContainer pwdJexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n-        final AjaxLink<Void> pwdQuestionMarkJexlHelp = JexlHelpUtil.getAjaxLink(pwdJexlHelp, \"questionMarkJexlHelp\");\n+        final AjaxLink<Void> pwdQuestionMarkJexlHelp = JexlHelpUtils.getAjaxLink(pwdJexlHelp, \"questionMarkJexlHelp\");\n         schemaForm.add(pwdQuestionMarkJexlHelp);\n         pwdQuestionMarkJexlHelp.add(pwdJexlHelp);\n "},{"sha":"ead376a79bc85db5483b9718f48c5028dade0992","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/PolicyModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -72,7 +72,7 @@\n /**\n  * Modal window with Resource form.\n  */\n-public class PolicyModalPage<T extends AbstractPolicyTO> extends BaseModalPage {\n+public class PolicyModalPage<T extends AbstractPolicyTO<?>> extends BaseModalPage {\n \n     private static final long serialVersionUID = -7325772767481076679L;\n "},{"sha":"e48470160e218ea1bd9adba3a3490794d645bcaf","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Reports.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.PreferenceManager;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n@@ -328,7 +328,7 @@ public void onEventAction(final IEvent<?> event) {\n \n                             for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n                                 if (events.contains(toBeRemoved)) {\n-                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    Pair<EventCategoryTO, Result> eventCategory =\n                                     AuditLoggerName.parseEventCategory(toBeRemoved);\n \n                                     final AuditLoggerName auditLoggerName = new AuditLoggerName(\n@@ -346,7 +346,7 @@ public void onEventAction(final IEvent<?> event) {\n \n                             for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n                                 if (!events.contains(toBeAdded)) {\n-                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    Pair<EventCategoryTO, Result> eventCategory =\n                                     AuditLoggerName.parseEventCategory(toBeAdded);\n \n                                     final AuditLoggerName auditLoggerName = new AuditLoggerName("},{"sha":"cffb7cdfb9da0762229f6f6820b5f154f318182c","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Schema.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchema.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.pages;\n \n import java.lang.reflect.Field;\n-import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -29,6 +28,8 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.PreferenceManager;\n import org.apache.syncope.client.console.commons.SchemaModalPageFactory;\n@@ -95,31 +96,31 @@ public class Schema extends BasePage {\n         }\n     };\n \n-    private static final Map<Map.Entry<AttributableType, SchemaType>, String> PAGINATOR_ROWS_KEYS =\n-            new HashMap<Map.Entry<AttributableType, SchemaType>, String>() {\n+    private static final Map<Pair<AttributableType, SchemaType>, String> PAGINATOR_ROWS_KEYS =\n+            new HashMap<Pair<AttributableType, SchemaType>, String>() {\n \n                 private static final long serialVersionUID = 3109256773218160485L;\n \n                 {\n-                    put(new SimpleEntry<>(AttributableType.CONFIGURATION, SchemaType.PLAIN),\n+                    put(new ImmutablePair<>(AttributableType.CONFIGURATION, SchemaType.PLAIN),\n                             Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.USER, SchemaType.PLAIN),\n+                    put(new ImmutablePair<>(AttributableType.USER, SchemaType.PLAIN),\n                             Constants.PREF_USER_PLAIN_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.USER, SchemaType.DERIVED),\n+                    put(new ImmutablePair<>(AttributableType.USER, SchemaType.DERIVED),\n                             Constants.PREF_USER_DER_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.USER, SchemaType.VIRTUAL),\n+                    put(new ImmutablePair<>(AttributableType.USER, SchemaType.VIRTUAL),\n                             Constants.PREF_USER_VIR_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.MEMBERSHIP, SchemaType.PLAIN),\n+                    put(new ImmutablePair<>(AttributableType.MEMBERSHIP, SchemaType.PLAIN),\n                             Constants.PREF_MEMBERSHIP_PLAIN_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.MEMBERSHIP, SchemaType.DERIVED),\n+                    put(new ImmutablePair<>(AttributableType.MEMBERSHIP, SchemaType.DERIVED),\n                             Constants.PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL),\n+                    put(new ImmutablePair<>(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL),\n                             Constants.PREF_MEMBERSHIP_VIR_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.GROUP, SchemaType.PLAIN),\n+                    put(new ImmutablePair<>(AttributableType.GROUP, SchemaType.PLAIN),\n                             Constants.PREF_GROUP_PLAIN_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.GROUP, SchemaType.DERIVED),\n+                    put(new ImmutablePair<>(AttributableType.GROUP, SchemaType.DERIVED),\n                             Constants.PREF_GROUP_DER_SCHEMA_PAGINATOR_ROWS);\n-                    put(new SimpleEntry<>(AttributableType.GROUP, SchemaType.VIRTUAL),\n+                    put(new ImmutablePair<>(AttributableType.GROUP, SchemaType.VIRTUAL),\n                             Constants.PREF_GROUP_VIR_SCHEMA_PAGINATOR_ROWS);\n                 }\n             };\n@@ -304,7 +305,7 @@ private Form<Void> getPaginatorForm(final WebMarkupContainer webContainer,\n             final AjaxFallbackDefaultDataTable dataTable,\n             final String formname, final SchemaTypePanel schemaTypePanel, final String rowsPerPagePrefName) {\n \n-        Form<Void> form = new Form<Void>(formname);\n+        Form<Void> form = new Form<>(formname);\n \n         final DropDownChoice<Integer> rowChooser = new DropDownChoice<Integer>(\"rowsChooser\",\n                 new PropertyModel<Integer>(schemaTypePanel, \"pageRows\"), prefMan.getPaginatorChoices(),\n@@ -449,7 +450,7 @@ private void setup() {\n             setWindowClosedCallback(editSchemaWin, schemaContainer);\n \n             final String paginatorRowsKey = PAGINATOR_ROWS_KEYS.get(\n-                    new SimpleEntry<AttributableType, SchemaType>(attrType, schemaType));\n+                    new ImmutablePair<AttributableType, SchemaType>(attrType, schemaType));\n             pageRows = prefMan.getPaginatorRows(getRequest(), paginatorRowsKey);\n \n             List<IColumn> tableCols = getColumns(schemaContainer, editSchemaWin, attrType,"},{"sha":"8be459a6d4a1da80a261b262f0a07615859798c2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DerAttrsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerAttrsPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -100,7 +100,7 @@ protected List<String> load() {\n                 } else if (entityTO instanceof UserTO) {\n                     derSchemaNames = schemaRestClient.getDerSchemaNames(AttributableType.USER);\n                 } else {\n-                    derSchemaNames = groupRestClient.read(((MembershipTO) entityTO).getGroupId()).getMDerAttrTemplates();\n+                    derSchemaNames = groupRestClient.read(((MembershipTO) entityTO).getGroupKey()).getMDerAttrTemplates();\n                 }\n \n                 return derSchemaNames;"},{"sha":"7662e4a1c93134eb37baf67ab1a89137c1dd8127","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupDetailsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDetailsPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.panels;\n \n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.pages.GroupSelectModalPage;\n import org.apache.syncope.client.console.pages.UserOwnerSelectModalPage;\n import org.apache.syncope.client.console.panels.AttrTemplatesPanel.GroupAttrTemplatesChange;\n@@ -142,9 +142,9 @@ public void onClick(final AjaxRequestTarget target) {\n         final AjaxTextFieldPanel name =\n                 new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<String>(groupTO, \"key\"));\n \n-        final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+        final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n-        final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+        final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtils.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n         this.add(questionMarkJexlHelp);\n         questionMarkJexlHelp.add(jexlHelp);\n "},{"sha":"70e03613f482d887d0d38873c1f4b9844fb08055","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/LoggerCategoryPanel.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLoggerCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLoggerCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLoggerCategoryPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,9 +24,9 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.SelectedEventsPanel.EventSelectionChanged;\n import org.apache.syncope.client.console.panels.SelectedEventsPanel.InspectSelectedEvent;\n@@ -52,16 +52,9 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public abstract class LoggerCategoryPanel extends Panel {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(LoggerCategoryPanel.class);\n-\n     private static final long serialVersionUID = 6429053774964787734L;\n \n     private final List<EventCategoryTO> eventCategoryTOs;\n@@ -207,7 +200,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 if (StringUtils.isNotBlank(custom.getModelObject())) {\n-                    final Map.Entry<EventCategoryTO, AuditElements.Result> parsed =\n+                    final Pair<EventCategoryTO, AuditElements.Result> parsed =\n                             AuditLoggerName.parseEventCategory(custom.getModelObject());\n \n                     final String eventString = AuditLoggerName.buildEvent(\n@@ -233,12 +226,12 @@ public void onClick(final AjaxRequestTarget target) {\n             private static final long serialVersionUID = -3722207913631435502L;\n \n             @Override\n-            public void onClick(AjaxRequestTarget target) {\n+            public void onClick(final AjaxRequestTarget target) {\n                 if (StringUtils.isNotBlank(custom.getModelObject())) {\n-                    final Map.Entry<EventCategoryTO, AuditElements.Result> parsed =\n+                    Pair<EventCategoryTO, AuditElements.Result> parsed =\n                             AuditLoggerName.parseEventCategory(custom.getModelObject());\n \n-                    final String eventString = AuditLoggerName.buildEvent(\n+                    String eventString = AuditLoggerName.buildEvent(\n                             parsed.getKey().getType(),\n                             null,\n                             null,\n@@ -351,9 +344,9 @@ public void onEvent(final IEvent<?> event) {\n             // update objects ....\n             eventCategoryTO.getEvents().clear();\n \n-            final InspectSelectedEvent inspectSelectedEvent = (InspectSelectedEvent) event.getPayload();\n+            InspectSelectedEvent inspectSelectedEvent = (InspectSelectedEvent) event.getPayload();\n \n-            final Map.Entry<EventCategoryTO, AuditElements.Result> categoryEvent =\n+            Pair<EventCategoryTO, AuditElements.Result> categoryEvent =\n                     AuditLoggerName.parseEventCategory(inspectSelectedEvent.getEvent());\n \n             eventCategoryTO.setType(categoryEvent.getKey().getType());"},{"sha":"fa0a9bc54bd961932e6f823298cef76a0aea4e5d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/MembershipsPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembershipsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembershipsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembershipsPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -126,12 +126,12 @@ public Page createPage() {\n                                     PageReference pageRef = getPage().getPageReference();\n \n                                     for (MembershipTO membTO : membView.getList()) {\n-                                        if (membTO.getGroupId() == groupTO.getKey()) {\n+                                        if (membTO.getGroupKey() == groupTO.getKey()) {\n                                             return new MembershipModalPage(pageRef, membWin, membTO, mode);\n                                         }\n                                     }\n                                     MembershipTO membTO = new MembershipTO();\n-                                    membTO.setGroupId(groupTO.getKey());\n+                                    membTO.setGroupKey(groupTO.getKey());\n                                     membTO.setGroupName(groupTO.getName());\n \n                                     return new MembershipModalPage(pageRef, membWin, membTO, mode);\n@@ -159,7 +159,7 @@ public Page createPage() {\n                     protected void populateItem(final ListItem<MembershipTO> item) {\n                         final MembershipTO membershipTO = (MembershipTO) item.getDefaultModelObject();\n \n-                        item.add(new Label(\"groupId\", new Model<Long>(membershipTO.getGroupId())));\n+                        item.add(new Label(\"groupId\", new Model<Long>(membershipTO.getGroupKey())));\n                         item.add(new Label(\"groupName\", new Model<String>(membershipTO.getGroupName())));\n \n                         AjaxLink editLink = new ClearIndicatingAjaxLink(\"editLink\", pageRef) {\n@@ -194,13 +194,13 @@ protected void onClickInternal(final AjaxRequestTarget target) {\n                                 ((UserModalPage) getPage()).getUserTO().getMemberships().remove(membershipTO);\n                                 target.add(membershipsContainer);\n \n-                                GroupTO groupTO = groupTreeBuilder.findGroup(membershipTO.getGroupId());\n+                                GroupTO groupTO = groupTreeBuilder.findGroup(membershipTO.getGroupKey());\n                                 Set<String> resourcesToRemove = groupTO == null\n                                         ? Collections.<String>emptySet() : groupTO.getResources();\n                                 if (!resourcesToRemove.isEmpty()) {\n                                     Set<String> resourcesAssignedViaMembership = new HashSet<>();\n                                     for (MembershipTO membTO : userTO.getMemberships()) {\n-                                        groupTO = groupTreeBuilder.findGroup(membTO.getGroupId());\n+                                        groupTO = groupTreeBuilder.findGroup(membTO.getGroupKey());\n                                         if (groupTO != null) {\n                                             resourcesAssignedViaMembership.addAll(groupTO.getResources());\n                                         }\n@@ -237,7 +237,7 @@ public void onClose(final AjaxRequestTarget target) {\n \n                         Set<String> resourcesToAdd = new HashSet<>();\n                         for (Long diffMembId : diff) {\n-                            long groupId = updatedUserTO.getMembershipMap().get(diffMembId).getGroupId();\n+                            long groupId = updatedUserTO.getMembershipMap().get(diffMembId).getGroupKey();\n                             GroupTO groupTO = groupTreeBuilder.findGroup(groupId);\n                             resourcesToAdd.addAll(groupTO.getResources());\n                             StatusUtils.update("},{"sha":"b0517b0cb1f876f971aeb49bce3645aefeb085e0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainAttrsPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainAttrsPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -32,7 +32,7 @@\n import java.util.TreeMap;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.AttrLayoutType;\n-import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.commons.Mode;\n import org.apache.syncope.client.console.panels.AttrTemplatesPanel.GroupAttrTemplatesChange;\n import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n@@ -118,9 +118,9 @@ public <T extends AbstractAttributableTO> PlainAttrsPanel(final String id, final\n             protected void populateItem(final ListItem<AttrTO> item) {\n                 final AttrTO attributeTO = (AttrTO) item.getDefaultModelObject();\n \n-                final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+                final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n-                final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+                final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtils.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n                 item.add(questionMarkJexlHelp);\n                 questionMarkJexlHelp.add(jexlHelp);\n \n@@ -169,7 +169,7 @@ private void setSchemas() {\n             attrLayout = confRestClient.readAttrLayout(AttrLayoutType.valueOf(mode, AttributableType.MEMBERSHIP));\n             schemaTOs = schemaRestClient.getSchemas(AttributableType.MEMBERSHIP);\n             Set<String> allowed = new HashSet<>(\n-                    groupRestClient.read(((MembershipTO) entityTO).getGroupId()).getMPlainAttrTemplates());\n+                    groupRestClient.read(((MembershipTO) entityTO).getGroupKey()).getMPlainAttrTemplates());\n             schemaRestClient.filter(schemaTOs, allowed, true);\n         } else {\n             schemas = new TreeMap<>();"},{"sha":"406676f31509c96abd02a2c03fbaa0b8f518c29c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,7 +26,7 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.panels.ResourceConnConfPanel.ConnConfModEvent;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n@@ -185,9 +185,9 @@ public ResourceMappingPanel(final String id, final ResourceTO resourceTO, final\n             schemaNames = Collections.<String>emptyList();\n         }\n \n-        final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+        final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n-        AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+        AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtils.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n         mappingContainer.add(questionMarkJexlHelp);\n         questionMarkJexlHelp.add(jexlHelp);\n "},{"sha":"028b3a0e7b3092f314b77793549210da192bfc8b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourcesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourcesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourcesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourcesPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -153,7 +153,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                                 if (!resourcesToRemove.isEmpty()) {\n                                     Set<String> resourcesAssignedViaMembership = new HashSet<>();\n                                     for (MembershipTO membTO : userTO.getMemberships()) {\n-                                        GroupTO groupTO = groupTreeBuilder.findGroup(membTO.getGroupId());\n+                                        GroupTO groupTO = groupTreeBuilder.findGroup(membTO.getGroupKey());\n                                         if (groupTO != null) {\n                                             resourcesAssignedViaMembership.addAll(groupTO.getResources());\n                                         }"},{"sha":"bf990eca01eefbccbdc0ecebf0ea3f6f61cacf8f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/UserDetailsPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDetailsPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.JexlHelpUtils;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n@@ -52,9 +52,9 @@ public UserDetailsPanel(final String id, final UserTO userTO, final Form form, f\n         final FieldPanel<String> username = new AjaxTextFieldPanel(\"username\", \"username\",\n                 new PropertyModel<String>(userTO, \"username\"));\n \n-        final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"usernameJexlHelp\");\n+        final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"usernameJexlHelp\");\n \n-        final AjaxLink<?> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"usernameQuestionMarkJexlHelp\");\n+        final AjaxLink<?> questionMarkJexlHelp = JexlHelpUtils.getAjaxLink(jexlHelp, \"usernameQuestionMarkJexlHelp\");\n         add(questionMarkJexlHelp);\n         questionMarkJexlHelp.add(jexlHelp);\n \n@@ -68,9 +68,9 @@ public UserDetailsPanel(final String id, final UserTO userTO, final Form form, f\n         // ------------------------\n         // Password\n         // ------------------------\n-        final WebMarkupContainer pwdJexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"pwdJexlHelp\");\n+        final WebMarkupContainer pwdJexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"pwdJexlHelp\");\n \n-        final AjaxLink<?> pwdQuestionMarkJexlHelp = JexlHelpUtil.getAjaxLink(pwdJexlHelp, \"pwdQuestionMarkJexlHelp\");\n+        final AjaxLink<?> pwdQuestionMarkJexlHelp = JexlHelpUtils.getAjaxLink(pwdJexlHelp, \"pwdQuestionMarkJexlHelp\");\n         add(pwdQuestionMarkJexlHelp);\n         pwdQuestionMarkJexlHelp.add(pwdJexlHelp);\n "},{"sha":"84049f0d17c603f61b5d53e6160e55a85e182fe9","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/VirAttrsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirAttrsPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -124,7 +124,7 @@ protected List<String> load() {\n                 } else {\n                     schemaTOs = schemaRestClient.getVirSchemas(AttributableType.MEMBERSHIP);\n                     Set<String> allowed = new HashSet<String>(\n-                            groupRestClient.read(((MembershipTO) entityTO).getGroupId()).getMVirAttrTemplates());\n+                            groupRestClient.read(((MembershipTO) entityTO).getGroupKey()).getMVirAttrTemplates());\n                     filter(schemaTOs, allowed);\n                 }\n "},{"sha":"4409f7cfe6c40a0acf1a1cbb5e7a718c800ac1c4","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -34,7 +34,7 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    public <T extends AbstractPolicyTO> T getGlobalPolicy(final PolicyType type) {\n+    public <T extends AbstractPolicyTO<?>> T getGlobalPolicy(final PolicyType type) {\n         T policy = null;\n         try {\n             policy = getService(PolicyService.class).readGlobal(type);\n@@ -44,7 +44,7 @@ public <T extends AbstractPolicyTO> T getGlobalPolicy(final PolicyType type) {\n         return policy;\n     }\n \n-    public <T extends AbstractPolicyTO> T getPolicy(final Long id) {\n+    public <T extends AbstractPolicyTO<?>> T getPolicy(final Long id) {\n         T policy = null;\n         try {\n             policy = getService(PolicyService.class).read(id);\n@@ -55,7 +55,7 @@ public <T extends AbstractPolicyTO> T getPolicy(final Long id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type, final boolean includeGlobal) {\n+    public <T extends AbstractPolicyTO<?>> List<T> getPolicies(final PolicyType type, final boolean includeGlobal) {\n         final List<T> res = new ArrayList<>();\n \n         try {\n@@ -66,9 +66,9 @@ public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type, f\n \n         if (includeGlobal) {\n             try {\n-                AbstractPolicyTO globalPolicy = getGlobalPolicy(type);\n+                T globalPolicy = getGlobalPolicy(type);\n                 if (globalPolicy != null) {\n-                    res.add(0, (T) globalPolicy);\n+                    res.add(0, globalPolicy);\n                 }\n             } catch (Exception ignore) {\n                 LOG.warn(\"No global policy found\", ignore);\n@@ -78,15 +78,15 @@ public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type, f\n         return res;\n     }\n \n-    public <T extends AbstractPolicyTO> void createPolicy(final T policy) {\n+    public <T extends AbstractPolicyTO<?>> void createPolicy(final T policy) {\n         getService(PolicyService.class).create(policy);\n     }\n \n-    public <T extends AbstractPolicyTO> void updatePolicy(final T policy) {\n+    public <T extends AbstractPolicyTO<?>> void updatePolicy(final T policy) {\n         getService(PolicyService.class).update(policy.getKey(), policy);\n     }\n \n-    public void delete(final Long id, final Class<? extends AbstractPolicyTO> policyClass) {\n+    public void delete(final Long id, final Class<? extends AbstractPolicyTO<?>> policyClass) {\n         getService(PolicyService.class).delete(id);\n     }\n "},{"sha":"40a88ac7c96e4e4049b7cced433ad68aacba3286","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.console.commons.PreviewUtil;\n+import org.apache.syncope.client.console.commons.PreviewUtils;\n import org.apache.syncope.client.console.commons.HttpResourceStream;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.pages.BaseModalPage;\n@@ -63,7 +63,7 @@ public class BinaryFieldPanel extends FieldPanel<String> {\n     private final Fragment emptyFragment;\n \n     @SpringBean\n-    private PreviewUtil previewUtil;\n+    private PreviewUtils previewUtil;\n \n     public BinaryFieldPanel(final String id, final String name, final IModel<String> model, final String mimeType) {\n         super(id, model);"},{"sha":"c3f44286df87f9c5a6747738f1ee65170e9d9e95","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":41,"deletions":1,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,14 +18,26 @@\n  */\n package org.apache.syncope.client.lib;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n \n /**\n  * Entry point for client access to all REST services exposed by Syncope core; obtain instances via\n@@ -37,15 +49,21 @@ public class SyncopeClient {\n \n     private final RestClientFactoryBean restClientFactory;\n \n+    private final RestClientExceptionMapper exceptionMapper;\n+\n     private final String username;\n \n     private final String password;\n \n-    public SyncopeClient(final MediaType mediaType, final RestClientFactoryBean restClientFactory,\n+    public SyncopeClient(\n+            final MediaType mediaType,\n+            final RestClientFactoryBean restClientFactory,\n+            final RestClientExceptionMapper exceptionMapper,\n             final String username, final String password) {\n \n         this.mediaType = mediaType;\n         this.restClientFactory = restClientFactory;\n+        this.exceptionMapper = exceptionMapper;\n         this.username = username;\n         this.password = password;\n     }\n@@ -90,6 +108,28 @@ public <T> T getService(final Class<T> serviceClass) {\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public Pair<Map<Entitlement, Set<String>>, UserTO> self() {\n+        Response response = getService(UserSelfService.class).read();\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.OK.getStatusCode()) {\n+            Exception ex = exceptionMapper.fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+\n+        try {\n+            return new ImmutablePair<>(\n+                    (Map<Entitlement, Set<String>>) new ObjectMapper().readValue(\n+                            response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n+                            new TypeReference<HashMap<Entitlement, Set<String>>>() {\n+                            }),\n+                    response.readEntity(UserTO.class));\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n     /**\n      * Sets the given header on the give service instance.\n      *"},{"sha":"24923f1036d4922df9f18cc081f983f79cd0306b","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -89,7 +89,7 @@ protected JAXBElementProvider defaultJAXBProvider() {\n         marshallerProperties.put(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n         defaultJAXBProvider.setMarshallerProperties(marshallerProperties);\n \n-        Map<String, String> collectionWrapperMap = new HashMap<String, String>();\n+        Map<String, String> collectionWrapperMap = new HashMap<>();\n         collectionWrapperMap.put(AbstractPolicyTO.class.getName(), \"policies\");\n         defaultJAXBProvider.setCollectionWrapperMap(collectionWrapperMap);\n \n@@ -111,11 +111,11 @@ protected RestClientFactoryBean defaultRestClientFactoryBean() {\n         defaultRestClientFactoryBean.setThreadSafe(true);\n         defaultRestClientFactoryBean.setInheritHeaders(true);\n \n-        List<Feature> features = new ArrayList<Feature>();\n+        List<Feature> features = new ArrayList<>();\n         features.add(new LoggingFeature());\n         defaultRestClientFactoryBean.setFeatures(features);\n \n-        List<Object> providers = new ArrayList<Object>(3);\n+        List<Object> providers = new ArrayList<>(3);\n         providers.add(getJaxbProvider());\n         providers.add(getJsonProvider());\n         providers.add(getExceptionMapper());\n@@ -197,6 +197,11 @@ public SyncopeClient createAnonymous() {\n     }\n \n     public SyncopeClient create(final String username, final String password) {\n-        return new SyncopeClient(getContentType().getMediaType(), getRestClientFactoryBean(), username, password);\n+        return new SyncopeClient(\n+                getContentType().getMediaType(),\n+                getRestClientFactoryBean(),\n+                getExceptionMapper(),\n+                username,\n+                password);\n     }\n }"},{"sha":"92c8b6e667516abe704c8f460d4612db44d3966a","filename":"client/pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -35,7 +35,8 @@ under the License.\n \n   <modules>\n     <module>lib</module>\n-    <module>console</module>\n+    <!-- THIS UNTIL SYNCOPE-611 gets completely resolved -->\n+    <!--<module>console</module>-->\n     <module>cli</module>\n   </modules>\n "},{"sha":"248212ccc4de5af0fbee3c44dee20717db2ff626","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AttributableOperations.java","status":"modified","additions":43,"deletions":45,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n@@ -224,6 +225,13 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n \n         diff(updated, original, result, incremental);\n \n+        // 0. realm\n+        if (updated.getRealm() != null && (original.getRealm() == null\n+                || !original.getRealm().equals(updated.getRealm()))) {\n+\n+            result.setRealm(updated.getRealm());\n+        }\n+\n         // 1. password\n         if (updated.getPassword() != null && (original.getPassword() == null\n                 || !original.getPassword().equals(updated.getPassword()))) {\n@@ -247,13 +255,17 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n             result.setSecurityAnswer(updated.getSecurityAnswer());\n         }\n \n-        // 4. memberships\n+        // 4. roles\n+        result.getRolesToRemove().addAll(CollectionUtils.subtract(original.getRoles(), updated.getRoles()));\n+        result.getRolesToAdd().addAll(CollectionUtils.subtract(updated.getRoles(), original.getRoles()));\n+\n+        // 5. memberships\n         Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\n         Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\n \n         for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n             MembershipMod membMod = new MembershipMod();\n-            membMod.setGroup(entry.getValue().getGroupId());\n+            membMod.setGroup(entry.getValue().getGroupKey());\n \n             if (originalMembs.containsKey(entry.getKey())) {\n                 // if memberships are actually same, just make the isEmpty() call below succeed\n@@ -328,62 +340,38 @@ public static GroupMod diff(final GroupTO updated, final GroupTO original, final\n \n         diff(updated, original, result, incremental);\n \n-        // 1. inheritance\n-        result.setInheritOwner(updated.isInheritOwner());\n-        result.setInheritTemplates(updated.isInheritTemplates());\n-        result.setInheritAccountPolicy(updated.isInheritAccountPolicy());\n-        result.setInheritPasswordPolicy(updated.isInheritPasswordPolicy());\n-        result.setInheritPlainAttrs(updated.isInheritPlainAttrs());\n-        result.setInheritDerAttrs(updated.isInheritDerAttrs());\n-        result.setInheritVirAttrs(updated.isInheritVirAttrs());\n-\n-        // 2. policies\n-        result.setAccountPolicy(new ReferenceMod(updated.getAccountPolicy()));\n-        result.setPasswordPolicy(new ReferenceMod(updated.getPasswordPolicy()));\n-\n-        // 3. name\n+        // 1. name\n         if (!original.getName().equals(updated.getName())) {\n             result.setName(updated.getName());\n         }\n \n-        // 4. entitlements\n-        Set<String> updatedEnts = new HashSet<>(updated.getEntitlements());\n-        Set<String> originalEnts = new HashSet<>(original.getEntitlements());\n-        if (updatedEnts.equals(originalEnts)) {\n-            result.setModEntitlements(false);\n-            result.getEntitlements().clear();\n-        } else {\n-            result.setModEntitlements(true);\n-            result.getEntitlements().addAll(updated.getEntitlements());\n-        }\n-\n-        // 5. templates\n+        // 2. templates\n         Set<String> updatedTemplates = new HashSet<>(updated.getGPlainAttrTemplates());\n         Set<String> originalTemplates = new HashSet<>(original.getGPlainAttrTemplates());\n         if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModRAttrTemplates(false);\n-            result.getRPlainAttrTemplates().clear();\n+            result.setModGAttrTemplates(false);\n+            result.getGPlainAttrTemplates().clear();\n         } else {\n-            result.setModRAttrTemplates(true);\n-            result.getRPlainAttrTemplates().addAll(updated.getGPlainAttrTemplates());\n+            result.setModGAttrTemplates(true);\n+            result.getGPlainAttrTemplates().addAll(updated.getGPlainAttrTemplates());\n         }\n         updatedTemplates = new HashSet<>(updated.getGDerAttrTemplates());\n         originalTemplates = new HashSet<>(original.getGDerAttrTemplates());\n         if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModRDerAttrTemplates(false);\n-            result.getRDerAttrTemplates().clear();\n+            result.setModGDerAttrTemplates(false);\n+            result.getGDerAttrTemplates().clear();\n         } else {\n-            result.setModRDerAttrTemplates(true);\n-            result.getRDerAttrTemplates().addAll(updated.getGDerAttrTemplates());\n+            result.setModGDerAttrTemplates(true);\n+            result.getGDerAttrTemplates().addAll(updated.getGDerAttrTemplates());\n         }\n         updatedTemplates = new HashSet<>(updated.getGVirAttrTemplates());\n         originalTemplates = new HashSet<>(original.getGVirAttrTemplates());\n         if (updatedTemplates.equals(originalTemplates)) {\n-            result.setModRVirAttrTemplates(false);\n-            result.getRVirAttrTemplates().clear();\n+            result.setModGVirAttrTemplates(false);\n+            result.getGVirAttrTemplates().clear();\n         } else {\n-            result.setModRVirAttrTemplates(true);\n-            result.getRVirAttrTemplates().addAll(updated.getGVirAttrTemplates());\n+            result.setModGVirAttrTemplates(true);\n+            result.getGVirAttrTemplates().addAll(updated.getGVirAttrTemplates());\n         }\n         updatedTemplates = new HashSet<>(updated.getMPlainAttrTemplates());\n         originalTemplates = new HashSet<>(original.getMPlainAttrTemplates());\n@@ -413,7 +401,7 @@ public static GroupMod diff(final GroupTO updated, final GroupTO original, final\n             result.getMVirAttrTemplates().addAll(updated.getMVirAttrTemplates());\n         }\n \n-        // 6. owner\n+        // 3. owner\n         result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\n         result.setGroupOwner(new ReferenceMod(updated.getGroupOwner()));\n \n@@ -484,21 +472,31 @@ public static UserTO apply(final UserTO userTO, final UserMod userMod) {\n         UserTO result = SerializationUtils.clone(userTO);\n         apply(userTO, userMod, result);\n \n+        // 0. realm\n+        if (userMod.getRealm() != null) {\n+            result.setRealm(userMod.getRealm());\n+        }\n+\n         // 1. password\n         result.setPassword(userMod.getPassword());\n \n         // 2. username\n         if (userMod.getUsername() != null) {\n             result.setUsername(userMod.getUsername());\n         }\n-        // 3. memberships\n+\n+        // 3. roles\n+        result.getRoles().removeAll(userMod.getRolesToRemove());\n+        result.getRoles().addAll(userMod.getRolesToAdd());\n+\n+        // 4. memberships\n         Map<Long, MembershipTO> membs = result.getMembershipMap();\n-        for (Long membId : userMod.getMembershipsToRemove()) {\n-            result.getMemberships().remove(membs.get(membId));\n+        for (Long membKey : userMod.getMembershipsToRemove()) {\n+            result.getMemberships().remove(membs.get(membKey));\n         }\n         for (MembershipMod membMod : userMod.getMembershipsToAdd()) {\n             MembershipTO membTO = new MembershipTO();\n-            membTO.setGroupId(membMod.getGroup());\n+            membTO.setGroupKey(membMod.getGroup());\n \n             apply(membTO, membMod, membTO);\n         }"},{"sha":"69739b665dbebc122c15bd18435efffda6a0e2e8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/CollectionUtils2.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FCollectionUtils2.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.common.lib;\n \n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.Set;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n \n public final class CollectionUtils2 {\n@@ -122,6 +125,28 @@ public static <I, O, R extends Collection<? super O>> R collect(final Iterator<?\n         return outputCollection;\n     }\n \n+    /**\n+     * Gets elements in the input collection that match the predicate.\n+     * <p/>\n+     * A <code>null</code> collection or predicate matches no elements.\n+     *\n+     * @param <C> the type of object the {@link Iterable} contains\n+     * @param input the {@link Iterable} to get the input from, may be null\n+     * @param predicate the predicate to use, may be null\n+     * @return the matches for the predicate in the collection\n+     */\n+    public static <C> Collection<C> find(final Iterable<C> input, final Predicate<? super C> predicate) {\n+        Set<C> result = SetUtils.predicatedSet(new HashSet<C>(), predicate);\n+        if (input != null && predicate != null) {\n+            for (final C o : input) {\n+                if (predicate.evaluate(o)) {\n+                    result.add(o);\n+                }\n+            }\n+        }\n+        return SetUtils.unmodifiableSet(result);\n+    }\n+\n     private CollectionUtils2() {\n         // private constructor for static utility class\n     }"},{"sha":"6538ec0c6d926d9994a929e27cfc7c6c60b76ca2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,15 +19,19 @@\n package org.apache.syncope.common.lib;\n \n import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.Set;\n import java.util.regex.Pattern;\n \n public final class SyncopeConstants {\n \n     public static final String NAMESPACE = \"http://syncope.apache.org/2.0\";\n \n-    public static final String UNAUTHENTICATED = \"unauthenticated\";\n+    public static final String ROOT_REALM = \"/\";\n+\n+    public static final Set<String> FULL_ADMIN_REALMS = Collections.singleton(\"/\");\n \n-    public static final String ANONYMOUS_ENTITLEMENT = \"anonymous\";\n+    public static final String UNAUTHENTICATED = \"unauthenticated\";\n \n     public static final String ENUM_VALUES_SEPARATOR = \";\";\n "},{"sha":"3671785f9108ef621ed81b0ec7c57b1b317e23c8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AbstractSubjectMod.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,10 +30,20 @@ public abstract class AbstractSubjectMod extends AbstractAttributableMod {\n \n     private static final long serialVersionUID = -6404459635536484024L;\n \n+    private String realm;\n+\n     protected final Set<String> resourcesToAdd = new HashSet<>();\n \n     protected final Set<String> resourcesToRemove = new HashSet<>();\n \n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n     @XmlElementWrapper(name = \"resourcesToAdd\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"resourcesToAdd\")"},{"sha":"c2b3b8a8964f6cf60d75d7e3c00563d9b891af3c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/GroupMod.java","status":"modified","additions":35,"deletions":54,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -53,21 +53,17 @@ public class GroupMod extends AbstractSubjectMod {\n \n     private Boolean inheritPasswordPolicy;\n \n-    private boolean modEntitlements;\n+    private boolean modGAttrTemplates;\n \n-    private final List<String> entitlements = new ArrayList<>();\n+    private final List<String> gPlainAttrTemplates = new ArrayList<>();\n \n-    private boolean modRAttrTemplates;\n+    private boolean modGDerAttrTemplates;\n \n-    private final List<String> rPlainAttrTemplates = new ArrayList<>();\n+    private final List<String> gDerAttrTemplates = new ArrayList<>();\n \n-    private boolean modRDerAttrTemplates;\n+    private boolean modGVirAttrTemplates;\n \n-    private final List<String> rDerAttrTemplates = new ArrayList<>();\n-\n-    private boolean modRVirAttrTemplates;\n-\n-    private final List<String> rVirAttrTemplates = new ArrayList<>();\n+    private final List<String> gVirAttrTemplates = new ArrayList<>();\n \n     private boolean modMAttrTemplates;\n \n@@ -149,64 +145,49 @@ public void setInheritVirAttrs(final Boolean inheritVirAttrs) {\n         this.inheritVirAttrs = inheritVirAttrs;\n     }\n \n-    public boolean isModEntitlements() {\n-        return modEntitlements;\n-    }\n-\n-    public void setModEntitlements(final boolean modEntitlements) {\n-        this.modEntitlements = modEntitlements;\n-    }\n-\n-    @XmlElementWrapper(name = \"entitlements\")\n-    @XmlElement(name = \"entitlement\")\n-    @JsonProperty(\"entitlements\")\n-    public List<String> getEntitlements() {\n-        return entitlements;\n-    }\n-\n-    public boolean isModRAttrTemplates() {\n-        return modRAttrTemplates;\n+    public boolean isModGAttrTemplates() {\n+        return modGAttrTemplates;\n     }\n \n-    public void setModRAttrTemplates(final boolean modRAttrTemplates) {\n-        this.modRAttrTemplates = modRAttrTemplates;\n+    public void setModGAttrTemplates(final boolean modGAttrTemplates) {\n+        this.modGAttrTemplates = modGAttrTemplates;\n     }\n \n-    @XmlElementWrapper(name = \"rPlainAttrTemplates\")\n-    @XmlElement(name = \"rAttrTemplate\")\n-    @JsonProperty(\"rPlainAttrTemplates\")\n-    public List<String> getRPlainAttrTemplates() {\n-        return rPlainAttrTemplates;\n+    @XmlElementWrapper(name = \"gPlainAttrTemplates\")\n+    @XmlElement(name = \"gAttrTemplate\")\n+    @JsonProperty(\"gPlainAttrTemplates\")\n+    public List<String> getGPlainAttrTemplates() {\n+        return gPlainAttrTemplates;\n     }\n \n-    public boolean isModRDerAttrTemplates() {\n-        return modRDerAttrTemplates;\n+    public boolean isModGDerAttrTemplates() {\n+        return modGDerAttrTemplates;\n     }\n \n-    public void setModRDerAttrTemplates(final boolean modRDerAttrTemplates) {\n-        this.modRDerAttrTemplates = modRDerAttrTemplates;\n+    public void setModGDerAttrTemplates(final boolean modGDerAttrTemplates) {\n+        this.modGDerAttrTemplates = modGDerAttrTemplates;\n     }\n \n-    @XmlElementWrapper(name = \"rDerAttrTemplates\")\n-    @XmlElement(name = \"rDerAttrTemplate\")\n-    @JsonProperty(\"rDerAttrTemplates\")\n-    public List<String> getRDerAttrTemplates() {\n-        return rDerAttrTemplates;\n+    @XmlElementWrapper(name = \"gDerAttrTemplates\")\n+    @XmlElement(name = \"gDerAttrTemplate\")\n+    @JsonProperty(\"gDerAttrTemplates\")\n+    public List<String> getGDerAttrTemplates() {\n+        return gDerAttrTemplates;\n     }\n \n-    public boolean isModRVirAttrTemplates() {\n-        return modRVirAttrTemplates;\n+    public boolean isModGVirAttrTemplates() {\n+        return modGVirAttrTemplates;\n     }\n \n-    public void setModRVirAttrTemplates(final boolean modRVirAttrTemplates) {\n-        this.modRVirAttrTemplates = modRVirAttrTemplates;\n+    public void setModGVirAttrTemplates(final boolean modGVirAttrTemplates) {\n+        this.modGVirAttrTemplates = modGVirAttrTemplates;\n     }\n \n-    @XmlElementWrapper(name = \"rVirAttrTemplates\")\n-    @XmlElement(name = \"rVirAttrTemplate\")\n-    @JsonProperty(\"rVirAttrTemplates\")\n-    public List<String> getRVirAttrTemplates() {\n-        return rVirAttrTemplates;\n+    @XmlElementWrapper(name = \"gVirAttrTemplates\")\n+    @XmlElement(name = \"gVirAttrTemplate\")\n+    @JsonProperty(\"gVirAttrTemplates\")\n+    public List<String> getGVirAttrTemplates() {\n+        return gVirAttrTemplates;\n     }\n \n     public boolean isModMAttrTemplates() {\n@@ -293,8 +274,8 @@ public boolean isEmpty() {\n                 && inheritTemplates == null && inheritOwner == null\n                 && inheritAccountPolicy == null && inheritPasswordPolicy == null\n                 && inheritPlainAttrs == null && inheritDerAttrs == null && inheritVirAttrs == null\n-                && accountPolicy == null && passwordPolicy == null && entitlements.isEmpty()\n-                && rPlainAttrTemplates.isEmpty() && rDerAttrTemplates.isEmpty() && rVirAttrTemplates.isEmpty()\n+                && accountPolicy == null && passwordPolicy == null\n+                && gPlainAttrTemplates.isEmpty() && gDerAttrTemplates.isEmpty() && gVirAttrTemplates.isEmpty()\n                 && mPlainAttrTemplates.isEmpty() && mDerAttrTemplates.isEmpty() && mVirAttrTemplates.isEmpty();\n     }\n }"},{"sha":"fe63b635de720b373ca452caea3e31b1747cfe66","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/UserMod.java","status":"modified","additions":21,"deletions":10,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -33,27 +33,24 @@ public class UserMod extends AbstractSubjectMod {\n \n     private static final long serialVersionUID = 3081848906558106204L;\n \n+    private String username;\n+\n     private String password;\n \n-    private String username;\n+    private final Set<Long> rolesToAdd = new HashSet<>();\n \n-    private final Set<MembershipMod> membershipsToAdd;\n+    private final Set<Long> rolesToRemove = new HashSet<>();\n \n-    private final Set<Long> membershipsToRemove;\n+    private final Set<MembershipMod> membershipsToAdd = new HashSet<>();\n+\n+    private final Set<Long> membershipsToRemove = new HashSet<>();\n \n     private StatusMod pwdPropRequest;\n \n     private Long securityQuestion;\n \n     private String securityAnswer;\n \n-    public UserMod() {\n-        super();\n-\n-        membershipsToAdd = new HashSet<>();\n-        membershipsToRemove = new HashSet<>();\n-    }\n-\n     public String getUsername() {\n         return username;\n     }\n@@ -70,6 +67,20 @@ public void setPassword(final String password) {\n         this.password = password;\n     }\n \n+    @XmlElementWrapper(name = \"rolesToAdd\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"rolesToAdd\")\n+    public Set<Long> getRolesToAdd() {\n+        return rolesToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"rolesToRemove\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"rolesToRemove\")\n+    public Set<Long> getRolesToRemove() {\n+        return rolesToRemove;\n+    }\n+\n     @XmlElementWrapper(name = \"membershipsToAdd\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"membershipsToAdd\")"},{"sha":"8b3da496d4b9bcf622e598df8259f06283878248","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractSubjectReportletConf.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractSubjectReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractSubjectReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractSubjectReportletConf.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -60,23 +60,23 @@ public void setMatchingCond(final String matchingCond) {\n         this.matchingCond = matchingCond;\n     }\n \n-    @XmlElementWrapper(name = \"plainAttributes\")\n-    @XmlElement(name = \"plainAttribute\")\n-    @JsonProperty(\"plainAttributes\")\n+    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"plainAttrs\")\n     public List<String> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @XmlElementWrapper(name = \"derivedAttributes\")\n+    @XmlElementWrapper(name = \"derAttrs\")\n     @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derivedAttributes\")\n+    @JsonProperty(\"derAttrs\")\n     public List<String> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @XmlElementWrapper(name = \"virtualAttributes\")\n+    @XmlElementWrapper(name = \"virAttrs\")\n     @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virtualAttributes\")\n+    @JsonProperty(\"virAttrs\")\n     public List<String> getVirAttrs() {\n         return virAttrs;\n     }"},{"sha":"de7bff372f3a218c33101e32cedbbbbf0bd991c4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/report/GroupReportletConf.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FGroupReportletConf.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -41,7 +41,6 @@ public enum Feature {\n         name,\n         groupOwner,\n         userOwner,\n-        entitlements,\n         users,\n         resources\n "},{"sha":"c8e915209dd2b728cad790d5474ad4fa5d91c6a5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Map;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n-import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n  * Extends <tt>SyncopeFiqlSearchConditionBuilder</tt> by providing some additional facilities for searching\n@@ -46,16 +45,6 @@ public GroupProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n-        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n-                hasEntitlements(entitlement, moreEntitlements);\n-    }\n-\n-    public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n-        return newBuilderInstance().is(SpecialAttr.ENTITLEMENTS.toString()).\n-                hasNotEntitlements(entitlement, moreEntitlements);\n-    }\n-\n     protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n             implements GroupProperty, CompleteCondition {\n \n@@ -74,17 +63,5 @@ public GroupProperty is(final String property) {\n             return b;\n         }\n \n-        @Override\n-        public CompleteCondition hasEntitlements(final String entitlement, final String... moreEntitlements) {\n-            this.result = SpecialAttr.ENTITLEMENTS.toString();\n-            return condition(FiqlParser.EQ, entitlement, (Object[]) moreEntitlements);\n-        }\n-\n-        @Override\n-        public CompleteCondition hasNotEntitlements(final String entitlement, final String... moreEntitlements) {\n-            this.result = SpecialAttr.ENTITLEMENTS.toString();\n-            return condition(FiqlParser.NEQ, entitlement, (Object[]) moreEntitlements);\n-        }\n-\n     }\n }"},{"sha":"0eb74803adb3990486a86a1aa7c52164e8641188","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupProperty.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,12 +18,6 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n-import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n-\n public interface GroupProperty extends SyncopeProperty {\n \n-    CompleteCondition hasEntitlements(String entitlement, String... moreEntitlements);\n-\n-    CompleteCondition hasNotEntitlements(String entitlement, String... moreEntitlements);\n-\n }"},{"sha":"37b53ec0b05f7aa513da12f06a010d3189f06391","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,33 +18,35 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n+import java.util.Arrays;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+\n public enum SpecialAttr {\n \n     NULL(\"$null\"),\n     RESOURCES(\"$resources\"),\n-    GROUPS(\"$groups\"),\n-    ENTITLEMENTS(\"$entitlements\");\n+    GROUPS(\"$groups\");\n \n     private final String literal;\n \n     SpecialAttr(final String literal) {\n         this.literal = literal;\n     }\n \n-    public static SpecialAttr fromString(final String value) {\n-        SpecialAttr result = null;\n-        for (SpecialAttr specialAttr : values()) {\n-            if (specialAttr.literal.equals(value)) {\n-                result = specialAttr;\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public String toString() {\n         return literal;\n     }\n \n+    public static SpecialAttr fromString(final String value) {\n+        return CollectionUtils.find(Arrays.asList(values()), new Predicate<SpecialAttr>() {\n+\n+            @Override\n+            public boolean evaluate(final SpecialAttr specialAttr) {\n+                return specialAttr.literal.equals(value);\n+            }\n+        });\n+    }\n+\n }"},{"sha":"c724bb0d22d6d83d1975476491a09c18b8f247ea","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAttributableTO.java","status":"modified","additions":22,"deletions":23,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,11 +20,11 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.List;\n+import java.util.LinkedHashSet;\n import java.util.Map;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n@@ -36,16 +36,23 @@ public abstract class AbstractAttributableTO extends ConnObjectTO {\n \n     private long key;\n \n-    private final List<AttrTO> derAttrs = new ArrayList<>();\n+    private final Set<AttrTO> derAttrs = new LinkedHashSet<>();\n \n-    private final List<AttrTO> virAttrs = new ArrayList<>();\n+    private final Set<AttrTO> virAttrs = new LinkedHashSet<>();\n \n     public long getKey() {\n         return key;\n     }\n \n-    public void setKey(final long id) {\n-        this.key = id;\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrs\")\n+    public Set<AttrTO> getDerAttrs() {\n+        return derAttrs;\n     }\n \n     @JsonIgnore\n@@ -54,9 +61,15 @@ public Map<String, AttrTO> getDerAttrMap() {\n         for (AttrTO attributeTO : derAttrs) {\n             result.put(attributeTO.getSchema(), attributeTO);\n         }\n-        result = Collections.unmodifiableMap(result);\n \n-        return result;\n+        return Collections.unmodifiableMap(result);\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrs\")\n+    public Set<AttrTO> getVirAttrs() {\n+        return virAttrs;\n     }\n \n     @JsonIgnore\n@@ -65,22 +78,8 @@ public Map<String, AttrTO> getVirAttrMap() {\n         for (AttrTO attributeTO : virAttrs) {\n             result.put(attributeTO.getSchema(), attributeTO);\n         }\n-        result = Collections.unmodifiableMap(result);\n \n-        return result;\n+        return Collections.unmodifiableMap(result);\n     }\n \n-    @XmlElementWrapper(name = \"derivedAttributes\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derivedAttributes\")\n-    public List<AttrTO> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n-    @XmlElementWrapper(name = \"virtualAttributes\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virtualAttributes\")\n-    public List<AttrTO> getVirAttrs() {\n-        return virAttrs;\n-    }\n }"},{"sha":"5f3027beb67836bde7db2c1f49f7a21e81ca9774","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractPolicyTO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractPolicyTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -42,11 +42,15 @@ public abstract class AbstractPolicyTO extends AbstractBaseBean {\n \n     private String description;\n \n-    private PolicyType type;\n+    private final PolicyType type;\n \n     private final List<String> usedByResources = new ArrayList<>();\n \n-    private final List<Long> usedByGroups = new ArrayList<>();\n+    private final List<String> usedByRealms = new ArrayList<>();\n+\n+    protected AbstractPolicyTO(final PolicyType type) {\n+        this.type = type;\n+    }\n \n     public long getKey() {\n         return key;\n@@ -68,22 +72,18 @@ public PolicyType getType() {\n         return type;\n     }\n \n-    public void setType(final PolicyType type) {\n-        this.type = type;\n-    }\n-\n     @XmlElementWrapper(name = \"usedByResources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"usedByResources\")\n     public List<String> getUsedByResources() {\n         return usedByResources;\n     }\n \n-    @XmlElementWrapper(name = \"usedByGroups\")\n+    @XmlElementWrapper(name = \"usedByRealms\")\n     @XmlElement(name = \"group\")\n-    @JsonProperty(\"usedByGroups\")\n-    public List<Long> getUsedByGroups() {\n-        return usedByGroups;\n+    @JsonProperty(\"usedByRealms\")\n+    public List<String> getUsedByRealms() {\n+        return usedByRealms;\n     }\n \n }"},{"sha":"ae21f12944b29740ca0979377bcaad7e04a95151","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSubjectTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -32,10 +32,20 @@ public abstract class AbstractSubjectTO extends AbstractAttributableTO {\n \n     private static final long serialVersionUID = 114668706977919206L;\n \n+    private String realm;\n+\n     private final Set<String> resources = new HashSet<>();\n \n     private final List<PropagationStatus> propagationStatusTOs = new ArrayList<>();\n \n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n     @XmlElementWrapper(name = \"resources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"resources\")"},{"sha":"460bc202a31cc1653bd51a524f5e4dbbd1bd5b08","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AccountPolicyTO.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccountPolicyTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -36,29 +36,24 @@ public class AccountPolicyTO extends AbstractPolicyTO {\n \n     private AccountPolicySpec specification;\n \n-    private final List<String> resources = new ArrayList<String>();\n+    private final List<String> resources = new ArrayList<>();\n \n     public AccountPolicyTO() {\n         this(false);\n     }\n \n     public AccountPolicyTO(final boolean global) {\n-        super();\n+        super(PolicyType.ACCOUNT);\n+    }\n \n-        PolicyType type = global\n-                ? PolicyType.GLOBAL_ACCOUNT\n-                : PolicyType.ACCOUNT;\n-        setType(type);\n+    public AccountPolicySpec getSpecification() {\n+        return specification;\n     }\n \n     public void setSpecification(final AccountPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public AccountPolicySpec getSpecification() {\n-        return specification;\n-    }\n-\n     @XmlElementWrapper(name = \"resources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"resources\")"},{"sha":"9726a25ba6218a0d25e4dfcbdc1cdc1269105f5e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkActionResult.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkActionResult.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -29,8 +30,6 @@\n import javax.xml.bind.annotation.XmlEnum;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.MapUtils;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"bulkActionResult\")\n@@ -84,7 +83,7 @@ public Map<String, Status> getResultMap() {\n             res.put(result.getKey(), result.getValue());\n         }\n \n-        return res;\n+        return Collections.unmodifiableMap(res);\n     }\n \n     @JsonIgnore\n@@ -97,7 +96,7 @@ public List<String> getResultByStatus(final Status status) {\n             }\n         }\n \n-        return res;\n+        return Collections.unmodifiableList(res);\n     }\n \n     public static class Result extends AbstractBaseBean {"},{"sha":"82878f8d2002ac03e1ed5c07fe7fb4f85cb99b3f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,11 +20,11 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.List;\n+import java.util.LinkedHashSet;\n import java.util.Map;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -36,12 +36,12 @@ public class ConnObjectTO extends AbstractAnnotatedBean {\n \n     private static final long serialVersionUID = 5139554911265442497L;\n \n-    private final List<AttrTO> attrs = new ArrayList<>();\n+    private final Set<AttrTO> attrs = new LinkedHashSet<>();\n \n-    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElementWrapper(name = \"plainAttrs\")\n     @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"attributes\")\n-    public List<AttrTO> getPlainAttrs() {\n+    @JsonProperty(\"plainAttrs\")\n+    public Set<AttrTO> getPlainAttrs() {\n         return attrs;\n     }\n \n@@ -51,8 +51,7 @@ public Map<String, AttrTO> getPlainAttrMap() {\n         for (AttrTO attributeTO : attrs) {\n             result.put(attributeTO.getSchema(), attributeTO);\n         }\n-        result = Collections.<String, AttrTO>unmodifiableMap(result);\n \n-        return result;\n+        return Collections.unmodifiableMap(result);\n     }\n }"},{"sha":"029f8a8df40648156fb3c4df51386095b8ac60d4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":0,"deletions":136,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -37,28 +37,10 @@ public class GroupTO extends AbstractSubjectTO {\n \n     private String name;\n \n-    private long parent;\n-\n     private Long userOwner;\n \n     private Long groupOwner;\n \n-    private boolean inheritOwner;\n-\n-    private boolean inheritTemplates;\n-\n-    private boolean inheritPlainAttrs;\n-\n-    private boolean inheritDerAttrs;\n-\n-    private boolean inheritVirAttrs;\n-\n-    private boolean inheritPasswordPolicy;\n-\n-    private boolean inheritAccountPolicy;\n-\n-    private final List<String> entitlements = new ArrayList<>();\n-\n     private final List<String> gPlainAttrTemplates = new ArrayList<>();\n \n     private final List<String> gDerAttrTemplates = new ArrayList<>();\n@@ -71,10 +53,6 @@ public class GroupTO extends AbstractSubjectTO {\n \n     private final List<String> mVirAttrTemplates = new ArrayList<>();\n \n-    private Long passwordPolicy;\n-\n-    private Long accountPolicy;\n-\n     public String getName() {\n         return name;\n     }\n@@ -83,14 +61,6 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    public long getParent() {\n-        return parent;\n-    }\n-\n-    public void setParent(final long parent) {\n-        this.parent = parent;\n-    }\n-\n     public Long getUserOwner() {\n         return userOwner;\n     }\n@@ -107,53 +77,6 @@ public void setGroupOwner(final Long groupOwner) {\n         this.groupOwner = groupOwner;\n     }\n \n-    public boolean isInheritOwner() {\n-        return inheritOwner;\n-    }\n-\n-    public void setInheritOwner(final boolean inheritOwner) {\n-        this.inheritOwner = inheritOwner;\n-    }\n-\n-    public boolean isInheritTemplates() {\n-        return inheritTemplates;\n-    }\n-\n-    public void setInheritTemplates(final boolean inheritTemplates) {\n-        this.inheritTemplates = inheritTemplates;\n-    }\n-\n-    public boolean isInheritPlainAttrs() {\n-        return inheritPlainAttrs;\n-    }\n-\n-    public void setInheritPlainAttrs(final boolean inheritPlainAttrs) {\n-        this.inheritPlainAttrs = inheritPlainAttrs;\n-    }\n-\n-    public boolean isInheritDerAttrs() {\n-        return inheritDerAttrs;\n-    }\n-\n-    public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n-        this.inheritDerAttrs = inheritDerAttrs;\n-    }\n-\n-    public boolean isInheritVirAttrs() {\n-        return inheritVirAttrs;\n-    }\n-\n-    public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n-        this.inheritVirAttrs = inheritVirAttrs;\n-    }\n-\n-    @XmlElementWrapper(name = \"entitlements\")\n-    @XmlElement(name = \"entitlement\")\n-    @JsonProperty(\"entitlements\")\n-    public List<String> getEntitlements() {\n-        return entitlements;\n-    }\n-\n     @XmlElementWrapper(name = \"gPlainAttrTemplates\")\n     @XmlElement(name = \"gPlainAttrTemplate\")\n     @JsonProperty(\"gPlainAttrTemplates\")\n@@ -196,63 +119,4 @@ public List<String> getMVirAttrTemplates() {\n         return mVirAttrTemplates;\n     }\n \n-    public Long getPasswordPolicy() {\n-        return passwordPolicy;\n-    }\n-\n-    public void setPasswordPolicy(final Long passwordPolicy) {\n-        this.passwordPolicy = passwordPolicy;\n-    }\n-\n-    public boolean isInheritPasswordPolicy() {\n-        return inheritPasswordPolicy;\n-    }\n-\n-    /**\n-     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\n-     *\n-     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\n-     */\n-    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\n-        this.inheritPasswordPolicy = inheritPasswordPolicy;\n-    }\n-\n-    public Long getAccountPolicy() {\n-        return accountPolicy;\n-    }\n-\n-    public void setAccountPolicy(final Long accountPolicy) {\n-        this.accountPolicy = accountPolicy;\n-    }\n-\n-    public boolean isInheritAccountPolicy() {\n-        return inheritAccountPolicy;\n-    }\n-\n-    /**\n-     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\n-     *\n-     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\n-     */\n-    public void setInheritAccountPolicy(final boolean inheritAccountPolicy) {\n-        this.inheritAccountPolicy = inheritAccountPolicy;\n-    }\n-\n-    public String getDisplayName() {\n-        return getKey() + \" \" + getName();\n-    }\n-\n-    public static long fromDisplayName(final String displayName) {\n-        long result = 0;\n-        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\n-            try {\n-                result = Long.valueOf(displayName.split(\" \")[0]);\n-            } catch (NumberFormatException e) {\n-                // just to avoid PMD warning about \"empty catch block\"\n-                result = 0;\n-            }\n-        }\n-\n-        return result;\n-    }\n }"},{"sha":"7d81cd8aa2241fab9bbb2637e36ffb593dc0873f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,6 +25,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.types.IntMappingType;\n \n@@ -47,13 +49,13 @@ public void setAccountLink(final String accountLink) {\n     }\n \n     public MappingItemTO getAccountIdItem() {\n-        MappingItemTO accountIdItem = null;\n-        for (MappingItemTO item : getItems()) {\n-            if (item.isAccountid()) {\n-                accountIdItem = item;\n+        return CollectionUtils.find(getItems(), new Predicate<MappingItemTO>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItemTO item) {\n+                return item.isAccountid();\n             }\n-        }\n-        return accountIdItem;\n+        });\n     }\n \n     protected boolean addAccountIdItem(final MappingItemTO accountIdItem) {\n@@ -81,13 +83,13 @@ public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\n     }\n \n     public MappingItemTO getPasswordItem() {\n-        MappingItemTO passwordItem = null;\n-        for (MappingItemTO item : getItems()) {\n-            if (item.isPassword()) {\n-                passwordItem = item;\n+        return CollectionUtils.find(getItems(), new Predicate<MappingItemTO>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItemTO item) {\n+                return item.isPassword();\n             }\n-        }\n-        return passwordItem;\n+        });\n     }\n \n     public boolean setPasswordItem(final MappingItemTO passwordItem) {"},{"sha":"2d2c7fa60ef420344926a6dd4b05c3b84cd0fd7f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,16 +27,16 @@ public class MembershipTO extends AbstractAttributableTO {\n \n     private static final long serialVersionUID = 5992828670273935861L;\n \n-    private long groupId;\n+    private long groupKey;\n \n     private String groupName;\n \n-    public long getGroupId() {\n-        return groupId;\n+    public long getGroupKey() {\n+        return groupKey;\n     }\n \n-    public void setGroupId(final long groupId) {\n-        this.groupId = groupId;\n+    public void setGroupKey(final long groupId) {\n+        this.groupKey = groupId;\n     }\n \n     public String getGroupName() {"},{"sha":"621ab2634bf8e01919fe55074239df34f4f89b3b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PasswordPolicyTO.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPasswordPolicyTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -32,23 +32,15 @@ public class PasswordPolicyTO extends AbstractPolicyTO {\n     private PasswordPolicySpec specification;\n \n     public PasswordPolicyTO() {\n-        this(false);\n+        super(PolicyType.PASSWORD);\n     }\n \n-    public PasswordPolicyTO(final boolean global) {\n-        super();\n-\n-        PolicyType type = global\n-                ? PolicyType.GLOBAL_PASSWORD\n-                : PolicyType.PASSWORD;\n-        setType(type);\n+    public PasswordPolicySpec getSpecification() {\n+        return specification;\n     }\n \n-    public void setSpecification(final PasswordPolicySpec specification) {\n+    public void setSpecification(PasswordPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public PasswordPolicySpec getSpecification() {\n-        return specification;\n-    }\n }"},{"sha":"d78ea80948296ac5021d745fd3fcdb150a2d5187","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -40,8 +40,6 @@ public class RoleTO extends AbstractBaseBean {\n \n     private String name;\n \n-    private String criteria;\n-\n     private final Set<Entitlement> entitlements = EnumSet.noneOf(Entitlement.class);\n \n     private final List<String> realms = new ArrayList<>();\n@@ -62,14 +60,6 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    public String getCriteria() {\n-        return criteria;\n-    }\n-\n-    public void setCriteria(final String criteria) {\n-        this.criteria = criteria;\n-    }\n-\n     @XmlElementWrapper(name = \"entitlements\")\n     @XmlElement(name = \"entitlement\")\n     @JsonProperty(\"entitlements\")"},{"sha":"309a4ebc137edf11a993abe519c8ecd991edb930","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncPolicyTO.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncPolicyTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -32,23 +32,15 @@ public class SyncPolicyTO extends AbstractPolicyTO {\n     private SyncPolicySpec specification;\n \n     public SyncPolicyTO() {\n-        this(false);\n+        super(PolicyType.SYNC);\n     }\n \n-    public SyncPolicyTO(final boolean global) {\n-        super();\n-\n-        PolicyType type = global\n-                ? PolicyType.GLOBAL_SYNC\n-                : PolicyType.SYNC;\n-        setType(type);\n+    public SyncPolicySpec getSpecification() {\n+        return specification;\n     }\n \n     public void setSpecification(final SyncPolicySpec specification) {\n         this.specification = specification;\n     }\n \n-    public SyncPolicySpec getSpecification() {\n-        return specification;\n-    }\n }"},{"sha":"e62ffe4afc300d8844c0d110dd37c76b546d0db2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncTaskTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncTaskTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,12 +27,22 @@ public class SyncTaskTO extends AbstractProvisioningTaskTO {\n \n     private static final long serialVersionUID = -2143537546915809017L;\n \n+    private String destinationRealm;\n+\n     private UserTO userTemplate;\n \n     private GroupTO groupTemplate;\n \n     private boolean fullReconciliation;\n \n+    public String getDestinationRealm() {\n+        return destinationRealm;\n+    }\n+\n+    public void setDestinationRealm(final String destinationRealm) {\n+        this.destinationRealm = destinationRealm;\n+    }\n+\n     public UserTO getUserTemplate() {\n         return userTemplate;\n     }"},{"sha":"03dda041cc051d737d37893fc94df1fc59f05950","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -53,6 +53,8 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private String groupProvisioningManager;\n \n+    private String virAttrCache;\n+\n     private final List<String> reportlets = new ArrayList<>();\n \n     private final List<String> taskJobs = new ArrayList<>();\n@@ -114,6 +116,10 @@ public String getGroupProvisioningManager() {\n         return groupProvisioningManager;\n     }\n \n+    public String getVirAttrCache() {\n+        return virAttrCache;\n+    }\n+\n     @XmlElementWrapper(name = \"reportlets\")\n     @XmlElement(name = \"reportlet\")\n     @JsonProperty(\"reportlets\")\n@@ -213,4 +219,7 @@ public void setGroupProvisioningManager(final String groupProvisioningManager) {\n         this.groupProvisioningManager = groupProvisioningManager;\n     }\n \n+    public void setVirAttrCache(final String virAttrCache) {\n+        this.virAttrCache = virAttrCache;\n+    }\n }"},{"sha":"6597dc86907cc7e56f7afa8392029c7fabeebb87","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -42,6 +42,8 @@ public class UserTO extends AbstractSubjectTO {\n \n     private String password;\n \n+    private final List<Long> roles = new ArrayList<>();\n+\n     private final List<MembershipTO> memberships = new ArrayList<>();\n \n     private String status;\n@@ -70,6 +72,13 @@ public void setPassword(final String password) {\n         this.password = password;\n     }\n \n+    @XmlElementWrapper(name = \"roles\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"roles\")\n+    public List<Long> getRoles() {\n+        return roles;\n+    }\n+\n     @XmlElementWrapper(name = \"memberships\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"memberships\")\n@@ -86,7 +95,7 @@ public Map<Long, MembershipTO> getMembershipMap() {\n         } else {\n             result = new HashMap<>(getMemberships().size());\n             for (MembershipTO membership : getMemberships()) {\n-                result.put(membership.getGroupId(), membership);\n+                result.put(membership.getGroupKey(), membership);\n             }\n             result = Collections.unmodifiableMap(result);\n         }"},{"sha":"43e6d2c734b6658bf0e7f2b463a582c5a3af9b66","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/WorkflowFormTO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FWorkflowFormTO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -133,9 +133,8 @@ public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\n         for (WorkflowFormPropertyTO prop : getProperties()) {\n             result.put(prop.getId(), prop);\n         }\n-        result = Collections.unmodifiableMap(result);\n \n-        return result;\n+        return Collections.unmodifiableMap(result);\n     }\n \n     @JsonIgnore\n@@ -147,6 +146,6 @@ public Map<String, String> getPropertiesForSubmit() {\n             }\n         }\n \n-        return props;\n+        return Collections.unmodifiableMap(props);\n     }\n }"},{"sha":"47a60e8e947971a046969b25a99787f7385fbeed","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AccountPolicySpec.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAccountPolicySpec.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -56,12 +56,12 @@ public class AccountPolicySpec extends AbstractPolicySpec {\n     private boolean propagateSuspension;\n \n     /**\n-     * Number of permitted login retries.\n+     * Maximum number of (failing) authentication attempts.\n      * 0 disabled; &gt;0 enabled.\n      * If the number of subsequent failed logins will be greater then this value\n      * the account will be suspended (lock-out).\n      */\n-    private int permittedLoginRetries;\n+    private int maxAuthenticationAttempts;\n \n     public boolean isAllLowerCase() {\n         return allLowerCase;\n@@ -111,11 +111,11 @@ public void setPropagateSuspension(final boolean propagateSuspension) {\n         this.propagateSuspension = propagateSuspension;\n     }\n \n-    public int getPermittedLoginRetries() {\n-        return permittedLoginRetries;\n+    public int getMaxAuthenticationAttempts() {\n+        return maxAuthenticationAttempts;\n     }\n \n-    public void setPermittedLoginRetries(final int permittedLoginRetries) {\n-        this.permittedLoginRetries = permittedLoginRetries;\n+    public void setMaxAuthenticationAttempts(final int maxAuthenticationAttempts) {\n+        this.maxAuthenticationAttempts = maxAuthenticationAttempts;\n     }\n }"},{"sha":"fe9770ac9ae0adeeb30172b27a2c22ebe7f9c4f8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,9 +21,10 @@\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.text.ParseException;\n-import java.util.AbstractMap;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.to.EventCategoryTO;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n@@ -109,8 +110,8 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n                 eventCategory.getValue());\n     }\n \n-    public static Map.Entry<EventCategoryTO, Result> parseEventCategory(final String event) {\n-        final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+    public static Pair<EventCategoryTO, Result> parseEventCategory(final String event) {\n+        EventCategoryTO eventCategoryTO = new EventCategoryTO();\n \n         Result condition = null;\n \n@@ -154,7 +155,7 @@ public static Map.Entry<EventCategoryTO, Result> parseEventCategory(final String\n             }\n         }\n \n-        return new AbstractMap.SimpleEntry<>(eventCategoryTO, condition);\n+        return new ImmutablePair<>(eventCategoryTO, condition);\n     }\n \n     /**"},{"sha":"6875279dc04c0c11e5106937b41a16c1c72c7fa2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,6 +25,7 @@ public enum ClientExceptionType {\n     AssociatedResources(Response.Status.BAD_REQUEST),\n     Composite(Response.Status.BAD_REQUEST),\n     ConcurrentModification(Response.Status.PRECONDITION_FAILED),\n+    ConnectorException(Response.Status.BAD_REQUEST),\n     DataIntegrityViolation(Response.Status.CONFLICT),\n     EntityExists(Response.Status.CONFLICT),\n     GenericPersistence(Response.Status.BAD_REQUEST),\n@@ -35,7 +36,6 @@ public enum ClientExceptionType {\n     InvalidConnIdConf(Response.Status.BAD_REQUEST),\n     InvalidPolicy(Response.Status.BAD_REQUEST),\n     InvalidConf(Response.Status.BAD_REQUEST),\n-    InvalidGroup(Response.Status.BAD_REQUEST),\n     InvalidPath(Response.Status.BAD_REQUEST),\n     InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n@@ -48,21 +48,20 @@ public enum ClientExceptionType {\n     InvalidDerSchema(Response.Status.BAD_REQUEST),\n     InvalidVirSchema(Response.Status.BAD_REQUEST),\n     InvalidSchemaMapping(Response.Status.BAD_REQUEST),\n+    InvalidRealm(Response.Status.BAD_REQUEST),\n     InvalidUser(Response.Status.BAD_REQUEST),\n     InvalidExternalResource(Response.Status.BAD_REQUEST),\n     InvalidNotification(Response.Status.BAD_REQUEST),\n     InvalidPropagationTask(Response.Status.BAD_REQUEST),\n     InvalidSchedTask(Response.Status.BAD_REQUEST),\n     InvalidSyncTask(Response.Status.BAD_REQUEST),\n-    InvalidPushTask(Response.Status.BAD_REQUEST),\n     InvalidValues(Response.Status.BAD_REQUEST),\n     NotFound(Response.Status.NOT_FOUND),\n     RejectedUserCreate(Response.Status.BAD_REQUEST),\n     RequiredValuesMissing(Response.Status.BAD_REQUEST),\n     RESTValidation(Response.Status.BAD_REQUEST),\n     GroupOwnership(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n-    UnauthorizedGroup(Response.Status.UNAUTHORIZED),\n     Unauthorized(Response.Status.UNAUTHORIZED),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);"},{"sha":"1712b74ff4648e560ddde79370cf604c2b489ad8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,6 +20,7 @@\n \n public enum Entitlement {\n \n+    ANONYMOUS,\n     REALM_LIST,\n     REALM_CREATE,\n     REALM_UPDATE,\n@@ -34,13 +35,14 @@ public enum Entitlement {\n     SCHEMA_READ,\n     SCHEMA_UPDATE,\n     SCHEMA_DELETE,\n+    USER_SEARCH,\n     USER_LIST,\n     USER_CREATE,\n     USER_READ,\n     USER_UPDATE,\n     USER_DELETE,\n     USER_VIEW,\n-    GROUP_LIST,\n+    GROUP_SEARCH,\n     GROUP_CREATE,\n     GROUP_READ,\n     GROUP_UPDATE,\n@@ -98,6 +100,9 @@ public enum Entitlement {\n     AUDIT_DISABLE,\n     SECURITY_QUESTION_CREATE,\n     SECURITY_QUESTION_UPDATE,\n-    SECURITY_QUESTION_DELETE;\n+    SECURITY_QUESTION_DELETE,\n+    ROUTE_READ,\n+    ROUTE_LIST,\n+    ROUTE_UPDATE;\n \n }"},{"sha":"7f1c11ee0c1a38e956b0a2d1f7c97b1fd2a41e56","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PolicyType.java","status":"modified","additions":8,"deletions":30,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,42 +24,20 @@\n public enum PolicyType {\n \n     /**\n-     * Account policy like:\n-     * password expire time, change password at first access, ...\n+     * How username values should look like.\n      */\n-    ACCOUNT(\"Account Policy\"),\n-    GLOBAL_ACCOUNT(\"Account Global Policy\"),\n+    ACCOUNT,\n     /**\n-     * Password policy regarding password syntax.\n+     * How password values should look like.\n      */\n-    PASSWORD(\"Password Policy\"),\n-    GLOBAL_PASSWORD(\"Password Global Policy\"),\n+    PASSWORD,\n     /**\n-     * SYNC policy regarding account conflicts resolution.\n+     * For handling conflicts resolution during synchronization.\n      */\n-    SYNC(\"Synchronization Policy\"),\n-    GLOBAL_SYNC(\"Synchronization Global Policy\"),\n+    SYNC,\n     /**\n-     * PUSH policy regarding account conflicts resolution.\n+     * For handling conflicts resolution during push.\n      */\n-    PUSH(\"Push Policy\"),\n-    GLOBAL_PUSH(\"Push Global Policy\");\n+    PUSH;\n \n-    private String description;\n-\n-    PolicyType(final String description) {\n-        this.description = description;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public boolean isGlobal() {\n-        return name().startsWith(\"GLOBAL\");\n-    }\n-\n-    public static PolicyType fromString(final String value) {\n-        return PolicyType.valueOf(value.toUpperCase());\n-    }\n }"},{"sha":"62530eb7a84e70c3cab6556144f1a14287f51e3f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/EntitlementTO.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwrap%2FEntitlementTO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.wrap;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"entitlement\")\n-@XmlType\n-public class EntitlementTO extends AbstractWrappable<String> {\n-\n-    private static final long serialVersionUID = 7133614577172038452L;\n-\n-}"},{"sha":"307bbba9873dcaacf59b54f655ca20bda988e7cd","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -33,6 +33,8 @@ public final class RESTHeaders {\n      */\n     public static final String USERNAME = \"X-Syncope-Username\";\n \n+    public static final String OWNED_ENTITLEMENTS = \"X-Syncope-Entitlements\";\n+\n     /**\n      * HTTP header key for object ID assigned to an object after its creation.\n      */"},{"sha":"44ad900bc990114eb13a40a3272fba092f98b152","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/EntitlementService.java","status":"removed","additions":0,"deletions":53,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FEntitlementService.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service;\n-\n-import java.util.List;\n-\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.wrap.EntitlementTO;\n-\n-/**\n- * REST operations for entitlements.\n- */\n-@Path(\"entitlements\")\n-public interface EntitlementService extends JAXRSService {\n-\n-    /**\n-     * Returns a list of all known entitlements.\n-     *\n-     * @return list of all known entitlements\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<EntitlementTO> getAllEntitlements();\n-\n-    /**\n-     * Returns a list of entitlements assigned to user making the current request.\n-     *\n-     * @return list of entitlements assigned to user making the current request\n-     */\n-    @GET\n-    @Path(\"own\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<EntitlementTO> getOwnEntitlements();\n-}"},{"sha":"337bebc0ac0eff0422326f512101f1d51b0cfb37","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":35,"deletions":34,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -35,6 +35,7 @@\n import org.apache.cxf.jaxrs.model.wadl.Description;\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -50,28 +51,6 @@\n @Path(\"groups\")\n public interface GroupService extends JAXRSService {\n \n-    /**\n-     * Returns children groups of given group.\n-     *\n-     * @param groupKey key of group to get children from\n-     * @return children groups of given group\n-     */\n-    @GET\n-    @Path(\"{groupKey}/children\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<GroupTO> children(@NotNull @PathParam(\"groupKey\") Long groupKey);\n-\n-    /**\n-     * Returns parent group of the given group (or null if no parent exists).\n-     *\n-     * @param groupKey key of group to get parent group from\n-     * @return parent group of the given group (or null if no parent exists)\n-     */\n-    @GET\n-    @Path(\"{groupKey}/parent\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    GroupTO parent(@NotNull @PathParam(\"groupKey\") Long groupKey);\n-\n     /**\n      * Reads the group matching the provided groupKey.\n      *\n@@ -87,54 +66,61 @@ public interface GroupService extends JAXRSService {\n      * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\n      * can read his own groups.\n      *\n-     * @param groupKey key of group to be read\n-     * @return group with matching id\n+     * @return own groups\n      */\n     @Descriptions({\n         @Description(target = DocTarget.METHOD,\n                 value = \"This method is similar to <tt>read()</tt>, but uses different authentication handling to \"\n                 + \"ensure that a user can read his own groups.\")\n     })\n     @GET\n-    @Path(\"{groupKey}/own\")\n+    @Path(\"own\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    GroupTO readSelf(@NotNull @PathParam(\"groupKey\") Long groupKey);\n+    List<GroupTO> own();\n \n     /**\n      * Returns a paged list of existing groups.\n      *\n+     * @param realms realms under which groups are defined\n      * @return paged list of all existing groups\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list();\n+    PagedResult<GroupTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms);\n \n     /**\n      * Returns a paged list of existing groups.\n      *\n+     * @param realms realms under which groups are defined\n      * @param orderBy list of ordering clauses, separated by comma\n      * @return paged list of all existing groups\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+    PagedResult<GroupTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of existing groups matching page/size conditions.\n      *\n+     * @param realms realms under which groups are defined\n      * @param page result page number\n      * @param size number of entries per page\n      * @return paged list of existing groups matching page/size conditions\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     PagedResult<GroupTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n \n     /**\n      * Returns a paged list of existing groups matching page/size conditions.\n      *\n+     * @param realms realms under which groups are defined\n      * @param page result page number\n      * @param size number of entries per page\n      * @param orderBy list of ordering clauses, separated by comma\n@@ -143,24 +129,29 @@ PagedResult<GroupTO> list(\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     PagedResult<GroupTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n             @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of groups matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which groups are defined\n      * @param fiql FIQL search expression\n      * @return paged list of groups matching the provided FIQL search condition\n      */\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql);\n+    PagedResult<GroupTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @NotNull @QueryParam(PARAM_FIQL) String fiql);\n \n     /**\n      * Returns a paged list of groups matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which groups are defined\n      * @param fiql FIQL search expression\n      * @param orderBy list of ordering clauses, separated by comma\n      * @return paged list of groups matching the provided FIQL search condition\n@@ -169,11 +160,14 @@ PagedResult<GroupTO> list(\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     PagedResult<GroupTO> search(\n-            @NotNull @QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @NotNull @QueryParam(PARAM_FIQL) String fiql,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of groups matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which groups are defined\n      * @param fiql FIQL search expression\n      * @param page result page number\n      * @param size number of entries per page\n@@ -182,13 +176,16 @@ PagedResult<GroupTO> search(\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+    PagedResult<GroupTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @QueryParam(PARAM_FIQL) String fiql,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n \n     /**\n      * Returns a paged list of groups matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which groups are defined\n      * @param fiql FIQL search expression\n      * @param page result page number\n      * @param size number of entries per page\n@@ -198,7 +195,9 @@ PagedResult<GroupTO> search(@QueryParam(PARAM_FIQL) String fiql,\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<GroupTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+    PagedResult<GroupTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @QueryParam(PARAM_FIQL) String fiql,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n             @QueryParam(PARAM_ORDERBY) String orderBy);\n@@ -274,7 +273,8 @@ PagedResult<GroupTO> search(@QueryParam(PARAM_FIQL) String fiql,\n     @Path(\"{groupKey}/deassociate/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkDeassociation(@NotNull @PathParam(\"groupKey\") Long groupKey,\n+    Response bulkDeassociation(\n+            @NotNull @PathParam(\"groupKey\") Long groupKey,\n             @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n             @NotNull List<ResourceName> resourceNames);\n \n@@ -294,7 +294,8 @@ Response bulkDeassociation(@NotNull @PathParam(\"groupKey\") Long groupKey,\n     @Path(\"{groupKey}/associate/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkAssociation(@NotNull @PathParam(\"groupKey\") Long groupKey,\n+    Response bulkAssociation(\n+            @NotNull @PathParam(\"groupKey\") Long groupKey,\n             @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n             @NotNull List<ResourceName> resourceNames);\n "},{"sha":"c098ace7eb250552ef9ffe5ec495b3351048dd65","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -55,18 +55,6 @@ public interface PolicyService extends JAXRSService {\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"policyKey\") Long policyKey);\n \n-    /**\n-     * Returns the global policy for the given type.\n-     *\n-     * @param type PolicyType to read global policy from\n-     * @param <T> response type (extending PolicyTO)\n-     * @return global policy for matching type\n-     */\n-    @GET\n-    @Path(\"global\")\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractPolicyTO> T readGlobal(@NotNull @MatrixParam(\"type\") PolicyType type);\n-\n     /**\n      * Returns a list of policies of the matching type.\n      *"},{"sha":"f40801e00049e8707319a95e62f3bce3e5136c63","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -35,6 +35,7 @@\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for user self-management.\n@@ -45,11 +46,11 @@ public interface UserSelfService extends JAXRSService {\n     /**\n      * Returns the user making the service call.\n      *\n-     * @return calling user data\n+     * @return calling user data, including owned entitlements as header value {@link RESTHeaders#OWNED_ENTITLEMENTS}\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    UserTO read();\n+    Response read();\n \n     /**\n      * Self-registration for new user."},{"sha":"76595d339998715b84f7893e472535a199e1fd1c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":35,"deletions":9,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -36,6 +36,7 @@\n import org.apache.cxf.jaxrs.model.wadl.Description;\n import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -95,38 +96,46 @@ public interface UserService extends JAXRSService {\n     /**\n      * Returns a paged list of existing users.\n      *\n+     * @param realms realms under which users are defined\n      * @return paged list of all existing users\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list();\n+    PagedResult<UserTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms);\n \n     /**\n      * Returns a paged list of existing users.\n      *\n+     * @param realms realms under which users are defined\n      * @param orderBy list of ordering clauses, separated by comma\n      * @return paged list of all existing users\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\n+    PagedResult<UserTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of existing users matching page/size conditions.\n      *\n+     * @param realms realms under which users are defined\n      * @param page result page number\n      * @param size number of entries per page\n      * @return paged list of existing users matching page/size conditions\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     PagedResult<UserTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n \n     /**\n      * Returns a paged list of existing users matching page/size conditions.\n      *\n+     * @param realms realms under which users are defined\n      * @param page result page number\n      * @param size number of entries per page\n      * @param orderBy list of ordering clauses, separated by comma\n@@ -135,36 +144,45 @@ PagedResult<UserTO> list(\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     PagedResult<UserTO> list(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n             @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of users matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which users are defined\n      * @param fiql FIQL search expression\n      * @return paged list of users matching the provided FIQL search condition\n      */\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql);\n+    PagedResult<UserTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @NotNull @QueryParam(PARAM_FIQL) String fiql);\n \n     /**\n      * Returns a paged list of users matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which users are defined\n      * @param fiql FIQL search expression\n      * @param orderBy list of ordering clauses, separated by comma\n      * @return paged list of users matching the provided FIQL search condition\n      */\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(@NotNull @QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\n+    PagedResult<UserTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @NotNull @QueryParam(PARAM_FIQL) String fiql,\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of users matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which users are defined\n      * @param fiql FIQL search expression\n      * @param page result page number\n      * @param size number of entries per page\n@@ -173,13 +191,16 @@ PagedResult<UserTO> list(\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+    PagedResult<UserTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @QueryParam(PARAM_FIQL) String fiql,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size);\n \n     /**\n      * Returns a paged list of users matching the provided FIQL search condition.\n      *\n+     * @param realms realms under which users are defined\n      * @param fiql FIQL search expression\n      * @param page result page number\n      * @param size number of entries per page\n@@ -189,7 +210,9 @@ PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n+    PagedResult<UserTO> search(\n+            @DefaultValue(SyncopeConstants.ROOT_REALM) @QueryParam(\"realm\") List<String> realms,\n+            @QueryParam(PARAM_FIQL) String fiql,\n             @NotNull @Min(1) @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) Integer page,\n             @NotNull @Min(1) @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) Integer size,\n             @QueryParam(PARAM_ORDERBY) String orderBy);\n@@ -210,7 +233,8 @@ PagedResult<UserTO> search(@QueryParam(PARAM_FIQL) String fiql,\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response create(@NotNull UserTO userTO,\n+    Response create(\n+            @NotNull UserTO userTO,\n             @DefaultValue(\"true\") @QueryParam(\"storePassword\") boolean storePassword);\n \n     /**\n@@ -284,7 +308,8 @@ Response create(@NotNull UserTO userTO,\n     @Path(\"{userKey}/bulkDeassociation/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkDeassociation(@NotNull @PathParam(\"userKey\") Long userKey,\n+    Response bulkDeassociation(\n+            @NotNull @PathParam(\"userKey\") Long userKey,\n             @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n             @NotNull List<ResourceName> resourceNames);\n \n@@ -303,7 +328,8 @@ Response bulkDeassociation(@NotNull @PathParam(\"userKey\") Long userKey,\n     @Path(\"{userKey}/bulkAssociation/{type}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response bulkAssociation(@NotNull @PathParam(\"userKey\") Long userKey,\n+    Response bulkAssociation(\n+            @NotNull @PathParam(\"userKey\") Long userKey,\n             @NotNull @PathParam(\"type\") ResourceAssociationActionType type,\n             @NotNull ResourceAssociationMod associationMod);\n "},{"sha":"7bd099bdf3f291375e28ce12bbf07535012c9946","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractSubjectLogic.java","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSubjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSubjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractSubjectLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,26 +18,53 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.util.Collection;\n import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n public abstract class AbstractSubjectLogic<T extends AbstractSubjectTO, V extends AbstractSubjectMod>\n         extends AbstractResourceAssociator<T> {\n \n+    protected Set<String> getEffectiveRealms(\n+            final Set<String> allowedRealms, final Collection<String> requestedRealms) {\n+\n+        Set<String> effective = RealmUtils.normalize(requestedRealms);\n+        CollectionUtils.filter(effective, new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String requestedRealm) {\n+                return CollectionUtils.exists(allowedRealms, new Predicate<String>() {\n+\n+                    @Override\n+                    public boolean evaluate(final String allowedRealm) {\n+                        return requestedRealm.startsWith(allowedRealm);\n+                    }\n+                });\n+            }\n+        });\n+\n+        return effective;\n+    }\n+\n     public abstract T read(Long key);\n \n-    public abstract int count();\n+    public abstract int count(List<String> realms);\n \n     public abstract T update(V attributableMod);\n \n     public abstract T delete(Long key);\n \n-    public abstract List<T> list(int page, int size, List<OrderByClause> orderBy);\n+    public abstract List<T> list(int page, int size, List<OrderByClause> orderBy, List<String> realms);\n \n-    public abstract List<T> search(SearchCond searchCondition, int page, int size, List<OrderByClause> orderBy);\n+    public abstract List<T> search(\n+            SearchCond searchCondition, int page, int size, List<OrderByClause> orderBy, List<String> realms);\n \n-    public abstract int searchCount(SearchCond searchCondition);\n+    public abstract int searchCount(SearchCond searchCondition, List<String> realms);\n }"},{"sha":"23c60ccea53c84e14542d201334683522ad33613","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":6,"deletions":32,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,8 +30,6 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -204,28 +202,25 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @Transactional(readOnly = true)\n     public List<String> getSchemaNames(final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n-        final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n         }\n \n         // consider the possibility to receive overridden properties only\n-        final Set<ConnConfProperty> conf = binder.mergeConnConfProperties(connInstanceTO.getConfiguration(),\n-                connInstance.getConfiguration());\n+        Set<ConnConfProperty> conf =\n+                binder.mergeConnConfProperties(connInstanceTO.getConfiguration(), connInstance.getConfiguration());\n \n         // We cannot use Spring bean because this method could be used during resource definition or modification:\n         // bean couldn't exist or couldn't be updated.\n         // This is the reason why we should take a \"not mature\" connector facade proxy to ask for schema names.\n-        final List<String> result = new ArrayList<>(connFactory.createConnector(connInstance, conf).\n-                getSchemaNames(includeSpecial));\n-\n-        return result;\n+        return new ArrayList<>(connFactory.createConnector(connInstance, conf).getSchemaNames(includeSpecial));\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @Transactional(readOnly = true)\n     public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceTO) {\n-        final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n         }\n@@ -251,7 +246,7 @@ public List<String> getSupportedObjectClasses(final ConnInstanceTO connInstanceT\n     @Transactional(readOnly = true)\n     public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\n \n-        final ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n@@ -294,27 +289,6 @@ public void reload() {\n         connFactory.load();\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        BulkActionResult res = new BulkActionResult();\n-\n-        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n-            for (String id : bulkAction.getTargets()) {\n-                try {\n-                    res.add(delete(Long.valueOf(id)).getKey(), BulkActionResult.Status.SUCCESS);\n-                } catch (Exception e) {\n-                    LOG.error(\"Error performing delete for connector {}\", id, e);\n-                    res.add(id, BulkActionResult.Status.FAILURE);\n-                }\n-            }\n-        }\n-\n-        return res;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     protected ConnInstanceTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"a5dc6a07709ccfa14af03df74744c24148422c2f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/EntitlementLogic.java","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FEntitlementLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FEntitlementLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FEntitlementLogic.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.wrap.EntitlementTO;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class EntitlementLogic extends AbstractTransactionalLogic<EntitlementTO> {\n-\n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n-    public List<String> getAll() {\n-        return CollectionUtils.collect(entitlementDAO.findAll(), new Transformer<Entitlement, String>() {\n-\n-            @Override\n-            public String transform(final Entitlement entitlement) {\n-                return entitlement.getKey();\n-            }\n-        }, new ArrayList<String>());\n-    }\n-\n-    public Set<String> getOwn() {\n-        return AuthContextUtil.getOwnedEntitlementNames();\n-    }\n-\n-    @Override\n-    protected EntitlementTO resolveReference(final Method method, final Object... args)\n-            throws UnresolvedReferenceException {\n-\n-        throw new UnresolvedReferenceException();\n-    }\n-}"},{"sha":"bbbca1b58113fac2ecce691dd14b3742eed65bcc","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":77,"deletions":134,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,34 +27,31 @@\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.GroupMod;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.common.lib.CollectionUtils2;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AttributableTransformer;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -95,127 +92,69 @@ public class GroupLogic extends AbstractSubjectLogic<GroupTO, GroupMod> {\n     @Autowired\n     protected GroupProvisioningManager provisioningManager;\n \n-    @PreAuthorize(\"hasAnyRole('GROUP_READ', T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n+    @PreAuthorize(\"hasRole('GROUP_READ')\")\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO read(final Long groupKey) {\n-        Group group;\n-        // bypass group entitlements check\n-        if (anonymousUser.equals(AuthContextUtil.getAuthenticatedUsername())) {\n-            group = groupDAO.find(groupKey);\n-        } else {\n-            group = groupDAO.authFetch(groupKey);\n-        }\n-\n-        if (group == null) {\n-            throw new NotFoundException(\"Group \" + groupKey);\n-        }\n-\n-        return binder.getGroupTO(group);\n+        return binder.getGroupTO(groupKey);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('ANONYMOUS'))\")\n     @Transactional(readOnly = true)\n-    public GroupTO readSelf(final Long groupKey) {\n-        // Explicit search instead of using binder.getGroupFromId() in order to bypass auth checks - will do here\n-        Group group = groupDAO.find(groupKey);\n-        if (group == null) {\n-            throw new NotFoundException(\"Group \" + groupKey);\n-        }\n-\n-        Set<Long> ownedGroupIds;\n-        User authUser = userDAO.find(AuthContextUtil.getAuthenticatedUsername());\n-        if (authUser == null) {\n-            ownedGroupIds = Collections.<Long>emptySet();\n-        } else {\n-            ownedGroupIds = authUser.getGroupKeys();\n-        }\n-\n-        Set<Long> allowedGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        allowedGroupIds.addAll(ownedGroupIds);\n-        if (!allowedGroupIds.contains(group.getKey())) {\n-            throw new UnauthorizedGroupException(group.getKey());\n-        }\n-\n-        return binder.getGroupTO(group);\n-    }\n-\n-    @PreAuthorize(\"hasRole('GROUP_READ')\")\n-    @Transactional(readOnly = true)\n-    public GroupTO parent(final Long groupKey) {\n-        Group group = groupDAO.authFetch(groupKey);\n-\n-        Set<Long> allowedGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        if (group.getParent() != null && !allowedGroupIds.contains(group.getParent().getKey())) {\n-            throw new UnauthorizedGroupException(group.getParent().getKey());\n-        }\n-\n-        GroupTO result = group.getParent() == null\n-                ? null\n-                : binder.getGroupTO(group.getParent());\n-\n-        return result;\n-    }\n-\n-    @PreAuthorize(\"hasRole('GROUP_READ')\")\n-    @Transactional(readOnly = true)\n-    public List<GroupTO> children(final Long groupKey) {\n-        Group group = groupDAO.authFetch(groupKey);\n-        final Set<Long> allowedGroupKeys =\n-                GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-\n-        return CollectionUtils2.collect(groupDAO.findChildren(group), new Transformer<Group, GroupTO>() {\n-\n-            @Override\n-            public GroupTO transform(final Group group) {\n-                return binder.getGroupTO(group);\n-            }\n-        }, new Predicate<Group>() {\n-\n-            @Override\n-            public boolean evaluate(final Group group) {\n-                return allowedGroupKeys.contains(group.getKey());\n-            }\n-        }, new ArrayList<GroupTO>());\n+    public List<GroupTO> own() {\n+        return CollectionUtils.collect(\n+                userDAO.find(AuthContextUtils.getAuthenticatedUsername()).getGroups(),\n+                new Transformer<Group, GroupTO>() {\n+\n+                    @Override\n+                    public GroupTO transform(final Group input) {\n+                        return binder.getGroupTO(input);\n+                    }\n+                }, new ArrayList<GroupTO>());\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n-    public int count() {\n-        return groupDAO.count();\n+    public int count(final List<String> realms) {\n+        return groupDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     @Override\n-    public List<GroupTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n-        return CollectionUtils.collect(groupDAO.findAll(page, size, orderBy), new Transformer<Group, GroupTO>() {\n-\n-            @Override\n-            public GroupTO transform(final Group input) {\n-                return binder.getGroupTO(input);\n-            }\n-        }, new ArrayList<GroupTO>());\n+    public List<GroupTO> list(\n+            final int page, final int size, final List<OrderByClause> orderBy, final List<String> realms) {\n+\n+        return CollectionUtils.collect(groupDAO.findAll(\n+                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realms),\n+                page, size, orderBy),\n+                new Transformer<Group, GroupTO>() {\n+\n+                    @Override\n+                    public GroupTO transform(final Group input) {\n+                        return binder.getGroupTO(input);\n+                    }\n+                }, new ArrayList<GroupTO>());\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('GROUP_SEARCH')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n-    public int searchCount(final SearchCond searchCondition) {\n-        final Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        return searchDAO.count(adminGroupIds, searchCondition, SubjectType.GROUP);\n+    public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n+        return searchDAO.count(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_SEARCH), realms),\n+                searchCondition, SubjectType.GROUP);\n     }\n \n-    @PreAuthorize(\"isAuthenticated()\")\n+    @PreAuthorize(\"hasRole('GROUP_SEARCH')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n-            final List<OrderByClause> orderBy) {\n+            final List<OrderByClause> orderBy, final List<String> realms) {\n \n-        List<Group> matchingGroups = searchDAO.search(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.\n-                getOwnedEntitlementNames()),\n+        final List<Group> matchingGroups = searchDAO.search(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_SEARCH), realms),\n                 searchCondition, page, size, orderBy, SubjectType.GROUP);\n         return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n \n@@ -228,10 +167,15 @@ public GroupTO transform(final Group input) {\n \n     @PreAuthorize(\"hasRole('GROUP_CREATE')\")\n     public GroupTO create(final GroupTO groupTO) {\n-        // Check that this operation is allowed to be performed by caller\n-        Set<Long> allowedGroupIds = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        if (groupTO.getParent() != 0 && !allowedGroupIds.contains(groupTO.getParent())) {\n-            throw new UnauthorizedGroupException(groupTO.getParent());\n+        if (groupTO.getRealm() == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            throw sce;\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_CREATE),\n+                Collections.singleton(groupTO.getRealm()));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(SubjectType.GROUP, null);\n         }\n \n         // Attributable transformation (if configured)\n@@ -242,31 +186,50 @@ public GroupTO create(final GroupTO groupTO) {\n          * Actual operations: workflow, propagation\n          */\n         Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(groupTO);\n-        final GroupTO savedTO = binder.getGroupTO(created.getKey());\n+        GroupTO savedTO = binder.getGroupTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n     @Override\n     public GroupTO update(final GroupMod groupMod) {\n-        // Check that this operation is allowed to be performed by caller\n-        groupDAO.authFetch(groupMod.getKey());\n+        Group group = groupDAO.authFetch(groupMod.getKey());\n+        if (group == null) {\n+            throw new NotFoundException(\"Group with key \" + groupMod.getKey());\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n+                Collections.singleton(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(SubjectType.GROUP, group.getKey());\n+        }\n \n         // Attribute value transformation (if configured)\n         GroupMod actual = attrTransformer.transform(groupMod);\n         LOG.debug(\"Transformed: {}\", actual);\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(groupMod);\n \n-        final GroupTO updatedTO = binder.getGroupTO(updated.getKey());\n+        GroupTO updatedTO = binder.getGroupTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('GROUP_DELETE')\")\n     @Override\n     public GroupTO delete(final Long groupKey) {\n+        Group group = groupDAO.authFetch(groupKey);\n+        if (group == null) {\n+            throw new NotFoundException(\"Group with key \" + groupKey);\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_DELETE),\n+                Collections.singleton(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(SubjectType.GROUP, group.getKey());\n+        }\n+\n         List<Group> ownedGroups = groupDAO.findOwnedByGroup(groupKey);\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n@@ -290,26 +253,6 @@ public String transform(final Group group) {\n         return groupTO;\n     }\n \n-    @PreAuthorize(\"(hasRole('GROUP_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE)\")\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        BulkActionResult res = new BulkActionResult();\n-\n-        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n-            for (String groupKey : bulkAction.getTargets()) {\n-                try {\n-                    res.add(delete(Long.valueOf(groupKey)).getKey(), BulkActionResult.Status.SUCCESS);\n-                } catch (Exception e) {\n-                    LOG.error(\"Error performing delete for group {}\", groupKey, e);\n-                    res.add(groupKey, BulkActionResult.Status.FAILURE);\n-                }\n-            }\n-        } else {\n-            LOG.warn(\"Unsupported bulk action: {}\", bulkAction.getOperation());\n-        }\n-\n-        return res;\n-    }\n-\n     @PreAuthorize(\"hasRole('GROUP_UPDATE')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n@@ -362,7 +305,7 @@ public GroupTO deprovision(final Long groupKey, final Collection<String> resourc\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(groupKey, resources);\n \n-        final GroupTO updatedTO = binder.getGroupTO(group);\n+        GroupTO updatedTO = binder.getGroupTO(group);\n         updatedTO.getPropagationStatusTOs().addAll(statuses);\n         return updatedTO;\n     }\n@@ -372,7 +315,7 @@ public GroupTO deprovision(final Long groupKey, final Collection<String> resourc\n     @Override\n     public GroupTO provision(\n             final Long groupKey, final Collection<String> resources, final boolean changePwd, final String password) {\n-        final GroupTO original = binder.getGroupTO(groupKey);\n+        GroupTO original = binder.getGroupTO(groupKey);\n \n         //trick: assign and retrieve propagation statuses ...\n         original.getPropagationStatusTOs().addAll("},{"sha":"a315bb4218a709eb1b68c1b3dcc394071178dd0d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":15,"deletions":18,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -222,29 +222,26 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n \n     @PreAuthorize(\"hasRole('AUDIT_LIST') or hasRole('NOTIFICATION_LIST')\")\n     public List<EventCategoryTO> listAuditEvents() {\n-        // use set to avoi duplications or null elements\n-        final Set<EventCategoryTO> events = new HashSet<>();\n+        // use set to avoid duplications or null elements\n+        Set<EventCategoryTO> events = new HashSet<>();\n \n         try {\n-            final ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n-            final MetadataReaderFactory metadataReaderFactory =\n-                    new CachingMetadataReaderFactory(resourcePatternResolver);\n+            ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n+            MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(resourcePatternResolver);\n \n-            final String packageSearchPath =\n-                    ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n+            String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n                     + ClassUtils.convertClassNameToResourcePath(\n                             SystemPropertyUtils.resolvePlaceholders(this.getClass().getPackage().getName()))\n-                    + \"/\" + \"**/*.class\";\n+                    + \"/**/*.class\";\n \n-            final Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);\n+            Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);\n             for (Resource resource : resources) {\n                 if (resource.isReadable()) {\n                     final MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);\n                     final Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n \n-                    if (clazz.isAnnotationPresent(Component.class)\n-                            && AbstractLogic.class.isAssignableFrom(clazz)) {\n-                        final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+                    if (clazz.isAnnotationPresent(Component.class) && AbstractLogic.class.isAssignableFrom(clazz)) {\n+                        EventCategoryTO eventCategoryTO = new EventCategoryTO();\n                         eventCategoryTO.setCategory(clazz.getSimpleName());\n                         for (Method method : clazz.getDeclaredMethods()) {\n                             if (Modifier.isPublic(method.getModifiers())) {\n@@ -257,7 +254,7 @@ public List<EventCategoryTO> listAuditEvents() {\n             }\n \n             //SYNCOPE-608\n-            final EventCategoryTO authenticationControllerEvents = new EventCategoryTO();\n+            EventCategoryTO authenticationControllerEvents = new EventCategoryTO();\n             authenticationControllerEvents.setCategory(\"AuthenticationController\");\n             authenticationControllerEvents.getEvents().add(\"login\");\n             events.add(authenticationControllerEvents);\n@@ -268,9 +265,9 @@ public List<EventCategoryTO> listAuditEvents() {\n \n             for (AttributableType attributableType : AttributableType.values()) {\n                 for (ExternalResource resource : resourceDAO.findAll()) {\n-                    final EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n-                    final EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.SYNCHRONIZATION);\n-                    final EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);\n+                    EventCategoryTO propEventCategoryTO = new EventCategoryTO(EventCategoryType.PROPAGATION);\n+                    EventCategoryTO syncEventCategoryTO = new EventCategoryTO(EventCategoryType.SYNCHRONIZATION);\n+                    EventCategoryTO pushEventCategoryTO = new EventCategoryTO(EventCategoryType.PUSH);\n \n                     propEventCategoryTO.setCategory(attributableType.name().toLowerCase());\n                     propEventCategoryTO.setSubcategory(resource.getKey());\n@@ -305,13 +302,13 @@ public List<EventCategoryTO> listAuditEvents() {\n             }\n \n             for (SchedTask task : taskDAO.<SchedTask>findAll(TaskType.SCHEDULED)) {\n-                final EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+                EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n                 eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n                 events.add(eventCategoryTO);\n             }\n \n             for (SyncTask task : taskDAO.<SyncTask>findAll(TaskType.SYNCHRONIZATION)) {\n-                final EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n+                EventCategoryTO eventCategoryTO = new EventCategoryTO(EventCategoryType.TASK);\n                 eventCategoryTO.setCategory(Class.forName(task.getJobClassName()).getSimpleName());\n                 events.add(eventCategoryTO);\n             }"},{"sha":"92be74bf7632d074298dbd191ff0d6e6c8413ed4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":1,"deletions":33,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -101,36 +101,6 @@ public T transform(final Policy input) {\n         }, new ArrayList<T>());\n     }\n \n-    @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    public PasswordPolicyTO getGlobalPasswordPolicy() {\n-        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n-        if (policy == null) {\n-            throw new NotFoundException(\"No password policy found\");\n-        }\n-\n-        return (PasswordPolicyTO) binder.getPolicyTO(policy);\n-    }\n-\n-    @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    public AccountPolicyTO getGlobalAccountPolicy() {\n-        AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n-        if (policy == null) {\n-            throw new NotFoundException(\"No account policy found\");\n-        }\n-\n-        return (AccountPolicyTO) binder.getPolicyTO(policy);\n-    }\n-\n-    @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    public SyncPolicyTO getGlobalSyncPolicy() {\n-        SyncPolicy policy = policyDAO.getGlobalSyncPolicy();\n-        if (policy == null) {\n-            throw new NotFoundException(\"No sync policy found\");\n-        }\n-\n-        return (SyncPolicyTO) binder.getPolicyTO(policy);\n-    }\n-\n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     public <T extends AbstractPolicyTO> T read(final Long id) {\n         Policy policy = policyDAO.find(id);\n@@ -154,12 +124,10 @@ public <T extends AbstractPolicyTO> T delete(final Long id) {\n         return policyToDelete;\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     protected AbstractPolicyTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n+\n         Long id = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {"},{"sha":"3148d190f7aaead2e97be224b08f8f2d8c7d382e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":12,"deletions":32,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,8 +27,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -39,17 +37,17 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n-import org.apache.syncope.core.misc.MappingUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n+import org.apache.syncope.core.misc.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -77,13 +75,13 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     private ResourceDataBinder binder;\n \n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    private ConnObjectUtils connObjectUtils;\n \n     @Autowired\n     private ConnectorFactory connFactory;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n@@ -184,21 +182,21 @@ public ConnObjectTO getConnectorObject(final String resourceName, final SubjectT\n             throw new NotFoundException(type + \" \" + id);\n         }\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(type.asAttributableType());\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n \n-        MappingItem accountIdItem = attrUtil.getAccountIdItem(resource);\n+        MappingItem accountIdItem = attrUtils.getAccountIdItem(resource);\n         if (accountIdItem == null) {\n             throw new NotFoundException(\n                     \"AccountId mapping for \" + type + \" \" + id + \" on resource '\" + resourceName + \"'\");\n         }\n-        final String accountIdValue = MappingUtil.getAccountIdValue(\n-                subject, resource, attrUtil.getAccountIdItem(resource));\n+        final String accountIdValue = MappingUtils.getAccountIdValue(\n+                subject, resource, attrUtils.getAccountIdItem(resource));\n \n         final ObjectClass objectClass = SubjectType.USER == type ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n \n         final Connector connector = connFactory.getConnector(resource);\n         final ConnectorObject connectorObject = connector.getObject(objectClass, new Uid(accountIdValue),\n-                connector.getOperationOptions(attrUtil.getMappingItems(resource, MappingPurpose.BOTH)));\n+                connector.getOperationOptions(attrUtils.getMappingItems(resource, MappingPurpose.BOTH)));\n         if (connectorObject == null) {\n             throw new NotFoundException(\"Object \" + accountIdValue + \" with class \" + objectClass\n                     + \"not found on resource \" + resourceName);\n@@ -212,7 +210,7 @@ public ConnObjectTO getConnectorObject(final String resourceName, final SubjectT\n             attributes.add(connectorObject.getName());\n         }\n \n-        return connObjectUtil.getConnObjectTO(connectorObject);\n+        return connObjectUtils.getConnObjectTO(connectorObject);\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n@@ -234,24 +232,6 @@ public boolean check(final ResourceTO resourceTO) {\n         return result;\n     }\n \n-    @PreAuthorize(\"hasRole('RESOURCE_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE\")\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        BulkActionResult res = new BulkActionResult();\n-\n-        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n-            for (String name : bulkAction.getTargets()) {\n-                try {\n-                    res.add(delete(name).getKey(), BulkActionResult.Status.SUCCESS);\n-                } catch (Exception e) {\n-                    LOG.error(\"Error performing delete for resource {}\", name, e);\n-                    res.add(name, BulkActionResult.Status.FAILURE);\n-                }\n-            }\n-        }\n-\n-        return res;\n-    }\n-\n     @Override\n     protected ResourceTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"1ced7a03e3950b967a82150831324ecde81752f5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":40,"deletions":41,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -38,8 +38,8 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -64,22 +64,22 @@ public class SchemaLogic extends AbstractTransactionalLogic<AbstractSchemaTO> {\n     private SchemaDataBinder binder;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n-    private boolean doesSchemaExist(final SchemaType schemaType, final String name, final AttributableUtil attrUtil) {\n+    private boolean doesSchemaExist(final SchemaType schemaType, final String name, final AttributableUtils attrUtils) {\n         boolean found;\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                found = virSchemaDAO.find(name, attrUtil.virSchemaClass()) != null;\n+                found = virSchemaDAO.find(name, attrUtils.virSchemaClass()) != null;\n                 break;\n \n             case DERIVED:\n-                found = derSchemaDAO.find(name, attrUtil.derSchemaClass()) != null;\n+                found = derSchemaDAO.find(name, attrUtils.derSchemaClass()) != null;\n                 break;\n \n             case PLAIN:\n-                found = plainSchemaDAO.find(name, attrUtil.plainSchemaClass()) != null;\n+                found = plainSchemaDAO.find(name, attrUtils.plainSchemaClass()) != null;\n                 break;\n \n             default:\n@@ -100,22 +100,21 @@ public <T extends AbstractSchemaTO> T create(\n             throw sce;\n         }\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(attrType);\n-\n-        if (doesSchemaExist(schemaType, schemaTO.getKey(), attrUtil)) {\n-            throw new DuplicateException(schemaType + \"/\" + attrType + \"/\" + schemaTO.getKey());\n+        AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n+        if (doesSchemaExist(schemaType, schemaTO.getKey(), attrUtils)) {\n+            throw new DuplicateException(attrType + \"/\" + schemaType + \"/\" + schemaTO.getKey());\n         }\n \n         T created;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = attrUtil.newVirSchema();\n+                VirSchema virSchema = attrUtils.newVirSchema();\n                 binder.create((VirSchemaTO) schemaTO, virSchema);\n                 virSchema = virSchemaDAO.save(virSchema);\n                 created = (T) binder.getVirSchemaTO(virSchema);\n                 break;\n             case DERIVED:\n-                DerSchema derSchema = attrUtil.newDerSchema();\n+                DerSchema derSchema = attrUtils.newDerSchema();\n                 binder.create((DerSchemaTO) schemaTO, derSchema);\n                 derSchema = derSchemaDAO.save(derSchema);\n \n@@ -124,47 +123,47 @@ public <T extends AbstractSchemaTO> T create(\n \n             case PLAIN:\n             default:\n-                PlainSchema normalSchema = attrUtil.newPlainSchema();\n+                PlainSchema normalSchema = attrUtils.newPlainSchema();\n                 binder.create((PlainSchemaTO) schemaTO, normalSchema);\n                 normalSchema = plainSchemaDAO.save(normalSchema);\n \n-                created = (T) binder.getPlainSchemaTO(normalSchema, attrUtil);\n+                created = (T) binder.getPlainSchemaTO(normalSchema, attrUtils);\n         }\n         return created;\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n     public void delete(final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(attrType);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n \n-        if (!doesSchemaExist(schemaType, schemaName, attrUtil)) {\n+        if (!doesSchemaExist(schemaType, schemaName, attrUtils)) {\n             throw new NotFoundException(schemaType + \"/\" + attrType + \"/\" + schemaName);\n         }\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                virSchemaDAO.delete(schemaName, attrUtil);\n+                virSchemaDAO.delete(schemaName, attrUtils);\n                 break;\n \n             case DERIVED:\n-                derSchemaDAO.delete(schemaName, attrUtil);\n+                derSchemaDAO.delete(schemaName, attrUtils);\n                 break;\n \n             case PLAIN:\n             default:\n-                plainSchemaDAO.delete(schemaName, attrUtil);\n+                plainSchemaDAO.delete(schemaName, attrUtils);\n         }\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractSchemaTO> List<T> list(final AttributableType attrType, final SchemaType schemaType) {\n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(attrType);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n \n         List<T> result;\n         switch (schemaType) {\n             case VIRTUAL:\n-                result = CollectionUtils.collect(virSchemaDAO.findAll(attrUtil.virSchemaClass()),\n+                result = CollectionUtils.collect(virSchemaDAO.findAll(attrUtils.virSchemaClass()),\n                         new Transformer<VirSchema, T>() {\n \n                             @Override\n@@ -175,7 +174,7 @@ public T transform(final VirSchema input) {\n                 break;\n \n             case DERIVED:\n-                result = CollectionUtils.collect(derSchemaDAO.findAll(attrUtil.derSchemaClass()),\n+                result = CollectionUtils.collect(derSchemaDAO.findAll(attrUtils.derSchemaClass()),\n                         new Transformer<DerSchema, T>() {\n \n                             @Override\n@@ -187,12 +186,12 @@ public T transform(final DerSchema input) {\n \n             case PLAIN:\n             default:\n-                result = CollectionUtils.collect(plainSchemaDAO.findAll(attrUtil.plainSchemaClass()),\n+                result = CollectionUtils.collect(plainSchemaDAO.findAll(attrUtils.plainSchemaClass()),\n                         new Transformer<PlainSchema, T>() {\n \n                             @Override\n                             public T transform(final PlainSchema input) {\n-                                return (T) binder.getPlainSchemaTO(input, attrUtil);\n+                                return (T) binder.getPlainSchemaTO(input, attrUtils);\n                             }\n                         }, new ArrayList<T>());\n         }\n@@ -205,12 +204,12 @@ public T transform(final PlainSchema input) {\n     public <T extends AbstractSchemaTO> T read(\n             final AttributableType attrType, final SchemaType schemaType, final String schemaName) {\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(attrType);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n \n         T read;\n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.find(schemaName, attrUtil.virSchemaClass());\n+                VirSchema virSchema = virSchemaDAO.find(schemaName, attrUtils.virSchemaClass());\n                 if (virSchema == null) {\n                     throw new NotFoundException(\"Virtual Schema '\" + schemaName + \"'\");\n                 }\n@@ -219,7 +218,7 @@ public <T extends AbstractSchemaTO> T read(\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n+                DerSchema derSchema = derSchemaDAO.find(schemaName, attrUtils.derSchemaClass());\n                 if (derSchema == null) {\n                     throw new NotFoundException(\"Derived schema '\" + schemaName + \"'\");\n                 }\n@@ -229,12 +228,12 @@ public <T extends AbstractSchemaTO> T read(\n \n             case PLAIN:\n             default:\n-                PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtil.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtils.plainSchemaClass());\n                 if (schema == null) {\n                     throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n                 }\n \n-                read = (T) binder.getPlainSchemaTO(schema, attrUtil);\n+                read = (T) binder.getPlainSchemaTO(schema, attrUtils);\n         }\n \n         return read;\n@@ -244,15 +243,15 @@ public <T extends AbstractSchemaTO> T read(\n     public <T extends AbstractSchemaTO> void update(\n             final AttributableType attrType, final SchemaType schemaType, final T schemaTO) {\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(attrType);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(attrType);\n \n-        if (!doesSchemaExist(schemaType, schemaTO.getKey(), attrUtil)) {\n+        if (!doesSchemaExist(schemaType, schemaTO.getKey(), attrUtils)) {\n             throw new NotFoundException(schemaType + \"/\" + attrType + \"/\" + schemaTO.getKey());\n         }\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                VirSchema virSchema = virSchemaDAO.find(schemaTO.getKey(), attrUtil.virSchemaClass());\n+                VirSchema virSchema = virSchemaDAO.find(schemaTO.getKey(), attrUtils.virSchemaClass());\n                 if (virSchema == null) {\n                     throw new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + \"'\");\n                 }\n@@ -262,7 +261,7 @@ public <T extends AbstractSchemaTO> void update(\n                 break;\n \n             case DERIVED:\n-                DerSchema derSchema = derSchemaDAO.find(schemaTO.getKey(), attrUtil.derSchemaClass());\n+                DerSchema derSchema = derSchemaDAO.find(schemaTO.getKey(), attrUtils.derSchemaClass());\n                 if (derSchema == null) {\n                     throw new NotFoundException(\"Derived schema '\" + schemaTO.getKey() + \"'\");\n                 }\n@@ -273,12 +272,12 @@ public <T extends AbstractSchemaTO> void update(\n \n             case PLAIN:\n             default:\n-                PlainSchema schema = plainSchemaDAO.find(schemaTO.getKey(), attrUtil.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(schemaTO.getKey(), attrUtils.plainSchemaClass());\n                 if (schema == null) {\n                     throw new NotFoundException(\"Schema '\" + schemaTO.getKey() + \"'\");\n                 }\n \n-                binder.update((PlainSchemaTO) schemaTO, schema, attrUtil);\n+                binder.update((PlainSchemaTO) schemaTO, schema, attrUtils);\n                 plainSchemaDAO.save(schema);\n         }\n     }\n@@ -305,23 +304,23 @@ protected AbstractSchemaTO resolveReference(final Method method, final Object...\n \n         if (key != null) {\n             try {\n-                final AttributableUtil attrUtil = attrUtilFactory.getInstance(kind);\n+                final AttributableUtils attrUtils = attrUtilsFactory.getInstance(kind);\n \n                 AbstractSchemaTO result = null;\n \n-                PlainSchema plainSchema = plainSchemaDAO.find(key, attrUtil.plainSchemaClass());\n+                PlainSchema plainSchema = plainSchemaDAO.find(key, attrUtils.plainSchemaClass());\n                 if (plainSchema == null) {\n-                    DerSchema derSchema = derSchemaDAO.find(key, attrUtil.derSchemaClass());\n+                    DerSchema derSchema = derSchemaDAO.find(key, attrUtils.derSchemaClass());\n                     if (derSchema == null) {\n-                        VirSchema virSchema = virSchemaDAO.find(key, attrUtil.virSchemaClass());\n+                        VirSchema virSchema = virSchemaDAO.find(key, attrUtils.virSchemaClass());\n                         if (virSchema != null) {\n                             result = binder.getVirSchemaTO(virSchema);\n                         }\n                     } else {\n                         result = binder.getDerSchemaTO(derSchema);\n                     }\n                 } else {\n-                    result = binder.getPlainSchemaTO(plainSchema, attrUtil);\n+                    result = binder.getPlainSchemaTO(plainSchema, attrUtils);\n                 }\n \n                 return result;"},{"sha":"6963dbe003dfdb1a0f32fafcbdfc32130ae79366","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -105,7 +105,7 @@ public SecurityQuestionTO delete(final Long securityQuestionId) {\n         return deleted;\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n     public SecurityQuestionTO read(final String username) {\n         if (username == null) {\n             throw new NotFoundException(\"Null username\");"},{"sha":"09c606a02c3dabf1287ea1223fcaa971dadd8f1a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.java.notification.NotificationManagerImpl;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n@@ -70,6 +71,9 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     @Autowired\n     private GroupProvisioningManager gProvisioningManager;\n \n+    @Autowired\n+    private VirAttrCache virAttrCache;\n+\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n@@ -114,6 +118,7 @@ public SyncopeTO info() {\n \n         syncopeTO.setUserProvisioningManager(uProvisioningManager.getClass().getName());\n         syncopeTO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n+        syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());\n \n         syncopeTO.getReportlets().addAll(\n                 classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET));"},{"sha":"168e30651f26f804f26ba2effb2e826fc8565d64","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":23,"deletions":74,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,8 +27,6 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n@@ -45,8 +43,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtil;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.job.TaskJob;\n@@ -86,13 +84,13 @@ public class TaskLogic extends AbstractTransactionalLogic<AbstractTaskTO> {\n     private SchedulerFactoryBean scheduler;\n \n     @Autowired\n-    private TaskUtilFactory taskUtilFactory;\n+    private TaskUtilsFactory taskUtilsFactory;\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n-        TaskUtil taskUtil = taskUtilFactory.getInstance(taskTO);\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(taskTO);\n \n-        SchedTask task = binder.createSchedTask(taskTO, taskUtil);\n+        SchedTask task = binder.createSchedTask(taskTO, taskUtils);\n         task = taskDAO.save(task);\n \n         try {\n@@ -105,7 +103,7 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n             throw sce;\n         }\n \n-        return binder.getTaskTO(task, taskUtil);\n+        return binder.getTaskTO(task, taskUtils);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n@@ -120,9 +118,9 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n             throw new NotFoundException(\"Task \" + taskTO.getKey());\n         }\n \n-        TaskUtil taskUtil = taskUtilFactory.getInstance(task);\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n-        binder.updateSchedTask(task, taskTO, taskUtil);\n+        binder.updateSchedTask(task, taskTO, taskUtils);\n         task = taskDAO.save(task);\n \n         try {\n@@ -135,7 +133,7 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n             throw sce;\n         }\n \n-        return binder.getTaskTO(task, taskUtil);\n+        return binder.getTaskTO(task, taskUtils);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n@@ -148,14 +146,14 @@ public int count(final TaskType taskType) {\n     public <T extends AbstractTaskTO> List<T> list(final TaskType taskType,\n             final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        final TaskUtil taskUtil = taskUtilFactory.getInstance(taskType);\n+        final TaskUtils taskUtilss = taskUtilsFactory.getInstance(taskType);\n \n         return CollectionUtils.collect(taskDAO.findAll(page, size, orderByClauses, taskType),\n                 new Transformer<Task, T>() {\n \n                     @Override\n                     public T transform(final Task task) {\n-                        return (T) binder.getTaskTO(task, taskUtil);\n+                        return (T) binder.getTaskTO(task, taskUtilss);\n                     }\n                 }, new ArrayList<T>());\n     }\n@@ -166,7 +164,7 @@ public <T extends AbstractTaskTO> T read(final Long taskId) {\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        return binder.getTaskTO(task, taskUtilFactory.getInstance(task));\n+        return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n@@ -184,10 +182,10 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = taskUtilFactory.getInstance(task);\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n         TaskExecTO result = null;\n-        switch (taskUtil.getType()) {\n+        switch (taskUtils.getType()) {\n             case PROPAGATION:\n                 final TaskExec propExec = taskExecutor.execute((PropagationTask) task);\n                 result = binder.getTaskExecTO(propExec);\n@@ -241,14 +239,14 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPropagationTaskExecReport);\n \n-        TaskUtil taskUtil = taskUtilFactory.getInstance(exec.getTask());\n-        if (TaskType.PROPAGATION == taskUtil.getType()) {\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(exec.getTask());\n+        if (TaskType.PROPAGATION == taskUtils.getType()) {\n             PropagationTask task = (PropagationTask) exec.getTask();\n             if (task.getPropagationMode() != PropagationMode.TWO_PHASES) {\n                 sce.getElements().add(\"Propagation mode: \" + task.getPropagationMode());\n             }\n         } else {\n-            sce.getElements().add(\"Task type: \" + taskUtil);\n+            sce.getElements().add(\"Task type: \" + taskUtils);\n         }\n \n         switch (status) {\n@@ -280,13 +278,13 @@ public <T extends AbstractTaskTO> T delete(final Long taskId) {\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n-        TaskUtil taskUtil = taskUtilFactory.getInstance(task);\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n \n-        T taskToDelete = binder.getTaskTO(task, taskUtil);\n+        T taskToDelete = binder.getTaskTO(task, taskUtils);\n \n-        if (TaskType.SCHEDULED == taskUtil.getType()\n-                || TaskType.SYNCHRONIZATION == taskUtil.getType()\n-                || TaskType.PUSH == taskUtil.getType()) {\n+        if (TaskType.SCHEDULED == taskUtils.getType()\n+                || TaskType.SYNCHRONIZATION == taskUtils.getType()\n+                || TaskType.PUSH == taskUtils.getType()) {\n \n             jobInstanceLoader.unregisterJob(task);\n         }\n@@ -307,55 +305,6 @@ public TaskExecTO deleteExecution(final Long executionId) {\n         return taskExecutionToDelete;\n     }\n \n-    @PreAuthorize(\"(hasRole('TASK_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE) or \"\n-            + \"(hasRole('TASK_EXECUTE') and \"\n-            + \"(#bulkAction.operation == #bulkAction.operation.EXECUTE or \"\n-            + \"#bulkAction.operation == #bulkAction.operation.DRYRUN))\")\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        BulkActionResult res = new BulkActionResult();\n-\n-        switch (bulkAction.getOperation()) {\n-            case DELETE:\n-                for (String taskId : bulkAction.getTargets()) {\n-                    try {\n-                        res.add(delete(Long.valueOf(taskId)).getKey(), BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing delete for task {}\", taskId, e);\n-                        res.add(taskId, BulkActionResult.Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            case DRYRUN:\n-                for (String taskId : bulkAction.getTargets()) {\n-                    try {\n-                        execute(Long.valueOf(taskId), true);\n-                        res.add(taskId, BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing dryrun for task {}\", taskId, e);\n-                        res.add(taskId, BulkActionResult.Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            case EXECUTE:\n-                for (String taskId : bulkAction.getTargets()) {\n-                    try {\n-                        execute(Long.valueOf(taskId), false);\n-                        res.add(taskId, BulkActionResult.Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing execute for task {}\", taskId, e);\n-                        res.add(taskId, BulkActionResult.Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            default:\n-        }\n-\n-        return res;\n-    }\n-\n     @Override\n     protected AbstractTaskTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n@@ -377,7 +326,7 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n         if ((key != null) && !key.equals(0L)) {\n             try {\n                 final Task task = taskDAO.find(key);\n-                return binder.getTaskTO(task, taskUtilFactory.getInstance(task));\n+                return binder.getTaskTO(task, taskUtilsFactory.getInstance(task));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"4929d621ede0585cd8ef7943a7599b78496b2c51","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":47,"deletions":100,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n import java.lang.reflect.Method;\n import java.security.AccessControlException;\n import java.util.ArrayList;\n@@ -30,19 +29,17 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n-import org.apache.syncope.common.lib.to.BulkAction;\n-import org.apache.syncope.common.lib.to.BulkActionResult;\n-import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n@@ -57,7 +54,9 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -114,25 +113,20 @@ public Long getKey(final String username) {\n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n-    public int count() {\n-        return userDAO.count(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames()));\n+    public int count(final List<String> realms) {\n+        return userDAO.count(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_LIST), realms));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n-    public int searchCount(final SearchCond searchCondition) {\n-        return searchDAO.count(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames()),\n-                searchCondition, SubjectType.USER);\n-    }\n-\n-    @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    @Override\n-    public List<UserTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n-        final Set<Long> adminGroupKeys = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n+    public List<UserTO> list(\n+            final int page, final int size, final List<OrderByClause> orderBy, final List<String> realms) {\n \n-        return CollectionUtils.collect(userDAO.findAll(adminGroupKeys, page, size, orderBy),\n+        return CollectionUtils.collect(userDAO.findAll(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_LIST), realms),\n+                page, size, orderBy),\n                 new Transformer<User, UserTO>() {\n \n                     @Override\n@@ -142,11 +136,12 @@ public UserTO transform(final User input) {\n                 }, new ArrayList<UserTO>());\n     }\n \n-    @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n+    @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public UserTO readSelf() {\n-        return binder.getAuthenticatedUserTO();\n+    public Pair<String, UserTO> readSelf() {\n+        return ImmutablePair.of(\n+                POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n+                binder.getAuthenticatedUserTO());\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n@@ -156,14 +151,23 @@ public UserTO read(final Long key) {\n         return binder.getUserTO(key);\n     }\n \n-    @PreAuthorize(\"hasRole('USER_LIST')\")\n-    @Transactional(readOnly = true)\n+    @PreAuthorize(\"hasRole('USER_SEARCH')\")\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n+    public int searchCount(final SearchCond searchCondition, final List<String> realms) {\n+        return searchDAO.count(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n+                searchCondition, SubjectType.USER);\n+    }\n+\n+    @PreAuthorize(\"hasRole('USER_SEARCH')\")\n+    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n     @Override\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n-            final List<OrderByClause> orderBy) {\n+            final List<OrderByClause> orderBy, final List<String> realms) {\n \n-        final List<User> matchingUsers = searchDAO.search(GroupEntitlementUtil.getGroupKeys(AuthContextUtil.\n-                getOwnedEntitlementNames()),\n+        final List<User> matchingUsers = searchDAO.search(\n+                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(Entitlement.USER_SEARCH), realms),\n                 searchCondition, page, size, orderBy, SubjectType.USER);\n         return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n \n@@ -174,24 +178,22 @@ public UserTO transform(final User input) {\n         }, new ArrayList<UserTO>());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n     public UserTO createSelf(final UserTO userTO, final boolean storePassword) {\n         return doCreate(userTO, storePassword);\n     }\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     public UserTO create(final UserTO userTO, final boolean storePassword) {\n-        Collection<Long> requestGroupIds = CollectionUtils.removeAll(\n-                CollectionUtils.collect(userTO.getMemberships(), new Transformer<MembershipTO, Long>() {\n-\n-                    @Override\n-                    public Long transform(final MembershipTO membership) {\n-                        return membership.getGroupId();\n-                    }\n-                }, new ArrayList<Long>()),\n-                GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames()));\n-        if (!requestGroupIds.isEmpty()) {\n-            throw new UnauthorizedGroupException(requestGroupIds);\n+        if (userTO.getRealm() == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            throw sce;\n+        }\n+        Set<String> effectiveRealms = getEffectiveRealms(\n+                AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n+                Collections.singleton(userTO.getRealm()));\n+        if (effectiveRealms.isEmpty()) {\n+            throw new UnauthorizedException(SubjectType.USER, null);\n         }\n \n         return doCreate(userTO, storePassword);\n@@ -209,8 +211,7 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('ANONYMOUS'))\")\n     public UserTO updateSelf(final UserMod userMod) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n \n@@ -284,7 +285,7 @@ public UserTO status(final StatusMod statusMod) {\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n     @Transactional\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         if (username == null) {\n@@ -305,7 +306,7 @@ public void requestPasswordReset(final String username, final String securityAns\n         provisioningManager.requestPasswordReset(user.getKey());\n     }\n \n-    @PreAuthorize(\"isAnonymous() or hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n+    @PreAuthorize(\"isAnonymous() or hasRole('ANONYMOUS')\")\n     @Transactional\n     public void confirmPasswordReset(final String token, final String password) {\n         User user = userDAO.findByToken(token);\n@@ -315,8 +316,7 @@ public void confirmPasswordReset(final String token, final String password) {\n         provisioningManager.confirmPasswordReset(user, token, password);\n     }\n \n-    @PreAuthorize(\"isAuthenticated() \"\n-            + \"and not(hasRole(T(org.apache.syncope.common.lib.SyncopeConstants).ANONYMOUS_ENTITLEMENT))\")\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('ANONYMOUS'))\")\n     public UserTO deleteSelf() {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n \n@@ -354,59 +354,6 @@ public String transform(final Group group) {\n         return deletedTO;\n     }\n \n-    @PreAuthorize(\"(hasRole('USER_DELETE') and #bulkAction.operation == #bulkAction.operation.DELETE) or \"\n-            + \"(hasRole('USER_UPDATE') and \"\n-            + \"(#bulkAction.operation == #bulkAction.operation.REACTIVATE or \"\n-            + \"#bulkAction.operation == #bulkAction.operation.SUSPEND))\")\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        BulkActionResult res = new BulkActionResult();\n-\n-        switch (bulkAction.getOperation()) {\n-            case DELETE:\n-                for (String key : bulkAction.getTargets()) {\n-                    try {\n-                        res.add(delete(Long.valueOf(key)).getKey(), Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing delete for user {}\", key, e);\n-                        res.add(key, Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            case SUSPEND:\n-                for (String key : bulkAction.getTargets()) {\n-                    StatusMod statusMod = new StatusMod();\n-                    statusMod.setKey(Long.valueOf(key));\n-                    statusMod.setType(StatusMod.ModType.SUSPEND);\n-                    try {\n-                        res.add(status(statusMod).getKey(), Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing suspend for user {}\", key, e);\n-                        res.add(key, Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            case REACTIVATE:\n-                for (String key : bulkAction.getTargets()) {\n-                    StatusMod statusMod = new StatusMod();\n-                    statusMod.setKey(Long.valueOf(key));\n-                    statusMod.setType(StatusMod.ModType.REACTIVATE);\n-                    try {\n-                        res.add(status(statusMod).getKey(), Status.SUCCESS);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error performing reactivate for user {}\", key, e);\n-                        res.add(key, Status.FAILURE);\n-                    }\n-                }\n-                break;\n-\n-            default:\n-        }\n-\n-        return res;\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override"},{"sha":"69c95f006a7bfce7d9acf428596a429e25e0af27","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.AbstractMap;\n import java.util.List;\n-import java.util.Map;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -70,9 +70,9 @@ public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         UserMod userMod = new UserMod();\n         userMod.setKey(userTO.getKey());\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                        new AbstractMap.SimpleEntry<UserMod, Boolean>(userMod, null),\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                new WorkflowResult<Pair<UserMod, Boolean>>(\n+                        new ImmutablePair<UserMod, Boolean>(userMod, null),\n                         updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n@@ -110,9 +110,9 @@ public UserTO submitForm(final WorkflowFormTO form) {\n         if (updated.getResult() instanceof UserMod\n                 && updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n \n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                    new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                            new AbstractMap.SimpleEntry<>((UserMod) updated.getResult(), Boolean.TRUE),\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                    new WorkflowResult<Pair<UserMod, Boolean>>(\n+                            new ImmutablePair<>((UserMod) updated.getResult(), Boolean.TRUE),\n                             updated.getPropByRes(),\n                             updated.getPerformedTasks()));\n "},{"sha":"9e40ff1874dcc8dd823c3cca0a4afaad46f2524e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJob.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.ExceptionUtil;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n@@ -186,7 +186,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n \n                     execution.setStatus(Status.NOT_SENT.name());\n                     if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-                        execution.setMessage(ExceptionUtil.getFullStackTrace(e));\n+                        execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n                     }\n \n                     auditManager.audit("},{"sha":"d564335fe68eb458a002a28ac4cac45a6ad37dbb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":10,"deletions":30,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,17 +22,15 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.GroupReportletConf;\n import org.apache.syncope.common.lib.report.GroupReportletConf.Feature;\n import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -50,9 +48,6 @@ public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n \n     private static final int PAGE_SIZE = 10;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n     @Autowired\n     private GroupDAO groupDAO;\n \n@@ -62,25 +57,24 @@ public class GroupReportlet extends AbstractReportlet<GroupReportletConf> {\n     @Autowired\n     private GroupDataBinder groupDataBinder;\n \n-    private List<Group> getPagedgroups(final int page) {\n-        final Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll());\n-        final List<Group> result;\n+    private List<Group> getPagedGroups(final int page) {\n+        List<Group> result;\n+\n         if (StringUtils.isBlank(conf.getMatchingCond())) {\n-            result = groupDAO.findAll();\n+            result = groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE);\n         } else {\n-            result = searchDAO.search(adminGroupIds, SearchCondConverter.convert(conf.getMatchingCond()),\n+            result = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                    SearchCondConverter.convert(conf.getMatchingCond()),\n                     page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), SubjectType.GROUP);\n         }\n \n         return result;\n     }\n \n     private int count() {\n-        Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll());\n-\n         return StringUtils.isBlank(conf.getMatchingCond())\n-                ? groupDAO.findAll().size()\n-                : searchDAO.count(adminGroupIds,\n+                ? groupDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n+                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n                         SearchCondConverter.convert(conf.getMatchingCond()), SubjectType.GROUP);\n     }\n \n@@ -236,20 +230,6 @@ private void doExtract(final ContentHandler handler, final List<Group> groups)\n \n             doExtractAttributes(handler, groupTO, conf.getPlainAttrs(), conf.getDerAttrs(), conf.getVirAttrs());\n \n-            if (conf.getFeatures().contains(Feature.entitlements)) {\n-                handler.startElement(\"\", \"\", \"entitlements\", null);\n-\n-                for (String ent : groupTO.getEntitlements()) {\n-                    atts.clear();\n-\n-                    atts.addAttribute(\"\", \"\", \"id\", ReportXMLConst.XSD_STRING, String.valueOf(ent));\n-\n-                    handler.startElement(\"\", \"\", \"entitlement\", atts);\n-                    handler.endElement(\"\", \"\", \"entitlement\");\n-                }\n-\n-                handler.endElement(\"\", \"\", \"entitlements\");\n-            }\n             // to get resources associated to a group\n             if (conf.getFeatures().contains(Feature.resources)) {\n                 doExtractResources(handler, groupTO);\n@@ -322,7 +302,7 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n     protected void doExtract(final ContentHandler handler) throws SAXException, ReportException {\n         doExtractConf(handler);\n         for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n-            doExtract(handler, getPagedgroups(i));\n+            doExtract(handler, getPagedGroups(i));\n         }\n     }\n }"},{"sha":"e07612a5ef24cb9f67ea93cb8a1f035fda2a7c3f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJob.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJob.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.misc.ExceptionUtil;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n@@ -167,7 +167,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                                 ? e.getCause()\n                                 : e;\n                         reportExecutionMessage.\n-                                append(ExceptionUtil.getFullStackTrace(t)).\n+                                append(ExceptionUtils2.getFullStackTrace(t)).\n                                 append(\"\\n==================\\n\");\n                     }\n                 }\n@@ -182,7 +182,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n             }\n         } catch (Exception e) {\n             execution.setStatus(ReportExecStatus.FAILURE);\n-            reportExecutionMessage.append(ExceptionUtil.getFullStackTrace(e));\n+            reportExecutionMessage.append(ExceptionUtils2.getFullStackTrace(e));\n \n             throw new JobExecutionException(e, true);\n         } finally {"},{"sha":"02976f6f118bc56449721d763b276118f18904e4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,8 +22,8 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf.Feature;\n import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n@@ -32,8 +32,6 @@\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -53,9 +51,6 @@ public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n \n     private static final int PAGE_SIZE = 10;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -69,25 +64,24 @@ public class UserReportlet extends AbstractReportlet<UserReportletConf> {\n     private GroupDataBinder groupDataBinder;\n \n     private List<User> getPagedUsers(final int page) {\n-        final Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll());\n+        List<User> result;\n \n-        final List<User> result;\n         if (StringUtils.isBlank(conf.getMatchingCond())) {\n-            result = userDAO.findAll(adminGroupIds, page, PAGE_SIZE);\n+            result = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE);\n         } else {\n-            result = searchDAO.search(adminGroupIds, SearchCondConverter.convert(conf.getMatchingCond()),\n+            result = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                    SearchCondConverter.convert(conf.getMatchingCond()),\n                     page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), SubjectType.USER);\n         }\n \n         return result;\n     }\n \n     private int count() {\n-        Set<Long> adminGroupIds = GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll());\n-\n         return StringUtils.isBlank(conf.getMatchingCond())\n-                ? userDAO.count(adminGroupIds)\n-                : searchDAO.count(adminGroupIds, SearchCondConverter.convert(conf.getMatchingCond()), SubjectType.USER);\n+                ? userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n+                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(conf.getMatchingCond()), SubjectType.USER);\n     }\n \n     private void doExtractResources(final ContentHandler handler, final AbstractSubjectTO subjectTO)\n@@ -280,17 +274,18 @@ private void doExtract(final ContentHandler handler, final List<User> users)\n                     atts.clear();\n \n                     atts.addAttribute(\"\", \"\", \"id\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getKey()));\n-                    atts.addAttribute(\"\", \"\", \"groupId\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getGroupId()));\n-                    atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, String.valueOf(memb.getGroupName()));\n+                    atts.addAttribute(\"\", \"\", \"groupId\", ReportXMLConst.XSD_LONG, String.valueOf(memb.getGroupKey()));\n+                    atts.addAttribute(\"\", \"\", \"groupName\", ReportXMLConst.XSD_STRING, String.\n+                            valueOf(memb.getGroupName()));\n                     handler.startElement(\"\", \"\", \"membership\", atts);\n \n                     doExtractAttributes(handler, memb, memb.getPlainAttrMap().keySet(), memb.getDerAttrMap()\n                             .keySet(), memb.getVirAttrMap().keySet());\n \n                     if (conf.getFeatures().contains(Feature.resources)) {\n-                        Membership actualMemb = user.getMembership(memb.getGroupId());\n+                        Membership actualMemb = user.getMembership(memb.getGroupKey());\n                         if (actualMemb == null) {\n-                            LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\", memb.getGroupId(),\n+                            LOG.warn(\"Unexpected: cannot find membership for group {} for user {}\", memb.getGroupKey(),\n                                     user);\n                         } else {\n                             doExtractResources(handler, groupDataBinder.getGroupTO(actualMemb.getGroup()));"},{"sha":"86fe6352d3cd9401acdee1a5a160c3075d4e5347","filename":"core/logic/src/main/resources/report/groupReportlet2csv.xsl","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2csv.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2csv.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2csv.xsl?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -62,18 +62,6 @@ under the License.\n           <xsl:value-of select=\"$groupAttr/.\"/>\n           <xsl:text>\"</xsl:text>\n         </xsl:when>\n-        <xsl:when test=\"name($attrs/*[name(.)=$nameAttr]/*[name(.)='entitlement']) \n-                        and count($attrs/*[name(.)=$nameAttr]/node()) &gt; 0\">\n-          <xsl:text>\"</xsl:text>       \n-          <xsl:for-each select=\"$attrs/*/entitlement\">\n-            <xsl:variable name=\"value\" select=\"@id\"/>\n-            <xsl:value-of select=\"$value\"/>\n-            <xsl:if test=\"position() != last()\">\n-              <xsl:value-of select=\"$delimiter\"/>\n-            </xsl:if>\n-          </xsl:for-each>\n-          <xsl:text>\"</xsl:text>\n-        </xsl:when>\n         <xsl:when test=\"name($attrs/*[name(.)=$nameAttr]/*[name(.)='resource']) \n                         and count($attrs/*[name(.)=$nameAttr]/node()) &gt; 0\">\n           <xsl:text>\"</xsl:text>       "},{"sha":"e95d17040ba29f4c4311d14864414cef271c574f","filename":"core/logic/src/main/resources/report/groupReportlet2fo.xsl","status":"modified","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2fo.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2fo.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2fo.xsl?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -102,19 +102,6 @@ under the License.\n         </xsl:otherwise>\n       </xsl:choose>\n       \n-      <!--entitlements-->\n-      <xsl:choose>\n-        <xsl:when test=\"entitlements/entitlement\">\n-          <xsl:call-template name=\"entitlements\">\n-            <xsl:with-param name=\"label\">Entitlements</xsl:with-param>\n-            <xsl:with-param name=\"node\" select=\"entitlements/entitlement\"/>\n-          </xsl:call-template>\n-        </xsl:when>\n-        <xsl:otherwise>\n-          <fo:block color=\"red\" font-size=\"9pt\" space-after=\"3mm\">THIS GROUP HASN'T ANY ENTITLEMENT</fo:block>\n-        </xsl:otherwise>\n-      </xsl:choose>\n-      \n       <xsl:choose>\n         <xsl:when test=\"users/user\">\n           <fo:block font-size=\"11pt\" font-weight=\"bold\">Users</fo:block>\n@@ -184,36 +171,6 @@ under the License.\n       </fo:table-body>\n     </fo:table>\n   </xsl:template>\n-  <!--entitlements template-->\n-  <xsl:template name=\"entitlements\">\n-    <xsl:param name=\"label\"/>\n-    <xsl:param name=\"node\"/>\n-    <fo:block font-size=\"11pt\" font-weight=\"bold\" space-after=\"2mm\" space-before=\"5mm\">\n-      <xsl:value-of select=\"$label\"/>\n-    </fo:block>\n-    <fo:table table-layout=\"fixed\" space-after=\"7mm\">\n-      <fo:table-column/>\n-      <!--<fo:table-column/>-->\n-      <fo:table-header>\n-        <fo:table-row height=\"7mm\" background-color=\"(#ccccba)\">\n-          <fo:table-cell>\n-            <fo:block font-weight=\"bold\">Name</fo:block>\n-          </fo:table-cell>\n-        </fo:table-row>\n-      </fo:table-header>\n-      <fo:table-body>\n-        <xsl:for-each select=\"$node\">\n-          <fo:table-row height=\"4mm\" background-color=\"(#ccccff)\">\n-            <fo:table-cell>\n-              <fo:block>\n-                <xsl:value-of select=\"@id\"/>\n-              </fo:block>\n-            </fo:table-cell>\n-          </fo:table-row>\n-        </xsl:for-each>\n-      </fo:table-body>\n-    </fo:table>\n-  </xsl:template>\n   \n   <xsl:template name=\"groupResources\">\n     <xsl:param name=\"node\"/>"},{"sha":"7e2a52f928d1578a0b1109fc753b12fddaeee8a1","filename":"core/logic/src/main/resources/report/groupReportlet2html.xsl","status":"modified","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2html.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2html.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2FgroupReportlet2html.xsl?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -87,18 +87,6 @@ under the License.\n         </xsl:otherwise>\n       </xsl:choose>\n       \n-      <xsl:choose>\n-        <xsl:when test=\"entitlements/entitlement\">\n-          <xsl:call-template name=\"entitlements\">\n-            <xsl:with-param name=\"label\">Entitlements: </xsl:with-param>\n-            <xsl:with-param name=\"node\" select=\"entitlements/entitlement\"/>\n-          </xsl:call-template>\n-        </xsl:when>\n-        <xsl:otherwise>\n-          <h5>THIS GROUP HASN'T ANY ENTITLEMENT</h5>\n-        </xsl:otherwise>\n-      </xsl:choose>\n-      \n       <xsl:choose>\n         <xsl:when test=\"users/user\">\n           <h4>Users</h4>\n@@ -118,30 +106,6 @@ under the License.\n       \n     </xsl:for-each>\n   </xsl:template>\n- \n-  <!--entitlement template-->\n-  <xsl:template name=\"entitlements\">\n-    <xsl:param name=\"label\"/>\n-    <xsl:param name=\"node\"/>\n-\n-    <h4>\n-      <xsl:value-of select=\"$label\"/>\n-    </h4>\n-    \n-    <table>\n-      \n-      <tbody>\n-        <xsl:for-each select=\"$node\">\n-          <tr>\n-            <td>\n-              <xsl:value-of select=\"@id\"/>\n-            </td>\n-          </tr>\n-        </xsl:for-each>\n-      </tbody>\n-    </table>\n-  </xsl:template>\n-\n \n   <xsl:template name=\"attributes\">\n     <xsl:param name=\"label\"/>"},{"sha":"47ea2a9a58e41fb3e47cb4c126ec1034637a3826","filename":"core/logic/src/test/java/org/apache/syncope/core/logic/NotificationTest.java","status":"modified","additions":29,"deletions":21,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,6 +26,7 @@\n import com.icegreen.greenmail.util.ServerSetup;\n import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n import java.util.Random;\n@@ -37,6 +38,8 @@\n import javax.mail.Message;\n import javax.mail.Session;\n import javax.mail.Store;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n@@ -47,22 +50,23 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n+import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.junit.AfterClass;\n import org.junit.Before;\n@@ -77,7 +81,6 @@\n import org.springframework.security.authentication.TestingAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n@@ -119,10 +122,10 @@ public class NotificationTest {\n     private String adminUser;\n \n     @Autowired\n-    private EntitlementDAO entitlementDAO;\n+    private NotificationDAO notificationDAO;\n \n     @Autowired\n-    private NotificationDAO notificationDAO;\n+    private RealmDAO realmDAO;\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -155,7 +158,7 @@ public class NotificationTest {\n     private EntityFactory entityFactory;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     @BeforeClass\n     public static void startGreenMail() {\n@@ -190,6 +193,7 @@ private static UserTO getSampleTO(final String email) {\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password123\");\n         userTO.setUsername(uid);\n+        userTO.setRealm(\"/even/two\");\n \n         userTO.getPlainAttrs().add(attributeTO(\"fullname\", uid));\n         userTO.getPlainAttrs().add(attributeTO(\"firstname\", uid));\n@@ -205,12 +209,16 @@ private static UserTO getSampleTO(final String email) {\n \n     @Before\n     public void setupSecurity() {\n-        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n-        for (Entitlement entitlement : entitlementDAO.findAll()) {\n-            authorities.add(new SimpleGrantedAuthority(entitlement.getKey()));\n-        }\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(Arrays.asList(Entitlement.values()),\n+                new Transformer<Entitlement, GrantedAuthority>() {\n+\n+                    @Override\n+                    public GrantedAuthority transform(final Entitlement entitlement) {\n+                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                    }\n+                }, new ArrayList<GrantedAuthority>());\n \n-        UserDetails userDetails = new User(adminUser, \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+        UserDetails userDetails = new User(adminUser, \"FAKE_PASSWORD\", authorities);\n         Authentication authentication = new TestingAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities);\n         SecurityContextHolder.getContext().setAuthentication(authentication);\n     }\n@@ -279,7 +287,7 @@ public void notifyByMail() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -336,7 +344,7 @@ public void issueSYNCOPE192() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -389,7 +397,7 @@ public void notifyByMailEmptyAbout() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -439,15 +447,15 @@ public void notifyByMailWithRetry() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n \n         // 3. Set number of retries\n         CPlainAttr maxRetries = entityFactory.newEntity(CPlainAttr.class);\n         maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\", CPlainSchema.class));\n-        maxRetries.addValue(\"5\", attrUtilFactory.getInstance(AttributableType.CONFIGURATION));\n+        maxRetries.addValue(\"5\", attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(maxRetries);\n         confDAO.flush();\n \n@@ -476,7 +484,7 @@ public void notifyByMailWithRetry() throws Exception {\n         // 8. reset number of retries\n         maxRetries = entityFactory.newEntity(CPlainAttr.class);\n         maxRetries.setSchema(plainSchemaDAO.find(\"notification.maxRetries\", CPlainSchema.class));\n-        maxRetries.addValue(\"0\", attrUtilFactory.getInstance(AttributableType.CONFIGURATION));\n+        maxRetries.addValue(\"0\", attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(maxRetries);\n         confDAO.flush();\n     }\n@@ -510,7 +518,7 @@ public void issueSYNCOPE445() throws Exception {\n         // 2. create user\n         UserTO userTO = getSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -571,7 +579,7 @@ public void issueSYNCOPE492() throws Exception {\n         // 2. create user\n         UserTO userTO = getUniqueSampleTO(MAIL_ADDRESS);\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userLogic.create(userTO, true);\n@@ -612,7 +620,7 @@ public void issueSYNCOPE446() throws Exception {\n         // 2. create group\n         GroupTO groupTO = new GroupTO();\n         groupTO.setName(\"group446\");\n-        groupTO.setParent(1L);\n+        groupTO.setRealm(\"/even/two\");\n \n         GroupTO createdGroup = groupLogic.create(groupTO);\n         assertNotNull(createdGroup);"},{"sha":"2b102284dd929701f2398b3bb61ec05efae57245","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"renamed","additions":74,"deletions":91,"changes":165,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n-import org.apache.syncope.core.misc.security.SecureRandomUtil;\n+import org.apache.syncope.core.misc.security.SecureRandomUtils;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -51,10 +51,9 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -69,7 +68,9 @@\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -86,16 +87,19 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ConnObjectUtil {\n+public class ConnObjectUtils {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtil.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n \n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -140,33 +144,30 @@ public ObjectClass fromSubject(final Subject<?, ?, ?> subject) {\n      *\n      * @param obj connector object\n      * @param syncTask synchronization task\n-     * @param attrUtil AttributableUtil\n+     * @param attrUtils AttributableUtils\n      * @param <T> user/group\n      * @return UserTO for the user to be created\n      */\n     @Transactional(readOnly = true)\n     public <T extends AbstractSubjectTO> T getSubjectTO(final ConnectorObject obj, final SyncTask syncTask,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtils attrUtils) {\n \n-        T subjectTO = getSubjectTOFromConnObject(obj, syncTask, attrUtil);\n+        T subjectTO = getSubjectTOFromConnObject(obj, syncTask, attrUtils);\n \n         // (for users) if password was not set above, generate\n         if (subjectTO instanceof UserTO && StringUtils.isBlank(((UserTO) subjectTO).getPassword())) {\n             final UserTO userTO = (UserTO) subjectTO;\n \n             List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n \n-            PasswordPolicy globalPP = policyDAO.getGlobalPasswordPolicy();\n-            if (globalPP != null && globalPP.getSpecification(PasswordPolicySpec.class) != null) {\n-                ppSpecs.add(globalPP.getSpecification(PasswordPolicySpec.class));\n-            }\n-\n-            for (MembershipTO memb : userTO.getMemberships()) {\n-                Group group = groupDAO.find(memb.getGroupId());\n-                if (group != null && group.getPasswordPolicy() != null\n-                        && group.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n+            Realm realm = realmDAO.find(userTO.getRealm());\n+            if (realm != null) {\n+                for (Realm ancestor : realmDAO.findAncestors(realm)) {\n+                    if (ancestor.getPasswordPolicy() != null\n+                            && ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n \n-                    ppSpecs.add(group.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n+                        ppSpecs.add(ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n+                    }\n                 }\n             }\n \n@@ -185,7 +186,7 @@ public <T extends AbstractSubjectTO> T getSubjectTO(final ConnectorObject obj, f\n             } catch (InvalidPasswordPolicySpecException e) {\n                 LOG.error(\"Could not generate policy-compliant random password for {}\", userTO, e);\n \n-                password = SecureRandomUtil.generateRandomPassword(16);\n+                password = SecureRandomUtils.generateRandomPassword(16);\n             }\n             userTO.setPassword(password);\n         }\n@@ -200,19 +201,19 @@ public <T extends AbstractSubjectTO> T getSubjectTO(final ConnectorObject obj, f\n      * @param obj connector object\n      * @param original subject to get diff from\n      * @param syncTask synchronization task\n-     * @param attrUtil AttributableUtil\n+     * @param attrUtils AttributableUtil\n      * @param <T> user/group\n      * @return modifications for the user/group to be updated\n      */\n     @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n     public <T extends AbstractAttributableMod> T getAttributableMod(final Long key, final ConnectorObject obj,\n-            final AbstractAttributableTO original, final SyncTask syncTask, final AttributableUtil attrUtil) {\n+            final AbstractAttributableTO original, final SyncTask syncTask, final AttributableUtils attrUtils) {\n \n-        final AbstractAttributableTO updated = getSubjectTOFromConnObject(obj, syncTask, attrUtil);\n+        final AbstractAttributableTO updated = getSubjectTOFromConnObject(obj, syncTask, attrUtils);\n         updated.setKey(key);\n \n-        if (AttributableType.USER == attrUtil.getType()) {\n+        if (AttributableType.USER == attrUtils.getType()) {\n             // update password if and only if password is really changed\n             final User user = userDAO.authFetch(key);\n             if (StringUtils.isBlank(((UserTO) updated).getPassword())\n@@ -223,30 +224,29 @@ public <T extends AbstractAttributableMod> T getAttributableMod(final Long key,\n             }\n \n             for (MembershipTO membTO : ((UserTO) updated).getMemberships()) {\n-                Membership memb = user.getMembership(membTO.getGroupId());\n+                Membership memb = user.getMembership(membTO.getGroupKey());\n                 if (memb != null) {\n                     membTO.setKey(memb.getKey());\n                 }\n             }\n \n             return (T) AttributableOperations.diff(((UserTO) updated), ((UserTO) original), true);\n         }\n-        if (AttributableType.GROUP == attrUtil.getType()) {\n-            // reading from connector object cannot change entitlements\n-            ((GroupTO) updated).getEntitlements().addAll(((GroupTO) original).getEntitlements());\n+        if (AttributableType.GROUP == attrUtils.getType()) {\n             return (T) AttributableOperations.diff(((GroupTO) updated), ((GroupTO) original), true);\n         }\n \n         return null;\n     }\n \n     private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final ConnectorObject obj,\n-            final SyncTask syncTask, final AttributableUtil attrUtil) {\n+            final SyncTask syncTask, final AttributableUtils attrUtils) {\n \n-        final T subjectTO = attrUtil.newSubjectTO();\n+        final T subjectTO = attrUtils.newSubjectTO();\n \n         // 1. fill with data from connector object\n-        for (MappingItem item : attrUtil.getUidToMappingItems(\n+        subjectTO.setRealm(syncTask.getDestinatioRealm().getFullPath());\n+        for (MappingItem item : attrUtils.getUidToMappingItems(\n                 syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)) {\n \n             Attribute attribute = obj.getAttributeByName(item.getExtAttrName());\n@@ -304,15 +304,15 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                     attributeTO = new AttrTO();\n                     attributeTO.setSchema(item.getIntAttrName());\n \n-                    PlainSchema schema = plainSchemaDAO.find(item.getIntAttrName(), attrUtil.plainSchemaClass());\n+                    PlainSchema schema = plainSchemaDAO.find(item.getIntAttrName(), attrUtils.plainSchemaClass());\n \n                     for (Object value : attribute == null || attribute.getValue() == null\n                             ? Collections.emptyList()\n                             : attribute.getValue()) {\n \n                         AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                         if (value != null) {\n-                            final PlainAttrValue attrValue = attrUtil.newPlainAttrValue();\n+                            final PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n                             switch (schemaType) {\n                                 case String:\n                                     attrValue.setStringValue(value.toString());\n@@ -368,20 +368,24 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n         }\n \n         // 2. add data from defined template (if any)\n-        AbstractSubjectTO template = AttributableType.USER == attrUtil.getType()\n+        AbstractSubjectTO template = AttributableType.USER == attrUtils.getType()\n                 ? syncTask.getUserTemplate() : syncTask.getGroupTemplate();\n \n         if (template != null) {\n+            if (template.getRealm() != null) {\n+                subjectTO.setRealm(template.getRealm());\n+            }\n+\n             if (template instanceof UserTO) {\n                 if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = JexlUtil.evaluate(((UserTO) template).getUsername(), subjectTO);\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), subjectTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((UserTO) subjectTO).setUsername(evaluated);\n                     }\n                 }\n \n                 if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = JexlUtil.evaluate(((UserTO) template).getPassword(), subjectTO);\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), subjectTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((UserTO) subjectTO).setPassword(evaluated);\n                     }\n@@ -390,31 +394,24 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                 Map<Long, MembershipTO> currentMembs = ((UserTO) subjectTO).getMembershipMap();\n                 for (MembershipTO membTO : ((UserTO) template).getMemberships()) {\n                     MembershipTO membTBU;\n-                    if (currentMembs.containsKey(membTO.getGroupId())) {\n-                        membTBU = currentMembs.get(membTO.getGroupId());\n+                    if (currentMembs.containsKey(membTO.getGroupKey())) {\n+                        membTBU = currentMembs.get(membTO.getGroupKey());\n                     } else {\n                         membTBU = new MembershipTO();\n-                        membTBU.setGroupId(membTO.getGroupId());\n+                        membTBU.setGroupKey(membTO.getGroupKey());\n                         ((UserTO) subjectTO).getMemberships().add(membTBU);\n                     }\n                     fillFromTemplate(membTBU, membTO);\n                 }\n             }\n             if (template instanceof GroupTO) {\n                 if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                    String evaluated = JexlUtil.evaluate(((GroupTO) template).getName(), subjectTO);\n+                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), subjectTO);\n                     if (StringUtils.isNotBlank(evaluated)) {\n                         ((GroupTO) subjectTO).setName(evaluated);\n                     }\n                 }\n \n-                if (((GroupTO) template).getParent() != 0) {\n-                    final Group parentGroup = groupDAO.find(((GroupTO) template).getParent());\n-                    if (parentGroup != null) {\n-                        ((GroupTO) subjectTO).setParent(parentGroup.getKey());\n-                    }\n-                }\n-\n                 if (((GroupTO) template).getUserOwner() != null) {\n                     final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n                     if (userOwner != null) {\n@@ -428,25 +425,12 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                     }\n                 }\n \n-                ((GroupTO) subjectTO).getEntitlements().addAll(((GroupTO) template).getEntitlements());\n-\n                 ((GroupTO) subjectTO).getGPlainAttrTemplates().addAll(((GroupTO) template).getGPlainAttrTemplates());\n                 ((GroupTO) subjectTO).getGDerAttrTemplates().addAll(((GroupTO) template).getGDerAttrTemplates());\n                 ((GroupTO) subjectTO).getGVirAttrTemplates().addAll(((GroupTO) template).getGVirAttrTemplates());\n                 ((GroupTO) subjectTO).getMPlainAttrTemplates().addAll(((GroupTO) template).getMPlainAttrTemplates());\n                 ((GroupTO) subjectTO).getMDerAttrTemplates().addAll(((GroupTO) template).getMDerAttrTemplates());\n                 ((GroupTO) subjectTO).getMVirAttrTemplates().addAll(((GroupTO) template).getMVirAttrTemplates());\n-\n-                ((GroupTO) subjectTO).setAccountPolicy(((GroupTO) template).getAccountPolicy());\n-                ((GroupTO) subjectTO).setPasswordPolicy(((GroupTO) template).getPasswordPolicy());\n-\n-                ((GroupTO) subjectTO).setInheritOwner(((GroupTO) template).isInheritOwner());\n-                ((GroupTO) subjectTO).setInheritTemplates(((GroupTO) template).isInheritTemplates());\n-                ((GroupTO) subjectTO).setInheritPlainAttrs(((GroupTO) template).isInheritPlainAttrs());\n-                ((GroupTO) subjectTO).setInheritDerAttrs(((GroupTO) template).isInheritDerAttrs());\n-                ((GroupTO) subjectTO).setInheritVirAttrs(((GroupTO) template).isInheritVirAttrs());\n-                ((GroupTO) subjectTO).setInheritPasswordPolicy(((GroupTO) template).isInheritPasswordPolicy());\n-                ((GroupTO) subjectTO).setInheritAccountPolicy(((GroupTO) template).isInheritAccountPolicy());\n             }\n \n             fillFromTemplate(subjectTO, template);\n@@ -530,14 +514,14 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n      * Query connected external resources for values to populated virtual attributes associated with the given owner.\n      *\n      * @param owner user or group\n-     * @param attrUtil attributable util\n+     * @param attrUtils attributable util\n      */\n-    public void retrieveVirAttrValues(final Attributable<?, ?, ?> owner, final AttributableUtil attrUtil) {\n+    public void retrieveVirAttrValues(final Attributable<?, ?, ?> owner, final AttributableUtils attrUtils) {\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n         final ConnectorFactory connFactory = context.getBean(ConnectorFactory.class);\n \n-        final IntMappingType type = attrUtil.getType() == AttributableType.USER\n-                ? IntMappingType.UserVirtualSchema : attrUtil.getType() == AttributableType.GROUP\n+        final IntMappingType type = attrUtils.getType() == AttributableType.USER\n+                ? IntMappingType.UserVirtualSchema : attrUtils.getType() == AttributableType.GROUP\n                         ? IntMappingType.GroupVirtualSchema : IntMappingType.MembershipVirtualSchema;\n \n         final Map<String, ConnectorObject> externalResources = new HashMap<>();\n@@ -548,7 +532,7 @@ public void retrieveVirAttrValues(final Attributable<?, ?, ?> owner, final Attri\n         for (VirAttr virAttr : owner.getVirAttrs()) {\n             // reset value set\n             if (virAttr.getValues().isEmpty()) {\n-                retrieveVirAttrValue(owner, virAttr, attrUtil, type, externalResources, connFactory);\n+                retrieveVirAttrValue(owner, virAttr, attrUtils, type, externalResources, connFactory);\n             }\n         }\n         // -----------------------\n@@ -557,13 +541,13 @@ public void retrieveVirAttrValues(final Attributable<?, ?, ?> owner, final Attri\n     private void retrieveVirAttrValue(\n             final Attributable<?, ?, ?> owner,\n             final VirAttr virAttr,\n-            final AttributableUtil attrUtil,\n+            final AttributableUtils attrUtils,\n             final IntMappingType type,\n             final Map<String, ConnectorObject> externalResources,\n             final ConnectorFactory connFactory) {\n \n         final String schemaName = virAttr.getSchema().getKey();\n-        final VirAttrCacheValue virAttrCacheValue = virAttrCache.get(attrUtil.getType(), owner.getKey(), schemaName);\n+        final VirAttrCacheValue virAttrCacheValue = virAttrCache.get(attrUtils.getType(), owner.getKey(), schemaName);\n \n         LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n \n@@ -585,42 +569,41 @@ private void retrieveVirAttrValue(\n                     : (Subject) owner;\n \n             final Set<ExternalResource> targetResources = owner instanceof Membership\n-                    ? getTargetResource(virAttr, type, attrUtil, realOwner.getResources())\n-                    : getTargetResource(virAttr, type, attrUtil);\n+                    ? getTargetResources(virAttr, type, attrUtils, realOwner.getResources())\n+                    : getTargetResources(virAttr, type, attrUtils);\n \n             for (ExternalResource resource : targetResources) {\n                 LOG.debug(\"Search values into {}\", resource.getKey());\n                 try {\n-                    final List<MappingItem> mappings = attrUtil.getMappingItems(resource, MappingPurpose.BOTH);\n-\n-                    final ConnectorObject connectorObject;\n+                    List<MappingItem> mappings = attrUtils.getMappingItems(resource, MappingPurpose.BOTH);\n \n+                    ConnectorObject connectorObject;\n                     if (externalResources.containsKey(resource.getKey())) {\n                         connectorObject = externalResources.get(resource.getKey());\n                     } else {\n                         LOG.debug(\"Perform connection to {}\", resource.getKey());\n-                        final String accountId = attrUtil.getAccountIdItem(resource) == null\n+                        final String accountId = attrUtils.getAccountIdItem(resource) == null\n                                 ? null\n-                                : MappingUtil.getAccountIdValue(\n-                                        realOwner, resource, attrUtil.getAccountIdItem(resource));\n+                                : MappingUtils.getAccountIdValue(\n+                                        realOwner, resource, attrUtils.getAccountIdItem(resource));\n \n                         if (StringUtils.isBlank(accountId)) {\n                             throw new IllegalArgumentException(\"No AccountId found for \" + resource.getKey());\n                         }\n \n-                        final Connector connector = connFactory.getConnector(resource);\n+                        Connector connector = connFactory.getConnector(resource);\n \n-                        final OperationOptions oo =\n-                                connector.getOperationOptions(MappingUtil.getMatchingMappingItems(mappings, type));\n+                        OperationOptions oo =\n+                                connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mappings, type));\n \n                         connectorObject = connector.getObject(fromSubject(realOwner), new Uid(accountId), oo);\n                         externalResources.put(resource.getKey(), connectorObject);\n                     }\n \n                     if (connectorObject != null) {\n                         // ask for searched virtual attribute value\n-                        final List<MappingItem> virAttrMappings =\n-                                MappingUtil.getMatchingMappingItems(mappings, schemaName, type);\n+                        Collection<MappingItem> virAttrMappings =\n+                                MappingUtils.getMatchingMappingItems(mappings, schemaName, type);\n \n                         // the same virtual attribute could be mapped with one or more external attribute \n                         for (MappingItem mapping : virAttrMappings) {\n@@ -635,7 +618,7 @@ private void retrieveVirAttrValue(\n                             }\n                         }\n \n-                        toBeCached.setResourceValues(resource.getKey(), new HashSet<String>(virAttr.getValues()));\n+                        toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n \n                         LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n                     }\n@@ -655,19 +638,19 @@ private void retrieveVirAttrValue(\n                 }\n             }\n \n-            virAttrCache.put(attrUtil.getType(), owner.getKey(), schemaName, toBeCached);\n+            virAttrCache.put(attrUtils.getType(), owner.getKey(), schemaName, toBeCached);\n         }\n     }\n \n-    private Set<ExternalResource> getTargetResource(\n-            final VirAttr attr, final IntMappingType type, final AttributableUtil attrUtil) {\n+    private Set<ExternalResource> getTargetResources(\n+            final VirAttr attr, final IntMappingType type, final AttributableUtils attrUtils) {\n \n         final Set<ExternalResource> resources = new HashSet<>();\n \n         if (attr.getOwner() instanceof Subject) {\n             for (ExternalResource res : ((Subject<?, ?, ?>) attr.getOwner()).getResources()) {\n-                if (!MappingUtil.getMatchingMappingItems(\n-                        attrUtil.getMappingItems(res, MappingPurpose.BOTH),\n+                if (!MappingUtils.getMatchingMappingItems(\n+                        attrUtils.getMappingItems(res, MappingPurpose.BOTH),\n                         attr.getSchema().getKey(), type).isEmpty()) {\n \n                     resources.add(res);\n@@ -678,14 +661,14 @@ private Set<ExternalResource> getTargetResource(\n         return resources;\n     }\n \n-    private Set<ExternalResource> getTargetResource(final VirAttr attr, final IntMappingType type,\n-            final AttributableUtil attrUtil, final Set<? extends ExternalResource> ownerResources) {\n+    private Set<ExternalResource> getTargetResources(final VirAttr attr, final IntMappingType type,\n+            final AttributableUtils attrUtils, final Set<? extends ExternalResource> ownerResources) {\n \n         final Set<ExternalResource> resources = new HashSet<>();\n \n         for (ExternalResource res : ownerResources) {\n-            if (!MappingUtil.getMatchingMappingItems(\n-                    attrUtil.getMappingItems(res, MappingPurpose.BOTH),\n+            if (!MappingUtils.getMatchingMappingItems(\n+                    attrUtils.getMappingItems(res, MappingPurpose.BOTH),\n                     attr.getSchema().getKey(), type).isEmpty()) {\n \n                 resources.add(res);\n@@ -730,7 +713,7 @@ private AttrTO evaluateAttrTemplate(final AbstractAttributableTO attributableTO,\n \n         if (template.getValues() != null && !template.getValues().isEmpty()) {\n             for (String value : template.getValues()) {\n-                String evaluated = JexlUtil.evaluate(value, attributableTO);\n+                String evaluated = JexlUtils.evaluate(value, attributableTO);\n                 if (StringUtils.isNotBlank(evaluated)) {\n                     result.getValues().add(evaluated);\n                 }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtil.java"},{"sha":"a4f04a603a37573b8707269849ac2bca0fd64fa7","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ExceptionUtils2.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FExceptionUtils2.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FExceptionUtils2.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FExceptionUtils2.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n \n-public final class ExceptionUtil {\n+public final class ExceptionUtils2 {\n \n     /**\n      * Uses commons lang's ExceptionUtils to provide a representation of the full stack trace of the given throwable.\n@@ -42,6 +42,6 @@ public static String getFullStackTrace(final Throwable t) {\n     /**\n      * Private default constructor, for static-only classes.\n      */\n-    private ExceptionUtil() {\n+    private ExceptionUtils2() {\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ExceptionUtil.java"},{"sha":"db49c0fdea4a4ae50b6097d665b3de435c9fd746","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"renamed","additions":69,"deletions":72,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,17 +20,20 @@\n \n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n-import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.AttributableType;\n@@ -39,8 +42,8 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -68,7 +71,7 @@\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -79,61 +82,55 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n \n-public final class MappingUtil {\n+public final class MappingUtils {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(MappingUtil.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(MappingUtils.class);\n \n     private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    public static <T extends MappingItem> List<T> getMatchingMappingItems(\n+    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n             final Collection<T> items, final IntMappingType type) {\n \n-        final List<T> result = new ArrayList<>();\n+        return CollectionUtils2.find(items, new Predicate<T>() {\n \n-        for (T mapItem : items) {\n-            if (mapItem.getIntMappingType() == type) {\n-                result.add(mapItem);\n+            @Override\n+            public boolean evaluate(final T item) {\n+                return item.getIntMappingType() == type;\n             }\n-        }\n-\n-        return result;\n+        });\n     }\n \n-    public static <T extends MappingItem> List<T> getMatchingMappingItems(final Collection<T> items,\n-            final String intAttrName, final IntMappingType type) {\n+    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n+            final Collection<T> items, final String intAttrName, final IntMappingType type) {\n \n-        final List<T> result = new ArrayList<>();\n+        return CollectionUtils2.find(items, new Predicate<T>() {\n \n-        for (T mapItem : items) {\n-            if (mapItem.getIntMappingType() == type && intAttrName.equals(mapItem.getIntAttrName())) {\n-                result.add(mapItem);\n+            @Override\n+            public boolean evaluate(final T item) {\n+                return item.getIntMappingType() == type && intAttrName.equals(item.getIntAttrName());\n             }\n-        }\n-\n-        return result;\n+        });\n     }\n \n-    public static <T extends MappingItem> Set<T> getMatchingMappingItems(final Collection<T> mapItems,\n-            final String intAttrName) {\n+    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n+            final Collection<T> items, final String intAttrName) {\n \n-        final Set<T> result = new HashSet<>();\n+        return CollectionUtils2.find(items, new Predicate<T>() {\n \n-        for (T mapItem : mapItems) {\n-            if (intAttrName.equals(mapItem.getIntAttrName())) {\n-                result.add(mapItem);\n+            @Override\n+            public boolean evaluate(final T item) {\n+                return intAttrName.equals(item.getIntAttrName());\n             }\n-        }\n-\n-        return result;\n+        });\n     }\n \n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n-     * @param attrUtil user / group\n+     * @param attrUtils user / group\n      * @param subject given user / group\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n@@ -145,8 +142,8 @@ public static <T extends MappingItem> Set<T> getMatchingMappingItems(final Colle\n      * @param resource target resource\n      * @return account link + prepared attributes\n      */\n-    public static Map.Entry<String, Set<Attribute>> prepareAttributes(\n-            final AttributableUtil attrUtil, final Subject<?, ?, ?> subject,\n+    public static Pair<String, Set<Attribute>> prepareAttributes(\n+            final AttributableUtils attrUtils, final Subject<?, ?, ?> subject,\n             final String password,\n             final boolean changePwd,\n             final Set<String> vAttrsToBeRemoved,\n@@ -166,21 +163,21 @@ public static Map.Entry<String, Set<Attribute>> prepareAttributes(\n         Set<Attribute> attributes = new HashSet<>();\n         String accountId = null;\n \n-        for (MappingItem mapping : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+        for (MappingItem mapping : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n             LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n \n             try {\n-                if ((attrUtil.getType() == AttributableType.USER\n+                if ((attrUtils.getType() == AttributableType.USER\n                         && mapping.getIntMappingType() == IntMappingType.UserVirtualSchema)\n-                        || (attrUtil.getType() == AttributableType.GROUP\n+                        || (attrUtils.getType() == AttributableType.GROUP\n                         && mapping.getIntMappingType() == IntMappingType.GroupVirtualSchema)) {\n \n                     LOG.debug(\"Expire entry cache {}-{}\", subject.getKey(), mapping.getIntAttrName());\n-                    virAttrCache.expire(attrUtil.getType(), subject.getKey(), mapping.getIntAttrName());\n+                    virAttrCache.expire(attrUtils.getType(), subject.getKey(), mapping.getIntAttrName());\n                 }\n \n                 // SYNCOPE-458 expire cache also for membership virtual schemas\n-                if (attrUtil.getType() == AttributableType.USER && mapping.getIntMappingType()\n+                if (attrUtils.getType() == AttributableType.USER && mapping.getIntMappingType()\n                         == IntMappingType.MembershipVirtualSchema && (subject instanceof User)) {\n \n                     final User user = (User) subject;\n@@ -192,7 +189,7 @@ public static Map.Entry<String, Set<Attribute>> prepareAttributes(\n                     }\n                 }\n \n-                Map.Entry<String, Attribute> preparedAttr = prepareAttr(\n+                Pair<String, Attribute> preparedAttr = prepareAttr(\n                         resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated,\n                         membVAttrsToBeRemoved, membVAttrsToBeUpdated);\n \n@@ -220,12 +217,12 @@ public static Map.Entry<String, Set<Attribute>> prepareAttributes(\n         }\n \n         final Attribute accountIdExtAttr =\n-                AttributeUtil.find(attrUtil.getAccountIdItem(resource).getExtAttrName(), attributes);\n+                AttributeUtil.find(attrUtils.getAccountIdItem(resource).getExtAttrName(), attributes);\n         if (accountIdExtAttr != null) {\n             attributes.remove(accountIdExtAttr);\n-            attributes.add(AttributeBuilder.build(attrUtil.getAccountIdItem(resource).getExtAttrName(), accountId));\n+            attributes.add(AttributeBuilder.build(attrUtils.getAccountIdItem(resource).getExtAttrName(), accountId));\n         }\n-        attributes.add(MappingUtil.evaluateNAME(subject, resource, accountId));\n+        attributes.add(MappingUtils.evaluateNAME(subject, resource, accountId));\n \n         if (enable != null) {\n             attributes.add(AttributeBuilder.buildEnabled(enable));\n@@ -237,7 +234,7 @@ public static Map.Entry<String, Set<Attribute>> prepareAttributes(\n             }\n         }\n \n-        return new AbstractMap.SimpleEntry<>(accountId, attributes);\n+        return new ImmutablePair<>(accountId, attributes);\n     }\n \n     /**\n@@ -253,17 +250,17 @@ public static Map.Entry<String, Set<Attribute>> prepareAttributes(\n      * @return account link + prepared attribute\n      */\n     @SuppressWarnings(\"unchecked\")\n-    private static Map.Entry<String, Attribute> prepareAttr(\n+    private static Pair<String, Attribute> prepareAttr(\n             final ExternalResource resource, final MappingItem mapItem,\n             final Subject<?, ?, ?> subject, final String password, final PasswordGenerator passwordGenerator,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated,\n             final Set<String> membVAttrsToBeRemoved, final Map<String, AttrMod> membVAttrsToBeUpdated) {\n \n-        final List<Attributable<?, ?, ?>> attributables = new ArrayList<>();\n+        List<Attributable<?, ?, ?>> attributables = new ArrayList<>();\n \n-        final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        final AttributableUtilFactory attrUtilFactory = context.getBean(AttributableUtilFactory.class);\n-        final ConnObjectUtil connObjectUtil = context.getBean(ConnObjectUtil.class);\n+        ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n+        AttributableUtilsFactory attrUtilsFactory = context.getBean(AttributableUtilsFactory.class);\n+        ConnObjectUtils connObjectUtils = context.getBean(ConnObjectUtils.class);\n \n         switch (mapItem.getIntMappingType().getAttributableType()) {\n             case USER:\n@@ -275,7 +272,7 @@ private static Map.Entry<String, Attribute> prepareAttr(\n             case GROUP:\n                 if (subject instanceof User) {\n                     for (Group group : ((User) subject).getGroups()) {\n-                        connObjectUtil.retrieveVirAttrValues(group, attrUtilFactory.getInstance(group));\n+                        connObjectUtils.retrieveVirAttrValues(group, attrUtilsFactory.getInstance(group));\n                         attributables.add(group);\n                     }\n                 }\n@@ -300,15 +297,15 @@ private static Map.Entry<String, Attribute> prepareAttr(\n         PlainSchema schema = null;\n         boolean readOnlyVirSchema = false;\n         AttrSchemaType schemaType;\n-        final Map.Entry<String, Attribute> result;\n+        final Pair<String, Attribute> result;\n \n         switch (mapItem.getIntMappingType()) {\n             case UserPlainSchema:\n             case GroupPlainSchema:\n             case MembershipPlainSchema:\n                 final PlainSchemaDAO plainSchemaDAO = context.getBean(PlainSchemaDAO.class);\n                 schema = plainSchemaDAO.find(mapItem.getIntAttrName(),\n-                        MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                        MappingUtils.getIntMappingTypeClass(mapItem.getIntMappingType()));\n                 schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                 break;\n \n@@ -317,7 +314,7 @@ private static Map.Entry<String, Attribute> prepareAttr(\n             case MembershipVirtualSchema:\n                 VirSchemaDAO virSchemaDAO = context.getBean(VirSchemaDAO.class);\n                 VirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName(),\n-                        MappingUtil.getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                        MappingUtils.getIntMappingTypeClass(mapItem.getIntMappingType()));\n                 readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n                 break;\n@@ -352,7 +349,7 @@ private static Map.Entry<String, Attribute> prepareAttr(\n             }\n \n             if (mapItem.isAccountid()) {\n-                result = new AbstractMap.SimpleEntry<>(objValues.iterator().next().toString(), null);\n+                result = new ImmutablePair<>(objValues.iterator().next().toString(), null);\n             } else if (mapItem.isPassword() && subject instanceof User) {\n                 String passwordAttrValue = password;\n                 if (StringUtils.isBlank(passwordAttrValue)) {\n@@ -375,19 +372,19 @@ private static Map.Entry<String, Attribute> prepareAttr(\n                 if (passwordAttrValue == null) {\n                     result = null;\n                 } else {\n-                    result = new AbstractMap.SimpleEntry<>(\n+                    result = new ImmutablePair<>(\n                             null,\n                             AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else {\n-                if ((schema != null && schema.isMultivalue()) || attrUtilFactory.getInstance(subject).getType()\n+                if ((schema != null && schema.isMultivalue()) || attrUtilsFactory.getInstance(subject).getType()\n                         != mapItem.getIntMappingType().getAttributableType()) {\n \n-                    result = new AbstractMap.SimpleEntry<>(\n+                    result = new ImmutablePair<>(\n                             null,\n                             AttributeBuilder.build(extAttrName, objValues));\n                 } else {\n-                    result = new AbstractMap.SimpleEntry<>(\n+                    result = new ImmutablePair<>(\n                             null, objValues.isEmpty()\n                                     ? AttributeBuilder.build(extAttrName)\n                                     : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n@@ -410,9 +407,9 @@ private static Map.Entry<String, Attribute> prepareAttr(\n     public static Name evaluateNAME(final Subject<?, ?, ?> subject,\n             final ExternalResource resource, final String accountId) {\n \n-        final AttributableUtilFactory attrUtilFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AttributableUtilFactory.class);\n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(subject);\n+        final AttributableUtilsFactory attrUtilsFactory =\n+                ApplicationContextProvider.getApplicationContext().getBean(AttributableUtilsFactory.class);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(subject);\n \n         if (StringUtils.isBlank(accountId)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n@@ -421,12 +418,12 @@ public static Name evaluateNAME(final Subject<?, ?, ?> subject,\n \n         // Evaluate AccountLink expression\n         String evalAccountLink = null;\n-        if (StringUtils.isNotBlank(attrUtil.getAccountLink(resource))) {\n+        if (StringUtils.isNotBlank(attrUtils.getAccountLink(resource))) {\n             final JexlContext jexlContext = new MapContext();\n-            JexlUtil.addFieldsToContext(subject, jexlContext);\n-            JexlUtil.addAttrsToContext(subject.getPlainAttrs(), jexlContext);\n-            JexlUtil.addDerAttrsToContext(subject.getDerAttrs(), subject.getPlainAttrs(), jexlContext);\n-            evalAccountLink = JexlUtil.evaluate(attrUtil.getAccountLink(resource), jexlContext);\n+            JexlUtils.addFieldsToContext(subject, jexlContext);\n+            JexlUtils.addAttrsToContext(subject.getPlainAttrs(), jexlContext);\n+            JexlUtils.addDerAttrsToContext(subject.getDerAttrs(), subject.getPlainAttrs(), jexlContext);\n+            evalAccountLink = JexlUtils.evaluate(attrUtils.getAccountLink(resource), jexlContext);\n         }\n \n         // If AccountLink evaluates to an empty string, just use the provided AccountId as Name(),\n@@ -450,11 +447,11 @@ public static Name evaluateNAME(final Subject<?, ?, ?> subject,\n     private static String getGroupOwnerValue(\n             final ExternalResource resource, final Subject<?, ?, ?> subject) {\n \n-        AttributableUtilFactory attrUtilFactory =\n-                ApplicationContextProvider.getApplicationContext().getBean(AttributableUtilFactory.class);\n+        AttributableUtilsFactory attrUtilsFactory =\n+                ApplicationContextProvider.getApplicationContext().getBean(AttributableUtilsFactory.class);\n \n-        Map.Entry<String, Attribute> preparedAttr = prepareAttr(\n-                resource, attrUtilFactory.getInstance(subject).getAccountIdItem(resource), subject, null, null,\n+        Pair<String, Attribute> preparedAttr = prepareAttr(\n+                resource, attrUtilsFactory.getInstance(subject).getAccountIdItem(resource), subject, null, null,\n                 Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap(),\n                 Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap());\n         String accountId = preparedAttr.getKey();\n@@ -733,6 +730,6 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n     /**\n      * Private default constructor, for static-only classes.\n      */\n-    private MappingUtil() {\n+    private MappingUtils() {\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtil.java"},{"sha":"7a921ee5c627ebb9d2175ac9b403f5347b167309","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/RealmUtils.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FRealmUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public final class RealmUtils {\n+\n+    public static String getGroupOwnerRealm(final String realmPath, final Long groupId) {\n+        return realmPath + \"@\" + groupId;\n+    }\n+\n+    public static boolean normalizingAddTo(final Set<String> realms, final String newRealm) {\n+        boolean dontAdd = false;\n+        Set<String> toRemove = new HashSet<>();\n+        for (String realm : realms) {\n+            if (newRealm.startsWith(realm)) {\n+                dontAdd = true;\n+            } else if (realm.startsWith(newRealm)) {\n+                toRemove.add(realm);\n+            }\n+        }\n+\n+        realms.removeAll(toRemove);\n+        if (!dontAdd) {\n+            realms.add(newRealm);\n+        }\n+        return !dontAdd;\n+    }\n+\n+    public static Set<String> normalize(final Collection<String> realms) {\n+        Set<String> normalized = new HashSet<>();\n+        for (String realm : realms) {\n+            normalizingAddTo(normalized, realm);\n+        }\n+\n+        return normalized;\n+    }\n+\n+    private RealmUtils() {\n+        // empty constructor for static utility class \n+    }\n+}"},{"sha":"bc3159c1c0e0bf85ca9a5dc29b55011c0b94090c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -46,9 +46,9 @@\n /**\n  * JEXL <a href=\"http://commons.apache.org/jexl/reference/index.html\">reference</a> is available.\n  */\n-public final class JexlUtil {\n+public final class JexlUtils {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(JexlUtil.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(JexlUtils.class);\n \n     private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\", \"class\" };\n \n@@ -230,8 +230,8 @@ public static String evaluate(final String expression,\n             final Attributable<?, ?, ?> attributable, final Collection<? extends PlainAttr> attributes) {\n \n         final JexlContext jexlContext = new MapContext();\n-        JexlUtil.addAttrsToContext(attributes, jexlContext);\n-        JexlUtil.addFieldsToContext(attributable, jexlContext);\n+        JexlUtils.addAttrsToContext(attributes, jexlContext);\n+        JexlUtils.addFieldsToContext(attributable, jexlContext);\n \n         // Evaluate expression using the context prepared before\n         return evaluate(expression, jexlContext);\n@@ -280,6 +280,6 @@ public static String evaluate(final String expression, final AbstractAttributabl\n     /**\n      * Private default constructor, for static-only classes.\n      */\n-    private JexlUtil() {\n+    private JexlUtils() {\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtil.java"},{"sha":"4b8faec1ee1b6ee3bc6384f7716971c3a5d08782","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/AccountPolicyEnforcer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FAccountPolicyEnforcer.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -91,8 +91,8 @@ public void enforce(final AccountPolicySpec policy, final PolicyType type, final\n \n         // check for subsequent failed logins\n         if (userSuspender != null\n-                && user.getFailedLogins() != null && policy.getPermittedLoginRetries() > 0\n-                && user.getFailedLogins() > policy.getPermittedLoginRetries() && !user.isSuspended()) {\n+                && user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n+                && user.getFailedLogins() > policy.getMaxAuthenticationAttempts() && !user.isSuspended()) {\n \n             userSuspender.suspend(user, policy.isPropagateSuspension());\n         }"},{"sha":"b9cfb64674f58ec0258cecb89a983e57e55149d6","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/policy/PolicyEvaluator.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fpolicy%2FPolicyEvaluator.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -48,9 +48,8 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable\n         T result = null;\n         switch (policy.getType()) {\n             case PASSWORD:\n-            case GLOBAL_PASSWORD:\n-                final PasswordPolicySpec ppSpec = policy.getSpecification(PasswordPolicySpec.class);\n-                final PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n+                PasswordPolicySpec ppSpec = policy.getSpecification(PasswordPolicySpec.class);\n+                PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n \n                 BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[] { \"schemasNotPermitted\" });\n \n@@ -79,7 +78,6 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable\n                 break;\n \n             case ACCOUNT:\n-            case GLOBAL_ACCOUNT:\n                 final AccountPolicySpec spec = policy.getSpecification(AccountPolicySpec.class);\n                 final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n \n@@ -99,7 +97,6 @@ public <T extends PolicySpec> T evaluate(final Policy policy, final Attributable\n                 break;\n \n             case SYNC:\n-            case GLOBAL_SYNC:\n             default:\n                 result = null;\n         }"},{"sha":"1062a93bf21fe33a1947f850802c5d0073c56092","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondVisitor.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.EntitlementCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -108,12 +107,6 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             leaf = SearchCond.getLeafCond(resourceCond);\n                             break;\n \n-                        case ENTITLEMENTS:\n-                            EntitlementCond entitlementCond = new EntitlementCond();\n-                            entitlementCond.setExpression(value);\n-                            leaf = SearchCond.getLeafCond(entitlementCond);\n-                            break;\n-\n                         default:\n                             throw new IllegalArgumentException(\n                                     String.format(\"Special attr name %s is not supported\", specialAttrName));"},{"sha":"2bdf45a1de211274dc5735d304cd34f647b8586a","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"renamed","additions":25,"deletions":26,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,57 +18,56 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n+import java.util.EnumMap;\n+import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.MapUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n \n-public final class AuthContextUtil {\n+public final class AuthContextUtils {\n \n     public static String getAuthenticatedUsername() {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n         return authentication == null ? SyncopeConstants.UNAUTHENTICATED : authentication.getName();\n     }\n \n-    public static Set<String> getOwnedEntitlementNames() {\n-        final Set<String> result = new HashSet<>();\n+    public static void updateAuthenticatedUsername(final String newUsername) {\n+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n \n-        final SecurityContext ctx = SecurityContextHolder.getContext();\n+        Authentication newAuth = new UsernamePasswordAuthenticationToken(\n+                new User(newUsername, \"FAKE_PASSWORD\", auth.getAuthorities()),\n+                auth.getCredentials(), auth.getAuthorities());\n+        SecurityContextHolder.getContext().setAuthentication(newAuth);\n+    }\n+\n+    public static Map<Entitlement, Set<String>> getAuthorizations() {\n+        Map<Entitlement, Set<String>> result = null;\n \n+        final SecurityContext ctx = SecurityContextHolder.getContext();\n         if (ctx != null && ctx.getAuthentication() != null && ctx.getAuthentication().getAuthorities() != null) {\n+            result = new EnumMap<>(Entitlement.class);\n             for (GrantedAuthority authority : ctx.getAuthentication().getAuthorities()) {\n-                result.add(authority.getAuthority());\n+                if (authority instanceof SyncopeGrantedAuthority) {\n+                    result.put(\n+                            SyncopeGrantedAuthority.class.cast(authority).getEntitlement(),\n+                            SyncopeGrantedAuthority.class.cast(authority).getRealms());\n+                }\n             }\n         }\n \n-        return result;\n-    }\n-\n-    /**\n-     * Extend the current authentication context to include the given group.\n-     *\n-     * @param groupKey group key\n-     * @param groupEntitlement group entitlement\n-     */\n-    public static void extendAuthContext(final Long groupKey, final String groupEntitlement) {\n-        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n-        List<GrantedAuthority> authorities = new ArrayList<>(auth.getAuthorities());\n-        authorities.add(new SimpleGrantedAuthority(groupEntitlement));\n-        Authentication newAuth = new UsernamePasswordAuthenticationToken(\n-                auth.getPrincipal(), auth.getCredentials(), authorities);\n-        SecurityContextHolder.getContext().setAuthentication(newAuth);\n+        return MapUtils.emptyIfNull(result);\n     }\n \n     /**\n      * Private default constructor, for static-only classes.\n      */\n-    private AuthContextUtil() {\n+    private AuthContextUtils() {\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtil.java"},{"sha":"8ad1967962c0697db4e4226ce2b097e60477bf64","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":26,"deletions":30,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,10 +26,11 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.misc.policy.PolicyPattern;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -46,6 +47,9 @@ public class PasswordGenerator {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     public String generate(final List<PasswordPolicySpec> ppSpecs)\n             throws InvalidPasswordPolicySpecException {\n \n@@ -59,18 +63,13 @@ public String generate(final List<PasswordPolicySpec> ppSpecs)\n     public String generate(final User user)\n             throws InvalidPasswordPolicySpecException {\n \n-        List<PasswordPolicySpec> ppSpecs = new ArrayList<PasswordPolicySpec>();\n+        List<PasswordPolicySpec> ppSpecs = new ArrayList<>();\n \n-        PasswordPolicy globalPP = policyDAO.getGlobalPasswordPolicy();\n-        if (globalPP != null && globalPP.getSpecification(PasswordPolicySpec.class) != null) {\n-            ppSpecs.add(globalPP.getSpecification(PasswordPolicySpec.class));\n-        }\n+        for (Realm ancestor : realmDAO.findAncestors(user.getRealm())) {\n+            if (ancestor.getPasswordPolicy() != null\n+                    && ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n \n-        for (Group group : user.getGroups()) {\n-            if (group.getPasswordPolicy() != null\n-                    && group.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n-\n-                ppSpecs.add(group.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n+                ppSpecs.add(ancestor.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n             }\n         }\n \n@@ -220,7 +219,8 @@ private String generate(final PasswordPolicySpec policySpec) {\n         //filled empty chars\n         for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n                 firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n-            generatedPassword[firstEmptyChar] = SecureRandomUtil.generateRandomLetter();\n+\n+            generatedPassword[firstEmptyChar] = SecureRandomUtils.generateRandomLetter();\n         }\n \n         checkPrefixAndSuffix(generatedPassword, policySpec);\n@@ -230,42 +230,38 @@ private String generate(final PasswordPolicySpec policySpec) {\n \n     private void checkStartChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         if (policySpec.isMustStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtil.generateRandomLetter();\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n         }\n         if (policySpec.isMustStartWithNonAlpha() || policySpec.isMustStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtil.generateRandomNumber();\n+            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n         }\n         if (policySpec.isMustntStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtil.generateRandomNumber();\n-\n+            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n         }\n         if (policySpec.isMustntStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtil.generateRandomLetter();\n-\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n         }\n         if (policySpec.isMustntStartWithNonAlpha()) {\n-            generatedPassword[0] = SecureRandomUtil.generateRandomLetter();\n-\n+            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n         }\n     }\n \n     private void checkEndChar(final String[] generatedPassword, final PasswordPolicySpec policySpec) {\n         if (policySpec.isMustEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomLetter();\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n         }\n         if (policySpec.isMustEndWithNonAlpha() || policySpec.isMustEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomNumber();\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n         }\n \n         if (policySpec.isMustntEndWithAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomNumber();\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n         }\n         if (policySpec.isMustntEndWithDigit()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomLetter();\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n         }\n         if (policySpec.isMustntEndWithNonAlpha()) {\n-            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtil.generateRandomLetter();\n-\n+            generatedPassword[policySpec.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n         }\n     }\n \n@@ -281,28 +277,28 @@ private void checkRequired(final String[] generatedPassword, final PasswordPolic\n         if (policySpec.isDigitRequired()\n                 && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtil.generateRandomNumber();\n+            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtils.generateRandomNumber();\n         }\n \n         if (policySpec.isUppercaseRequired()\n                 && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n             generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtil.generateRandomLetter().toUpperCase();\n+                    SecureRandomUtils.generateRandomLetter().toUpperCase();\n         }\n \n         if (policySpec.isLowercaseRequired()\n                 && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n             generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtil.generateRandomLetter().toLowerCase();\n+                    SecureRandomUtils.generateRandomLetter().toLowerCase();\n         }\n \n         if (policySpec.isNonAlphanumericRequired()\n                 && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n             generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtil.generateRandomSpecialCharacter(SPECIAL_CHARS);\n+                    SecureRandomUtils.generateRandomSpecialCharacter(SPECIAL_CHARS);\n         }\n     }\n "},{"sha":"f41207ba20810398da06f5dc68b9b7ba7ee7811d","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SecureRandomUtils.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSecureRandomUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSecureRandomUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSecureRandomUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n \n import org.apache.commons.lang3.RandomStringUtils;\n \n-public final class SecureRandomUtil {\n+public final class SecureRandomUtils {\n \n     private static final SecureRandom RANDOM = new SecureRandom();\n \n@@ -42,7 +42,7 @@ public static String generateRandomSpecialCharacter(final char[] characters) {\n         return RandomStringUtils.random(1, 0, 0, false, false, characters, RANDOM);\n     }\n \n-    private SecureRandomUtil() {\n+    private SecureRandomUtils() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SecureRandomUtil.java"},{"sha":"6d530ae23049ba395bcf5c9d7f613671322f2169","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":18,"deletions":29,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,28 +18,28 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.Collections;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.collections4.SetUtils;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.MappingUtil;\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -67,6 +67,9 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n     @Autowired\n     protected ConfDAO confDAO;\n \n+    @Autowired\n+    protected RealmDAO realmDAO;\n+\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -77,7 +80,7 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n     protected ConnectorFactory connFactory;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -232,46 +235,32 @@ protected Set<? extends ExternalResource> getPassthroughResources(final User use\n             }\n         }\n \n-        // 2. look for owned groups, pick the ones whose account policy has authentication resources\n-        for (Group group : user.getGroups()) {\n-            if (group.getAccountPolicy() != null && !group.getAccountPolicy().getResources().isEmpty()) {\n+        // 2. look for realms, pick the ones whose account policy has authentication resources\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+            if (realm.getAccountPolicy() != null && !realm.getAccountPolicy().getResources().isEmpty()) {\n                 if (result == null) {\n-                    result = group.getAccountPolicy().getResources();\n+                    result = realm.getAccountPolicy().getResources();\n                 } else {\n-                    result.retainAll(group.getAccountPolicy().getResources());\n+                    result.retainAll(realm.getAccountPolicy().getResources());\n                 }\n             }\n         }\n \n-        // 3. look for global account policy (if defined)\n-        AccountPolicy global = policyDAO.getGlobalAccountPolicy();\n-        if (global != null && !global.getResources().isEmpty()) {\n-            if (result == null) {\n-                result = global.getResources();\n-            } else {\n-                result.retainAll(global.getResources());\n-            }\n-        }\n-\n-        if (result == null) {\n-            result = Collections.emptySet();\n-        }\n-\n-        return result;\n+        return SetUtils.emptyIfNull(result);\n     }\n \n     protected boolean authenticate(final User user, final String password) {\n         boolean authenticated = encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n         LOG.debug(\"{} authenticated on internal storage: {}\", user.getUsername(), authenticated);\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(AttributableType.USER);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(AttributableType.USER);\n         for (Iterator<? extends ExternalResource> itor = getPassthroughResources(user).iterator();\n                 itor.hasNext() && !authenticated;) {\n \n             ExternalResource resource = itor.next();\n             String accountId = null;\n             try {\n-                accountId = MappingUtil.getAccountIdValue(user, resource, attrUtil.getAccountIdItem(resource));\n+                accountId = MappingUtils.getAccountIdValue(user, resource, attrUtils.getAccountIdItem(resource));\n                 Uid uid = connFactory.getConnector(resource).authenticate(accountId, password, null);\n                 if (uid != null) {\n                     authenticated = true;"},{"sha":"860224ef36ed89942ee0c1d1f21f975417019436","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeGrantedAuthority.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.SetUtils;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.RealmUtils;\n+import org.springframework.security.core.GrantedAuthority;\n+\n+public class SyncopeGrantedAuthority implements GrantedAuthority {\n+\n+    private static final long serialVersionUID = -5647624636011919735L;\n+\n+    private final Entitlement entitlement;\n+\n+    private final Set<String> realms = SetUtils.orderedSet(new HashSet<String>());\n+\n+    public SyncopeGrantedAuthority(final Entitlement entitlement) {\n+        this.entitlement = entitlement;\n+    }\n+\n+    public SyncopeGrantedAuthority(final Entitlement entitlement, final String realm) {\n+        this.entitlement = entitlement;\n+        this.realms.add(realm);\n+    }\n+\n+    public boolean addRealm(final String newRealm) {\n+        return RealmUtils.normalizingAddTo(realms, newRealm);\n+    }\n+\n+    public void addRealms(final List<String> newRealms) {\n+        CollectionUtils.forAllDo(newRealms, new Closure<String>() {\n+\n+            @Override\n+            public void execute(final String newRealm) {\n+                addRealm(newRealm);\n+            }\n+        });\n+    }\n+\n+    public Entitlement getEntitlement() {\n+        return entitlement;\n+    }\n+\n+    public Set<String> getRealms() {\n+        return Collections.unmodifiableSet(realms);\n+    }\n+\n+    @Override\n+    public String getAuthority() {\n+        return entitlement.name();\n+    }\n+\n+}"},{"sha":"31f83462c7a2c2d6f4831dd39fbd377506da9581","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeUserDetailsService.java","status":"modified","additions":52,"deletions":33,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,20 +18,27 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.PredicateUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UserDetailsService;\n@@ -46,9 +53,6 @@ public class SyncopeUserDetailsService implements UserDetailsService {\n     @Autowired\n     protected GroupDAO groupDAO;\n \n-    @Autowired\n-    protected EntitlementDAO entitlementDAO;\n-\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n@@ -57,45 +61,60 @@ public class SyncopeUserDetailsService implements UserDetailsService {\n \n     @Override\n     public UserDetails loadUserByUsername(final String username) {\n-        final Set<SimpleGrantedAuthority> authorities = new HashSet<>();\n+        final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n         if (anonymousUser.equals(username)) {\n-            authorities.add(new SimpleGrantedAuthority(SyncopeConstants.ANONYMOUS_ENTITLEMENT));\n+            authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n         } else if (adminUser.equals(username)) {\n-            for (Entitlement entitlement : entitlementDAO.findAll()) {\n-                authorities.add(new SimpleGrantedAuthority(entitlement.getKey()));\n-            }\n+            CollectionUtils2.collect(Arrays.asList(Entitlement.values()),\n+                    new Transformer<Entitlement, SyncopeGrantedAuthority>() {\n+\n+                        @Override\n+                        public SyncopeGrantedAuthority transform(final Entitlement entitlement) {\n+                            return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                        }\n+                    },\n+                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS)),\n+                    authorities);\n         } else {\n             org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.find(username);\n-\n             if (user == null) {\n                 throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n             }\n \n-            // Give entitlements based on groups assigned to user (and their ancestors)\n-            final Set<Group> groups = new HashSet<>(user.getGroups());\n-            for (Group group : user.getGroups()) {\n-                groups.addAll(groupDAO.findAncestors(group));\n-            }\n-            for (Group group : groups) {\n-                for (Entitlement entitlement : group.getEntitlements()) {\n-                    authorities.add(new SimpleGrantedAuthority(entitlement.getKey()));\n-                }\n+            // Give entitlements as assigned by roles (with realms, where applicable)\n+            for (final Role role : user.getRoles()) {\n+                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<Entitlement>() {\n+\n+                    @Override\n+                    public void execute(final Entitlement entitlement) {\n+                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                        authorities.add(authority);\n+\n+                        List<String> realmFullPahs = new ArrayList<>();\n+                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+\n+                            @Override\n+                            public String transform(final Realm realm) {\n+                                return realm.getFullPath();\n+                            }\n+                        }, realmFullPahs);\n+                        authority.addRealms(realmFullPahs);\n+                    }\n+                });\n             }\n-            // Give group operational entitlements for owned groups\n-            List<Group> ownedGroups = groupDAO.findOwnedByUser(user.getKey());\n-            if (!ownedGroups.isEmpty()) {\n-                authorities.add(new SimpleGrantedAuthority(\"GROUP_CREATE\"));\n-                authorities.add(new SimpleGrantedAuthority(\"GROUP_READ\"));\n-                authorities.add(new SimpleGrantedAuthority(\"GROUP_UPDATE\"));\n-                authorities.add(new SimpleGrantedAuthority(\"GROUP_DELETE\"));\n \n-                for (Group group : ownedGroups) {\n-                    authorities.add(new SimpleGrantedAuthority(\n-                            GroupEntitlementUtil.getEntitlementNameFromGroupKey(group.getKey())));\n+            // Give group entitlements for owned groups\n+            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n+                for (Entitlement entitlement : Arrays.asList(\n+                        Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n+\n+                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                    authority.addRealm(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+                    authorities.add(authority);\n                 }\n             }\n         }\n \n-        return new User(username, \"<PASSWORD_PLACEHOLDER>\", true, true, true, true, authorities);\n+        return new User(username, \"<PASSWORD_PLACEHOLDER>\", authorities);\n     }\n }"},{"sha":"85df5b7129514360fd02d0713f3d01c7aa5bfc29","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/UnauthorizedException.java","status":"renamed","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedException.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -16,14 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.core.misc.security;\n \n-public interface Entitlement extends Entity<String> {\n+import org.apache.syncope.common.lib.types.SubjectType;\n \n-    String getDescription();\n+public class UnauthorizedException extends RuntimeException {\n \n-    void setKey(String key);\n-\n-    void setDescription(String description);\n+    private static final long serialVersionUID = 7540587364235915081L;\n \n+    public UnauthorizedException(final SubjectType subject, final Long key) {\n+        super(\"Missing entitlement or realm administration for \" + subject + \" \" + key);\n+    }\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Entitlement.java"},{"sha":"e1a817ff2f66324928b070846d31aded82732eec","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/UnauthorizedGroupException.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedGroupException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedGroupException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FUnauthorizedGroupException.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,42 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.misc.security;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-\n-public class UnauthorizedGroupException extends RuntimeException {\n-\n-    private static final long serialVersionUID = 7540587364235915081L;\n-\n-    private final Collection<Long> groupIds;\n-\n-    public UnauthorizedGroupException(final Collection<Long> groupIds) {\n-        super(\"Missing entitlement for group(s) \" + groupIds);\n-        this.groupIds = groupIds;\n-    }\n-\n-    public UnauthorizedGroupException(final Long groupId) {\n-        this(Collections.singleton(groupId));\n-    }\n-\n-    public Collection<Long> getGroupIds() {\n-        return groupIds;\n-    }\n-}"},{"sha":"db222afba01033d81c407c5022b1376c1b99202e","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/search/SearchCondConverterTest.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,11 +20,9 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.EntitlementCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -107,18 +105,6 @@ public void resources() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n-    @Test\n-    public void entitlements() {\n-        String fiqlExpression = new GroupFiqlSearchConditionBuilder().hasEntitlements(\"USER_LIST\").query();\n-        assertEquals(SpecialAttr.ENTITLEMENTS + \"==USER_LIST\", fiqlExpression);\n-\n-        EntitlementCond entCond = new EntitlementCond();\n-        entCond.setExpression(\"USER_LIST\");\n-        SearchCond simpleCond = SearchCond.getLeafCond(entCond);\n-\n-        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n-    }\n-\n     @Test\n     public void and() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder()."},{"sha":"723dfe1dd0701d3d71018f797f8900250d0023be","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/GroupEntitlementUtil.java","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FGroupEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FGroupEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FGroupEntitlementUtil.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,92 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api;\n-\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.regex.Pattern;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Utility class for manipulating entitlements.\n- */\n-public final class GroupEntitlementUtil {\n-\n-    private static final Pattern GROUP_ENTITLEMENT_NAME_PATTERN = Pattern.compile(\"^GROUP_([\\\\d])+\");\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(GroupEntitlementUtil.class);\n-\n-    public static String getEntitlementNameFromGroupKey(final Long groupKey) {\n-        return \"GROUP_\" + groupKey;\n-    }\n-\n-    public static boolean isGroupEntitlement(final String entitlementName) {\n-        return GROUP_ENTITLEMENT_NAME_PATTERN.matcher(entitlementName).matches();\n-    }\n-\n-    public static Long getGroupKey(final String entitlementName) {\n-        Long result = null;\n-\n-        if (isGroupEntitlement(entitlementName)) {\n-            try {\n-                result = Long.valueOf(entitlementName.substring(entitlementName.indexOf('_') + 1));\n-            } catch (Exception e) {\n-                LOG.error(\"unable to parse {} to Long\", entitlementName, e);\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    public static Set<Long> getGroupKeys(final Set<String> entitlements) {\n-        Set<Long> result = new HashSet<>();\n-\n-        for (String entitlement : entitlements) {\n-            if (isGroupEntitlement(entitlement)) {\n-                Long groupId = getGroupKey(entitlement);\n-                if (groupId != null) {\n-                    result.add(groupId);\n-                }\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    public static Set<Long> getGroupKeys(final List<Entitlement> entitlements) {\n-        return getGroupKeys(CollectionUtils.collect(entitlements, new Transformer<Entitlement, String>() {\n-\n-            @Override\n-            public String transform(final Entitlement entitlement) {\n-                return entitlement.getKey();\n-            }\n-        }, new HashSet<String>()));\n-    }\n-\n-    /**\n-     * Private default constructor, for static-only classes.\n-     */\n-    private GroupEntitlementUtil() {\n-    }\n-}"},{"sha":"6c959aa5885aa606865ebadeac3ec9827e76a098","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DerSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n@@ -33,5 +33,5 @@ public interface DerSchemaDAO extends DAO<DerSchema, String> {\n \n     <T extends DerSchema> T save(T derSchema);\n \n-    void delete(String name, AttributableUtil attributableUtil);\n+    void delete(String name, AttributableUtils attributableUtil);\n }"},{"sha":"560ff91f62c18f538290e8dc1157a67c822f1d22","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/EntitlementDAO.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FEntitlementDAO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,38 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.dao;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-\n-public interface EntitlementDAO extends DAO<Entitlement, String> {\n-\n-    Entitlement find(String key);\n-\n-    List<Entitlement> findAll();\n-\n-    Entitlement save(Entitlement entitlement);\n-\n-    Entitlement saveGroupEntitlement(Group group);\n-\n-    void delete(String key);\n-\n-    void delete(Entitlement entitlement);\n-}"},{"sha":"a81db9d1f1726493ca72e2c55c5cb1d874e76520","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":8,"deletions":24,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,12 +20,10 @@\n \n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.common.lib.types.PolicyType;\n+import java.util.Set;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n@@ -37,41 +35,27 @@ public interface GroupDAO extends SubjectDAO<GPlainAttr, GDerAttr, GVirAttr> {\n \n     Group find(Long key);\n \n-    List<Group> find(String name);\n+    Group find(String name);\n \n-    Group find(String name, Long parent);\n+    List<Group> findOwnedByUser(Long userKey);\n \n-    List<Group> findOwnedByUser(Long userId);\n+    List<Group> findOwnedByGroup(Long groupKey);\n \n-    List<Group> findOwnedByGroup(Long groupId);\n-\n-    List<Group> findByEntitlement(Entitlement entitlement);\n-\n-    List<Group> findByPolicy(Policy policy);\n-\n-    List<Group> findWithoutPolicy(PolicyType type);\n-\n-    List<Group> findAncestors(Group group);\n-\n-    List<Group> findChildren(Group group);\n-\n-    List<Group> findDescendants(Group group);\n+    List<Group> findByAttrValue(String schemaName, GPlainAttrValue attrValue);\n \n     List<Group> findByDerAttrValue(String schemaName, String value);\n \n-    List<Group> findByAttrValue(String schemaName, GPlainAttrValue attrValue);\n-\n     Group findByAttrUniqueValue(String schemaName, GPlainAttrValue attrUniqueValue);\n \n     List<Group> findByResource(ExternalResource resource);\n \n-    List<Group> findAll();\n+    List<Group> findAll(Set<String> adminRealms, int page, int itemsPerPage);\n \n-    List<Group> findAll(int page, int itemsPerPage, List<OrderByClause> orderBy);\n+    List<Group> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n \n     List<Membership> findMemberships(Group group);\n \n-    int count();\n+    int count(Set<String> adminRealms);\n \n     Group save(Group group);\n "},{"sha":"122faee6f3550e2095ad4f8efc32a45aee7ade62","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n@@ -33,5 +33,5 @@ public interface PlainSchemaDAO extends DAO<PlainSchema, String> {\n \n     <T extends PlainSchema> T save(T schema);\n \n-    void delete(String name, AttributableUtil attributableUtil);\n+    void delete(String name, AttributableUtils attributableUtil);\n }"},{"sha":"dff687d98656dbd6854e822931dab45d45ba099e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PolicyDAO.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,9 +22,7 @@\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n \n public interface PolicyDAO extends DAO<Policy, Long> {\n \n@@ -34,12 +32,6 @@ public interface PolicyDAO extends DAO<Policy, Long> {\n \n     List<AccountPolicy> findByResource(ExternalResource resource);\n \n-    PasswordPolicy getGlobalPasswordPolicy();\n-\n-    AccountPolicy getGlobalAccountPolicy();\n-\n-    SyncPolicy getGlobalSyncPolicy();\n-\n     List<Policy> findAll();\n \n     <T extends Policy> T save(T policy);"},{"sha":"515779e99902737b30d28673cbf02dfc4fcb5acc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface RealmDAO extends DAO<Realm, Long> {\n@@ -29,6 +30,10 @@ public interface RealmDAO extends DAO<Realm, Long> {\n \n     Realm find(String fullPath);\n \n+    <T extends Policy> List<Realm> findByPolicy(T policy);\n+\n+    List<Realm> findAncestors(Realm realm);\n+\n     List<Realm> findChildren(Realm realm);\n \n     List<Realm> findDescendants(Realm realm);"},{"sha":"aca7bf481fe0b11a8f1e7f50f1084a1cdf86c3d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SubjectDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -31,14 +31,14 @@\n         extends DAO<Subject<P, D, V>, Long> {\n \n     List<? extends Subject<P, D, V>> findByAttrValue(\n-            String schemaName, PlainAttrValue attrValue, AttributableUtil attrUtil);\n+            String schemaName, PlainAttrValue attrValue, AttributableUtils attrUtils);\n \n     Subject<P, D, V> findByAttrUniqueValue(\n-            String schemaName, PlainAttrValue attrUniqueValue, AttributableUtil attrUtil);\n+            String schemaName, PlainAttrValue attrUniqueValue, AttributableUtils attrUtils);\n \n     List<? extends Subject<P, D, V>> findByDerAttrValue(\n-            String schemaName, String value, AttributableUtil attrUtil);\n+            String schemaName, String value, AttributableUtils attrUtils);\n \n     List<? extends Subject<P, D, V>> findByResource(\n-            ExternalResource resource, AttributableUtil attrUtil);\n+            ExternalResource resource, AttributableUtils attrUtils);\n }"},{"sha":"a4cd7d410ba5939621c3628619c8a0600344524f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SubjectSearchDAO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSubjectSearchDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,36 +28,36 @@\n public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>, Long> {\n \n     /**\n-     * @param adminGroups the set of admin groups owned by the caller\n+     * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param type user or group\n      * @return size of search result\n      */\n-    int count(Set<Long> adminGroups, SearchCond searchCondition, SubjectType type);\n+    int count(Set<String> adminRealms, SearchCond searchCondition, SubjectType type);\n \n     /**\n-     * @param adminGroups the set of admin groups owned by the caller\n+     * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param type user or group\n      * @param <T> user/group\n      * @return the list of users/groups matching the given search condition\n      */\n     <T extends Subject<?, ?, ?>> List<T> search(\n-            Set<Long> adminGroups, SearchCond searchCondition, SubjectType type);\n+            Set<String> adminRealms, SearchCond searchCondition, SubjectType type);\n \n     /**\n-     * @param adminGroups the set of admin groups owned by the caller\n+     * @param adminRealms the set of admin groups owned by the caller\n      * @param searchCondition the search condition\n      * @param orderBy list of ordering clauses\n      * @param type user or group\n      * @param <T> user/group\n      * @return the list of users/groups matching the given search condition\n      */\n     <T extends Subject<?, ?, ?>> List<T> search(\n-            Set<Long> adminGroups, SearchCond searchCondition, List<OrderByClause> orderBy, SubjectType type);\n+            Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, SubjectType type);\n \n     /**\n-     * @param adminGroups the set of admin groups owned by the caller\n+     * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param page position of the first result, start from 1\n      * @param itemsPerPage number of results per page\n@@ -67,7 +67,7 @@ public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>, Long> {\n      * @return the list of users/groups matching the given search condition (in the given page)\n      */\n     <T extends Subject<?, ?, ?>> List<T> search(\n-            Set<Long> adminGroups, SearchCond searchCondition, int page, int itemsPerPage,\n+            Set<String> adminRealms, SearchCond searchCondition, int page, int itemsPerPage,\n             List<OrderByClause> orderBy, SubjectType type);\n \n     /**"},{"sha":"46388b363f2dc516b3ff89281273c21e6cd1a9ec","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -49,11 +49,11 @@ public interface UserDAO extends SubjectDAO<UPlainAttr, UDerAttr, UVirAttr> {\n \n     List<User> findByResource(ExternalResource resource);\n \n-    List<User> findAll(Set<Long> adminGroups, int page, int itemsPerPage);\n+    List<User> findAll(Set<String> adminRealms, int page, int itemsPerPage);\n \n-    List<User> findAll(Set<Long> adminGroups, int page, int itemsPerPage, List<OrderByClause> orderBy);\n+    List<User> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n \n-    int count(Set<Long> adminGroups);\n+    int count(Set<String> adminRealms);\n \n     User save(User user);\n "},{"sha":"160f1098c98e7342424baca7fa67c581be21da0e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n@@ -33,5 +33,5 @@ public interface VirSchemaDAO extends DAO<VirSchema, String> {\n \n     <T extends VirSchema> T save(T virSchema);\n \n-    void delete(String key, AttributableUtil attributableUtil);\n+    void delete(String key, AttributableUtils attributableUtil);\n }"},{"sha":"b36cd18d55f31462cad8c6371a822092929a0c82","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtils.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n \n-public interface AttributableUtil {\n+public interface AttributableUtils {\n \n     AttributableType getType();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtil.java"},{"sha":"4b5e363128b504ddf417f0fca15921307fec7136","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtilsFactory.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtilsFactory.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,13 +21,13 @@\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n-public interface AttributableUtilFactory {\n+public interface AttributableUtilsFactory {\n \n-    AttributableUtil getInstance(AttributableType type);\n+    AttributableUtils getInstance(AttributableType type);\n \n-    AttributableUtil getInstance(String attributableType);\n+    AttributableUtils getInstance(String attributableType);\n \n-    AttributableUtil getInstance(ObjectClass objectClass);\n+    AttributableUtils getInstance(ObjectClass objectClass);\n \n-    AttributableUtil getInstance(Attributable<?, ?, ?> attributable);\n+    AttributableUtils getInstance(Attributable<?, ?, ?> attributable);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtilFactory.java"},{"sha":"91a6a0fab0011fced6d62c62336fa2b3bdef6a1d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,5 @@ public interface EntityFactory {\n \n     <KEY, T extends Entity<KEY>> T newEntity(Class<T> reference);\n \n-    <T extends Policy> T newPolicy(Class<T> reference, boolean global);\n-\n     ConnPoolConf newConnPoolConf();\n }"},{"sha":"847477847d1b1be35df295ed8970c02e1ab68c7a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n \n public interface PlainAttr extends Attr<PlainSchema> {\n \n-    void addValue(String value, AttributableUtil attributableUtil);\n+    void addValue(String value, AttributableUtils attributableUtil);\n \n     boolean removeValue(PlainAttrValue attrValue);\n "},{"sha":"07058049f5a9f682fd0d177ac6da1317fe28235c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,10 +28,6 @@ public interface Role extends Entity<Long> {\n \n     void setName(String name);\n \n-    String getCriteria();\n-\n-    void setCriteria(String criteria);\n-\n     Set<Entitlement> getEntitlements();\n \n     boolean addRealm(Realm realm);"},{"sha":"11f0c81e172f25affb136d834d56be42097465f5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Subject.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSubject.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,6 +22,10 @@\n \n public interface Subject<N extends PlainAttr, D extends DerAttr, V extends VirAttr> extends Attributable<N, D, V> {\n \n+    Realm getRealm();\n+\n+    void setRealm(Realm realm);\n+\n     boolean addResource(ExternalResource resource);\n \n     boolean removeResource(ExternalResource resource);"},{"sha":"6de9a8114b2a8d8c36fdde6be5af30301b17d322","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":10,"deletions":95,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,11 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity.group;\n \n import java.util.List;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -32,113 +28,40 @@ public interface Group extends Subject<GPlainAttr, GDerAttr, GVirAttr> {\n \n     String getName();\n \n-    Group getParent();\n-\n-    boolean addEntitlement(Entitlement entitlement);\n-\n-    boolean removeEntitlement(Entitlement entitlement);\n-\n-    /**\n-     * Get all inherited attributes from the ancestors.\n-     *\n-     * @return a list of inherited and only inherited attributes.\n-     */\n-    List<? extends GPlainAttr> findLastInheritedAncestorPlainAttrs();\n-\n-    /**\n-     * Get all inherited derived attributes from the ancestors.\n-     *\n-     * @return a list of inherited and only inherited attributes.\n-     */\n-    List<? extends GDerAttr> findLastInheritedAncestorDerAttrs();\n-\n-    /**\n-     * Get all inherited virtual attributes from the ancestors.\n-     *\n-     * @return a list of inherited and only inherited attributes.\n-     */\n-    List<? extends GVirAttr> findLastInheritedAncestorVirAttrs();\n-\n-    /**\n-     * Get first valid account policy.\n-     *\n-     * @return parent account policy if isInheritAccountPolicy is 'true' and parent is not null, local account policy\n-     * otherwise.\n-     */\n-    AccountPolicy getAccountPolicy();\n-\n-    <T extends AttrTemplate<K>, K extends Schema> List<T> findInheritedTemplates(Class<T> reference);\n-\n-    <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n-            Class<T> reference, String schemaName);\n+    <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(Class<T> reference, String schemaName);\n \n     <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(Class<T> reference);\n \n     <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(Class<T> reference);\n \n-    Set<? extends Entitlement> getEntitlements();\n-\n-    /**\n-     * Get first valid password policy.\n-     *\n-     * @return parent password policy if isInheritPasswordPolicy is 'true' and parent is not null, local password policy\n-     * otherwise\n-     */\n-    PasswordPolicy getPasswordPolicy();\n-\n     Group getGroupOwner();\n \n     User getUserOwner();\n \n-    boolean isInheritAccountPolicy();\n-\n-    boolean isInheritPlainAttrs();\n-\n-    boolean isInheritDerAttrs();\n-\n-    boolean isInheritOwner();\n-\n-    boolean isInheritPasswordPolicy();\n-\n-    boolean isInheritTemplates();\n-\n-    boolean isInheritVirAttrs();\n-\n-    void setAccountPolicy(AccountPolicy accountPolicy);\n-\n-    void setInheritAccountPolicy(boolean condition);\n-\n-    void setInheritPlainAttrs(boolean inheritAttrs);\n-\n-    void setInheritDerAttrs(boolean inheritDerAttrs);\n-\n-    void setInheritOwner(boolean inheritOwner);\n-\n-    void setInheritPasswordPolicy(boolean condition);\n-\n-    void setInheritTemplates(boolean condition);\n-\n-    void setInheritVirAttrs(boolean inheritVirAttrs);\n-\n     void setName(String name);\n \n-    void setParent(Group parent);\n-\n-    void setPasswordPolicy(PasswordPolicy passwordPolicy);\n-\n     void setGroupOwner(Group groupOwner);\n \n     void setUserOwner(User userOwner);\n \n     @Override\n     boolean addPlainAttr(GPlainAttr attr);\n \n+    @Override\n+    boolean removePlainAttr(GPlainAttr attr);\n+\n     @Override\n     boolean addDerAttr(GDerAttr attr);\n \n+    @Override\n+    boolean removeDerAttr(GDerAttr derAttr);\n+\n     @Override\n     boolean addVirAttr(GVirAttr attr);\n \n+    @Override\n+    boolean removeVirAttr(GVirAttr virAttr);\n+\n     @Override\n     GPlainAttr getPlainAttr(String plainSchemaName);\n \n@@ -157,12 +80,4 @@ <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n     @Override\n     List<? extends GVirAttr> getVirAttrs();\n \n-    @Override\n-    boolean removePlainAttr(GPlainAttr attr);\n-\n-    @Override\n-    boolean removeDerAttr(GDerAttr derAttr);\n-\n-    @Override\n-    boolean removeVirAttr(GVirAttr virAttr);\n }"},{"sha":"600ef8824aef0e2a39227bba8f2cc2909860ec7d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SyncTask.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,9 +20,12 @@\n \n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface SyncTask extends ProvisioningTask {\n \n+    Realm getDestinatioRealm();\n+\n     GroupTO getGroupTemplate();\n \n     UserTO getUserTemplate();\n@@ -34,4 +37,6 @@ public interface SyncTask extends ProvisioningTask {\n     void setGroupTemplate(GroupTO groupTemplate);\n \n     void setUserTemplate(UserTO userTemplate);\n+\n+    void setDestinationRealm(Realm destinationRealm);\n }"},{"sha":"2e007848d804bb22f14665554b8b1fa63183d139","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtils.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n \n-public interface TaskUtil {\n+public interface TaskUtils {\n \n     TaskType getType();\n ","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtil.java"},{"sha":"6da4de9e7016c25428ab6ca75eec47a0cdbefa7e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtilsFactory.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtilsFactory.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,13 +21,13 @@\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n \n-public interface TaskUtilFactory {\n+public interface TaskUtilsFactory {\n \n-    TaskUtil getInstance(TaskType type);\n+    TaskUtils getInstance(TaskType type);\n \n-    TaskUtil getInstance(Task task);\n+    TaskUtils getInstance(Task task);\n \n-    TaskUtil getInstance(Class<? extends AbstractTaskTO> taskClass);\n+    TaskUtils getInstance(Class<? extends AbstractTaskTO> taskClass);\n \n-    TaskUtil getInstance(AbstractTaskTO taskTO);\n+    TaskUtils getInstance(AbstractTaskTO taskTO);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtilFactory.java"},{"sha":"303d756b5d43c40d2ba76f514f15d356ec38c8d5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -23,12 +23,15 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n+    boolean addRole(Role role);\n+\n     boolean addMembership(Membership membership);\n \n     boolean canDecodePassword();\n@@ -47,6 +50,8 @@ public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n     Date getLastLoginDate();\n \n+    List<? extends Role> getRoles();\n+\n     Membership getMembership(Long groupKey);\n \n     List<? extends Membership> getMemberships();\n@@ -81,6 +86,8 @@ public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n     void removeClearPassword();\n \n+    boolean removeRole(Role role);\n+\n     boolean removeMembership(Membership membership);\n \n     void removeToken();"},{"sha":"26422f6a6b37fe0bdbff3ee0d22536ffb232609a","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -111,6 +111,11 @@ under the License.\n       <version>${slf4j.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>jcl-over-slf4j</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>com.h2database</groupId>\n       <artifactId>h2</artifactId>"},{"sha":"49b573aeead762bfd97b29e305964012b0fb9d16","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -65,7 +65,8 @@ public Map<String, Integer> extractData(final ResultSet rs)\n \n                         Map<String, Integer> colTypes = new HashMap<>();\n                         for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {\n-                            colTypes.put(rs.getMetaData().getColumnName(i).toUpperCase(),\n+                            colTypes.put(\n+                                    rs.getMetaData().getColumnName(i).toUpperCase(),\n                                     rs.getMetaData().getColumnType(i));\n                         }\n                         return colTypes;\n@@ -191,7 +192,6 @@ public void startElement(final String uri, final String localName, final String\n         query.append(\") VALUES (\").append(values).append(')');\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n         try {\n             jdbcTemplate.update(query.toString(), getParameters(qName, atts));\n         } catch (DataAccessException e) {"},{"sha":"247da9eadeec406a5a5ca89a1c74bb31ca84dab4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractSubjectDAO.java","status":"modified","additions":33,"deletions":20,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -35,7 +35,11 @@\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -56,6 +60,15 @@\n     @Autowired\n     protected DerSchemaDAO derSchemaDAO;\n \n+    @Autowired\n+    protected SubjectSearchDAO searchDAO;\n+\n+    protected SearchCond getAllMatchingCond() {\n+        SubjectCond idCond = new SubjectCond(AttributeCond.Type.ISNOTNULL);\n+        idCond.setSchema(\"id\");\n+        return SearchCond.getLeafCond(idCond);\n+    }\n+\n     /**\n      * Split an attribute value recurring on provided literals/tokens.\n      *\n@@ -82,10 +95,10 @@ private List<String> split(final String attrValue, final List<String> literals)\n      *\n      * @param expression derived schema expression\n      * @param value derived attribute value\n-     * @param attrUtil USER / GROUP\n+     * @param attrUtils USER / GROUP\n      * @return where clauses to use to build the query\n      */\n-    private Set<String> getWhereClause(final String expression, final String value, final AttributableUtil attrUtil) {\n+    private Set<String> getWhereClause(final String expression, final String value, final AttributableUtils attrUtils) {\n         final Parser parser = new Parser(new StringReader(expression));\n \n         // Schema names\n@@ -149,7 +162,7 @@ public int compare(final String t, final String t1) {\n             if (!used.contains(identifiers.get(i))) {\n \n                 // verify schema existence and get schema type\n-                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i), attrUtil.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i), attrUtils.plainSchemaClass());\n                 if (schema == null) {\n                     LOG.error(\"Invalid schema name '{}'\", identifiers.get(i));\n                     throw new IllegalArgumentException(\"Invalid schema name \" + identifiers.get(i));\n@@ -217,17 +230,17 @@ private Query findByAttrValueQuery(final String entityName) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<? extends Subject<P, D, V>> findByAttrValue(\n-            final String schemaName, final PlainAttrValue attrValue, final AttributableUtil attrUtil) {\n+            final String schemaName, final PlainAttrValue attrValue, final AttributableUtils attrUtils) {\n \n-        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtil.plainSchemaClass());\n+        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtils.plainSchemaClass());\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaName);\n             return Collections.<Subject<P, D, V>>emptyList();\n         }\n \n         final String entityName = schema.isUniqueConstraint()\n-                ? attrUtil.plainAttrUniqueValueClass().getName()\n-                : attrUtil.plainAttrValueClass().getName();\n+                ? attrUtils.plainAttrUniqueValueClass().getName()\n+                : attrUtils.plainAttrValueClass().getName();\n \n         Query query = findByAttrValueQuery(entityName);\n \n@@ -257,9 +270,9 @@ public List<? extends Subject<P, D, V>> findByAttrValue(\n \n     @Override\n     public Subject<P, D, V> findByAttrUniqueValue(\n-            final String schemaName, final PlainAttrValue attrUniqueValue, final AttributableUtil attrUtil) {\n+            final String schemaName, final PlainAttrValue attrUniqueValue, final AttributableUtils attrUtils) {\n \n-        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtil.plainSchemaClass());\n+        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtils.plainSchemaClass());\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaName);\n             return null;\n@@ -269,7 +282,7 @@ public Subject<P, D, V> findByAttrUniqueValue(\n             return null;\n         }\n \n-        List<? extends Subject<P, D, V>> result = findByAttrValue(schemaName, attrUniqueValue, attrUtil);\n+        List<? extends Subject<P, D, V>> result = findByAttrValue(schemaName, attrUniqueValue, attrUtils);\n         return result.isEmpty()\n                 ? null\n                 : result.iterator().next();\n@@ -283,14 +296,14 @@ public Subject<P, D, V> findByAttrUniqueValue(\n      *\n      * @param schemaName derived schema name\n      * @param value derived attribute value\n-     * @param attrUtil AttributableUtil\n+     * @param attrUtils AttributableUtil\n      * @return list of users / groups\n      */\n     @Override\n     public List<? extends Subject<P, D, V>> findByDerAttrValue(\n-            final String schemaName, final String value, final AttributableUtil attrUtil) {\n+            final String schemaName, final String value, final AttributableUtils attrUtils) {\n \n-        DerSchema schema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n+        DerSchema schema = derSchemaDAO.find(schemaName, attrUtils.derSchemaClass());\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaName);\n             return Collections.<Subject<P, D, V>>emptyList();\n@@ -300,16 +313,16 @@ public List<? extends Subject<P, D, V>> findByDerAttrValue(\n         final StringBuilder querystring = new StringBuilder();\n \n         boolean subquery = false;\n-        for (String clause : getWhereClause(schema.getExpression(), value, attrUtil)) {\n+        for (String clause : getWhereClause(schema.getExpression(), value, attrUtils)) {\n             if (querystring.length() > 0) {\n                 subquery = true;\n                 querystring.append(\" AND a.owner_id IN ( \");\n             }\n \n             querystring.append(\"SELECT a.owner_id \").\n-                    append(\"FROM \").append(attrUtil.plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n-                    append(attrUtil.plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n-                    append(attrUtil.plainSchemaClass().getSimpleName().substring(3)).append(\" s \").\n+                    append(\"FROM \").append(attrUtils.plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n+                    append(attrUtils.plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n+                    append(attrUtils.plainSchemaClass().getSimpleName().substring(3)).append(\" s \").\n                     append(\"WHERE \").append(clause);\n \n             if (subquery) {\n@@ -335,10 +348,10 @@ public List<? extends Subject<P, D, V>> findByDerAttrValue(\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<? extends Subject<P, D, V>> findByResource(\n-            final ExternalResource resource, final AttributableUtil attrUtil) {\n+            final ExternalResource resource, final AttributableUtils attrUtils) {\n \n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM \" + attrUtil.attributableClass().getSimpleName() + \" e \"\n+                \"SELECT e FROM \" + attrUtils.attributableClass().getSimpleName() + \" e \"\n                 + \"WHERE :resource MEMBER OF e.resources\");\n         query.setParameter(\"resource\", resource);\n "},{"sha":"48e9f5e16458f795721246bb5d531442d4a2e78b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n@@ -42,7 +42,7 @@ public class JPAConfDAO extends AbstractDAO<Conf, Long> implements ConfDAO {\n     private PlainAttrDAO attrDAO;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     @Override\n     public Conf get() {\n@@ -71,7 +71,7 @@ public CPlainAttr find(final String key, final String defaultValue) {\n             result = new JPACPlainAttr();\n             result.setSchema(schemaDAO.find(key, CPlainSchema.class));\n \n-            result.addValue(defaultValue, attrUtilFactory.getInstance(AttributableType.CONFIGURATION));\n+            result.addValue(defaultValue, attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n         }\n \n         return result;"},{"sha":"be0ec944e86ded9b84a77da02934ef2020cbf384","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n@@ -101,7 +101,7 @@ public <T extends DerSchema> T save(final T derSchema) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public void delete(final String key, final AttributableUtil attributableUtil) {\n+    public void delete(final String key, final AttributableUtils attributableUtil) {\n         final DerSchema schema = find(key, attributableUtil.derSchemaClass());\n         if (schema == null) {\n             return;"},{"sha":"18c0776f8c3d3ae442cda176283e62668e0ffe3f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAEntitlementDAO.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,88 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.List;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAEntitlement;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n-\n-@Repository\n-public class JPAEntitlementDAO extends AbstractDAO<Entitlement, String> implements EntitlementDAO {\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Override\n-    public Entitlement find(final String name) {\n-        return entityManager.find(JPAEntitlement.class, name);\n-    }\n-\n-    @Override\n-    public List<Entitlement> findAll() {\n-        TypedQuery<Entitlement> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAEntitlement.class.getSimpleName() + \" e\", Entitlement.class);\n-\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public Entitlement save(final Entitlement entitlement) {\n-        return entityManager.merge(entitlement);\n-    }\n-\n-    @Override\n-    public Entitlement saveGroupEntitlement(final Group group) {\n-        Entitlement groupEnt = new JPAEntitlement();\n-        groupEnt.setKey(GroupEntitlementUtil.getEntitlementNameFromGroupKey(group.getKey()));\n-        groupEnt.setDescription(\"Entitlement for managing group \" + group.getKey());\n-\n-        return save(groupEnt);\n-    }\n-\n-    @Override\n-    public void delete(final String name) {\n-        Entitlement entitlement = find(name);\n-        if (entitlement == null) {\n-            return;\n-        }\n-\n-        delete(entitlement);\n-    }\n-\n-    @Override\n-    public void delete(final Entitlement entitlement) {\n-        if (entitlement == null) {\n-            return;\n-        }\n-\n-        for (Group group : groupDAO.findByEntitlement(entitlement)) {\n-            group.removeEntitlement(entitlement);\n-            groupDAO.save(group);\n-        }\n-\n-        entityManager.remove(entitlement);\n-    }\n-}"},{"sha":"c32324e7314e9537fbe8ad374b46996ccea5ed18","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -38,9 +38,6 @@\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n-import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractMappingItem;\n@@ -92,17 +89,14 @@ private StringBuilder getByPolicyQuery(final PolicyType type) {\n                 append(\" e WHERE e.\");\n         switch (type) {\n             case ACCOUNT:\n-            case GLOBAL_ACCOUNT:\n                 query.append(\"accountPolicy\");\n                 break;\n \n             case PASSWORD:\n-            case GLOBAL_PASSWORD:\n                 query.append(\"passwordPolicy\");\n                 break;\n \n             case SYNC:\n-            case GLOBAL_SYNC:\n                 query.append(\"syncPolicy\");\n                 break;\n "},{"sha":"73fc4569234323bc6b3dd5fb774c484a63338cb3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":53,"deletions":240,"changes":293,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -31,24 +30,20 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerAttr;\n@@ -70,8 +65,10 @@\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.core.misc.RealmUtils;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -92,10 +89,7 @@ public class JPAGroupDAO extends AbstractSubjectDAO<GPlainAttr, GDerAttr, GVirAt\n     private VirAttrDAO virAttrDAO;\n \n     @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n-    @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     @Override\n     protected Subject<GPlainAttr, GDerAttr, GVirAttr> findInternal(final Long key) {\n@@ -119,46 +113,19 @@ public Group find(final Long key) {\n     }\n \n     @Override\n-    public List<Group> find(final String name) {\n+    public Group find(final String name) {\n         TypedQuery<Group> query = entityManager.createQuery(\n                 \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.name = :name\", Group.class);\n         query.setParameter(\"name\", name);\n \n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public Group find(final String name, final Long parentId) {\n-        TypedQuery<Group> query;\n-        if (parentId == null) {\n-            query = entityManager.createQuery(\"SELECT r FROM \" + JPAGroup.class.getSimpleName() + \" r WHERE \"\n-                    + \"r.name=:name AND r.parent IS NULL\", Group.class);\n-        } else {\n-            query = entityManager.createQuery(\"SELECT r FROM \" + JPAGroup.class.getSimpleName() + \" r WHERE \"\n-                    + \"r.name=:name AND r.parent.id=:parentId\", Group.class);\n-            query.setParameter(\"parentId\", parentId);\n+        Group result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No group found with name {}\", name, e);\n         }\n-        query.setParameter(\"name\", name);\n-\n-        List<Group> result = query.getResultList();\n-        return result.isEmpty()\n-                ? null\n-                : result.get(0);\n-    }\n-\n-    private void findSameOwnerDescendants(final List<Group> result, final Group group) {\n-        List<Group> children = findChildren(group);\n-        if (children != null) {\n-            for (Group child : children) {\n-                if ((child.getUserOwner() == null && child.getGroupOwner() == null && child.isInheritOwner())\n-                        || (child.getUserOwner() != null && child.getUserOwner().equals(group.getUserOwner()))\n-                        || (child.getGroupOwner() != null && child.getGroupOwner().equals(group.getGroupOwner()))) {\n \n-                    findDescendants(result, child);\n-                }\n-            }\n-        }\n-        result.add(group);\n+        return result;\n     }\n \n     @Transactional(readOnly = true)\n@@ -178,12 +145,7 @@ public List<Group> findOwnedByUser(final Long userKey) {\n         TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n \n-        List<Group> result = new ArrayList<>();\n-        for (Group group : query.getResultList()) {\n-            findSameOwnerDescendants(result, group);\n-        }\n-\n-        return result;\n+        return query.getResultList();\n     }\n \n     @Transactional(readOnly = true)\n@@ -200,187 +162,57 @@ public List<Group> findOwnedByGroup(final Long groupId) {\n         TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n \n-        List<Group> result = new ArrayList<>();\n-        for (Group group : query.getResultList()) {\n-            findSameOwnerDescendants(result, group);\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public List<Group> findByEntitlement(final Entitlement entitlement) {\n-        TypedQuery<Group> query = entityManager.createQuery(\"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e \"\n-                + \"WHERE :entitlement MEMBER OF e.entitlements\", Group.class);\n-        query.setParameter(\"entitlement\", entitlement);\n-\n         return query.getResultList();\n     }\n \n-    private Map.Entry<String, String> getPolicyFields(final PolicyType type) {\n-        String policyField;\n-        String inheritPolicyField;\n-        if (type == PolicyType.GLOBAL_ACCOUNT || type == PolicyType.ACCOUNT) {\n-            policyField = \"accountPolicy\";\n-            inheritPolicyField = \"inheritAccountPolicy\";\n-        } else {\n-            policyField = \"passwordPolicy\";\n-            inheritPolicyField = \"inheritPasswordPolicy\";\n-        }\n-\n-        return new AbstractMap.SimpleEntry<>(policyField, inheritPolicyField);\n-    }\n-\n-    private List<Group> findSamePolicyChildren(final Group group, final PolicyType type) {\n-        List<Group> result = new ArrayList<>();\n-\n-        for (Group child : findChildren(group)) {\n-            boolean inherit = type == PolicyType.GLOBAL_ACCOUNT || type == PolicyType.ACCOUNT\n-                    ? child.isInheritAccountPolicy()\n-                    : child.isInheritPasswordPolicy();\n-            if (inherit) {\n-                result.add(child);\n-                result.addAll(findSamePolicyChildren(child, type));\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public List<Group> findByPolicy(final Policy policy) {\n-        if (policy.getType() == PolicyType.GLOBAL_SYNC || policy.getType() == PolicyType.SYNC) {\n-            return Collections.<Group>emptyList();\n-        }\n-\n-        Map.Entry<String, String> policyFields = getPolicyFields(policy.getType());\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(JPAGroup.class.getSimpleName()).append(\" e WHERE e.\").\n-                append(policyFields.getKey()).append(\" = :policy AND (e.\").\n-                append(policyFields.getValue()).append(\" IS NULL OR e.\").\n-                append(policyFields.getValue()).append(\" = 0)\");\n-\n-        TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n-        query.setParameter(\"policy\", policy);\n-\n-        List<Group> result = new ArrayList<>();\n-        for (Group group : query.getResultList()) {\n-            result.add(group);\n-            result.addAll(findSamePolicyChildren(group, policy.getType()));\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public List<Group> findWithoutPolicy(final PolicyType type) {\n-        if (type == PolicyType.GLOBAL_SYNC || type == PolicyType.SYNC) {\n-            return Collections.<Group>emptyList();\n-        }\n-\n-        Map.Entry<String, String> policyFields = getPolicyFields(type);\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(JPAGroup.class.getSimpleName()).append(\" e WHERE e.\").\n-                append(policyFields.getKey()).append(\" IS NULL AND (e.\").\n-                append(policyFields.getValue()).append(\" IS NULL OR e.\").\n-                append(policyFields.getValue()).append(\" = 0)\");\n-\n-        TypedQuery<Group> query = entityManager.createQuery(queryString.toString(), Group.class);\n-        return query.getResultList();\n-    }\n-\n-    private void findAncestors(final List<Group> result, final Group group) {\n-        if (group.getParent() != null && !result.contains(group.getParent())) {\n-            result.add(group.getParent());\n-            findAncestors(result, group.getParent());\n-        }\n-    }\n-\n-    @Override\n-    public List<Group> findAncestors(final Group group) {\n-        List<Group> result = new ArrayList<>();\n-        findAncestors(result, group);\n-        return result;\n-    }\n-\n-    @Override\n-    public List<Group> findChildren(final Group group) {\n-        TypedQuery<Group> query = entityManager.createQuery(\n-                \"SELECT g FROM \" + JPAGroup.class.getSimpleName() + \" g WHERE g.parent=:group\", Group.class);\n-        query.setParameter(\"group\", group);\n-\n-        return query.getResultList();\n-    }\n-\n-    private void findDescendants(final List<Group> result, final Group group) {\n-        List<Group> children = findChildren(group);\n-        if (children != null) {\n-            for (Group child : children) {\n-                findDescendants(result, child);\n-            }\n-        }\n-        result.add(group);\n-    }\n-\n-    @Override\n-    public List<Group> findDescendants(final Group group) {\n-        List<Group> result = new ArrayList<>();\n-        findDescendants(result, group);\n-        return result;\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<Group> findByAttrValue(final String schemaName, final GPlainAttrValue attrValue) {\n         return (List<Group>) findByAttrValue(\n-                schemaName, attrValue, attrUtilFactory.getInstance(AttributableType.GROUP));\n+                schemaName, attrValue, attrUtilsFactory.getInstance(AttributableType.GROUP));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public Group findByAttrUniqueValue(final String schemaName, final GPlainAttrValue attrUniqueValue) {\n-        return (Group) findByAttrUniqueValue(schemaName, attrUniqueValue,\n-                attrUtilFactory.getInstance(AttributableType.GROUP));\n+        return (Group) findByAttrUniqueValue(\n+                schemaName, attrUniqueValue, attrUtilsFactory.getInstance(AttributableType.GROUP));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<Group> findByDerAttrValue(final String schemaName, final String value) {\n         return (List<Group>) findByDerAttrValue(\n-                schemaName, value, attrUtilFactory.getInstance(AttributableType.GROUP));\n+                schemaName, value, attrUtilsFactory.getInstance(AttributableType.GROUP));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<Group> findByResource(final ExternalResource resource) {\n-        return (List<Group>) findByResource(resource, attrUtilFactory.getInstance(AttributableType.GROUP));\n+        return (List<Group>) findByResource(resource, attrUtilsFactory.getInstance(AttributableType.GROUP));\n     }\n \n     @Override\n-    public List<Group> findAll() {\n-        return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n+    public final List<Group> findAll(final Set<String> adminRealms, final int page, final int itemsPerPage) {\n+        return findAll(adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n     }\n \n     @Override\n-    public List<Group> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n-        TypedQuery<Group> query = entityManager.createQuery(\"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e \"\n-                + toOrderByStatement(Group.class, \"e\", orderBy), Group.class);\n-\n-        query.setFirstResult(itemsPerPage * (page <= 0\n-                ? 0\n-                : page - 1));\n+    public List<Group> findAll(final Set<String> adminRealms,\n+            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n \n-        if (itemsPerPage > 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n+        return searchDAO.search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy, SubjectType.GROUP);\n+    }\n \n-        return query.getResultList();\n+    @Override\n+    public final int count(final Set<String> adminRealms) {\n+        return searchDAO.count(adminRealms, getAllMatchingCond(), SubjectType.GROUP);\n     }\n \n     @Override\n     public List<Membership> findMemberships(final Group group) {\n         TypedQuery<Membership> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e\"\n-                + \" WHERE e.group=:group\", Membership.class);\n+                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e WHERE e.group=:group\", Membership.class);\n         query.setParameter(\"group\", group);\n \n         return query.getResultList();\n@@ -405,29 +237,12 @@ private List<Long> unmatched(final Long groupId,\n         return query.getResultList();\n     }\n \n-    @Override\n-    public final int count() {\n-        Query countQuery = entityManager.createNativeQuery(\"SELECT COUNT(e.id) FROM \" + JPAGroup.TABLE + \" e\");\n-\n-        return ((Number) countQuery.getSingleResult()).intValue();\n-    }\n-\n     @Override\n     public Group save(final Group group) {\n-        // reset account policy in case of inheritance\n-        if (group.isInheritAccountPolicy()) {\n-            group.setAccountPolicy(null);\n-        }\n-\n-        // reset password policy in case of inheritance\n-        if (group.isInheritPasswordPolicy()) {\n-            group.setPasswordPolicy(null);\n-        }\n-\n         // remove plain attributes without a valid template\n         List<GPlainAttr> rToBeDeleted = new ArrayList<>();\n         for (final PlainAttr attr : group.getPlainAttrs()) {\n-            boolean found = CollectionUtils.exists(group.findInheritedTemplates(GPlainAttrTemplate.class),\n+            boolean found = CollectionUtils.exists(group.getAttrTemplates(GPlainAttrTemplate.class),\n                     new Predicate<GPlainAttrTemplate>() {\n \n                         @Override\n@@ -447,7 +262,7 @@ public boolean evaluate(final GPlainAttrTemplate template) {\n         // remove derived attributes without a valid template\n         List<GDerAttr> rDerToBeDeleted = new ArrayList<>();\n         for (final DerAttr attr : group.getDerAttrs()) {\n-            boolean found = CollectionUtils.exists(group.findInheritedTemplates(GDerAttrTemplate.class),\n+            boolean found = CollectionUtils.exists(group.getAttrTemplates(GDerAttrTemplate.class),\n                     new Predicate<GDerAttrTemplate>() {\n \n                         @Override\n@@ -467,7 +282,7 @@ public boolean evaluate(final GDerAttrTemplate template) {\n         // remove virtual attributes without a valid template\n         List<GVirAttr> rVirToBeDeleted = new ArrayList<>();\n         for (final VirAttr attr : group.getVirAttrs()) {\n-            boolean found = CollectionUtils.exists(group.findInheritedTemplates(GVirAttrTemplate.class),\n+            boolean found = CollectionUtils.exists(group.getAttrTemplates(GVirAttrTemplate.class),\n                     new Predicate<GVirAttrTemplate>() {\n \n                         @Override\n@@ -508,30 +323,19 @@ public boolean evaluate(final GVirAttrTemplate template) {\n             attr.getValues().addAll(group.getVirAttr(attr.getSchema().getKey()).getValues());\n         }\n \n-        entitlementDAO.saveGroupEntitlement(merged);\n-\n         return merged;\n     }\n \n     @Override\n     public void delete(final Group group) {\n-        for (Group groupToBeDeleted : findDescendants(group)) {\n-            for (Membership membership : findMemberships(groupToBeDeleted)) {\n-                membership.getUser().removeMembership(membership);\n-                userDAO.save(membership.getUser());\n-\n-                entityManager.remove(membership);\n-            }\n-\n-            groupToBeDeleted.getEntitlements().clear();\n-\n-            groupToBeDeleted.setParent(null);\n-            groupToBeDeleted.setUserOwner(null);\n-            groupToBeDeleted.setGroupOwner(null);\n-            entityManager.remove(groupToBeDeleted);\n+        for (Membership membership : findMemberships(group)) {\n+            membership.getUser().removeMembership(membership);\n+            userDAO.save(membership.getUser());\n \n-            entitlementDAO.delete(GroupEntitlementUtil.getEntitlementNameFromGroupKey(groupToBeDeleted.getKey()));\n+            entityManager.remove(membership);\n         }\n+\n+        entityManager.remove(group);\n     }\n \n     @Override\n@@ -545,20 +349,29 @@ public void delete(final Long key) {\n     }\n \n     @Override\n-    public Group authFetch(Long key) {\n+    public Group authFetch(final Long key) {\n         if (key == null) {\n             throw new NotFoundException(\"Null group id\");\n         }\n \n-        Group group = find(key);\n+        final Group group = find(key);\n         if (group == null) {\n             throw new NotFoundException(\"Group \" + key);\n         }\n \n-        Set<Long> allowedGroupKeys = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-        if (!allowedGroupKeys.contains(group.getKey())) {\n-            throw new UnauthorizedGroupException(group.getKey());\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_READ);\n+        boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String realm) {\n+                return group.getRealm().getFullPath().startsWith(realm)\n+                        || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+            }\n+        });\n+        if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+            throw new UnauthorizedException(SubjectType.GROUP, group.getKey());\n         }\n+\n         return group;\n     }\n "},{"sha":"cc7df331f02611a8dc4688e253d8cc793a78787f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainSchema;\n@@ -107,7 +107,7 @@ public <T extends PlainSchema> T save(final T schema) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public void delete(final String key, final AttributableUtil attributableUtil) {\n+    public void delete(final String key, final AttributableUtils attributableUtil) {\n         PlainSchema schema = find(key, attributableUtil.plainSchemaClass());\n         if (schema == null) {\n             return;"},{"sha":"1007ac44793f764754e8510c6929000941022069","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":12,"deletions":72,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,23 +21,25 @@\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class JPAPolicyDAO extends AbstractDAO<Policy, Long> implements PolicyDAO {\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T find(final Long key) {\n@@ -71,30 +73,6 @@ public List<AccountPolicy> findByResource(final ExternalResource resource) {\n         return query.getResultList();\n     }\n \n-    @Override\n-    public PasswordPolicy getGlobalPasswordPolicy() {\n-        List<? extends Policy> policies = find(PolicyType.GLOBAL_PASSWORD);\n-        return policies == null || policies.isEmpty()\n-                ? null\n-                : (PasswordPolicy) policies.get(0);\n-    }\n-\n-    @Override\n-    public AccountPolicy getGlobalAccountPolicy() {\n-        List<? extends Policy> policies = find(PolicyType.GLOBAL_ACCOUNT);\n-        return policies == null || policies.isEmpty()\n-                ? null\n-                : (AccountPolicy) policies.get(0);\n-    }\n-\n-    @Override\n-    public SyncPolicy getGlobalSyncPolicy() {\n-        List<? extends Policy> policies = find(PolicyType.GLOBAL_SYNC);\n-        return policies == null || policies.isEmpty()\n-                ? null\n-                : (SyncPolicy) policies.get(0);\n-    }\n-\n     @Override\n     public List<Policy> findAll() {\n         TypedQuery<Policy> query = entityManager.createQuery(\n@@ -104,55 +82,17 @@ public List<Policy> findAll() {\n \n     @Override\n     public <T extends Policy> T save(final T policy) {\n-        switch (policy.getType()) {\n-            case GLOBAL_PASSWORD:\n-                // just one GLOBAL_PASSWORD policy\n-                final PasswordPolicy passwordPolicy = getGlobalPasswordPolicy();\n-\n-                if (passwordPolicy != null && !passwordPolicy.getKey().equals(policy.getKey())) {\n-                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidPasswordPolicy,\n-                            \"Global Password policy already exists\");\n-                }\n-                break;\n-\n-            case GLOBAL_ACCOUNT:\n-                // just one GLOBAL_ACCOUNT policy\n-                final AccountPolicy accountPolicy = getGlobalAccountPolicy();\n-\n-                if (accountPolicy != null && !accountPolicy.getKey().equals(policy.getKey())) {\n-                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidAccountPolicy,\n-                            \"Global Account policy already exists\");\n-                }\n-                break;\n-\n-            case GLOBAL_SYNC:\n-                // just one GLOBAL_SYNC policy\n-                final SyncPolicy syncPolicy = getGlobalSyncPolicy();\n-\n-                if (syncPolicy != null && !syncPolicy.getKey().equals(policy.getKey())) {\n-                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidSyncPolicy,\n-                            \"Global Synchronization policy already exists\");\n-                }\n-                break;\n-\n-            case PASSWORD:\n-            case ACCOUNT:\n-            case SYNC:\n-            default:\n-        }\n-\n         return entityManager.merge(policy);\n     }\n \n     @Override\n     public <T extends Policy> void delete(final T policy) {\n-        if (policy instanceof AccountPolicy || policy instanceof PasswordPolicy) {\n-            final String field = policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\";\n-            entityManager.createQuery(\n-                    \"UPDATE \" + JPARealm.class.getSimpleName() + \" e SET e.\" + field + \" = NULL \"\n-                    + \"WHERE e.\" + field + \"=:policy\").\n-                    setParameter(\"policy\", policy).\n-                    executeUpdate();\n+        for (Realm realm : realmDAO.findByPolicy(policy)) {\n+            if (policy instanceof AccountPolicy) {\n+                realm.setAccountPolicy(null);\n+            } else if (policy instanceof PasswordPolicy) {\n+                realm.setPasswordPolicy(null);\n+            }\n         }\n \n         entityManager.remove(policy);"},{"sha":"f5625eeaaba765c5542303adfec91903cdc714dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":61,"deletions":2,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,15 +19,21 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.regex.Pattern;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n@@ -64,11 +70,11 @@ public Realm find(final Long key) {\n \n     @Override\n     public Realm find(final String fullPath) {\n-        if (\"/\".equals(fullPath)) {\n+        if (SyncopeConstants.ROOT_REALM.equals(fullPath)) {\n             return getRoot();\n         }\n \n-        if (!PATH_PATTERN.matcher(fullPath).matches()) {\n+        if (StringUtils.isBlank(fullPath) || !PATH_PATTERN.matcher(fullPath).matches()) {\n             throw new MalformedPathException(fullPath);\n         }\n \n@@ -93,6 +99,59 @@ public boolean evaluate(final Realm realm) {\n         return current;\n     }\n \n+    private <T extends Policy> List<Realm> findSamePolicyChildren(final Realm realm, final T policy) {\n+        List<Realm> result = new ArrayList<>();\n+\n+        for (Realm child : findChildren(realm)) {\n+            if ((policy.getType() == PolicyType.ACCOUNT\n+                    && child.getAccountPolicy() == null || policy.equals(child.getAccountPolicy()))\n+                    || (policy.getType() == PolicyType.PASSWORD\n+                    && child.getPasswordPolicy() == null || policy.equals(child.getPasswordPolicy()))) {\n+\n+                result.add(child);\n+                result.addAll(findSamePolicyChildren(child, policy));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n+        if (policy.getType() == PolicyType.SYNC) {\n+            return Collections.<Realm>emptyList();\n+        }\n+\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPARealm.class.getSimpleName()).append(\" e WHERE e.\").\n+                append(policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\").append(\"=:policy\");\n+\n+        TypedQuery<Realm> query = entityManager.createQuery(queryString.toString(), Realm.class);\n+        query.setParameter(\"policy\", policy);\n+\n+        List<Realm> result = new ArrayList<>();\n+        for (Realm realm : query.getResultList()) {\n+            result.add(realm);\n+            result.addAll(findSamePolicyChildren(realm, policy));\n+        }\n+        return result;\n+    }\n+\n+    private void findAncestors(final List<Realm> result, final Realm realm) {\n+        if (realm.getParent() != null && !result.contains(realm.getParent())) {\n+            result.add(realm.getParent());\n+            findAncestors(result, realm.getParent());\n+        }\n+    }\n+\n+    @Override\n+    public List<Realm> findAncestors(final Realm realm) {\n+        List<Realm> result = new ArrayList<>();\n+        result.add(realm);\n+        findAncestors(result, realm);\n+        return result;\n+    }\n+\n     @Override\n     public List<Realm> findChildren(final Realm realm) {\n         TypedQuery<Realm> query = entityManager.createQuery("},{"sha":"61be20f1fc7d41b10158b1378989b09e592c8712","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,14 +22,19 @@\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class JPARoleDAO extends AbstractDAO<Role, Long> implements RoleDAO {\n \n+    @Autowired\n+    private SubjectSearchDAO searchDAO;\n+\n     @Override\n     public Role find(final Long key) {\n         return entityManager.find(JPARole.class, key);"},{"sha":"89082095119d8909bfad6bc4bfadf2e6e362e48f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASubjectSearchDAO.java","status":"modified","additions":66,"deletions":52,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,6 +24,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Entity;\n@@ -32,12 +33,16 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n@@ -47,10 +52,11 @@\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -61,6 +67,9 @@ public class JPASubjectSearchDAO extends AbstractDAO<Subject<?, ?, ?>, Long> imp\n \n     private static final String EMPTY_ATTR_QUERY = \"SELECT subject_id FROM user_search_attr WHERE 1=2\";\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -71,52 +80,57 @@ public class JPASubjectSearchDAO extends AbstractDAO<Subject<?, ?, ?>, Long> imp\n     private PlainSchemaDAO schemaDAO;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n-\n-    private String getAdminGroupsFilter(final Set<Long> adminGroups, final SubjectType type) {\n-        final StringBuilder adminGroupFilter = new StringBuilder();\n+    private AttributableUtilsFactory attrUtilsFactory;\n+\n+    private String getAdminRealmsFilter(final Set<String> adminRealms, final SearchSupport svs) {\n+        Set<Long> realmKeys = new HashSet<>();\n+        for (String realmPath : RealmUtils.normalize(adminRealms)) {\n+            Realm realm = realmDAO.find(realmPath);\n+            if (realm == null) {\n+                LOG.warn(\"Ignoring invalid realm {}\", realmPath);\n+            } else {\n+                CollectionUtils.collect(realmDAO.findDescendants(realm), new Transformer<Realm, Long>() {\n \n-        if (type == SubjectType.USER) {\n-            adminGroupFilter.append(\"SELECT user_id AS subject_id FROM Membership M1 WHERE group_id IN (\").\n-                    append(\"SELECT group_id FROM Membership M2 WHERE M2.user_id=M1.user_id \").\n-                    append(\"AND group_id NOT IN (\");\n+                    @Override\n+                    public Long transform(final Realm descendant) {\n+                        return descendant.getKey();\n+                    }\n+                }, realmKeys);\n+            }\n         }\n \n-        adminGroupFilter.append(\"SELECT id AS \").\n-                append(type == SubjectType.USER ? \"group\" : \"subject\").\n-                append(\"_id FROM SyncopeGroup\");\n-\n-        boolean firstGroup = true;\n+        StringBuilder adminRealmFilter = new StringBuilder().\n+                append(\"SELECT subject_id FROM \").append(svs.field().name).\n+                append(\" WHERE realm_id IN (SELECT id AS realm_id FROM Realm\");\n \n-        for (Long adminGroupId : adminGroups) {\n-            if (firstGroup) {\n-                adminGroupFilter.append(\" WHERE\");\n-                firstGroup = false;\n+        boolean firstRealm = true;\n+        for (Long realmKey : realmKeys) {\n+            if (firstRealm) {\n+                adminRealmFilter.append(\" WHERE\");\n+                firstRealm = false;\n             } else {\n-                adminGroupFilter.append(type == SubjectType.USER ? \" OR\" : \" AND\");\n+                adminRealmFilter.append(\" OR\");\n             }\n-            adminGroupFilter.append(type == SubjectType.USER ? \" id = \" : \" id <> \").append(adminGroupId);\n+            adminRealmFilter.append(\" id = \").append(realmKey);\n         }\n \n-        if (type == SubjectType.USER) {\n-            adminGroupFilter.append(\"))\");\n-        }\n+        adminRealmFilter.append(')');\n \n-        return adminGroupFilter.toString();\n+        return adminRealmFilter.toString();\n     }\n \n     @Override\n-    public int count(final Set<Long> adminGroups, final SearchCond searchCondition, final SubjectType type) {\n+    public int count(final Set<String> adminRealms, final SearchCond searchCondition, final SubjectType type) {\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n \n         // 1. get the query string from the search condition\n         SearchSupport svs = new SearchSupport(type);\n         StringBuilder queryString = getQuery(searchCondition, parameters, type, svs);\n \n-        // 2. take into account administrative groups\n+        // 2. take into account administrative realms\n         queryString.insert(0, \"SELECT u.subject_id FROM (\");\n-        queryString.append(\") u WHERE subject_id NOT IN (\");\n-        queryString.append(getAdminGroupsFilter(adminGroups, type)).append(')');\n+        queryString.append(\") u WHERE subject_id IN (\");\n+        queryString.append(getAdminRealmsFilter(adminRealms, svs)).append(')');\n \n         // 3. prepare the COUNT query\n         queryString.insert(0, \"SELECT COUNT(subject_id) FROM (\");\n@@ -135,32 +149,32 @@ public int count(final Set<Long> adminGroups, final SearchCond searchCondition,\n \n     @Override\n     public <T extends Subject<?, ?, ?>> List<T> search(\n-            final Set<Long> adminGroups, final SearchCond searchCondition, final SubjectType type) {\n+            final Set<String> adminRealms, final SearchCond searchCondition, final SubjectType type) {\n \n-        return search(adminGroups, searchCondition, Collections.<OrderByClause>emptyList(), type);\n+        return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), type);\n     }\n \n     @Override\n     public <T extends Subject<?, ?, ?>> List<T> search(\n-            final Set<Long> adminGroups, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n+            final Set<String> adminRealms, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n             final SubjectType type) {\n \n-        return search(adminGroups, searchCondition, -1, -1, orderBy, type);\n+        return search(adminRealms, searchCondition, -1, -1, orderBy, type);\n     }\n \n     @Override\n     public <T extends Subject<?, ?, ?>> List<T> search(\n-            final Set<Long> adminGroups, final SearchCond searchCondition, final int page, final int itemsPerPage,\n+            final Set<String> adminRealms, final SearchCond searchCondition, final int page, final int itemsPerPage,\n             final List<OrderByClause> orderBy, final SubjectType type) {\n \n         List<T> result = Collections.<T>emptyList();\n \n-        if (adminGroups != null && (!adminGroups.isEmpty() || groupDAO.findAll().isEmpty())) {\n+        if (adminRealms != null && !adminRealms.isEmpty()) {\n             LOG.debug(\"Search condition:\\n{}\", searchCondition);\n \n             if (searchCondition != null && searchCondition.isValid()) {\n                 try {\n-                    result = doSearch(adminGroups, searchCondition, page, itemsPerPage, orderBy, type);\n+                    result = doSearch(adminRealms, searchCondition, page, itemsPerPage, orderBy, type);\n                 } catch (Exception e) {\n                     LOG.error(\"While searching for {}\", type, e);\n                 }\n@@ -239,7 +253,7 @@ private StringBuilder buildSelect(final OrderBySupport orderBySupport) {\n         return select;\n     }\n \n-    private StringBuilder buildWhere(final OrderBySupport orderBySupport, final SubjectType type) {\n+    private StringBuilder buildWhere(final OrderBySupport orderBySupport) {\n         final StringBuilder where = new StringBuilder(\" u\");\n         for (SearchSupport.SearchView searchView : orderBySupport.views) {\n             where.append(',').append(searchView.name).append(' ').append(searchView.alias);\n@@ -254,7 +268,7 @@ private StringBuilder buildWhere(final OrderBySupport orderBySupport, final Subj\n                 where.append(obs.where).append(\" AND \");\n             }\n         }\n-        where.append(\"u.subject_id NOT IN (\");\n+        where.append(\"u.subject_id IN (\");\n \n         return where;\n     }\n@@ -276,7 +290,7 @@ private StringBuilder buildOrderBy(final OrderBySupport orderBySupport) {\n     private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport svs,\n             final List<OrderByClause> orderByClauses) {\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(type.asAttributableType());\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n \n         OrderBySupport orderBySupport = new OrderBySupport();\n \n@@ -286,9 +300,9 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n             // Manage difference among external key attribute and internal JPA @Id\n             String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n \n-            Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), fieldName);\n+            Field subjectField = ReflectionUtils.findField(attrUtils.attributableClass(), fieldName);\n             if (subjectField == null) {\n-                PlainSchema schema = schemaDAO.find(fieldName, attrUtil.plainSchemaClass());\n+                PlainSchema schema = schemaDAO.find(fieldName, attrUtils.plainSchemaClass());\n                 if (schema != null) {\n                     if (schema.isUniqueConstraint()) {\n                         orderBySupport.views.add(svs.uniqueAttr());\n@@ -331,7 +345,7 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Subject<?, ?, ?>> List<T> doSearch(final Set<Long> adminGroups,\n+    private <T extends Subject<?, ?, ?>> List<T> doSearch(final Set<String> adminRealms,\n             final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n             final SubjectType type) {\n \n@@ -345,13 +359,13 @@ private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport\n         OrderBySupport orderBySupport = parseOrderBy(type, svs, orderBy);\n         if (queryString.charAt(0) == '(') {\n             queryString.insert(0, buildSelect(orderBySupport));\n-            queryString.append(buildWhere(orderBySupport, type));\n+            queryString.append(buildWhere(orderBySupport));\n         } else {\n             queryString.insert(0, buildSelect(orderBySupport).append('('));\n-            queryString.append(')').append(buildWhere(orderBySupport, type));\n+            queryString.append(')').append(buildWhere(orderBySupport));\n         }\n         queryString.\n-                append(getAdminGroupsFilter(adminGroups, type)).append(')').\n+                append(getAdminRealmsFilter(adminRealms, svs)).append(')').\n                 append(buildOrderBy(orderBySupport));\n \n         // 3. prepare the search query\n@@ -605,15 +619,15 @@ private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue\n     private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n             final SubjectType type, final SearchSupport svs) {\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(type.asAttributableType());\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n \n-        PlainSchema schema = schemaDAO.find(cond.getSchema(), attrUtil.plainSchemaClass());\n+        PlainSchema schema = schemaDAO.find(cond.getSchema(), attrUtils.plainSchemaClass());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        PlainAttrValue attrValue = attrUtil.newPlainAttrValue();\n+        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n         try {\n             if (cond.getType() != AttributeCond.Type.LIKE && cond.getType() != AttributeCond.Type.ISNULL\n                     && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n@@ -654,20 +668,20 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n     private String getQuery(final SubjectCond cond, final boolean not, final List<Object> parameters,\n             final SubjectType type, final SearchSupport svs) {\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(type.asAttributableType());\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(type.asAttributableType());\n \n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n         if (\"key\".equals(cond.getSchema())) {\n             cond.setSchema(\"id\");\n         }\n \n-        Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), cond.getSchema());\n+        Field subjectField = ReflectionUtils.findField(attrUtils.attributableClass(), cond.getSchema());\n         if (subjectField == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        PlainSchema schema = attrUtil.newPlainSchema();\n+        PlainSchema schema = attrUtils.newPlainSchema();\n         schema.setKey(subjectField.getName());\n         for (AttrSchemaType attrSchemaType : AttrSchemaType.values()) {\n             if (subjectField.getType().isAssignableFrom(attrSchemaType.getType())) {\n@@ -713,7 +727,7 @@ private String getQuery(final SubjectCond cond, final boolean not, final List<Ob\n             }\n         }\n \n-        PlainAttrValue attrValue = attrUtil.newPlainAttrValue();\n+        PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n         if (cond.getType() != AttributeCond.Type.LIKE\n                 && cond.getType() != AttributeCond.Type.ISNULL\n                 && cond.getType() != AttributeCond.Type.ISNOTNULL) {"},{"sha":"5264fcd49d5474f541c111104cb1934d3745e585","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":31,"deletions":38,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,18 +24,16 @@\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n@@ -47,26 +45,23 @@\n import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAUserDAO extends AbstractSubjectDAO<UPlainAttr, UDerAttr, UVirAttr> implements UserDAO {\n \n-    @Autowired\n-    private SubjectSearchDAO searchDAO;\n-\n     @Autowired\n     private GroupDAO groupDAO;\n \n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     @Override\n     protected Subject<UPlainAttr, UDerAttr, UVirAttr> findInternal(final Long key) {\n@@ -150,51 +145,44 @@ public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion\n     @Override\n     public List<User> findByAttrValue(final String schemaName, final UPlainAttrValue attrValue) {\n         return (List<User>) findByAttrValue(\n-                schemaName, attrValue, attrUtilFactory.getInstance(AttributableType.USER));\n+                schemaName, attrValue, attrUtilsFactory.getInstance(AttributableType.USER));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public User findByAttrUniqueValue(final String schemaName, final UPlainAttrValue attrUniqueValue) {\n         return (User) findByAttrUniqueValue(schemaName, attrUniqueValue,\n-                attrUtilFactory.getInstance(AttributableType.USER));\n+                attrUtilsFactory.getInstance(AttributableType.USER));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<User> findByDerAttrValue(final String schemaName, final String value) {\n         return (List<User>) findByDerAttrValue(\n-                schemaName, value, attrUtilFactory.getInstance(AttributableType.USER));\n+                schemaName, value, attrUtilsFactory.getInstance(AttributableType.USER));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<User> findByResource(final ExternalResource resource) {\n-        return (List<User>) findByResource(resource, attrUtilFactory.getInstance(AttributableType.USER));\n+        return (List<User>) findByResource(resource, attrUtilsFactory.getInstance(AttributableType.USER));\n     }\n \n     @Override\n-    public final List<User> findAll(final Set<Long> adminGroups, final int page, final int itemsPerPage) {\n-        return findAll(adminGroups, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n-    }\n-\n-    private SearchCond getAllMatchingCond() {\n-        SubjectCond idCond = new SubjectCond(AttributeCond.Type.ISNOTNULL);\n-        idCond.setSchema(\"id\");\n-        return SearchCond.getLeafCond(idCond);\n+    public final List<User> findAll(final Set<String> adminRealms, final int page, final int itemsPerPage) {\n+        return findAll(adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n     }\n \n     @Override\n-    public List<User> findAll(final Set<Long> adminGroups,\n+    public List<User> findAll(final Set<String> adminRealms,\n             final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n \n-        return searchDAO.search(\n-                adminGroups, getAllMatchingCond(), page, itemsPerPage, orderBy, SubjectType.USER);\n+        return searchDAO.search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy, SubjectType.USER);\n     }\n \n     @Override\n-    public final int count(final Set<Long> adminGroups) {\n-        return searchDAO.count(adminGroups, getAllMatchingCond(), SubjectType.USER);\n+    public final int count(final Set<String> adminRealms) {\n+        return searchDAO.count(adminRealms, getAllMatchingCond(), SubjectType.USER);\n     }\n \n     @Override\n@@ -237,15 +225,20 @@ public void delete(final User user) {\n \n     private void securityChecks(final User user) {\n         // Allows anonymous (during self-registration) and self (during self-update) to read own user,\n-        // otherwise goes thorugh security checks to see if needed group entitlements are owned\n-        if (!AuthContextUtil.getAuthenticatedUsername().equals(anonymousUser)\n-                && !AuthContextUtil.getAuthenticatedUsername().equals(user.getUsername())) {\n-\n-            Set<Long> groupKeys = user.getGroupKeys();\n-            Set<Long> adminGroupKeys = GroupEntitlementUtil.getGroupKeys(AuthContextUtil.getOwnedEntitlementNames());\n-            groupKeys.removeAll(adminGroupKeys);\n-            if (!groupKeys.isEmpty()) {\n-                throw new UnauthorizedGroupException(groupKeys);\n+        // otherwise goes through security checks to see if required entitlements are owned\n+        if (!AuthContextUtils.getAuthenticatedUsername().equals(anonymousUser)\n+                && !AuthContextUtils.getAuthenticatedUsername().equals(user.getUsername())) {\n+\n+            Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.USER_READ);\n+            boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {\n+\n+                @Override\n+                public boolean evaluate(final String realm) {\n+                    return user.getRealm().getFullPath().startsWith(realm);\n+                }\n+            });\n+            if (authRealms == null || authRealms.isEmpty() || !authorized) {\n+                throw new UnauthorizedException(SubjectType.USER, user.getKey());\n             }\n         }\n     }"},{"sha":"f0ce84bbe5cb69ee2eedc1983f0b86683b0d4260","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n@@ -100,7 +100,7 @@ public <T extends VirSchema> T save(final T virSchema) {\n     }\n \n     @Override\n-    public void delete(final String key, final AttributableUtil attributableUtil) {\n+    public void delete(final String key, final AttributableUtils attributableUtil) {\n         final VirSchema schema = find(key, attributableUtil.virSchemaClass());\n         if (schema == null) {\n             return;"},{"sha":"b2e2b347c5b070f004585b1245fb882af27bcc78","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttributable.java","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,19 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.HashMap;\n-import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.MapUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n public abstract class AbstractAttributable<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n         extends AbstractAnnotatedEntity<Long> implements Attributable<P, D, V> {\n@@ -72,34 +65,4 @@ public boolean evaluate(final V virAttr) {\n             }\n         });\n     }\n-\n-    protected Map<PlainSchema, P> getPlainAttrMap() {\n-        return MapUtils.lazyMap(new HashMap<PlainSchema, P>(), new Transformer<PlainSchema, P>() {\n-\n-            @Override\n-            public P transform(final PlainSchema input) {\n-                return getPlainAttr(input.getKey());\n-            }\n-        });\n-    }\n-\n-    protected Map<DerSchema, D> getDerAttrMap() {\n-        return MapUtils.lazyMap(new HashMap<DerSchema, D>(), new Transformer<DerSchema, D>() {\n-\n-            @Override\n-            public D transform(final DerSchema input) {\n-                return getDerAttr(input.getKey());\n-            }\n-        });\n-    }\n-\n-    protected Map<VirSchema, V> getVirAttrMap() {\n-        return MapUtils.lazyMap(new HashMap<VirSchema, V>(), new Transformer<VirSchema, V>() {\n-\n-            @Override\n-            public V transform(final VirSchema input) {\n-                return getVirAttr(input.getKey());\n-            }\n-        });\n-    }\n }"},{"sha":"ae2ec1beed18c61a44745f3d0efe3607080603a8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,7 +25,7 @@\n import javax.persistence.MappedSuperclass;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n \n @MappedSuperclass\n public abstract class AbstractDerAttr extends AbstractEntity<Long> implements DerAttr {\n@@ -47,6 +47,6 @@ public Long getKey() {\n      */\n     @Override\n     public String getValue(final Collection<? extends PlainAttr> attributes) {\n-        return JexlUtil.evaluate(getSchema().getExpression(), getOwner(), attributes);\n+        return JexlUtils.evaluate(getSchema().getExpression(), getOwner(), attributes);\n     }\n }"},{"sha":"56a37cced0ea6b4c1adfd10ba7e7e0e6b80ae911","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,7 +26,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -41,7 +41,7 @@ public abstract class AbstractPlainAttr extends AbstractEntity<Long> implements\n     protected abstract boolean addValue(PlainAttrValue attrValue);\n \n     @Override\n-    public void addValue(final String value, final AttributableUtil attributableUtil)\n+    public void addValue(final String value, final AttributableUtils attributableUtil)\n             throws InvalidPlainAttrValueException {\n \n         PlainAttrValue attrValue;"},{"sha":"b0a7ab45f7ace2f78a4e16eb3849e1cbb422cfcc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractSubject.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,19 +20,38 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n+@MappedSuperclass\n public abstract class AbstractSubject<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n         extends AbstractAttributable<P, D, V> implements Subject<P, D, V> {\n \n     private static final long serialVersionUID = -6876467491398928855L;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    protected JPARealm realm;\n+\n+    @Override\n+    public Realm getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        this.realm = (JPARealm) realm;\n+    }\n+\n     protected abstract Set<? extends ExternalResource> internalGetResources();\n \n     @Override"},{"sha":"f814033dffb562ea229acfbb6cdcba068baa4a97","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AnnotatedEntityListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n import javax.persistence.PrePersist;\n import javax.persistence.PreUpdate;\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -36,7 +36,7 @@ public class AnnotatedEntityListener {\n     @PrePersist\n     @PreUpdate\n     public void setSysInfo(final AnnotatedEntity<?> entity) {\n-        final String username = AuthContextUtil.getAuthenticatedUsername();\n+        final String username = AuthContextUtils.getAuthenticatedUsername();\n         LOG.debug(\"Set system properties for '{}'\", entity);\n \n         final Date now = new Date();"},{"sha":"9509e388799257f90f573028da3cc0f4512f9a89","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccountPolicy.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -48,19 +48,11 @@ public class JPAAccountPolicy extends JPAPolicy implements AccountPolicy {\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_name\"))\n     @Valid\n-    private Set<JPAExternalResource> resources;\n+    private Set<JPAExternalResource> resources = new HashSet<>();\n \n     public JPAAccountPolicy() {\n-        this(false);\n-        this.resources = new HashSet<>();\n-    }\n-\n-    public JPAAccountPolicy(final boolean global) {\n         super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_ACCOUNT\n-                : PolicyType.ACCOUNT;\n+        this.type = PolicyType.ACCOUNT;\n     }\n \n     @Override"},{"sha":"a6352073732ce164966d1f26f7e76343ae93d967","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAttributableUtils.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -87,16 +87,16 @@\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-public class JPAAttributableUtil implements AttributableUtil {\n+public class JPAAttributableUtils implements AttributableUtils {\n \n     /**\n      * Logger.\n      */\n-    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AttributableUtil.class);\n+    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AttributableUtils.class);\n \n     private final AttributableType type;\n \n-    protected JPAAttributableUtil(final AttributableType type) {\n+    protected JPAAttributableUtils(final AttributableType type) {\n         this.type = type;\n     }\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAttributableUtil.java"},{"sha":"0ff7e055d9d434df1a39854a168e5180ae91f1ec","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntitlement.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntitlement.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Cacheable;\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-\n-@Entity\n-@Table(name = JPAEntitlement.TABLE)\n-@Cacheable\n-public class JPAEntitlement extends AbstractEntity<String> implements Entitlement {\n-\n-    private static final long serialVersionUID = 8044745999246422483L;\n-\n-    public static final String TABLE = \"Entitlement\";\n-\n-    @Id\n-    private String name;\n-\n-    @Column(nullable = true)\n-    private String description;\n-\n-    @Override\n-    public String getKey() {\n-        return name;\n-    }\n-\n-    @Override\n-    public void setKey(final String key) {\n-        this.name = key;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    @Override\n-    public void setDescription(final String description) {\n-        this.description = description;\n-    }\n-}"},{"sha":"3002dccc45c36cc047b2473f9fd3362a13e25ab3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":8,"deletions":24,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,14 +21,12 @@\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Report;\n@@ -145,6 +143,14 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n \n         if (reference.equals(Realm.class)) {\n             result = (T) new JPARealm();\n+        } else if (reference.equals(AccountPolicy.class)) {\n+            result = (T) new JPAAccountPolicy();\n+        } else if (reference.equals(PasswordPolicy.class)) {\n+            result = (T) new JPAPasswordPolicy();\n+        } else if (reference.equals(PushPolicy.class)) {\n+            result = (T) new JPAPushPolicy();\n+        } else if (reference.equals(SyncPolicy.class)) {\n+            result = (T) new JPASyncPolicy();\n         } else if (reference.equals(Role.class)) {\n             result = (T) new JPARole();\n         } else if (reference.equals(User.class)) {\n@@ -157,8 +163,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAConf();\n         } else if (reference.equals(Notification.class)) {\n             result = (T) new JPANotification();\n-        } else if (reference.equals(Entitlement.class)) {\n-            result = (T) new JPAEntitlement();\n         } else if (reference.equals(ExternalResource.class)) {\n             result = (T) new JPAExternalResource();\n         } else if (reference.equals(ConnInstance.class)) {\n@@ -268,26 +272,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n         return result;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends Policy> T newPolicy(final Class<T> reference, final boolean global) {\n-        T result;\n-\n-        if (reference.equals(AccountPolicy.class)) {\n-            result = (T) new JPAAccountPolicy(global);\n-        } else if (reference.equals(PasswordPolicy.class)) {\n-            result = (T) new JPAPasswordPolicy(global);\n-        } else if (reference.equals(PushPolicy.class)) {\n-            result = (T) new JPAPushPolicy(global);\n-        } else if (reference.equals(SyncPolicy.class)) {\n-            result = (T) new JPASyncPolicy(global);\n-        } else {\n-            throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public ConnPoolConf newConnPoolConf() {\n         return new JPAConnPoolConf();"},{"sha":"5836decd81e0d8af5c34aee8ce1ec0524193397b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -148,13 +148,13 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     @Column(nullable = false)\n     private TraceLevel syncTraceLevel;\n \n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPasswordPolicy passwordPolicy;\n \n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPASyncPolicy syncPolicy;\n \n     /**"},{"sha":"51f55a5d6369ad483802326874e9ca3023be6b34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPasswordPolicy.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,14 +30,7 @@ public class JPAPasswordPolicy extends JPAPolicy implements PasswordPolicy {\n     private static final long serialVersionUID = 9138550910385232849L;\n \n     public JPAPasswordPolicy() {\n-        this(false);\n-    }\n-\n-    public JPAPasswordPolicy(final boolean global) {\n         super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_PASSWORD\n-                : PolicyType.PASSWORD;\n+        this.type = PolicyType.PASSWORD;\n     }\n }"},{"sha":"f4be722097caed77bdd898d9aab25dbca1a66007","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPushPolicy.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -33,10 +33,7 @@ public JPAPushPolicy() {\n \n     public JPAPushPolicy(final boolean global) {\n         super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_PUSH\n-                : PolicyType.PUSH;\n+        this.type = PolicyType.PUSH;\n     }\n \n }"},{"sha":"a813535df44d9ec06a64b11331c4f03523b187be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.Size;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -49,13 +50,13 @@ public class JPARealm extends AbstractEntity<Long> implements Realm {\n     @Size(min = 1)\n     private String name;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne\n     private JPARealm parent;\n \n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPasswordPolicy passwordPolicy;\n \n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n     @Override\n@@ -76,8 +77,8 @@ public Realm getParent() {\n     @Override\n     public String getFullPath() {\n         return getParent() == null\n-                ? StringUtils.EMPTY\n-                : getParent().getFullPath() + \"/\" + getName();\n+                ? SyncopeConstants.ROOT_REALM\n+                : StringUtils.appendIfMissing(getParent().getFullPath(), \"/\") + getName();\n     }\n \n     @Override"},{"sha":"e0ada80bbf5ea6b14df548019409f10e8d9b04b2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -73,8 +73,6 @@ public class JPARole extends AbstractEntity<Long> implements Role {\n     @Valid\n     private List<JPARealm> realms = new ArrayList<>();\n \n-    private String criteria;\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -90,16 +88,6 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    @Override\n-    public String getCriteria() {\n-        return criteria;\n-    }\n-\n-    @Override\n-    public void setCriteria(final String criteria) {\n-        this.criteria = criteria;\n-    }\n-\n     @Override\n     public Set<Entitlement> getEntitlements() {\n         return entitlements;"},{"sha":"39b75651255013ac34b7a9e834dc8935f07469a0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASyncPolicy.java","status":"modified","additions":1,"deletions":8,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,14 +30,7 @@ public class JPASyncPolicy extends JPAPolicy implements SyncPolicy {\n     private static final long serialVersionUID = -6090413855809521279L;\n \n     public JPASyncPolicy() {\n-        this(false);\n-    }\n-\n-    public JPASyncPolicy(final boolean global) {\n         super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_SYNC\n-                : PolicyType.SYNC;\n+        this.type = PolicyType.SYNC;\n     }\n }"},{"sha":"e132601236aad5f22f4e2121a7388afcd9bde811","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAttributableUtilsFactory.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAttributableUtilsFactory.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,8 +20,8 @@\n \n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -30,20 +30,20 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class JPAttributableUtilFactory implements AttributableUtilFactory {\n+public class JPAttributableUtilsFactory implements AttributableUtilsFactory {\n \n     @Override\n-    public AttributableUtil getInstance(final AttributableType type) {\n-        return new JPAAttributableUtil(type);\n+    public AttributableUtils getInstance(final AttributableType type) {\n+        return new JPAAttributableUtils(type);\n     }\n \n     @Override\n-    public AttributableUtil getInstance(final String attributableType) {\n-        return new JPAAttributableUtil(AttributableType.valueOf(attributableType));\n+    public AttributableUtils getInstance(final String attributableType) {\n+        return new JPAAttributableUtils(AttributableType.valueOf(attributableType));\n     }\n \n     @Override\n-    public AttributableUtil getInstance(final ObjectClass objectClass) {\n+    public AttributableUtils getInstance(final ObjectClass objectClass) {\n         AttributableType type = null;\n         if (ObjectClass.ACCOUNT.equals(objectClass)) {\n             type = AttributableType.USER;\n@@ -55,11 +55,11 @@ public AttributableUtil getInstance(final ObjectClass objectClass) {\n             throw new IllegalArgumentException(\"ObjectClass not supported: \" + objectClass);\n         }\n \n-        return new JPAAttributableUtil(type);\n+        return new JPAAttributableUtils(type);\n     }\n \n     @Override\n-    public AttributableUtil getInstance(final Attributable<?, ?, ?> attributable) {\n+    public AttributableUtils getInstance(final Attributable<?, ?, ?> attributable) {\n         AttributableType type = null;\n         if (attributable instanceof User) {\n             type = AttributableType.USER;\n@@ -75,7 +75,7 @@ public AttributableUtil getInstance(final Attributable<?, ?, ?> attributable) {\n             throw new IllegalArgumentException(\"Attributable type not supported: \" + attributable.getClass().getName());\n         }\n \n-        return new JPAAttributableUtil(type);\n+        return new JPAAttributableUtils(type);\n     }\n \n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAttributableUtilFactory.java"},{"sha":"720b8752d73022cab6d802e978c628aa86ab15d3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":16,"deletions":320,"changes":336,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,14 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.entity.group;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n-import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n@@ -36,50 +34,35 @@\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n-import javax.validation.constraints.Max;\n-import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.validation.entity.GroupCheck;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractSubject;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAAccountPolicy;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAEntitlement;\n import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n \n @Entity\n-@Table(name = JPAGroup.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"name\", \"parent_id\" }))\n+@Table(name = JPAGroup.TABLE)\n @Cacheable\n @GroupCheck\n public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> implements Group {\n@@ -91,36 +74,27 @@ public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> im\n     @Id\n     private Long id;\n \n+    @Column(unique = true)\n     @NotNull\n     private String name;\n \n-    @ManyToOne(optional = true)\n-    private JPAGroup parent;\n-\n-    @ManyToOne(optional = true)\n+    @ManyToOne\n     private JPAUser userOwner;\n \n-    @ManyToOne(optional = true)\n+    @ManyToOne\n     private JPAGroup groupOwner;\n \n-    @ManyToMany(fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns =\n-            @JoinColumn(name = \"group_id\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"entitlement_name\"))\n-    private Set<JPAEntitlement> entitlements;\n-\n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAGPlainAttrTemplate> rAttrTemplates;\n+    private List<JPAGPlainAttrTemplate> gAttrTemplates;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAGDerAttrTemplate> rDerAttrTemplates;\n+    private List<JPAGDerAttrTemplate> gDerAttrTemplates;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAGVirAttrTemplate> rVirAttrTemplates;\n+    private List<JPAGVirAttrTemplate> gVirAttrTemplates;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n@@ -146,47 +120,6 @@ public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> im\n     @Valid\n     private List<JPAGVirAttr> virAttrs;\n \n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritOwner;\n-\n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritTemplates;\n-\n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritPlainAttrs;\n-\n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritDerAttrs;\n-\n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritVirAttrs;\n-\n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritPasswordPolicy;\n-\n-    @Basic(optional = true)\n-    @Min(0)\n-    @Max(1)\n-    private Integer inheritAccountPolicy;\n-\n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n-    private JPAPasswordPolicy passwordPolicy;\n-\n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n-    private JPAAccountPolicy accountPolicy;\n-\n     /**\n      * Provisioning external resources.\n      */\n@@ -201,11 +134,9 @@ public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> im\n     public JPAGroup() {\n         super();\n \n-        entitlements = new HashSet<>();\n-\n-        rAttrTemplates = new ArrayList<>();\n-        rDerAttrTemplates = new ArrayList<>();\n-        rVirAttrTemplates = new ArrayList<>();\n+        gAttrTemplates = new ArrayList<>();\n+        gDerAttrTemplates = new ArrayList<>();\n+        gVirAttrTemplates = new ArrayList<>();\n         mAttrTemplates = new ArrayList<>();\n         mDerAttrTemplates = new ArrayList<>();\n         mVirAttrTemplates = new ArrayList<>();\n@@ -214,14 +145,6 @@ public JPAGroup() {\n         derAttrs = new ArrayList<>();\n         virAttrs = new ArrayList<>();\n \n-        inheritOwner = getBooleanAsInteger(false);\n-        inheritTemplates = getBooleanAsInteger(false);\n-        inheritPlainAttrs = getBooleanAsInteger(false);\n-        inheritDerAttrs = getBooleanAsInteger(false);\n-        inheritVirAttrs = getBooleanAsInteger(false);\n-        inheritPasswordPolicy = getBooleanAsInteger(false);\n-        inheritAccountPolicy = getBooleanAsInteger(false);\n-\n         resources = new HashSet<>();\n     }\n \n@@ -245,27 +168,6 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    @Override\n-    public Group getParent() {\n-        return parent;\n-    }\n-\n-    @Override\n-    public void setParent(final Group parent) {\n-        checkType(parent, JPAGroup.class);\n-        this.parent = (JPAGroup) parent;\n-    }\n-\n-    @Override\n-    public boolean isInheritOwner() {\n-        return isBooleanAsInteger(inheritOwner);\n-    }\n-\n-    @Override\n-    public void setInheritOwner(final boolean inheritOwner) {\n-        this.inheritOwner = getBooleanAsInteger(inheritOwner);\n-    }\n-\n     @Override\n     public User getUserOwner() {\n         return userOwner;\n@@ -288,44 +190,17 @@ public void setGroupOwner(final Group group) {\n         this.groupOwner = (JPAGroup) group;\n     }\n \n-    @Override\n-    public boolean addEntitlement(final Entitlement entitlement) {\n-        checkType(entitlement, JPAEntitlement.class);\n-        return entitlements.add((JPAEntitlement) entitlement);\n-    }\n-\n-    @Override\n-    public boolean removeEntitlement(final Entitlement entitlement) {\n-        checkType(entitlement, JPAEntitlement.class);\n-        return entitlements.remove((JPAEntitlement) entitlement);\n-    }\n-\n-    @Override\n-    public Set<? extends Entitlement> getEntitlements() {\n-        return entitlements;\n-    }\n-\n-    @Override\n-    public boolean isInheritTemplates() {\n-        return isBooleanAsInteger(inheritTemplates);\n-    }\n-\n-    @Override\n-    public void setInheritTemplates(final boolean inheritAttrTemplates) {\n-        this.inheritTemplates = getBooleanAsInteger(inheritAttrTemplates);\n-    }\n-\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(final Class<T> reference) {\n         List<T> result = new ArrayList<>();\n \n         if (GPlainAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) rAttrTemplates;\n+            result = (List<T>) gAttrTemplates;\n         } else if (GDerAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) rDerAttrTemplates;\n+            result = (List<T>) gDerAttrTemplates;\n         } else if (GVirAttrTemplate.class.isAssignableFrom(reference)) {\n-            result = (List<T>) rVirAttrTemplates;\n+            result = (List<T>) gVirAttrTemplates;\n         } else if (MPlainAttrTemplate.class.isAssignableFrom(reference)) {\n             result = (List<T>) mAttrTemplates;\n         } else if (MDerAttrTemplate.class.isAssignableFrom(reference)) {\n@@ -341,7 +216,7 @@ public <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(fi\n     public <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n             final Class<T> reference, final String schemaName) {\n \n-        return CollectionUtils.find(findInheritedTemplates(reference), new Predicate<T>() {\n+        return CollectionUtils.find(getAttrTemplates(reference), new Predicate<T>() {\n \n             @Override\n             public boolean evaluate(final T template) {\n@@ -352,7 +227,7 @@ public boolean evaluate(final T template) {\n \n     @Override\n     public <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(final Class<T> reference) {\n-        return CollectionUtils.collect(findInheritedTemplates(reference), new Transformer<T, K>() {\n+        return CollectionUtils.collect(getAttrTemplates(reference), new Transformer<T, K>() {\n \n             @Override\n             public K transform(final T input) {\n@@ -361,17 +236,6 @@ public K transform(final T input) {\n         }, new ArrayList<K>());\n     }\n \n-    @Override\n-    public <T extends AttrTemplate<K>, K extends Schema> List<T> findInheritedTemplates(final Class<T> reference) {\n-        final List<T> result = new ArrayList<>(getAttrTemplates(reference));\n-\n-        if (isInheritTemplates() && getParent() != null) {\n-            result.addAll(getParent().findInheritedTemplates(reference));\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public boolean addPlainAttr(final GPlainAttr attr) {\n         checkType(attr, JPAGPlainAttr.class);\n@@ -422,172 +286,4 @@ public boolean removeVirAttr(final GVirAttr attr) {\n     public List<? extends GVirAttr> getVirAttrs() {\n         return virAttrs;\n     }\n-\n-    @Override\n-    public boolean isInheritPlainAttrs() {\n-        return isBooleanAsInteger(inheritPlainAttrs);\n-    }\n-\n-    @Override\n-    public void setInheritPlainAttrs(final boolean inheritPlainAttrs) {\n-        this.inheritPlainAttrs = getBooleanAsInteger(inheritPlainAttrs);\n-    }\n-\n-    /**\n-     * Get all inherited attributes from the ancestors.\n-     *\n-     * @return a list of inherited and only inherited attributes.\n-     */\n-    @Override\n-    public List<? extends GPlainAttr> findLastInheritedAncestorPlainAttrs() {\n-        if (!isInheritPlainAttrs()) {\n-            return plainAttrs;\n-        }\n-\n-        final Map<JPAGPlainSchema, GPlainAttr> result = new HashMap<>();\n-        if (isInheritPlainAttrs() && getParent() != null) {\n-            final Map<PlainSchema, GPlainAttr> attrMap = getPlainAttrMap();\n-\n-            // Add inherit attributes\n-            for (GPlainAttr attr : getParent().findLastInheritedAncestorPlainAttrs()) {\n-                if (attrMap.containsKey(attr.getSchema())) {\n-                    result.remove((JPAGPlainSchema) attr.getSchema());\n-                }\n-                result.put((JPAGPlainSchema) attr.getSchema(), attr);\n-            }\n-        }\n-        return new ArrayList<>(result.values());\n-    }\n-\n-    @Override\n-    public boolean isInheritDerAttrs() {\n-        return isBooleanAsInteger(inheritDerAttrs);\n-    }\n-\n-    @Override\n-    public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n-        this.inheritDerAttrs = getBooleanAsInteger(inheritDerAttrs);\n-\n-    }\n-\n-    /**\n-     * Get all inherited derived attributes from the ancestors.\n-     *\n-     * @return a list of inherited and only inherited attributes.\n-     */\n-    @Override\n-    public List<? extends GDerAttr> findLastInheritedAncestorDerAttrs() {\n-        if (!isInheritDerAttrs()) {\n-            return derAttrs;\n-        }\n-\n-        final Map<GDerSchema, GDerAttr> result = new HashMap<>();\n-        if (isInheritDerAttrs() && getParent() != null) {\n-            Map<DerSchema, GDerAttr> derAttrMap = getDerAttrMap();\n-\n-            // Add inherit derived attributes\n-            for (GDerAttr attr : getParent().findLastInheritedAncestorDerAttrs()) {\n-                if (derAttrMap.containsKey(attr.getSchema())) {\n-                    result.remove(attr.getSchema());\n-                }\n-                result.put(attr.getSchema(), attr);\n-            }\n-        }\n-        return new ArrayList<>(result.values());\n-    }\n-\n-    @Override\n-    public boolean isInheritVirAttrs() {\n-        return isBooleanAsInteger(inheritVirAttrs);\n-    }\n-\n-    @Override\n-    public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n-        this.inheritVirAttrs = getBooleanAsInteger(inheritVirAttrs);\n-\n-    }\n-\n-    /**\n-     * Get all inherited virtual attributes from the ancestors.\n-     *\n-     * @return a list of inherited and only inherited attributes.\n-     */\n-    @Override\n-    public List<? extends GVirAttr> findLastInheritedAncestorVirAttrs() {\n-        if (!isInheritVirAttrs()) {\n-            return virAttrs;\n-        }\n-\n-        final Map<GVirSchema, GVirAttr> result = new HashMap<>();\n-        if (isInheritVirAttrs() && getParent() != null) {\n-            Map<VirSchema, GVirAttr> virAttrMap = getVirAttrMap();\n-\n-            // Add inherit virtual attributes\n-            for (GVirAttr attr : getParent().findLastInheritedAncestorVirAttrs()) {\n-                if (virAttrMap.containsKey(attr.getSchema())) {\n-                    result.remove(attr.getSchema());\n-                }\n-                result.put(attr.getSchema(), attr);\n-            }\n-        }\n-        return new ArrayList<>(result.values());\n-    }\n-\n-    /**\n-     * Get first valid password policy.\n-     *\n-     * @return parent password policy if isInheritPasswordPolicy is 'true' and parent is not null, local password policy\n-     * otherwise\n-     */\n-    @Override\n-    public PasswordPolicy getPasswordPolicy() {\n-        return isInheritPasswordPolicy() && getParent() != null\n-                ? getParent().getPasswordPolicy()\n-                : passwordPolicy;\n-    }\n-\n-    @Override\n-    public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n-        checkType(passwordPolicy, JPAPasswordPolicy.class);\n-        this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n-    }\n-\n-    @Override\n-    public boolean isInheritPasswordPolicy() {\n-        return isBooleanAsInteger(inheritPasswordPolicy);\n-    }\n-\n-    @Override\n-    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\n-        this.inheritPasswordPolicy = getBooleanAsInteger(inheritPasswordPolicy);\n-    }\n-\n-    /**\n-     * Get first valid account policy.\n-     *\n-     * @return parent account policy if isInheritAccountPolicy is 'true' and parent is not null, local account policy\n-     * otherwise.\n-     */\n-    @Override\n-    public AccountPolicy getAccountPolicy() {\n-        return isInheritAccountPolicy() && getParent() != null\n-                ? getParent().getAccountPolicy()\n-                : accountPolicy;\n-    }\n-\n-    @Override\n-    public void setAccountPolicy(final AccountPolicy accountPolicy) {\n-        checkType(accountPolicy, JPAAccountPolicy.class);\n-        this.accountPolicy = (JPAAccountPolicy) accountPolicy;\n-    }\n-\n-    @Override\n-    public boolean isInheritAccountPolicy() {\n-        return isBooleanAsInteger(inheritAccountPolicy);\n-    }\n-\n-    @Override\n-    public void setInheritAccountPolicy(boolean inheritAccountPolicy) {\n-        this.inheritAccountPolicy = getBooleanAsInteger(inheritAccountPolicy);\n-    }\n }"},{"sha":"dc02cf3a0ebfc85cd25071dade4da9182e74c78a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/membership/JPAMembership.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAttributable;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n@@ -108,9 +109,28 @@ public void setUser(final User user) {\n     }\n \n     @Override\n-    public boolean addPlainAttr(final MPlainAttr attr) {\n-        checkType(attr, JPAMPlainAttr.class);\n-        return plainAttrs.add((JPAMPlainAttr) attr);\n+    public boolean addPlainAttr(final MPlainAttr plainAttr) {\n+        checkType(plainAttr, JPAMPlainAttr.class);\n+\n+        if (getGroup() != null && plainAttr.getSchema() != null) {\n+            MPlainAttrTemplate found = CollectionUtils.find(getGroup().getAttrTemplates(MPlainAttrTemplate.class),\n+                    new Predicate<MPlainAttrTemplate>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MPlainAttrTemplate template) {\n+                            return plainAttr.getSchema().equals(template.getSchema());\n+                        }\n+\n+                    });\n+            if (found != null) {\n+                plainAttr.setTemplate(found);\n+                return plainAttrs.add((JPAMPlainAttr) plainAttr);\n+            }\n+        }\n+\n+        LOG.warn(\"Attribute not added because either group was not yet set, \"\n+                + \"schema was not specified or no template for that schema is available\");\n+        return false;\n     }\n \n     @Override\n@@ -129,7 +149,7 @@ public boolean addDerAttr(final MDerAttr derAttr) {\n         checkType(derAttr, JPAMDerAttr.class);\n \n         if (getGroup() != null && derAttr.getSchema() != null) {\n-            MDerAttrTemplate found = CollectionUtils.find(getGroup().findInheritedTemplates(MDerAttrTemplate.class),\n+            MDerAttrTemplate found = CollectionUtils.find(getGroup().getAttrTemplates(MDerAttrTemplate.class),\n                     new Predicate<MDerAttrTemplate>() {\n \n                         @Override\n@@ -166,7 +186,7 @@ public boolean addVirAttr(final MVirAttr virAttr) {\n \n         if (getGroup() != null && virAttr.getSchema() != null) {\n             MVirAttrTemplate found = null;\n-            for (MVirAttrTemplate template : getGroup().findInheritedTemplates(MVirAttrTemplate.class)) {\n+            for (MVirAttrTemplate template : getGroup().getAttrTemplates(MVirAttrTemplate.class)) {\n                 if (virAttr.getSchema().equals(template.getSchema())) {\n                     found = template;\n                 }"},{"sha":"f98074d0309a7989f720437a01ee9e842e83040c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -37,13 +38,18 @@\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.provisioning.api.job.SyncJob;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n \n @Entity\n @DiscriminatorValue(\"SyncTask\")\n public class JPASyncTask extends AbstractProvisioningTask implements SyncTask {\n \n     private static final long serialVersionUID = -4141057723006682563L;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    private JPARealm destinationRealm;\n+\n     @ElementCollection(fetch = FetchType.EAGER)\n     @Column(name = \"actionClassName\")\n     @CollectionTable(name = \"SyncTask_actionsClassNames\",\n@@ -69,6 +75,17 @@ public JPASyncTask() {\n         super(TaskType.SYNCHRONIZATION, SyncJob.class.getName());\n     }\n \n+    @Override\n+    public Realm getDestinatioRealm() {\n+        return destinationRealm;\n+    }\n+\n+    @Override\n+    public void setDestinationRealm(final Realm destinationRealm) {\n+        checkType(destinationRealm, JPARealm.class);\n+        this.destinationRealm = (JPARealm) destinationRealm;\n+    }\n+\n     @Override\n     public List<String> getActionsClassNames() {\n         return actionsClassNames;"},{"sha":"484af1e9926f875e5c9151ddf75f9aaecf2a6bfb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -31,14 +31,14 @@\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtil;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n \n @SuppressWarnings(\"unchecked\")\n-public final class JPATaskUtil implements TaskUtil {\n+public final class JPATaskUtils implements TaskUtils {\n \n     private final TaskType type;\n \n-    protected JPATaskUtil(final TaskType type) {\n+    protected JPATaskUtils(final TaskType type) {\n         this.type = type;\n     }\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtil.java"},{"sha":"26a1d4f01690c1c0f2e4dbb45038287a59e594e6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -31,20 +31,20 @@\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtil;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class JPATaskUtilFactory implements TaskUtilFactory {\n+public class JPATaskUtilsFactory implements TaskUtilsFactory {\n \n     @Override\n-    public TaskUtil getInstance(final TaskType type) {\n-        return new JPATaskUtil(type);\n+    public TaskUtils getInstance(final TaskType type) {\n+        return new JPATaskUtils(type);\n     }\n \n     @Override\n-    public TaskUtil getInstance(final Task task) {\n+    public TaskUtils getInstance(final Task task) {\n         TaskType type;\n         if (task instanceof SyncTask) {\n             type = TaskType.SYNCHRONIZATION;\n@@ -64,7 +64,7 @@ public TaskUtil getInstance(final Task task) {\n     }\n \n     @Override\n-    public TaskUtil getInstance(final Class<? extends AbstractTaskTO> taskClass) {\n+    public TaskUtils getInstance(final Class<? extends AbstractTaskTO> taskClass) {\n         TaskType type;\n         if (taskClass == PropagationTaskTO.class) {\n             type = TaskType.PROPAGATION;\n@@ -84,7 +84,7 @@ public TaskUtil getInstance(final Class<? extends AbstractTaskTO> taskClass) {\n     }\n \n     @Override\n-    public TaskUtil getInstance(final AbstractTaskTO taskTO) {\n+    public TaskUtils getInstance(final AbstractTaskTO taskTO) {\n         return getInstance(taskTO.getClass());\n     }\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilFactory.java"},{"sha":"d12f46fd4392b26681739f10d9953f554eff667f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":33,"deletions":6,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -67,7 +67,9 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPASecurityQuestion;\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership;\n import org.apache.syncope.core.misc.security.Encryptor;\n-import org.apache.syncope.core.misc.security.SecureRandomUtil;\n+import org.apache.syncope.core.misc.security.SecureRandomUtils;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n \n /**\n  * JPA user bean.\n@@ -91,6 +93,13 @@ public class JPAUser extends AbstractSubject<UPlainAttr, UDerAttr, UVirAttr> imp\n     @Transient\n     private String clearPassword;\n \n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"user_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"role_id\"))\n+    private List<JPARole> roles;\n+\n     @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"user\")\n     @Valid\n     private List<JPAMembership> memberships;\n@@ -124,8 +133,7 @@ public class JPAUser extends AbstractSubject<UPlainAttr, UDerAttr, UVirAttr> imp\n \n     @ElementCollection\n     @Column(name = \"passwordHistoryValue\")\n-    @CollectionTable(name = \"SyncopeUser_passwordHistory\",\n-            joinColumns =\n+    @CollectionTable(name = \"SyncopeUser_passwordHistory\", joinColumns =\n             @JoinColumn(name = \"SyncopeUser_id\", referencedColumnName = \"id\"))\n     private List<String> passwordHistory;\n \n@@ -172,7 +180,7 @@ public class JPAUser extends AbstractSubject<UPlainAttr, UDerAttr, UVirAttr> imp\n     @Valid\n     private Set<JPAExternalResource> resources;\n \n-    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPASecurityQuestion securityQuestion;\n \n     @Column(nullable = true)\n@@ -181,6 +189,7 @@ public class JPAUser extends AbstractSubject<UPlainAttr, UDerAttr, UVirAttr> imp\n     public JPAUser() {\n         super();\n \n+        roles = new ArrayList<>();\n         memberships = new ArrayList<>();\n         plainAttrs = new ArrayList<>();\n         derAttrs = new ArrayList<>();\n@@ -201,6 +210,23 @@ protected Set<? extends ExternalResource> internalGetResources() {\n         return resources;\n     }\n \n+    @Override\n+    public boolean addRole(final Role role) {\n+        checkType(role, JPARole.class);\n+        return roles.contains((JPARole) role) || roles.add((JPARole) role);\n+    }\n+\n+    @Override\n+    public boolean removeRole(final Role role) {\n+        checkType(role, JPARole.class);\n+        return roles.remove((JPARole) role);\n+    }\n+\n+    @Override\n+    public List<? extends Role> getRoles() {\n+        return roles;\n+    }\n+\n     @Override\n     public boolean addMembership(final Membership membership) {\n         checkType(membership, JPAMembership.class);\n@@ -209,7 +235,8 @@ public boolean addMembership(final Membership membership) {\n \n     @Override\n     public boolean removeMembership(final Membership membership) {\n-        return memberships.remove(membership);\n+        checkType(membership, JPAMembership.class);\n+        return memberships.remove((JPAMembership) membership);\n     }\n \n     @Override\n@@ -387,7 +414,7 @@ public void setStatus(final String status) {\n \n     @Override\n     public void generateToken(final int tokenLength, final int tokenExpireTime) {\n-        this.token = SecureRandomUtil.generateRandomPassword(tokenLength);\n+        this.token = SecureRandomUtils.generateRandomPassword(tokenLength);\n \n         Calendar calendar = Calendar.getInstance();\n         calendar.add(Calendar.MINUTE, tokenExpireTime);"},{"sha":"1ce21900060956171d4142584380c852a147b62e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ConnInstanceValidator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,8 +21,8 @@\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.provisioning.api.URIUtil;\n-import org.apache.syncope.core.provisioning.api.ConnPoolConfUtil;\n+import org.apache.syncope.core.provisioning.api.URIUtils;\n+import org.apache.syncope.core.provisioning.api.ConnPoolConfUtils;\n \n public class ConnInstanceValidator extends AbstractValidator<ConnInstanceCheck, ConnInstance> {\n \n@@ -31,7 +31,7 @@ public boolean isValid(final ConnInstance connInstance, final ConstraintValidato\n         boolean isValid = true;\n \n         try {\n-            URIUtil.buildForConnId(connInstance.getLocation());\n+            URIUtils.buildForConnId(connInstance.getLocation());\n         } catch (Exception e) {\n             LOG.error(\"While validating {}\", connInstance.getLocation(), e);\n \n@@ -45,7 +45,7 @@ public boolean isValid(final ConnInstance connInstance, final ConstraintValidato\n \n         if (isValid && connInstance.getPoolConf() != null) {\n             try {\n-                ConnPoolConfUtil.getObjectPoolConfiguration(connInstance.getPoolConf()).validate();\n+                ConnPoolConfUtils.getObjectPoolConfiguration(connInstance.getPoolConf()).validate();\n             } catch (Exception e) {\n                 LOG.error(\"Invalid pool configuration\", e);\n "},{"sha":"76bdb2b5f839057dff363cdc6a151d5c0c4bac30","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,6 +20,7 @@\n \n import java.util.regex.Pattern;\n import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n@@ -33,7 +34,7 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n \n         boolean isValid = true;\n \n-        if (\"/\".equals(object.getName())) {\n+        if (SyncopeConstants.ROOT_REALM.equals(object.getName())) {\n             if (object.getParent() != null) {\n                 isValid = false;\n "},{"sha":"fac60cb9df1e7173e6995afbc4e99a8720abe15c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/UserValidator.java","status":"modified","additions":26,"deletions":21,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,12 +30,13 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.policy.AccountPolicyEnforcer;\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n import org.apache.syncope.core.misc.policy.PasswordPolicyEnforcer;\n import org.apache.syncope.core.misc.policy.PolicyEvaluator;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class UserValidator extends AbstractValidator<UserCheck, User> {\n@@ -49,6 +50,9 @@ public class UserValidator extends AbstractValidator<UserCheck, User> {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private PolicyEvaluator evaluator;\n \n@@ -62,6 +66,15 @@ public class UserValidator extends AbstractValidator<UserCheck, User> {\n     public boolean isValid(final User user, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n+        // need to treat it explicitly, otherwise policy evaluation will silently fail\n+        if (user.getRealm() == null) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidRealm, \"realm not specified\")).\n+                    addPropertyNode(\"realm\").addConstraintViolation();\n+\n+            return false;\n+        }\n+\n         // ------------------------------\n         // Verify password policies\n         // ------------------------------\n@@ -71,7 +84,7 @@ public boolean isValid(final User user, final ConstraintValidatorContext context\n             int maxPPSpecHistory = 0;\n             for (Policy policy : getPasswordPolicies(user)) {\n                 // evaluate policy\n-                final PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n+                PasswordPolicySpec ppSpec = evaluator.evaluate(policy, user);\n                 // enforce policy\n                 ppEnforcer.enforce(ppSpec, policy.getType(), user);\n \n@@ -117,7 +130,7 @@ public boolean isValid(final User user, final ConstraintValidatorContext context\n             // invalid username\n             for (Policy policy : getAccountPolicies(user)) {\n                 // evaluate policy\n-                final AccountPolicySpec accountPolicy = evaluator.evaluate(policy, user);\n+                AccountPolicySpec accountPolicy = evaluator.evaluate(policy, user);\n \n                 // enforce policy\n                 apEnforcer.enforce(accountPolicy, policy.getType(), user);\n@@ -137,13 +150,9 @@ public boolean isValid(final User user, final ConstraintValidatorContext context\n     }\n \n     private List<PasswordPolicy> getPasswordPolicies(final User user) {\n-        final List<PasswordPolicy> policies = new ArrayList<>();\n+        List<PasswordPolicy> policies = new ArrayList<>();\n \n-        // Add global policy\n-        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n-        if (policy != null) {\n-            policies.add(policy);\n-        }\n+        PasswordPolicy policy;\n \n         // add resource policies\n         for (ExternalResource resource : user.getResources()) {\n@@ -153,9 +162,9 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n             }\n         }\n \n-        // add group policies\n-        for (Group group : user.getGroups()) {\n-            policy = group.getPasswordPolicy();\n+        // add realm policies\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+            policy = realm.getPasswordPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }\n@@ -165,13 +174,9 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n     }\n \n     private List<AccountPolicy> getAccountPolicies(final User user) {\n-        final List<AccountPolicy> policies = new ArrayList<>();\n+        List<AccountPolicy> policies = new ArrayList<>();\n \n-        // add global policy\n-        AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n-        if (policy != null) {\n-            policies.add(policy);\n-        }\n+        AccountPolicy policy;\n \n         // add resource policies\n         for (ExternalResource resource : user.getResources()) {\n@@ -181,9 +186,9 @@ private List<AccountPolicy> getAccountPolicies(final User user) {\n             }\n         }\n \n-        // add group policies\n-        for (Group group : user.getGroups()) {\n-            policy = group.getAccountPolicy();\n+        // add realm policies\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+            policy = realm.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }"},{"sha":"0f4ab835a650140a890e7bddf1b37a9d41e0814f","filename":"core/persistence-jpa/src/main/resources/content.xml","status":"modified","additions":1,"deletions":82,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -108,87 +108,6 @@ under the License.\n   <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n                 traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n-  <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>  \n-  \n-  <!-- Authentication and authorization -->\n-  <Entitlement name=\"REALM_LIST\"/>\n-  <Entitlement name=\"REALM_CREATE\"/>\n-  <Entitlement name=\"REALM_UPDATE\"/>\n-  <Entitlement name=\"REALM_DELETE\"/>\n-  <Entitlement name=\"ROLE_LIST\"/>\n-  <Entitlement name=\"ROLE_CREATE\"/>\n-  <Entitlement name=\"ROLE_READ\"/>\n-  <Entitlement name=\"ROLE_UPDATE\"/>\n-  <Entitlement name=\"ROLE_DELETE\"/>\n-  <Entitlement name=\"SCHEMA_LIST\"/>\n-  <Entitlement name=\"SCHEMA_CREATE\"/>\n-  <Entitlement name=\"SCHEMA_READ\"/>\n-  <Entitlement name=\"SCHEMA_UPDATE\"/>\n-  <Entitlement name=\"SCHEMA_DELETE\"/>\n-  <Entitlement name=\"USER_LIST\"/>\n-  <Entitlement name=\"USER_CREATE\"/>\n-  <Entitlement name=\"USER_READ\"/>\n-  <Entitlement name=\"USER_UPDATE\"/>\n-  <Entitlement name=\"USER_DELETE\"/>\n-  <Entitlement name=\"USER_VIEW\"/>\n-  <Entitlement name=\"GROUP_LIST\"/>\n-  <Entitlement name=\"GROUP_CREATE\"/>\n-  <Entitlement name=\"GROUP_READ\"/>\n-  <Entitlement name=\"GROUP_UPDATE\"/>\n-  <Entitlement name=\"GROUP_DELETE\"/>\n-  <Entitlement name=\"RESOURCE_LIST\"/>\n-  <Entitlement name=\"RESOURCE_CREATE\"/>\n-  <Entitlement name=\"RESOURCE_READ\"/>\n-  <Entitlement name=\"RESOURCE_UPDATE\"/>\n-  <Entitlement name=\"RESOURCE_DELETE\"/>\n-  <Entitlement name=\"RESOURCE_GETCONNECTOROBJECT\"/>\n-  <Entitlement name=\"CONNECTOR_LIST\"/>\n-  <Entitlement name=\"CONNECTOR_CREATE\"/>\n-  <Entitlement name=\"CONNECTOR_READ\"/>\n-  <Entitlement name=\"CONNECTOR_UPDATE\"/>\n-  <Entitlement name=\"CONNECTOR_DELETE\"/>\n-  <Entitlement name=\"CONNECTOR_RELOAD\"/>\n-  <Entitlement name=\"CONFIGURATION_EXPORT\"/>\n-  <Entitlement name=\"CONFIGURATION_LIST\"/>\n-  <Entitlement name=\"CONFIGURATION_SET\"/>\n-  <Entitlement name=\"CONFIGURATION_DELETE\"/>\n-  <Entitlement name=\"TASK_LIST\"/>\n-  <Entitlement name=\"TASK_CREATE\"/>\n-  <Entitlement name=\"TASK_READ\"/>\n-  <Entitlement name=\"TASK_UPDATE\"/>\n-  <Entitlement name=\"TASK_DELETE\"/>\n-  <Entitlement name=\"TASK_EXECUTE\"/>\n-  <Entitlement name=\"POLICY_LIST\"/>\n-  <Entitlement name=\"POLICY_CREATE\"/>\n-  <Entitlement name=\"POLICY_READ\"/>\n-  <Entitlement name=\"POLICY_UPDATE\"/>\n-  <Entitlement name=\"POLICY_DELETE\"/>\n-  <Entitlement name=\"WORKFLOW_DEF_READ\"/>\n-  <Entitlement name=\"WORKFLOW_DEF_UPDATE\"/>\n-  <Entitlement name=\"WORKFLOW_TASK_LIST\"/> \n-  <Entitlement name=\"WORKFLOW_FORM_LIST\"/>\n-  <Entitlement name=\"WORKFLOW_FORM_READ\"/>\n-  <Entitlement name=\"WORKFLOW_FORM_CLAIM\"/>\n-  <Entitlement name=\"WORKFLOW_FORM_SUBMIT\"/>\n-  <Entitlement name=\"NOTIFICATION_LIST\"/>\n-  <Entitlement name=\"NOTIFICATION_CREATE\"/>\n-  <Entitlement name=\"NOTIFICATION_READ\"/>\n-  <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n-  <Entitlement name=\"NOTIFICATION_DELETE\"/>\n-  <Entitlement name=\"REPORT_LIST\"/>\n-  <Entitlement name=\"REPORT_READ\"/>\n-  <Entitlement name=\"REPORT_CREATE\"/>\n-  <Entitlement name=\"REPORT_UPDATE\"/>\n-  <Entitlement name=\"REPORT_DELETE\"/>\n-  <Entitlement name=\"REPORT_EXECUTE\"/>\n-  <Entitlement name=\"LOG_LIST\"/>\n-  <Entitlement name=\"LOG_SET_LEVEL\"/>\n-  <Entitlement name=\"LOG_DELETE\"/>\n-  <Entitlement name=\"AUDIT_LIST\"/>\n-  <Entitlement name=\"AUDIT_ENABLE\"/>\n-  <Entitlement name=\"AUDIT_DISABLE\"/>\n-  <Entitlement name=\"SECURITY_QUESTION_CREATE\"/>\n-  <Entitlement name=\"SECURITY_QUESTION_UPDATE\"/>\n-  <Entitlement name=\"SECURITY_QUESTION_DELETE\"/>\n+  <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n </dataset>"},{"sha":"8cd392da95b067a4273fbff9a1ca0c9569e93ee8","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -139,11 +139,5 @@ under the License.\n     SELECT st.group_id AS subject_id, st.resource_name AS resource_name\n     FROM SyncopeGroup_ExternalResource st\n   </entry>\n-  <entry key=\"group_search_entitlements\">\n-    CREATE VIEW group_search_entitlements AS\n-\n-    SELECT st.group_id AS subject_id, st.entitlement_name AS entitlement_name\n-    FROM SyncopeGroup_Entitlement st\n-  </entry>\n \n </properties>"},{"sha":"668c8686f2a6b8d5c2eef1cbaeb411abf9901557","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -33,6 +33,6 @@ public abstract class AbstractTest {\n     protected EntityFactory entityFactory;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n }"},{"sha":"289f898c85fd1fba7b4ec12d9d330f5b21511af7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AttrTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -87,15 +87,15 @@ public void save() throws ClassNotFoundException {\n \n         Exception thrown = null;\n         try {\n-            attribute.addValue(\"john.doe@gmail.com\", attrUtilFactory.getInstance(AttributableType.USER));\n-            attribute.addValue(\"mario.rossi@gmail.com\", attrUtilFactory.getInstance(AttributableType.USER));\n+            attribute.addValue(\"john.doe@gmail.com\", attrUtilsFactory.getInstance(AttributableType.USER));\n+            attribute.addValue(\"mario.rossi@gmail.com\", attrUtilsFactory.getInstance(AttributableType.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n         assertNull(\"no validation exception expected here \", thrown);\n \n         try {\n-            attribute.addValue(\"http://www.apache.org\", attrUtilFactory.getInstance(AttributableType.USER));\n+            attribute.addValue(\"http://www.apache.org\", attrUtilsFactory.getInstance(AttributableType.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n@@ -119,13 +119,13 @@ public void saveWithEnum() throws ClassNotFoundException {\n         Exception thrown = null;\n \n         try {\n-            attribute.addValue(\"A\", attrUtilFactory.getInstance(AttributableType.USER));\n+            attribute.addValue(\"A\", attrUtilsFactory.getInstance(AttributableType.USER));\n         } catch (ValidationException e) {\n             thrown = e;\n         }\n         assertNotNull(\"validation exception expected here \", thrown);\n \n-        attribute.addValue(\"M\", attrUtilFactory.getInstance(AttributableType.USER));\n+        attribute.addValue(\"M\", attrUtilsFactory.getInstance(AttributableType.USER));\n \n         InvalidEntityException iee = null;\n         try {\n@@ -183,7 +183,7 @@ public void saveWithEncrypted() throws Exception {\n \n         UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(obscureSchema);\n-        attribute.addValue(\"testvalue\", attrUtilFactory.getInstance(AttributableType.USER));\n+        attribute.addValue(\"testvalue\", attrUtilsFactory.getInstance(AttributableType.USER));\n         attribute.setOwner(user);\n         user.addPlainAttr(attribute);\n \n@@ -210,7 +210,7 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n \n         UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n         attribute.setSchema(photoSchema);\n-        attribute.addValue(photoB64Value, attrUtilFactory.getInstance(AttributableType.USER));\n+        attribute.addValue(photoB64Value, attrUtilsFactory.getInstance(AttributableType.USER));\n         attribute.setOwner(user);\n         user.addPlainAttr(attribute);\n "},{"sha":"ea93daea41ff89a1b1bd3685c35f99919fd1d8c9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AttributableSearchTest.java","status":"modified","additions":60,"deletions":78,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,9 +28,10 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -59,9 +60,6 @@ public class AttributableSearchTest extends AbstractTest {\n     @Autowired\n     private SubjectSearchDAO searchDAO;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n     @Test\n     public void userMatch() {\n         User user = userDAO.find(1L);\n@@ -111,8 +109,7 @@ public void searchWithLikeCondition() {\n \n         assertTrue(cond.isValid());\n \n-        List<User> users =\n-                searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -126,8 +123,7 @@ public void searchWithNotCondition() {\n         SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n         assertTrue(cond.isValid());\n \n-        List<User> users =\n-                searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n@@ -148,8 +144,7 @@ public void searchByBoolean() {\n         SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n-        List<User> users =\n-                searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n@@ -169,22 +164,22 @@ public void searchByPageAndSize() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        SearchCond subCond = SearchCond.getAndCond(SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(\n-                membershipCond));\n+        SearchCond subCond = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(membershipCond));\n \n         assertTrue(subCond.isValid());\n \n         SearchCond cond = SearchCond.getAndCond(subCond, SearchCond.getLeafCond(loginDateCond));\n \n         assertTrue(cond.isValid());\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                 cond, 1, 2, Collections.<OrderByClause>emptyList(),\n                 SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                 cond, 2, 2, Collections.<OrderByClause>emptyList(),\n                 SubjectType.USER);\n         assertNotNull(users);\n@@ -196,16 +191,16 @@ public void searchByMembership() {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setGroupId(1L);\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), SearchCond.getLeafCond(membershipCond),\n-                SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeafCond(membershipCond), SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         membershipCond = new MembershipCond();\n         membershipCond.setGroupId(5L);\n \n-        users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), SearchCond.getNotLeafCond(membershipCond),\n-                SubjectType.USER);\n+        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getNotLeafCond(membershipCond), SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(5, users.size());\n     }\n@@ -215,16 +210,16 @@ public void searchByIsNull() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n-                SubjectType.USER);\n+        List<User> users = searchDAO.search(\n+                SyncopeConstants.FULL_ADMIN_REALMS, SearchCond.getLeafCond(coolLeafCond), SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n         coolLeafCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n-                SubjectType.USER);\n+        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeafCond(coolLeafCond), SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -241,23 +236,20 @@ public void searchByResource() {\n \n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), searchCondition,\n-                SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n \n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n \n     @Test\n     public void searchByBooleanSubjectCond() {\n-        SubjectCond booleanCond = new SubjectCond(SubjectCond.Type.EQ);\n-        booleanCond.setSchema(\"inheritPlainAttrs\");\n+        AttributeCond booleanCond = new AttributeCond(SubjectCond.Type.EQ);\n+        booleanCond.setSchema(\"show\");\n         booleanCond.setExpression(\"true\");\n \n-        SearchCond searchCondition = SearchCond.getLeafCond(booleanCond);\n-\n-        List<Group> matchingGroups = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCondition, SubjectType.GROUP);\n+        List<Group> matchingGroups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeafCond(booleanCond), SubjectType.GROUP);\n         assertNotNull(matchingGroups);\n         assertFalse(matchingGroups.isEmpty());\n     }\n@@ -272,16 +264,17 @@ public void searchByUsernameAndKey() {\n         idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"2\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(usernameLeafCond),\n+        SearchCond searchCondition = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        List<User> matchingUsers = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+        List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCondition, SubjectType.USER);\n \n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.size());\n         assertEquals(\"rossini\", matchingUsers.iterator().next().getUsername());\n-        assertEquals(1L, matchingUsers.iterator().next().getKey().longValue());\n+        assertEquals(1L, matchingUsers.iterator().next().getKey(), 0);\n     }\n \n     @Test\n@@ -294,18 +287,19 @@ public void searchByGroupNameAndKey() {\n         idRightCond.setSchema(\"key\");\n         idRightCond.setExpression(\"2\");\n \n-        SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(groupNameLeafCond),\n+        SearchCond searchCondition = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(groupNameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n         assertTrue(searchCondition.isValid());\n \n-        List<Group> matchingGroups = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+        List<Group> matchingGroups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCondition, SubjectType.GROUP);\n \n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.size());\n         assertEquals(\"root\", matchingGroups.iterator().next().getName());\n-        assertEquals(1L, matchingGroups.iterator().next().getKey().longValue());\n+        assertEquals(1L, matchingGroups.iterator().next().getKey(), 0);\n     }\n \n     @Test\n@@ -318,13 +312,12 @@ public void searchByUsernameAndFullname() {\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"Giuseppe V%\");\n \n-        SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n+        SearchCond searchCondition = SearchCond.getOrCond(\n+                SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        List<User> matchingUsers =\n-                searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), searchCondition,\n-                        SubjectType.USER);\n-\n+        List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                searchCondition, SubjectType.USER);\n         assertNotNull(matchingUsers);\n         assertEquals(2, matchingUsers.size());\n     }\n@@ -338,13 +331,10 @@ public void searchById() {\n         SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users =\n-                searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), searchCondition,\n-                        SubjectType.USER);\n-\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n-        assertEquals(1L, users.iterator().next().getKey().longValue());\n+        assertEquals(1L, users.iterator().next().getKey(), 0);\n \n         idLeafCond = new SubjectCond(SubjectCond.Type.LT);\n         idLeafCond.setSchema(\"id\");\n@@ -353,18 +343,16 @@ public void searchById() {\n         searchCondition = SearchCond.getNotLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), searchCondition,\n-                SubjectType.USER);\n-\n+        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n-        boolean found = false;\n-        for (User user : users) {\n-            if (user.getKey() == 4) {\n-                found = true;\n+        assertTrue(CollectionUtils.exists(users, new Predicate<User>() {\n+\n+            @Override\n+            public boolean evaluate(User user) {\n+                return user.getKey() == 4;\n             }\n-        }\n-        assertTrue(found);\n+        }));\n     }\n \n     @Test\n@@ -378,7 +366,7 @@ public void userOrderBy() {\n         SearchCond searchCondition = SearchCond.getOrCond(\n                 SearchCond.getLeafCond(usernameLeafCond), SearchCond.getLeafCond(idRightCond));\n \n-        List<OrderByClause> orderByClauses = new ArrayList<OrderByClause>();\n+        List<OrderByClause> orderByClauses = new ArrayList<>();\n         OrderByClause orderByClause = new OrderByClause();\n         orderByClause.setField(\"username\");\n         orderByClause.setDirection(OrderByClause.Direction.DESC);\n@@ -388,11 +376,9 @@ public void userOrderBy() {\n         orderByClause.setDirection(OrderByClause.Direction.ASC);\n         orderByClauses.add(orderByClause);\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCondition, Collections.singletonList(orderByClause),\n-                SubjectType.USER);\n-        assertEquals(searchDAO.count(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCondition, SubjectType.USER),\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                searchCondition, orderByClauses, SubjectType.USER);\n+        assertEquals(searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER),\n                 users.size());\n     }\n \n@@ -407,9 +393,9 @@ public void groupOrderBy() {\n         OrderByClause orderByClause = new OrderByClause();\n         orderByClause.setField(\"name\");\n \n-        List<Group> groups = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+        List<Group> groups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCondition, Collections.singletonList(orderByClause), SubjectType.GROUP);\n-        assertEquals(searchDAO.count(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+        assertEquals(searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCondition, SubjectType.GROUP),\n                 groups.size());\n     }\n@@ -426,17 +412,16 @@ public void issue202() {\n                 SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCondition, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n-        boolean found = false;\n-        for (User user : users) {\n-            if (user.getKey() == 4) {\n-                found = true;\n+        assertTrue(CollectionUtils.exists(users, new Predicate<User>() {\n+\n+            @Override\n+            public boolean evaluate(User user) {\n+                return user.getKey() == 4;\n             }\n-        }\n-        assertTrue(found);\n+        }));\n     }\n \n     @Test\n@@ -448,8 +433,7 @@ public void issue242() {\n         SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCondition, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n@@ -463,8 +447,7 @@ public void issueSYNCOPE46() {\n         SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCondition, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -481,8 +464,7 @@ public void issueSYNCOPE433() {\n         SearchCond searchCond = SearchCond.getOrCond(\n                 SearchCond.getLeafCond(isNullCond), SearchCond.getLeafCond(likeCond));\n \n-        Integer count = searchDAO.count(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), searchCond,\n-                SubjectType.USER);\n+        Integer count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCond, SubjectType.USER);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }"},{"sha":"2539a44d2697dd35d170d12bdb500b0c1ccf0c25","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/ConfTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -72,15 +72,15 @@ public void setAndDelete() {\n         // 2. create conf\n         CPlainAttr newConf = entityFactory.newEntity(CPlainAttr.class);\n         newConf.setSchema(useless);\n-        newConf.addValue(\"2014-06-20\", attrUtilFactory.getInstance(AttributableType.CONFIGURATION));\n+        newConf.addValue(\"2014-06-20\", attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(newConf);\n \n         CPlainAttr actual = confDAO.find(\"useless\");\n         assertEquals(actual.getValuesAsStrings(), newConf.getValuesAsStrings());\n \n         // 3. update conf\n         newConf.getValues().clear();\n-        newConf.addValue(\"2014-06-20\", attrUtilFactory.getInstance(AttributableType.CONFIGURATION));\n+        newConf.addValue(\"2014-06-20\", attrUtilsFactory.getInstance(AttributableType.CONFIGURATION));\n         confDAO.save(newConf);\n \n         actual = confDAO.find(\"useless\");"},{"sha":"8b4090b788c9d94ff662d4346efe1cd9af5b48f7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/DerSchemaTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FDerSchemaTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -73,7 +73,7 @@ public void delete() {\n         UDerSchema cn = derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(cn);\n \n-        derSchemaDAO.delete(cn.getKey(), attrUtilFactory.getInstance(AttributableType.USER));\n+        derSchemaDAO.delete(cn.getKey(), attrUtilsFactory.getInstance(AttributableType.USER));\n \n         DerSchema actual = derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNull(\"delete did not work\", actual);\n@@ -82,7 +82,7 @@ public void delete() {\n         GDerSchema rderiveddata = derSchemaDAO.find(\"rderiveddata\", GDerSchema.class);\n         assertNotNull(rderiveddata);\n \n-        derSchemaDAO.delete(rderiveddata.getKey(), attrUtilFactory.getInstance(AttributableType.GROUP));\n+        derSchemaDAO.delete(rderiveddata.getKey(), attrUtilsFactory.getInstance(AttributableType.GROUP));\n \n         actual = derSchemaDAO.find(\"rderiveddata\", GDerSchema.class);\n         assertNull(\"delete did not work\", actual);"},{"sha":"82fa875d0e8086921a652e3291272adfb7370f6b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/EntitlementTest.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FEntitlementTest.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,72 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional\n-public class EntitlementTest extends AbstractTest {\n-\n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n-    @Test\n-    public void findAll() {\n-        List<Entitlement> list = entitlementDAO.findAll();\n-        assertEquals(\"did not get expected number of entitlements \", 95, list.size());\n-    }\n-\n-    @Test\n-    public void findByName() {\n-        Entitlement entitlement = entitlementDAO.find(\"base\");\n-        assertNotNull(\"did not find expected entitlement\", entitlement);\n-    }\n-\n-    @Test\n-    public void save() {\n-        Entitlement entitlement = entityFactory.newEntity(Entitlement.class);\n-        entitlement.setKey(\"another\");\n-\n-        entitlementDAO.save(entitlement);\n-\n-        Entitlement actual = entitlementDAO.find(\"another\");\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(entitlement, actual);\n-    }\n-\n-    @Test\n-    public void delete() {\n-        Entitlement entitlement = entitlementDAO.find(\"base\");\n-        assertNotNull(\"did not find expected entitlement\", entitlement);\n-\n-        entitlementDAO.delete(\"base\");\n-\n-        assertNull(entitlementDAO.find(\"base\"));\n-    }\n-}"},{"sha":"7593b066055350a1eb7a6b84ad79f1fb7391b153","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/GroupTest.java","status":"modified","additions":6,"deletions":71,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FGroupTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -23,10 +23,9 @@\n import static org.junit.Assert.assertNull;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n@@ -40,91 +39,30 @@ public class GroupTest extends AbstractTest {\n     private GroupDAO groupDAO;\n \n     @Autowired\n-    private PolicyDAO policyDAO;\n+    private RealmDAO realmDAO;\n \n     @Test\n     public void findAll() {\n-        List<Group> list = groupDAO.findAll();\n+        List<Group> list = groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n         assertEquals(\"did not get expected number of groups \", 14, list.size());\n     }\n \n-    @Test\n-    public void findChildren() {\n-        assertEquals(3, groupDAO.findChildren(groupDAO.find(4L)).size());\n-    }\n-\n     @Test\n     public void find() {\n-        Group group = groupDAO.find(\"root\", null);\n+        Group group = groupDAO.find(\"root\");\n         assertNotNull(\"did not find expected group\", group);\n-        group = groupDAO.find(null, null);\n-        assertNull(\"found group but did not expect it\", group);\n-    }\n-\n-    @Test\n-    public void inheritedAttributes() {\n-        Group director = groupDAO.find(7L);\n-\n-        assertEquals(1, director.findLastInheritedAncestorPlainAttrs().size());\n-    }\n-\n-    @Test\n-    public void inheritedDerivedAttributes() {\n-        Group director = groupDAO.find(7L);\n-\n-        assertEquals(1, director.findLastInheritedAncestorDerAttrs().size());\n-    }\n-\n-    @Test\n-    public void inheritedVirtualAttributes() {\n-        Group director = groupDAO.find(7L);\n-\n-        assertEquals(1, director.findLastInheritedAncestorVirAttrs().size());\n-    }\n-\n-    @Test\n-    public void inheritedPolicy() {\n-        Group group = groupDAO.find(7L);\n-        assertNotNull(group);\n-\n-        assertNotNull(group.getAccountPolicy());\n-        assertNotNull(group.getPasswordPolicy());\n-\n-        assertEquals(4, group.getPasswordPolicy().getKey(), 0);\n-\n-        group = groupDAO.find(5L);\n-\n-        assertNotNull(group);\n-\n-        assertNull(group.getAccountPolicy());\n-        assertNull(group.getPasswordPolicy());\n     }\n \n     @Test\n     public void save() {\n         Group group = entityFactory.newEntity(Group.class);\n         group.setName(\"secondChild\");\n-\n-        // verify inheritance password and account policies\n-        group.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        group.setAccountPolicy((AccountPolicy) policyDAO.find(6L));\n-\n-        group.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        group.setPasswordPolicy((PasswordPolicy) policyDAO.find(4L));\n-\n-        Group rootGroup = groupDAO.find(\"root\", null);\n-        group.setParent(rootGroup);\n+        group.setRealm(realmDAO.find(SyncopeConstants.ROOT_REALM));\n \n         group = groupDAO.save(group);\n \n         Group actual = groupDAO.find(group.getKey());\n         assertNotNull(\"expected save to work\", actual);\n-\n-        assertNull(group.getPasswordPolicy());\n-        assertNotNull(group.getAccountPolicy());\n-        assertEquals(Long.valueOf(6), group.getAccountPolicy().getKey());\n     }\n \n     @Test\n@@ -134,8 +72,5 @@ public void delete() {\n \n         Group actual = groupDAO.find(4L);\n         assertNull(\"delete did not work\", actual);\n-\n-        Group children = groupDAO.find(7L);\n-        assertNull(\"delete of successors did not work\", children);\n     }\n }"},{"sha":"27f587f97ad40f2a0912c9824febc0db4a259e80","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPlainSchemaTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -139,7 +139,7 @@ public void saveInvalidSchema() {\n     public void delete() {\n         UPlainSchema fullnam = plainSchemaDAO.find(\"fullname\", UPlainSchema.class);\n \n-        plainSchemaDAO.delete(fullnam.getKey(), attrUtilFactory.getInstance(AttributableType.USER));\n+        plainSchemaDAO.delete(fullnam.getKey(), attrUtilsFactory.getInstance(AttributableType.USER));\n \n         UPlainSchema actual = plainSchemaDAO.find(\"fullname\", UPlainSchema.class);\n         assertNull(\"delete did not work\", actual);"},{"sha":"2d8a85b4e4149aa03394aa98261504d5d919338c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/PolicyTest.java","status":"modified","additions":5,"deletions":15,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -63,23 +63,13 @@ public void findByType() {\n         assertFalse(policies.isEmpty());\n     }\n \n-    @Test\n-    public void findGlobalPasswordPolicy() {\n-        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n-        assertNotNull(\"findById did not work\", policy);\n-\n-        assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n-\n-        assertEquals(\"invalid policy values\", 8, (policy.getSpecification(PasswordPolicySpec.class)).getMinLength());\n-    }\n-\n     @Test(expected = InvalidEntityException.class)\n     public void saveInvalidPolicy() {\n         PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n-        SyncPolicy policy = entityFactory.newPolicy(SyncPolicy.class, false);\n+        SyncPolicy policy = entityFactory.newEntity(SyncPolicy.class);\n         policy.setSpecification(passwordPolicy);\n         policy.setDescription(\"sync policy\");\n \n@@ -92,7 +82,7 @@ public void saveSecondPasswordPolicy() {\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n-        PasswordPolicy policy = entityFactory.newPolicy(PasswordPolicy.class, true);\n+        PasswordPolicy policy = entityFactory.newEntity(PasswordPolicy.class);\n         policy.setSpecification(passwordPolicy);\n         policy.setDescription(\"global password policy\");\n \n@@ -101,7 +91,7 @@ public void saveSecondPasswordPolicy() {\n \n     @Test\n     public void create() {\n-        SyncPolicy policy = entityFactory.newPolicy(SyncPolicy.class, false);\n+        SyncPolicy policy = entityFactory.newEntity(SyncPolicy.class);\n \n         final String syncURuleName = \"net.tirasa.sync.correlation.TirasaURule\";\n         final String syncRRuleName = \"net.tirasa.sync.correlation.TirasaRRule\";\n@@ -127,14 +117,14 @@ public void update() {\n         specification.setMaxLength(8);\n         specification.setMinLength(6);\n \n-        Policy policy = policyDAO.getGlobalPasswordPolicy();\n+        Policy policy = policyDAO.find(2L);\n         assertNotNull(policy);\n         policy.setSpecification(specification);\n \n         policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n-        assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n         assertEquals((policy.getSpecification(PasswordPolicySpec.class)).getMaxLength(), 8);\n         assertEquals((policy.getSpecification(PasswordPolicySpec.class)).getMinLength(), 6);\n     }"},{"sha":"811d808ad7c27b868939a0ab07f3004d0dd2155c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/RealmTest.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,6 +27,7 @@\n \n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n@@ -56,9 +57,15 @@ public void getRoot() {\n \n     @Test\n     public void find() {\n-        Realm realm = realmDAO.find(3L);\n+        Realm realm = realmDAO.find(1L);\n+        assertNotNull(realm);\n+        assertEquals(SyncopeConstants.ROOT_REALM, realm.getName());\n+        assertEquals(SyncopeConstants.ROOT_REALM, realm.getFullPath());\n+\n+        realm = realmDAO.find(3L);\n         assertNotNull(realm);\n         assertEquals(\"even\", realm.getName());\n+        assertEquals(\"/even\", realm.getFullPath());\n         assertEquals(1, realm.getParent().getKey(), 0);\n         assertEquals(realmDAO.getRoot(), realm.getParent());\n \n@@ -76,7 +83,7 @@ public void findInvalidPath() {\n \n     @Test\n     public void findChildren() {\n-        List<Realm> children = realmDAO.findChildren(realmDAO.find(\"/\"));\n+        List<Realm> children = realmDAO.findChildren(realmDAO.find(SyncopeConstants.ROOT_REALM));\n         assertEquals(2, children.size());\n         assertTrue(children.contains(realmDAO.find(\"/odd\")));\n         assertTrue(children.contains(realmDAO.find(\"/even\")));"},{"sha":"a7bf883f69249928ddb361d0ee8c344da02b1aa4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/RoleTest.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,20 +24,12 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.misc.search.SearchCondConverter;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -49,9 +41,6 @@ public class RoleTest extends AbstractTest {\n     @Autowired\n     private RoleDAO roleDAO;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n     @Autowired\n     private SubjectSearchDAO searchDAO;\n \n@@ -63,10 +52,6 @@ public void find() {\n         Role role1 = roleDAO.find(2L);\n         assertNotNull(role1);\n         assertNotNull(role1.getName());\n-        assertFalse(searchDAO.<User>search(\n-                GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                SearchCondConverter.convert(role1.getCriteria()),\n-                Collections.<OrderByClause>emptyList(), SubjectType.USER).isEmpty());\n         assertFalse(role1.getRealms().isEmpty());\n         assertFalse(role1.getEntitlements().isEmpty());\n         assertTrue(role1.getEntitlements().contains(Entitlement.USER_LIST));\n@@ -89,7 +74,6 @@ public void findAll() {\n     public void save() {\n         Role role = entityFactory.newEntity(Role.class);\n         role.setName(\"new\");\n-        role.setCriteria(new UserFiqlSearchConditionBuilder().inGroups(2L).query());\n         role.addRealm(realmDAO.getRoot());\n         role.addRealm(realmDAO.find(\"/even/two\"));\n         role.getEntitlements().add(Entitlement.LOG_LIST);"},{"sha":"29fbc4c61d30cbd2686db3aa1ae4401999d94756","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/UserTest.java","status":"modified","additions":18,"deletions":27,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,17 +25,16 @@\n \n import java.util.Date;\n import java.util.List;\n-import java.util.Set;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -50,39 +49,37 @@ public class UserTest extends AbstractTest {\n     private UserDAO userDAO;\n \n     @Autowired\n-    private EntitlementDAO entitlementDAO;\n+    private RealmDAO realmDAO;\n \n     @Test\n     public void findAll() {\n-        List<User> list = userDAO.findAll(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), 1, 100);\n+        List<User> list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n         assertEquals(\"did not get expected number of users \", 5, list.size());\n     }\n \n     @Test\n     public void count() {\n-        Integer count = userDAO.count(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()));\n+        Integer count = userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n         assertNotNull(count);\n-        assertEquals(5, count.intValue());\n+        assertEquals(5, count, 0);\n     }\n \n     @Test\n     public void findAllByPageAndSize() {\n-        Set<Long> allGroupKeys = GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll());\n-\n         // get first page\n-        List<User> list = userDAO.findAll(allGroupKeys, 1, 2);\n+        List<User> list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 2);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get second page\n-        list = userDAO.findAll(allGroupKeys, 2, 2);\n+        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 2);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get second page with uncomplete set\n-        list = userDAO.findAll(allGroupKeys, 2, 3);\n+        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 3);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get unexistent page\n-        list = userDAO.findAll(allGroupKeys, 3, 2);\n+        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 3, 2);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n@@ -144,29 +141,28 @@ public void findByUsername() {\n     public void save() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n+        user.setRealm(realmDAO.find(\"/even/two\"));\n         user.setCreationDate(new Date());\n \n         user.setPassword(\"pass\", CipherAlgorithm.SHA256);\n \n-        Throwable t = null;\n         try {\n             userDAO.save(user);\n+            fail();\n         } catch (InvalidEntityException e) {\n-            t = e;\n+            assertNotNull(e);\n         }\n-        assertNotNull(t);\n \n         user.setPassword(\"password\", CipherAlgorithm.SHA256);\n \n         user.setUsername(\"username!\");\n \n-        t = null;\n         try {\n             userDAO.save(user);\n+            fail();\n         } catch (InvalidEntityException e) {\n-            t = e;\n+            assertNotNull(e);\n         }\n-        assertNotNull(t);\n \n         user.setUsername(\"username\");\n \n@@ -189,6 +185,7 @@ public void delete() {\n     public void issue237() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n+        user.setRealm(realmDAO.find(\"/even/two\"));\n         user.setCreationDate(new Date());\n \n         user.setPassword(\"password\", CipherAlgorithm.AES);\n@@ -202,15 +199,9 @@ public void issueSYNCOPE391() {\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n         user.setPassword(null, CipherAlgorithm.AES);\n+        user.setRealm(realmDAO.find(\"/even/two\"));\n \n-        User actual = null;\n-        Throwable t = null;\n-        try {\n-            actual = userDAO.save(user);\n-        } catch (InvalidEntityException e) {\n-            t = e;\n-        }\n-        assertNull(t);\n+        User actual = userDAO.save(user);\n         assertNull(user.getPassword());\n         assertNotNull(actual);\n     }"},{"sha":"919f7874bb2b9bdf0487b8675fb046b9ed0c6c3f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/VirSchemaTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FVirSchemaTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -72,7 +72,7 @@ public void save() {\n     public void delete() {\n         UVirSchema virtualdata = virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n \n-        virSchemaDAO.delete(virtualdata.getKey(), attrUtilFactory.getInstance(AttributableType.USER));\n+        virSchemaDAO.delete(virtualdata.getKey(), attrUtilsFactory.getInstance(AttributableType.USER));\n \n         VirSchema actual = virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n         assertNull(\"delete did not work\", actual);\n@@ -81,7 +81,7 @@ public void delete() {\n         GVirSchema rvirtualdata = virSchemaDAO.find(\"rvirtualdata\", GVirSchema.class);\n         assertNotNull(rvirtualdata);\n \n-        virSchemaDAO.delete(rvirtualdata.getKey(), attrUtilFactory.getInstance(AttributableType.GROUP));\n+        virSchemaDAO.delete(rvirtualdata.getKey(), attrUtilsFactory.getInstance(AttributableType.GROUP));\n \n         actual = virSchemaDAO.find(\"rvirtualdata\", GVirSchema.class);\n         assertNull(\"delete did not work\", actual);"},{"sha":"6c994652ca75ac69ed8b4c84fa957bc6f22b8090","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/AttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -124,7 +124,7 @@ public void checkForEnumType() {\n         MPlainAttr attr = entityFactory.newEntity(MPlainAttr.class);\n         attr.setTemplate(template);\n         attr.setOwner(membership);\n-        attr.addValue(\"yellow\", attrUtilFactory.getInstance(AttributableType.MEMBERSHIP));\n+        attr.addValue(\"yellow\", attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP));\n         membership.addPlainAttr(attr);\n \n         MPlainAttr actualAttribute = userDAO.save(user).getMembership(1L).getPlainAttr(\"color\");"},{"sha":"02f86de105ed4df3879566840b10cd1128cf0c82","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/AttributableSearchTest.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAttributableSearchTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,9 +25,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n@@ -48,12 +47,9 @@ public class AttributableSearchTest extends AbstractTest {\n     @Autowired\n     private SubjectSearchDAO searchDAO;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n     @Test\n     public void issueSYNCOPE95() {\n-        Set<Group> groups = new HashSet<>(groupDAO.findAll());\n+        Set<Group> groups = new HashSet<>(groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100));\n         for (Group group : groups) {\n             groupDAO.delete(group.getKey());\n         }\n@@ -67,7 +63,7 @@ public void issueSYNCOPE95() {\n         assertTrue(cond.isValid());\n \n         final List<User> users =\n-                searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n+                searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n "},{"sha":"92b016e6f27e11a42a70e26d0d3b1bd39e3fe13b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FDerSchemaTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -47,7 +47,7 @@ public class DerSchemaTest extends AbstractTest {\n     public void test() {\n         UDerSchema schema = derSchemaDAO.find(\"cn\", UDerSchema.class);\n \n-        derSchemaDAO.delete(schema.getKey(), attrUtilFactory.getInstance(AttributableType.USER));\n+        derSchemaDAO.delete(schema.getKey(), attrUtilsFactory.getInstance(AttributableType.USER));\n \n         derSchemaDAO.flush();\n "},{"sha":"b1f2eb11cede816f227605c65126cca4d1894db6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/EntitlementTest.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FEntitlementTest.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,57 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.relationship;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional\n-public class EntitlementTest extends AbstractTest {\n-\n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Test\n-    public void delete() {\n-        Entitlement entitlement = entitlementDAO.find(\"base\");\n-        assertNotNull(\"did not find expected entitlement\", entitlement);\n-\n-        List<Group> groups = groupDAO.findByEntitlement(entitlement);\n-        assertEquals(\"expected two groups\", 2, groups.size());\n-\n-        entitlementDAO.delete(\"base\");\n-\n-        groups = groupDAO.findByEntitlement(entitlement);\n-        assertTrue(groups.isEmpty());\n-    }\n-}"},{"sha":"251296aaf7c036620b02c01a9c87958028de696c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/GroupTest.java","status":"modified","additions":2,"deletions":41,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,14 +26,11 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n@@ -62,15 +59,9 @@ public class GroupTest extends AbstractTest {\n     @Autowired\n     private PlainAttrValueDAO plainAttrValueDAO;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n     @Test(expected = InvalidEntityException.class)\n     public void saveWithTwoOwners() {\n-        Group root = groupDAO.find(\"root\", null);\n+        Group root = groupDAO.find(\"root\");\n         assertNotNull(\"did not find expected group\", root);\n \n         User user = userDAO.find(1L);\n@@ -94,39 +85,10 @@ public void findByOwner() {\n \n         assertEquals(user, group.getUserOwner());\n \n-        Group child1 = groupDAO.find(7L);\n-        assertNotNull(child1);\n-        assertEquals(group, child1.getParent());\n-\n-        Group child2 = groupDAO.find(10L);\n-        assertNotNull(child2);\n-        assertEquals(group, child2.getParent());\n-\n         List<Group> ownedGroups = groupDAO.findOwnedByUser(user.getKey());\n         assertFalse(ownedGroups.isEmpty());\n-        assertEquals(2, ownedGroups.size());\n+        assertEquals(1, ownedGroups.size());\n         assertTrue(ownedGroups.contains(group));\n-        assertTrue(ownedGroups.contains(child1));\n-        assertFalse(ownedGroups.contains(child2));\n-    }\n-\n-    public void createWithPasswordPolicy() {\n-        PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n-        Group group = entityFactory.newEntity(Group.class);\n-        group.setName(\"groupWithPasswordPolicy\");\n-        group.setPasswordPolicy(policy);\n-\n-        Group actual = groupDAO.save(group);\n-        assertNotNull(actual);\n-\n-        actual = groupDAO.find(actual.getKey());\n-        assertNotNull(actual);\n-        assertNotNull(actual.getPasswordPolicy());\n-\n-        groupDAO.delete(actual.getKey());\n-        assertNull(groupDAO.find(actual.getKey()));\n-\n-        assertNotNull(policyDAO.find(4L));\n     }\n \n     @Test\n@@ -136,7 +98,6 @@ public void delete() {\n         groupDAO.flush();\n \n         assertNull(groupDAO.find(2L));\n-        assertEquals(1, groupDAO.findByEntitlement(entitlementDAO.find(\"base\")).size());\n         assertEquals(userDAO.find(2L).getGroups().size(), 2);\n         assertNull(plainAttrDAO.find(700L, GPlainAttr.class));\n         assertNull(plainAttrValueDAO.find(41L, GPlainAttrValue.class));"},{"sha":"f6976922d4699c7645fd28a0fa63978b2b069ae6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/PlainSchemaTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FPlainSchemaTest.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -85,7 +85,7 @@ public void deleteFullname() {\n         assertFalse(mapItems.isEmpty());\n \n         // delete user schema fullname\n-        plainSchemaDAO.delete(\"fullname\", attrUtilFactory.getInstance(AttributableType.USER));\n+        plainSchemaDAO.delete(\"fullname\", attrUtilsFactory.getInstance(AttributableType.USER));\n \n         plainSchemaDAO.flush();\n \n@@ -134,7 +134,7 @@ public void deleteSurname() {\n         assertFalse(mappings.isEmpty());\n \n         // delete user schema fullname\n-        plainSchemaDAO.delete(\"surname\", attrUtilFactory.getInstance(AttributableType.USER));\n+        plainSchemaDAO.delete(\"surname\", attrUtilsFactory.getInstance(AttributableType.USER));\n \n         plainSchemaDAO.flush();\n \n@@ -147,7 +147,7 @@ public void deleteSurname() {\n     public void deleteALong() {\n         assertEquals(6, resourceDAO.find(\"resource-db-sync\").getUmapping().getItems().size());\n \n-        plainSchemaDAO.delete(\"aLong\", attrUtilFactory.getInstance(AttributableType.USER));\n+        plainSchemaDAO.delete(\"aLong\", attrUtilsFactory.getInstance(AttributableType.USER));\n         assertNull(plainSchemaDAO.find(\"aLong\", UPlainSchema.class));\n \n         plainSchemaDAO.flush();"},{"sha":"685b2d2401a726ec5351e8526179ad9ebbecf7f9","filename":"core/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":86,"deletions":195,"changes":281,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,30 +18,6 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <Realm id=\"1\" name=\"/\"/>\n-  <Realm id=\"2\" name=\"odd\" parent_id=\"1\"/>\n-  <Realm id=\"3\" name=\"even\" parent_id=\"1\"/>\n-  <Realm id=\"4\" name=\"two\" parent_id=\"3\"/>\n-  \n-  <SyncopeRole id=\"1\" name=\"User reviewer\" criteria=\"fullname==*o*;fullname==*i*\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"1\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"1\"/>\n-  <SyncopeRole_Realm role_id=\"1\" realm_id=\"2\"/>\n-  <SyncopeRole_Realm role_id=\"1\" realm_id=\"3\"/>\n-  \n-  <SyncopeRole id=\"2\" name=\"User manager\" criteria=\"username==rossini\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"2\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_SUBMIT\" role_id=\"2\"/>\n-  <SyncopeRole_Realm role_id=\"2\" realm_id=\"4\"/>\n-\n-  <SyncopeRole id=\"3\" name=\"Other\" criteria=\"id=gt=2;id=le=4\"/>\n-  <SyncopeRole_entitlements entitlement=\"SCHEMA_READ\" role_id=\"3\"/>\n-  <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_id=\"3\"/>\n-  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"3\"/>\n-  <SyncopeRole_Realm role_id=\"3\" realm_id=\"2\"/>\n-\n   <SyncopeConf id=\"1\" \n                creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n@@ -115,100 +91,129 @@ under the License.\n                 mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   \n   <!-- sample policies -->\n-  <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"global sync policy\" type=\"GLOBAL_SYNC\" \n+  <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n-  <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" \n+  <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":true}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"ALL\",\"userAltSearchSchemas\":[\"username\",\"firstname\"],\"groupAltSearchSchemas\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" \n-          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":false}'/>\n-  <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" \n-          specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"permittedLoginRetries\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n+          specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":true}'/>\n+  <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"an account policy\" type=\"ACCOUNT\" \n+          specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" \n-          specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"permittedLoginRetries\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+          specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":false}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n     \n+  <Realm id=\"1\" name=\"/\" passwordPolicy_id=\"4\"/>\n+  <Realm id=\"2\" name=\"odd\" parent_id=\"1\" accountPolicy_id=\"6\"/>\n+  <Realm id=\"3\" name=\"even\" parent_id=\"1\"/>\n+  <Realm id=\"4\" name=\"two\" parent_id=\"3\" accountPolicy_id=\"5\" passwordPolicy_id=\"2\"/>\n+  \n+  <SyncopeRole id=\"1\" name=\"User reviewer\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"1\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"1\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"1\"/>\n+  <SyncopeRole_Realm role_id=\"1\" realm_id=\"2\"/>\n+  <SyncopeRole_Realm role_id=\"1\" realm_id=\"3\"/>\n+  \n+  <SyncopeRole id=\"2\" name=\"User manager\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_READ\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_LIST\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"2\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_SUBMIT\" role_id=\"2\"/>\n+  <SyncopeRole_Realm role_id=\"2\" realm_id=\"1\"/>\n+\n+  <SyncopeRole id=\"3\" name=\"Other\"/>\n+  <SyncopeRole_entitlements entitlement=\"SCHEMA_READ\" role_id=\"3\"/>\n+  <SyncopeRole_entitlements entitlement=\"GROUP_READ\" role_id=\"3\"/>\n+  <SyncopeRole_entitlements entitlement=\"WORKFLOW_FORM_CLAIM\" role_id=\"3\"/>\n+  <SyncopeRole_Realm role_id=\"3\" realm_id=\"2\"/>\n+  \n   <SyncopeUser id=\"1\" workflowId=\"4\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n+               realm_id=\"1\"\n                username=\"rossini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"1\" role_id=\"3\"/>\n   <SyncopeUser id=\"2\" workflowId=\"6\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n+               realm_id=\"1\"\n                username=\"verdi\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"2\" role_id=\"1\"/>\n   <SyncopeUser id=\"3\" workflowId=\"8\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n+               realm_id=\"1\"\n                username=\"vivaldi\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser id=\"4\" workflowId=\"10\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n+               realm_id=\"1\"\n                username=\"bellini\" creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"4\" role_id=\"2\"/>\n   <SyncopeUser id=\"5\" workflowId=\"12\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n+               realm_id=\"1\"\n                username=\"puccini\" creator=\"admin\" lastModifier=\"admin\" \n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n-\n+  \n   <SyncopeGroup id=\"1\" name=\"root\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"2\" name=\"child\" parent_id=\"1\"\n+  <SyncopeGroup id=\"2\" name=\"child\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup id=\"3\" name=\"citizen\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"4\" name=\"employee\" parent_id=\"3\"\n+  <SyncopeGroup id=\"4\" name=\"employee\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"5\" name=\"secretary\" parent_id=\"4\"\n+  <SyncopeGroup id=\"5\" name=\"secretary\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"6\"\n-                name=\"director\" parent_id=\"4\" userOwner_id=\"5\"\n-                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-                inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n-                passwordPolicy_id=\"4\"\n-                accountPolicy_id=\"6\"\n+  <SyncopeGroup id=\"6\" name=\"director\" userOwner_id=\"5\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"7\"\n-                name=\"managingDirector\" parent_id=\"6\"\n-                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-                inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"1\"\n+  <SyncopeGroup id=\"7\" name=\"managingDirector\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"8\"\n-                name=\"otherchild\" parent_id=\"1\"\n-                inheritVirAttrs=\"1\"\n-                passwordPolicy_id=\"4\"\n+  <SyncopeGroup id=\"8\" name=\"otherchild\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"9\" name=\"groupForWorkflowApproval\" parent_id=\"1\"\n+  <SyncopeGroup id=\"9\" name=\"groupForWorkflowApproval\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"10\"\n-                name=\"managingConsultant\" parent_id=\"6\"\n-                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-                inheritPasswordPolicy=\"1\" inheritAccountPolicy=\"1\" inheritOwner=\"0\"\n+  <SyncopeGroup id=\"10\" name=\"managingConsultant\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"11\" name=\"groupForWorkflowOptIn\" parent_id=\"1\"\n+  <SyncopeGroup id=\"11\" name=\"groupForWorkflowOptIn\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"12\" name=\"aGroupForPropagation\" parent_id=\"1\"\n+  <SyncopeGroup id=\"12\" name=\"aGroupForPropagation\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"13\" name=\"bGroupForPropagation\" parent_id=\"1\"\n+  <SyncopeGroup id=\"13\" name=\"bGroupForPropagation\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n-  <SyncopeGroup id=\"14\"\n-                name=\"artDirector\" parent_id=\"4\"\n-                inheritPlainAttrs=\"1\" inheritDerAttrs=\"1\" inheritVirAttrs=\"1\"\n-                inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n-                passwordPolicy_id=\"8\"\n-                accountPolicy_id=\"6\"\n+  <SyncopeGroup id=\"14\" name=\"artDirector\"\n+                realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n@@ -667,7 +672,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n \n-  <!-- Use resource-testdb for passthrough authentication (SYNCOPE-164) in the global account policy -->\n+  <!-- Use resource-testdb for passthrough authentication (SYNCOPE-164) -->\n   <Policy_ExternalResource account_policy_id=\"5\" resource_name=\"resource-testdb\"/>\n     \n   <SyncopeUser_ExternalResource user_id=\"1\" resource_name=\"resource-testdb2\"/>\n@@ -926,36 +931,36 @@ under the License.\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" subjectType=\"USER\" subjectId=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n+        destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"\n-        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derivedAttributes\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"groupId\":8,\"groupName\":null,\"attributes\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[]}]}'\n-        groupTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"groupOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritPlainAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"gPlainAttrTemplates\":[],\"gDerAttrTemplates\":[],\"gVirAttrTemplates\":[],\"mPlainAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n+        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"groupKey\":8,\"groupName\":null,\"plainAttrs\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[]}]}'\n+        groupTemplate='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": [],\"gPlainAttrTemplates\": [],\"gDerAttrTemplates\": [],\"gVirAttrTemplates\": [],\"mPlainAttrTemplates\": [],\"mDerAttrTemplates\": [],\"mVirAttrTemplates\": []}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.provisioning.java.job.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" subjectType=\"USER\" subjectId=\"1\"\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <TaskExec id=\"6\" task_id=\"6\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n+        destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n-        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"memberships\":[]}'\n-        groupTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"groupOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritPlainAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"gPlainAttrTemplates\":[],\"gDerAttrTemplates\":[],\"gVirAttrTemplates\":[],\"mPlainAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n+        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"memberships\":[]}'\n+        groupTemplate='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": [],\"gPlainAttrTemplates\": [],\"gDerAttrTemplates\": [],\"gVirAttrTemplates\": [],\"mPlainAttrTemplates\": [],\"mDerAttrTemplates\": [],\"mVirAttrTemplates\": []}'/>\n   <Task DTYPE=\"NotificationTask\" type=\"NOTIFICATION\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n+        destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"10\" name=\"TestDB Sync Task\" resource_name=\"resource-db-sync\"\n-        fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n+        destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n-        fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n+        destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n-        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[{\"schema\":\"virtualReadOnly\",\"readonly\":false,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"memberships\":[]}'\n-        groupTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"name\":null,\"parent\":8,\"userOwner\":null,\"groupOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritPlainAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"&apos;true&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"gPlainAttrTemplates\":[\"show\"],\"gDerAttrTemplates\":[],\"gVirAttrTemplates\":[],\"mPlainAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n+        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":false,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"memberships\":[]}'\n+        groupTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"realm\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"gPlainAttrTemplates\":[\"show\"],\"gDerAttrTemplates\":[],\"gVirAttrTemplates\":[],\"mPlainAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n-        performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n+        destinationRealm_id=\"1\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"13\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n@@ -1002,15 +1007,15 @@ under the License.\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UNLINK\" \n         userFilter=\"username==_NO_ONE_\" groupFilter=\"name==citizen\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"24\" name=\"CSV Task (update matching; provision unmatching)\" resource_name=\"resource-csv\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n+        destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n-        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[]}'\n-        groupTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"groupOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritPlainAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"gPlainAttrTemplates\":[],\"gDerAttrTemplates\":[],\"gVirAttrTemplates\":[],\"mPlainAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n+        userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[]}'\n+        groupTemplate='{\"creator\": null,\"creationDate\": null,\"lastModifier\": null,\"lastChangeDate\": null,\"key\": 0,\"name\": null,\"userOwner\": null,\"groupOwner\": null,\"plainAttrs\": [], \"derAttrs\": [],\"virAttrs\": [],\"resources\": [],\"propagationStatuses\": [],\"gPlainAttrTemplates\": [],\"gDerAttrTemplates\": [],\"gVirAttrTemplates\": [],\"mPlainAttrTemplates\": [],\"mDerAttrTemplates\": [],\"mVirAttrTemplates\": []}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n+        destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"26\" name=\"CSV (ignore matching; assign unmatching)\" resource_name=\"resource-csv\"\n-        performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n+        destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         jobClassName=\"org.apache.syncope.core.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n \n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n@@ -1035,124 +1040,10 @@ under the License.\n   \n   <Report id=\"1\" name=\"test\"/>\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" \n-                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttributes\":[\"fullname\",\"gender\"],\"derivedAttributes\":[\"cn\"],\"virtualAttributes\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n+                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttrs\":[\"fullname\",\"gender\"],\"derAttrs\":[\"cn\"],\"virAttrs\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n   <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n   \n   <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementLogic]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n-\n-  <!-- Authentication and authorization -->\n-  <Entitlement name=\"base\"/>\n-  <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n-  <Entitlement name=\"REALM_LIST\"/>\n-  <Entitlement name=\"REALM_CREATE\"/>\n-  <Entitlement name=\"REALM_UPDATE\"/>\n-  <Entitlement name=\"REALM_DELETE\"/>\n-  <Entitlement name=\"ROLE_LIST\"/>\n-  <Entitlement name=\"ROLE_CREATE\"/>\n-  <Entitlement name=\"ROLE_READ\"/>\n-  <Entitlement name=\"ROLE_UPDATE\"/>\n-  <Entitlement name=\"ROLE_DELETE\"/>\n-  <Entitlement name=\"SCHEMA_LIST\"/>\n-  <Entitlement name=\"SCHEMA_CREATE\"/>\n-  <Entitlement name=\"SCHEMA_READ\"/>\n-  <Entitlement name=\"SCHEMA_UPDATE\"/>\n-  <Entitlement name=\"SCHEMA_DELETE\"/>\n-  <Entitlement name=\"USER_LIST\"/>\n-  <Entitlement name=\"USER_CREATE\"/>\n-  <Entitlement name=\"USER_READ\"/>\n-  <Entitlement name=\"USER_UPDATE\"/>\n-  <Entitlement name=\"USER_DELETE\"/>\n-  <Entitlement name=\"USER_VIEW\"/>\n-  <Entitlement name=\"GROUP_LIST\"/>\n-  <Entitlement name=\"GROUP_CREATE\"/>\n-  <Entitlement name=\"GROUP_READ\"/>\n-  <Entitlement name=\"GROUP_UPDATE\"/>\n-  <Entitlement name=\"GROUP_DELETE\"/>\n-  <Entitlement name=\"RESOURCE_LIST\"/>\n-  <Entitlement name=\"RESOURCE_CREATE\"/>\n-  <Entitlement name=\"RESOURCE_READ\"/>\n-  <Entitlement name=\"RESOURCE_UPDATE\"/>\n-  <Entitlement name=\"RESOURCE_DELETE\"/>\n-  <Entitlement name=\"RESOURCE_GETCONNECTOROBJECT\"/>\n-  <Entitlement name=\"CONNECTOR_LIST\"/>\n-  <Entitlement name=\"CONNECTOR_CREATE\"/>\n-  <Entitlement name=\"CONNECTOR_READ\"/>\n-  <Entitlement name=\"CONNECTOR_UPDATE\"/>\n-  <Entitlement name=\"CONNECTOR_DELETE\"/>\n-  <Entitlement name=\"CONNECTOR_RELOAD\"/>\n-  <Entitlement name=\"CONFIGURATION_EXPORT\"/>\n-  <Entitlement name=\"CONFIGURATION_LIST\"/>\n-  <Entitlement name=\"CONFIGURATION_SET\"/>\n-  <Entitlement name=\"CONFIGURATION_DELETE\"/>\n-  <Entitlement name=\"TASK_LIST\"/>\n-  <Entitlement name=\"TASK_CREATE\"/>\n-  <Entitlement name=\"TASK_READ\"/>\n-  <Entitlement name=\"TASK_UPDATE\"/>\n-  <Entitlement name=\"TASK_DELETE\"/>\n-  <Entitlement name=\"TASK_EXECUTE\"/>\n-  <Entitlement name=\"POLICY_LIST\"/>\n-  <Entitlement name=\"POLICY_CREATE\"/>\n-  <Entitlement name=\"POLICY_READ\"/>\n-  <Entitlement name=\"POLICY_UPDATE\"/>\n-  <Entitlement name=\"POLICY_DELETE\"/>\n-  <Entitlement name=\"WORKFLOW_DEF_READ\"/>\n-  <Entitlement name=\"WORKFLOW_DEF_UPDATE\"/>\n-  <Entitlement name=\"WORKFLOW_TASK_LIST\"/> \n-  <Entitlement name=\"WORKFLOW_FORM_LIST\"/>\n-  <Entitlement name=\"WORKFLOW_FORM_READ\"/>\n-  <Entitlement name=\"WORKFLOW_FORM_CLAIM\"/>\n-  <Entitlement name=\"WORKFLOW_FORM_SUBMIT\"/>\n-  <Entitlement name=\"NOTIFICATION_LIST\"/>\n-  <Entitlement name=\"NOTIFICATION_CREATE\"/>\n-  <Entitlement name=\"NOTIFICATION_READ\"/>\n-  <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n-  <Entitlement name=\"NOTIFICATION_DELETE\"/>\n-  <Entitlement name=\"REPORT_LIST\"/>\n-  <Entitlement name=\"REPORT_READ\"/>\n-  <Entitlement name=\"REPORT_CREATE\"/>\n-  <Entitlement name=\"REPORT_UPDATE\"/>\n-  <Entitlement name=\"REPORT_DELETE\"/>\n-  <Entitlement name=\"REPORT_EXECUTE\"/>\n-  <Entitlement name=\"LOG_LIST\"/>\n-  <Entitlement name=\"LOG_SET_LEVEL\"/>\n-  <Entitlement name=\"LOG_DELETE\"/>\n-  <Entitlement name=\"AUDIT_LIST\"/>\n-  <Entitlement name=\"AUDIT_ENABLE\"/>\n-  <Entitlement name=\"AUDIT_DISABLE\"/>\n-  <Entitlement name=\"SECURITY_QUESTION_CREATE\"/>\n-  <Entitlement name=\"SECURITY_QUESTION_UPDATE\"/>\n-  <Entitlement name=\"SECURITY_QUESTION_DELETE\"/>\n-  <Entitlement name=\"GROUP_1\"/>\n-  <Entitlement name=\"GROUP_2\"/>\n-  <Entitlement name=\"GROUP_3\"/>\n-  <Entitlement name=\"GROUP_4\"/>\n-  <Entitlement name=\"GROUP_5\"/>\n-  <Entitlement name=\"GROUP_6\"/>\n-  <Entitlement name=\"GROUP_7\"/>\n-  <Entitlement name=\"GROUP_8\"/>\n-  <Entitlement name=\"GROUP_9\"/>\n-  <Entitlement name=\"GROUP_10\"/>\n-  <Entitlement name=\"GROUP_11\"/>\n-  <Entitlement name=\"GROUP_12\"/>\n-  <Entitlement name=\"GROUP_13\"/>\n-  <Entitlement name=\"GROUP_14\"/>\n-\n-  <SyncopeGroup_Entitlement entitlement_name=\"base\" group_id=\"1\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"advanced\" group_id=\"1\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"base\" group_id=\"2\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"USER_READ\" group_id=\"2\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"USER_LIST\" group_id=\"2\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"USER_READ\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"USER_LIST\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"GROUP_8\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"GROUP_9\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"GROUP_7\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"GROUP_1\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"WORKFLOW_FORM_CLAIM\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"WORKFLOW_FORM_SUBMIT\" group_id=\"7\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"SCHEMA_READ\" group_id=\"8\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"GROUP_READ\" group_id=\"8\"/>\n-  <SyncopeGroup_Entitlement entitlement_name=\"WORKFLOW_FORM_CLAIM\" group_id=\"8\"/>\n   \n   <SecurityQuestion id=\"1\" content=\"What's your mother's maiden name?\"/>\n </dataset>"},{"sha":"736706a02a4e42de03afdcb04550cf667844e92d","filename":"core/persistence-jpa/src/test/resources/simplelogger.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -14,4 +14,8 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+\n+# See http://www.slf4j.org/api/org/slf4j/impl/SimpleLogger.html\n+# Possible values: \"trace\", \"debug\", \"info\", \"warn\", or \"error\"\n org.slf4j.simpleLogger.defaultLogLevel=debug\n+org.slf4j.simpleLogger.log.org.springframework.jdbc.core.JdbcTemplate=error\n\\ No newline at end of file"},{"sha":"186dbbb9fa85fa556489b4b2244e0d84ba6c4036","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnIdBundleManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnIdBundleManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,6 +21,7 @@\n import java.net.URI;\n import java.util.List;\n import java.util.Map;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n@@ -34,15 +35,14 @@ public interface ConnIdBundleManager {\n \n     Map<URI, ConnectorInfoManager> getConnManagers();\n \n-    ConnectorInfo getConnectorInfo(final String location, final String bundleName, final String bundleVersion,\n-            final String connectorName);\n+    ConnectorInfo getConnectorInfo(ConnInstance connInstance);\n \n     Map<URI, ConnectorInfoManager> getConnInfoManagers();\n \n     void resetConnManagers();\n \n     List<URI> getLocations();\n \n-    void setStringLocations(final String stringLocations);\n+    void setStringLocations(String stringLocations);\n \n }"},{"sha":"55216ae5e6bed77beba65615084ab9287e90b54c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnPoolConfUtils.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnPoolConfUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnPoolConfUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnPoolConfUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n import org.identityconnectors.common.pooling.ObjectPoolConfiguration;\n \n-public final class ConnPoolConfUtil {\n+public final class ConnPoolConfUtils {\n \n     public static ConnPoolConf getConnPoolConf(final ConnPoolConfTO cpcto, final ConnPoolConf cpc) {\n         ObjectPoolConfiguration opc = new ObjectPoolConfiguration();\n@@ -63,7 +63,7 @@ public static void updateObjectPoolConfiguration(\n         }\n     }\n \n-    private ConnPoolConfUtil() {\n+    private ConnPoolConfUtils() {\n         // empty constructor for static utility class\n     }\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnPoolConfUtil.java"},{"sha":"6989f8cb7bd094b1c2a006186c77f2165ad6b3a1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,17 +21,18 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupMod> {\n \n-    Map.Entry<Long, List<PropagationStatus>> create(GroupTO groupTO, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> create(GroupTO groupTO, Set<String> excludedResources);\n \n-    Map.Entry<Long, List<PropagationStatus>> create(\n+    Pair<Long, List<PropagationStatus>> create(\n             GroupTO groupTO, Map<Long, String> groupOwnerMap, Set<String> excludedResources);\n \n-    Map.Entry<Long, List<PropagationStatus>> update(GroupMod subjectMod, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> update(GroupMod subjectMod, Set<String> excludedResources);\n \n }"},{"sha":"95450e28b93ec91ee0b2424f632b3203c7658063","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,16 +20,16 @@\n \n import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n public interface ProvisioningManager<T extends AbstractAttributableTO, M extends AbstractAttributableMod> {\n \n-    Map.Entry<Long, List<PropagationStatus>> create(T subject);\n+    Pair<Long, List<PropagationStatus>> create(T subject);\n \n-    Map.Entry<Long, List<PropagationStatus>> update(M subjectMod);\n+    Pair<Long, List<PropagationStatus>> update(M subjectMod);\n \n     List<PropagationStatus> delete(Long subjectId);\n "},{"sha":"91fd0c2dfa5b48a5072cdc6e0e5133f671596cd5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/URIUtils.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FURIUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FURIUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FURIUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,9 +24,9 @@\n import java.net.URISyntaxException;\n import java.net.URL;\n \n-public final class URIUtil {\n+public final class URIUtils {\n \n-    private URIUtil() {\n+    private URIUtils() {\n         // empty constructor for static utility class\n     }\n ","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/URIUtil.java"},{"sha":"19a1aed811dd17dcca450e40c0bdcc9294fddd2b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.provisioning.api;\n \n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -30,22 +30,22 @@\n \n public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserMod> {\n \n-    Map.Entry<Long, List<PropagationStatus>> activate(User user, StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> activate(User user, StatusMod statusMod);\n \n-    Map.Entry<Long, List<PropagationStatus>> reactivate(User user, StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> reactivate(User user, StatusMod statusMod);\n \n-    Map.Entry<Long, List<PropagationStatus>> suspend(User user, StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> suspend(User user, StatusMod statusMod);\n \n     void innerSuspend(User user, boolean propagate);\n \n-    Map.Entry<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword);\n+    Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword);\n \n-    Map.Entry<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword,\n+    Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword,\n             boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources);\n \n-    Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships);\n+    Pair<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships);\n \n-    Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, Long key,\n+    Pair<Long, List<PropagationStatus>> update(UserMod userMod, Long key,\n             ProvisioningResult result, Boolean enabled, Set<String> excludedResources);\n \n     List<PropagationStatus> delete(Long subjectKey, Set<String> excludedResources);"},{"sha":"cb1525ee6902ee06a7657c3797ed228675b6e850","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SchemaDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSchemaDataBinder.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -36,11 +36,11 @@ public interface SchemaDataBinder {\n \n     <T extends DerSchema> DerSchemaTO getDerSchemaTO(T derSchema);\n \n-    <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(T schema, AttributableUtil attributableUtil);\n+    <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(T schema, AttributableUtils attributableUtil);\n \n     <T extends VirSchema> VirSchemaTO getVirSchemaTO(T virSchema);\n \n-    <T extends PlainSchema> void update(PlainSchemaTO schemaTO, T schema, AttributableUtil attributableUtil);\n+    <T extends PlainSchema> void update(PlainSchemaTO schemaTO, T schema, AttributableUtils attributableUtil);\n \n     <T extends DerSchema> T update(DerSchemaTO derSchemaTO, T derSchema);\n "},{"sha":"997e98e3c2e738d3e1cd65121d0194cdb2bb454a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/TaskDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,16 +24,16 @@\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtil;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n \n public interface TaskDataBinder {\n \n-    SchedTask createSchedTask(SchedTaskTO taskTO, TaskUtil taskUtil);\n+    SchedTask createSchedTask(SchedTaskTO taskTO, TaskUtils taskUtil);\n \n     TaskExecTO getTaskExecTO(TaskExec execution);\n \n-    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtil taskUtil);\n+    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtils taskUtil);\n \n-    void updateSchedTask(SchedTask task, SchedTaskTO taskTO, TaskUtil taskUtil);\n+    void updateSchedTask(SchedTask task, SchedTaskTO taskTO, TaskUtils taskUtil);\n \n }"},{"sha":"db76ca1050128d137af9517e5f47c596dff68ae2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":50,"deletions":104,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,8 +20,8 @@\n \n import java.util.Collection;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -35,15 +35,6 @@\n \n public interface PropagationManager {\n \n-    /**\n-     * Create the group on every associated resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param vAttrs virtual attributes to be set\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupCreateTaskIds(WorkflowResult<Long> wfResult, List<AttrTO> vAttrs);\n-\n     /**\n      * Create the group on every associated resource.\n      *\n@@ -52,7 +43,7 @@ public interface PropagationManager {\n      * @param noPropResourceNames external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupCreateTaskIds(\n+    List<PropagationTask> getGroupCreateTasks(\n             WorkflowResult<Long> wfResult, Collection<AttrTO> vAttrs, Collection<String> noPropResourceNames);\n \n     /**\n@@ -64,131 +55,109 @@ List<PropagationTask> getGroupCreateTaskIds(\n      * @param noPropResourceNames external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupCreateTaskIds(Long key, Collection<AttrTO> vAttrs, PropagationByResource propByRes,\n+    List<PropagationTask> getGroupCreateTasks(Long key, Collection<AttrTO> vAttrs, PropagationByResource propByRes,\n             Collection<String> noPropResourceNames);\n \n+    /**\n+     * Performs update on each resource associated to the group.\n+     *\n+     * @param wfResult group to be propagated (and info associated), as per result from workflow\n+     * @param vAttrsToBeRemoved virtual attributes to be removed\n+     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param noPropResourceNames external resource names not to be considered for propagation\n+     * @return list of propagation tasks\n+     */\n+    List<PropagationTask> getGroupUpdateTasks(WorkflowResult<Long> wfResult, Set<String> vAttrsToBeRemoved,\n+            Set<AttrMod> vAttrsToBeUpdated, Set<String> noPropResourceNames);\n+\n     /**\n      * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n      * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n      * the creation fails onto a mandatory resource.\n      *\n-     * @param groupId to be deleted\n+     * @param groupKey to be deleted\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupDeleteTaskIds(Long groupId);\n+    List<PropagationTask> getGroupDeleteTasks(Long groupKey);\n \n     /**\n      * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n      * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n      * the creation fails onto a mandatory resource.\n      *\n-     * @param groupId to be deleted\n+     * @param groupKey to be deleted\n      * @param noPropResourceName name of external resource not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupDeleteTaskIds(Long groupId, String noPropResourceName);\n+    List<PropagationTask> getGroupDeleteTasks(Long groupKey, String noPropResourceName);\n \n     /**\n      * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n      * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n      * the creation fails onto a mandatory resource.\n      *\n-     * @param groupId to be deleted\n+     * @param groupKey to be deleted\n      * @param noPropResourceNames name of external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupDeleteTaskIds(Long groupId, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getGroupDeleteTasks(Long groupKey, Collection<String> noPropResourceNames);\n \n     /**\n      * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n      * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n      * the creation fails onto a mandatory resource.\n      *\n-     * @param groupId to be deleted\n+     * @param groupKey to be deleted\n+     * @param resourceNames resource from which group is to be deleted\n      * @param noPropResourceNames name of external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupDeleteTaskIds(\n-            Long groupId, Set<String> resourceNames, Collection<String> noPropResourceNames);\n-\n-    /**\n-     * Performs update on each resource associated to the group.\n-     *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupUpdateTaskIds(WorkflowResult<Long> wfResult, Set<String> vAttrsToBeRemoved,\n-            Set<AttrMod> vAttrsToBeUpdated);\n-\n-    /**\n-     * Performs update on each resource associated to the group.\n-     *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupUpdateTaskIds(WorkflowResult<Long> wfResult, Set<String> vAttrsToBeRemoved,\n-            Set<AttrMod> vAttrsToBeUpdated, Set<String> noPropResourceNames);\n-\n-    List<PropagationTask> getUpdateTaskIds(Subject<?, ?, ?> subject, String password, boolean changePwd,\n-            Boolean enable, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated,\n-            PropagationByResource propByRes, Collection<String> noPropResourceNames,\n-            Set<MembershipMod> membershipsToAdd);\n-\n-    /**\n-     * Create the user on every associated resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param password to be set\n-     * @param vAttrs virtual attributes to be set\n-     * @param membershipTOs user memberships\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getUserCreateTaskIds(WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            String password, List<AttrTO> vAttrs, List<MembershipTO> membershipTOs);\n+    List<PropagationTask> getGroupDeleteTasks(\n+            Long groupKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n \n     /**\n      * Create the user on every associated resource.\n      *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param key to be propagated\n+     * @param enable whether user must be enabled or not\n+     * @param propByRes operation to be performed per resource\n      * @param password to be set\n      * @param vAttrs virtual attributes to be set\n      * @param noPropResourceNames external resources not to be considered for propagation\n      * @param membershipTOs user memberships\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserCreateTaskIds(WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            String password, Collection<AttrTO> vAttrs, Set<String> noPropResourceNames,\n-            List<MembershipTO> membershipTOs);\n-\n-    List<PropagationTask> getUserCreateTaskIds(Long key, Boolean enabled,\n+    List<PropagationTask> getUserCreateTasks(Long key, Boolean enable,\n             PropagationByResource propByRes, String password, Collection<AttrTO> vAttrs,\n             Collection<MembershipTO> membershipTOs, Collection<String> noPropResourceNames);\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n+     * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n      *\n-     * @param userKey to be deleted\n+     * @param user to be propagated\n+     * @param enable whether user must be enabled or not\n+     * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTaskIds(Long userKey);\n+    List<PropagationTask> getUserUpdateTasks(User user, Boolean enable, Collection<String> noPropResourceNames);\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n+     * Performs update on each resource associated to the user.\n      *\n-     * @param userKey to be deleted\n-     * @param noPropResourceName name of external resource not to be considered for propagation\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n+     * @param changePwd whether password should be included for propagation attributes or not\n+     * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTaskIds(Long userKey, String noPropResourceName);\n+    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserMod, Boolean>> wfResult,\n+            boolean changePwd, Collection<String> noPropResourceNames);\n+\n+    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserMod, Boolean>> wfResult);\n+\n+    List<PropagationTask> getUpdateTasks(Subject<?, ?, ?> subject, String password, boolean changePwd,\n+            Boolean enable, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated,\n+            PropagationByResource propByRes, Collection<String> noPropResourceNames,\n+            Set<MembershipMod> membershipsToAdd);\n \n     /**\n      * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n@@ -199,7 +168,7 @@ List<PropagationTask> getUserCreateTaskIds(Long key, Boolean enabled,\n      * @param noPropResourceNames name of external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTaskIds(Long userKey, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getUserDeleteTasks(Long userKey, Collection<String> noPropResourceNames);\n \n     /**\n      * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n@@ -211,7 +180,7 @@ List<PropagationTask> getUserCreateTaskIds(Long key, Boolean enabled,\n      * @param noPropResourceNames name of external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTaskIds(\n+    List<PropagationTask> getUserDeleteTasks(\n             Long userKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n \n     /**\n@@ -222,29 +191,6 @@ List<PropagationTask> getUserDeleteTaskIds(\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTaskIds(WorkflowResult<Long> wfResult);\n-\n-    /**\n-     * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n-     *\n-     * @param user to be propagated\n-     * @param enable whether user must be enabled or not\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getUserUpdateTaskIds(User user, Boolean enable, Collection<String> noPropResourceNames);\n-\n-    /**\n-     * Performs update on each resource associated to the user.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param changePwd whether password should be included for propagation attributes or not\n-     * @param noPropResourceNames external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getUserUpdateTaskIds(WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult,\n-            boolean changePwd, Collection<String> noPropResourceNames);\n-\n-    List<PropagationTask> getUserUpdateTaskIds(WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult);\n+    List<PropagationTask> getUserDeleteTasks(WorkflowResult<Long> wfResult);\n \n }"},{"sha":"268453a78ea1cce9a91f2a9b4f6d55e9bb85f36f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -33,8 +33,9 @@\n import javax.net.ssl.X509TrustManager;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.URIUtil;\n+import org.apache.syncope.core.provisioning.api.URIUtils;\n import org.identityconnectors.common.IOUtil;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -81,7 +82,7 @@ private void init() {\n             locations = new ArrayList<>();\n             for (String location : StringUtils.isBlank(stringLocations) ? new String[0] : stringLocations.split(\",\")) {\n                 try {\n-                    locations.add(URIUtil.buildForConnId(location));\n+                    locations.add(URIUtils.buildForConnId(location));\n                     LOG.info(\"Valid ConnId location: {}\", location.trim());\n                 } catch (Exception e) {\n                     LOG.error(\"Invalid ConnId location: {}\", location.trim(), e);\n@@ -223,19 +224,18 @@ public Map<URI, ConnectorInfoManager> getConnManagers() {\n     }\n \n     @Override\n-    public ConnectorInfo getConnectorInfo(\n-            final String location, final String bundleName, final String bundleVersion, final String connectorName) {\n-\n+    public ConnectorInfo getConnectorInfo(final ConnInstance connInstance) {\n         // check ConnIdLocation\n         URI uriLocation = null;\n         try {\n-            uriLocation = URIUtil.buildForConnId(location);\n+            uriLocation = URIUtils.buildForConnId(connInstance.getLocation());\n         } catch (Exception e) {\n-            throw new IllegalArgumentException(\"Invalid ConnId location \" + location, e);\n+            throw new IllegalArgumentException(\"Invalid ConnId location \" + connInstance.getLocation(), e);\n         }\n \n         // create key for search all properties\n-        final ConnectorKey key = new ConnectorKey(bundleName, bundleVersion, connectorName);\n+        ConnectorKey key = new ConnectorKey(\n+                connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName());\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n@@ -249,7 +249,7 @@ public ConnectorInfo getConnectorInfo(\n             info = getConnManagers().get(uriLocation).findConnectorInfo(key);\n         }\n         if (info == null) {\n-            throw new NotFoundException(\"Connector Info for location \" + location + \" and key \" + key);\n+            throw new NotFoundException(\"ConnectorInfo for location \" + connInstance.getLocation() + \" and key \" + key);\n         }\n \n         return info;"},{"sha":"3c76b82cb5ec4630afec4116af21aaf954f483bc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.ConnPoolConfUtil;\n+import org.apache.syncope.core.provisioning.api.ConnPoolConfUtils;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n@@ -99,8 +99,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n \n         ConnIdBundleManager connIdBundleManager =\n                 ApplicationContextProvider.getApplicationContext().getBean(ConnIdBundleManager.class);\n-        ConnectorInfo info = connIdBundleManager.getConnectorInfo(connInstance.getLocation(),\n-                connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName());\n+        ConnectorInfo info = connIdBundleManager.getConnectorInfo(connInstance);\n \n         // create default configuration\n         APIConfiguration apiConfig = info.createDefaultAPIConfiguration();\n@@ -117,7 +116,7 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n         // set pooling configuration (if supported) according to conninstance's\n         if (connInstance.getPoolConf() != null) {\n             if (apiConfig.isConnectorPoolingSupported()) {\n-                ConnPoolConfUtil.updateObjectPoolConfiguration(\n+                ConnPoolConfUtils.updateObjectPoolConfiguration(\n                         apiConfig.getConnectorPoolConfiguration(), connInstance.getPoolConf());\n             } else {\n                 LOG.warn(\"Connector pooling not supported for {}\", info);"},{"sha":"bf16b8da571250b55ca66c9f24de1dd7fcd24332","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":21,"deletions":40,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -31,12 +30,13 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -46,7 +46,6 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n \n@@ -67,19 +66,16 @@ public class DefaultGroupProvisioningManager implements GroupProvisioningManager\n     protected GroupDAO groupDAO;\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO subject) {\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO subject) {\n         return create(subject, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO subject, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO subject, final Set<String> excludedResources) {\n         WorkflowResult<Long> created = gwfAdapter.create(subject);\n \n-        AuthContextUtil.extendAuthContext(created.getResult(), GroupEntitlementUtil.getEntitlementNameFromGroupKey(\n-                created.getResult()));\n-\n         List<PropagationTask> tasks =\n-                propagationManager.getGroupCreateTaskIds(created, subject.getVirAttrs(), excludedResources);\n+                propagationManager.getGroupCreateTasks(created, subject.getVirAttrs(), excludedResources);\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n                 PropagationReporter.class);\n         try {\n@@ -89,11 +85,11 @@ public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO subject, fi\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        return new AbstractMap.SimpleEntry<>(created.getResult(), propagationReporter.getStatuses());\n+        return new ImmutablePair<>(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(\n+    public Pair<Long, List<PropagationStatus>> create(\n             final GroupTO groupTO, final Map<Long, String> groupOwnerMap, final Set<String> excludedResources) {\n \n         WorkflowResult<Long> created = gwfAdapter.create(groupTO);\n@@ -102,30 +98,27 @@ public Map.Entry<Long, List<PropagationStatus>> create(\n             groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n         }\n \n-        AuthContextUtil.extendAuthContext(created.getResult(),\n-                GroupEntitlementUtil.getEntitlementNameFromGroupKey(created.getResult()));\n-\n-        List<PropagationTask> tasks = propagationManager.getGroupCreateTaskIds(\n+        List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n                 created, groupTO.getVirAttrs(), excludedResources);\n \n         taskExecutor.execute(tasks);\n \n-        return new AbstractMap.SimpleEntry<>(created.getResult(), null);\n+        return new ImmutablePair<>(created.getResult(), null);\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final GroupMod subjectMod) {\n+    public Pair<Long, List<PropagationStatus>> update(final GroupMod subjectMod) {\n         return update(subjectMod, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(\n+    public Pair<Long, List<PropagationStatus>> update(\n             final GroupMod subjectMod, final Set<String> excludedResources) {\n \n         WorkflowResult<Long> updated = gwfAdapter.update(subjectMod);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTaskIds(updated,\n-                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate());\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n+                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate(), null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -135,41 +128,29 @@ public Map.Entry<Long, List<PropagationStatus>> update(\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<>(\n+        Pair<Long, List<PropagationStatus>> result = new ImmutablePair<>(\n                 updated.getResult(), propagationReporter.getStatuses());\n         return result;\n     }\n \n     @Override\n     public List<PropagationStatus> delete(final Long subjectKey) {\n-        final List<Group> toBeDeprovisioned = new ArrayList<>();\n-\n-        final Group syncopeGroup = groupDAO.find(subjectKey);\n-\n-        if (syncopeGroup != null) {\n-            toBeDeprovisioned.add(syncopeGroup);\n-\n-            final List<Group> descendants = groupDAO.findDescendants(toBeDeprovisioned.get(0));\n-            if (descendants != null) {\n-                toBeDeprovisioned.addAll(descendants);\n-            }\n-        }\n-\n         final List<PropagationTask> tasks = new ArrayList<>();\n \n-        for (Group group : toBeDeprovisioned) {\n+        Group group = groupDAO.authFetch(subjectKey);\n+        if (group != null) {\n             // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n             // because of the reason being deleted (see SYNCOPE-357)\n-            for (Map.Entry<Long, PropagationByResource> entry : groupDAO.findUsersWithIndirectResources(group.\n-                    getKey()).entrySet()) {\n+            for (Map.Entry<Long, PropagationByResource> entry\n+                    : groupDAO.findUsersWithIndirectResources(group.getKey()).entrySet()) {\n \n                 WorkflowResult<Long> wfResult =\n                         new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult));\n             }\n \n             // Generate propagation tasks for deleting this group from resources\n-            tasks.addAll(propagationManager.getGroupDeleteTaskIds(group.getKey()));\n+            tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey()));\n         }\n \n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n@@ -202,7 +183,7 @@ public List<PropagationStatus> deprovision(final Long groupKey, final Collection\n \n         Collection<String> noPropResourceName = CollectionUtils.removeAll(group.getResourceNames(), resources);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupDeleteTaskIds(\n+        List<PropagationTask> tasks = propagationManager.getGroupDeleteTasks(\n                 groupKey, new HashSet<>(resources), noPropResourceName);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);"},{"sha":"ce28830c97db5d9bac61e6963abebed452ed732a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":50,"deletions":56,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.AbstractMap;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -68,28 +68,34 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {\n     protected UserDAO userDAO;\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO) {\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO) {\n         return create(userTO, true, false, null, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword) {\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword) {\n         return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n             final boolean disablePwdPolicyCheck, final Boolean enabled, final Set<String> excludedResources) {\n \n-        WorkflowResult<Map.Entry<Long, Boolean>> created;\n+        WorkflowResult<Pair<Long, Boolean>> created;\n         try {\n             created = uwfAdapter.create(userTO, disablePwdPolicyCheck, enabled, storePassword);\n         } catch (PropagationException e) {\n             throw e;\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n-                created, userTO.getPassword(), userTO.getVirAttrs(), excludedResources, userTO.getMemberships());\n+        List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n+                created.getResult().getKey(),\n+                created.getResult().getValue(),\n+                created.getPropByRes(),\n+                userTO.getPassword(),\n+                userTO.getVirAttrs(),\n+                userTO.getMemberships(),\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -99,19 +105,19 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, fina\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        return new AbstractMap.SimpleEntry<>(created.getResult().getKey(), propagationReporter.getStatuses());\n+        return new ImmutablePair<>(created.getResult().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod) {\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n         return update(userMod, false);\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, final boolean removeMemberships) {\n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final boolean removeMemberships) {\n+        WorkflowResult<Pair<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             final PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n@@ -133,7 +139,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n                 }\n             }\n             tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships\n-                    ? propagationManager.getUserUpdateTaskIds(updated, false, null)\n+                    ? propagationManager.getUserUpdateTasks(updated, false, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n@@ -147,7 +153,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             }\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<>(\n+        Pair<Long, List<PropagationStatus>> result = new ImmutablePair<>(\n                 updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n         return result;\n     }\n@@ -164,7 +170,7 @@ public List<PropagationStatus> delete(final Long subjectId, final Set<String> ex\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(subjectId, excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(subjectId, excludedResources);\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n@@ -186,7 +192,7 @@ public List<PropagationStatus> delete(final Long subjectId, final Set<String> ex\n \n     @Override\n     public Long unlink(final UserMod userMod) {\n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n+        WorkflowResult<Pair<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n         return updated.getResult().getKey().getKey();\n     }\n \n@@ -196,49 +202,37 @@ public Long link(final UserMod subjectMod) {\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n-        WorkflowResult<Long> updated;\n-        if (statusMod.isOnSyncope()) {\n-            updated = uwfAdapter.activate(user.getKey(), statusMod.getToken());\n-        } else {\n-            updated = new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n-        }\n+    public Pair<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n+        WorkflowResult<Long> updated = statusMod.isOnSyncope()\n+                ? uwfAdapter.activate(user.getKey(), statusMod.getToken())\n+                : new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n \n-        List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n-        return new AbstractMap.SimpleEntry<>(updated.getResult(), statuses);\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(user, statusMod));\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n-        WorkflowResult<Long> updated;\n-        if (statusMod.isOnSyncope()) {\n-            updated = uwfAdapter.reactivate(user.getKey());\n-        } else {\n-            updated = new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n-        }\n+    public Pair<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n+        WorkflowResult<Long> updated = statusMod.isOnSyncope()\n+                ? uwfAdapter.reactivate(user.getKey())\n+                : new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n \n-        List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n-        return new AbstractMap.SimpleEntry<>(updated.getResult(), statuses);\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(user, statusMod));\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n-        WorkflowResult<Long> updated;\n-        if (statusMod.isOnSyncope()) {\n-            updated = uwfAdapter.suspend(user.getKey());\n-        } else {\n-            updated = new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n-        }\n+    public Pair<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n+        WorkflowResult<Long> updated = statusMod.isOnSyncope()\n+                ? uwfAdapter.suspend(user.getKey())\n+                : new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n \n-        List<PropagationStatus> statuses = propagateStatus(user, statusMod);\n-        return new AbstractMap.SimpleEntry<>(updated.getResult(), statuses);\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(user, statusMod));\n     }\n \n     protected List<PropagationStatus> propagateStatus(final User user, final StatusMod statusMod) {\n         Collection<String> noPropResourceNames =\n                 CollectionUtils.removeAll(user.getResourceNames(), statusMod.getResourceNames());\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 user, statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n@@ -262,9 +256,9 @@ public void innerSuspend(final User user, final boolean propagate) {\n             UserMod userMod = new UserMod();\n             userMod.setKey(updated.getResult());\n \n-            final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                    new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                            new AbstractMap.SimpleEntry<>(userMod, Boolean.FALSE),\n+            final List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                    new WorkflowResult<Pair<UserMod, Boolean>>(\n+                            new ImmutablePair<>(userMod, Boolean.FALSE),\n                             updated.getPropByRes(), updated.getPerformedTasks()));\n \n             taskExecutor.execute(tasks);\n@@ -278,7 +272,7 @@ public List<PropagationStatus> deprovision(final Long userKey, final Collection<\n         Collection<String> noPropResourceNames = CollectionUtils.removeAll(user.getResourceNames(), resources);\n \n         final List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<>(resources), noPropResourceNames);\n+                propagationManager.getUserDeleteTasks(userKey, new HashSet<>(resources), noPropResourceNames);\n         final PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -292,10 +286,10 @@ public List<PropagationStatus> deprovision(final Long userKey, final Collection<\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, final Long key,\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final Long key,\n             final ProvisioningResult result, final Boolean enabled, final Set<String> excludedResources) {\n \n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n+        WorkflowResult<Pair<UserMod, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(userMod);\n         } catch (Exception e) {\n@@ -304,8 +298,8 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n-            updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                    new AbstractMap.SimpleEntry<>(userMod, false), new PropagationByResource(),\n+            updated = new WorkflowResult<Pair<UserMod, Boolean>>(\n+                    new ImmutablePair<>(userMod, false), new PropagationByResource(),\n                     new HashSet<String>());\n         }\n \n@@ -330,7 +324,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             }\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n                 getBean(PropagationReporter.class);\n@@ -341,7 +335,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        return new AbstractMap.SimpleEntry<>(updated.getResult().getKey().getKey(),\n+        return new ImmutablePair<>(updated.getResult().getKey().getKey(),\n                 propagationReporter.getStatuses());\n \n     }\n@@ -355,7 +349,7 @@ public void requestPasswordReset(final Long id) {\n     public void confirmPasswordReset(final User user, final String token, final String password) {\n         uwfAdapter.confirmPasswordReset(user.getKey(), token, password);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, null, null);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(user, null, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"6354041e8f850e363a3fa33dfccbf7f3a656f986","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandler.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -31,14 +31,13 @@\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.MembershipDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -64,9 +63,6 @@ public class VirAttrHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n-\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n@@ -80,7 +76,7 @@ public class VirAttrHandler {\n     private MembershipDAO membershipDAO;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     public <T extends VirSchema> T getVirSchema(final String virSchemaName, final Class<T> reference) {\n         T virtualSchema = null;\n@@ -116,12 +112,12 @@ public void setVirAttrSchema(final Attributable<?, ?, ?> attributable,\n         }\n     }\n \n-    public void updateOnResourcesIfMappingMatches(final AttributableUtil attrUtil, final String schemaKey,\n+    public void updateOnResourcesIfMappingMatches(final AttributableUtils attrUtils, final String schemaKey,\n             final Set<ExternalResource> resources, final IntMappingType mappingType,\n             final PropagationByResource propByRes) {\n \n         for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+            for (MappingItem mapItem : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                 if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n                     propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n                 }\n@@ -132,7 +128,7 @@ public void updateOnResourcesIfMappingMatches(final AttributableUtil attrUtil, f\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public PropagationByResource fillVirtual(final Attributable attributable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtils attrUtils) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n@@ -146,7 +142,7 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n \n         // 1. virtual attributes to be removed\n         for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n-            VirSchema virSchema = getVirSchema(vAttrToBeRemoved, attrUtil.virSchemaClass());\n+            VirSchema virSchema = getVirSchema(vAttrToBeRemoved, attrUtils.virSchemaClass());\n             if (virSchema != null) {\n                 VirAttr virAttr = attributable.getVirAttr(virSchema.getKey());\n                 if (virAttr == null) {\n@@ -157,9 +153,9 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n                 }\n \n                 for (ExternalResource resource : externalResources) {\n-                    for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                    for (MappingItem mapItem : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                         if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == attrUtil.virIntMappingType()) {\n+                                && mapItem.getIntMappingType() == attrUtils.virIntMappingType()) {\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n@@ -177,12 +173,12 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n \n         // 2. virtual attributes to be updated\n         for (AttrMod vAttrToBeUpdated : vAttrsToBeUpdated) {\n-            VirSchema virSchema = getVirSchema(vAttrToBeUpdated.getSchema(), attrUtil.virSchemaClass());\n+            VirSchema virSchema = getVirSchema(vAttrToBeUpdated.getSchema(), attrUtils.virSchemaClass());\n             VirAttr virAttr = null;\n             if (virSchema != null) {\n                 virAttr = attributable.getVirAttr(virSchema.getKey());\n                 if (virAttr == null) {\n-                    virAttr = attrUtil.newVirAttr();\n+                    virAttr = attrUtils.newVirAttr();\n                     setVirAttrSchema(attributable, virAttr, virSchema);\n                     if (virAttr.getSchema() == null) {\n                         LOG.debug(\"Ignoring {} because no valid schema or template was found\", vAttrToBeUpdated);\n@@ -194,10 +190,10 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n \n             if (virSchema != null && virAttr != null && virAttr.getSchema() != null) {\n                 if (attributable instanceof Subject) {\n-                    updateOnResourcesIfMappingMatches(attrUtil, virSchema.getKey(),\n-                            externalResources, attrUtil.derIntMappingType(), propByRes);\n+                    updateOnResourcesIfMappingMatches(attrUtils, virSchema.getKey(),\n+                            externalResources, attrUtils.derIntMappingType(), propByRes);\n                 } else if (attributable instanceof Membership) {\n-                    updateOnResourcesIfMappingMatches(attrUtil, virSchema.getKey(),\n+                    updateOnResourcesIfMappingMatches(attrUtils, virSchema.getKey(),\n                             externalResources, IntMappingType.MembershipVirtualSchema, propByRes);\n                 }\n \n@@ -223,18 +219,18 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n      *\n      * @param attributable attributable.\n      * @param vAttrs virtual attributes to be added.\n-     * @param attrUtil attributable util.\n+     * @param attrUtils attributable util.\n      */\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public void fillVirtual(final Attributable attributable, final Collection<AttrTO> vAttrs,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtils attrUtils) {\n \n         for (AttrTO attributeTO : vAttrs) {\n             VirAttr virAttr = attributable.getVirAttr(attributeTO.getSchema());\n             if (virAttr == null) {\n-                VirSchema virSchema = getVirSchema(attributeTO.getSchema(), attrUtil.virSchemaClass());\n+                VirSchema virSchema = getVirSchema(attributeTO.getSchema(), attrUtils.virSchemaClass());\n                 if (virSchema != null) {\n-                    virAttr = attrUtil.newVirAttr();\n+                    virAttr = attrUtils.newVirAttr();\n                     setVirAttrSchema(attributable, virAttr, virSchema);\n                     if (virAttr.getSchema() == null) {\n                         LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeTO);\n@@ -267,7 +263,7 @@ public PropagationByResource fillVirtual(\n                 userDAO.authFetch(key),\n                 vAttrsToBeRemoved,\n                 vAttrsToBeUpdated,\n-                attrUtilFactory.getInstance(AttributableType.USER));\n+                attrUtilsFactory.getInstance(AttributableType.USER));\n     }\n \n     private Set<String> getAttrNames(final List<? extends VirAttr> virAttrs) {\n@@ -302,12 +298,12 @@ public PropagationByResource fillMembershipVirtual(\n                         membership,\n                         getAttrNames(membership.getVirAttrs()),\n                         vAttrsToBeUpdated,\n-                        attrUtilFactory.getInstance(AttributableType.MEMBERSHIP))\n+                        attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP))\n                 : fillVirtual(\n                         membership,\n                         vAttrsToBeRemoved,\n                         vAttrsToBeUpdated,\n-                        attrUtilFactory.getInstance(AttributableType.MEMBERSHIP));\n+                        attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP));\n     }\n \n }"},{"sha":"faaa0708bbd065fda920cee2fbe4b6a701c0db4f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/cache/DisabledVirAttrCache.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FDisabledVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FDisabledVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FDisabledVirAttrCache.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,6 +27,10 @@\n  */\n public class DisabledVirAttrCache implements VirAttrCache {\n \n+    public DisabledVirAttrCache(final int ttl, final int maxCacheSize) {\n+        // ignore\n+    }\n+\n     @Override\n     public void expire(final AttributableType type, final Long id, final String schemaName) {\n         // nothing to do"},{"sha":"885b19476a6db2f694564d6413c88d3c3fbfd264","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/cache/MemoryVirAttrCache.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FMemoryVirAttrCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FMemoryVirAttrCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fcache%2FMemoryVirAttrCache.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -46,7 +46,7 @@ public class MemoryVirAttrCache implements VirAttrCache {\n     /**\n      * Cache entries.\n      */\n-    protected final Map<VirAttrCacheKey, VirAttrCacheValue> cache = new HashMap<VirAttrCacheKey, VirAttrCacheValue>();\n+    protected final Map<VirAttrCacheKey, VirAttrCacheValue> cache = new HashMap<>();\n \n     public MemoryVirAttrCache(final int ttl, final int maxCacheSize) {\n         this.ttl = ttl;\n@@ -56,8 +56,8 @@ public MemoryVirAttrCache(final int ttl, final int maxCacheSize) {\n     /**\n      * Cache virtual attribute values.\n      *\n-     * @param type user or group\n-     * @param key user or group id\n+     * @param type user, group or membership\n+     * @param key attributable key\n      * @param schemaName virtual attribute name\n      * @param value virtual attribute values\n      */\n@@ -81,26 +81,26 @@ public void put(\n     /**\n      * Retrieve cached value. Return null in case of virtual attribute not cached.\n      *\n-     * @param type user or group\n-     * @param id user or group id\n+     * @param type user, group or membership\n+     * @param key attributable key\n      * @param schemaName virtual attribute schema name.\n      * @return cached values or null if virtual attribute is not cached.\n      */\n     @Override\n-    public VirAttrCacheValue get(final AttributableType type, final Long id, final String schemaName) {\n-        return cache.get(new VirAttrCacheKey(type, id, schemaName));\n+    public VirAttrCacheValue get(final AttributableType type, final Long key, final String schemaName) {\n+        return cache.get(new VirAttrCacheKey(type, key, schemaName));\n     }\n \n     /**\n      * Force entry expiring.\n      *\n-     * @param type user or group\n-     * @param id user or group id\n+     * @param type user, group or membership\n+     * @param key attributable key\n      * @param schemaName virtual attribute schema name\n      */\n     @Override\n-    public void expire(final AttributableType type, final Long id, final String schemaName) {\n-        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, id, schemaName));\n+    public void expire(final AttributableType type, final Long key, final String schemaName) {\n+        final VirAttrCacheValue value = cache.get(new VirAttrCacheKey(type, key, schemaName));\n         if (isValidEntry(value)) {\n             synchronized (cache) {\n                 value.forceExpiring();"},{"sha":"643da62d2994d35b66b8dd3685da505d2982ef80","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAttributableDataBinder.java","status":"modified","additions":92,"deletions":64,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -54,8 +54,8 @@\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -86,9 +86,11 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainSchema;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n-import org.apache.syncope.core.misc.MappingUtil;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -100,6 +102,9 @@ abstract class AbstractAttributableDataBinder {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAttributableDataBinder.class);\n \n+    @Autowired\n+    protected RealmDAO realmDAO;\n+\n     @Autowired\n     protected GroupDAO groupDAO;\n \n@@ -140,11 +145,22 @@ abstract class AbstractAttributableDataBinder {\n     protected EntityFactory entityFactory;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n     @Autowired\n     protected VirAttrHandler virtAttrHander;\n \n+    protected void setRealm(final Subject<?, ?, ?> subject, final AbstractSubjectMod subjectMod) {\n+        if (StringUtils.isNotBlank(subjectMod.getRealm())) {\n+            Realm newRealm = realmDAO.find(subjectMod.getRealm());\n+            if (newRealm == null) {\n+                LOG.warn(\"Invalid realm specified: {}, ignoring\", subjectMod.getRealm());\n+            } else {\n+                subject.setRealm(newRealm);\n+            }\n+        }\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends Schema> T getSchema(final String schemaName, final Class<T> reference) {\n         T result = null;\n@@ -190,7 +206,7 @@ private <T extends DerSchema> T getDerSchema(final String derSchemaName, final C\n         return derivedSchema;\n     }\n \n-    protected void fillAttribute(final List<String> values, final AttributableUtil attributableUtil,\n+    protected void fillAttribute(final List<String> values, final AttributableUtils attributableUtil,\n             final PlainSchema schema, final PlainAttr attr, final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n@@ -216,22 +232,22 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n         }\n     }\n \n-    private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil, final ExternalResource resource,\n+    private boolean evaluateMandatoryCondition(final AttributableUtils attrUtils, final ExternalResource resource,\n             final Attributable<?, ?, ?> attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n         boolean result = false;\n \n-        final List<MappingItem> mappings = MappingUtil.getMatchingMappingItems(\n-                attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION), intAttrName, intMappingType);\n+        Collection<MappingItem> mappings = MappingUtils.getMatchingMappingItems(\n+                attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION), intAttrName, intMappingType);\n         for (Iterator<MappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n             final MappingItem mapping = itor.next();\n-            result |= JexlUtil.evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n+            result |= JexlUtils.evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n         }\n \n         return result;\n     }\n \n-    private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil,\n+    private boolean evaluateMandatoryCondition(final AttributableUtils attrUtils,\n             final Attributable<?, ?, ?> attributable, final String intAttrName, final IntMappingType intMappingType) {\n \n         boolean result = false;\n@@ -242,22 +258,22 @@ private boolean evaluateMandatoryCondition(final AttributableUtil attrUtil,\n \n                 final ExternalResource resource = itor.next();\n                 if (resource.isEnforceMandatoryCondition()) {\n-                    result |= evaluateMandatoryCondition(attrUtil, resource, attributable, intAttrName, intMappingType);\n+                    result |= evaluateMandatoryCondition(attrUtils, resource, attributable, intAttrName, intMappingType);\n                 }\n             }\n         }\n \n         return result;\n     }\n \n-    private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n+    private SyncopeClientException checkMandatory(final AttributableUtils attrUtils,\n             final Attributable<?, ?, ?> attributable) {\n \n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n         List<? extends PlainSchema> plainSchemas;\n-        switch (attrUtil.getType()) {\n+        switch (attrUtils.getType()) {\n             case GROUP:\n                 plainSchemas = ((Group) attributable).getAttrTemplateSchemas(GPlainAttrTemplate.class);\n                 break;\n@@ -268,14 +284,14 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n \n             case USER:\n             default:\n-                plainSchemas = plainSchemaDAO.findAll(attrUtil.plainSchemaClass());\n+                plainSchemas = plainSchemaDAO.findAll(attrUtils.plainSchemaClass());\n         }\n         for (PlainSchema schema : plainSchemas) {\n             if (attributable.getPlainAttr(schema.getKey()) == null\n                     && !schema.isReadonly()\n-                    && (JexlUtil.evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n-                    || evaluateMandatoryCondition(attrUtil, attributable, schema.getKey(),\n-                            attrUtil.plainIntMappingType()))) {\n+                    && (JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), attributable)\n+                    || evaluateMandatoryCondition(attrUtils, attributable, schema.getKey(),\n+                            attrUtils.plainIntMappingType()))) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n@@ -284,7 +300,7 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n         }\n \n         List<? extends DerSchema> derSchemas;\n-        switch (attrUtil.getType()) {\n+        switch (attrUtils.getType()) {\n             case GROUP:\n                 derSchemas = ((Group) attributable).getAttrTemplateSchemas(GDerAttrTemplate.class);\n                 break;\n@@ -295,12 +311,12 @@ private SyncopeClientException checkMandatory(final AttributableUtil attrUtil,\n \n             case USER:\n             default:\n-                derSchemas = derSchemaDAO.findAll(attrUtil.derSchemaClass());\n+                derSchemas = derSchemaDAO.findAll(attrUtils.derSchemaClass());\n         }\n         for (DerSchema derSchema : derSchemas) {\n             if (attributable.getDerAttr(derSchema.getKey()) == null\n-                    && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getKey(),\n-                            attrUtil.derIntMappingType())) {\n+                    && evaluateMandatoryCondition(attrUtils, attributable, derSchema.getKey(),\n+                            attrUtils.derIntMappingType())) {\n \n                 LOG.error(\"Mandatory derived schema \" + derSchema.getKey() + \" does not evaluate to any value\");\n \n@@ -309,7 +325,7 @@ && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getKey(),\n         }\n \n         List<? extends VirSchema> virSchemas;\n-        switch (attrUtil.getType()) {\n+        switch (attrUtils.getType()) {\n             case GROUP:\n                 virSchemas = ((Group) attributable).getAttrTemplateSchemas(GVirAttrTemplate.class);\n                 break;\n@@ -320,13 +336,13 @@ && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getKey(),\n \n             case USER:\n             default:\n-                virSchemas = virSchemaDAO.findAll(attrUtil.virSchemaClass());\n+                virSchemas = virSchemaDAO.findAll(attrUtils.virSchemaClass());\n         }\n         for (VirSchema virSchema : virSchemas) {\n             if (attributable.getVirAttr(virSchema.getKey()) == null\n                     && !virSchema.isReadonly()\n-                    && evaluateMandatoryCondition(attrUtil, attributable, virSchema.getKey(),\n-                            attrUtil.virIntMappingType())) {\n+                    && evaluateMandatoryCondition(attrUtils, attributable, virSchema.getKey(),\n+                            attrUtils.virIntMappingType())) {\n \n                 LOG.error(\"Mandatory virtual schema \" + virSchema.getKey() + \" not provided with values\");\n \n@@ -379,7 +395,7 @@ private void setDerAttrSchema(final Attributable<?, ?, ?> attributable,\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected PropagationByResource fill(final Attributable attributable,\n-            final AbstractAttributableMod attributableMod, final AttributableUtil attrUtil,\n+            final AbstractAttributableMod attributableMod, final AttributableUtils attrUtils,\n             final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -420,7 +436,7 @@ protected PropagationByResource fill(final Attributable attributable,\n \n         // 3. attributes to be removed\n         for (String attributeToBeRemoved : attributableMod.getPlainAttrsToRemove()) {\n-            PlainSchema schema = getPlainSchema(attributeToBeRemoved, attrUtil.plainSchemaClass());\n+            PlainSchema schema = getPlainSchema(attributeToBeRemoved, attrUtils.plainSchemaClass());\n             if (schema != null) {\n                 PlainAttr attr = attributable.getPlainAttr(schema.getKey());\n                 if (attr == null) {\n@@ -437,15 +453,15 @@ protected PropagationByResource fill(final Attributable attributable,\n                             || (!attr.getUniqueValue().getStringValue().equals(newValue))) {\n \n                         attributable.removePlainAttr(attr);\n-                        plainAttrDAO.delete(attr.getKey(), attrUtil.plainAttrClass());\n+                        plainAttrDAO.delete(attr.getKey(), attrUtils.plainAttrClass());\n                     }\n                 }\n \n                 if (attributable instanceof Subject) {\n                     for (ExternalResource resource : externalResources) {\n-                        for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                        for (MappingItem mapItem : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                             if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.plainIntMappingType()) {\n+                                    && mapItem.getIntMappingType() == attrUtils.plainIntMappingType()) {\n \n                                 propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n@@ -463,12 +479,12 @@ protected PropagationByResource fill(final Attributable attributable,\n \n         // 4. attributes to be updated\n         for (AttrMod attributeMod : attributableMod.getPlainAttrsToUpdate()) {\n-            PlainSchema schema = getPlainSchema(attributeMod.getSchema(), attrUtil.plainSchemaClass());\n+            PlainSchema schema = getPlainSchema(attributeMod.getSchema(), attrUtils.plainSchemaClass());\n             PlainAttr attr = null;\n             if (schema != null) {\n                 attr = attributable.getPlainAttr(schema.getKey());\n                 if (attr == null) {\n-                    attr = attrUtil.newPlainAttr();\n+                    attr = attrUtils.newPlainAttr();\n                     setPlainAttrSchema(attributable, attr, schema);\n                     if (attr.getSchema() == null) {\n                         LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeMod);\n@@ -481,10 +497,10 @@ protected PropagationByResource fill(final Attributable attributable,\n \n             if (schema != null && attr != null && attr.getSchema() != null) {\n                 if (attributable instanceof Subject) {\n-                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, schema.getKey(),\n-                            externalResources, attrUtil.plainIntMappingType(), propByRes);\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtils, schema.getKey(),\n+                            externalResources, attrUtils.plainIntMappingType(), propByRes);\n                 } else if (attributable instanceof Membership) {\n-                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, schema.getKey(),\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtils, schema.getKey(),\n                             externalResources, IntMappingType.MembershipPlainSchema, propByRes);\n                 }\n \n@@ -506,7 +522,7 @@ protected PropagationByResource fill(final Attributable attributable,\n                     }\n                 }\n                 for (Long attributeValueId : valuesToBeRemoved) {\n-                    plainAttrValueDAO.delete(attributeValueId, attrUtil.plainAttrValueClass());\n+                    plainAttrValueDAO.delete(attributeValueId, attrUtils.plainAttrValueClass());\n                 }\n \n                 // 1.2 add values\n@@ -515,7 +531,7 @@ protected PropagationByResource fill(final Attributable attributable,\n                         && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n                         || !valuesToBeAdded.iterator().next().equals(attr.getUniqueValue().getValueAsString()))) {\n \n-                    fillAttribute(attributeMod.getValuesToBeAdded(), attrUtil, schema, attr, invalidValues);\n+                    fillAttribute(attributeMod.getValuesToBeAdded(), attrUtils, schema, attr, invalidValues);\n                 }\n \n                 // if no values are in, the attribute can be safely removed\n@@ -533,7 +549,7 @@ protected PropagationByResource fill(final Attributable attributable,\n \n         // 5. derived attributes to be removed\n         for (String derAttrToBeRemoved : attributableMod.getDerAttrsToRemove()) {\n-            DerSchema derSchema = getDerSchema(derAttrToBeRemoved, attrUtil.derSchemaClass());\n+            DerSchema derSchema = getDerSchema(derAttrToBeRemoved, attrUtils.derSchemaClass());\n             if (derSchema != null) {\n                 DerAttr derAttr = attributable.getDerAttr(derSchema.getKey());\n                 if (derAttr == null) {\n@@ -544,9 +560,9 @@ protected PropagationByResource fill(final Attributable attributable,\n \n                 if (attributable instanceof Subject) {\n                     for (ExternalResource resource : externalResources) {\n-                        for (MappingItem mapItem : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                        for (MappingItem mapItem : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                             if (derSchema.getKey().equals(mapItem.getIntAttrName())\n-                                    && mapItem.getIntMappingType() == attrUtil.derIntMappingType()) {\n+                                    && mapItem.getIntMappingType() == attrUtils.derIntMappingType()) {\n \n                                 propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n@@ -567,17 +583,17 @@ protected PropagationByResource fill(final Attributable attributable,\n \n         // 6. derived attributes to be added\n         for (String derAttrToBeAdded : attributableMod.getDerAttrsToAdd()) {\n-            DerSchema derSchema = getDerSchema(derAttrToBeAdded, attrUtil.derSchemaClass());\n+            DerSchema derSchema = getDerSchema(derAttrToBeAdded, attrUtils.derSchemaClass());\n             if (derSchema != null) {\n                 if (attributable instanceof Subject) {\n-                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, derSchema.getKey(),\n-                            externalResources, attrUtil.derIntMappingType(), propByRes);\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtils, derSchema.getKey(),\n+                            externalResources, attrUtils.derIntMappingType(), propByRes);\n                 } else if (attributable instanceof Membership) {\n-                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtil, derSchema.getKey(),\n+                    virtAttrHander.updateOnResourcesIfMappingMatches(attrUtils, derSchema.getKey(),\n                             externalResources, IntMappingType.MembershipDerivedSchema, propByRes);\n                 }\n \n-                DerAttr derAttr = attrUtil.newDerAttr();\n+                DerAttr derAttr = attrUtils.newDerAttr();\n                 setDerAttrSchema(attributable, derAttr, derSchema);\n                 if (derAttr.getSchema() == null) {\n                     LOG.debug(\"Ignoring {} because no valid schema or template was found\", derAttrToBeAdded);\n@@ -591,13 +607,13 @@ protected PropagationByResource fill(final Attributable attributable,\n         LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n \n         // 7. virtual attributes: for users and groups this is delegated to PropagationManager\n-        if (AttributableType.USER != attrUtil.getType() && AttributableType.GROUP != attrUtil.getType()) {\n+        if (AttributableType.USER != attrUtils.getType() && AttributableType.GROUP != attrUtils.getType()) {\n             virtAttrHander.fillVirtual(attributable, attributableMod.getVirAttrsToRemove(),\n-                    attributableMod.getVirAttrsToUpdate(), attrUtil);\n+                    attributableMod.getVirAttrsToUpdate(), attrUtils);\n         }\n \n         // Finally, check if mandatory values are missing\n-        SyncopeClientException requiredValuesMissing = checkMandatory(attrUtil, attributable);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(attrUtils, attributable);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -612,26 +628,26 @@ protected PropagationByResource fill(final Attributable attributable,\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected void fill(final Attributable attributable, final AbstractAttributableTO attributableTO,\n-            final AttributableUtil attrUtil, final SyncopeClientCompositeException scce) {\n+            final AttributableUtils attrUtils, final SyncopeClientCompositeException scce) {\n \n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // Only consider attributeTO with values\n         for (AttrTO attributeTO : attributableTO.getPlainAttrs()) {\n             if (attributeTO.getValues() != null && !attributeTO.getValues().isEmpty()) {\n-                PlainSchema schema = getPlainSchema(attributeTO.getSchema(), attrUtil.plainSchemaClass());\n+                PlainSchema schema = getPlainSchema(attributeTO.getSchema(), attrUtils.plainSchemaClass());\n \n                 if (schema != null) {\n                     PlainAttr attr = attributable.getPlainAttr(schema.getKey());\n                     if (attr == null) {\n-                        attr = attrUtil.newPlainAttr();\n+                        attr = attrUtils.newPlainAttr();\n                         setPlainAttrSchema(attributable, attr, schema);\n                     }\n                     if (attr.getSchema() == null) {\n                         LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeTO);\n                     } else {\n-                        fillAttribute(attributeTO.getValues(), attrUtil, schema, attr, invalidValues);\n+                        fillAttribute(attributeTO.getValues(), attrUtils, schema, attr, invalidValues);\n \n                         if (!attr.getValuesAsStrings().isEmpty()) {\n                             attributable.addPlainAttr(attr);\n@@ -648,10 +664,10 @@ protected void fill(final Attributable attributable, final AbstractAttributableT\n \n         // 2. derived attributes\n         for (AttrTO attributeTO : attributableTO.getDerAttrs()) {\n-            DerSchema derSchema = getDerSchema(attributeTO.getSchema(), attrUtil.derSchemaClass());\n+            DerSchema derSchema = getDerSchema(attributeTO.getSchema(), attrUtils.derSchemaClass());\n \n             if (derSchema != null) {\n-                DerAttr derAttr = attrUtil.newDerAttr();\n+                DerAttr derAttr = attrUtils.newDerAttr();\n                 setDerAttrSchema(attributable, derAttr, derSchema);\n                 if (derAttr.getSchema() == null) {\n                     LOG.debug(\"Ignoring {} because no valid schema or template was found\", attributeTO);\n@@ -663,12 +679,12 @@ protected void fill(final Attributable attributable, final AbstractAttributableT\n         }\n \n         // 3. user and group virtual attributes will be evaluated by the propagation manager only (if needed).\n-        if (AttributableType.USER == attrUtil.getType() || AttributableType.GROUP == attrUtil.getType()) {\n+        if (AttributableType.USER == attrUtils.getType() || AttributableType.GROUP == attrUtils.getType()) {\n             for (AttrTO vattrTO : attributableTO.getVirAttrs()) {\n-                VirSchema virSchema = virtAttrHander.getVirSchema(vattrTO.getSchema(), attrUtil.virSchemaClass());\n+                VirSchema virSchema = virtAttrHander.getVirSchema(vattrTO.getSchema(), attrUtils.virSchemaClass());\n \n                 if (virSchema != null) {\n-                    VirAttr virAttr = attrUtil.newVirAttr();\n+                    VirAttr virAttr = attrUtils.newVirAttr();\n                     virtAttrHander.setVirAttrSchema(attributable, virAttr, virSchema);\n                     if (virAttr.getSchema() == null) {\n                         LOG.debug(\"Ignoring {} because no valid schema or template was found\", vattrTO);\n@@ -680,10 +696,19 @@ protected void fill(final Attributable attributable, final AbstractAttributableT\n             }\n         }\n \n-        virtAttrHander.fillVirtual(attributable, attributableTO.getVirAttrs(), attrUtil);\n+        virtAttrHander.fillVirtual(attributable, attributableTO.getVirAttrs(), attrUtils);\n \n-        // 4. resources\n+        // 4. realm & resources\n         if (attributable instanceof Subject && attributableTO instanceof AbstractSubjectTO) {\n+            Realm realm = realmDAO.find(((AbstractSubjectTO) attributableTO).getRealm());\n+            if (realm == null) {\n+                SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+                noRealm.getElements().add(\n+                        \"Invalid or null realm specified: \" + ((AbstractSubjectTO) attributableTO).getRealm());\n+                scce.addException(noRealm);\n+            }\n+            ((Subject<?, ?, ?>) attributable).setRealm(realm);\n+\n             for (String resourceName : ((AbstractSubjectTO) attributableTO).getResources()) {\n                 ExternalResource resource = resourceDAO.find(resourceName);\n \n@@ -693,7 +718,7 @@ protected void fill(final Attributable attributable, final AbstractAttributableT\n             }\n         }\n \n-        SyncopeClientException requiredValuesMissing = checkMandatory(attrUtil, attributable);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(attrUtils, attributable);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -705,6 +730,7 @@ protected void fill(final Attributable attributable, final AbstractAttributableT\n     }\n \n     protected void fillTO(final AbstractAttributableTO attributableTO,\n+            final String realmFullPath,\n             final Collection<? extends PlainAttr> attrs,\n             final Collection<? extends DerAttr> derAttrs,\n             final Collection<? extends VirAttr> virAttrs,\n@@ -739,8 +765,10 @@ protected void fillTO(final AbstractAttributableTO attributableTO,\n         }\n \n         if (attributableTO instanceof AbstractSubjectTO) {\n+            AbstractSubjectTO subjectTO = AbstractSubjectTO.class.cast(attributableTO);\n+            subjectTO.setRealm(realmFullPath);\n             for (ExternalResource resource : resources) {\n-                ((AbstractSubjectTO) attributableTO).getResources().add(resource.getKey());\n+                subjectTO.getResources().add(resource.getKey());\n             }\n         }\n     }\n@@ -752,14 +780,14 @@ protected Map<String, String> getAccountIds(final Subject<?, ?, ?> subject, fina\n             if ((type == AttributableType.USER && resource.getUmapping() != null)\n                     || (type == AttributableType.GROUP && resource.getGmapping() != null)) {\n \n-                MappingItem accountIdItem = attrUtilFactory.getInstance(type).getAccountIdItem(resource);\n+                MappingItem accountIdItem = attrUtilsFactory.getInstance(type).getAccountIdItem(resource);\n                 if (accountIdItem == null) {\n                     throw new NotFoundException(\n                             \"AccountId mapping for \" + type + \" \" + subject.getKey()\n                             + \" on resource '\" + resource.getKey() + \"'\");\n                 }\n \n-                accountIds.put(resource.getKey(), MappingUtil.getAccountIdValue(subject, resource, accountIdItem));\n+                accountIds.put(resource.getKey(), MappingUtils.getAccountIdValue(subject, resource, accountIdItem));\n             }\n         }\n "},{"sha":"5e2dc1b41c264560158514bf4a517b957e05a09c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -40,7 +40,7 @@ public ConfTO getConfTO(final Conf conf) {\n         final ConfTO confTO = new ConfTO();\n         confTO.setKey(conf.getKey());\n \n-        fillTO(confTO, conf.getPlainAttrs(),\n+        fillTO(confTO, null, conf.getPlainAttrs(),\n                 conf.getDerAttrs(), conf.getVirAttrs(), Collections.<ExternalResource>emptySet());\n \n         return confTO;\n@@ -66,7 +66,7 @@ public CPlainAttr getAttribute(final AttrTO attributeTO) {\n \n             CPlainAttr attr = entityFactory.newEntity(CPlainAttr.class);\n             attr.setSchema(schema);\n-            fillAttribute(attributeTO.getValues(), attrUtilFactory.getInstance(AttributableType.CONFIGURATION),\n+            fillAttribute(attributeTO.getValues(), attrUtilsFactory.getInstance(AttributableType.CONFIGURATION),\n                     schema, attr, invalidValues);\n \n             if (!invalidValues.isEmpty()) {"},{"sha":"3666d8f6ba6d8b30aa687ab61d04116e9b2b5e8a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,8 +22,9 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n@@ -34,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.ConnPoolConfUtil;\n+import org.apache.syncope.core.provisioning.api.ConnPoolConfUtils;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n@@ -116,7 +117,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n         }\n         if (connInstanceTO.getPoolConf() != null) {\n             connInstance.setPoolConf(\n-                    ConnPoolConfUtil.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n+                    ConnPoolConfUtils.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n         }\n \n         // Throw exception if there is at least one element set\n@@ -171,7 +172,7 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n             connInstance.setPoolConf(null);\n         } else {\n             connInstance.setPoolConf(\n-                    ConnPoolConfUtil.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n+                    ConnPoolConfUtils.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n         }\n \n         if (!sce.isEmpty()) {\n@@ -211,29 +212,31 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setKey(connInstance.getKey() == null ? 0L : connInstance.getKey());\n \n-        // retrieve the ConfigurationProperties\n-        ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(\n-                connIdBundleManager.getConnectorInfo(connInstance.getLocation(),\n-                        connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName()));\n-\n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n \n-        final Map<String, ConnConfProperty> connInstanceToConfMap = connInstanceTO.getConfigurationMap();\n-\n-        for (String propName : properties.getPropertyNames()) {\n+        // refresh stored properties in the given connInstance with direct information from underlying connector\n+        ConfigurationProperties properties =\n+                connIdBundleManager.getConfigurationProperties(connIdBundleManager.getConnectorInfo(connInstance));\n+        for (final String propName : properties.getPropertyNames()) {\n             ConnConfPropSchema schema = buildConnConfPropSchema(properties.getProperty(propName));\n \n-            ConnConfProperty property;\n-            if (connInstanceToConfMap.containsKey(propName)) {\n-                property = connInstanceToConfMap.get(propName);\n-            } else {\n+            ConnConfProperty property = CollectionUtils.find(connInstanceTO.getConfiguration(),\n+                    new Predicate<ConnConfProperty>() {\n+\n+                        @Override\n+                        public boolean evaluate(final ConnConfProperty candidate) {\n+                            return propName.equals(candidate.getSchema().getName());\n+                        }\n+                    });\n+            if (property == null) {\n                 property = new ConnConfProperty();\n                 connInstanceTO.getConfiguration().add(property);\n             }\n-\n+            \n             property.setSchema(schema);\n         }\n \n+        // pool configuration\n         if (connInstance.getPoolConf() != null) {\n             ConnPoolConfTO poolConf = new ConnPoolConfTO();\n             BeanUtils.copyProperties(connInstance.getPoolConf(), poolConf);"},{"sha":"6cadc9d617f23b4d07caa56c6a7d5025d31c84e7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":31,"deletions":180,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import static org.apache.syncope.core.provisioning.java.data.AbstractAttributableDataBinder.LOG;\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -28,32 +30,25 @@\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerSchema;\n import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.membership.MVirAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MVirSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GDerSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.GVirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -63,10 +58,7 @@\n public class GroupDataBinderImpl extends AbstractAttributableDataBinder implements GroupDataBinder {\n \n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n-\n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n+    private ConnObjectUtils connObjectUtils;\n \n     private <T extends AttrTemplate<S>, S extends Schema> void setAttrTemplates(\n             final Group group, final List<String> schemaNames,\n@@ -99,20 +91,9 @@ private <T extends AttrTemplate<S>, S extends Schema> void setAttrTemplates(\n \n     @Override\n     public Group create(final Group group, final GroupTO groupTO) {\n-        group.setInheritOwner(groupTO.isInheritOwner());\n-\n-        group.setInheritPlainAttrs(groupTO.isInheritPlainAttrs());\n-        group.setInheritDerAttrs(groupTO.isInheritDerAttrs());\n-        group.setInheritVirAttrs(groupTO.isInheritVirAttrs());\n-\n-        group.setInheritTemplates(groupTO.isInheritTemplates());\n-\n-        group.setInheritPasswordPolicy(groupTO.isInheritPasswordPolicy());\n-        group.setInheritAccountPolicy(groupTO.isInheritAccountPolicy());\n-\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n-        // name and parent\n+        // name\n         SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroups);\n         if (groupTO.getName() == null) {\n             LOG.error(\"No name specified for this group\");\n@@ -121,26 +102,6 @@ public Group create(final Group group, final GroupTO groupTO) {\n         } else {\n             group.setName(groupTO.getName());\n         }\n-        Long parentGroupKey = null;\n-        if (groupTO.getParent() != 0) {\n-            Group parentGroup = groupDAO.find(groupTO.getParent());\n-            if (parentGroup == null) {\n-                LOG.error(\"Could not find group with id \" + groupTO.getParent());\n-\n-                invalidGroups.getElements().add(String.valueOf(groupTO.getParent()));\n-                scce.addException(invalidGroups);\n-            } else {\n-                group.setParent(parentGroup);\n-                parentGroupKey = group.getParent().getKey();\n-            }\n-        }\n-\n-        Group otherGroup = groupDAO.find(groupTO.getName(), parentGroupKey);\n-        if (otherGroup != null) {\n-            LOG.error(\"Another group exists with the same name and the same parent group: \" + otherGroup);\n-\n-            invalidGroups.getElements().add(groupTO.getName());\n-        }\n \n         // attribute templates\n         setAttrTemplates(group, groupTO.getGPlainAttrTemplates(), GPlainAttrTemplate.class, GPlainSchema.class);\n@@ -151,17 +112,7 @@ public Group create(final Group group, final GroupTO groupTO) {\n         setAttrTemplates(group, groupTO.getMVirAttrTemplates(), MVirAttrTemplate.class, MVirSchema.class);\n \n         // attributes, derived attributes, virtual attributes and resources\n-        fill(group, groupTO, attrUtilFactory.getInstance(AttributableType.GROUP), scce);\n-\n-        // entitlements\n-        for (String entitlementName : groupTO.getEntitlements()) {\n-            Entitlement entitlement = entitlementDAO.find(entitlementName);\n-            if (entitlement == null) {\n-                LOG.warn(\"Ignoring invalid entitlement {}\", entitlementName);\n-            } else {\n-                group.addEntitlement(entitlement);\n-            }\n-        }\n+        fill(group, groupTO, attrUtilsFactory.getInstance(AttributableType.GROUP), scce);\n \n         // owner\n         if (groupTO.getUserOwner() != null) {\n@@ -181,92 +132,39 @@ public Group create(final Group group, final GroupTO groupTO) {\n             }\n         }\n \n-        // policies\n-        if (groupTO.getPasswordPolicy() != null) {\n-            group.setPasswordPolicy((PasswordPolicy) policyDAO.find(groupTO.getPasswordPolicy()));\n-        }\n-        if (groupTO.getAccountPolicy() != null) {\n-            group.setAccountPolicy((AccountPolicy) policyDAO.find(groupTO.getAccountPolicy()));\n-        }\n-\n         return group;\n     }\n \n     @Override\n-    public PropagationByResource update(final Group group, final GroupMod groupMod) {\n+    public PropagationByResource update(final Group toBeUpdated, final GroupMod groupMod) {\n+        // Re-merge any pending change from workflow tasks\n+        Group group = groupDAO.save(toBeUpdated);\n+\n         PropagationByResource propByRes = new PropagationByResource();\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // fetch account ids before update\n         Map<String, String> oldAccountIds = getAccountIds(group, AttributableType.GROUP);\n \n+        // realm\n+        setRealm(group, groupMod);\n         // name\n-        SyncopeClientException invalidGroups = SyncopeClientException.build(ClientExceptionType.InvalidGroups);\n-        if (groupMod.getName() != null) {\n-            Group otherGroup = groupDAO.find(groupMod.getName(),\n-                    group.getParent() == null ? null : group.getParent().getKey());\n-            if (otherGroup == null || group.equals(otherGroup)) {\n-                if (!groupMod.getName().equals(group.getName())) {\n-                    propByRes.addAll(ResourceOperation.UPDATE, group.getResourceNames());\n-\n-                    group.setName(groupMod.getName());\n-                }\n-            } else {\n-                LOG.error(\"Another group exists with the same name and the same parent group: \" + otherGroup);\n-\n-                invalidGroups.getElements().add(groupMod.getName());\n-                scce.addException(invalidGroups);\n-            }\n-        }\n-\n-        if (groupMod.getInheritOwner() != null) {\n-            group.setInheritOwner(groupMod.getInheritOwner());\n-        }\n-\n-        if (groupMod.getInheritTemplates() != null) {\n-            group.setInheritTemplates(groupMod.getInheritTemplates());\n-        }\n-\n-        if (groupMod.getInheritPlainAttrs() != null) {\n-            group.setInheritPlainAttrs(groupMod.getInheritPlainAttrs());\n-        }\n-        if (groupMod.getInheritDerAttrs() != null) {\n-            group.setInheritDerAttrs(groupMod.getInheritDerAttrs());\n-        }\n-        if (groupMod.getInheritVirAttrs() != null) {\n-            group.setInheritVirAttrs(groupMod.getInheritVirAttrs());\n-        }\n+        if (groupMod.getName() != null && !groupMod.getName().equals(group.getName())) {\n+            propByRes.addAll(ResourceOperation.UPDATE, group.getResourceNames());\n \n-        if (groupMod.getInheritPasswordPolicy() != null) {\n-            group.setInheritPasswordPolicy(groupMod.getInheritPasswordPolicy());\n-        }\n-        if (groupMod.getInheritAccountPolicy() != null) {\n-            group.setInheritAccountPolicy(groupMod.getInheritAccountPolicy());\n-        }\n-\n-        // entitlements\n-        if (groupMod.isModEntitlements()) {\n-            group.getEntitlements().clear();\n-            for (String entitlementName : groupMod.getEntitlements()) {\n-                Entitlement entitlement = entitlementDAO.find(entitlementName);\n-                if (entitlement == null) {\n-                    LOG.warn(\"Ignoring invalid entitlement {}\", entitlementName);\n-                } else {\n-                    group.addEntitlement(entitlement);\n-                }\n-            }\n+            group.setName(groupMod.getName());\n         }\n \n         // attribute templates\n-        if (groupMod.isModRAttrTemplates()) {\n-            setAttrTemplates(group, groupMod.getRPlainAttrTemplates(), GPlainAttrTemplate.class, GPlainSchema.class);\n+        if (groupMod.isModGAttrTemplates()) {\n+            setAttrTemplates(group, groupMod.getGPlainAttrTemplates(), GPlainAttrTemplate.class, GPlainSchema.class);\n         }\n-        if (groupMod.isModRDerAttrTemplates()) {\n-            setAttrTemplates(group, groupMod.getRDerAttrTemplates(), GDerAttrTemplate.class, GDerSchema.class);\n+        if (groupMod.isModGDerAttrTemplates()) {\n+            setAttrTemplates(group, groupMod.getGDerAttrTemplates(), GDerAttrTemplate.class, GDerSchema.class);\n         }\n-        if (groupMod.isModRVirAttrTemplates()) {\n-            setAttrTemplates(group, groupMod.getRVirAttrTemplates(), GVirAttrTemplate.class, GVirSchema.class);\n+        if (groupMod.isModGVirAttrTemplates()) {\n+            setAttrTemplates(group, groupMod.getGVirAttrTemplates(), GVirAttrTemplate.class, GVirSchema.class);\n         }\n         if (groupMod.isModMAttrTemplates()) {\n             setAttrTemplates(group, groupMod.getMPlainAttrTemplates(), MPlainAttrTemplate.class, MPlainSchema.class);\n@@ -278,18 +176,6 @@ public PropagationByResource update(final Group group, final GroupMod groupMod)\n             setAttrTemplates(group, groupMod.getMVirAttrTemplates(), MVirAttrTemplate.class, MVirSchema.class);\n         }\n \n-        // policies\n-        if (groupMod.getPasswordPolicy() != null) {\n-            group.setPasswordPolicy(groupMod.getPasswordPolicy().getKey() == null\n-                    ? null\n-                    : (PasswordPolicy) policyDAO.find(groupMod.getPasswordPolicy().getKey()));\n-        }\n-        if (groupMod.getAccountPolicy() != null) {\n-            group.setAccountPolicy(groupMod.getAccountPolicy().getKey() == null\n-                    ? null\n-                    : (AccountPolicy) policyDAO.find(groupMod.getAccountPolicy().getKey()));\n-        }\n-\n         // owner\n         if (groupMod.getUserOwner() != null) {\n             group.setUserOwner(groupMod.getUserOwner().getKey() == null\n@@ -303,7 +189,7 @@ public PropagationByResource update(final Group group, final GroupMod groupMod)\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(group, groupMod, attrUtilFactory.getInstance(AttributableType.GROUP), scce));\n+        propByRes.merge(fill(group, groupMod, attrUtilsFactory.getInstance(AttributableType.GROUP), scce));\n \n         // check if some account id was changed by the update above\n         Map<String, String> newAccountIds = getAccountIds(group, AttributableType.GROUP);\n@@ -323,7 +209,7 @@ public PropagationByResource update(final Group group, final GroupMod groupMod)\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO getGroupTO(final Group group) {\n-        connObjectUtil.retrieveVirAttrValues(group, attrUtilFactory.getInstance(AttributableType.GROUP));\n+        connObjectUtils.retrieveVirAttrValues(group, attrUtilsFactory.getInstance(AttributableType.GROUP));\n \n         GroupTO groupTO = new GroupTO();\n \n@@ -336,70 +222,35 @@ public GroupTO getGroupTO(final Group group) {\n         groupTO.setKey(group.getKey());\n         groupTO.setName(group.getName());\n \n-        groupTO.setInheritOwner(group.isInheritOwner());\n-\n-        groupTO.setInheritTemplates(group.isInheritTemplates());\n-\n-        groupTO.setInheritPlainAttrs(group.isInheritPlainAttrs());\n-        groupTO.setInheritDerAttrs(group.isInheritDerAttrs());\n-        groupTO.setInheritVirAttrs(group.isInheritVirAttrs());\n-\n-        groupTO.setInheritPasswordPolicy(group.isInheritPasswordPolicy());\n-        groupTO.setInheritAccountPolicy(group.isInheritAccountPolicy());\n-\n-        if (group.getParent() != null) {\n-            groupTO.setParent(group.getParent().getKey());\n-        }\n-\n         if (group.getUserOwner() != null) {\n             groupTO.setUserOwner(group.getUserOwner().getKey());\n         }\n         if (group.getGroupOwner() != null) {\n             groupTO.setGroupOwner(group.getGroupOwner().getKey());\n         }\n \n-        // -------------------------\n-        // Retrieve all [derived/virtual] attributes (inherited and not)\n-        // -------------------------        \n-        final List<? extends GPlainAttr> allAttributes = group.findLastInheritedAncestorPlainAttrs();\n-\n-        final List<? extends GDerAttr> allDerAttributes = group.findLastInheritedAncestorDerAttrs();\n-\n-        final List<? extends GVirAttr> allVirAttributes = group.findLastInheritedAncestorVirAttrs();\n-        // -------------------------\n-\n-        fillTO(groupTO, allAttributes, allDerAttributes, allVirAttributes, group.getResources());\n+        fillTO(groupTO, group.getRealm().getFullPath(),\n+                group.getPlainAttrs(), group.getDerAttrs(), group.getVirAttrs(), group.getResources());\n \n-        for (Entitlement entitlement : group.getEntitlements()) {\n-            groupTO.getEntitlements().add(entitlement.getKey());\n-        }\n-\n-        for (GPlainAttrTemplate template : group.findInheritedTemplates(GPlainAttrTemplate.class)) {\n+        for (GPlainAttrTemplate template : group.getAttrTemplates(GPlainAttrTemplate.class)) {\n             groupTO.getGPlainAttrTemplates().add(template.getSchema().getKey());\n         }\n-        for (GDerAttrTemplate template : group.findInheritedTemplates(GDerAttrTemplate.class)) {\n+        for (GDerAttrTemplate template : group.getAttrTemplates(GDerAttrTemplate.class)) {\n             groupTO.getGDerAttrTemplates().add(template.getSchema().getKey());\n         }\n-        for (GVirAttrTemplate template : group.findInheritedTemplates(GVirAttrTemplate.class)) {\n+        for (GVirAttrTemplate template : group.getAttrTemplates(GVirAttrTemplate.class)) {\n             groupTO.getGVirAttrTemplates().add(template.getSchema().getKey());\n         }\n-        for (MPlainAttrTemplate template : group.findInheritedTemplates(MPlainAttrTemplate.class)) {\n+        for (MPlainAttrTemplate template : group.getAttrTemplates(MPlainAttrTemplate.class)) {\n             groupTO.getMPlainAttrTemplates().add(template.getSchema().getKey());\n         }\n-        for (MDerAttrTemplate template : group.findInheritedTemplates(MDerAttrTemplate.class)) {\n+        for (MDerAttrTemplate template : group.getAttrTemplates(MDerAttrTemplate.class)) {\n             groupTO.getMDerAttrTemplates().add(template.getSchema().getKey());\n         }\n-        for (MVirAttrTemplate template : group.findInheritedTemplates(MVirAttrTemplate.class)) {\n+        for (MVirAttrTemplate template : group.getAttrTemplates(MVirAttrTemplate.class)) {\n             groupTO.getMVirAttrTemplates().add(template.getSchema().getKey());\n         }\n \n-        groupTO.setPasswordPolicy(group.getPasswordPolicy() == null\n-                ? null\n-                : group.getPasswordPolicy().getKey());\n-        groupTO.setAccountPolicy(group.getAccountPolicy() == null\n-                ? null\n-                : group.getAccountPolicy().getKey());\n-\n         return groupTO;\n     }\n "},{"sha":"3800adb78344f34efd687241c9c01fb69b00579b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":11,"deletions":33,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -29,14 +29,14 @@\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -54,40 +54,31 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {\n     private ExternalResourceDAO resourceDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    private RealmDAO realmDAO;\n \n     @Autowired\n     private EntityFactory entityFactory;\n \n-    /**\n-     * Get policy TO from policy bean.\n-     *\n-     * @param policy bean.\n-     * @return policy TO.\n-     */\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n         final T policyTO;\n \n         switch (policy.getType()) {\n-            case GLOBAL_PASSWORD:\n             case PASSWORD:\n-                policyTO = (T) new PasswordPolicyTO(policy.getType().isGlobal());\n+                policyTO = (T) new PasswordPolicyTO();\n                 ((PasswordPolicyTO) policyTO).setSpecification(policy.getSpecification(PasswordPolicySpec.class));\n                 break;\n \n-            case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n-                policyTO = (T) new AccountPolicyTO(policy.getType().isGlobal());\n+                policyTO = (T) new AccountPolicyTO();\n                 ((AccountPolicyTO) policyTO).setSpecification(policy.getSpecification(AccountPolicySpec.class));\n                 ((AccountPolicyTO) policyTO).getResources().addAll(((AccountPolicy) policy).getResourceNames());\n                 break;\n \n-            case GLOBAL_SYNC:\n             case SYNC:\n             default:\n-                policyTO = (T) new SyncPolicyTO(policy.getType().isGlobal());\n+                policyTO = (T) new SyncPolicyTO();\n                 ((SyncPolicyTO) policyTO).setSpecification(policy.getSpecification(SyncPolicySpec.class));\n         }\n \n@@ -97,18 +88,8 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n         for (ExternalResource resource : resourceDAO.findByPolicy(policy)) {\n             policyTO.getUsedByResources().add(resource.getKey());\n         }\n-        if (policy.getType().isGlobal()) {\n-            for (ExternalResource resource : resourceDAO.findWithoutPolicy(policy.getType())) {\n-                policyTO.getUsedByResources().add(resource.getKey());\n-            }\n-        }\n-        for (Group group : groupDAO.findByPolicy(policy)) {\n-            policyTO.getUsedByGroups().add(group.getKey());\n-        }\n-        if (policy.getType().isGlobal()) {\n-            for (Group group : groupDAO.findWithoutPolicy(policy.getType())) {\n-                policyTO.getUsedByGroups().add(group.getKey());\n-            }\n+        for (Realm realm : realmDAO.findByPolicy(policy)) {\n+            policyTO.getUsedByRealms().add(realm.getFullPath());\n         }\n \n         return policyTO;\n@@ -133,26 +114,24 @@ public <T extends Policy> T getPolicy(T policy, final AbstractPolicyTO policyTO)\n         }\n \n         switch (policyTO.getType()) {\n-            case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 if (!(policyTO instanceof PasswordPolicyTO)) {\n                     throw new ClassCastException(\"Expected \" + PasswordPolicyTO.class.getName()\n                             + \", found \" + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n-                    policy = (T) entityFactory.newPolicy(PasswordPolicy.class, policyTO.getType().isGlobal());\n+                    policy = (T) entityFactory.newEntity(PasswordPolicy.class);\n                 }\n                 policy.setSpecification(((PasswordPolicyTO) policyTO).getSpecification());\n                 break;\n \n-            case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 if (!(policyTO instanceof AccountPolicyTO)) {\n                     throw new ClassCastException(\"Expected \" + AccountPolicyTO.class.getName()\n                             + \", found \" + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n-                    policy = (T) entityFactory.newPolicy(AccountPolicy.class, policyTO.getType().isGlobal());\n+                    policy = (T) entityFactory.newEntity(AccountPolicy.class);\n                 }\n                 policy.setSpecification(((AccountPolicyTO) policyTO).getSpecification());\n \n@@ -169,15 +148,14 @@ public <T extends Policy> T getPolicy(T policy, final AbstractPolicyTO policyTO)\n                 }\n                 break;\n \n-            case GLOBAL_SYNC:\n             case SYNC:\n             default:\n                 if (!(policyTO instanceof SyncPolicyTO)) {\n                     throw new ClassCastException(\"Expected \" + SyncPolicyTO.class.getName()\n                             + \", found \" + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n-                    policy = (T) entityFactory.newPolicy(SyncPolicy.class, policyTO.getType().isGlobal());\n+                    policy = (T) entityFactory.newEntity(SyncPolicy.class);\n                 }\n                 policy.setSpecification(((SyncPolicyTO) policyTO).getSpecification());\n         }"},{"sha":"cf1339e7cdb3d94cd8d81b020a8d4e68f4eaf0c1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":20,"deletions":47,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMapping;\n import org.apache.syncope.core.persistence.api.entity.user.UMappingItem;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n@@ -204,13 +204,12 @@ private MappingItem getMappingItem(final MappingItemTO itemTO, final MappingItem\n         }\n \n         // no mandatory condition implies mandatory condition false\n-        if (!JexlUtil.isExpressionValid(itemTO.getMandatoryCondition() == null\n+        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n                 ? \"false\" : itemTO.getMandatoryCondition())) {\n \n             SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n                     ClientExceptionType.InvalidValues);\n             invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n-\n             scce.addException(invalidMandatoryCondition);\n         }\n \n@@ -234,6 +233,24 @@ public ConnInstance getConnInstance(final ResourceTO resourceTO) {\n         return connRegistry.getOverriddenConnInstance(connInstanceClone, resourceTO.getConnConfProperties());\n     }\n \n+    private void populateMappingTO(final Mapping<?> mapping, final MappingTO mappingTO) {\n+        mappingTO.setAccountLink(mapping.getAccountLink());\n+\n+        for (MappingItem item : mapping.getItems()) {\n+            MappingItemTO itemTO = new MappingItemTO();\n+            itemTO.setKey(item.getKey());\n+            BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+\n+            if (itemTO.isAccountid()) {\n+                mappingTO.setAccountIdItem(itemTO);\n+            } else if (itemTO.isPassword()) {\n+                mappingTO.setPasswordItem(itemTO);\n+            } else {\n+                mappingTO.addItem(itemTO);\n+            }\n+        }\n+    }\n+\n     @Override\n     public ResourceTO getResourceTO(final ExternalResource resource) {\n         if (resource == null) {\n@@ -302,48 +319,4 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n \n         return resourceTO;\n     }\n-\n-    private void populateMappingTO(final Mapping<?> mapping, final MappingTO mappingTO) {\n-        mappingTO.setAccountLink(mapping.getAccountLink());\n-\n-        for (MappingItemTO itemTO : getMappingItemTOs(mapping.getItems())) {\n-            if (itemTO.isAccountid()) {\n-                mappingTO.setAccountIdItem(itemTO);\n-            } else if (itemTO.isPassword()) {\n-                mappingTO.setPasswordItem(itemTO);\n-            } else {\n-                mappingTO.addItem(itemTO);\n-            }\n-        }\n-    }\n-\n-    private Set<MappingItemTO> getMappingItemTOs(final Collection<? extends MappingItem> items) {\n-        Set<MappingItemTO> mappingTOs = new HashSet<>();\n-        for (MappingItem item : items) {\n-            LOG.debug(\"Asking for TO for {}\", item);\n-            mappingTOs.add(getMappingItemTO(item));\n-        }\n-\n-        LOG.debug(\"Collected TOs: {}\", mappingTOs);\n-\n-        return mappingTOs;\n-    }\n-\n-    private MappingItemTO getMappingItemTO(final MappingItem item) {\n-        if (item == null) {\n-            LOG.error(\"Provided null mapping\");\n-\n-            return null;\n-        }\n-\n-        MappingItemTO itemTO = new MappingItemTO();\n-\n-        BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n-\n-        itemTO.setKey(item.getKey());\n-\n-        LOG.debug(\"Obtained SchemaMappingTO {}\", itemTO);\n-\n-        return itemTO;\n-    }\n }"},{"sha":"de07e3b2444e5b72b6ab728d9fe2940d8af1ba40","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.to.RoleTO;\n@@ -53,24 +52,19 @@ public Role create(final RoleTO roleTO) {\n     @Override\n     public void update(final Role role, final RoleTO roleTO) {\n         role.setName(roleTO.getName());\n-        role.setCriteria(roleTO.getCriteria());\n \n         role.getEntitlements().clear();\n         role.getEntitlements().addAll(roleTO.getEntitlements());\n \n         role.getRealms().clear();\n-        CollectionUtils.forAllDo(roleTO.getRealms(), new Closure<String>() {\n-\n-            @Override\n-            public void execute(final String realmFullPath) {\n-                Realm realm = realmDAO.find(realmFullPath);\n-                if (realm == null) {\n-                    LOG.warn(\"Invalid realm full path {}, ignoring\", realmFullPath);\n-                } else {\n-                    role.addRealm(realm);\n-                }\n+        for (String realmFullPath : roleTO.getRealms()) {\n+            Realm realm = realmDAO.find(realmFullPath);\n+            if (realm == null) {\n+                LOG.warn(\"Invalid realm full path {}, ignoring\", realmFullPath);\n+            } else {\n+                role.addRealm(realm);\n             }\n-        });\n+        }\n     }\n \n     @Override\n@@ -79,7 +73,6 @@ public RoleTO getRoleTO(final Role role) {\n \n         roleTO.setKey(role.getKey());\n         roleTO.setName(role.getName());\n-        roleTO.setCriteria(role.getCriteria());\n         roleTO.getEntitlements().addAll(role.getEntitlements());\n \n         CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {"},{"sha":"0a34e612ddcf61d3e250fab9814cea6de89ea46a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,13 +28,13 @@\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -46,7 +46,7 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {\n \n     // --------------- PLAIN -----------------\n     private <T extends PlainSchema> void fill(final T schema, final PlainSchemaTO schemaTO) {\n-        if (!JexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n+        if (!JexlUtils.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n             sce.getElements().add(schemaTO.getMandatoryCondition());\n             throw sce;\n@@ -62,7 +62,7 @@ public <T extends PlainSchema> void create(final PlainSchemaTO schemaTO, final T\n \n     @Override\n     public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T schema,\n-            final AttributableUtil attributableUtil) {\n+            final AttributableUtils attributableUtil) {\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n@@ -91,7 +91,7 @@ public <T extends PlainSchema> void update(final PlainSchemaTO schemaTO, final T\n \n     @Override\n     public <T extends PlainSchema> PlainSchemaTO getPlainSchemaTO(\n-            final T schema, final AttributableUtil attributableUtil) {\n+            final T schema, final AttributableUtils attributableUtil) {\n \n         PlainSchemaTO schemaTO = new PlainSchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO);\n@@ -109,7 +109,7 @@ private <T extends DerSchema> T populate(final T derSchema, final DerSchemaTO de\n             requiredValuesMissing.getElements().add(\"expression\");\n \n             scce.addException(requiredValuesMissing);\n-        } else if (!JexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n+        } else if (!JexlUtils.isExpressionValid(derSchemaTO.getExpression())) {\n             SyncopeClientException e = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n             e.getElements().add(derSchemaTO.getExpression());\n "},{"sha":"9fe733e039ac9e4d75f41a785172d6f0e610f266","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":34,"deletions":28,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -49,10 +49,11 @@\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskUtil;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n@@ -72,10 +73,13 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n     private static final String[] IGNORE_TASK_PROPERTIES = {\n-        \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\" };\n+        \"destinationRealm\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\" };\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"key\", \"task\" };\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -87,21 +91,19 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n \n     private void checkJexl(final AbstractAttributableTO attributableTO, final SyncopeClientException sce) {\n         for (AttrTO attrTO : attributableTO.getPlainAttrs()) {\n-            if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n+            if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n \n         for (AttrTO attrTO : attributableTO.getVirAttrs()) {\n-            if (!attrTO.getValues().isEmpty() && !JexlUtil.isExpressionValid(attrTO.getValues().get(0))) {\n+            if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n                 sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n             }\n         }\n     }\n \n     private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n-        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n-\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n             final PushTask pushTask = (PushTask) task;\n             final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n@@ -119,23 +121,26 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n             final SyncTask syncTask = (SyncTask) task;\n             final SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n \n+            syncTask.setDestinationRealm(realmDAO.find(syncTaskTO.getDestinationRealm()));\n+\n             syncTask.setMatchingRule(syncTaskTO.getMatchingRule() == null\n                     ? MatchingRule.UPDATE : syncTaskTO.getMatchingRule());\n \n             syncTask.setUnmatchingRule(syncTaskTO.getUnmatchingRule() == null\n                     ? UnmatchingRule.PROVISION : syncTaskTO.getUnmatchingRule());\n \n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n             // 1. validate JEXL expressions in user and group templates\n             if (syncTaskTO.getUserTemplate() != null) {\n                 UserTO template = syncTaskTO.getUserTemplate();\n \n                 if (StringUtils.isNotBlank(template.getUsername())\n-                        && !JexlUtil.isExpressionValid(template.getUsername())) {\n+                        && !JexlUtils.isExpressionValid(template.getUsername())) {\n \n                     sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n                 }\n                 if (StringUtils.isNotBlank(template.getPassword())\n-                        && !JexlUtil.isExpressionValid(template.getPassword())) {\n+                        && !JexlUtils.isExpressionValid(template.getPassword())) {\n \n                     sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n                 }\n@@ -149,7 +154,7 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n             if (syncTaskTO.getGroupTemplate() != null) {\n                 GroupTO template = syncTaskTO.getGroupTemplate();\n \n-                if (StringUtils.isNotBlank(template.getName()) && !JexlUtil.isExpressionValid(template.getName())) {\n+                if (StringUtils.isNotBlank(template.getName()) && !JexlUtils.isExpressionValid(template.getName())) {\n                     sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n                 }\n \n@@ -176,20 +181,20 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n     }\n \n     @Override\n-    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil) {\n-        final Class<? extends AbstractTaskTO> taskTOClass = taskUtil.taskTOClass();\n+    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n+        final Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n \n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n             throw new IllegalArgumentException(\n-                    String.format(\"taskUtil is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n+                    String.format(\"taskUtils is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n         }\n \n-        SchedTask task = taskUtil.newTask();\n+        SchedTask task = taskUtils.newTask();\n         task.setCronExpression(taskTO.getCronExpression());\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());\n \n-        if (taskUtil.getType() == TaskType.SCHEDULED) {\n+        if (taskUtils.getType() == TaskType.SCHEDULED) {\n             task.setJobClassName(taskTO.getJobClassName());\n         } else if (taskTO instanceof AbstractProvisioningTaskTO) {\n             final AbstractProvisioningTaskTO provisioningTaskTO = (AbstractProvisioningTaskTO) taskTO;\n@@ -207,18 +212,18 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n     }\n \n     @Override\n-    public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, final TaskUtil taskUtil) {\n-        Class<? extends Task> taskClass = taskUtil.taskClass();\n-        Class<? extends AbstractTaskTO> taskTOClass = taskUtil.taskTOClass();\n+    public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n+        Class<? extends Task> taskClass = taskUtils.taskClass();\n+        Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n \n         if (taskClass == null || !taskClass.isAssignableFrom(task.getClass())) {\n             throw new IllegalArgumentException(\n-                    String.format(\"taskUtil is type %s but task is not: %s\", taskClass, task.getClass()));\n+                    String.format(\"taskUtils is type %s but task is not: %s\", taskClass, task.getClass()));\n         }\n \n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n             throw new IllegalArgumentException(\n-                    String.format(\"taskUtil is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n+                    String.format(\"taskUtils is type %s but task is not: %s\", taskTOClass, taskTO.getClass()));\n         }\n \n         task.setCronExpression(taskTO.getCronExpression());\n@@ -267,31 +272,31 @@ private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil taskUtil) {\n-        T taskTO = taskUtil.newTaskTO();\n+    public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils) {\n+        T taskTO = taskUtils.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n \n         TaskExec latestExec = taskExecDAO.findLatestStarted(task);\n-        taskTO.setLatestExecStatus(latestExec == null ? \"\" : latestExec.getStatus());\n+        taskTO.setLatestExecStatus(latestExec == null ? StringUtils.EMPTY : latestExec.getStatus());\n         taskTO.setStartDate(latestExec == null ? null : latestExec.getStartDate());\n         taskTO.setEndDate(latestExec == null ? null : latestExec.getEndDate());\n \n         for (TaskExec execution : task.getExecs()) {\n             taskTO.getExecutions().add(getTaskExecTO(execution));\n         }\n \n-        switch (taskUtil.getType()) {\n+        switch (taskUtils.getType()) {\n             case PROPAGATION:\n                 if (!(task instanceof PropagationTask)) {\n-                    throw new IllegalArgumentException(\"taskUtil is type Propagation but task is not PropagationTask: \"\n+                    throw new IllegalArgumentException(\"taskUtils is type Propagation but task is not PropagationTask: \"\n                             + task.getClass().getName());\n                 }\n                 ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getKey());\n                 break;\n \n             case SCHEDULED:\n                 if (!(task instanceof SchedTask)) {\n-                    throw new IllegalArgumentException(\"taskUtil is type Sched but task is not SchedTask: \"\n+                    throw new IllegalArgumentException(\"taskUtils is type Sched but task is not SchedTask: \"\n                             + task.getClass().getName());\n                 }\n                 setExecTime((SchedTaskTO) taskTO, task);\n@@ -301,12 +306,13 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil ta\n \n             case SYNCHRONIZATION:\n                 if (!(task instanceof SyncTask)) {\n-                    throw new IllegalArgumentException(\"taskUtil is type Sync but task is not SyncTask: \"\n+                    throw new IllegalArgumentException(\"taskUtils is type Sync but task is not SyncTask: \"\n                             + task.getClass().getName());\n                 }\n                 setExecTime((SchedTaskTO) taskTO, task);\n                 ((SyncTaskTO) taskTO).setName(((SyncTask) task).getName());\n                 ((SyncTaskTO) taskTO).setDescription(((SyncTask) task).getDescription());\n+                ((SyncTaskTO) taskTO).setDestinationRealm(((SyncTask) task).getDestinatioRealm().getFullPath());\n                 ((SyncTaskTO) taskTO).setResource(((SyncTask) task).getResource().getKey());\n                 ((SyncTaskTO) taskTO).setMatchingRule(((SyncTask) task).getMatchingRule() == null\n                         ? MatchingRule.UPDATE : ((SyncTask) task).getMatchingRule());\n@@ -316,7 +322,7 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtil ta\n \n             case PUSH:\n                 if (!(task instanceof PushTask)) {\n-                    throw new IllegalArgumentException(\"taskUtil is type Push but task is not PushTask: \"\n+                    throw new IllegalArgumentException(\"taskUtils is type Push but task is not PushTask: \"\n                             + task.getClass().getName());\n                 }\n                 setExecTime((SchedTaskTO) taskTO, task);"},{"sha":"d9df85f9d617a9c3fad5195e3439f434aa9a7891","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":95,"deletions":42,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,12 +18,17 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import static org.apache.syncope.core.provisioning.java.data.AbstractAttributableDataBinder.LOG;\n+\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -50,10 +55,12 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -63,14 +70,18 @@\n public class UserDataBinderImpl extends AbstractAttributableDataBinder implements UserDataBinder {\n \n     private static final String[] IGNORE_USER_PROPERTIES = {\n-        \"memberships\", \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\", \"securityQuestion\", \"securityAnswer\"\n+        \"realm\", \"roles\", \"memberships\", \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\",\n+        \"securityQuestion\", \"securityAnswer\"\n     };\n \n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Autowired\n     private ConfDAO confDAO;\n \n     @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    private ConnObjectUtils connObjectUtils;\n \n     @Autowired\n     private SecurityQuestionDAO securityQuestionDAO;\n@@ -88,7 +99,7 @@ public class UserDataBinderImpl extends AbstractAttributableDataBinder implement\n     public UserTO getAuthenticatedUserTO() {\n         final UserTO authUserTO;\n \n-        final String authUsername = AuthContextUtil.getAuthenticatedUsername();\n+        final String authUsername = AuthContextUtils.getAuthenticatedUsername();\n         if (anonymousUser.equals(authUsername)) {\n             authUserTO = new UserTO();\n             authUserTO.setKey(-2);\n@@ -117,9 +128,7 @@ public boolean verifyPassword(final User user, final String password) {\n         return encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n     }\n \n-    private void setPassword(final User user, final String password,\n-            final SyncopeClientCompositeException scce) {\n-\n+    private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {\n         try {\n             final String algorithm = confDAO.find(\n                     \"password.cipher.algorithm\", CipherAlgorithm.AES.name()).getValues().get(0).getStringValue();\n@@ -139,10 +148,20 @@ private void setPassword(final User user, final String password,\n     public void create(final User user, final UserTO userTO, final boolean storePassword) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n+        // roles\n+        for (Long roleKey : userTO.getRoles()) {\n+            Role role = roleDAO.find(roleKey);\n+            if (role == null) {\n+                LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n+            } else {\n+                user.addRole(role);\n+            }\n+        }\n+\n         // memberships\n         Group group;\n         for (MembershipTO membershipTO : userTO.getMemberships()) {\n-            group = groupDAO.find(membershipTO.getGroupId());\n+            group = groupDAO.find(membershipTO.getGroupKey());\n \n             if (group == null) {\n                 if (LOG.isDebugEnabled()) {\n@@ -163,12 +182,12 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n                     user.addMembership(membership);\n                 }\n \n-                fill(membership, membershipTO, attrUtilFactory.getInstance(AttributableType.MEMBERSHIP), scce);\n+                fill(membership, membershipTO, attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP), scce);\n             }\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n-        fill(user, userTO, attrUtilFactory.getInstance(AttributableType.USER), scce);\n+        // realm, attributes, derived attributes, virtual attributes and resources\n+        fill(user, userTO, attrUtilsFactory.getInstance(AttributableType.USER), scce);\n \n         // set password\n         if (StringUtils.isBlank(userTO.getPassword()) || !storePassword) {\n@@ -201,7 +220,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n     @Override\n     public PropagationByResource update(final User toBeUpdated, final UserMod userMod) {\n         // Re-merge any pending change from workflow tasks\n-        User user = userDAO.save(toBeUpdated);\n+        final User user = userDAO.save(toBeUpdated);\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n@@ -212,6 +231,9 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n         // fetch account ids before update\n         Map<String, String> oldAccountIds = getAccountIds(user, AttributableType.USER);\n \n+        // realm\n+        setRealm(user, userMod);\n+\n         // password\n         if (StringUtils.isNotBlank(userMod.getPassword())) {\n             setPassword(user, userMod.getPassword(), scce);\n@@ -224,6 +246,7 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n \n             user.setUsername(userMod.getUsername());\n+            AuthContextUtils.updateAuthenticatedUsername(userMod.getUsername());\n         }\n \n         // security question / answer:\n@@ -241,25 +264,55 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n             }\n         }\n \n+        // roles\n+        CollectionUtils.forAllDo(userMod.getRolesToRemove(), new Closure<Long>() {\n+\n+            @Override\n+            public void execute(final Long roleKey) {\n+                Role role = roleDAO.find(roleKey);\n+                if (role == null) {\n+                    LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n+                } else {\n+                    user.removeRole(role);\n+                }\n+            }\n+        });\n+        CollectionUtils.forAllDo(userMod.getRolesToAdd(), new Closure<Long>() {\n+\n+            @Override\n+            public void execute(final Long roleKey) {\n+                Role role = roleDAO.find(roleKey);\n+                if (role == null) {\n+                    LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n+                } else {\n+                    user.addRole(role);\n+                }\n+            }\n+        });\n+\n         // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(user, userMod, attrUtilFactory.getInstance(AttributableType.USER), scce));\n+        propByRes.merge(fill(user, userMod, attrUtilsFactory.getInstance(AttributableType.USER), scce));\n \n         // store the group ids of membership required to be added\n-        Set<Long> membershipToBeAddedGroupKeys = new HashSet<>();\n-        for (MembershipMod membToBeAdded : userMod.getMembershipsToAdd()) {\n-            membershipToBeAddedGroupKeys.add(membToBeAdded.getGroup());\n-        }\n+        Set<Long> membershipToBeAddedGroupKeys = CollectionUtils.collect(userMod.getMembershipsToAdd(),\n+                new Transformer<MembershipMod, Long>() {\n+\n+                    @Override\n+                    public Long transform(final MembershipMod membToBeAdded) {\n+                        return membToBeAdded.getGroup();\n+                    }\n+                }, new HashSet<Long>());\n \n         final Set<String> toBeDeprovisioned = new HashSet<>();\n         final Set<String> toBeProvisioned = new HashSet<>();\n \n         // memberships to be removed\n-        for (Long membershipId : userMod.getMembershipsToRemove()) {\n-            LOG.debug(\"Membership to be removed: {}\", membershipId);\n+        for (Long membKey : userMod.getMembershipsToRemove()) {\n+            LOG.debug(\"Membership to be removed: {}\", membKey);\n \n-            Membership membership = membershipDAO.find(membershipId);\n+            Membership membership = membershipDAO.find(membKey);\n             if (membership == null) {\n-                LOG.debug(\"Invalid membership id specified to be removed: {}\", membershipId);\n+                LOG.warn(\"Invalid membership id specified to be removed: {}\", membKey);\n             } else {\n                 if (!membershipToBeAddedGroupKeys.contains(membership.getGroup().getKey())) {\n                     toBeDeprovisioned.addAll(membership.getGroup().getResourceNames());\n@@ -271,36 +324,36 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n                 // some modifications compared to the one stored in the DB\n                 membership = user.getMembership(membership.getGroup().getKey());\n                 if (membershipToBeAddedGroupKeys.contains(membership.getGroup().getKey())) {\n-                    Set<Long> attributeIds = new HashSet<>(membership.getPlainAttrs().size());\n-                    for (PlainAttr attribute : membership.getPlainAttrs()) {\n-                        attributeIds.add(attribute.getKey());\n+                    Set<Long> attrKeys = new HashSet<>(membership.getPlainAttrs().size());\n+                    for (PlainAttr plainAttr : membership.getPlainAttrs()) {\n+                        attrKeys.add(plainAttr.getKey());\n                     }\n-                    for (Long attributeId : attributeIds) {\n-                        plainAttrDAO.delete(attributeId, MPlainAttr.class);\n+                    for (Long attrKey : attrKeys) {\n+                        plainAttrDAO.delete(attrKey, MPlainAttr.class);\n                     }\n-                    attributeIds.clear();\n+                    attrKeys.clear();\n \n                     // remove derived attributes\n                     for (DerAttr derAttr : membership.getDerAttrs()) {\n-                        attributeIds.add(derAttr.getKey());\n+                        attrKeys.add(derAttr.getKey());\n                     }\n-                    for (Long derAttrId : attributeIds) {\n+                    for (Long derAttrId : attrKeys) {\n                         derAttrDAO.delete(derAttrId, MDerAttr.class);\n                     }\n-                    attributeIds.clear();\n+                    attrKeys.clear();\n \n                     // remove virtual attributes\n                     for (VirAttr virAttr : membership.getVirAttrs()) {\n-                        attributeIds.add(virAttr.getKey());\n+                        attrKeys.add(virAttr.getKey());\n                     }\n-                    for (Long virAttrId : attributeIds) {\n+                    for (Long virAttrId : attrKeys) {\n                         virAttrDAO.delete(virAttrId, MVirAttr.class);\n                     }\n-                    attributeIds.clear();\n+                    attrKeys.clear();\n                 } else {\n                     user.removeMembership(membership);\n \n-                    membershipDAO.delete(membershipId);\n+                    membershipDAO.delete(membKey);\n                 }\n             }\n         }\n@@ -325,7 +378,7 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n                 }\n \n                 propByRes.merge(fill(membership, membershipMod,\n-                        attrUtilFactory.getInstance(AttributableType.MEMBERSHIP), scce));\n+                        attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP), scce));\n             }\n         }\n \n@@ -366,8 +419,9 @@ public UserTO getUserTO(final User user) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n-        connObjectUtil.retrieveVirAttrValues(user, attrUtilFactory.getInstance(AttributableType.USER));\n-        fillTO(userTO, user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), user.getResources());\n+        connObjectUtils.retrieveVirAttrValues(user, attrUtilsFactory.getInstance(AttributableType.USER));\n+        fillTO(userTO, user.getRealm().getFullPath(),\n+                user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), user.getResources());\n \n         MembershipTO membershipTO;\n         for (Membership membership : user.getMemberships()) {\n@@ -380,13 +434,12 @@ public UserTO getUserTO(final User user) {\n             membershipTO.setLastChangeDate(membership.getLastChangeDate());\n \n             membershipTO.setKey(membership.getKey());\n-            membershipTO.setGroupId(membership.getGroup().getKey());\n+            membershipTO.setGroupKey(membership.getGroup().getKey());\n             membershipTO.setGroupName(membership.getGroup().getName());\n \n             // SYNCOPE-458 retrieve also membership virtual attributes\n-            connObjectUtil.retrieveVirAttrValues(membership, attrUtilFactory.getInstance(AttributableType.MEMBERSHIP));\n-\n-            fillTO(membershipTO,\n+            connObjectUtils.retrieveVirAttrValues(membership, attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP));\n+            fillTO(membershipTO, null,\n                     membership.getPlainAttrs(), membership.getDerAttrs(), membership.getVirAttrs(),\n                     Collections.<ExternalResource>emptyList());\n "},{"sha":"cf4d54fcc80ca1c9aa3d1f1717eb401f814d0302","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractTaskJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.job.TaskJob;\n import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.ExceptionUtil;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.JobExecutionContext;\n@@ -133,7 +133,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n             LOG.error(\"While executing task \" + taskId, e);\n             result = Result.FAILURE;\n \n-            execution.setMessage(ExceptionUtil.getFullStackTrace(e));\n+            execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n             execution.setStatus(Status.FAILURE.name());\n         }\n         execution.setEndDate(new Date());"},{"sha":"a6341c0da34130b94ef0b9ffaf09f01134868984","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":12,"deletions":20,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -37,17 +37,15 @@\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.lib.CollectionUtils2;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Attributable;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -61,7 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.velocity.VelocityContext;\n import org.apache.velocity.app.VelocityEngine;\n@@ -138,10 +136,7 @@ public class NotificationManagerImpl implements NotificationManager {\n     private ToolManager velocityToolManager;\n \n     @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n-    @Autowired\n-    private ConnObjectUtil connObjectUtil;\n+    private ConnObjectUtils connObjectUtils;\n \n     @Autowired\n     private UserDataBinder userDataBinder;\n@@ -153,7 +148,7 @@ public class NotificationManagerImpl implements NotificationManager {\n     private EntityFactory entityFactory;\n \n     @Autowired\n-    private AttributableUtilFactory attrUtilFactory;\n+    private AttributableUtilsFactory attrUtilsFactory;\n \n     @Transactional(readOnly = true)\n     @Override\n@@ -175,15 +170,15 @@ private NotificationTask getNotificationTask(\n             final Map<String, Object> model) {\n \n         if (attributable != null) {\n-            connObjectUtil.retrieveVirAttrValues(attributable,\n-                    attrUtilFactory.getInstance(\n+            connObjectUtils.retrieveVirAttrValues(attributable,\n+                    attrUtilsFactory.getInstance(\n                             attributable instanceof User ? AttributableType.USER : AttributableType.GROUP));\n         }\n \n         final List<User> recipients = new ArrayList<>();\n \n         if (notification.getRecipients() != null) {\n-            recipients.addAll(searchDAO.<User>search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n+            recipients.addAll(searchDAO.<User>search(SyncopeConstants.FULL_ADMIN_REALMS,\n                     SearchCondConverter.convert(notification.getRecipients()),\n                     Collections.<OrderByClause>emptyList(), SubjectType.USER));\n         }\n@@ -195,7 +190,7 @@ private NotificationTask getNotificationTask(\n         final Set<String> recipientEmails = new HashSet<>();\n         final List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n         for (User recipient : recipients) {\n-            connObjectUtil.retrieveVirAttrValues(recipient, attrUtilFactory.getInstance(AttributableType.USER));\n+            connObjectUtils.retrieveVirAttrValues(recipient, attrUtilsFactory.getInstance(AttributableType.USER));\n \n             String email = getRecipientEmail(notification.getRecipientAttrType(),\n                     notification.getRecipientAttrName(), recipient);\n@@ -293,13 +288,10 @@ public void createTasks(\n         for (Notification notification : notificationDAO.findAll()) {\n             LOG.debug(\"Notification available user about {}\", notification.getUserAbout());\n             LOG.debug(\"Notification available group about {}\", notification.getGroupAbout());\n-            if (notification.isActive()) {\n \n-                final Set<String> events = new HashSet<>(notification.getEvents());\n-                events.retainAll(Collections.<String>singleton(AuditLoggerName.buildEvent(\n-                        type, category, subcategory, event, condition)));\n-\n-                if (events.isEmpty()) {\n+            if (notification.isActive()) {\n+                String currentEvent = AuditLoggerName.buildEvent(type, category, subcategory, event, condition);\n+                if (!notification.getEvents().contains(currentEvent)) {\n                     LOG.debug(\"No events found about {}\", subject);\n                 } else if (subjectType == null || subject == null\n                         || notification.getUserAbout() == null || notification.getGroupAbout() == null\n@@ -308,7 +300,7 @@ public void createTasks(\n                         || searchDAO.matches(subject,\n                                 SearchCondConverter.convert(notification.getGroupAbout()), subjectType)) {\n \n-                    LOG.debug(\"Creating notification task for events {} about {}\", events, subject);\n+                    LOG.debug(\"Creating notification task for event {} about {}\", currentEvent, subject);\n \n                     final Map<String, Object> model = new HashMap<>();\n                     model.put(\"type\", type);"},{"sha":"73c0572b52307735b61e936d43e413cdfe524098","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -48,8 +48,8 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.AuditManager;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n-import org.apache.syncope.core.misc.ExceptionUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n+import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -79,10 +79,10 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     protected ConnectorFactory connFactory;\n \n     /**\n-     * ConnObjectUtil.\n+     * ConnObjectUtils.\n      */\n     @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n+    protected ConnObjectUtils connObjectUtils;\n \n     /**\n      * User DAO.\n@@ -115,7 +115,7 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     protected AuditManager auditManager;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n     @Autowired\n     protected EntityFactory entityFactory;\n@@ -196,8 +196,8 @@ protected void createOrUpdate(\n \n             // 2. check wether anything is actually needing to be propagated, i.e. if there is attribute\n             // difference between beforeObj - just read above from the connector - and the values to be propagated\n-            Map<String, Attribute> originalAttrMap = connObjectUtil.toMap(beforeObj.getAttributes());\n-            Map<String, Attribute> updateAttrMap = connObjectUtil.toMap(attributes);\n+            Map<String, Attribute> originalAttrMap = connObjectUtils.toMap(beforeObj.getAttributes());\n+            Map<String, Attribute> updateAttrMap = connObjectUtils.toMap(attributes);\n \n             // Only compare attribute from beforeObj that are also being updated\n             Set<String> skipAttrNames = originalAttrMap.keySet();\n@@ -356,7 +356,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                     failureReason = e.getMessage() + \"\\n\\n Cause: \" + e.getCause().getMessage().split(\"\\n\")[0];\n                 }\n             } else {\n-                taskExecutionMessage = ExceptionUtil.getFullStackTrace(e);\n+                taskExecutionMessage = ExceptionUtils2.getFullStackTrace(e);\n                 if (e.getCause() == null) {\n                     failureReason = e.getMessage();\n                 } else {\n@@ -508,7 +508,7 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Conn\n                     task.getPropagationOperation(),\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(accountId),\n-                    connector.getOperationOptions(attrUtilFactory.getInstance(task.getSubjectType()).\n+                    connector.getOperationOptions(attrUtilsFactory.getInstance(task.getSubjectType()).\n                             getMappingItems(task.getResource(), MappingPurpose.PROPAGATION)));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);"},{"sha":"74372418bd6a32bb0d069e9827cbde5cc4edcde3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -35,7 +35,7 @@ public class DefaultPropagationReporter implements PropagationReporter {\n     protected static final Logger LOG = LoggerFactory.getLogger(DefaultPropagationReporter.class);\n \n     @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n+    protected ConnObjectUtils connObjectUtils;\n \n     protected final List<PropagationStatus> statuses = new ArrayList<>();\n \n@@ -44,17 +44,17 @@ public void onSuccessOrSecondaryResourceFailures(final String resource,\n             final PropagationTaskExecStatus executionStatus,\n             final String failureReason, final ConnectorObject beforeObj, final ConnectorObject afterObj) {\n \n-        final PropagationStatus propagation = new PropagationStatus();\n+        PropagationStatus propagation = new PropagationStatus();\n         propagation.setResource(resource);\n         propagation.setStatus(executionStatus);\n         propagation.setFailureReason(failureReason);\n \n         if (beforeObj != null) {\n-            propagation.setBeforeObj(connObjectUtil.getConnObjectTO(beforeObj));\n+            propagation.setBeforeObj(connObjectUtils.getConnObjectTO(beforeObj));\n         }\n \n         if (afterObj != null) {\n-            propagation.setAfterObj(connObjectUtil.getConnObjectTO(afterObj));\n+            propagation.setAfterObj(connObjectUtils.getConnObjectTO(afterObj));\n         }\n \n         statuses.add(propagation);"},{"sha":"6600e44c11d4b3f4f9c01111451b08422e07784b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -78,12 +78,12 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         LOG.debug(\"Evaluating accountLink for {}\", group);\n \n                         final JexlContext jexlContext = new MapContext();\n-                        JexlUtil.addFieldsToContext(group, jexlContext);\n-                        JexlUtil.addAttrsToContext(group.getPlainAttrs(), jexlContext);\n-                        JexlUtil.addDerAttrsToContext(group.getDerAttrs(), group.getPlainAttrs(), jexlContext);\n+                        JexlUtils.addFieldsToContext(group, jexlContext);\n+                        JexlUtils.addAttrsToContext(group.getPlainAttrs(), jexlContext);\n+                        JexlUtils.addDerAttrsToContext(group.getDerAttrs(), group.getPlainAttrs(), jexlContext);\n \n                         final String groupAccountLink =\n-                                JexlUtil.evaluate(task.getResource().getGmapping().getAccountLink(), jexlContext);\n+                                JexlUtils.evaluate(task.getResource().getGmapping().getAccountLink(), jexlContext);\n                         LOG.debug(\"AccountLink for {} is '{}'\", group, groupAccountLink);\n                         if (StringUtils.isNotBlank(groupAccountLink)) {\n                             groupAccountLinks.add(groupAccountLink);"},{"sha":"c9e8f5b296770955a4e75d80b1acfdf664f2d106","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":65,"deletions":266,"changes":331,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,6 +28,7 @@\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -41,8 +42,8 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n@@ -56,10 +57,10 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.java.VirAttrHandler;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n-import org.apache.syncope.core.misc.MappingUtil;\n-import org.apache.syncope.core.misc.jexl.JexlUtil;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -101,112 +102,48 @@ public class PropagationManagerImpl implements PropagationManager {\n     protected EntityFactory entityFactory;\n \n     /**\n-     * ConnObjectUtil.\n+     * ConnObjectUtils.\n      */\n     @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n+    protected ConnObjectUtils connObjectUtils;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n     @Autowired\n     protected VirAttrHandler virAttrHandler;\n \n-    /**\n-     * Create the user on every associated resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param password to be set\n-     * @param vAttrs virtual attributes to be set\n-     * @param membershipTOs user memberships\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n-     */\n-    @Override\n-    public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final List<AttrTO> vAttrs, final List<MembershipTO> membershipTOs)\n-            throws NotFoundException, UnauthorizedGroupException {\n-\n-        return getUserCreateTaskIds(wfResult, password, vAttrs, null, membershipTOs);\n-    }\n-\n-    /**\n-     * Create the user on every associated resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param password to be set\n-     * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceNames external resources not to be considered for propagation\n-     * @param membershipTOs user memberships\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n-     */\n-    @Override\n-    public List<PropagationTask> getUserCreateTaskIds(final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final Collection<AttrTO> vAttrs,\n-            final Set<String> noPropResourceNames, final List<MembershipTO> membershipTOs)\n-            throws NotFoundException, UnauthorizedGroupException {\n-\n-        return getUserCreateTaskIds(\n-                wfResult.getResult().getKey(),\n-                wfResult.getResult().getValue(),\n-                wfResult.getPropByRes(),\n-                password,\n-                vAttrs,\n-                membershipTOs,\n-                noPropResourceNames);\n-    }\n-\n     @Override\n-    public List<PropagationTask> getUserCreateTaskIds(\n+    public List<PropagationTask> getUserCreateTasks(\n             final Long key,\n-            final Boolean enabled,\n+            final Boolean enable,\n             final PropagationByResource propByRes,\n             final String password,\n             final Collection<AttrTO> vAttrs,\n             final Collection<MembershipTO> membershipTOs,\n             final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         User user = userDAO.authFetch(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(user, vAttrs, attrUtilFactory.getInstance(AttributableType.USER));\n-\n+            virAttrHandler.fillVirtual(user, vAttrs, attrUtilsFactory.getInstance(AttributableType.USER));\n         }\n         for (final Membership membership : user.getMemberships()) {\n             if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n                 MembershipTO membershipTO = CollectionUtils.find(membershipTOs, new Predicate<MembershipTO>() {\n \n                     @Override\n                     public boolean evaluate(final MembershipTO membershipTO) {\n-                        return membershipTO.getGroupId() == membership.getGroup().getKey();\n+                        return membershipTO.getGroupKey() == membership.getGroup().getKey();\n                     }\n                 });\n                 if (membershipTO != null) {\n                     virAttrHandler.fillVirtual(membership,\n-                            membershipTO.getVirAttrs(), attrUtilFactory.getInstance(AttributableType.MEMBERSHIP));\n+                            membershipTO.getVirAttrs(), attrUtilsFactory.getInstance(AttributableType.MEMBERSHIP));\n                 }\n             }\n         }\n-        return getCreateTaskIds(user, password, enabled, propByRes, noPropResourceNames);\n-    }\n-\n-    /**\n-     * Create the group on every associated resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @param vAttrs virtual attributes to be set\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n-    @Override\n-    public List<PropagationTask> getGroupCreateTaskIds(final WorkflowResult<Long> wfResult, final List<AttrTO> vAttrs)\n-            throws NotFoundException, UnauthorizedGroupException {\n-\n-        return getGroupCreateTaskIds(wfResult, vAttrs, null);\n+        return getCreateTaskIds(user, password, enable, propByRes, noPropResourceNames);\n     }\n \n     /**\n@@ -217,16 +154,16 @@ public List<PropagationTask> getGroupCreateTaskIds(final WorkflowResult<Long> wf\n      * @param noPropResourceNames external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n+     * @throws UnauthorizedException if caller doesn't own enough entitlements to administer the given group\n      */\n     @Override\n-    public List<PropagationTask> getGroupCreateTaskIds(\n+    public List<PropagationTask> getGroupCreateTasks(\n             final WorkflowResult<Long> wfResult,\n             final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n-        return getGroupCreateTaskIds(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n+        return getGroupCreateTasks(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n     }\n \n     /**\n@@ -238,19 +175,19 @@ public List<PropagationTask> getGroupCreateTaskIds(\n      * @param noPropResourceNames external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n+     * @throws UnauthorizedException if caller doesn't own enough entitlements to administer the given group\n      */\n     @Override\n-    public List<PropagationTask> getGroupCreateTaskIds(\n+    public List<PropagationTask> getGroupCreateTasks(\n             final Long key,\n             final Collection<AttrTO> vAttrs,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         Group group = groupDAO.authFetch(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(group, vAttrs, attrUtilFactory.getInstance(AttributableType.GROUP));\n+            virAttrHandler.fillVirtual(group, vAttrs, attrUtilsFactory.getInstance(AttributableType.GROUP));\n         }\n \n         return getCreateTaskIds(group, null, null, propByRes, noPropResourceNames);\n@@ -282,10 +219,10 @@ protected List<PropagationTask> getCreateTaskIds(final Subject<?, ?, ?> subject,\n      * @throws NotFoundException if user is not found\n      */\n     @Override\n-    public List<PropagationTask> getUserUpdateTaskIds(final User user, final Boolean enable,\n+    public List<PropagationTask> getUserUpdateTasks(final User user, final Boolean enable,\n             final Collection<String> noPropResourceNames) throws NotFoundException {\n \n-        return getUpdateTaskIds(\n+        return getUpdateTasks(\n                 user, // user to be updated on external resources\n                 null, // no password\n                 false,\n@@ -305,15 +242,15 @@ public List<PropagationTask> getUserUpdateTaskIds(final User user, final Boolean\n      * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n+     * @throws UnauthorizedException if caller doesn't own enough entitlements to administer the given user\n      */\n     @Override\n-    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult,\n+    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMod, Boolean>> wfResult,\n             final boolean changePwd, final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         User user = userDAO.authFetch(wfResult.getResult().getKey().getKey());\n-        return getUpdateTaskIds(user,\n+        return getUpdateTasks(user,\n                 wfResult.getResult().getKey().getPassword(),\n                 changePwd,\n                 wfResult.getResult().getValue(),\n@@ -325,14 +262,14 @@ public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry<UserMod, Boolean>> wfResult) {\n+    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMod, Boolean>> wfResult) {\n         UserMod userMod = wfResult.getResult().getKey();\n \n         // Propagate password update only to requested resources\n         List<PropagationTask> tasks = new ArrayList<>();\n         if (userMod.getPwdPropRequest() == null) {\n             // a. no specific password propagation request: generate propagation tasks for any resource associated\n-            tasks = getUserUpdateTaskIds(wfResult, false, null);\n+            tasks = getUserUpdateTasks(wfResult, false, null);\n         } else {\n             // b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n@@ -348,64 +285,35 @@ public List<PropagationTask> getUserUpdateTaskIds(final WorkflowResult<Map.Entry\n                 Set<String> toBeExcluded = new HashSet<>(currentResourceNames);\n                 toBeExcluded.addAll(userMod.getResourcesToAdd());\n                 toBeExcluded.removeAll(pwdResourceNames);\n-                tasks.addAll(getUserUpdateTaskIds(wfResult, true, toBeExcluded));\n+                tasks.addAll(getUserUpdateTasks(wfResult, true, toBeExcluded));\n             }\n \n             final PropagationByResource nonPwdPropByRes = new PropagationByResource();\n             nonPwdPropByRes.merge(origPropByRes);\n             nonPwdPropByRes.removeAll(pwdResourceNames);\n             nonPwdPropByRes.purge();\n             if (!nonPwdPropByRes.isEmpty()) {\n-                tasks.addAll(getUserUpdateTaskIds(wfResult, false, pwdResourceNames));\n+                tasks.addAll(getUserUpdateTasks(wfResult, false, pwdResourceNames));\n             }\n         }\n \n         return tasks;\n     }\n \n-    /**\n-     * Performs update on each resource associated to the group.\n-     *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n     @Override\n-    public List<PropagationTask> getGroupUpdateTaskIds(final WorkflowResult<Long> wfResult,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated)\n-            throws NotFoundException, UnauthorizedGroupException {\n-\n-        return getGroupUpdateTaskIds(wfResult, vAttrsToBeRemoved, vAttrsToBeUpdated, null);\n-    }\n-\n-    /**\n-     * Performs update on each resource associated to the group.\n-     *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n-    @Override\n-    public List<PropagationTask> getGroupUpdateTaskIds(final WorkflowResult<Long> wfResult,\n+    public List<PropagationTask> getGroupUpdateTasks(final WorkflowResult<Long> wfResult,\n             final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n             final Set<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         Group group = groupDAO.authFetch(wfResult.getResult());\n-        return getUpdateTaskIds(group, null, false, null,\n+        return getUpdateTasks(group, null, false, null,\n                 vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames,\n                 Collections.<MembershipMod>emptySet());\n     }\n \n     @Override\n-    public List<PropagationTask> getUpdateTaskIds(final Subject<?, ?, ?> subject,\n+    public List<PropagationTask> getUpdateTasks(final Subject<?, ?, ?> subject,\n             final String password, final boolean changePwd, final Boolean enable,\n             final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n             final PropagationByResource propByRes, final Collection<String> noPropResourceNames,\n@@ -416,7 +324,7 @@ public List<PropagationTask> getUpdateTaskIds(final Subject<?, ?, ?> subject,\n                 ? Collections.<String>emptySet()\n                 : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n                         ? Collections.<AttrMod>emptySet()\n-                        : vAttrsToBeUpdated, attrUtilFactory.getInstance(subject));\n+                        : vAttrsToBeUpdated, attrUtilsFactory.getInstance(subject));\n \n         // SYNCOPE-458 fill membership virtual attributes\n         if (subject instanceof User) {\n@@ -436,7 +344,7 @@ public boolean evaluate(final MembershipMod membershipMod) {\n                                 ? Collections.<String>emptySet()\n                                 : membershipMod.getVirAttrsToRemove(),\n                                 membershipMod.getVirAttrsToUpdate() == null ? Collections.<AttrMod>emptySet()\n-                                        : membershipMod.getVirAttrsToUpdate(), attrUtilFactory.getInstance(\n+                                        : membershipMod.getVirAttrsToUpdate(), attrUtilsFactory.getInstance(\n                                         AttributableType.MEMBERSHIP));\n                     }\n                 }\n@@ -480,165 +388,56 @@ public boolean evaluate(final MembershipMod membershipMod) {\n                 localPropByRes);\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param userKey to be deleted\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n-     */\n-    @Override\n-    public List<PropagationTask> getUserDeleteTaskIds(final Long userKey)\n-            throws NotFoundException, UnauthorizedGroupException {\n-\n-        return getUserDeleteTaskIds(userKey, Collections.<String>emptySet());\n-    }\n-\n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param userKey to be deleted\n-     * @param noPropResourceName name of external resource not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n-     */\n-    @Override\n-    public List<PropagationTask> getUserDeleteTaskIds(final Long userKey, final String noPropResourceName)\n-            throws NotFoundException, UnauthorizedGroupException {\n-        return getUserDeleteTaskIds(userKey, Collections.<String>singleton(noPropResourceName));\n-    }\n-\n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param userKey to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n-     */\n     @Override\n-    public List<PropagationTask> getUserDeleteTaskIds(final Long userKey, final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+    public List<PropagationTask> getUserDeleteTasks(final Long userKey, final Collection<String> noPropResourceNames)\n+            throws NotFoundException, UnauthorizedException {\n \n         User user = userDAO.authFetch(userKey);\n         return getDeleteTaskIds(user, user.getResourceNames(), noPropResourceNames);\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param userKey to be deleted\n-     * @param resourceNames resource from which user is to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if user is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given user\n-     */\n     @Override\n-    public List<PropagationTask> getUserDeleteTaskIds(\n+    public List<PropagationTask> getUserDeleteTasks(\n             final Long userKey, final Set<String> resourceNames, final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         User user = userDAO.authFetch(userKey);\n         return getDeleteTaskIds(user, resourceNames, noPropResourceNames);\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param wfResult user to be propagated (and info associated), as per result from workflow\n-     * @return list of propagation tasks\n-     */\n     @Override\n-    public List<PropagationTask> getUserDeleteTaskIds(final WorkflowResult<Long> wfResult) {\n+    public List<PropagationTask> getUserDeleteTasks(final WorkflowResult<Long> wfResult) {\n         User user = userDAO.authFetch(wfResult.getResult());\n         return createTasks(user, null, false, null, null, null, null, false, true, wfResult.getPropByRes());\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n     @Override\n-    public List<PropagationTask> getGroupDeleteTaskIds(final Long groupKey)\n-            throws NotFoundException, UnauthorizedGroupException {\n+    public List<PropagationTask> getGroupDeleteTasks(final Long groupKey)\n+            throws NotFoundException, UnauthorizedException {\n \n-        return getGroupDeleteTaskIds(groupKey, Collections.<String>emptySet());\n+        return getGroupDeleteTasks(groupKey, Collections.<String>emptySet());\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @param noPropResourceName name of external resource not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n     @Override\n-    public List<PropagationTask> getGroupDeleteTaskIds(final Long groupKey, final String noPropResourceName)\n-            throws NotFoundException, UnauthorizedGroupException {\n+    public List<PropagationTask> getGroupDeleteTasks(final Long groupKey, final String noPropResourceName)\n+            throws NotFoundException, UnauthorizedException {\n \n-        return getGroupDeleteTaskIds(groupKey, Collections.<String>singleton(noPropResourceName));\n+        return getGroupDeleteTasks(groupKey, Collections.<String>singleton(noPropResourceName));\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n     @Override\n-    public List<PropagationTask> getGroupDeleteTaskIds(\n+    public List<PropagationTask> getGroupDeleteTasks(\n             final Long groupKey, final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         Group group = groupDAO.authFetch(groupKey);\n         return getDeleteTaskIds(group, group.getResourceNames(), noPropResourceNames);\n     }\n \n-    /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @param resourceNames resource from which group is to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if group is not found\n-     * @throws UnauthorizedGroupException if caller doesn't own enough entitlements to administer the given group\n-     */\n     @Override\n-    public List<PropagationTask> getGroupDeleteTaskIds(\n+    public List<PropagationTask> getGroupDeleteTasks(\n             final Long groupKey, final Set<String> resourceNames, final Collection<String> noPropResourceNames)\n-            throws NotFoundException, UnauthorizedGroupException {\n+            throws NotFoundException, UnauthorizedException {\n \n         Group group = groupDAO.authFetch(groupKey);\n         return getDeleteTaskIds(group, resourceNames, noPropResourceNames);\n@@ -680,12 +479,12 @@ protected List<PropagationTask> createTasks(final Subject<?, ?, ?> subject,\n \n         LOG.debug(\"Provisioning subject {}:\\n{}\", subject, propByRes);\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(subject);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(subject);\n \n         if (!propByRes.get(ResourceOperation.CREATE).isEmpty()\n                 && vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n \n-            connObjectUtil.retrieveVirAttrValues(subject, attrUtil);\n+            connObjectUtils.retrieveVirAttrValues(subject, attrUtils);\n \n             // update vAttrsToBeUpdated as well\n             for (VirAttr virAttr : subject.getVirAttrs()) {\n@@ -710,22 +509,22 @@ protected List<PropagationTask> createTasks(final Subject<?, ?, ?> subject,\n                 final ExternalResource resource = resourceDAO.find(resourceName);\n                 if (resource == null) {\n                     LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceName);\n-                } else if (attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION).isEmpty()) {\n+                } else if (attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION).isEmpty()) {\n                     LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n-                            attrUtil.getType(), resource);\n+                            attrUtils.getType(), resource);\n                 } else {\n                     PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n                     task.setResource(resource);\n-                    task.setObjectClassName(connObjectUtil.fromSubject(subject).getObjectClassValue());\n-                    task.setSubjectType(attrUtil.getType());\n+                    task.setObjectClassName(connObjectUtils.fromSubject(subject).getObjectClassValue());\n+                    task.setSubjectType(attrUtils.getType());\n                     if (!deleteOnResource) {\n                         task.setSubjectKey(subject.getKey());\n                     }\n                     task.setPropagationOperation(operation);\n                     task.setPropagationMode(resource.getPropagationMode());\n                     task.setOldAccountId(propByRes.getOldAccountId(resource.getKey()));\n \n-                    Map.Entry<String, Set<Attribute>> preparedAttrs = MappingUtil.prepareAttributes(attrUtil, subject,\n+                    Pair<String, Set<Attribute>> preparedAttrs = MappingUtils.prepareAttributes(attrUtils, subject,\n                             password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, membVAttrsToBeRemoved,\n                             membVAttrsToBeUpdatedMap, enable, resource);\n                     task.setAccountId(preparedAttrs.getKey());\n@@ -734,9 +533,9 @@ protected List<PropagationTask> createTasks(final Subject<?, ?, ?> subject,\n                     // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n                     List<String> mandatoryMissing = new ArrayList<>();\n                     List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-                    for (MappingItem item : attrUtil.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n+                    for (MappingItem item : attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION)) {\n                         if (!item.isAccountid()\n-                                && JexlUtil.evaluateMandatoryCondition(item.getMandatoryCondition(), subject)) {\n+                                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), subject)) {\n \n                             Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n                             if (attr == null) {"},{"sha":"4ba68c5c727db4bb239b654ea67695daa5ab9f55","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,15 +20,17 @@\n \n import java.lang.reflect.ParameterizedType;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.TraceLevel;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entitlement;\n import org.apache.syncope.core.persistence.api.entity.group.GMapping;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -44,7 +46,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n@@ -71,12 +72,6 @@\n     @Autowired\n     protected ExternalResourceDAO resourceDAO;\n \n-    /**\n-     * Entitlement DAO.\n-     */\n-    @Autowired\n-    protected EntitlementDAO entitlementDAO;\n-\n     /**\n      * Policy DAO.\n      */\n@@ -317,16 +312,16 @@ protected String createReport(final Collection<ProvisioningResult> provResults,\n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         // PRE: grant all authorities (i.e. setup the SecurityContextHolder)\n-        List<GrantedAuthority> authorities = new ArrayList<>();\n-        CollectionUtils.collect(entitlementDAO.findAll(), new Transformer<Entitlement, GrantedAuthority>() {\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(Arrays.asList(Entitlement.values()),\n+                new Transformer<Entitlement, GrantedAuthority>() {\n \n-            @Override\n-            public GrantedAuthority transform(final Entitlement entitlement) {\n-                return new SimpleGrantedAuthority(entitlement.getKey());\n-            }\n-        }, authorities);\n+                    @Override\n+                    public GrantedAuthority transform(final Entitlement entitlement) {\n+                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                    }\n+                }, new ArrayList<GrantedAuthority>());\n \n-        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+        final UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", authorities);\n \n         SecurityContextHolder.getContext().setAuthentication(\n                 new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));"},{"sha":"98b0dff649a9dd7125565741172a7b42bdab7a98","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.Mapping;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -43,7 +43,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n-import org.apache.syncope.core.misc.MappingUtil;\n+import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.provisioning.api.sync.SyncopePushResultHandler;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.quartz.JobExecutionException;\n@@ -52,7 +52,7 @@\n public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHandler<PushTask, PushActions>\n         implements SyncopePushResultHandler {\n \n-    protected abstract AttributableUtil getAttributableUtil();\n+    protected abstract AttributableUtils getAttributableUtils();\n \n     protected abstract String getName(final Subject<?, ?, ?> subject);\n \n@@ -91,29 +91,29 @@ protected final void doHandle(final long subjectId)\n \n         final Subject<?, ?, ?> subject = getSubject(subjectId);\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(subject);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(subject);\n \n         final ProvisioningResult result = new ProvisioningResult();\n         profile.getResults().add(result);\n \n         result.setId(subject.getKey());\n-        result.setSubjectType(attrUtil.getType());\n+        result.setSubjectType(attrUtils.getType());\n         result.setName(getName(subject));\n \n         final Boolean enabled = subject instanceof User && profile.getTask().isSyncStatus()\n                 ? ((User) subject).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n                 : null;\n \n         LOG.debug(\"Propagating {} with key {} towards {}\",\n-                attrUtil.getType(), subject.getKey(), profile.getTask().getResource());\n+                attrUtils.getType(), subject.getKey(), profile.getTask().getResource());\n \n         Object output = null;\n         Result resultStatus = null;\n         ConnectorObject beforeObj = null;\n         String operation = null;\n \n         // Try to read remote object (user / group) BEFORE any actual operation\n-        final String accountId = MappingUtil.getAccountIdValue(\n+        final String accountId = MappingUtils.getAccountIdValue(\n                 subject, profile.getTask().getResource(), getMapping().getAccountIdItem());\n \n         beforeObj = getRemoteObject(accountId);\n@@ -265,18 +265,16 @@ protected final void doHandle(final long subjectId)\n                 LOG.warn(\"Error pushing {} towards {}\", subject, profile.getTask().getResource(), e);\n                 throw new JobExecutionException(e);\n             } finally {\n-                notificationManager.createTasks(\n-                        AuditElements.EventCategoryType.PUSH,\n-                        getAttributableUtil().getType().name().toLowerCase(),\n+                notificationManager.createTasks(AuditElements.EventCategoryType.PUSH,\n+                        getAttributableUtils().getType().name().toLowerCase(),\n                         profile.getTask().getResource().getKey(),\n                         operation,\n                         resultStatus,\n                         beforeObj,\n                         output,\n                         subject);\n-                auditManager.audit(\n-                        AuditElements.EventCategoryType.PUSH,\n-                        getAttributableUtil().getType().name().toLowerCase(),\n+                auditManager.audit(AuditElements.EventCategoryType.PUSH,\n+                        getAttributableUtils().getType().name().toLowerCase(),\n                         profile.getTask().getResource().getKey(),\n                         operation,\n                         resultStatus,\n@@ -372,7 +370,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getUpdateTaskIds(\n+        taskExecutor.execute(propagationManager.getUpdateTasks(\n                 sbj, null, changepwd, enabled, vattrToBeRemoved, vattrToBeUpdated, propByRes, noPropResources,\n                 membsToAdd));\n "},{"sha":"5f006d0e3b1d22f7bcdef702a866a2350b1901fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":58,"deletions":60,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,12 +30,12 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.provisioning.api.AttributableTransformer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -47,12 +47,12 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n         implements SyncopeSyncResultHandler {\n \n     @Autowired\n-    protected SyncUtilities syncUtilities;\n+    protected SyncUtils syncUtilities;\n \n     @Autowired\n     protected AttributableTransformer attrTransformer;\n \n-    protected abstract AttributableUtil getAttributableUtil();\n+    protected abstract AttributableUtils getAttributableUtils();\n \n     protected abstract String getName(AbstractSubjectTO subjectTO);\n \n@@ -83,21 +83,21 @@ public boolean handle(final SyncDelta delta) {\n         }\n     }\n \n-    protected List<ProvisioningResult> assign(final SyncDelta delta, final AttributableUtil attrUtil)\n+    protected List<ProvisioningResult> assign(final SyncDelta delta, final AttributableUtils attrUtils)\n             throws JobExecutionException {\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"SyncTask not configured for create\");\n             return Collections.<ProvisioningResult>emptyList();\n         }\n \n         final AbstractSubjectTO subjectTO =\n-                connObjectUtil.getSubjectTO(delta.getObject(), profile.getTask(), attrUtil);\n+                connObjectUtils.getSubjectTO(delta.getObject(), profile.getTask(), attrUtils);\n \n         subjectTO.getResources().add(profile.getTask().getResource().getKey());\n \n         final ProvisioningResult result = new ProvisioningResult();\n         result.setOperation(ResourceOperation.CREATE);\n-        result.setSubjectType(attrUtil.getType());\n+        result.setSubjectType(attrUtils.getType());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n \n         // Attributable transformation (if configured)\n@@ -114,13 +114,13 @@ protected List<ProvisioningResult> assign(final SyncDelta delta, final Attributa\n                 _delta = action.beforeAssign(this.getProfile(), _delta, transformed);\n             }\n \n-            create(transformed, _delta, attrUtil, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n+            create(transformed, _delta, attrUtils, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n         }\n \n         return Collections.singletonList(result);\n     }\n \n-    protected List<ProvisioningResult> create(final SyncDelta delta, final AttributableUtil attrUtil)\n+    protected List<ProvisioningResult> create(final SyncDelta delta, final AttributableUtils attrUtils)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformCreate()) {\n@@ -129,15 +129,15 @@ protected List<ProvisioningResult> create(final SyncDelta delta, final Attributa\n         }\n \n         final AbstractSubjectTO subjectTO =\n-                connObjectUtil.getSubjectTO(delta.getObject(), profile.getTask(), attrUtil);\n+                connObjectUtils.getSubjectTO(delta.getObject(), profile.getTask(), attrUtils);\n \n         // Attributable transformation (if configured)\n         AbstractSubjectTO transformed = attrTransformer.transform(subjectTO);\n         LOG.debug(\"Transformed: {}\", transformed);\n \n         final ProvisioningResult result = new ProvisioningResult();\n         result.setOperation(ResourceOperation.CREATE);\n-        result.setSubjectType(attrUtil.getType());\n+        result.setSubjectType(attrUtils.getType());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n \n         result.setName(getName(transformed));\n@@ -150,7 +150,7 @@ protected List<ProvisioningResult> create(final SyncDelta delta, final Attributa\n                 _delta = action.beforeProvision(this.getProfile(), _delta, transformed);\n             }\n \n-            create(transformed, _delta, attrUtil, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n+            create(transformed, _delta, attrUtils, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n         }\n \n         return Collections.<ProvisioningResult>singletonList(result);\n@@ -159,7 +159,7 @@ protected List<ProvisioningResult> create(final SyncDelta delta, final Attributa\n     private void create(\n             final AbstractSubjectTO subjectTO,\n             final SyncDelta delta,\n-            final AttributableUtil attrUtil,\n+            final AttributableUtils attrUtils,\n             final String operation,\n             final ProvisioningResult result)\n             throws JobExecutionException {\n@@ -179,13 +179,13 @@ private void create(\n         } catch (PropagationException e) {\n             // A propagation failure doesn't imply a synchronization failure.\n             // The propagation exception status will be reported into the propagation task execution.\n-            LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+            LOG.error(\"Could not propagate {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n             output = e;\n             resultStatus = Result.FAILURE;\n         } catch (Exception e) {\n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-            LOG.error(\"Could not create {} {} \", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+            LOG.error(\"Could not create {} {} \", attrUtils.getType(), delta.getUid().getUidValue(), e);\n             output = e;\n             resultStatus = Result.FAILURE;\n         }\n@@ -194,7 +194,7 @@ private void create(\n     }\n \n     protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subjects,\n-            final AttributableUtil attrUtil)\n+            final AttributableUtils attrUtils)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformUpdate()) {\n@@ -211,14 +211,14 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n \n             final ProvisioningResult result = new ProvisioningResult();\n             result.setOperation(ResourceOperation.UPDATE);\n-            result.setSubjectType(attrUtil.getType());\n+            result.setSubjectType(attrUtils.getType());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n             result.setId(key);\n \n             AbstractSubjectTO before = getSubjectTO(key);\n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n-                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), key));\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtils.getType().name(), key));\n             } else {\n                 result.setName(getName(before));\n             }\n@@ -250,17 +250,17 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n                         output = updated;\n                         resultStatus = Result.SUCCESS;\n                         result.setName(getName(updated));\n-                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), key);\n+                        LOG.debug(\"{} {} successfully updated\", attrUtils.getType(), key);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a synchronization failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n-                        LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        LOG.error(\"Could not propagate {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     } catch (Exception e) {\n                         result.setStatus(ProvisioningResult.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                        LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        LOG.error(\"Could not update {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     }\n@@ -275,7 +275,7 @@ protected List<ProvisioningResult> update(SyncDelta delta, final List<Long> subj\n     protected List<ProvisioningResult> deprovision(\n             SyncDelta delta,\n             final List<Long> subjects,\n-            final AttributableUtil attrUtil,\n+            final AttributableUtils attrUtils,\n             final boolean unlink)\n             throws JobExecutionException {\n \n@@ -296,15 +296,15 @@ protected List<ProvisioningResult> deprovision(\n \n             final ProvisioningResult result = new ProvisioningResult();\n             result.setOperation(ResourceOperation.DELETE);\n-            result.setSubjectType(attrUtil.getType());\n+            result.setSubjectType(attrUtils.getType());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n             result.setId(id);\n \n             final AbstractSubjectTO before = getSubjectTO(id);\n \n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n-                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), id));\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtils.getType().name(), id));\n             }\n \n             if (!profile.isDryRun()) {\n@@ -333,17 +333,17 @@ protected List<ProvisioningResult> deprovision(\n                         }\n \n                         resultStatus = Result.SUCCESS;\n-                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+                        LOG.debug(\"{} {} successfully updated\", attrUtils.getType(), id);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a synchronization failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n-                        LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        LOG.error(\"Could not propagate {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     } catch (Exception e) {\n                         result.setStatus(ProvisioningResult.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                        LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        LOG.error(\"Could not update {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     }\n@@ -361,7 +361,7 @@ protected List<ProvisioningResult> deprovision(\n     protected List<ProvisioningResult> link(\n             SyncDelta delta,\n             final List<Long> subjects,\n-            final AttributableUtil attrUtil,\n+            final AttributableUtils attrUtils,\n             final boolean unlink)\n             throws JobExecutionException {\n \n@@ -382,15 +382,15 @@ protected List<ProvisioningResult> link(\n \n             final ProvisioningResult result = new ProvisioningResult();\n             result.setOperation(ResourceOperation.NONE);\n-            result.setSubjectType(attrUtil.getType());\n+            result.setSubjectType(attrUtils.getType());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n             result.setId(id);\n \n             final AbstractSubjectTO before = getSubjectTO(id);\n \n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n-                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtil.getType().name(), id));\n+                result.setMessage(String.format(\"Subject '%s(%d)' not found\", attrUtils.getType().name(), id));\n             }\n \n             if (!profile.isDryRun()) {\n@@ -418,17 +418,17 @@ protected List<ProvisioningResult> link(\n                         }\n \n                         resultStatus = Result.SUCCESS;\n-                        LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+                        LOG.debug(\"{} {} successfully updated\", attrUtils.getType(), id);\n                     } catch (PropagationException e) {\n                         // A propagation failure doesn't imply a synchronization failure.\n                         // The propagation exception status will be reported into the propagation task execution.\n-                        LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        LOG.error(\"Could not propagate {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     } catch (Exception e) {\n                         result.setStatus(ProvisioningResult.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                        LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                        LOG.error(\"Could not update {} {}\", attrUtils.getType(), delta.getUid().getUidValue(), e);\n                         output = e;\n                         resultStatus = Result.FAILURE;\n                     }\n@@ -443,7 +443,7 @@ protected List<ProvisioningResult> link(\n     }\n \n     protected List<ProvisioningResult> delete(\n-            SyncDelta delta, final List<Long> subjects, final AttributableUtil attrUtil)\n+            SyncDelta delta, final List<Long> subjects, final AttributableUtils attrUtils)\n             throws JobExecutionException {\n \n         if (!profile.getTask().isPerformDelete()) {\n@@ -468,7 +468,7 @@ protected List<ProvisioningResult> delete(\n                 result.setId(id);\n                 result.setName(getName(before));\n                 result.setOperation(ResourceOperation.DELETE);\n-                result.setSubjectType(attrUtil.getType());\n+                result.setSubjectType(attrUtils.getType());\n                 result.setStatus(ProvisioningResult.Status.SUCCESS);\n \n                 if (!profile.isDryRun()) {\n@@ -483,7 +483,7 @@ protected List<ProvisioningResult> delete(\n                     } catch (Exception e) {\n                         result.setStatus(ProvisioningResult.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                        LOG.error(\"Could not delete {} {}\", attrUtil.getType(), id, e);\n+                        LOG.error(\"Could not delete {} {}\", attrUtils.getType(), id, e);\n                         output = e;\n                     }\n \n@@ -497,18 +497,18 @@ protected List<ProvisioningResult> delete(\n                 delResults.add(result);\n \n             } catch (NotFoundException e) {\n-                LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n-            } catch (UnauthorizedGroupException e) {\n-                LOG.error(\"Not allowed to read {} {}\", attrUtil.getType(), id, e);\n+                LOG.error(\"Could not find {} {}\", attrUtils.getType(), id, e);\n+            } catch (UnauthorizedException e) {\n+                LOG.error(\"Not allowed to read {} {}\", attrUtils.getType(), id, e);\n             } catch (Exception e) {\n-                LOG.error(\"Could not delete {} {}\", attrUtil.getType(), id, e);\n+                LOG.error(\"Could not delete {} {}\", attrUtils.getType(), id, e);\n             }\n         }\n \n         return delResults;\n     }\n \n-    private List<ProvisioningResult> ignore(SyncDelta delta, final AttributableUtil attrUtil, final boolean matching)\n+    private List<ProvisioningResult> ignore(SyncDelta delta, final AttributableUtils attrUtils, final boolean matching)\n             throws JobExecutionException {\n \n         LOG.debug(\"Subject to ignore {}\", delta.getObject().getUid().getUidValue());\n@@ -519,7 +519,7 @@ private List<ProvisioningResult> ignore(SyncDelta delta, final AttributableUtil\n         result.setId(null);\n         result.setName(delta.getObject().getUid().getUidValue());\n         result.setOperation(ResourceOperation.NONE);\n-        result.setSubjectType(attrUtil.getType());\n+        result.setSubjectType(attrUtils.getType());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n         ignoreResults.add(result);\n \n@@ -541,7 +541,7 @@ private List<ProvisioningResult> ignore(SyncDelta delta, final AttributableUtil\n     protected final void doHandle(final SyncDelta delta)\n             throws JobExecutionException {\n \n-        final AttributableUtil attrUtil = getAttributableUtil();\n+        final AttributableUtils attrUtils = getAttributableUtils();\n \n         LOG.debug(\"Process {} for {} as {}\",\n                 delta.getDeltaType(), delta.getUid().getUidValue(), delta.getObject().getObjectClass());\n@@ -552,7 +552,7 @@ protected final void doHandle(final SyncDelta delta)\n \n         try {\n             List<Long> subjectKeys = syncUtilities.findExisting(\n-                    uid, delta.getObject(), profile.getTask().getResource(), attrUtil);\n+                    uid, delta.getObject(), profile.getTask().getResource(), attrUtils);\n \n             if (subjectKeys.size() > 1) {\n                 switch (profile.getResAct()) {\n@@ -576,36 +576,36 @@ protected final void doHandle(final SyncDelta delta)\n                 if (subjectKeys.isEmpty()) {\n                     switch (profile.getTask().getUnmatchingRule()) {\n                         case ASSIGN:\n-                            profile.getResults().addAll(assign(delta, attrUtil));\n+                            profile.getResults().addAll(assign(delta, attrUtils));\n                             break;\n                         case PROVISION:\n-                            profile.getResults().addAll(create(delta, attrUtil));\n+                            profile.getResults().addAll(create(delta, attrUtils));\n                             break;\n                         case IGNORE:\n-                            profile.getResults().addAll(ignore(delta, attrUtil, false));\n+                            profile.getResults().addAll(ignore(delta, attrUtils, false));\n                             break;\n                         default:\n                         // do nothing\n                     }\n                 } else {\n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n-                            profile.getResults().addAll(update(delta, subjectKeys, attrUtil));\n+                            profile.getResults().addAll(update(delta, subjectKeys, attrUtils));\n                             break;\n                         case DEPROVISION:\n-                            profile.getResults().addAll(deprovision(delta, subjectKeys, attrUtil, false));\n+                            profile.getResults().addAll(deprovision(delta, subjectKeys, attrUtils, false));\n                             break;\n                         case UNASSIGN:\n-                            profile.getResults().addAll(deprovision(delta, subjectKeys, attrUtil, true));\n+                            profile.getResults().addAll(deprovision(delta, subjectKeys, attrUtils, true));\n                             break;\n                         case LINK:\n-                            profile.getResults().addAll(link(delta, subjectKeys, attrUtil, false));\n+                            profile.getResults().addAll(link(delta, subjectKeys, attrUtils, false));\n                             break;\n                         case UNLINK:\n-                            profile.getResults().addAll(link(delta, subjectKeys, attrUtil, true));\n+                            profile.getResults().addAll(link(delta, subjectKeys, attrUtils, true));\n                             break;\n                         case IGNORE:\n-                            profile.getResults().addAll(ignore(delta, attrUtil, true));\n+                            profile.getResults().addAll(ignore(delta, attrUtils, true));\n                             break;\n                         default:\n                         // do nothing\n@@ -615,7 +615,7 @@ protected final void doHandle(final SyncDelta delta)\n                 if (subjectKeys.isEmpty()) {\n                     LOG.debug(\"No match found for deletion\");\n                 } else {\n-                    profile.getResults().addAll(delete(delta, subjectKeys, attrUtil));\n+                    profile.getResults().addAll(delete(delta, subjectKeys, attrUtils));\n                 }\n             }\n         } catch (IllegalStateException | IllegalArgumentException e) {\n@@ -630,19 +630,17 @@ private void audit(\n             final Object output,\n             final Object... input) {\n \n-        notificationManager.createTasks(\n-                AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                getAttributableUtil().getType().name().toLowerCase(),\n+        notificationManager.createTasks(AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                getAttributableUtils().getType().name().toLowerCase(),\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,\n                 before,\n                 output,\n                 input);\n \n-        auditManager.audit(\n-                AuditElements.EventCategoryType.SYNCHRONIZATION,\n-                getAttributableUtil().getType().name().toLowerCase(),\n+        auditManager.audit(AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                getAttributableUtils().getType().name().toLowerCase(),\n                 profile.getTask().getResource().getKey(),\n                 event,\n                 result,"},{"sha":"d07ad34636cd9f9df668952f5857d1dfb0ce6d10","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n@@ -32,7 +32,7 @@\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeResultHandler;\n import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.ConnObjectUtil;\n+import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n@@ -55,10 +55,10 @@\n     protected GroupDAO groupDAO;\n \n     /**\n-     * ConnectorObject util.\n+     * ConnectorObject utils.\n      */\n     @Autowired\n-    protected ConnObjectUtil connObjectUtil;\n+    protected ConnObjectUtils connObjectUtils;\n \n     /**\n      * Notification Manager.\n@@ -97,10 +97,10 @@\n     protected GroupWorkflowAdapter gwfAdapter;\n \n     @Autowired\n-    protected UserDataBinder userTransfer;\n+    protected UserDataBinder userDataBinder;\n \n     @Autowired\n-    protected GroupDataBinder groupTransfer;\n+    protected GroupDataBinder groupDataBinder;\n \n     @Autowired\n     protected UserProvisioningManager userProvisioningManager;\n@@ -109,7 +109,7 @@\n     protected GroupProvisioningManager groupProvisioningManager;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n     /**\n      * Sync profile."},{"sha":"c38e5d6fac8a04ce8553798272d5a68faed34d22","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupPushResultHandlerImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.Mapping;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -41,33 +41,33 @@\n public class GroupPushResultHandlerImpl extends AbstractPushResultHandler implements GroupPushResultHandler {\n \n     @Override\n-    protected AttributableUtil getAttributableUtil() {\n-        return attrUtilFactory.getInstance(AttributableType.GROUP);\n+    protected AttributableUtils getAttributableUtils() {\n+        return attrUtilsFactory.getInstance(AttributableType.GROUP);\n     }\n \n     @Override\n     protected Subject<?, ?, ?> deprovision(final Subject<?, ?, ?> sbj) {\n-        final GroupTO before = groupTransfer.getGroupTO(Group.class.cast(sbj));\n+        final GroupTO before = groupDataBinder.getGroupTO(Group.class.cast(sbj));\n \n         final List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getGroupDeleteTaskIds(before.getKey(), noPropResources));\n+        taskExecutor.execute(propagationManager.getGroupDeleteTasks(before.getKey(), noPropResources));\n \n         return groupDAO.authFetch(before.getKey());\n     }\n \n     @Override\n     protected Subject<?, ?, ?> provision(final Subject<?, ?, ?> sbj, final Boolean enabled) {\n-        final GroupTO before = groupTransfer.getGroupTO(Group.class.cast(sbj));\n+        final GroupTO before = groupDataBinder.getGroupTO(Group.class.cast(sbj));\n \n         final List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getGroupCreateTaskIds(\n+        taskExecutor.execute(propagationManager.getGroupCreateTasks(\n                 before.getKey(),\n                 Collections.unmodifiableCollection(before.getVirAttrs()),\n                 propByRes,\n@@ -118,7 +118,7 @@ protected String getName(final Subject<?, ?, ?> subject) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return groupTransfer.getGroupTO(key);\n+            return groupDataBinder.getGroupTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;"},{"sha":"36e3215a170e016358c2fb9fa2e70dd3659977df","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.GroupSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -45,8 +45,8 @@ public Map<Long, String> getGroupOwnerMap() {\n     }\n \n     @Override\n-    protected AttributableUtil getAttributableUtil() {\n-        return attrUtilFactory.getInstance(AttributableType.GROUP);\n+    protected AttributableUtils getAttributableUtils() {\n+        return attrUtilsFactory.getInstance(AttributableType.GROUP);\n     }\n \n     @Override\n@@ -57,7 +57,7 @@ protected String getName(final AbstractSubjectTO subjectTO) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return groupTransfer.getGroupTO(key);\n+            return groupDataBinder.getGroupTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving group {}\", key, e);\n             return null;\n@@ -68,12 +68,12 @@ protected AbstractSubjectTO getSubjectTO(final long key) {\n     protected AbstractSubjectMod getSubjectMod(\n             final AbstractSubjectTO subjectTO, final SyncDelta delta) {\n \n-        return connObjectUtil.getAttributableMod(\n+        return connObjectUtils.getAttributableMod(\n                 subjectTO.getKey(),\n                 delta.getObject(),\n                 subjectTO,\n                 profile.getTask(),\n-                attrUtilFactory.getInstance(AttributableType.GROUP));\n+                attrUtilsFactory.getInstance(AttributableType.GROUP));\n     }\n \n     @Override\n@@ -85,7 +85,7 @@ protected AbstractSubjectTO create(\n         Map.Entry<Long, List<PropagationStatus>> created = groupProvisioningManager.create(groupTO, groupOwnerMap,\n                 Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        groupTO = groupTransfer.getGroupTO(created.getKey());\n+        groupTO = groupDataBinder.getGroupTO(created.getKey());\n \n         result.setId(created.getKey());\n         result.setName(getName(subjectTO));\n@@ -108,7 +108,7 @@ protected AbstractSubjectTO link(\n             groupMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n         }\n \n-        return groupTransfer.getGroupTO(gwfAdapter.update(groupMod).getResult());\n+        return groupDataBinder.getGroupTO(gwfAdapter.update(groupMod).getResult());\n     }\n \n     @Override\n@@ -133,7 +133,7 @@ protected AbstractSubjectTO update(\n             groupOwnerMap.put(updated.getKey(), groupOwner);\n         }\n \n-        final GroupTO after = groupTransfer.getGroupTO(updated.getKey());\n+        final GroupTO after = groupDataBinder.getGroupTO(updated.getKey());\n \n         result.setName(getName(after));\n \n@@ -143,7 +143,7 @@ protected AbstractSubjectTO update(\n     @Override\n     protected void deprovision(final Long id, final boolean unlink) {\n         taskExecutor.execute(\n-                propagationManager.getGroupDeleteTaskIds(id, profile.getTask().getResource().getKey()));\n+                propagationManager.getGroupDeleteTasks(id, profile.getTask().getResource().getKey()));\n \n         if (unlink) {\n             final UserMod userMod = new UserMod();\n@@ -156,7 +156,7 @@ protected void deprovision(final Long id, final boolean unlink) {\n     protected void delete(final Long id) {\n         try {\n             taskExecutor.execute(\n-                    propagationManager.getGroupDeleteTaskIds(id, profile.getTask().getResource().getKey()));\n+                    propagationManager.getGroupDeleteTasks(id, profile.getTask().getResource().getKey()));\n         } catch (Exception e) {\n             // A propagation failure doesn't imply a synchronization failure.\n             // The propagation exception status will be reported into the propagation task execution."},{"sha":"fc68ec04e97c7aea1f67af0bc6d01151d8115d02","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,6 +24,7 @@\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -87,7 +88,7 @@ public class LDAPMembershipSyncActions extends DefaultSyncActions {\n     private AuditManager auditManager;\n \n     @Autowired\n-    private SyncUtilities syncUtilities;\n+    private SyncUtils syncUtilities;\n \n     protected Map<Long, Long> membersBeforeGroupUpdate = Collections.<Long, Long>emptyMap();\n \n@@ -205,12 +206,12 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n \n         Result result;\n \n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = null;\n+        WorkflowResult<Pair<UserMod, Boolean>> updated = null;\n \n         try {\n             updated = uwfAdapter.update(userMod);\n \n-            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                     updated, false, Collections.singleton(resourceName));\n \n             taskExecutor.execute(tasks);"},{"sha":"7bec3af5e03b7a37022a669b424f8a98c4cbb670","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobImpl.java","status":"modified","additions":23,"deletions":36,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,10 +20,9 @@\n \n import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.SubjectType;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -83,8 +82,6 @@ protected String executeWithSecurityContext(\n             final boolean dryRun) throws JobExecutionException {\n         LOG.debug(\"Execute synchronization (push) with resource {}\", pushTask.getResource());\n \n-        final Set<Long> authorizations = GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll());\n-\n         final ProvisioningProfile<PushTask, PushActions> profile = new ProvisioningProfile<>(connector, pushTask);\n         if (actions != null) {\n             profile.getActions().addAll(actions);\n@@ -109,9 +106,13 @@ protected String executeWithSecurityContext(\n         }\n \n         if (uMapping != null) {\n-            final int count = userDAO.count(authorizations);\n+            final int count = userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n             for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-                final List<User> localUsers = getUsers(authorizations, pushTask, page);\n+                final List<User> localUsers = StringUtils.isBlank(pushTask.getUserFilter())\n+                        ? userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n+                        : searchDAO.<User>search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                                SearchCondConverter.convert(pushTask.getUserFilter()),\n+                                Collections.<OrderByClause>emptyList(), SubjectType.USER);\n \n                 for (User localUser : localUsers) {\n                     try {\n@@ -126,15 +127,22 @@ protected String executeWithSecurityContext(\n         }\n \n         if (rMapping != null) {\n-            final List<Group> localGroups = geGroups(authorizations, pushTask);\n-\n-            for (Group localGroup : localGroups) {\n-                try {\n-                    // group propagation\n-                    rhandler.handle(localGroup.getKey());\n-                } catch (Exception e) {\n-                    LOG.warn(\"Failure pushing group '{}' on '{}'\", localGroup, pushTask.getResource(), e);\n-                    throw new JobExecutionException(\"While pushing groups on connector\", e);\n+            final int count = groupDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n+            for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n+                final List<Group> localGroups = StringUtils.isBlank(pushTask.getGroupFilter())\n+                        ? groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n+                        : searchDAO.<Group>search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                                SearchCondConverter.convert(pushTask.getGroupFilter()),\n+                                Collections.<OrderByClause>emptyList(), SubjectType.GROUP);\n+\n+                for (Group localGroup : localGroups) {\n+                    try {\n+                        // group propagation\n+                        rhandler.handle(localGroup.getKey());\n+                    } catch (Exception e) {\n+                        LOG.warn(\"Failure pushing group '{}' on '{}'\", localGroup, pushTask.getResource(), e);\n+                        throw new JobExecutionException(\"While pushing groups on connector\", e);\n+                    }\n                 }\n             }\n         }\n@@ -151,25 +159,4 @@ protected String executeWithSecurityContext(\n \n         return result;\n     }\n-\n-    private List<User> getUsers(final Set<Long> authorizations, final PushTask pushTask, final int page) {\n-        final String filter = pushTask.getUserFilter();\n-        if (StringUtils.isBlank(filter)) {\n-            return userDAO.findAll(authorizations, page, PAGE_SIZE);\n-        } else {\n-            return searchDAO.<User>search(\n-                    authorizations, SearchCondConverter.convert(filter),\n-                    Collections.<OrderByClause>emptyList(), SubjectType.USER);\n-        }\n-    }\n-\n-    private List<Group> geGroups(final Set<Long> authorizations, final PushTask pushTask) {\n-        final String filter = pushTask.getGroupFilter();\n-        if (StringUtils.isBlank(filter)) {\n-            return groupDAO.findAll();\n-        } else {\n-            return searchDAO.<Group>search(authorizations, SearchCondConverter.convert(filter),\n-                    Collections.<OrderByClause>emptyList(), SubjectType.GROUP);\n-        }\n-    }\n }"},{"sha":"28cd5b47e16e06942cea482da7c626a3c1686388","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobImpl.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,15 +25,14 @@\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n import org.apache.syncope.core.persistence.api.entity.group.GMapping;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.UMapping;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.job.SyncJob;\n import org.apache.syncope.core.provisioning.api.sync.GroupSyncResultHandler;\n@@ -60,10 +59,10 @@ public class SyncJobImpl extends AbstractProvisioningJob<SyncTask, SyncActions>\n     private GroupWorkflowAdapter gwfAdapter;\n \n     @Autowired\n-    protected SyncUtilities syncUtilities;\n+    protected SyncUtils syncUtilities;\n \n     protected void setGroupOwners(final GroupSyncResultHandler rhandler)\n-            throws UnauthorizedGroupException, NotFoundException {\n+            throws UnauthorizedException, NotFoundException {\n \n         for (Map.Entry<Long, String> entry : rhandler.getGroupOwnerMap().entrySet()) {\n             GroupMod groupMod = new GroupMod();\n@@ -193,7 +192,7 @@ protected String executeWithSecurityContext(\n             }\n         }\n \n-        final String result = createReport(profile.getResults(), syncTask.getResource().getSyncTraceLevel(), dryRun);\n+        String result = createReport(profile.getResults(), syncTask.getResource().getSyncTraceLevel(), dryRun);\n \n         LOG.debug(\"Sync result: {}\", result);\n \n@@ -204,11 +203,9 @@ private SyncPolicySpec getSyncPolicySpec(final ProvisioningTask task) {\n         SyncPolicySpec syncPolicySpec;\n \n         if (task instanceof SyncTask) {\n-            final SyncPolicy syncPolicy = task.getResource().getSyncPolicy() == null\n-                    ? policyDAO.getGlobalSyncPolicy()\n-                    : task.getResource().getSyncPolicy();\n-\n-            syncPolicySpec = syncPolicy == null ? null : syncPolicy.getSpecification(SyncPolicySpec.class);\n+            syncPolicySpec = task.getResource().getSyncPolicy() == null\n+                    ? null\n+                    : task.getResource().getSyncPolicy().getSpecification(SyncPolicySpec.class);\n         } else {\n             syncPolicySpec = null;\n         }"},{"sha":"7dabe8f733ae5451fd07607ee75222a24aee9dec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"renamed","additions":33,"deletions":49,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,13 +24,12 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -41,19 +40,15 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtilFactory;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n-import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.sync.SyncCorrelationRule;\n@@ -70,25 +65,19 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class SyncUtilities {\n+public class SyncUtils {\n \n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncUtilities.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SyncUtils.class);\n \n     /**\n      * Policy DAO.\n      */\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n-    /**\n-     * Entitlement DAO.\n-     */\n-    @Autowired\n-    protected EntitlementDAO entitlementDAO;\n-\n     /**\n      * Schema DAO.\n      */\n@@ -114,7 +103,7 @@ public class SyncUtilities {\n     protected SubjectSearchDAO searchDAO;\n \n     @Autowired\n-    protected AttributableUtilFactory attrUtilFactory;\n+    protected AttributableUtilsFactory attrUtilsFactory;\n \n     public Long findMatchingAttributableKey(\n             final ObjectClass oclass,\n@@ -124,11 +113,11 @@ public Long findMatchingAttributableKey(\n \n         Long result = null;\n \n-        final AttributableUtil attrUtil = attrUtilFactory.getInstance(oclass);\n+        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(oclass);\n \n         final List<ConnectorObject> found = connector.search(oclass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        attrUtil.getMappingItems(resource, MappingPurpose.SYNCHRONIZATION)));\n+                        attrUtils.getMappingItems(resource, MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", oclass, resource, name);\n@@ -139,12 +128,12 @@ public Long findMatchingAttributableKey(\n \n             ConnectorObject connObj = found.iterator().next();\n             try {\n-                List<Long> subjectKeys = findExisting(connObj.getUid().getUidValue(), connObj, resource, attrUtil);\n+                List<Long> subjectKeys = findExisting(connObj.getUid().getUidValue(), connObj, resource, attrUtils);\n                 if (subjectKeys.isEmpty()) {\n-                    LOG.debug(\"No matching {} found for {}, aborting\", attrUtil.getType(), connObj);\n+                    LOG.debug(\"No matching {} found for {}, aborting\", attrUtils.getType(), connObj);\n                 } else {\n                     if (subjectKeys.size() > 1) {\n-                        LOG.warn(\"More than one {} found {} - taking first only\", attrUtil.getType(), subjectKeys);\n+                        LOG.warn(\"More than one {} found {} - taking first only\", attrUtils.getType(), subjectKeys);\n                     }\n \n                     result = subjectKeys.iterator().next();\n@@ -162,16 +151,16 @@ public Long findMatchingAttributableKey(\n     }\n \n     private List<Long> findByAccountIdItem(\n-            final String uid, final ExternalResource resource, final AttributableUtil attrUtil) {\n+            final String uid, final ExternalResource resource, final AttributableUtils attrUtils) {\n         final List<Long> result = new ArrayList<>();\n \n-        final MappingItem accountIdItem = attrUtil.getAccountIdItem(resource);\n+        final MappingItem accountIdItem = attrUtils.getAccountIdItem(resource);\n         switch (accountIdItem.getIntMappingType()) {\n             case UserPlainSchema:\n             case GroupPlainSchema:\n-                final PlainAttrValue value = attrUtil.newPlainAttrValue();\n+                final PlainAttrValue value = attrUtils.newPlainAttrValue();\n \n-                PlainSchema schema = plainSchemaDAO.find(accountIdItem.getIntAttrName(), attrUtil.plainSchemaClass());\n+                PlainSchema schema = plainSchemaDAO.find(accountIdItem.getIntAttrName(), attrUtils.plainSchemaClass());\n                 if (schema == null) {\n                     value.setStringValue(uid);\n                 } else {\n@@ -184,7 +173,7 @@ private List<Long> findByAccountIdItem(\n                 }\n \n                 List<? extends Subject<?, ?, ?>> subjects =\n-                        getSubjectDAO(accountIdItem).findByAttrValue(accountIdItem.getIntAttrName(), value, attrUtil);\n+                        getSubjectDAO(accountIdItem).findByAttrValue(accountIdItem.getIntAttrName(), value, attrUtils);\n                 for (Subject<?, ?, ?> subject : subjects) {\n                     result.add(subject.getKey());\n                 }\n@@ -193,7 +182,7 @@ private List<Long> findByAccountIdItem(\n             case UserDerivedSchema:\n             case GroupDerivedSchema:\n                 subjects = getSubjectDAO(accountIdItem).\n-                        findByDerAttrValue(accountIdItem.getIntAttrName(), uid, attrUtil);\n+                        findByDerAttrValue(accountIdItem.getIntAttrName(), uid, attrUtils);\n                 for (Subject<?, ?, ?> subject : subjects) {\n                     result.add(subject.getKey());\n                 }\n@@ -214,14 +203,14 @@ private List<Long> findByAccountIdItem(\n                 break;\n \n             case GroupName:\n-                List<Group> groups = groupDAO.find(uid);\n-                for (Group group : groups) {\n+                Group group = groupDAO.find(uid);\n+                if (group != null) {\n                     result.add(group.getKey());\n                 }\n                 break;\n \n             case GroupId:\n-                Group group = groupDAO.find(Long.parseLong(uid));\n+                group = groupDAO.find(Long.parseLong(uid));\n                 if (group != null) {\n                     result.add(group.getKey());\n                 }\n@@ -237,8 +226,8 @@ private List<Long> findByAccountIdItem(\n     private List<Long> search(final SearchCond searchCond, final SubjectType type) {\n         final List<Long> result = new ArrayList<>();\n \n-        List<Subject<?, ?, ?>> subjects = searchDAO.search(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()),\n-                searchCond, Collections.<OrderByClause>emptyList(), type);\n+        List<Subject<?, ?, ?>> subjects = searchDAO.search(\n+                SyncopeConstants.FULL_ADMIN_REALMS, searchCond, Collections.<OrderByClause>emptyList(), type);\n         for (Subject<?, ?, ?> subject : subjects) {\n             result.add(subject.getKey());\n         }\n@@ -256,12 +245,12 @@ private List<Long> findByAttributableSearch(\n             final ConnectorObject connObj,\n             final List<String> altSearchSchemas,\n             final ExternalResource resource,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtils attrUtils) {\n \n         // search for external attribute's name/value of each specified name\n         final Map<String, Attribute> extValues = new HashMap<>();\n \n-        for (MappingItem item : attrUtil.getMappingItems(resource, MappingPurpose.SYNCHRONIZATION)) {\n+        for (MappingItem item : attrUtils.getMappingItems(resource, MappingPurpose.SYNCHRONIZATION)) {\n             extValues.put(item.getIntAttrName(), connObj.getAttributeByName(item.getExtAttrName()));\n         }\n \n@@ -316,7 +305,7 @@ private List<Long> findByAttributableSearch(\n                     : SearchCond.getAndCond(searchCond, nodeCond);\n         }\n \n-        return search(searchCond, SubjectType.valueOf(attrUtil.getType().name()));\n+        return search(searchCond, SubjectType.valueOf(attrUtils.getType().name()));\n     }\n \n     private SyncCorrelationRule getCorrelationRule(final AttributableType type, final SyncPolicySpec policySpec) {\n@@ -372,37 +361,32 @@ private List<String> getAltSearchSchemas(final AttributableType type, final Sync\n      * @param uid for finding by account id\n      * @param connObj for finding by attribute value\n      * @param resource external resource\n-     * @param attrUtil attributable util\n+     * @param attrUtils attributable util\n      * @return list of matching users / groups\n      */\n     public List<Long> findExisting(\n             final String uid,\n             final ConnectorObject connObj,\n             final ExternalResource resource,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtils attrUtils) {\n \n         SyncPolicySpec syncPolicySpec = null;\n-        if (resource.getSyncPolicy() == null) {\n-            SyncPolicy globalSP = policyDAO.getGlobalSyncPolicy();\n-            if (globalSP != null) {\n-                syncPolicySpec = globalSP.getSpecification(SyncPolicySpec.class);\n-            }\n-        } else {\n+        if (resource.getSyncPolicy() != null) {\n             syncPolicySpec = resource.getSyncPolicy().getSpecification(SyncPolicySpec.class);\n         }\n \n         SyncCorrelationRule syncRule = null;\n         List<String> altSearchSchemas = null;\n \n         if (syncPolicySpec != null) {\n-            syncRule = getCorrelationRule(attrUtil.getType(), syncPolicySpec);\n-            altSearchSchemas = getAltSearchSchemas(attrUtil.getType(), syncPolicySpec);\n+            syncRule = getCorrelationRule(attrUtils.getType(), syncPolicySpec);\n+            altSearchSchemas = getAltSearchSchemas(attrUtils.getType(), syncPolicySpec);\n         }\n \n         return syncRule == null ? altSearchSchemas == null || altSearchSchemas.isEmpty()\n-                ? findByAccountIdItem(uid, resource, attrUtil)\n-                : findByAttributableSearch(connObj, altSearchSchemas, resource, attrUtil)\n-                : findByCorrelationRule(connObj, syncRule, SubjectType.valueOf(attrUtil.getType().name()));\n+                ? findByAccountIdItem(uid, resource, attrUtils)\n+                : findByAttributableSearch(connObj, altSearchSchemas, resource, attrUtils)\n+                : findByCorrelationRule(connObj, syncRule, SubjectType.valueOf(attrUtils.getType().name()));\n     }\n \n     public Boolean readEnabled(final ConnectorObject connectorObject, final ProvisioningTask task) {","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtilities.java"},{"sha":"87d72e641fa039645e620b795c5737b388be6b62","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.persistence.api.entity.Mapping;\n import org.apache.syncope.core.persistence.api.entity.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n@@ -41,34 +41,34 @@\n public class UserPushResultHandlerImpl extends AbstractPushResultHandler implements UserPushResultHandler {\n \n     @Override\n-    protected AttributableUtil getAttributableUtil() {\n-        return attrUtilFactory.getInstance(AttributableType.USER);\n+    protected AttributableUtils getAttributableUtils() {\n+        return attrUtilsFactory.getInstance(AttributableType.USER);\n     }\n \n     @Override\n     protected Subject<?, ?, ?> deprovision(final Subject<?, ?, ?> sbj) {\n-        final UserTO before = userTransfer.getUserTO(sbj.getKey());\n+        final UserTO before = userDataBinder.getUserTO(sbj.getKey());\n \n         final List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getUserDeleteTaskIds(before.getKey(),\n+        taskExecutor.execute(propagationManager.getUserDeleteTasks(before.getKey(),\n                 Collections.singleton(profile.getTask().getResource().getKey()), noPropResources));\n \n         return userDAO.authFetch(before.getKey());\n     }\n \n     @Override\n     protected Subject<?, ?, ?> provision(final Subject<?, ?, ?> sbj, final Boolean enabled) {\n-        final UserTO before = userTransfer.getUserTO(sbj.getKey());\n+        final UserTO before = userDataBinder.getUserTO(sbj.getKey());\n \n         final List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n-        taskExecutor.execute(propagationManager.getUserCreateTaskIds(\n+        taskExecutor.execute(propagationManager.getUserCreateTasks(\n                 before.getKey(),\n                 enabled,\n                 propByRes,\n@@ -122,7 +122,7 @@ protected String getName(final Subject<?, ?, ?> subject) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return userTransfer.getUserTO(key);\n+            return userDataBinder.getUserTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;"},{"sha":"4a19ed759a8e37b656075b17eb80488f7d2ed656","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -27,16 +27,16 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttributableType;\n-import org.apache.syncope.core.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.UserSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n \n public class UserSyncResultHandlerImpl extends AbstractSyncResultHandler implements UserSyncResultHandler {\n \n     @Override\n-    protected AttributableUtil getAttributableUtil() {\n-        return attrUtilFactory.getInstance(AttributableType.USER);\n+    protected AttributableUtils getAttributableUtils() {\n+        return attrUtilsFactory.getInstance(AttributableType.USER);\n     }\n \n     @Override\n@@ -47,7 +47,7 @@ protected String getName(final AbstractSubjectTO subjectTO) {\n     @Override\n     protected AbstractSubjectTO getSubjectTO(final long key) {\n         try {\n-            return userTransfer.getUserTO(key);\n+            return userDataBinder.getUserTO(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;\n@@ -58,12 +58,11 @@ protected AbstractSubjectTO getSubjectTO(final long key) {\n     protected AbstractSubjectMod getSubjectMod(\n             final AbstractSubjectTO subjectTO, final SyncDelta delta) {\n \n-        return connObjectUtil.getAttributableMod(\n-                subjectTO.getKey(),\n+        return connObjectUtils.getAttributableMod(subjectTO.getKey(),\n                 delta.getObject(),\n                 subjectTO,\n                 profile.getTask(),\n-                getAttributableUtil());\n+                getAttributableUtils());\n     }\n \n     @Override\n@@ -76,11 +75,9 @@ protected AbstractSubjectTO create(\n         Map.Entry<Long, List<PropagationStatus>> created = userProvisioningManager.create(userTO, true, true, enabled,\n                 Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        userTO = userTransfer.getUserTO(created.getKey());\n-\n         result.setId(created.getKey());\n \n-        return userTO;\n+        return userDataBinder.getUserTO(created.getKey());\n     }\n \n     @Override\n@@ -98,7 +95,7 @@ protected AbstractSubjectTO link(\n             userMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n         }\n \n-        return userTransfer.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getKey());\n+        return userDataBinder.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getKey());\n     }\n \n     @Override\n@@ -114,7 +111,7 @@ protected AbstractSubjectTO update(\n         Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(userMod, before.getKey(),\n                 result, enabled, Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        return userTransfer.getUserTO(updated.getKey());\n+        return userDataBinder.getUserTO(updated.getKey());\n     }\n \n     @Override\n@@ -123,7 +120,8 @@ protected void deprovision(\n             final boolean unlink) {\n \n         taskExecutor.execute(\n-                propagationManager.getUserDeleteTaskIds(key, profile.getTask().getResource().getKey()));\n+                propagationManager.getUserDeleteTasks(\n+                        key, Collections.singleton(profile.getTask().getResource().getKey())));\n \n         if (unlink) {\n             final UserMod userMod = new UserMod();"},{"sha":"9c0abffedcad6f4ab9433470d2dc115c1127c910","filename":"core/provisioning-java/src/main/resources/provisioning.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -16,3 +16,4 @@\n # under the License.\n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache"},{"sha":"9b50b7d468a56280c7e5b9f2070128162f43fe44","filename":"core/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -84,7 +84,7 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.misc\"/>  \n   <context:component-scan base-package=\"org.apache.syncope.core.provisioning.java\"/>\n \n-  <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\" scope=\"singleton\">\n+  <bean id=\"virAttrCache\" class=\"${virAttrCache}\" scope=\"singleton\">\n     <constructor-arg value=\"60\"/>\n     <constructor-arg value=\"5000\"/>\n   </bean>"},{"sha":"ab71890159ed28be5513a221e034fdd49be080b6","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -42,14 +42,15 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n+import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.dao.DataIntegrityViolationException;\n@@ -89,12 +90,14 @@ public Response toResponse(final Exception ex) {\n         } else if (ex instanceof AccessDeniedException) {\n             builder = Response.status(Response.Status.UNAUTHORIZED).\n                     header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n-        } else if (ex instanceof UnauthorizedGroupException) {\n-            builder = builder(ClientExceptionType.UnauthorizedGroup, getExMessage(ex));\n+        } else if (ex instanceof UnauthorizedException) {\n+            builder = builder(ClientExceptionType.Unauthorized, getExMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n             builder = builder(ClientExceptionType.EntityExists, getExMessage(ex));\n         } else if (ex instanceof DataIntegrityViolationException) {\n             builder = builder(ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+        } else if (ex instanceof ConnectorException) {\n+            builder = builder(ClientExceptionType.ConnectorException, getExMessage(ex));            \n         } else {\n             builder = processNotFoundExceptions(ex);\n             if (builder == null) {"},{"sha":"dc3a1ec14c10a721b3ec09f3636802d20c22e461","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -83,10 +83,8 @@ protected Preference getPreference() {\n      * @return response to successful <tt>create</tt> request\n      */\n     protected Response createResponse(final Object id, final Object entity) {\n-        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(id)).build();\n-\n         Response.ResponseBuilder builder = Response.\n-                created(location).\n+                created(uriInfo.getAbsolutePathBuilder().path(String.valueOf(id)).build()).\n                 header(RESTHeaders.RESOURCE_ID, id);\n \n         switch (getPreference()) {"},{"sha":"618b2459e1b1af1133dc88a8e5bacd909c54de70","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":26,"deletions":9,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n@@ -71,14 +73,16 @@ public List<PlainSchemaTO> getSchemaNames(final Long connInstanceKey, final Conn\n \n         connInstanceTO.setKey(connInstanceKey);\n \n-        List<String> schemaNames = logic.getSchemaNames(connInstanceTO, includeSpecial);\n-        List<PlainSchemaTO> result = new ArrayList<>(schemaNames.size());\n-        for (String name : schemaNames) {\n-            PlainSchemaTO schemaTO = new PlainSchemaTO();\n-            schemaTO.setKey(name);\n-            result.add(schemaTO);\n-        }\n-        return result;\n+        return CollectionUtils.collect(logic.getSchemaNames(connInstanceTO, includeSpecial),\n+                new Transformer<String, PlainSchemaTO>() {\n+\n+                    @Override\n+                    public PlainSchemaTO transform(final String name) {\n+                        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+                        schemaTO.setKey(name);\n+                        return schemaTO;\n+                    }\n+                }, new ArrayList<PlainSchemaTO>());\n     }\n \n     @Override\n@@ -128,6 +132,19 @@ public void reload() {\n \n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n-        return logic.bulk(bulkAction);\n+        BulkActionResult result = new BulkActionResult();\n+\n+        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+            for (String id : bulkAction.getTargets()) {\n+                try {\n+                    result.add(logic.delete(Long.valueOf(id)).getKey(), BulkActionResult.Status.SUCCESS);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error performing delete for connector {}\", id, e);\n+                    result.add(id, BulkActionResult.Status.FAILURE);\n+                }\n+            }\n+        }\n+\n+        return result;\n     }\n }"},{"sha":"8d2b2a4d9276f699da1d1a924da74c1a8ca293c3","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/EntitlementServiceImpl.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18958ba234672741adba9b9fa42a503166b9692a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18958ba234672741adba9b9fa42a503166b9692a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FEntitlementServiceImpl.java?ref=18958ba234672741adba9b9fa42a503166b9692a","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service;\n-\n-import java.util.List;\n-import org.apache.syncope.common.lib.wrap.EntitlementTO;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n-import org.apache.syncope.common.rest.api.service.EntitlementService;\n-import org.apache.syncope.core.logic.EntitlementLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class EntitlementServiceImpl extends AbstractServiceImpl implements EntitlementService {\n-\n-    @Autowired\n-    private EntitlementLogic logic;\n-\n-    @Override\n-    public List<EntitlementTO> getAllEntitlements() {\n-        return CollectionWrapper.wrap(logic.getAll(), EntitlementTO.class);\n-    }\n-\n-    @Override\n-    public List<EntitlementTO> getOwnEntitlements() {\n-        return CollectionWrapper.wrap(logic.getOwn(), EntitlementTO.class);\n-    }\n-}"},{"sha":"5efee1e7ce14abb0eb3cca706b5e7b0fad486b57","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":63,"deletions":29,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,6 +20,10 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n@@ -43,11 +47,6 @@ public class GroupServiceImpl extends AbstractServiceImpl implements GroupServic\n     @Autowired\n     private GroupLogic logic;\n \n-    @Override\n-    public List<GroupTO> children(final Long groupKey) {\n-        return logic.children(groupKey);\n-    }\n-\n     @Override\n     public Response create(final GroupTO groupTO) {\n         GroupTO created = logic.create(groupTO);\n@@ -65,29 +64,36 @@ public Response delete(final Long groupKey) {\n     }\n \n     @Override\n-    public PagedResult<GroupTO> list() {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    public PagedResult<GroupTO> list(final List<String> realms) {\n+        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n     }\n \n     @Override\n-    public PagedResult<GroupTO> list(final String orderBy) {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    public PagedResult<GroupTO> list(final List<String> realms, final String orderBy) {\n+        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n-    public PagedResult<GroupTO> list(final Integer page, final Integer size) {\n-        return list(page, size, null);\n+    public PagedResult<GroupTO> list(final List<String> realms, final Integer page, final Integer size) {\n+        return list(realms, page, size, null);\n     }\n \n     @Override\n-    public PagedResult<GroupTO> list(final Integer page, final Integer size, final String orderBy) {\n-        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n-        return buildPagedResult(logic.list(page, size, orderByClauses), page, size, logic.count());\n-    }\n+    public PagedResult<GroupTO> list(\n+            final List<String> realms, final Integer page, final Integer size, final String orderBy) {\n \n-    @Override\n-    public GroupTO parent(final Long groupKey) {\n-        return logic.parent(groupKey);\n+        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+\n+            @Override\n+            public String transform(final String input) {\n+                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n+            }\n+        });\n+\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(\n+                logic.list(page, size, orderByClauses, realms), page, size,\n+                logic.count(realms));\n     }\n \n     @Override\n@@ -96,31 +102,44 @@ public GroupTO read(final Long groupKey) {\n     }\n \n     @Override\n-    public PagedResult<GroupTO> search(final String fiql) {\n-        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    public PagedResult<GroupTO> search(final List<String> realms, final String fiql) {\n+        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n     }\n \n     @Override\n-    public PagedResult<GroupTO> search(final String fiql, final String orderBy) {\n-        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    public PagedResult<GroupTO> search(final List<String> realms, final String fiql, final String orderBy) {\n+        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n-    public PagedResult<GroupTO> search(final String fiql, final Integer page, final Integer size) {\n-        return search(fiql, page, size, null);\n+    public PagedResult<GroupTO> search(\n+            final List<String> realms, final String fiql, final Integer page, final Integer size) {\n+\n+        return search(realms, fiql, page, size, null);\n     }\n \n     @Override\n-    public PagedResult<GroupTO> search(final String fiql, final Integer page, final Integer size, final String orderBy) {\n+    public PagedResult<GroupTO> search(final List<String> realms, final String fiql,\n+            final Integer page, final Integer size, final String orderBy) {\n+\n+        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+\n+            @Override\n+            public String transform(final String input) {\n+                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n+            }\n+        });\n+\n         SearchCond cond = getSearchCond(fiql);\n         List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n         return buildPagedResult(\n-                logic.search(cond, page, size, orderByClauses), page, size, logic.searchCount(cond));\n+                logic.search(cond, page, size, orderByClauses, realms), page, size,\n+                logic.searchCount(cond, realms));\n     }\n \n     @Override\n-    public GroupTO readSelf(final Long groupKey) {\n-        return logic.readSelf(groupKey);\n+    public List<GroupTO> own() {\n+        return logic.own();\n     }\n \n     @Override\n@@ -222,6 +241,21 @@ public Response bulkAssociation(\n \n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n-        return logic.bulk(bulkAction);\n+        BulkActionResult result = new BulkActionResult();\n+\n+        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+            for (String groupKey : bulkAction.getTargets()) {\n+                try {\n+                    result.add(logic.delete(Long.valueOf(groupKey)).getKey(), BulkActionResult.Status.SUCCESS);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error performing delete for group {}\", groupKey, e);\n+                    result.add(groupKey, BulkActionResult.Status.FAILURE);\n+                }\n+            }\n+        } else {\n+            LOG.warn(\"Unsupported bulk action: {}\", bulkAction.getOperation());\n+        }\n+\n+        return result;\n     }\n }"},{"sha":"15581206216befff1303043c4147741e9d900ad2","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":1,"deletions":33,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -20,7 +20,6 @@\n \n import java.net.URI;\n import java.util.List;\n-import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.AccountPolicyTO;\n@@ -41,7 +40,7 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ\n \n     @Override\n     public <T extends AbstractPolicyTO> Response create(final T policyTO) {\n-        AbstractPolicyTO policy = logic.create(policyTO);\n+        T policy = logic.create(policyTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(policy.getKey())).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_ID, policy.getKey()).\n@@ -63,51 +62,20 @@ public <T extends AbstractPolicyTO> T read(final Long policyKey) {\n         return logic.read(policyKey);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends AbstractPolicyTO> T readGlobal(final PolicyType type) {\n-        T result = null;\n-\n-        switch (type) {\n-            case ACCOUNT:\n-            case GLOBAL_ACCOUNT:\n-                result = (T) logic.getGlobalAccountPolicy();\n-                break;\n-\n-            case PASSWORD:\n-            case GLOBAL_PASSWORD:\n-                result = (T) logic.getGlobalPasswordPolicy();\n-                break;\n-\n-            case SYNC:\n-            case GLOBAL_SYNC:\n-                result = (T) logic.getGlobalSyncPolicy();\n-                break;\n-\n-            default:\n-                throw new BadRequestException();\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public <T extends AbstractPolicyTO> void update(final Long policyKey, final T policyTO) {\n         policyTO.setKey(policyKey);\n \n         switch (policyTO.getType()) {\n             case ACCOUNT:\n-            case GLOBAL_ACCOUNT:\n                 logic.update((AccountPolicyTO) policyTO);\n                 break;\n \n             case PASSWORD:\n-            case GLOBAL_PASSWORD:\n                 logic.update((PasswordPolicyTO) policyTO);\n                 break;\n \n             case SYNC:\n-            case GLOBAL_SYNC:\n                 logic.update((SyncPolicyTO) policyTO);\n                 break;\n "},{"sha":"aba52952fb1ecc70ffacd7afaa26c8ead62d789f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RealmService;\n@@ -42,12 +43,12 @@ public List<RealmTO> list() {\n \n     @Override\n     public List<RealmTO> list(final String fullPath) {\n-        return logic.list(StringUtils.prependIfMissing(fullPath, \"/\"));\n+        return logic.list(StringUtils.prependIfMissing(fullPath, SyncopeConstants.ROOT_REALM));\n     }\n \n     @Override\n     public Response create(final String parentPath, final RealmTO realmTO) {\n-        RealmTO created = logic.create(StringUtils.prependIfMissing(parentPath, \"/\"), realmTO);\n+        RealmTO created = logic.create(StringUtils.prependIfMissing(parentPath, SyncopeConstants.ROOT_REALM), realmTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getName()).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_ID, created.getFullPath()).\n@@ -56,13 +57,13 @@ public Response create(final String parentPath, final RealmTO realmTO) {\n \n     @Override\n     public void update(final String fullPath, final RealmTO realmTO) {\n-        realmTO.setFullPath(StringUtils.prependIfMissing(fullPath, \"/\"));\n+        realmTO.setFullPath(StringUtils.prependIfMissing(fullPath, SyncopeConstants.ROOT_REALM));\n         logic.update(realmTO);\n     }\n \n     @Override\n     public void delete(final String fullPath) {\n-        logic.delete(StringUtils.prependIfMissing(fullPath, \"/\"));\n+        logic.delete(StringUtils.prependIfMissing(fullPath, SyncopeConstants.ROOT_REALM));\n     }\n \n }"},{"sha":"dfc4391a8c969c5c89541916b3f929cbb98f0d54","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -92,11 +92,6 @@ public boolean check(final ResourceTO resourceTO) {\n         return logic.check(resourceTO);\n     }\n \n-    @Override\n-    public BulkActionResult bulk(final BulkAction bulkAction) {\n-        return logic.bulk(bulkAction);\n-    }\n-\n     @Override\n     public BulkActionResult bulkDeassociation(final String resourceKey, final SubjectType subjectType,\n             final ResourceDeassociationActionType type, final List<SubjectKey> subjectKeys) {\n@@ -136,4 +131,21 @@ public BulkActionResult bulkDeassociation(final String resourceKey, final Subjec\n         return res;\n     }\n \n+    @Override\n+    public BulkActionResult bulk(final BulkAction bulkAction) {\n+        BulkActionResult result = new BulkActionResult();\n+\n+        if (bulkAction.getOperation() == BulkAction.Type.DELETE) {\n+            for (String name : bulkAction.getTargets()) {\n+                try {\n+                    result.add(logic.delete(name).getKey(), BulkActionResult.Status.SUCCESS);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error performing delete for resource {}\", name, e);\n+                    result.add(name, BulkActionResult.Status.FAILURE);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"ce1a394cfedbca30de710b1b1f409b745af8c63f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":42,"deletions":1,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -134,6 +134,47 @@ public void update(final Long taskKey, final AbstractTaskTO taskTO) {\n \n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n-        return logic.bulk(bulkAction);\n+        BulkActionResult result = new BulkActionResult();\n+\n+        switch (bulkAction.getOperation()) {\n+            case DELETE:\n+                for (String taskKey : bulkAction.getTargets()) {\n+                    try {\n+                        result.add(logic.delete(Long.valueOf(taskKey)).getKey(), BulkActionResult.Status.SUCCESS);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error performing delete for task {}\", taskKey, e);\n+                        result.add(taskKey, BulkActionResult.Status.FAILURE);\n+                    }\n+                }\n+                break;\n+\n+            case DRYRUN:\n+                for (String taskKey : bulkAction.getTargets()) {\n+                    try {\n+                        logic.execute(Long.valueOf(taskKey), true);\n+                        result.add(taskKey, BulkActionResult.Status.SUCCESS);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error performing dryrun for task {}\", taskKey, e);\n+                        result.add(taskKey, BulkActionResult.Status.FAILURE);\n+                    }\n+                }\n+                break;\n+\n+            case EXECUTE:\n+                for (String taskKey : bulkAction.getTargets()) {\n+                    try {\n+                        logic.execute(Long.valueOf(taskKey), false);\n+                        result.add(taskKey, BulkActionResult.Status.SUCCESS);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error performing execute for task {}\", taskKey, e);\n+                        result.add(taskKey, BulkActionResult.Status.FAILURE);\n+                    }\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n     }\n }"},{"sha":"d15c236ca577e4dbe4ea8f42b016be8f948cc899","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.core.logic.SyncopeLogic;\n import org.apache.syncope.core.logic.UserLogic;\n@@ -51,8 +53,13 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n     }\n \n     @Override\n-    public UserTO read() {\n-        return logic.readSelf();\n+    public Response read() {\n+        Pair<String, UserTO> self = logic.readSelf();\n+        return Response.ok().\n+                header(RESTHeaders.RESOURCE_ID, self.getValue().getKey()).\n+                header(RESTHeaders.OWNED_ENTITLEMENTS, self.getKey()).\n+                entity(self.getValue()).\n+                build();\n     }\n \n     @Override"},{"sha":"320a37c49d92f59145d5127e4d244215ffdf19cf","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":91,"deletions":17,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -21,6 +21,10 @@\n import java.util.List;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -78,24 +82,36 @@ public Response delete(final Long userKey) {\n     }\n \n     @Override\n-    public PagedResult<UserTO> list() {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    public PagedResult<UserTO> list(final List<String> realms) {\n+        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n     }\n \n     @Override\n-    public PagedResult<UserTO> list(final String orderBy) {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    public PagedResult<UserTO> list(final List<String> realms, final String orderBy) {\n+        return list(realms, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n-    public PagedResult<UserTO> list(final Integer page, final Integer size) {\n-        return list(page, size, null);\n+    public PagedResult<UserTO> list(final List<String> realms, final Integer page, final Integer size) {\n+        return list(realms, page, size, null);\n     }\n \n     @Override\n-    public PagedResult<UserTO> list(final Integer page, final Integer size, final String orderBy) {\n+    public PagedResult<UserTO> list(\n+            final List<String> realms, final Integer page, final Integer size, final String orderBy) {\n+\n+        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+\n+            @Override\n+            public String transform(final String input) {\n+                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n+            }\n+        });\n+\n         List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n-        return buildPagedResult(logic.list(page, size, orderByClauses), page, size, logic.count());\n+        return buildPagedResult(\n+                logic.list(page, size, orderByClauses, realms), page, size,\n+                logic.count(realms));\n     }\n \n     @Override\n@@ -104,26 +120,39 @@ public UserTO read(final Long userKey) {\n     }\n \n     @Override\n-    public PagedResult<UserTO> search(final String fiql) {\n-        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    public PagedResult<UserTO> search(final List<String> realms, final String fiql) {\n+        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n     }\n \n     @Override\n-    public PagedResult<UserTO> search(final String fiql, final String orderBy) {\n-        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n+    public PagedResult<UserTO> search(final List<String> realms, final String fiql, final String orderBy) {\n+        return search(realms, fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n-    public PagedResult<UserTO> search(final String fiql, final Integer page, final Integer size) {\n-        return search(fiql, page, size, null);\n+    public PagedResult<UserTO> search(\n+            final List<String> realms, final String fiql, final Integer page, final Integer size) {\n+\n+        return search(realms, fiql, page, size, null);\n     }\n \n     @Override\n-    public PagedResult<UserTO> search(final String fiql, final Integer page, final Integer size, final String orderBy) {\n+    public PagedResult<UserTO> search(final List<String> realms, final String fiql,\n+            final Integer page, final Integer size, final String orderBy) {\n+\n+        CollectionUtils.transform(realms, new Transformer<String, String>() {\n+\n+            @Override\n+            public String transform(final String input) {\n+                return StringUtils.prependIfMissing(input, SyncopeConstants.ROOT_REALM);\n+            }\n+        });\n+\n         SearchCond cond = getSearchCond(fiql);\n         List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n         return buildPagedResult(\n-                logic.search(cond, page, size, orderByClauses), page, size, logic.searchCount(cond));\n+                logic.search(cond, page, size, orderByClauses, realms), page, size,\n+                logic.searchCount(cond, realms));\n     }\n \n     @Override\n@@ -246,6 +275,51 @@ public Response bulkAssociation(\n \n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n-        return logic.bulk(bulkAction);\n+        BulkActionResult result = new BulkActionResult();\n+\n+        switch (bulkAction.getOperation()) {\n+            case DELETE:\n+                for (String key : bulkAction.getTargets()) {\n+                    try {\n+                        result.add(logic.delete(Long.valueOf(key)).getKey(), BulkActionResult.Status.SUCCESS);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error performing delete for user {}\", key, e);\n+                        result.add(key, BulkActionResult.Status.FAILURE);\n+                    }\n+                }\n+                break;\n+\n+            case SUSPEND:\n+                for (String key : bulkAction.getTargets()) {\n+                    StatusMod statusMod = new StatusMod();\n+                    statusMod.setKey(Long.valueOf(key));\n+                    statusMod.setType(StatusMod.ModType.SUSPEND);\n+                    try {\n+                        result.add(logic.status(statusMod).getKey(), BulkActionResult.Status.SUCCESS);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error performing suspend for user {}\", key, e);\n+                        result.add(key, BulkActionResult.Status.FAILURE);\n+                    }\n+                }\n+                break;\n+\n+            case REACTIVATE:\n+                for (String key : bulkAction.getTargets()) {\n+                    StatusMod statusMod = new StatusMod();\n+                    statusMod.setKey(Long.valueOf(key));\n+                    statusMod.setType(StatusMod.ModType.REACTIVATE);\n+                    try {\n+                        result.add(logic.status(statusMod).getKey(), BulkActionResult.Status.SUCCESS);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error performing reactivate for user {}\", key, e);\n+                        result.add(key, BulkActionResult.Status.FAILURE);\n+                    }\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n     }\n }"},{"sha":"a9e2276bf8c1d8d056adc5f7a51cf6fd32ca9855","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":25,"deletions":24,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -24,7 +24,6 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n-import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -58,6 +57,8 @@\n import org.activiti.engine.task.Task;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n@@ -67,8 +68,8 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.WorkflowFormPropertyType;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n-import org.apache.syncope.core.misc.security.UnauthorizedGroupException;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n@@ -241,25 +242,25 @@ private void saveForFormSubmit(final User user, final String password,\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+    public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n             final boolean storePassword) throws WorkflowException {\n \n         return create(userTO, disablePwdPolicyCheck, null, storePassword);\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws\n-            UnauthorizedGroupException, WorkflowException {\n+    public WorkflowResult<Pair<Long, Boolean>> create(UserTO userTO, boolean storePassword) throws\n+            UnauthorizedException, WorkflowException {\n \n         return create(userTO, false, storePassword);\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+    public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n             final Boolean enabled, final boolean storePassword) throws WorkflowException {\n \n         final Map<String, Object> variables = new HashMap<>();\n-        variables.put(WF_EXECUTOR, AuthContextUtil.getAuthenticatedUsername());\n+        variables.put(WF_EXECUTOR, AuthContextUtils.getAuthenticatedUsername());\n         variables.put(USER_TO, userTO);\n         variables.put(ENABLED, enabled);\n         variables.put(STORE_PASSWORD, storePassword);\n@@ -299,8 +300,8 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n \n         saveForFormSubmit(user, userTO.getPassword(), propByRes);\n \n-        return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new SimpleEntry<>(user.getKey(), propagateEnable), propByRes, getPerformedTasks(user));\n+        return new WorkflowResult<Pair<Long, Boolean>>(\n+                new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, getPerformedTasks(user));\n     }\n \n     private Set<String> doExecuteTask(final User user, final String task,\n@@ -309,7 +310,7 @@ private Set<String> doExecuteTask(final User user, final String task,\n         Set<String> preTasks = getPerformedTasks(user);\n \n         final Map<String, Object> variables = new HashMap<>();\n-        variables.put(WF_EXECUTOR, AuthContextUtil.getAuthenticatedUsername());\n+        variables.put(WF_EXECUTOR, AuthContextUtils.getAuthenticatedUsername());\n         variables.put(TASK, task);\n \n         // using BeanUtils to access all user's properties and trigger lazy loading - we are about to\n@@ -355,7 +356,7 @@ protected WorkflowResult<Long> doActivate(final User user, final String token)\n     }\n \n     @Override\n-    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod)\n+    protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod)\n             throws WorkflowException {\n \n         Set<String> tasks = doExecuteTask(user, \"update\", Collections.singletonMap(USER_MOD, (Object) userMod));\n@@ -370,8 +371,8 @@ protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final User user,\n \n         Boolean propagateEnable = runtimeService.getVariable(user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n-        return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                new SimpleEntry<>(userMod, propagateEnable), propByRes, tasks);\n+        return new WorkflowResult<Pair<UserMod, Boolean>>(\n+                new ImmutablePair<>(userMod, propagateEnable), propByRes, tasks);\n     }\n \n     @Override\n@@ -445,7 +446,7 @@ protected void doDelete(final User user) throws WorkflowException {\n \n     @Override\n     public WorkflowResult<Long> execute(final UserTO userTO, final String taskId)\n-            throws UnauthorizedGroupException, WorkflowException {\n+            throws UnauthorizedException, WorkflowException {\n \n         User user = userDAO.authFetch(userTO.getKey());\n \n@@ -694,7 +695,7 @@ private WorkflowFormTO getFormTO(\n     public List<WorkflowFormTO> getForms() {\n         List<WorkflowFormTO> forms = new ArrayList<>();\n \n-        final String authUser = AuthContextUtil.getAuthenticatedUsername();\n+        final String authUser = AuthContextUtils.getAuthenticatedUsername();\n         if (adminUser.equals(authUser)) {\n             forms.addAll(getForms(taskService.createTaskQuery().\n                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n@@ -782,7 +783,7 @@ public WorkflowFormTO getForm(final String workflowId)\n         return result;\n     }\n \n-    private Map.Entry<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n+    private Pair<Task, TaskFormData> checkTask(final String taskId, final String authUser) {\n         Task task;\n         try {\n             task = taskService.createTaskQuery().taskId(taskId).singleResult();\n@@ -804,16 +805,16 @@ private Map.Entry<Task, TaskFormData> checkTask(final String taskId, final Strin\n             }\n         }\n \n-        return new SimpleEntry<>(task, formData);\n+        return new ImmutablePair<>(task, formData);\n     }\n \n     @Transactional\n     @Override\n     public WorkflowFormTO claimForm(final String taskId)\n             throws WorkflowException {\n \n-        final String authUser = AuthContextUtil.getAuthenticatedUsername();\n-        Map.Entry<Task, TaskFormData> checked = checkTask(taskId, authUser);\n+        final String authUser = AuthContextUtils.getAuthenticatedUsername();\n+        Pair<Task, TaskFormData> checked = checkTask(taskId, authUser);\n \n         if (!adminUser.equals(authUser)) {\n             List<Task> tasksForUser = taskService.createTaskQuery().taskId(taskId).taskCandidateUser(authUser).list();\n@@ -839,8 +840,8 @@ public WorkflowFormTO claimForm(final String taskId)\n     public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form)\n             throws WorkflowException {\n \n-        final String authUser = AuthContextUtil.getAuthenticatedUsername();\n-        Map.Entry<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n+        final String authUser = AuthContextUtils.getAuthenticatedUsername();\n+        Pair<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n \n         if (!checked.getKey().getOwner().equals(authUser)) {\n             throw new WorkflowException(new IllegalArgumentException(\"Task \" + form.getTaskId() + \" assigned to \"\n@@ -886,8 +887,8 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form)\n             userMod = new UserMod();\n             userMod.setKey(updated.getKey());\n             userMod.setPassword(clearPassword);\n-            \n-          if (propByRes != null) {\n+\n+            if (propByRes != null) {\n                 final StatusMod st = new StatusMod();\n                 userMod.setPwdPropRequest(st);\n                 st.setOnSyncope(true);"},{"sha":"b78575cc51533f82cc0bac7b8484ba9bc8902da4","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeGroupQueryImpl.java","status":"modified","additions":18,"deletions":8,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,6 +26,9 @@\n import org.activiti.engine.identity.Group;\n import org.activiti.engine.identity.GroupQuery;\n import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n \n public class SyncopeGroupQueryImpl implements GroupQuery {\n@@ -99,7 +102,7 @@ private Group fromSyncopeGroup(final org.apache.syncope.core.persistence.api.ent\n         return new GroupEntity(group.getKey().toString());\n     }\n \n-    private void execute() {\n+    private void execute(final int page, final int itemsPerPage) {\n         if (groupId != null) {\n             org.apache.syncope.core.persistence.api.entity.group.Group syncopeGroup = groupDAO.find(groupId);\n             if (syncopeGroup == null) {\n@@ -109,25 +112,32 @@ private void execute() {\n             }\n         }\n         if (result == null) {\n-            result = new ArrayList<>();\n-            for ( org.apache.syncope.core.persistence.api.entity.group.Group syncopeGroup : groupDAO.findAll()) {\n-                result.add(fromSyncopeGroup(syncopeGroup));\n-            }\n+            result = CollectionUtils.collect(\n+                    groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, itemsPerPage),\n+                    new Transformer<org.apache.syncope.core.persistence.api.entity.group.Group, Group>() {\n+\n+                        @Override\n+                        public Group transform(final org.apache.syncope.core.persistence.api.entity.group.Group user) {\n+                            return fromSyncopeGroup(user);\n+                        }\n+\n+                    },\n+                    new ArrayList<Group>());\n         }\n     }\n \n     @Override\n     public long count() {\n         if (result == null) {\n-            execute();\n+            execute(-1, -1);\n         }\n         return result.size();\n     }\n \n     @Override\n     public Group singleResult() {\n         if (result == null) {\n-            execute();\n+            execute(-1, -1);\n         }\n         if (result.isEmpty()) {\n             throw new ActivitiException(\"Empty result\");\n@@ -139,7 +149,7 @@ public Group singleResult() {\n     @Override\n     public List<Group> list() {\n         if (result == null) {\n-            execute();\n+            execute(-1, -1);\n         }\n         return result;\n     }"},{"sha":"72be4e3dfde1109849f7f17c37a7460f9de07b1d","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserManager.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -32,7 +32,6 @@\n import org.activiti.engine.impl.persistence.entity.IdentityInfoEntity;\n import org.activiti.engine.impl.persistence.entity.UserEntity;\n import org.activiti.engine.impl.persistence.entity.UserIdentityManager;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -45,9 +44,6 @@ public class SyncopeUserManager implements UserIdentityManager, SyncopeSession {\n     @Autowired\n     private GroupDAO groupDAO;\n \n-    @Autowired\n-    private EntitlementDAO entitlementDAO;\n-\n     @Override\n     public Class<?> getType() {\n         return UserIdentityManager.class;\n@@ -65,7 +61,7 @@ public User createNewUser(final String userKey) {\n \n     @Override\n     public UserQuery createNewUserQuery() {\n-        return new SyncopeUserQueryImpl(userDAO, groupDAO, entitlementDAO);\n+        return new SyncopeUserQueryImpl(userDAO, groupDAO);\n     }\n \n     @Override"},{"sha":"2f46cbd0fc409d623c1b6e575ab2a5e1390a4685","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,8 +25,9 @@\n import org.activiti.engine.identity.User;\n import org.activiti.engine.identity.UserQuery;\n import org.activiti.engine.impl.persistence.entity.UserEntity;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n-import org.apache.syncope.core.persistence.api.dao.EntitlementDAO;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n@@ -38,18 +39,15 @@ public class SyncopeUserQueryImpl implements UserQuery {\n \n     private GroupDAO groupDAO;\n \n-    private EntitlementDAO entitlementDAO;\n-\n     private String username;\n \n     private Long memberOf;\n \n     private List<User> result;\n \n-    public SyncopeUserQueryImpl(final UserDAO userDAO, final GroupDAO groupDAO, final EntitlementDAO entitlementDAO) {\n+    public SyncopeUserQueryImpl(final UserDAO userDAO, final GroupDAO groupDAO) {\n         this.userDAO = userDAO;\n         this.groupDAO = groupDAO;\n-        this.entitlementDAO = entitlementDAO;\n     }\n \n     @Override\n@@ -165,13 +163,17 @@ private void execute(final int page, final int itemsPerPage) {\n         }\n         // THIS CAN BE *VERY* DANGEROUS\n         if (result == null) {\n-            result = new ArrayList<>();\n+            result = CollectionUtils.collect(\n+                    userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, itemsPerPage),\n+                    new Transformer<org.apache.syncope.core.persistence.api.entity.user.User, User>() {\n \n-            List<org.apache.syncope.core.persistence.api.entity.user.User> users =\n-                    userDAO.findAll(GroupEntitlementUtil.getGroupKeys(entitlementDAO.findAll()), page, itemsPerPage);\n-            for (org.apache.syncope.core.persistence.api.entity.user.User user : users) {\n-                result.add(fromSyncopeUser(user));\n-            }\n+                        @Override\n+                        public User transform(final org.apache.syncope.core.persistence.api.entity.user.User user) {\n+                            return fromSyncopeUser(user);\n+                        }\n+\n+                    },\n+                    new ArrayList<User>());\n         }\n     }\n "},{"sha":"0d7c86a11233f65a013f26acd2a9bd19ba55ca17","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import java.util.Map;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -36,7 +36,7 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword);\n+    WorkflowResult<Pair<Long, Boolean>> create(UserTO userTO, boolean storePassword);\n \n     /**\n      * Create an user, optionally disabling password policy check.\n@@ -46,7 +46,7 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(\n+    WorkflowResult<Pair<Long, Boolean>> create(\n             UserTO userTO, boolean disablePwdPolicyCheck, boolean storePassword);\n \n     /**\n@@ -58,7 +58,7 @@ WorkflowResult<Map.Entry<Long, Boolean>> create(\n      * @param storePassword whether password shall be stored into the internal storage\n      * @return user just created\n      */\n-    WorkflowResult<Map.Entry<Long, Boolean>> create(\n+    WorkflowResult<Pair<Long, Boolean>> create(\n             UserTO userTO, boolean disablePwdPolicyCheck, final Boolean enabled, boolean storePassword);\n \n     /**\n@@ -85,7 +85,7 @@ WorkflowResult<Map.Entry<Long, Boolean>> create(\n      * @param userMod modification set to be performed\n      * @return user just updated and propagations to be performed\n      */\n-    WorkflowResult<Map.Entry<UserMod, Boolean>> update(UserMod userMod);\n+    WorkflowResult<Pair<UserMod, Boolean>> update(UserMod userMod);\n \n     /**\n      * Suspend an user."},{"sha":"cc27a4bb8af5c43b02320c2bd1a9c0acd785e913","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -68,11 +68,11 @@ public WorkflowResult<Long> activate(final Long userKey, final String token)\n         return doActivate(userDAO.authFetch(userKey), token);\n     }\n \n-    protected abstract WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(User user, UserMod userMod)\n+    protected abstract WorkflowResult<Pair<UserMod, Boolean>> doUpdate(User user, UserMod userMod)\n             throws WorkflowException;\n \n     @Override\n-    public WorkflowResult<Map.Entry<UserMod, Boolean>> update(final UserMod userMod)\n+    public WorkflowResult<Pair<UserMod, Boolean>> update(final UserMod userMod)\n             throws WorkflowException {\n \n         return doUpdate(userDAO.authFetch(userMod.getKey()), userMod);"},{"sha":"7b92490dc6f068e70fdc09a4bc4766a438a977c9","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -19,12 +19,11 @@\n package org.apache.syncope.core.workflow.java;\n \n import java.io.OutputStream;\n-import java.util.AbstractMap;\n-import java.util.AbstractMap.SimpleEntry;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n@@ -49,21 +48,21 @@ public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     private ConfDAO confDAO;\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(UserTO userTO, boolean storePassword)\n+    public WorkflowResult<Pair<Long, Boolean>> create(UserTO userTO, boolean storePassword)\n             throws WorkflowException {\n \n         return create(userTO, false, true);\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+    public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n             final boolean storePassword) throws WorkflowException {\n \n         return create(userTO, disablePwdPolicyCheck, null, storePassword);\n     }\n \n     @Override\n-    public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n+    public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck,\n             final Boolean enabled, final boolean storePassword) throws WorkflowException {\n \n         User user = entityFactory.newEntity(User.class);\n@@ -93,8 +92,8 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         final PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.CREATE, user.getResourceNames());\n \n-        return new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new SimpleEntry<>(user.getKey(), propagateEnable), propByRes, \"create\");\n+        return new WorkflowResult<Pair<Long, Boolean>>(\n+                new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, \"create\");\n     }\n \n     @Override\n@@ -113,7 +112,7 @@ protected WorkflowResult<Long> doActivate(final User user, final String token)\n     }\n \n     @Override\n-    protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod)\n+    protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod)\n             throws WorkflowException {\n \n         // update password internally only if required\n@@ -127,8 +126,8 @@ protected WorkflowResult<Map.Entry<UserMod, Boolean>> doUpdate(final User user,\n         User updated = userDAO.save(user);\n \n         userMod.setKey(updated.getKey());\n-        return new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                new AbstractMap.SimpleEntry<>(userMod, !user.isSuspended()), propByRes, \"update\");\n+        return new WorkflowResult<Pair<UserMod, Boolean>>(\n+                new ImmutablePair<>(userMod, !user.isSuspended()), propByRes, \"update\");\n     }\n \n     @Override"},{"sha":"8134eb05bd2af5b412e0bebce71295233892c514","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -75,7 +75,6 @@ public void load() {\n             if (!loaded) {\n                 loadRoutes(userRoutesLoader.getResource(), SubjectType.USER);\n                 loadRoutes(groupRoutesLoader.getResource(), SubjectType.GROUP);\n-                loadEntitlements();\n                 loaded = true;\n             }\n         }\n@@ -137,31 +136,4 @@ private void loadRoutes(final Resource resource, final SubjectType subjectType)\n             }\n         }\n     }\n-\n-    private void loadEntitlements() {\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n-        boolean existingData;\n-        try {\n-            existingData = jdbcTemplate.queryForObject(\n-                    \"SELECT COUNT(0) FROM Entitlement WHERE NAME LIKE 'ROUTE_%'\", Integer.class) > 0;\n-        } catch (DataAccessException e) {\n-            LOG.error(\"Could not access to Entitlement table\", e);\n-            existingData = true;\n-        }\n-\n-        if (existingData) {\n-            LOG.info(\"Camel route entitlements found in the database, leaving untouched\");\n-        } else {\n-            LOG.info(\"No Camel route entitlements found in the database, loading\");\n-\n-            try {\n-                jdbcTemplate.update(\"INSERT INTO Entitlement(NAME) VALUES('ROUTE_READ')\");\n-                jdbcTemplate.update(\"INSERT INTO Entitlement(NAME) VALUES('ROUTE_LIST')\");\n-                jdbcTemplate.update(\"INSERT INTO Entitlement(NAME) VALUES('ROUTE_UPDATE')\");\n-            } catch (Exception e) {\n-                LOG.error(\"While adding additional entitlements\", e);\n-            }\n-        }\n-    }\n }"},{"sha":"13a69a1f341b25da960d7e18a6cda5e7f197fbc9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,6 +26,7 @@\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -36,13 +37,13 @@\n         extends AbstractCamelProvisioningManager implements GroupProvisioningManager {\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO subject) {\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO subject) {\n         return create(subject, Collections.<String>emptySet());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Set<String> excludedResources) {\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Set<String> excludedResources) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n@@ -56,12 +57,12 @@ public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO groupTO, fi\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Map<Long, String> groupOwnerMap,\n+    public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Map<Long, String> groupOwnerMap,\n             final Set<String> excludedResources) throws PropagationException {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:createGroupInSyncPort\");\n@@ -78,17 +79,17 @@ public Map.Entry<Long, List<PropagationStatus>> create(final GroupTO groupTO, fi\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final GroupMod subjectMod) {\n+    public Pair<Long, List<PropagationStatus>> update(final GroupMod subjectMod) {\n         return update(subjectMod, Collections.<String>emptySet());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> update(\n+    public Pair<Long, List<PropagationStatus>> update(\n             final GroupMod subjectMod, final Set<String> excludedResources) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateGroupPort\");\n@@ -104,7 +105,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override"},{"sha":"f8b076a23ac3b3fc46f4e3c6c4cfee926e35f5cc","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.camel;\n \n-import java.util.AbstractMap;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -28,6 +27,8 @@\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -45,18 +46,18 @@ public class CamelUserProvisioningManager extends AbstractCamelProvisioningManag\n     private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO) {\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO) {\n         return create(userTO, true, false, null, Collections.<String>emptySet());\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, boolean storePassword) {\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, boolean storePassword) {\n         return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n+    public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n             boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:createPort\");\n@@ -75,17 +76,17 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, fina\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod) {\n+    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n         return update(userMod, false);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships) {\n+    public Pair<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n \n         Map<String, Object> props = new HashMap<>();\n@@ -99,7 +100,7 @@ public Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n@@ -144,7 +145,7 @@ public Long unlink(final UserMod userMod) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n@@ -166,12 +167,12 @@ public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n@@ -192,12 +193,12 @@ public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, fina\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n@@ -218,7 +219,7 @@ public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final S\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override\n@@ -258,7 +259,7 @@ public List<PropagationStatus> deprovision(final Long user, final Collection<Str\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Map.Entry<Long, List<PropagationStatus>> update(\n+    public Pair<Long, List<PropagationStatus>> update(\n             final UserMod userMod, final Long key, final ProvisioningResult result,\n             final Boolean enabled, final Set<String> excludedResources) {\n \n@@ -281,14 +282,14 @@ public Map.Entry<Long, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n-            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                    new AbstractMap.SimpleEntry<>(userMod, false), new PropagationByResource(),\n+            WorkflowResult<Pair<UserMod, Boolean>> updated = new WorkflowResult<Pair<UserMod, Boolean>>(\n+                    new ImmutablePair<>(userMod, false), new PropagationByResource(),\n                     new HashSet<String>());\n             sendMessage(\"direct:userInSync\", updated, props);\n             exchange = pollingConsumer.receive();\n         }\n \n-        return exchange.getIn().getBody(Map.Entry.class);\n+        return exchange.getIn().getBody(Pair.class);\n     }\n \n     @Override"},{"sha":"a22f2ebcb8f4a658cdda8dc271c3673e306656d2","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateInSyncProcessor.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,18 +18,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-import java.util.AbstractMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -52,21 +50,18 @@ public void process(final Exchange exchange) {\n \n         GroupTO actual = exchange.getProperty(\"subject\", GroupTO.class);\n         Map<Long, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n-        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n         AttrTO groupOwner = actual.getPlainAttrMap().get(StringUtils.EMPTY);\n         if (groupOwner != null) {\n             groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n         }\n \n-        AuthContextUtil.extendAuthContext(\n-                created.getResult(), GroupEntitlementUtil.getEntitlementNameFromGroupKey(created.getResult()));\n-\n-        List<PropagationTask> tasks = propagationManager.getGroupCreateTaskIds(\n-                created, actual.getVirAttrs(), excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n+                created, actual.getVirAttrs(), excludedResources);\n \n         taskExecutor.execute(tasks);\n \n-        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(created.getResult(), null));\n+        exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), null));\n     }\n }"},{"sha":"6805a5e26b19b80192080ba11a2d78822df4d169","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateProcessor.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,15 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap;\n import java.util.List;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.core.misc.security.AuthContextUtil;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.GroupEntitlementUtil;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n@@ -56,10 +54,8 @@ public void process(final Exchange exchange) {\n         GroupTO subject = exchange.getProperty(\"subject\", GroupTO.class);\n         Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        AuthContextUtil.extendAuthContext(created.getResult(), GroupEntitlementUtil.getEntitlementNameFromGroupKey(created.getResult()));\n-\n         List<PropagationTask> tasks =\n-                propagationManager.getGroupCreateTaskIds(created, subject.getVirAttrs(), excludedResource);\n+                propagationManager.getGroupCreateTasks(created, subject.getVirAttrs(), excludedResource);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -69,7 +65,7 @@ public void process(final Exchange exchange) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(\n+        exchange.getOut().setBody(new ImmutablePair<>(\n                 created.getResult(), propagationReporter.getStatuses()));\n     }\n "},{"sha":"0aca43b33da2871de9219dd9e61f9b41ef9c2d41","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeleteProcessor.java","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -59,35 +59,24 @@ public class GroupDeleteProcessor implements Processor {\n \n     @Override\n     public void process(final Exchange exchange) throws Exception {\n-        final List<Group> toBeDeprovisioned = new ArrayList<>();\n-\n         Long subjectKey = exchange.getIn().getBody(Long.class);\n-        final Group syncopeGroup = groupDAO.find(subjectKey);\n-\n-        if (syncopeGroup != null) {\n-            toBeDeprovisioned.add(syncopeGroup);\n-\n-            final List<Group> descendants = groupDAO.findDescendants(toBeDeprovisioned.get(0));\n-            if (descendants != null) {\n-                toBeDeprovisioned.addAll(descendants);\n-            }\n-        }\n+        Group group = groupDAO.find(subjectKey);\n \n         final List<PropagationTask> tasks = new ArrayList<>();\n \n-        for (Group group : toBeDeprovisioned) {\n+        if (group != null) {\n             // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n             // because of the reason being deleted (see SYNCOPE-357)\n             for (Map.Entry<Long, PropagationByResource> entry\n                     : groupDAO.findUsersWithIndirectResources(group.getKey()).entrySet()) {\n \n                 WorkflowResult<Long> wfResult =\n                         new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult));\n             }\n \n             // Generate propagation tasks for deleting this group from resources\n-            tasks.addAll(propagationManager.getGroupDeleteTaskIds(group.getKey()));\n+            tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey()));\n         }\n \n         PropagationReporter propagationReporter ="},{"sha":"f27a113d2251d86a15ea8157eb087529e407cc92","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeprovisionProcessor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -58,11 +59,10 @@ public void process(final Exchange exchange) {\n \n         Group group = groupDAO.authFetch(groupKey);\n \n-        Set<String> noPropResourceName = group.getResourceNames();\n-        noPropResourceName.removeAll(resources);\n+        Collection<String> noPropResourceNames = CollectionUtils.removeAll(group.getResourceNames(), resources);\n \n         List<PropagationTask> tasks =\n-                propagationManager.getGroupDeleteTaskIds(groupKey, new HashSet<>(resources), noPropResourceName);\n+                propagationManager.getGroupDeleteTasks(groupKey, new HashSet<>(resources), noPropResourceNames);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"fc18e83ae8ba9bb5443e6394344e223612e60a95","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap;\n import java.util.List;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -52,10 +52,10 @@ public class GroupUpdateProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n         GroupMod subjectMod = exchange.getProperty(\"subjectMod\", GroupMod.class);\n-        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTaskIds(updated,\n-                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate(), excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n+                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate(), excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n@@ -65,7 +65,7 @@ public void process(final Exchange exchange) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(updated.getResult(), propagationReporter.getStatuses()));\n+        exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propagationReporter.getStatuses()));\n     }\n \n }"},{"sha":"903f882d79b8eea1241ee087530c19279c1d1efc","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -48,7 +48,7 @@ public class UserConfirmPwdResetProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         User user = exchange.getProperty(\"user\", User.class);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, null, null);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(user, null, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"9f6804e89ffc71463845dd0cdec488cb26114432","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserCreateProcessor.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -53,12 +53,18 @@ public class UserCreateProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n \n-            WorkflowResult<Map.Entry<Long, Boolean>> created = (WorkflowResult) exchange.getIn().getBody();\n+            WorkflowResult<Pair<Long, Boolean>> created = (WorkflowResult) exchange.getIn().getBody();\n             UserTO actual = exchange.getProperty(\"actual\", UserTO.class);\n-            Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+            Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-            List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n-                    created, actual.getPassword(), actual.getVirAttrs(), excludedResource, actual.getMemberships());\n+            List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n+                    created.getResult().getKey(),\n+                    created.getResult().getValue(),\n+                    created.getPropByRes(),\n+                    actual.getPassword(),\n+                    actual.getVirAttrs(),\n+                    actual.getMemberships(),\n+                    excludedResources);\n             PropagationReporter propagationReporter =\n                     ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n             try {\n@@ -69,7 +75,7 @@ public void process(final Exchange exchange) {\n             }\n \n             exchange.getOut().setBody(\n-                    new AbstractMap.SimpleEntry<>(created.getResult().getKey(), propagationReporter.getStatuses()));\n+                    new ImmutablePair<>(created.getResult().getKey(), propagationReporter.getStatuses()));\n         }\n     }\n "},{"sha":"8d94d76f730c86134160e012a6cd46e212d16d21","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeleteProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -55,7 +55,7 @@ public void process(final Exchange exchange) throws Exception {\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userKey, excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(userKey, excludedResource);\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);"},{"sha":"e59bec60a3fa1417a5d8670ca029cc8de424803a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,11 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -56,14 +57,13 @@ public void process(final Exchange exchange) {\n         @SuppressWarnings(\"unchecked\")\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n \n-        final User user = userDAO.authFetch(userKey);\n+        User user = userDAO.authFetch(userKey);\n \n-        final Set<String> noPropResourceName = user.getResourceNames();\n-        noPropResourceName.removeAll(resources);\n+        Collection<String> noPropResourceNames = CollectionUtils.removeAll(user.getResourceNames(), resources);\n \n-        final List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<>(resources), noPropResourceName);\n-        final PropagationReporter propagationReporter =\n+        List<PropagationTask> tasks =\n+                propagationManager.getUserDeleteTasks(userKey, new HashSet<>(resources), noPropResourceNames);\n+        PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);"},{"sha":"be3e6ac0126f8c8051781e5a087ac17d641073ce","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserInnerSuspendProcessor.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInnerSuspendProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInnerSuspendProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInnerSuspendProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap.SimpleEntry;\n import java.util.List;\n-import java.util.Map;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -40,19 +40,19 @@ public class UserInnerSuspendProcessor implements Processor {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n+        @SuppressWarnings(\"unchecked\")\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n         Boolean propagate = exchange.getProperty(\"propagate\", Boolean.class);\n \n         if (propagate) {\n             UserMod userMod = new UserMod();\n             userMod.setKey(updated.getResult());\n \n-            final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n-                    new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n-                            new SimpleEntry<>(userMod, Boolean.FALSE),\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                    new WorkflowResult<Pair<UserMod, Boolean>>(\n+                            new ImmutablePair<>(userMod, Boolean.FALSE),\n                             updated.getPropByRes(), updated.getPerformedTasks()));\n             taskExecutor.execute(tasks);\n         }"},{"sha":"cf9d709fd4a91b6c4fcc908e1b9c509494f61790","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserSetStatusInSyncProcessor.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,16 +26,12 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class UserSetStatusInSyncProcessor implements Processor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserSetStatusInSyncProcessor.class);\n-\n     @Autowired\n     protected UserDAO userDAO;\n "},{"sha":"0df97b8c9f06231d4adca77e703e966d5db77b01","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap;\n-import java.util.HashSet;\n+import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -57,10 +57,10 @@ public void process(final Exchange exchange) {\n         User user = exchange.getProperty(\"user\", User.class);\n         StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n \n-        Set<String> resourcesToBeExcluded = new HashSet<>(user.getResourceNames());\n-        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n+        Collection<String> resourcesToBeExcluded =\n+                CollectionUtils.removeAll(user.getResourceNames(), statusMod.getResourceNames());\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n@@ -71,6 +71,6 @@ public void process(final Exchange exchange) {\n             propReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(updated.getResult(), propReporter.getStatuses()));\n+        exchange.getOut().setBody(new ImmutablePair<>(updated.getResult(), propReporter.getStatuses()));\n     }\n }"},{"sha":"829999f10e227504214ff100bab802d8132cc6e9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateInSyncProcessor.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -51,14 +51,14 @@ public class UserUpdateInSyncProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n-        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        WorkflowResult<Pair<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated, updated.getResult().getKey().\n-                getPassword() != null, excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated, updated.getResult().getKey().\n+                getPassword() != null, excludedResources);\n \n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n@@ -67,7 +67,7 @@ public void process(final Exchange exchange) {\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(\n+        exchange.getOut().setBody(new ImmutablePair<>(\n                 updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n     }\n }"},{"sha":"84f8a2d587add6cbb9c536e171091c6f1a0fcb0b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.AbstractMap;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.MembershipMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -57,11 +57,11 @@ public class UserUpdateProcessor implements Processor {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void process(final Exchange exchange) {\n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        WorkflowResult<Pair<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n         UserMod actual = exchange.getProperty(\"actual\", UserMod.class);\n         boolean removeMemberships = exchange.getProperty(\"removeMemberships\", boolean.class);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             final PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n@@ -84,7 +84,7 @@ public void process(final Exchange exchange) {\n                 }\n             }\n             tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships\n-                    ? propagationManager.getUserUpdateTaskIds(updated, false, null)\n+                    ? propagationManager.getUserUpdateTasks(updated, false, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n \n@@ -99,7 +99,7 @@ public void process(final Exchange exchange) {\n             }\n         }\n \n-        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(\n+        exchange.getOut().setBody(new ImmutablePair<>(\n                 updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n     }\n }"},{"sha":"32fa5af0498dc45395e2d45ff4fa189877905c5c","filename":"ext/camel/provisioning-camel/src/main/resources/provisioning.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -17,3 +17,4 @@\n camel.directory=${conf.directory}\n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelGroupProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache"},{"sha":"9cdfa5dd99f6816c514684497028ed741b871826","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSyncActions.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.syncope.common.lib.mod.AbstractSubjectMod;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n@@ -42,8 +43,9 @@ public <T extends AbstractSubjectTO> SyncDelta beforeProvision(\n \n         AttrTO attrTO = null;\n         for (int i = 0; i < subject.getPlainAttrs().size(); i++) {\n-            if (\"fullname\".equals(subject.getPlainAttrs().get(i).getSchema())) {\n-                attrTO = subject.getPlainAttrs().get(i);\n+            AttrTO _attrTO = CollectionUtils.get(subject.getPlainAttrs(), i);\n+            if (\"fullname\".equals(_attrTO.getSchema())) {\n+                attrTO = _attrTO;\n             }\n         }\n         if (attrTO == null) {"},{"sha":"32fa5af0498dc45395e2d45ff4fa189877905c5c","filename":"fit/core-reference/src/main/resources/all/provisioning.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -17,3 +17,4 @@\n camel.directory=${conf.directory}\n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelGroupProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache"},{"sha":"46d15f5130b6e2b08d4ba94c4e6633161e762e58","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -116,6 +116,9 @@ under the License.\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apache.syncope.core.logic\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>"},{"sha":"9c0abffedcad6f4ab9433470d2dc115c1127c910","filename":"fit/core-reference/src/main/resources/provisioning.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -16,3 +16,4 @@\n # under the License.\n userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache"},{"sha":"07882b440ad7be3d28f1099741d80d83ab43dca4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -51,7 +52,6 @@\n import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n-import org.apache.syncope.common.rest.api.service.EntitlementService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n@@ -162,8 +162,6 @@ public abstract class AbstractITCase {\n \n     protected static ResourceService resourceService;\n \n-    protected static EntitlementService entitlementService;\n-\n     protected static ConfigurationService configurationService;\n \n     protected static ConnectorService connectorService;\n@@ -227,7 +225,6 @@ public static void restSetup() {\n         userWorkflowService = adminClient.getService(UserWorkflowService.class);\n         groupService = adminClient.getService(GroupService.class);\n         resourceService = adminClient.getService(ResourceService.class);\n-        entitlementService = adminClient.getService(EntitlementService.class);\n         configurationService = adminClient.getService(ConfigurationService.class);\n         connectorService = adminClient.getService(ConnectorService.class);\n         loggerService = adminClient.getService(LoggerService.class);\n@@ -309,8 +306,19 @@ protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kin\n         return (T) getObject(response.getLocation(), SchemaService.class, schemaTO.getClass());\n     }\n \n-    protected GroupTO createGroup(final GroupTO newGroupTO) {\n-        Response response = groupService.create(newGroupTO);\n+    protected RoleTO createRole(final RoleTO roleTO) {\n+        Response response = roleService.create(roleTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+    }\n+\n+    protected GroupTO createGroup(final GroupTO groupTO) {\n+        Response response = groupService.create(groupTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {"},{"sha":"79503a398be23391794a31593948bf90f47b63a9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":100,"deletions":166,"changes":266,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -25,37 +25,35 @@\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n-import java.util.HashSet;\n-import java.util.List;\n+import java.util.Collections;\n import java.util.Map;\n import java.util.Set;\n \n-import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.common.lib.mod.UserMod;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.wrap.EntitlementTO;\n import org.apache.syncope.common.lib.wrap.ResourceName;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n-import org.apache.syncope.common.rest.api.service.EntitlementService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n-import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.junit.Assume;\n@@ -67,46 +65,61 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class AuthenticationITCase extends AbstractITCase {\n \n-    private int getFailedLogins(UserService testUserService, long userId) {\n-        UserTO readUserTO = testUserService.read(userId);\n+    private int getFailedLogins(final UserService userService, final long userId) {\n+        UserTO readUserTO = userService.read(userId);\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         return readUserTO.getFailedLogins();\n     }\n \n-    private void assertReadFails(UserService userService, long id) {\n+    private void assertReadFails(final SyncopeClient client) {\n         try {\n-            userService.read(id);\n+            client.self();\n             fail(\"access should not work\");\n         } catch (Exception e) {\n             assertNotNull(e);\n         }\n     }\n \n     @Test\n-    public void testAdminEntitlements() {\n-        // 1. as anonymous, read all available entitlements\n-        List<EntitlementTO> allEntitlements = entitlementService.getAllEntitlements();\n-        assertNotNull(allEntitlements);\n-        assertFalse(allEntitlements.isEmpty());\n-\n-        // 2. as admin, read own entitlements\n-        List<EntitlementTO> adminEntitlements = entitlementService.getOwnEntitlements();\n+    public void testReadEntitlements() {\n+        // 1. as anonymous (not allowed)\n+        try {\n+            clientFactory.createAnonymous().self();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n \n-        assertEquals(new HashSet<String>(CollectionWrapper.unwrap(allEntitlements)),\n-                new HashSet<String>(CollectionWrapper.unwrap(adminEntitlements)));\n+        // 2. as authenticated anonymous (used by admin console)\n+        Pair<Map<Entitlement, Set<String>>, UserTO> self = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).self();\n+        assertEquals(1, self.getKey().size());\n+        assertTrue(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n+        assertEquals(ANONYMOUS_UNAME, self.getValue().getUsername());\n+\n+        // 3. as admin\n+        self = adminClient.self();\n+        assertEquals(Entitlement.values().length - 1, self.getKey().size());\n+        assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n+        assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n+\n+        // 4. as user\n+        self = clientFactory.create(\"verdi\", ADMIN_PWD).self();\n+        assertFalse(self.getKey().isEmpty());\n+        assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n+        assertEquals(\"verdi\", self.getValue().getUsername());\n     }\n \n     @Test\n     public void testUserSchemaAuthorization() {\n-        // 0. create a group that can only read schemas\n-        GroupTO authGroupTO = new GroupTO();\n-        authGroupTO.setName(\"authGroup\" + getUUIDString());\n-        authGroupTO.setParent(8L);\n-        authGroupTO.getEntitlements().add(\"SCHEMA_READ\");\n+        // 0. create a role that can only read schemas\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"authRole\" + getUUIDString());\n+        roleTO.getEntitlements().add(Entitlement.SCHEMA_READ);\n+        roleTO.getRealms().add(\"/odd\");\n \n-        authGroupTO = createGroup(authGroupTO);\n-        assertNotNull(authGroupTO);\n+        roleTO = createRole(roleTO);\n+        assertNotNull(roleTO);\n \n         String schemaName = \"authTestSchema\" + getUUIDString();\n \n@@ -119,16 +132,9 @@ public void testUserSchemaAuthorization() {\n         PlainSchemaTO newPlainSchemaTO = createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n         assertEquals(schemaTO, newPlainSchemaTO);\n \n-        // 2. create an user with the group created above (as admin)\n+        // 2. create an user with the role created above (as admin)\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"auth@test.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(authGroupTO.getKey());\n-        AttrTO testAttrTO = new AttrTO();\n-        testAttrTO.setSchema(\"testAttribute\");\n-        testAttrTO.getValues().add(\"a value\");\n-        membershipTO.getPlainAttrs().add(testAttrTO);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getRoles().add(roleTO.getKey());\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -138,19 +144,15 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        SchemaService schemaService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n-                SchemaService.class);\n-\n+        SchemaService schemaService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(SchemaService.class);\n         schemaTO = schemaService2.read(AttributableType.USER, SchemaType.PLAIN, schemaName);\n         assertNotNull(schemaTO);\n \n         // 5. update the schema create above (as user) - failure\n         try {\n             schemaService2.update(AttributableType.GROUP, SchemaType.PLAIN, schemaName, schemaTO);\n-            fail(\"Schemaupdate as user schould not work\");\n-        } catch (SyncopeClientException e) {\n-            assertNotNull(e);\n-            assertEquals(Response.Status.UNAUTHORIZED, e.getType().getResponseStatus());\n+            fail(\"Schemaupdate as user should not work\");\n         } catch (AccessControlException e) {\n             // CXF Service will throw this exception\n             assertNotNull(e);\n@@ -162,14 +164,7 @@ public void testUserSchemaAuthorization() {\n     @Test\n     public void testUserRead() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testuserread@test.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7L);\n-        AttrTO testAttrTO = new AttrTO();\n-        testAttrTO.setSchema(\"testAttribute\");\n-        testAttrTO.getValues().add(\"a value\");\n-        membershipTO.getPlainAttrs().add(testAttrTO);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getRoles().add(2L);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -190,20 +185,13 @@ public void testUserRead() {\n             exception = e;\n         }\n         assertNotNull(exception);\n-        assertEquals(ClientExceptionType.UnauthorizedGroup, exception.getType());\n+        assertEquals(ClientExceptionType.Unauthorized, exception.getType());\n     }\n \n     @Test\n     public void testUserSearch() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"testusersearch@test.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7L);\n-        AttrTO testAttrTO = new AttrTO();\n-        testAttrTO.setSchema(\"testAttribute\");\n-        testAttrTO.getValues().add(\"a value\");\n-        membershipTO.getPlainAttrs().add(testAttrTO);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getRoles().add(2L);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -212,93 +200,80 @@ public void testUserSearch() {\n                 getService(UserService.class);\n \n         PagedResult<UserTO> matchedUsers = userService2.search(\n+                Collections.singletonList(\"/\"),\n                 SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.getResult().isEmpty());\n-        Set<Long> userIds = new HashSet<Long>(matchedUsers.getResult().size());\n-        for (UserTO user : matchedUsers.getResult()) {\n-            userIds.add(user.getKey());\n-        }\n-        assertTrue(userIds.contains(1L));\n+        assertTrue(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 1;\n+            }\n+        }));\n \n         UserService userService3 = clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n \n         matchedUsers = userService3.search(\n+                Collections.singletonList(\"/even/two\"),\n                 SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"loginDate\").query());\n         assertNotNull(matchedUsers);\n+        assertFalse(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n \n-        userIds = new HashSet<>(matchedUsers.getResult().size());\n-\n-        for (UserTO user : matchedUsers.getResult()) {\n-            userIds.add(user.getKey());\n-        }\n-        assertFalse(userIds.contains(1L));\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 1;\n+            }\n+        }));\n     }\n \n     @Test\n     public void checkFailedLogins() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkFailedLogin@syncope.apache.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7L);\n-        AttrTO testAttrTO = new AttrTO();\n-        testAttrTO.setSchema(\"testAttribute\");\n-        testAttrTO.getValues().add(\"a value\");\n-        membershipTO.getPlainAttrs().add(testAttrTO);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getRoles().add(2L);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n         long userId = userTO.getKey();\n \n-        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n-                UserService.class);\n+        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = clientFactory.create(userTO.getUsername(), \"wrongpwd1\").getService(\n-                UserService.class);\n-        assertReadFails(userService3, userId);\n-        assertReadFails(userService3, userId);\n+        SyncopeClient badPwdClient = clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+        assertReadFails(badPwdClient);\n+        assertReadFails(badPwdClient);\n \n         assertEquals(2, getFailedLogins(userService, userId));\n \n-        UserService userService4 = clientFactory.create(userTO.getUsername(), \"password123\").getService(\n-                UserService.class);\n+        UserService userService4 = clientFactory.create(userTO.getUsername(), \"password123\").\n+                getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService4, userId));\n     }\n \n     @Test\n     public void checkUserSuspension() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkSuspension@syncope.apache.org\");\n-\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7L);\n-        AttrTO testAttrTO = new AttrTO();\n-        testAttrTO.setSchema(\"testAttribute\");\n-        testAttrTO.getValues().add(\"a value\");\n-        membershipTO.getPlainAttrs().add(testAttrTO);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.setRealm(\"/odd\");\n+        userTO.getRoles().add(2L);\n \n         userTO = createUser(userTO);\n         long userId = userTO.getKey();\n         assertNotNull(userTO);\n \n-        UserService userService2 = clientFactory.create(userTO.getUsername(), \"password123\").\n-                getService(UserService.class);\n-        assertEquals(0, getFailedLogins(userService2, userId));\n+        assertEquals(0, getFailedLogins(userService, userId));\n \n         // authentications failed ...\n-        UserService userService3 = clientFactory.create(userTO.getUsername(), \"wrongpwd1\").\n-                getService(UserService.class);\n-        assertReadFails(userService3, userId);\n-        assertReadFails(userService3, userId);\n-        assertReadFails(userService3, userId);\n+        SyncopeClient badPwdClient = clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+        assertReadFails(badPwdClient);\n+        assertReadFails(badPwdClient);\n+        assertReadFails(badPwdClient);\n \n         assertEquals(3, getFailedLogins(userService, userId));\n \n         // last authentication before suspension\n-        assertReadFails(userService3, userId);\n+        assertReadFails(badPwdClient);\n \n         userTO = userService.read(userTO.getKey());\n         assertNotNull(userTO);\n@@ -307,61 +282,16 @@ public void checkUserSuspension() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // Access with correct credentials should fail as user is suspended\n-        userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n-        assertReadFails(userService2, userId);\n+        SyncopeClient goodPwdClient = clientFactory.create(userTO.getUsername(), \"password123\");\n+        assertReadFails(goodPwdClient);\n \n         StatusMod reactivate = new StatusMod();\n         reactivate.setType(StatusMod.ModType.REACTIVATE);\n         userTO = userService.status(userTO.getKey(), reactivate).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        userService2 = clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n-        assertEquals(0, getFailedLogins(userService2, userId));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE48() {\n-        // Parent group, able to create users with group 1\n-        GroupTO parentGroup = new GroupTO();\n-        parentGroup.setName(\"parentAdminGroup\" + getUUIDString());\n-        parentGroup.getEntitlements().add(\"USER_CREATE\");\n-        parentGroup.getEntitlements().add(\"GROUP_1\");\n-        parentGroup.setParent(1L);\n-        parentGroup = createGroup(parentGroup);\n-        assertNotNull(parentGroup);\n-\n-        // Child group, with no entitlements\n-        GroupTO childGroup = new GroupTO();\n-        childGroup.setName(\"childAdminGroup\");\n-        childGroup.setParent(parentGroup.getKey());\n-\n-        childGroup = createGroup(childGroup);\n-        assertNotNull(childGroup);\n-\n-        // User with child group, created by admin\n-        UserTO group1Admin = UserITCase.getUniqueSampleTO(\"syncope48admin@apache.org\");\n-        group1Admin.setPassword(\"password\");\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(childGroup.getKey());\n-        group1Admin.getMemberships().add(membershipTO);\n-\n-        group1Admin = createUser(group1Admin);\n-        assertNotNull(group1Admin);\n-\n-        UserService userService2 = clientFactory.create(group1Admin.getUsername(), \"password\").getService(\n-                UserService.class);\n-\n-        // User with group 1, created by user with child group created above\n-        UserTO group1User = UserITCase.getUniqueSampleTO(\"syncope48user@apache.org\");\n-        membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(1L);\n-        group1User.getMemberships().add(membershipTO);\n-\n-        Response response = userService2.create(group1User, true);\n-        assertNotNull(response);\n-        group1User = response.readEntity(UserTO.class);\n-        assertNotNull(group1User);\n+        assertEquals(0, goodPwdClient.self().getValue().getFailedLogins(), 0);\n     }\n \n     @Test\n@@ -371,18 +301,16 @@ public void issueSYNCOPE434() {\n         // 1. create user with group 9 (users with group 9 are defined in workflow as subject to approval)\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(9L);\n+        membershipTO.setGroupKey(9L);\n         userTO.getMemberships().add(membershipTO);\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n         assertEquals(\"createApproval\", userTO.getStatus());\n \n         // 2. try to authenticate: fail\n-        EntitlementService myEntitlementService = clientFactory.create(userTO.getUsername(), \"password123\").\n-                getService(EntitlementService.class);\n         try {\n-            myEntitlementService.getOwnEntitlements();\n+            clientFactory.create(userTO.getUsername(), \"password123\").self();\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n@@ -400,14 +328,19 @@ public void issueSYNCOPE434() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         // 4. try to authenticate again: success\n-        assertNotNull(myEntitlementService.getOwnEntitlements());\n+        Pair<Map<Entitlement, Set<String>>, UserTO> self =\n+                clientFactory.create(userTO.getUsername(), \"password123\").self();\n+        assertNotNull(self);\n+        assertNotNull(self.getKey());\n+        assertNotNull(self.getValue());\n     }\n \n     @Test\n     public void issueSYNCOPE164() throws Exception {\n         // 1. create user with db resource\n         UserTO user = UserITCase.getUniqueSampleTO(\"syncope164@syncope.apache.org\");\n-        user.setPassword(\"password1\");\n+        user.setRealm(\"/even/two\");\n+        user.setPassword(\"password123\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);\n         user = createUser(user);\n         assertNotNull(user);\n@@ -421,20 +354,21 @@ public void issueSYNCOPE164() throws Exception {\n         // 3. change password on Syncope\n         UserMod userMod = new UserMod();\n         userMod.setKey(user.getKey());\n-        userMod.setPassword(\"password2\");\n+        userMod.setPassword(\"password234\");\n         user = updateUser(userMod);\n         assertNotNull(user);\n \n         // 4. check that the db resource has still the initial password value\n         final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         String value = jdbcTemplate.queryForObject(\n                 \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n-        assertEquals(Encryptor.getInstance().encode(\"password1\", CipherAlgorithm.SHA1), value.toUpperCase());\n+        assertEquals(Encryptor.getInstance().encode(\"password123\", CipherAlgorithm.SHA1), value.toUpperCase());\n \n         // 5. successfully authenticate with old (on db resource) and new (on internal storage) password values\n-        user = clientFactory.create(user.getUsername(), \"password1\").getService(UserSelfService.class).read();\n-        assertNotNull(user);\n-        user = clientFactory.create(user.getUsername(), \"password2\").getService(UserSelfService.class).read();\n-        assertNotNull(user);\n+        Pair<Map<Entitlement, Set<String>>, UserTO> self =\n+                clientFactory.create(user.getUsername(), \"password123\").self();\n+        assertNotNull(self);\n+        self = clientFactory.create(user.getUsername(), \"password234\").self();\n+        assertNotNull(self);\n     }\n }"},{"sha":"4681834e37e0afe81ff16e56f53cdd5b1fb05fa8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CamelRouteITCase.java","status":"modified","additions":32,"deletions":26,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCamelRouteITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -22,6 +22,8 @@\n import static org.junit.Assert.assertNotNull;\n \n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.CamelRouteTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -61,11 +63,11 @@ public void groupRoutes() {\n         }\n     }\n \n-    private CamelRouteTO doUpdate(final String key, String content) {\n+    private CamelRouteTO doUpdate(final String key, final String content) {\n         CamelRouteTO route = camelRouteService.read(key);\n         route.setContent(content);\n         camelRouteService.update(route.getKey(), route);\n-        //getting new route definition\n+        // getting new route definition\n         return camelRouteService.read(key);\n     }\n \n@@ -108,53 +110,57 @@ public void scriptingUpdate() {\n         Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n \n         CamelRouteTO oldRoute = camelRouteService.read(\"createUser\");\n-        //updating route content including new attribute management\n-        String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n-                + \"  <from uri=\\\"direct:createUser\\\"/>\\n\"\n-                + \"  <setProperty propertyName=\\\"actual\\\">\\n\"\n-                + \"    <simple>${body}</simple>\\n\"\n-                + \"  </setProperty>\\n\"\n-                + \"  <setBody>\\n\"\n-                + \"   <groovy>\\n\"\n-                + \"       request.body.getPlainAttrs().get(3).getValues().set(0,\\\"true\\\")\\n\"\n+        // updating route content including new attribute management\n+\n+        String routeContent = \"\"\n+                + \"  <route id=\\\"createUser\\\">\\n\"\n+                + \"    <from uri=\\\"direct:createUser\\\"/>\\n\"\n+                + \"    <setProperty propertyName=\\\"actual\\\">\\n\"\n+                + \"      <simple>${body}</simple>\\n\"\n+                + \"    </setProperty>\\n\"\n+                + \"    <setBody>\\n\"\n+                + \"     <groovy>\\n\"\n+                + \"       org.apache.commons.collections4.\"\n+                + \"CollectionUtils.get(request.body.getPlainAttrs(), 3).getValues().set(0,\\\"true\\\")\\n\"\n                 + \"       return request.body\\n\"\n-                + \"   </groovy>\\n\"\n-                + \"  </setBody>\\n\"\n-                + \"  <doTry>\\n\"\n+                + \"     </groovy>\\n\"\n+                + \"    </setBody>\\n\"\n+                + \"    <doTry>\\n\"\n                 + \"      <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n-                + \"                            ${property.enabled},${property.storePassword})\\\"/>\\n\"\n-                + \"      <process ref=\\\"userCreateProcessor\\\" />\\n\"\n+                + \"                                     ${property.enabled},${property.storePassword})\\\"/>\\n\"\n+                + \"      <process ref=\\\"userCreateProcessor\\\"/>\\n\"\n                 + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"      <doCatch>        \\n\"\n-                + \"      <exception>java.lang.RuntimeException</exception>\\n\"\n-                + \"          <handled>\\n\"\n-                + \"           <constant>false</constant>\\n\"\n-                + \"          </handled>\\n\"\n-                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n+                + \"        <exception>java.lang.RuntimeException</exception>\\n\"\n+                + \"        <handled>\\n\"\n+                + \"          <constant>false</constant>\\n\"\n+                + \"        </handled>\\n\"\n+                + \"        <to uri=\\\"direct:createPort\\\"/>\\n\"\n                 + \"      </doCatch>\\n\"\n-                + \"   </doTry>\\n\"\n-                + \"</route>\";\n+                + \"    </doTry>\\n\"\n+                + \"  </route> \";\n         try {\n             doUpdate(\"createUser\", routeContent);\n \n-            //creating new schema attribute for user\n+            // creating new schema attribute for user\n             PlainSchemaTO schemaTO = new PlainSchemaTO();\n             schemaTO.setKey(\"camelAttribute\");\n             schemaTO.setType(AttrSchemaType.String);\n             createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n \n             UserTO userTO = new UserTO();\n+            userTO.setRealm(SyncopeConstants.ROOT_REALM);\n             String userId = getUUIDString() + \"camelUser@syncope.apache.org\";\n             userTO.setUsername(userId);\n-            userTO.setPassword(\"password\");\n+            userTO.setPassword(\"password123\");\n             userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n             userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n             userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n             userTO.getPlainAttrs().add(attrTO(\"camelAttribute\", \"false\"));\n \n             userTO = createUser(userTO);\n             assertNotNull(userTO);\n-            assertEquals(\"true\", userTO.getPlainAttrs().get(3).getValues().get(0));\n+            assertEquals(\"true\", CollectionUtils.get(userTO.getPlainAttrs(), 3).getValues().get(0));\n         } finally {\n             doUpdate(oldRoute.getKey(), oldRoute.getContent());\n         }"},{"sha":"5dd5ce8c021f7ad16d35d4960461819426177c48","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConfigurationITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -57,12 +57,12 @@ public class ConfigurationITCase extends AbstractITCase {\n     @Test\n     public void create() {\n         PlainSchemaTO testKey = new PlainSchemaTO();\n-        testKey.setKey(\"testKey\");\n+        testKey.setKey(\"testKey\" + getUUIDString());\n         testKey.setType(AttrSchemaType.String);\n         createSchema(AttributableType.CONFIGURATION, SchemaType.PLAIN, testKey);\n \n         AttrTO conf = new AttrTO();\n-        conf.setSchema(\"testKey\");\n+        conf.setSchema(testKey.getKey());\n         conf.getValues().add(\"testValue\");\n \n         configurationService.set(conf.getSchema(), conf);\n@@ -201,6 +201,7 @@ public void issueSYNCOPE629() throws IOException {\n         createSchema(AttributableType.GROUP, SchemaType.PLAIN, groupKey);\n \n         GroupTO groupTO = new GroupTO();\n+        groupTO.setRealm(\"/\");\n         groupTO.setName(\"aGroup\" + getUUIDString());\n         groupTO.getMPlainAttrTemplates().add(membershipKey.getKey());\n         groupTO.getGPlainAttrTemplates().add(groupKey.getKey());"},{"sha":"4fdad8d404f4175954b3469ab1478e6a12694c88","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -295,7 +295,7 @@ public void issueSYNCOPE10() {\n         ResourceTO resourceTO = resources.get(0);\n \n         // Make it new.\n-        resourceTO.setKey(\"newAbout103\");\n+        resourceTO.setKey(\"newAbout103\" + getUUIDString());\n \n         // Make it new.\n         connInstanceTO.setKey(0);"},{"sha":"7fac061276acb9187cfe2e983557280146e76b61","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":22,"deletions":237,"changes":259,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -28,6 +28,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.AccessControlException;\n+import java.util.Collections;\n import java.util.List;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n@@ -62,7 +63,6 @@\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.GroupService;\n-import org.identityconnectors.framework.common.objects.Name;\n import org.junit.FixMethodOrder;\n import org.junit.Ignore;\n import org.junit.Test;\n@@ -73,43 +73,21 @@ public class GroupITCase extends AbstractITCase {\n \n     private GroupTO buildBasicGroupTO(final String name) {\n         GroupTO groupTO = new GroupTO();\n+        groupTO.setRealm(\"/\");\n         groupTO.setName(name + getUUIDString());\n-        groupTO.setParent(8L);\n         return groupTO;\n     }\n \n     private GroupTO buildGroupTO(final String name) {\n         GroupTO groupTO = buildBasicGroupTO(name);\n \n-        // verify inheritance password and account policies\n-        groupTO.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        groupTO.setAccountPolicy(6L);\n-\n-        groupTO.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        groupTO.setPasswordPolicy(2L);\n-\n         groupTO.getGPlainAttrTemplates().add(\"icon\");\n         groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n \n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n         return groupTO;\n     }\n \n-    @Test\n-    public void createWithException() {\n-        GroupTO newGroupTO = new GroupTO();\n-        newGroupTO.getPlainAttrs().add(attrTO(\"attr1\", \"value1\"));\n-\n-        try {\n-            createGroup(newGroupTO);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidGroup, e.getType());\n-        }\n-    }\n-\n     @Test\n     @Ignore\n     public void create() {\n@@ -126,12 +104,6 @@ public void create() {\n         assertFalse(groupTO.getVirAttrMap().get(\"rvirtualdata\").getValues().isEmpty());\n         assertEquals(\"rvirtualvalue\", groupTO.getVirAttrMap().get(\"rvirtualdata\").getValues().get(0));\n \n-        assertNotNull(groupTO.getAccountPolicy());\n-        assertEquals(6L, (long) groupTO.getAccountPolicy());\n-\n-        assertNotNull(groupTO.getPasswordPolicy());\n-        assertEquals(4L, (long) groupTO.getPasswordPolicy());\n-\n         assertTrue(groupTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         ConnObjectTO connObjectTO =\n@@ -147,22 +119,6 @@ public void create() {\n         assertNull(updateGroup(groupMod).getGroupOwner());\n     }\n \n-    @Test\n-    public void createWithPasswordPolicy() {\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"groupWithPassword\" + getUUIDString());\n-        groupTO.setParent(8L);\n-        groupTO.setPasswordPolicy(4L);\n-\n-        GroupTO actual = createGroup(groupTO);\n-        assertNotNull(actual);\n-\n-        actual = groupService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertNotNull(actual.getPasswordPolicy());\n-        assertEquals(4L, (long) actual.getPasswordPolicy());\n-    }\n-\n     @Test\n     public void delete() {\n         try {\n@@ -173,7 +129,7 @@ public void delete() {\n \n         GroupTO groupTO = new GroupTO();\n         groupTO.setName(\"toBeDeleted\" + getUUIDString());\n-        groupTO.setParent(8L);\n+        groupTO.setRealm(\"/even\");\n \n         groupTO.getResources().add(RESOURCE_NAME_LDAP);\n \n@@ -192,22 +148,14 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        PagedResult<GroupTO> groupTOs = groupService.list();\n+        PagedResult<GroupTO> groupTOs = groupService.list(Collections.singletonList(\"/\"));\n         assertNotNull(groupTOs);\n         assertTrue(groupTOs.getResult().size() >= 8);\n         for (GroupTO groupTO : groupTOs.getResult()) {\n             assertNotNull(groupTO);\n         }\n     }\n \n-    @Test\n-    public void parent() {\n-        GroupTO groupTO = groupService.parent(7L);\n-\n-        assertNotNull(groupTO);\n-        assertEquals(groupTO.getKey(), 6L);\n-    }\n-\n     @Test\n     public void read() {\n         GroupTO groupTO = groupService.read(1L);\n@@ -228,16 +176,17 @@ public void selfRead() {\n         GroupService groupService2 = clientFactory.create(\"rossini\", ADMIN_PWD).getService(GroupService.class);\n \n         try {\n-            groupService2.readSelf(3L);\n+            groupService2.read(3L);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.UnauthorizedGroup, e.getType());\n+            assertEquals(ClientExceptionType.Unauthorized, e.getType());\n         }\n \n-        GroupTO groupTO = groupService2.readSelf(1L);\n-        assertNotNull(groupTO);\n-        assertNotNull(groupTO.getPlainAttrs());\n-        assertFalse(groupTO.getPlainAttrs().isEmpty());\n+        List<GroupTO> groups = groupService2.own();\n+        assertNotNull(groups);\n+        assertFalse(groups.isEmpty());\n+        assertNotNull(groups.get(0).getPlainAttrs());\n+        assertFalse(groups.get(0).getPlainAttrs().isEmpty());\n     }\n \n     @Test\n@@ -248,12 +197,6 @@ public void update() {\n \n         assertEquals(1, groupTO.getPlainAttrs().size());\n \n-        assertNotNull(groupTO.getAccountPolicy());\n-        assertEquals(6L, (long) groupTO.getAccountPolicy());\n-\n-        assertNotNull(groupTO.getPasswordPolicy());\n-        assertEquals(4L, (long) groupTO.getPasswordPolicy());\n-\n         GroupMod groupMod = new GroupMod();\n         groupMod.setKey(groupTO.getKey());\n         String modName = \"finalGroup\" + getUUIDString();\n@@ -267,13 +210,6 @@ public void update() {\n \n         assertEquals(modName, groupTO.getName());\n         assertEquals(2, groupTO.getPlainAttrs().size());\n-\n-        // changes ignored because not requested (null ReferenceMod)\n-        assertNotNull(groupTO.getAccountPolicy());\n-        assertEquals(6L, (long) groupTO.getAccountPolicy());\n-\n-        // password policy null because not inherited\n-        assertNull(groupTO.getPasswordPolicy());\n     }\n \n     @Test\n@@ -319,7 +255,7 @@ public void updateRemovingDerAttribute() {\n     @Test\n     public void updateAsGroupOwner() {\n         // 1. read group as admin\n-        GroupTO groupTO = groupService.read(7L);\n+        GroupTO groupTO = groupService.read(6L);\n \n         // issue SYNCOPE-15\n         assertNotNull(groupTO.getCreationDate());\n@@ -330,9 +266,9 @@ public void updateAsGroupOwner() {\n         // 2. prepare update\n         GroupMod groupMod = new GroupMod();\n         groupMod.setKey(groupTO.getKey());\n-        groupMod.setName(\"Managing Director\");\n+        groupMod.setName(\"Director\");\n \n-        // 3. try to update as verdi, not owner of group 7 - fail\n+        // 3. try to update as verdi, not owner of group 6 - fail\n         GroupService groupService2 = clientFactory.create(\"verdi\", ADMIN_PWD).getService(GroupService.class);\n \n         try {\n@@ -344,11 +280,11 @@ public void updateAsGroupOwner() {\n             assertNotNull(e);\n         }\n \n-        // 4. update as puccini, owner of group 7 because owner of group 6 with inheritance - success\n+        // 4. update as puccini, owner of group 6 - success\n         GroupService groupService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(GroupService.class);\n \n         groupTO = groupService3.update(groupMod.getKey(), groupMod).readEntity(GroupTO.class);\n-        assertEquals(\"Managing Director\", groupTO.getName());\n+        assertEquals(\"Director\", groupTO.getName());\n \n         // issue SYNCOPE-15\n         assertNotNull(groupTO.getCreationDate());\n@@ -358,20 +294,17 @@ public void updateAsGroupOwner() {\n         assertTrue(groupTO.getCreationDate().before(groupTO.getLastChangeDate()));\n     }\n \n-    /**\n-     * Group rename used to fail in case of parent null.\n-     */\n     @Test\n     public void issue178() {\n         GroupTO groupTO = new GroupTO();\n         String groupName = \"torename\" + getUUIDString();\n         groupTO.setName(groupName);\n+        groupTO.setRealm(\"/\");\n \n         GroupTO actual = createGroup(groupTO);\n \n         assertNotNull(actual);\n         assertEquals(groupName, actual.getName());\n-        assertEquals(0L, actual.getParent());\n \n         GroupMod groupMod = new GroupMod();\n         groupMod.setKey(actual.getKey());\n@@ -381,38 +314,6 @@ public void issue178() {\n         actual = updateGroup(groupMod);\n         assertNotNull(actual);\n         assertEquals(renamedGroup, actual.getName());\n-        assertEquals(0L, actual.getParent());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE228() {\n-        GroupTO groupTO = buildGroupTO(\"issueSYNCOPE228\");\n-        groupTO.getEntitlements().add(\"USER_READ\");\n-        groupTO.getEntitlements().add(\"SCHEMA_READ\");\n-\n-        groupTO = createGroup(groupTO);\n-        assertNotNull(groupTO);\n-        assertNotNull(groupTO.getEntitlements());\n-        assertFalse(groupTO.getEntitlements().isEmpty());\n-\n-        List<String> entitlements = groupTO.getEntitlements();\n-\n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n-        groupMod.setInheritDerAttrs(Boolean.TRUE);\n-\n-        groupTO = updateGroup(groupMod);\n-        assertNotNull(groupTO);\n-        assertEquals(entitlements, groupTO.getEntitlements());\n-\n-        groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n-        groupMod.setModEntitlements(true);\n-        groupMod.getEntitlements().clear();\n-\n-        groupTO = updateGroup(groupMod);\n-        assertNotNull(groupTO);\n-        assertTrue(groupTO.getEntitlements().isEmpty());\n     }\n \n     @Test\n@@ -610,7 +511,7 @@ public void deprovisionUnlinked() {\n     public void createWithMandatorySchemaNotTemplate() {\n         // 1. create a group mandatory schema\n         PlainSchemaTO badge = new PlainSchemaTO();\n-        badge.setKey(\"badge\");\n+        badge.setKey(\"badge\" + getUUIDString());\n         badge.setMandatoryCondition(\"true\");\n         schemaService.create(AttributableType.GROUP, SchemaType.PLAIN, badge);\n \n@@ -625,8 +526,8 @@ public void createWithMandatorySchemaNotTemplate() {\n         // failure since no values are provided and it is mandatory\n         GroupMod groupMod = new GroupMod();\n         groupMod.setKey(groupTO.getKey());\n-        groupMod.setModRAttrTemplates(true);\n-        groupMod.getRPlainAttrTemplates().add(\"badge\");\n+        groupMod.setModGAttrTemplates(true);\n+        groupMod.getGPlainAttrTemplates().add(badge.getKey());\n \n         try {\n             updateGroup(groupMod);\n@@ -647,14 +548,14 @@ public void createWithMandatorySchemaNotTemplate() {\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.createAnonymous().getService(GroupService.class);\n         try {\n-            unauthenticated.list();\n+            unauthenticated.list(Collections.singletonList(\"/\"));\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         GroupService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(GroupService.class);\n-        assertFalse(anonymous.list().getResult().isEmpty());\n+        assertFalse(anonymous.list(Collections.singletonList(\"/\")).getResult().isEmpty());\n     }\n \n     @Test\n@@ -686,122 +587,6 @@ public void noContent() throws IOException {\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n     }\n \n-    @Test\n-    public void issueSYNCOPE455() {\n-        final String parentName = \"issueSYNCOPE455-PGroup\";\n-        final String childName = \"issueSYNCOPE455-CGroup\";\n-\n-        // 1. create parent group\n-        GroupTO parent = buildBasicGroupTO(parentName);\n-        parent.getResources().add(RESOURCE_NAME_LDAP);\n-\n-        parent = createGroup(parent);\n-        assertTrue(parent.getResources().contains(RESOURCE_NAME_LDAP));\n-\n-        final ConnObjectTO parentRemoteObject =\n-                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.GROUP, parent.getKey());\n-        assertNotNull(parentRemoteObject);\n-        assertNotNull(getLdapRemoteObject(parentRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n-\n-        // 2. create child group\n-        GroupTO child = buildBasicGroupTO(childName);\n-        child.getResources().add(RESOURCE_NAME_LDAP);\n-        child.setParent(parent.getKey());\n-\n-        child = createGroup(child);\n-        assertTrue(child.getResources().contains(RESOURCE_NAME_LDAP));\n-\n-        final ConnObjectTO childRemoteObject =\n-                resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.GROUP, child.getKey());\n-        assertNotNull(childRemoteObject);\n-        assertNotNull(getLdapRemoteObject(childRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n-\n-        // 3. remove parent group\n-        groupService.delete(parent.getKey());\n-\n-        // 4. asserts for issue 455\n-        try {\n-            groupService.read(parent.getKey());\n-            fail();\n-        } catch (SyncopeClientException scce) {\n-            assertNotNull(scce);\n-        }\n-\n-        try {\n-            groupService.read(child.getKey());\n-            fail();\n-        } catch (SyncopeClientException scce) {\n-            assertNotNull(scce);\n-        }\n-\n-        assertNull(getLdapRemoteObject(parentRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n-        assertNull(getLdapRemoteObject(childRemoteObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE543() {\n-        final String ancestorName = \"issueSYNCOPE543-AGroup\";\n-        final String parentName = \"issueSYNCOPE543-PGroup\";\n-        final String childName = \"issueSYNCOPE543-CGroup\";\n-\n-        // 1. create ancestor group\n-        GroupTO ancestor = buildBasicGroupTO(ancestorName);\n-        ancestor.setParent(0L);\n-        ancestor.getGPlainAttrTemplates().add(\"icon\");\n-        ancestor.getPlainAttrs().add(attrTO(\"icon\", \"ancestorIcon\"));\n-        ancestor = createGroup(ancestor);\n-        assertEquals(\"ancestorIcon\", ancestor.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-\n-        // 2. create parent group\n-        GroupTO parent = buildBasicGroupTO(parentName);\n-        parent.setParent(ancestor.getKey());\n-        parent.getGPlainAttrTemplates().add(\"icon\");\n-        parent.getPlainAttrs().add(attrTO(\"icon\", \"parentIcon\"));\n-        parent = createGroup(parent);\n-        assertEquals(\"parentIcon\", parent.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-\n-        // 3. create child group\n-        GroupTO child = buildBasicGroupTO(childName);\n-        child.setParent(parent.getKey());\n-        child.getGPlainAttrTemplates().add(\"icon\");\n-        child.getPlainAttrs().add(attrTO(\"icon\", \"childIcon\"));\n-        child = createGroup(child);\n-        assertEquals(\"childIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-\n-        final GroupMod groupChildMod = new GroupMod();\n-        groupChildMod.setKey(child.getKey());\n-        groupChildMod.setInheritPlainAttrs(Boolean.TRUE);\n-        updateGroup(groupChildMod);\n-\n-        child = groupService.read(child.getKey());\n-        assertNotNull(child);\n-        assertNotNull(child.getPlainAttrMap().get(\"icon\").getValues());\n-        assertEquals(\"parentIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-\n-        final GroupMod groupParentMod = new GroupMod();\n-        groupParentMod.setKey(parent.getKey());\n-        groupParentMod.setInheritPlainAttrs(Boolean.TRUE);\n-        updateGroup(groupParentMod);\n-\n-        child = groupService.read(child.getKey());\n-        assertNotNull(child);\n-        assertNotNull(child.getPlainAttrMap().get(\"icon\").getValues());\n-        assertEquals(\"ancestorIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-\n-        parent = groupService.read(parent.getKey());\n-        assertNotNull(parent);\n-        assertNotNull(parent.getPlainAttrMap().get(\"icon\").getValues());\n-        assertEquals(\"ancestorIcon\", parent.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-\n-        groupParentMod.setInheritPlainAttrs(Boolean.FALSE);\n-        updateGroup(groupParentMod);\n-\n-        child = groupService.read(child.getKey());\n-        assertNotNull(child);\n-        assertNotNull(child.getPlainAttrMap().get(\"icon\").getValues());\n-        assertEquals(\"parentIcon\", child.getPlainAttrMap().get(\"icon\").getValues().get(0));\n-    }\n-\n     @Test\n     public void issueSYNCOPE632() {\n         GroupTO groupTO = null;"},{"sha":"18abb97375c1b8daa97b40c891ab30ca8b12f289","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -155,7 +155,7 @@ public void issueSYNCOPE446() {\n         NotificationTO notificationTO = buildNotificationTO();\n         notificationTO.getStaticRecipients().add(\"syncope446@syncope.apache.org\");\n         notificationTO.setGroupAbout(\n-                SyncopeClient.getGroupSearchConditionBuilder().hasEntitlements(\"GROUP_READ\").query());\n+                SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"citizen\").query());\n \n         NotificationTO actual = null;\n         try {"},{"sha":"b3ca9aba6762ab75161991cb984f2f31d5d56809","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -130,7 +130,7 @@ private void createNotificationTask(final String sender) {\n         // 2. create user\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope@syncope.apache.org\");\n         MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setGroupId(7);\n+        membershipTO.setGroupKey(7);\n         userTO.getMemberships().add(membershipTO);\n \n         userTO = createUser(userTO);"},{"sha":"5f317ed2a2e33ea15a244ea4c45338f7facde6c2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -233,7 +233,7 @@ public void issue259() {\n \n         UserTO newUserTO = SerializationUtils.clone(userTO);\n         MembershipTO membership = new MembershipTO();\n-        membership.setGroupId(2L);\n+        membership.setGroupKey(2L);\n         newUserTO.getMemberships().add(membership);\n \n         UserMod userMod = AttributableOperations.diff(newUserTO, userTO);"},{"sha":"0c00e407be1f99f6191b4f194b0dd1d2fb08e5fc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PolicyITCase.java","status":"modified","additions":3,"deletions":60,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -68,7 +68,7 @@ public void getAccountPolicy() {\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByResources().isEmpty());\n-        assertTrue(policyTO.getUsedByGroups().containsAll(Arrays.asList(6L, 7L, 10L, 14L)));\n+        assertTrue(policyTO.getUsedByRealms().contains(\"/odd\"));\n     }\n \n     @Test\n@@ -77,58 +77,15 @@ public void getPasswordPolicy() {\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByResources().contains(RESOURCE_NAME_NOPROPAGATION));\n-        assertTrue(policyTO.getUsedByGroups().containsAll(Arrays.asList(6L, 7L, 10L, 8L)));\n+        assertTrue(policyTO.getUsedByRealms().containsAll(Arrays.asList(\"/\", \"/odd\", \"/even\")));\n     }\n \n     @Test\n     public void getSyncPolicy() {\n         SyncPolicyTO policyTO = policyService.read(1L);\n \n         assertNotNull(policyTO);\n-        assertTrue(policyTO.getUsedByGroups().isEmpty());\n-    }\n-\n-    @Test\n-    public void getGlobalAccountPolicy() {\n-        AccountPolicyTO policyTO = policyService.readGlobal(PolicyType.ACCOUNT);\n-\n-        assertNotNull(policyTO);\n-        assertEquals(PolicyType.GLOBAL_ACCOUNT, policyTO.getType());\n-    }\n-\n-    @Test\n-    public void getGlobalPasswordPolicy() {\n-        PasswordPolicyTO policyTO = policyService.readGlobal(PolicyType.PASSWORD);\n-\n-        assertNotNull(policyTO);\n-        assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n-        assertEquals(8, policyTO.getSpecification().getMinLength());\n-        assertFalse(policyTO.getUsedByResources().contains(RESOURCE_NAME_NOPROPAGATION));\n-    }\n-\n-    @Test\n-    public void getGlobalSyncPolicy() {\n-        SyncPolicyTO policyTO = policyService.readGlobal(PolicyType.SYNC);\n-\n-        assertNotNull(policyTO);\n-        assertEquals(PolicyType.GLOBAL_SYNC, policyTO.getType());\n-        assertFalse(policyTO.getUsedByResources().contains(RESOURCE_NAME_CSV));\n-        assertFalse(policyTO.getUsedByResources().contains(RESOURCE_NAME_WS2));\n-        assertTrue(policyTO.getUsedByGroups().isEmpty());\n-    }\n-\n-    @Test\n-    public void createWithException() {\n-        PasswordPolicyTO policy = new PasswordPolicyTO(true);\n-        policy.setSpecification(new PasswordPolicySpec());\n-        policy.setDescription(\"global password policy\");\n-\n-        try {\n-            createPolicy(policy);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n-        }\n+        assertTrue(policyTO.getUsedByRealms().isEmpty());\n     }\n \n     @Test\n@@ -208,20 +165,6 @@ public void getCorrelationRules() {\n         assertEquals(1, syncopeService.info().getSyncCorrelationRules().size());\n     }\n \n-    @Test\n-    public void issueSYNCOPE466() {\n-        PasswordPolicyTO policy = policyService.read(4L);\n-        assertEquals(PolicyType.PASSWORD, policy.getType());\n-\n-        policy.setType(PolicyType.GLOBAL_PASSWORD);\n-        try {\n-            policyService.update(policy.getKey(), policy);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidPolicy, e.getType());\n-        }\n-    }\n-\n     @Test\n     public void issueSYNCOPE553() {\n         AccountPolicyTO policy = new AccountPolicyTO(false);"},{"sha":"918c22bddd519eda7fdbaf00551c3471072748a2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PushTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPushTaskITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -259,7 +259,7 @@ public void issueSYNCOPE598() {\n         // create a new sample group\n         GroupTO groupTO = new GroupTO();\n         groupTO.setName(\"all\" + getUUIDString());\n-        groupTO.setParent(8L);\n+        groupTO.setRealm(\"/even\");\n \n         groupTO.getGPlainAttrTemplates().add(newPlainSchemaTO.getKey());\n         groupTO.getPlainAttrs().add(attrTO(newPlainSchemaTO.getKey(), \"all\"));"},{"sha":"4bd882d82e8b6cf5712ac98ede73201bab56b622","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RealmITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRealmITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -30,6 +30,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AccountPolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.AccountPolicySpec;\n@@ -148,7 +149,7 @@ public void deletingAccountPolicy() {\n         realm.setName(\"withppolicy\");\n         realm.setAccountPolicy(policy.getKey());\n \n-        Response response = realmService.create(\"/\", realm);\n+        Response response = realmService.create(SyncopeConstants.ROOT_REALM, realm);\n         RealmTO[] actuals = getObject(response.getLocation(), RealmService.class, RealmTO[].class);\n         assertNotNull(actuals);\n         assertTrue(actuals.length > 0);"},{"sha":"0c1aa855b9e52058665711cff4961db8f956aa81","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RoleITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52","patch":"@@ -26,8 +26,8 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -59,7 +59,6 @@ public void read() {\n     private RoleTO buildRoleTO(final String name) {\n         RoleTO role = new RoleTO();\n         role.setName(name + getUUIDString());\n-        role.setCriteria(SyncopeClient.getUserSearchConditionBuilder().inGroups(2L).query());\n         role.getRealms().add(\"/even\");\n         role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n \n@@ -70,8 +69,7 @@ private RoleTO buildRoleTO(final String name) {\n     public void create() {\n         RoleTO role = new RoleTO();\n         role.setName(\"new\" + getUUIDString());\n-        role.setCriteria(SyncopeClient.getUserSearchConditionBuilder().inGroups(2L).query());\n-        role.getRealms().add(\"/\");\n+        role.getRealms().add(SyncopeConstants.ROOT_REALM);\n         role.getRealms().add(\"/even/two\");\n         role.getEntitlements().add(Entitlement.LOG_LIST);\n         role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);"},{"sha":"7cd72dbc9fef07ea04e40835d23c3c8fd1642893","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"c922413f6c41cba41497a7518a33156844bee85a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":29,"deletions":17,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"0834176fbbffe83c45ea15bcc1b90e26348286a2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":60,"deletions":78,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"ba9b8d382d071444dd7d7935d0653512b7c7225f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"a99c40c0cbde1e0b49a3dd68d62b9f4f93759bd9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"5001e5d885928bee85f08ba44efb9a64a15ec0b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"cef97bb2279539c75cd86fe5afce8e86213e42ff","filename":"installer/src/main/resources/izpack/install.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"cc4ee0a8f5df062d3ff12f1d339e12c713b330fd","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/65d652af618a54292bb8dcf5cf93147bb6b83c52/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/65d652af618a54292bb8dcf5cf93147bb6b83c52/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=65d652af618a54292bb8dcf5cf93147bb6b83c52"}]}