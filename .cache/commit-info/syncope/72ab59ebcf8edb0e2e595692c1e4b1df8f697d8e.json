{"sha":"72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","node_id":"C_kwDOJfYA1toAKDcyYWI1OWViY2Y4ZWRiMGUyZTU5NTY5MmMxZTRiMWRmOGY2OTdkOGU","commit":{"author":{"name":"Fabio Martelli","email":"fabio.martelli@tirasa.net","date":"2023-03-16T12:50:13Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2023-03-16T12:53:48Z"},"message":"[SYNCOPE-1741] Provides support for Azure Active Directory delegated authentication (#427)","tree":{"sha":"6f83373700c3bec389c17915fdae1496d04671da","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6f83373700c3bec389c17915fdae1496d04671da"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c85df69fa0b7dbec2c8601f24e75801be16b4afd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c85df69fa0b7dbec2c8601f24e75801be16b4afd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c85df69fa0b7dbec2c8601f24e75801be16b4afd"}],"stats":{"total":395,"additions":273,"deletions":122},"files":[{"sha":"c5478e7b9aa4a99d691e77b65fcd7b0efc48dc86","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AbstractOAuth20AuthModuleConf.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOAuth20AuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOAuth20AuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOAuth20AuthModuleConf.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public abstract class AbstractOAuth20AuthModuleConf extends Pac4jAuthModuleConf {\n+\n+    private static final long serialVersionUID = -4716170241796764061L;\n+\n+    protected String clientId;\n+\n+    protected String clientSecret;\n+\n+    protected boolean enabled;\n+\n+    protected Map<String, String> customParams = new LinkedHashMap<>();\n+\n+    protected String tokenUrl;\n+\n+    protected String responseType = \"code\";\n+\n+    protected String scope;\n+\n+    protected String userIdAttribute;\n+\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    public void setId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    public void setEnabled(final boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    public Map<String, String> getCustomParams() {\n+        return customParams;\n+    }\n+\n+    public void setCustomParams(final Map<String, String> customParams) {\n+        this.customParams = customParams;\n+    }\n+\n+    public String getTokenUrl() {\n+        return tokenUrl;\n+    }\n+\n+    public void setTokenUrl(final String tokenUrl) {\n+        this.tokenUrl = tokenUrl;\n+    }\n+\n+    public String getResponseType() {\n+        return responseType;\n+    }\n+\n+    public void setResponseType(final String responseType) {\n+        this.responseType = responseType;\n+    }\n+\n+    public String getScope() {\n+        return scope;\n+    }\n+\n+    public void setScope(final String scope) {\n+        this.scope = scope;\n+    }\n+\n+    public void setClientId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getUserIdAttribute() {\n+        return userIdAttribute;\n+    }\n+\n+    public void setUserIdAttribute(final String userIdAttribute) {\n+        this.userIdAttribute = userIdAttribute;\n+    }\n+}"},{"sha":"d4a53dec2f15123ff3e11f491eaeed638fcdf880","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AbstractOIDCAuthModuleConf.java","status":"modified","additions":65,"deletions":54,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractOIDCAuthModuleConf.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -18,94 +18,105 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n-import java.util.LinkedHashMap;\n-import java.util.Map;\n+public abstract class AbstractOIDCAuthModuleConf extends AbstractOAuth20AuthModuleConf {\n \n-public abstract class AbstractOIDCAuthModuleConf extends Pac4jAuthModuleConf {\n+    private static final long serialVersionUID = -471527731042579422L;\n \n-    private static final long serialVersionUID = -4716170241796764061L;\n+    protected String discoveryUri;\n \n-    protected String clientId;\n+    /**\n+     * Whether an initial nonce should be to used\n+     * initially for replay attack mitigation.\n+     */\n+    protected boolean useNonce;\n \n-    protected String clientSecret;\n+    /**\n+     * The JWS algorithm to use forcefully when validating ID tokens.\n+     * If none is defined, the first algorithm from metadata will be used.\n+     */\n+    protected String preferredJwsAlgorithm;\n \n-    protected boolean enabled;\n+    /**\n+     * Clock skew in order to account for drift, when validating id tokens.\n+     */\n+    protected String maxClockSkew;\n \n-    protected Map<String, String> customParams = new LinkedHashMap<>();\n+    /**\n+     * The response mode specifies how the result of the authorization request is formatted.\n+     * Possible values includes \"query\", \"fragment\", \"form_post\", or \"web_message\"\n+     */\n+    protected String responseMode;\n \n-    protected String tokenUrl;\n+    /**\n+     * Checks if sessions expire with token expiration.\n+     */\n+    protected boolean expireSessionWithToken;\n \n-    protected String responseType = \"code\";\n+    /**\n+     * Default time period advance (in seconds) for considering an access token expired.\n+     * This settings supports the java.time.Duration syntax.\n+     * The format of the value will be PTnHnMnS, where n is the relevant hours, minutes or\n+     * seconds part of the duration. Any fractional seconds are placed after a decimal point in the seconds section.\n+     * If a section has a zero value, it is omitted. The hours, minutes and seconds will all have the same sign.\n+     * Example values could be in the form of PT20S, PT15M, PT10H, PT6D, P2DT3H4M.\n+     * If the value is set to 0 or never, the duration will be set to zero. If the value is blank, set to -1, or\n+     * infinite, the value will effectively represent an unending duration.\n+     */\n+    protected String tokenExpirationAdvance;\n \n-    protected String scope;\n-\n-    protected String userIdAttribute;\n-\n-    public String getClientId() {\n-        return clientId;\n-    }\n-\n-    public void setId(final String clientId) {\n-        this.clientId = clientId;\n-    }\n-\n-    public String getClientSecret() {\n-        return clientSecret;\n-    }\n-\n-    public void setClientSecret(final String clientSecret) {\n-        this.clientSecret = clientSecret;\n+    public String getDiscoveryUri() {\n+        return discoveryUri;\n     }\n \n-    public boolean isEnabled() {\n-        return enabled;\n+    public void setDiscoveryUri(final String discoveryUri) {\n+        this.discoveryUri = discoveryUri;\n     }\n \n-    public void setEnabled(final boolean enabled) {\n-        this.enabled = enabled;\n+    public boolean isUseNonce() {\n+        return useNonce;\n     }\n \n-    public Map<String, String> getCustomParams() {\n-        return customParams;\n+    public void setUseNonce(final boolean useNonce) {\n+        this.useNonce = useNonce;\n     }\n \n-    public void setCustomParams(final Map<String, String> customParams) {\n-        this.customParams = customParams;\n+    public String getPreferredJwsAlgorithm() {\n+        return preferredJwsAlgorithm;\n     }\n \n-    public String getTokenUrl() {\n-        return tokenUrl;\n+    public void setPreferredJwsAlgorithm(final String preferredJwsAlgorithm) {\n+        this.preferredJwsAlgorithm = preferredJwsAlgorithm;\n     }\n \n-    public void setTokenUrl(final String tokenUrl) {\n-        this.tokenUrl = tokenUrl;\n+    public String getMaxClockSkew() {\n+        return maxClockSkew;\n     }\n \n-    public String getResponseType() {\n-        return responseType;\n+    public void setMaxClockSkew(final String maxClockSkew) {\n+        this.maxClockSkew = maxClockSkew;\n     }\n \n-    public void setResponseType(final String responseType) {\n-        this.responseType = responseType;\n+    public String getResponseMode() {\n+        return responseMode;\n     }\n \n-    public String getScope() {\n-        return scope;\n+    public void setResponseMode(final String responseMode) {\n+        this.responseMode = responseMode;\n     }\n \n-    public void setScope(final String scope) {\n-        this.scope = scope;\n+    public boolean isExpireSessionWithToken() {\n+        return expireSessionWithToken;\n     }\n \n-    public void setClientId(final String clientId) {\n-        this.clientId = clientId;\n+    public void setExpireSessionWithToken(final boolean expireSessionWithToken) {\n+        this.expireSessionWithToken = expireSessionWithToken;\n     }\n \n-    public String getUserIdAttribute() {\n-        return userIdAttribute;\n+    public String getTokenExpirationAdvance() {\n+        return tokenExpirationAdvance;\n     }\n \n-    public void setUserIdAttribute(final String userIdAttribute) {\n-        this.userIdAttribute = userIdAttribute;\n+    public void setTokenExpirationAdvance(final String tokenExpirationAdvance) {\n+        this.tokenExpirationAdvance = tokenExpirationAdvance;\n     }\n }"},{"sha":"2cca813cdfe4ca00ac0d3fcd1777c52e90552417","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AuthModuleConf.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -51,6 +51,8 @@ interface Mapper {\n         Map<String, Object> map(AuthModuleTO authModule, SimpleMfaAuthModuleConf conf);\n \n         Map<String, Object> map(AuthModuleTO authModule, OAuth20AuthModuleConf conf);\n+\n+        Map<String, Object> map(AuthModuleTO authModule, AzureAuthModuleConf conf);\n     }\n \n     Map<String, Object> map(AuthModuleTO authModule, Mapper mapper);"},{"sha":"c5cb26a85d2413544ef47938c1cb64bfabd39676","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AzureAuthModuleConf.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAzureAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAzureAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAzureAuthModuleConf.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.auth;\n+\n+import java.util.Map;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+\n+public class AzureAuthModuleConf extends AbstractOIDCAuthModuleConf implements AuthModuleConf {\n+\n+    private static final long serialVersionUID = -471527731042579522L;\n+\n+    /**\n+     * Azure AD tenant name. After tenant is configured, #getDiscoveryUri() property will be overridden.\n+     *\n+     * Azure AD tenant name can take 4 different values:\n+     * - organizations: Only users with work or school accounts from Azure AD can sign in.\n+     * - consumers: Only users with a personal Microsoft account can sign in.\n+     * - Specific tenant domain name or ID: Only user with account under that the specified tenant can login\n+     */\n+    protected String tenant;\n+\n+    public String getTenant() {\n+        return tenant;\n+    }\n+\n+    public void setTenant(final String tenant) {\n+        this.tenant = tenant;\n+    }\n+\n+    @Override\n+    public Map<String, Object> map(final AuthModuleTO authModule, final Mapper mapper) {\n+        return mapper.map(authModule, this);\n+    }\n+\n+}"},{"sha":"9b04b1fe8cf005cc1d6c38f04257accc23009eb8","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OAuth20AuthModuleConf.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOAuth20AuthModuleConf.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -18,16 +18,19 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import java.util.LinkedHashMap;\n import java.util.Map;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n \n-public class OAuth20AuthModuleConf extends AbstractOIDCAuthModuleConf implements AuthModuleConf {\n+public class OAuth20AuthModuleConf extends AbstractOAuth20AuthModuleConf implements AuthModuleConf {\n \n     private static final long serialVersionUID = 299820485764241682L;\n \n     protected String authUrl;\n-\n+    \n     protected String profileUrl;\n+    \n+    protected Map<String, String> profileAttrs = new LinkedHashMap<>();\n \n     protected boolean withState;\n \n@@ -41,6 +44,14 @@ public void setAuthUrl(final String authUrl) {\n         this.authUrl = authUrl;\n     }\n \n+    public Map<String, String> getProfileAttrs() {\n+        return profileAttrs;\n+    }\n+\n+    public void setProfileAttrs(final Map<String, String> profileAttrs) {\n+        this.profileAttrs = profileAttrs;\n+    }\n+\n     public boolean isWithState() {\n         return withState;\n     }"},{"sha":"0ea9339c3b3985094731d4b907e394057c7b34fe","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/OIDCAuthModuleConf.java","status":"modified","additions":1,"deletions":66,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FOIDCAuthModuleConf.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -23,72 +23,7 @@\n \n public class OIDCAuthModuleConf extends AbstractOIDCAuthModuleConf implements AuthModuleConf {\n \n-    private static final long serialVersionUID = -471527731042579422L;\n-\n-    protected String discoveryUri;\n-\n-    /**\n-     * Whether an initial nonce should be to used\n-     * initially for replay attack mitigation.\n-     */\n-    protected boolean useNonce;\n-\n-    /**\n-     * The JWS algorithm to use forcefully when validating ID tokens.\n-     * If none is defined, the first algorithm from metadata will be used.\n-     */\n-    protected String preferredJwsAlgorithm;\n-\n-    /**\n-     * Clock skew in order to account for drift, when validating id tokens.\n-     */\n-    protected String maxClockSkew;\n-\n-    /**\n-     * The response mode specifies how the result of the authorization request is formatted.\n-     * Possible values includes \"query\", \"fragment\", \"form_post\", or \"web_message\"\n-     */\n-    protected String responseMode;\n-\n-    public String getDiscoveryUri() {\n-        return discoveryUri;\n-    }\n-\n-    public void setDiscoveryUri(final String discoveryUri) {\n-        this.discoveryUri = discoveryUri;\n-    }\n-\n-    public boolean isUseNonce() {\n-        return useNonce;\n-    }\n-\n-    public void setUseNonce(final boolean useNonce) {\n-        this.useNonce = useNonce;\n-    }\n-\n-    public String getPreferredJwsAlgorithm() {\n-        return preferredJwsAlgorithm;\n-    }\n-\n-    public void setPreferredJwsAlgorithm(final String preferredJwsAlgorithm) {\n-        this.preferredJwsAlgorithm = preferredJwsAlgorithm;\n-    }\n-\n-    public String getMaxClockSkew() {\n-        return maxClockSkew;\n-    }\n-\n-    public void setMaxClockSkew(final String maxClockSkew) {\n-        this.maxClockSkew = maxClockSkew;\n-    }\n-\n-    public String getResponseMode() {\n-        return responseMode;\n-    }\n-\n-    public void setResponseMode(final String responseMode) {\n-        this.responseMode = responseMode;\n-    }\n+    private static final long serialVersionUID = -471527711042579422L;\n \n     @Override\n     public Map<String, Object> map(final AuthModuleTO authModule, final Mapper mapper) {"},{"sha":"3e3e5c40ba6fa6a8fc345ffff342f3c12d618ee0","filename":"src/main/asciidoc/reference-guide/concepts/authenticationmodules.adoc","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -28,9 +28,11 @@ Several authentication modules are provided:\n     ** https://apereo.github.io/cas/6.6.x/authentication/JAAS-Authentication.html[JAAS^]\n     ** https://apereo.github.io/cas/6.6.x/authentication/LDAP-Authentication.html[LDAP^]\n     ** https://apereo.github.io/cas/6.6.x/integration/Delegate-Authentication.html[OpenID Connect^]\n+    ** https://apereo.github.io/cas/6.6.x/integration/Delegate-Authentication.html[OAuth2^]\n     ** https://apereo.github.io/cas/6.6.x/authentication/Syncope-Authentication.html[Static^]\n     ** https://apereo.github.io/cas/6.6.x/authentication/Syncope-Authentication.html[Syncope^]\n     ** https://apereo.github.io/cas/6.6.x/integration/Delegate-Authentication.html[SAML^]\n+    ** https://apereo.github.io/cas/6.6.x/integration/Delegate-Authentication-Azure-AD.html[Azure Active Directory^]\n * MFA:\n     ** https://apereo.github.io/cas/6.6.x/mfa/DuoSecurity-Authentication.html[Duo Security^]\n     ** https://apereo.github.io/cas/6.6.x/mfa/FIDO-U2F-Authentication.html[Fido U2F^]"},{"sha":"a40b63086ed678fb4b5437a414947a5c0b2f9e3f","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/AuthModulePropertySourceMapper.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FAuthModulePropertySourceMapper.java?ref=72ab59ebcf8edb0e2e595692c1e4b1df8f697d8e","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n+import org.apache.syncope.common.lib.auth.AzureAuthModuleConf;\n import org.apache.syncope.common.lib.auth.DuoMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n@@ -55,6 +56,7 @@\n import org.apereo.cas.configuration.model.support.mfa.simple.CasSimpleMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oauth.Pac4jOAuth20ClientProperties;\n+import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jAzureOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jGenericOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.oidc.Pac4jOidcClientProperties;\n import org.apereo.cas.configuration.model.support.pac4j.saml.Pac4jSamlClientProperties;\n@@ -161,6 +163,8 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final OIDCAuthMo\n         props.setResponseType(conf.getResponseType());\n         props.setScope(conf.getScope());\n         props.setPrincipalIdAttribute(conf.getUserIdAttribute());\n+        props.setExpireSessionWithToken(conf.isExpireSessionWithToken());\n+        props.setTokenExpirationAdvance(conf.getTokenExpirationAdvance());\n         Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n         client.setGeneric(props);\n \n@@ -311,4 +315,28 @@ public Map<String, Object> map(final AuthModuleTO authModuleTO, final SimpleMfaA\n \n         return prefix(\"cas.authn.mfa.simple.\", CasCoreConfigurationUtils.asMap(props));\n     }\n+\n+    @Override\n+    public Map<String, Object> map(final AuthModuleTO authModuleTO, final AzureAuthModuleConf conf) {\n+        Pac4jAzureOidcClientProperties props = new Pac4jAzureOidcClientProperties();\n+        props.setId(conf.getClientId());\n+        props.setSecret(conf.getClientSecret());\n+        props.setClientName(Optional.ofNullable(conf.getClientName()).orElse(authModuleTO.getKey()));\n+        props.setEnabled(authModuleTO.getState() == AuthModuleState.ACTIVE);\n+        props.setCustomParams(conf.getCustomParams());\n+        props.setDiscoveryUri(conf.getDiscoveryUri());\n+        props.setMaxClockSkew(conf.getMaxClockSkew());\n+        props.setPreferredJwsAlgorithm(conf.getPreferredJwsAlgorithm());\n+        props.setResponseMode(conf.getResponseMode());\n+        props.setResponseType(conf.getResponseType());\n+        props.setScope(conf.getScope());\n+        props.setPrincipalIdAttribute(conf.getUserIdAttribute());\n+        props.setExpireSessionWithToken(conf.isExpireSessionWithToken());\n+        props.setTokenExpirationAdvance(conf.getTokenExpirationAdvance());\n+        props.setTenant(conf.getTenant());\n+        Pac4jOidcClientProperties client = new Pac4jOidcClientProperties();\n+        client.setAzure(props);\n+\n+        return prefix(\"cas.authn.pac4j.oidc[].azure.\", CasCoreConfigurationUtils.asMap(props));\n+    }\n }"}]}