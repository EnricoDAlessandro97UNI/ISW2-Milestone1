{"sha":"a5bd98789571d279bf481bed59853d43d4e68856","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE1YmQ5ODc4OTU3MWQyNzliZjQ4MWJlZDU5ODUzZDQzZDRlNjg4NTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-11T11:13:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-11T11:13:07Z"},"message":"[SYNCOPE-215] Implement usage of AbstractVirSchema#isReadonly() + basci test\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1444739 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9b792435ee31bc9be04aa701f87831109f981abe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9b792435ee31bc9be04aa701f87831109f981abe"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a5bd98789571d279bf481bed59853d43d4e68856","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5bd98789571d279bf481bed59853d43d4e68856","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a5bd98789571d279bf481bed59853d43d4e68856","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5bd98789571d279bf481bed59853d43d4e68856/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"386ce347a17c9a77f2368b2b5e278ac1f1a243e5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/386ce347a17c9a77f2368b2b5e278ac1f1a243e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/386ce347a17c9a77f2368b2b5e278ac1f1a243e5"}],"stats":{"total":27,"additions":16,"deletions":11},"files":[{"sha":"5a2ec3436c2b447961e94b902a34d00808fb4aa8","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5bd98789571d279bf481bed59853d43d4e68856/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5bd98789571d279bf481bed59853d43d4e68856/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=a5bd98789571d279bf481bed59853d43d4e68856","patch":"@@ -131,7 +131,7 @@ private <T extends AbstractSchema> T getSchema(final String schemaName, final Cl\n             } else if (schema.isReadonly()) {\n                 schema = null;\n \n-                LOG.debug(\"Ignoring virtual or readonly schema {}\", schemaName);\n+                LOG.debug(\"Ignoring readonly schema {}\", schemaName);\n             }\n         }\n \n@@ -157,6 +157,10 @@ private <T extends AbstractVirSchema> T getVirtualSchema(final String virSchemaN\n \n             if (virtualSchema == null) {\n                 LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n+            } else if (virtualSchema.isReadonly()) {\n+                virtualSchema = null;\n+\n+                LOG.debug(\"Ignoring readonly virtual schema {}\", virtualSchema);\n             }\n         }\n \n@@ -274,6 +278,7 @@ && evaluateMandatoryCondition(attrUtil, attributable, derSchema.getName(),\n         }\n         for (AbstractVirSchema virSchema : virSchemaDAO.findAll(attrUtil.virSchemaClass())) {\n             if (attributable.getVirtualAttribute(virSchema.getName()) == null\n+                    && !virSchema.isReadonly()\n                     && evaluateMandatoryCondition(attrUtil, attributable, virSchema.getName(),\n                     attrUtil.virIntMappingType())) {\n \n@@ -294,19 +299,19 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n \n         // 1. virtual attributes to be removed\n         for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n-            AbstractVirSchema virtualSchema = getVirtualSchema(vAttrToBeRemoved, attrUtil.virSchemaClass());\n-            if (virtualSchema != null) {\n-                AbstractVirAttr virAttr = attributable.getVirtualAttribute(virtualSchema.getName());\n+            AbstractVirSchema virSchema = getVirtualSchema(vAttrToBeRemoved, attrUtil.virSchemaClass());\n+            if (virSchema != null) {\n+                AbstractVirAttr virAttr = attributable.getVirtualAttribute(virSchema.getName());\n                 if (virAttr == null) {\n-                    LOG.debug(\"No virtual attribute found for schema {}\", virtualSchema.getName());\n+                    LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getName());\n                 } else {\n                     attributable.removeVirtualAttribute(virAttr);\n                     virAttrDAO.delete(virAttr);\n                 }\n \n                 for (ExternalResource resource : resourceDAO.findAll()) {\n                     for (AbstractMappingItem mapItem : attrUtil.getMappingItems(resource)) {\n-                        if (virtualSchema.getName().equals(mapItem.getIntAttrName())\n+                        if (virSchema.getName().equals(mapItem.getIntAttrName())\n                                 && mapItem.getIntMappingType() == attrUtil.virIntMappingType()\n                                 && attributable.getResources().contains(resource)) {\n \n@@ -731,7 +736,7 @@ protected void fillTO(final AbstractAttributableTO abstractAttributableTO,\n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(virtualAttribute.getVirtualSchema().getName());\n             attributeTO.setValues(virtualAttribute.getValues());\n-            attributeTO.setReadonly(false);\n+            attributeTO.setReadonly(virtualAttribute.getVirtualSchema().isReadonly());\n \n             abstractAttributableTO.addVirtualAttribute(attributeTO);\n         }"},{"sha":"fec5b0e225c915f7dc000e1da32e4cfa581075b8","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5bd98789571d279bf481bed59853d43d4e68856/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5bd98789571d279bf481bed59853d43d4e68856/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=a5bd98789571d279bf481bed59853d43d4e68856","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.data;\n \n import java.util.List;\n-\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -45,7 +44,7 @@ public class SchemaDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n \n-    private static final String[] IGNORE_SCHEMA_PROPERTIES = { \"derivedSchemas\", \"attributes\" };\n+    private static final String[] IGNORE_SCHEMA_PROPERTIES = {\"derivedSchemas\", \"attributes\"};\n \n     @Autowired\n     private SchemaDAO schemaDAO;"},{"sha":"a7288cf10d2b5cd0ab0238cf88e17228c5b01590","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5bd98789571d279bf481bed59853d43d4e68856/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5bd98789571d279bf481bed59853d43d4e68856/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=a5bd98789571d279bf481bed59853d43d4e68856","patch":"@@ -21,9 +21,9 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n-\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -53,12 +53,13 @@ public void findByName() {\n     public void save() {\n         UVirSchema virtualAttributeSchema = new UVirSchema();\n         virtualAttributeSchema.setName(\"virtual\");\n+        virtualAttributeSchema.setReadonly(true);\n \n         virSchemaDAO.save(virtualAttributeSchema);\n \n         UVirSchema actual = virSchemaDAO.find(\"virtual\", UVirSchema.class);\n         assertNotNull(\"expected save to work\", actual);\n-        assertEquals(virtualAttributeSchema, actual);\n+        assertTrue(actual.isReadonly());\n     }\n \n     @Test"}]}