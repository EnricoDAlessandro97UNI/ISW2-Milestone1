{"sha":"a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","node_id":"C_kwDOJfYA1toAKGEwMzk4OTkxNmUxZDg2ZTZhODQxMmRlNmY0YjllY2RiMjI2OWU0YzU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-03-15T08:36:13Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-03-15T08:36:13Z"},"message":"[SYNCOPE-1667] Adding PropagationPolicy (#325)","tree":{"sha":"ccb54df82ca4b2b3bf118c0a454a3f2f3e8ca0a4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ccb54df82ca4b2b3bf118c0a454a3f2f3e8ca0a4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiME/9CRBK7hj4Ov3rIwAAFLEIAHBcnpUuU6wstih43yEgYeYE\n1s7/5zIrXc4en2tswmiu77zOgJQ+PRl+F8jT6gd5SuDwnnBDgWVLZqhMF8GxH3CW\nIMdyJ7f8Oah3O14uFikfaI5MLeegSAZfxek2NB/xjqxfKaXnwGYGWR1Zm9eLZCjr\nXcxB5Ov43K8c3lT4rL9E5PH67VuN1f4AJr/Mad/L9FVOHWyoIgQKjBgUSL0if5yr\nC6LzKmLeTRYZ7XMzpVWRC8Arg15uhq8SQQ7TUfcKNVDKwgzPskyFxBwEAvvN1+SV\ncBvg1oEgrXyhldvX14WeNPIYuVSP7EokSjJ6zJoIDn+8RxzFwfx2j1wNP6Rim2Y=\n=s8lm\n-----END PGP SIGNATURE-----\n","payload":"tree ccb54df82ca4b2b3bf118c0a454a3f2f3e8ca0a4\nparent a11b9bfddb0a3ed6d33504889fae6130c8fa2dae\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1647333373 +0100\ncommitter GitHub <noreply@github.com> 1647333373 +0100\n\n[SYNCOPE-1667] Adding PropagationPolicy (#325)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"a11b9bfddb0a3ed6d33504889fae6130c8fa2dae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a11b9bfddb0a3ed6d33504889fae6130c8fa2dae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a11b9bfddb0a3ed6d33504889fae6130c8fa2dae"}],"stats":{"total":1278,"additions":1070,"deletions":208},"files":[{"sha":"0f2b92065f2a9ddb77d7f60bda98a62f4e61b32d","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMPolicyTabProvider.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMPolicyTabProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMPolicyTabProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMPolicyTabProvider.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.client.console.policies.PropagationPolicyDirectoryPanel;\n import org.apache.syncope.client.console.policies.PullPolicyDirectoryPanel;\n import org.apache.syncope.client.console.policies.PushPolicyDirectoryPanel;\n import org.apache.wicket.PageReference;\n@@ -41,6 +42,16 @@ public int getOrder() {\n     public List<ITab> buildTabList(final PageReference pageRef) {\n         List<ITab> tabs = new ArrayList<>();\n \n+        tabs.add(new AbstractTab(new ResourceModel(\"policy.propagation\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new PropagationPolicyDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n         tabs.add(new AbstractTab(new ResourceModel(\"policy.pull\")) {\n \n             private static final long serialVersionUID = -6815067322125799251L;"},{"sha":"8a9a7937b62a0451958d0a2f9e7ba6d257a3bebd","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/PropagationPolicyDirectoryPanel.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPropagationPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPropagationPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPropagationPolicyDirectoryPanel.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.policies;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.policy.PropagationPolicyTO;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class PropagationPolicyDirectoryPanel extends PolicyDirectoryPanel<PropagationPolicyTO> {\n+\n+    private static final long serialVersionUID = 25188602686577L;\n+\n+    public PropagationPolicyDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, PolicyType.PROPAGATION, pageRef);\n+\n+        PropagationPolicyTO defaultItem = new PropagationPolicyTO();\n+\n+        this.addNewItemPanelBuilder(\n+                new PolicyModalPanelBuilder<>(PolicyType.PROPAGATION, defaultItem, modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.POLICY_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<PropagationPolicyTO, String>> columns) {\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"maxAttempts\", this), \"maxAttempts\", \"maxAttempts\"));\n+    }\n+}"},{"sha":"f23862e9d91bf6c659e82c41a20d4e6b7d06a73c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.java","status":"modified","additions":29,"deletions":4,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -46,7 +46,7 @@ public class ResourceSecurityPanel extends WizardStep {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PASSWORD).stream().\n-                collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -57,7 +57,18 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.ACCOUNT).stream().\n-                collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n+        }\n+    };\n+\n+    private final IModel<Map<String, String>> propagationPolicies = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = -2012833443695917883L;\n+\n+        @Override\n+        protected Map<String, String> load() {\n+            return PolicyRestClient.list(PolicyType.PROPAGATION).stream().\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -68,7 +79,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PULL).stream().\n-                collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -79,7 +90,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return PolicyRestClient.list(PolicyType.PUSH).stream().\n-                collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getName));\n         }\n     };\n \n@@ -120,6 +131,20 @@ public ResourceSecurityPanel(final ResourceTO resourceTO) {\n         container.add(accountPolicy);\n         // -------------------------------\n \n+        // -------------------------------\n+        // Propagation policy selection\n+        // -------------------------------\n+        AjaxDropDownChoicePanel<String> propagationPolicy = new AjaxDropDownChoicePanel<>(\n+                \"propagationPolicy\",\n+                new ResourceModel(\"propagationPolicy\", \"propagationPolicy\").getObject(),\n+                new PropertyModel<>(resourceTO, \"propagationPolicy\"),\n+                false);\n+        propagationPolicy.setChoiceRenderer(new PolicyRenderer(propagationPolicies));\n+        propagationPolicy.setChoices(new ArrayList<>(propagationPolicies.getObject().keySet()));\n+        ((DropDownChoice<?>) propagationPolicy.getField()).setNullValid(true);\n+        container.add(propagationPolicy);\n+        // -------------------------------\n+\n         // -------------------------------\n         // Pull policy selection\n         // -------------------------------"},{"sha":"00b4882cb250ab96d4aaf8c7e8266ea0151c4330","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.html","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.html?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -25,6 +25,9 @@\n       <span wicket:id=\"passwordPolicy\">\n         [panel for dynamic input type markup]\n       </span>\n+      <span wicket:id=\"propagationPolicy\">\n+        [panel for dynamic input type markup]\n+      </span>\n       <span wicket:id=\"pullPolicy\">\n         [panel for dynamic input type markup]\n       </span>"},{"sha":"c2b3da7d592ee5d783938a4043b76134ee359182","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -18,3 +18,4 @@ passwordPolicy=Password Policy\n accountPolicy=Account Policy\n pullPolicy=Pull Policy\n pushPolicy=Push Policy\n+propagationPolicy=Propagation Policy"},{"sha":"2e20b1a9ec2bb43b8685ac63d20aefedc65ffcd2","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel_fr_CA.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_fr_CA.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -18,3 +18,4 @@ passwordPolicy=Politique sur les mots de passe\n accountPolicy=Politique sur les comptes\n pullPolicy=Politique Pull\n pushPolicy=Politique Push\n+propagationPolicy=Propagation Policy"},{"sha":"c2b3da7d592ee5d783938a4043b76134ee359182","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_it.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -18,3 +18,4 @@ passwordPolicy=Password Policy\n accountPolicy=Account Policy\n pullPolicy=Pull Policy\n pushPolicy=Push Policy\n+propagationPolicy=Propagation Policy"},{"sha":"0df90b32e0e18bb251cb4425ca4284ad5ec83da5","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_ja.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -18,3 +18,4 @@ passwordPolicy=\\u30d1\\u30b9\\u30ef\\u30fc\\u30c9\\u30dd\\u30ea\\u30b7\\u30fc\n accountPolicy=\\u30a2\\u30ab\\u30a6\\u30f3\\u30c8\\u30dd\\u30ea\\u30b7\\u30fc\n pullPolicy=\\u30d7\\u30eb\\u30dd\\u30ea\\u30b7\\u30fc\n pushPolicy=\\u30d7\\u30c3\\u30b7\\u30e5\\u30dd\\u30ea\\u30b7\\u30fc\n+propagationPolicy=Propagation Policy"},{"sha":"2b8b4b76ee348aadeb29df0bb35c28a0d8a405d4","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_pt_BR.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -18,3 +18,4 @@ passwordPolicy=Pol\\u00edtica de Senha\n accountPolicy=Pol\\u00edtica de Conta\n pullPolicy=Pol\\u00edtica de Pull\n pushPolicy=Push Policy\n+propagationPolicy=Propagation Policy"},{"sha":"70bf684ab74efce403dd2cef0b07b3196e2350ce","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel_ru.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -19,3 +19,4 @@ passwordPolicy = \\u041f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0430 \\u043f\\u0430\\u\n accountPolicy = \\u041f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0430 \\u0443\\u0447\\u0435\\u0442\\u043d\\u044b\\u0445 \\u0437\\u0430\\u043f\\u0438\\u0441\\u0435\\u0439\n pullPolicy=\\u041f\\u043e\\u043b\\u0438\\u0442\\u0438\\u043a\\u0430 \\u043f\\u043e\\u043b\\u0443\\u0447\\u0435\\u043d\\u0438\\u044f \\u0434\\u0430\\u043d\\u043d\\u044b\\u0445\n pushPolicy=Push Policy\n+propagationPolicy=Propagation Policy"},{"sha":"7778556b949b578c4e8c750655132c3911c6d549","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -21,14 +21,17 @@\n import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n@@ -39,6 +42,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.types.BackOffStrategy;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.Application;\n@@ -59,6 +63,42 @@\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n+    private static class BackOffParamsModel<N extends Number> implements IModel<N> {\n+\n+        private static final long serialVersionUID = 28839546672164L;\n+\n+        private final PropertyModel<String> backOffParamsModel;\n+\n+        private final int index;\n+\n+        BackOffParamsModel(final PropertyModel<String> backOffParamsModel, final int index) {\n+            this.backOffParamsModel = backOffParamsModel;\n+            this.index = index;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public N getObject() {\n+            String[] split = backOffParamsModel.getObject().split(\";\");\n+            if (index >= split.length) {\n+                return null;\n+            }\n+\n+            return index == 2\n+                    ? (N) Double.valueOf(backOffParamsModel.getObject().split(\";\")[index])\n+                    : (N) Long.valueOf(backOffParamsModel.getObject().split(\";\")[index]);\n+        }\n+\n+        @Override\n+        public void setObject(final N object) {\n+            String[] split = backOffParamsModel.getObject().split(\";\");\n+            if (index < split.length) {\n+                split[index] = object.toString();\n+                backOffParamsModel.setObject(Arrays.stream(split).collect(Collectors.joining(\";\")));\n+            }\n+        }\n+    }\n+\n     private final BaseModal<T> modal;\n \n     private final PolicyType type;\n@@ -137,6 +177,63 @@ protected List<String> load() {\n                             false));\n                     break;\n \n+                case PROPAGATION:\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                            \"field\",\n+                            \"maxAttempts\",\n+                            Integer.class,\n+                            new PropertyModel<>(policyTO, \"maxAttempts\")));\n+                    AjaxDropDownChoicePanel<Serializable> backOffStrategy = new AjaxDropDownChoicePanel<>(\n+                            \"field\",\n+                            \"backOffStrategy\",\n+                            new PropertyModel<>(policyTO, \"backOffStrategy\")).\n+                            setChoices(List.of((Serializable[]) BackOffStrategy.values()));\n+                    fields.add(backOffStrategy);\n+\n+                    PropertyModel<String> backOffParamsModel = new PropertyModel<>(policyTO, \"backOffParams\");\n+\n+                    AjaxSpinnerFieldPanel<Long> initialInterval = new AjaxSpinnerFieldPanel.Builder<Long>().\n+                            min(1L).build(\n+                            \"field\",\n+                            \"initialInterval\",\n+                            Long.class,\n+                            new BackOffParamsModel<>(backOffParamsModel, 0));\n+                    fields.add(initialInterval.setOutputMarkupPlaceholderTag(true));\n+                    AjaxSpinnerFieldPanel<Long> maxInterval = new AjaxSpinnerFieldPanel.Builder<Long>().\n+                            min(1L).build(\n+                            \"field\",\n+                            \"maxInterval\",\n+                            Long.class,\n+                            new BackOffParamsModel<>(backOffParamsModel, 1));\n+                    fields.add(maxInterval.setOutputMarkupPlaceholderTag(true).setVisible(false));\n+                    AjaxSpinnerFieldPanel<Double> multiplier = new AjaxSpinnerFieldPanel.Builder<Double>().\n+                            min(1D).build(\n+                            \"field\",\n+                            \"multiplier\",\n+                            Double.class,\n+                            new BackOffParamsModel<>(backOffParamsModel, 2));\n+                    fields.add(multiplier.setOutputMarkupPlaceholderTag(true).setVisible(false));\n+\n+                    showHide(backOffStrategy, initialInterval, maxInterval, multiplier);\n+\n+                    backOffStrategy.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                        private static final long serialVersionUID = -1107858522700306810L;\n+\n+                        @Override\n+                        protected void onUpdate(final AjaxRequestTarget target) {\n+                            BackOffStrategy strategy = (BackOffStrategy) backOffStrategy.getField().getModelObject();\n+                            backOffParamsModel.setObject(strategy.getDefaultBackOffParams());\n+\n+                            showHide(backOffStrategy, initialInterval, maxInterval, multiplier);\n+\n+                            target.add(initialInterval);\n+                            target.add(maxInterval);\n+                            target.add(multiplier);\n+                        }\n+                    });\n+                    break;\n+\n                 case PULL:\n                 case PUSH:\n                     fields.add(new AjaxDropDownChoicePanel<>(\n@@ -228,6 +325,35 @@ protected void populateItem(final ListItem<Component> item) {\n             });\n         }\n \n+        private void showHide(\n+                final AjaxDropDownChoicePanel<Serializable> backOffStrategy,\n+                final AjaxSpinnerFieldPanel<Long> initialInterval,\n+                final AjaxSpinnerFieldPanel<Long> maxInterval,\n+                final AjaxSpinnerFieldPanel<Double> multiplier) {\n+\n+            BackOffStrategy strategy = (BackOffStrategy) backOffStrategy.getField().getModelObject();\n+\n+            switch (strategy) {\n+                case EXPONENTIAL:\n+                    initialInterval.addLabel(\"initialInterval\");\n+                    maxInterval.setVisible(true);\n+                    multiplier.setVisible(true);\n+                    break;\n+\n+                case RANDOM:\n+                    initialInterval.addLabel(\"initialInterval\");\n+                    maxInterval.setVisible(true);\n+                    multiplier.setVisible(true);\n+                    break;\n+\n+                case FIXED:\n+                default:\n+                    initialInterval.addLabel(\"period\");\n+                    maxInterval.setVisible(false);\n+                    multiplier.setVisible(false);\n+            }\n+        }\n+\n         @Override\n         public void onSubmit(final AjaxRequestTarget target) {\n             try {"},{"sha":"b44aedad21ede3fd809fbebac7ab3e38be2afd60","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Policies.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -21,3 +21,4 @@ policy.push=Push\n policy.access=Access\n policy.attrRelease=Attribute Release\n policy.auth=Authentication\n+policy.propagation=Propagation"},{"sha":"693aa359f3ee8d1f47a9ac48bf57ff9186f385fb","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_it.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -21,3 +21,4 @@ policy.push=Push\n policy.access=Accesso\n policy.attrRelease=Rilascio Attributi\n policy.auth=Autenticazione\n+policy.propagation=Propagazione"},{"sha":"5ed564cade3b083f9812c00d65db5c0477d89ed0","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ja.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -21,3 +21,4 @@ policy.push=\\u30d7\\u30c3\\u30b7\\u30e5\n policy.access=Access\n policy.attrRelease=Attribute Release\n policy.auth=Authentication\n+policy.propagation=Propagation"},{"sha":"b44aedad21ede3fd809fbebac7ab3e38be2afd60","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_pt_BR.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -21,3 +21,4 @@ policy.push=Push\n policy.access=Access\n policy.attrRelease=Attribute Release\n policy.auth=Authentication\n+policy.propagation=Propagation"},{"sha":"992307bc3d0b45ee9efbfb496e82039e9c5860ea","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Policies_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicies_ru.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -22,3 +22,4 @@ policy.push=Push\n policy.access=Access\n policy.attrRelease=Attribute Release\n policy.auth=Authentication\n+policy.propagation=Propagation"},{"sha":"1f1d3dc427245ff81919bab0a8fb19717d509a40","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -51,3 +51,5 @@ caseInsensitive=Case Insensitive\n order=Order\n rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n+maxAttempts=Max Attempts\n+backOffStrategy=BackOff Strategy"},{"sha":"a7858b0bc6dbb2941ad9d2de0939f96262f49724","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_fr_CA.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -51,3 +51,5 @@ caseInsensitive=Case Insensitive\n order=Order\n rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n+maxAttempts=Max Attempts\n+backOffStrategy=BackOff Strategy"},{"sha":"690c704b62ce938858d7eee58289d54bf235a46f","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -51,3 +51,5 @@ caseInsensitive=Case Insensitive\n order=Ordinamento\n rejectedAttrs.title=Attributi Rifiutati\n unauthorizedRedirectUrl=URL di Ridirezione Per Mancata Autorizzazione\n+maxAttempts=Tentativi Massimi\n+backOffStrategy=Strategia di BackOff"},{"sha":"ebefed5285c06073590ff50402564d46a42723ee","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -51,3 +51,5 @@ caseInsensitive=Case Insensitive\n order=Order\n rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n+maxAttempts=Max Attempts\n+backOffStrategy=BackOff Strategy"},{"sha":"29e278e3f3a292a4a4736ec7319552274007c176","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -51,3 +51,5 @@ caseInsensitive=Case Insensitive\n order=Order\n rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n+maxAttempts=Max Attempts\n+backOffStrategy=BackOff Strategy"},{"sha":"4212773b3ee8e1345fb2671b56fa8ddbd4762340","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -52,3 +52,5 @@ caseInsensitive=Case Insensitive\n order=Order\n rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n+maxAttempts=Max Attempts\n+backOffStrategy=BackOff Strategy"},{"sha":"90bc7cd7814e4426a4bbf7a3a4277c1d52dcb884","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/policy/PropagationPolicyTO.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.syncope.common.lib.types.BackOffStrategy;\n+\n+@Schema(allOf = { PolicyTO.class }, discriminatorProperty = \"_class\")\n+public class PropagationPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = 10604950933449L;\n+\n+    private BackOffStrategy backOffStrategy = BackOffStrategy.FIXED;\n+\n+    private String backOffParams = BackOffStrategy.FIXED.getDefaultBackOffParams();\n+\n+    private int maxAttempts = 3;\n+\n+    @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n+    @JsonProperty(\"_class\")\n+    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.policy.PropagationPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public BackOffStrategy getBackOffStrategy() {\n+        return backOffStrategy;\n+    }\n+\n+    public void setBackOffStrategy(final BackOffStrategy backOffStrategy) {\n+        this.backOffStrategy = backOffStrategy;\n+        this.backOffParams = backOffStrategy.getDefaultBackOffParams();\n+    }\n+\n+    public String getBackOffParams() {\n+        return backOffParams;\n+    }\n+\n+    public void setBackOffParams(final String backOffParams) {\n+        this.backOffParams = backOffParams;\n+    }\n+\n+    public int getMaxAttempts() {\n+        return maxAttempts;\n+    }\n+\n+    public void setMaxAttempts(final int maxAttempts) {\n+        this.maxAttempts = maxAttempts;\n+    }\n+}"},{"sha":"59233a34eeba530bba6ce731ca073db1c6e0d22b","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -69,6 +69,8 @@ public class ResourceTO implements EntityTO {\n \n     private String accountPolicy;\n \n+    private String propagationPolicy;\n+\n     private String pullPolicy;\n \n     private String pushPolicy;\n@@ -178,6 +180,14 @@ public void setAccountPolicy(final String accountPolicy) {\n         this.accountPolicy = accountPolicy;\n     }\n \n+    public String getPropagationPolicy() {\n+        return propagationPolicy;\n+    }\n+\n+    public void setPropagationPolicy(final String propagationPolicy) {\n+        this.propagationPolicy = propagationPolicy;\n+    }\n+\n     public String getPullPolicy() {\n         return pullPolicy;\n     }\n@@ -293,6 +303,7 @@ public boolean equals(final Object obj) {\n                 append(provisioningTraceLevel, other.provisioningTraceLevel).\n                 append(passwordPolicy, other.passwordPolicy).\n                 append(accountPolicy, other.accountPolicy).\n+                append(propagationPolicy, other.propagationPolicy).\n                 append(pullPolicy, other.pullPolicy).\n                 append(pushPolicy, other.pushPolicy).\n                 append(authPolicy, other.authPolicy).\n@@ -321,6 +332,7 @@ public int hashCode() {\n                 append(provisioningTraceLevel).\n                 append(passwordPolicy).\n                 append(accountPolicy).\n+                append(propagationPolicy).\n                 append(pullPolicy).\n                 append(pushPolicy).\n                 append(authPolicy)."},{"sha":"314a8f7d757e14694fd0ca2e245a0c0fe894d72a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/BackOffStrategy.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FBackOffStrategy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FBackOffStrategy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FBackOffStrategy.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum BackOffStrategy {\n+    FIXED(\"1000\"),\n+    EXPONENTIAL(\"100;30000;2\"),\n+    RANDOM(\"100;30000;2\");\n+\n+    private final String defaultBackOffParams;\n+\n+    BackOffStrategy(final String defaultBackOffParams) {\n+        this.defaultBackOffParams = defaultBackOffParams;\n+    }\n+\n+    public String getDefaultBackOffParams() {\n+        return defaultBackOffParams;\n+    }\n+}"},{"sha":"e9a71bdd2878bac4280ca633cc7278e231e35cc2","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/PolicyType.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPolicyType.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -40,6 +40,10 @@ public enum PolicyType {\n      * How access policies should be defined.\n      */\n     ACCESS,\n+    /**\n+     * For handling propagation behavior.\n+     */\n+    PROPAGATION,\n     /**\n      * For handling conflicts resolution during pull.\n      */"},{"sha":"d4e8172997294c628f48629bb9dbf0d70fbe51d7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PropagationPolicy.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPropagationPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPropagationPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPropagationPolicy.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.policy;\n+\n+import org.apache.syncope.common.lib.types.BackOffStrategy;\n+\n+public interface PropagationPolicy extends Policy {\n+\n+    BackOffStrategy getBackOffStrategy();\n+\n+    void setBackOffStrategy(BackOffStrategy backOffStrategy);\n+\n+    String getBackOffParams();\n+\n+    void setBackOffParams(String backOffParams);\n+\n+    int getMaxAttempts();\n+\n+    void setMaxAttempts(int maxAttempts);\n+}"},{"sha":"86fb038fa5db01ea839c2d28d05de5f5427b4fa5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/resource/ExternalResource.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fresource%2FExternalResource.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -58,6 +59,10 @@ public interface ExternalResource extends ProvidedKeyEntity {\n \n     void setPasswordPolicy(PasswordPolicy passwordPolicy);\n \n+    PropagationPolicy getPropagationPolicy();\n+\n+    void setPropagationPolicy(PropagationPolicy propagationPolicy);\n+\n     PullPolicy getPullPolicy();\n \n     void setPullPolicy(PullPolicy pullPolicy);"},{"sha":"c3c079e50896d3dc14f2a4577df66b333ee3ff01","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -43,6 +43,8 @@ under the License.\n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n+  <PropagationPolicy id=\"89d322db-9878-420c-b49c-67be13df9a12\" name=\"sample propagation policy\"\n+                     maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n   \n   <!-- Authentication policies -->\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n@@ -704,7 +706,8 @@ under the License.\n \n   <ExternalResource id=\"resource-db-scripted\" connector_id=\"a6d017fd-a705-4507-bb7c-6ab6a6745997\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n-                    enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"/>\n+                    enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n+                    propagationPolicy_id=\"89d322db-9878-420c-b49c-67be13df9a12\"/>\n \n   <ExternalResource id=\"rest-target-resource\" connector_id=\"44c02549-19c3-483c-8025-4919c3283c37\"\n                     createTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"  deleteTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\" "},{"sha":"769ca55c6ea7b3ae30178452d22fec8cba056fdd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -64,6 +65,8 @@ protected static StringBuilder getByPolicyQuery(final Class<? extends Policy> po\n             query.append(\"accountPolicy\");\n         } else if (PasswordPolicy.class.isAssignableFrom(policyClass)) {\n             query.append(\"passwordPolicy\");\n+        } else if (PropagationPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"propagationPolicy\");\n         } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n             query.append(\"pullPolicy\");\n         } else if (PushPolicy.class.isAssignableFrom(policyClass)) {"},{"sha":"2f349fe1a6b622862d6cc3981d2c75bac49bce76","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -39,6 +40,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPropagationPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n@@ -51,6 +53,8 @@ protected static <T extends Policy> Class<? extends AbstractPolicy> getEntityRef\n                 ? JPAAccountPolicy.class\n                 : PasswordPolicy.class.isAssignableFrom(reference)\n                 ? JPAPasswordPolicy.class\n+                : PropagationPolicy.class.isAssignableFrom(reference)\n+                ? JPAPropagationPolicy.class\n                 : PullPolicy.class.isAssignableFrom(reference)\n                 ? JPAPullPolicy.class\n                 : PushPolicy.class.isAssignableFrom(reference)\n@@ -168,11 +172,14 @@ public <T extends Policy> void delete(final T policy) {\n         if (!(policy instanceof AuthPolicy)\n                 && !(policy instanceof AttrReleasePolicy)\n                 && !(policy instanceof AccessPolicy)) {\n+\n             resourceDAO.findByPolicy(policy).forEach(resource -> {\n                 if (policy instanceof AccountPolicy) {\n                     resource.setAccountPolicy(null);\n                 } else if (policy instanceof PasswordPolicy) {\n                     resource.setPasswordPolicy(null);\n+                } else if (policy instanceof PropagationPolicy) {\n+                    resource.setPropagationPolicy(null);\n                 } else if (policy instanceof PullPolicy) {\n                     resource.setPullPolicy(null);\n                 } else if (policy instanceof PushPolicy) {"},{"sha":"9fb6c1d592861ed624a942ca310963ce65b3510b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import javax.persistence.NoResultException;\n@@ -41,6 +40,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n \n public class JPARealmDAO extends AbstractDAO<Realm> implements RealmDAO {\n \n@@ -145,9 +145,10 @@ public List<Realm> findMatching(final String keyword) {\n \n     @Override\n     public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n-        if (ProvisioningPolicy.class.isAssignableFrom(policy.getClass())) {\n-            return Collections.<Realm>emptyList();\n+        if (policy instanceof PropagationPolicy || policy instanceof ProvisioningPolicy) {\n+            return List.of();\n         }\n+\n         String policyColumn = null;\n         if (policy instanceof AccountPolicy) {\n             policyColumn = \"accountPolicy\";\n@@ -167,10 +168,10 @@ public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n         query.setParameter(\"policy\", policy);\n \n         List<Realm> result = new ArrayList<>();\n-        query.getResultList().stream().map(realm -> {\n+        query.getResultList().forEach(realm -> {\n             result.add(realm);\n-            return realm;\n-        }).forEachOrdered(realm -> result.addAll(findSamePolicyChildren(realm, policy)));\n+            result.addAll(findSamePolicyChildren(realm, policy));\n+        });\n \n         return result;\n     }"},{"sha":"f4595c9931f817331b49af5843486562d5ff6b75","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -88,7 +88,7 @@ public void delete(final String key) {\n             }\n             relationship.setLeftEnd(null);\n             return relationship;\n-        }).forEachOrdered(relationship -> entityManager().remove(relationship));\n+        }).forEach(entityManager()::remove);\n \n         entityManager().remove(type);\n     }"},{"sha":"84be74fa03dfa12f8cb03b7475968d5e8e195ded","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -317,13 +317,13 @@ protected List<AccountPolicy> getAccountPolicies(final User user) {\n         findAllResources(user).stream().\n                 map(ExternalResource::getAccountPolicy).\n                 filter(Objects::nonNull).\n-                forEachOrdered(policies::add);\n+                forEach(policies::add);\n \n         // add realm policies\n         realmDAO.findAncestors(user.getRealm()).stream().\n                 map(Realm::getAccountPolicy).\n                 filter(Objects::nonNull).\n-                forEachOrdered(policies::add);\n+                forEach(policies::add);\n \n         return policies;\n     }\n@@ -533,7 +533,7 @@ public List<Role> findDynRoles(final String key) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered(roleKey -> {\n+                forEach(roleKey -> {\n                     Role role = roleDAO.find(roleKey.toString());\n                     if (role == null) {\n                         LOG.error(\"Could not find role {}, even though returned by the native query\", roleKey);"},{"sha":"7b04ca67de0c9198e6861e8eedfb8764b13879f3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n import org.apache.syncope.core.persistence.api.entity.Batch;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n@@ -46,6 +47,7 @@\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n@@ -58,7 +60,12 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n@@ -70,6 +77,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n@@ -109,10 +117,13 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSPClientApp;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRPClientApp;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPClientApp;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPEntity;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n@@ -126,6 +137,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPropagationPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n@@ -158,16 +170,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n-import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n-import org.apache.syncope.core.persistence.api.entity.SRARoute;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n-import org.apache.syncope.core.persistence.api.entity.AuditConf;\n \n public class JPAEntityFactory implements EntityFactory {\n \n@@ -188,6 +190,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAccountPolicy();\n         } else if (reference.equals(PasswordPolicy.class)) {\n             result = (E) new JPAPasswordPolicy();\n+        } else if (reference.equals(PropagationPolicy.class)) {\n+            result = (E) new JPAPropagationPolicy();\n         } else if (reference.equals(PushPolicy.class)) {\n             result = (E) new JPAPushPolicy();\n         } else if (reference.equals(PullPolicy.class)) {"},{"sha":"c30361bb6350a0b63dff0510390857e37759cf4a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtils.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtils.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n \n public class JPAPolicyUtils implements PolicyUtils {\n \n@@ -51,9 +52,6 @@ public Class<? extends Policy> policyClass() {\n             case PASSWORD:\n                 return PasswordPolicy.class;\n \n-            case PULL:\n-                return PullPolicy.class;\n-\n             case AUTH:\n                 return AuthPolicy.class;\n \n@@ -63,6 +61,12 @@ public Class<? extends Policy> policyClass() {\n             case ACCESS:\n                 return AccessPolicy.class;\n \n+            case PROPAGATION:\n+                return PropagationPolicy.class;\n+\n+            case PULL:\n+                return PullPolicy.class;\n+\n             case PUSH:\n             default:\n                 return PushPolicy.class;"},{"sha":"f13302a680da14b299d5574e470854c1beb33cc5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtilsFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.policy.PropagationPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.policy.PushPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -35,6 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n \n@@ -52,6 +54,8 @@ public PolicyUtils getInstance(final Policy policy) {\n             type = PolicyType.ACCOUNT;\n         } else if (policy instanceof PasswordPolicy) {\n             type = PolicyType.PASSWORD;\n+        } else if (policy instanceof PropagationPolicy) {\n+            type = PolicyType.PROPAGATION;\n         } else if (policy instanceof PullPolicy) {\n             type = PolicyType.PULL;\n         } else if (policy instanceof PushPolicy) {\n@@ -76,6 +80,8 @@ public PolicyUtils getInstance(final Class<? extends PolicyTO> policyClass) {\n             type = PolicyType.ACCOUNT;\n         } else if (policyClass == PasswordPolicyTO.class) {\n             type = PolicyType.PASSWORD;\n+        } else if (policyClass == PropagationPolicyTO.class) {\n+            type = PolicyType.PROPAGATION;\n         } else if (policyClass == PullPolicyTO.class) {\n             type = PolicyType.PULL;\n         } else if (policyClass == PushPolicyTO.class) {"},{"sha":"207886f38282cd13fd0663d3f269dfb3903a0f77","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPropagationPolicy.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.policy;\n+\n+import java.util.Optional;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.BackOffStrategy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n+\n+@Entity\n+@Table(name = JPAPropagationPolicy.TABLE)\n+public class JPAPropagationPolicy extends AbstractPolicy implements PropagationPolicy {\n+\n+    private static final long serialVersionUID = 17400846199535L;\n+\n+    public static final String TABLE = \"PropagationPolicy\";\n+\n+    @Enumerated(EnumType.STRING)\n+    @NotNull\n+    private BackOffStrategy backOffStrategy;\n+\n+    private String backOffParams;\n+\n+    @NotNull\n+    private Integer maxAttempts = 3;\n+\n+    @Override\n+    public BackOffStrategy getBackOffStrategy() {\n+        return backOffStrategy;\n+    }\n+\n+    @Override\n+    public void setBackOffStrategy(final BackOffStrategy backOffStrategy) {\n+        this.backOffStrategy = backOffStrategy;\n+    }\n+\n+    @Override\n+    public String getBackOffParams() {\n+        return backOffParams;\n+    }\n+\n+    @Override\n+    public void setBackOffParams(final String backOffParams) {\n+        this.backOffParams = backOffParams;\n+    }\n+\n+    @Override\n+    public int getMaxAttempts() {\n+        return Optional.ofNullable(maxAttempts).orElse(3);\n+    }\n+\n+    @Override\n+    public void setMaxAttempts(final int maxAttempts) {\n+        this.maxAttempts = maxAttempts;\n+    }\n+}"},{"sha":"d9efbda2626078582626fdd20389410af1828fd6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n@@ -64,6 +65,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPropagationPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n@@ -130,6 +132,9 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAPropagationPolicy propagationPolicy;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPullPolicy pullPolicy;\n \n@@ -310,6 +315,17 @@ public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n     }\n \n+    @Override\n+    public PropagationPolicy getPropagationPolicy() {\n+        return propagationPolicy;\n+    }\n+\n+    @Override\n+    public void setPropagationPolicy(final PropagationPolicy propagationPolicy) {\n+        checkType(propagationPolicy, JPAPropagationPolicy.class);\n+        this.propagationPolicy = (JPAPropagationPolicy) propagationPolicy;\n+    }\n+\n     @Override\n     public PullPolicy getPullPolicy() {\n         return pullPolicy;"},{"sha":"1607f0d7ee69f784460002712ddea39fe6e9c89f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":105,"deletions":16,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.types.BackOffStrategy;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -41,12 +42,14 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n@@ -78,6 +81,12 @@ public void findAll() {\n \n     @Test\n     public void findByKey() {\n+        PropagationPolicy propagationPolicy = policyDAO.find(\"89d322db-9878-420c-b49c-67be13df9a12\");\n+        assertNotNull(propagationPolicy);\n+        assertEquals(BackOffStrategy.FIXED, propagationPolicy.getBackOffStrategy());\n+        assertEquals(\"10000\", propagationPolicy.getBackOffParams());\n+        assertEquals(5, propagationPolicy.getMaxAttempts());\n+\n         PullPolicy pullPolicy = policyDAO.find(\"880f8553-069b-4aed-9930-2cd53873f544\");\n         assertNotNull(pullPolicy);\n \n@@ -125,6 +134,10 @@ public void findByKey() {\n \n     @Test\n     public void findByType() {\n+        List<PropagationPolicy> propagationPolicies = policyDAO.find(PropagationPolicy.class);\n+        assertNotNull(propagationPolicies);\n+        assertFalse(propagationPolicies.isEmpty());\n+\n         List<PullPolicy> pullPolicies = policyDAO.find(PullPolicy.class);\n         assertNotNull(pullPolicies);\n         assertFalse(pullPolicies.isEmpty());\n@@ -143,10 +156,30 @@ public void findByType() {\n     }\n \n     @Test\n-    public void create() {\n-        PullPolicy policy = entityFactory.newEntity(PullPolicy.class);\n-        policy.setConflictResolutionAction(ConflictResolutionAction.IGNORE);\n-        policy.setName(\"Pull policy\");\n+    public void createPropagation() {\n+        int beforeCount = policyDAO.findAll().size();\n+\n+        PropagationPolicy propagationPolicy = entityFactory.newEntity(PropagationPolicy.class);\n+        propagationPolicy.setName(\"Propagation policy\");\n+        propagationPolicy.setMaxAttempts(5);\n+        propagationPolicy.setBackOffStrategy(BackOffStrategy.EXPONENTIAL);\n+        propagationPolicy.setBackOffParams(propagationPolicy.getBackOffStrategy().getDefaultBackOffParams());\n+\n+        propagationPolicy = policyDAO.save(propagationPolicy);\n+        assertNotNull(propagationPolicy);\n+        assertEquals(5, propagationPolicy.getMaxAttempts());\n+        assertEquals(BackOffStrategy.EXPONENTIAL, propagationPolicy.getBackOffStrategy());\n+        assertEquals(BackOffStrategy.EXPONENTIAL.getDefaultBackOffParams(), propagationPolicy.getBackOffParams());\n+\n+        int afterCount = policyDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+    }\n+\n+    @Test\n+    public void createPull() {\n+        PullPolicy pullPolicy = entityFactory.newEntity(PullPolicy.class);\n+        pullPolicy.setConflictResolutionAction(ConflictResolutionAction.IGNORE);\n+        pullPolicy.setName(\"Pull policy\");\n \n         final String pullURuleName = \"net.tirasa.pull.correlation.TirasaURule\";\n         final String pullGRuleName = \"net.tirasa.pull.correlation.TirasaGRule\";\n@@ -160,9 +193,9 @@ public void create() {\n \n         PullCorrelationRuleEntity rule1 = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n         rule1.setAnyType(anyTypeDAO.findUser());\n-        rule1.setPullPolicy(policy);\n+        rule1.setPullPolicy(pullPolicy);\n         rule1.setImplementation(impl1);\n-        policy.add(rule1);\n+        pullPolicy.add(rule1);\n \n         Implementation impl2 = entityFactory.newEntity(Implementation.class);\n         impl2.setKey(pullGRuleName);\n@@ -173,19 +206,67 @@ public void create() {\n \n         PullCorrelationRuleEntity rule2 = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n         rule2.setAnyType(anyTypeDAO.findGroup());\n-        rule2.setPullPolicy(policy);\n+        rule2.setPullPolicy(pullPolicy);\n         rule2.setImplementation(impl2);\n-        policy.add(rule2);\n+        pullPolicy.add(rule2);\n \n-        policy = policyDAO.save(policy);\n+        pullPolicy = policyDAO.save(pullPolicy);\n \n-        assertNotNull(policy);\n+        assertNotNull(pullPolicy);\n         assertEquals(pullURuleName,\n-                policy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n+                pullPolicy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n         assertEquals(pullGRuleName,\n-                policy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n+                pullPolicy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n+    }\n+\n+    @Test\n+    public void createPush() {\n+        PushPolicy pushPolicy = entityFactory.newEntity(PushPolicy.class);\n+        pushPolicy.setName(\"Push policy\");\n+        pushPolicy.setConflictResolutionAction(ConflictResolutionAction.IGNORE);\n+\n+        final String pushURuleName = \"net.tirasa.push.correlation.TirasaURule\";\n+        final String pushGRuleName = \"net.tirasa.push.correlation.TirasaGRule\";\n+\n+        Implementation impl1 = entityFactory.newEntity(Implementation.class);\n+        impl1.setKey(pushURuleName);\n+        impl1.setEngine(ImplementationEngine.JAVA);\n+        impl1.setType(IdMImplementationType.PUSH_CORRELATION_RULE);\n+        impl1.setBody(PushCorrelationRule.class.getName());\n+        impl1 = implementationDAO.save(impl1);\n+\n+        PushCorrelationRuleEntity rule1 = entityFactory.newEntity(PushCorrelationRuleEntity.class);\n+        rule1.setAnyType(anyTypeDAO.findUser());\n+        rule1.setPushPolicy(pushPolicy);\n+        rule1.setImplementation(impl1);\n+        pushPolicy.add(rule1);\n+\n+        Implementation impl2 = entityFactory.newEntity(Implementation.class);\n+        impl2.setKey(pushGRuleName);\n+        impl2.setEngine(ImplementationEngine.JAVA);\n+        impl2.setType(IdMImplementationType.PUSH_CORRELATION_RULE);\n+        impl2.setBody(PushCorrelationRule.class.getName());\n+        impl2 = implementationDAO.save(impl2);\n+\n+        PushCorrelationRuleEntity rule2 = entityFactory.newEntity(PushCorrelationRuleEntity.class);\n+        rule2.setAnyType(anyTypeDAO.findGroup());\n+        rule2.setPushPolicy(pushPolicy);\n+        rule2.setImplementation(impl2);\n+        pushPolicy.add(rule2);\n+\n+        pushPolicy = policyDAO.save(pushPolicy);\n+\n+        assertNotNull(pushPolicy);\n+        assertEquals(pushURuleName,\n+                pushPolicy.getCorrelationRule(anyTypeDAO.findUser()).get().getImplementation().getKey());\n+        assertEquals(pushGRuleName,\n+                pushPolicy.getCorrelationRule(anyTypeDAO.findGroup()).get().getImplementation().getKey());\n+    }\n \n+    @Test\n+    public void createAccess() {\n         int beforeCount = policyDAO.findAll().size();\n+\n         AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n         accessPolicy.setName(\"AttrReleasePolicyAllowEverything\");\n \n@@ -200,8 +281,12 @@ public void create() {\n \n         int afterCount = policyDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);\n+    }\n+\n+    @Test\n+    public void createAuth() {\n+        int beforeCount = policyDAO.findAll().size();\n \n-        beforeCount = policyDAO.findAll().size();\n         AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n         authPolicy.setName(\"AuthPolicyTest\");\n \n@@ -215,10 +300,14 @@ public void create() {\n         assertNotNull(authPolicy);\n         assertNotNull(authPolicy.getKey());\n \n-        afterCount = policyDAO.findAll().size();\n+        int afterCount = policyDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);\n+    }\n+\n+    @Test\n+    public void createAttrRelease() {\n+        int beforeCount = policyDAO.findAll().size();\n \n-        beforeCount = policyDAO.findAll().size();\n         AttrReleasePolicy attrReleasePolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n         attrReleasePolicy.setName(\"AttrReleasePolicyAllowEverything\");\n         attrReleasePolicy.setStatus(Boolean.TRUE);\n@@ -235,7 +324,7 @@ public void create() {\n         assertNotNull(attrReleasePolicy.getStatus());\n         assertNotNull(((DefaultAttrReleasePolicyConf) attrReleasePolicy.getConf()).getAllowedAttrs());\n \n-        afterCount = policyDAO.findAll().size();\n+        int afterCount = policyDAO.findAll().size();\n         assertEquals(afterCount, beforeCount + 1);\n     }\n "},{"sha":"05ab3f096107967c09eeec60e80acb6827c53326","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -181,7 +181,7 @@ public List<Group> findDynGroups(final User user) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered(actualKey -> {\n+                forEach(actualKey -> {\n                     Group group = groupDAO.find(actualKey.toString());\n                     if (group == null) {\n                     } else if (!result.contains(group)) {\n@@ -282,7 +282,7 @@ public List<Group> findDynGroups(final AnyObject anyObject) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered(actualKey -> {\n+                forEach(actualKey -> {\n                     Group group = groupDAO.find(actualKey.toString());\n                     if (group == null) {\n                     } else if (!result.contains(group)) {"},{"sha":"cde0f367c55313ff46d0c3ebe1b9715c5c4d2460","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -210,7 +209,7 @@ public void delete() {\n         List<User> users = userDAO.findByResource(resource);\n         assertNotNull(users);\n \n-        Set<String> userKeys = users.stream().map(Entity::getKey).collect(Collectors.toSet());\n+        Set<String> userKeys = users.stream().map(User::getKey).collect(Collectors.toSet());\n         // -------------------------------------\n \n         // Get tasks\n@@ -229,13 +228,11 @@ public void delete() {\n         assertNull(actual);\n \n         // resource must be not referenced any more from users\n-        userKeys.stream().\n-                map(key -> userDAO.find(key)).\n-                map(actualUser -> {\n-                    assertNotNull(actualUser);\n-                    return actualUser;\n-                }).forEachOrdered((actualUser) -> userDAO.findAllResources(actualUser).\n-                        forEach(res -> assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()))));\n+        userKeys.stream().map(userDAO::find).forEach(user -> {\n+            assertNotNull(user);\n+            userDAO.findAllResources(user).\n+                    forEach(r -> assertFalse(r.getKey().equalsIgnoreCase(resource.getKey())));\n+        });\n \n         // resource must be not referenced any more from the connector\n         ConnInstance actualConnector = connInstanceDAO.find(connector.getKey());\n@@ -260,7 +257,7 @@ public void emptyMapping() {\n         List<? extends MappingItem> items = ldap.getProvision(anyTypeDAO.findGroup()).get().getMapping().getItems();\n         assertNotNull(items);\n         assertFalse(items.isEmpty());\n-        List<String> itemKeys = items.stream().map(Entity::getKey).collect(Collectors.toList());\n+        List<String> itemKeys = items.stream().map(MappingItem::getKey).collect(Collectors.toList());\n \n         Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup()).get();\n         virSchemaDAO.findByProvision(groupProvision)."},{"sha":"817ce372de8a43bca3aef57e0ad6155d2b28df89","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -43,7 +43,9 @@ under the License.\n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n-  \n+  <PropagationPolicy id=\"89d322db-9878-420c-b49c-67be13df9a12\" name=\"sample propagation policy\"\n+                     maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n+\n   <!-- Authentication policies -->\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n               jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>\n@@ -791,7 +793,8 @@ under the License.\n \n   <ExternalResource id=\"resource-db-scripted\" connector_id=\"a6d017fd-a705-4507-bb7c-6ab6a6745997\"\n                     randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n-                    enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"/>\n+                    enforceMandatoryCondition=\"0\" overrideCapabilities=\"0\"\n+                    propagationPolicy_id=\"89d322db-9878-420c-b49c-67be13df9a12\"/>\n \n   <ExternalResource id=\"rest-target-resource\" connector_id=\"44c02549-19c3-483c-8025-4919c3283c37\"\n                     createTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"  deleteTraceLevel=\"ALL\" provisioningTraceLevel=\"ALL\" "},{"sha":"470ba420406158a907f40f74de2a41b02294d07e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -42,6 +42,13 @@ public interface PropagationTaskExecutor {\n      */\n     String MANDATORY_NULL_OR_EMPTY_ATTR_NAME = \"__MANDATORY_NULL_OR_EMPTY__\";\n \n+    /**\n+     * Remove any RetryTemplate defined for the given External Resource from local cache.\n+     *\n+     * @param resource External Resource name\n+     */\n+    void expireRetryTemplate(String resource);\n+\n     /**\n      * Execute the given task and returns the generated {@link TaskExec}.\n      *\n@@ -62,6 +69,5 @@ public interface PropagationTaskExecutor {\n      * @param executor the executor of this task\n      * @return reporter to report propagation execution status\n      */\n-    PropagationReporter execute(\n-            Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync, String executor);\n+    PropagationReporter execute(Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync, String executor);\n }"},{"sha":"aaff2529375735d6ad20695c64ed2a3b649b9bc7","filename":"core/provisioning-java/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -48,6 +48,10 @@ under the License.\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.retry</groupId>\n+      <artifactId>spring-retry</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-jdbc</artifactId>"},{"sha":"03613fbfcca9b224416dc2bb33600b1800503ba2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":46,"deletions":24,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -219,8 +219,9 @@ public AsyncConnectorFacade asyncConnectorFacade() {\n \n     /**\n      * Annotated as {@code @Primary} because it will be used by {@code @Async} in {@link AsyncConnectorFacade}.\n+     *\n      * @param provisioningProperties configuration properties\n-     * \n+     *\n      * @return executor\n      */\n     @Bean\n@@ -238,8 +239,10 @@ public ThreadPoolTaskExecutor asyncConnectorFacadeExecutor(final ProvisioningPro\n \n     @Bean\n     public AsyncConfigurer asyncConfigurer(@Qualifier(\"asyncConnectorFacadeExecutor\")\n-                                           final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor) {\n+            final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor) {\n+\n         return new AsyncConfigurer() {\n+\n             @Override\n             public Executor getAsyncExecutor() {\n                 return asyncConnectorFacadeExecutor;\n@@ -255,7 +258,7 @@ public Executor getAsyncExecutor() {\n      */\n     @Bean\n     public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor(\n-        final ProvisioningProperties provisioningProperties) {\n+            final ProvisioningProperties provisioningProperties) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n         executor.setCorePoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getCorePoolSize());\n         executor.setMaxPoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getMaxPoolSize());\n@@ -285,7 +288,7 @@ public SchedulerDBInit quartzDataSourceInit(final ProvisioningProperties provisi\n     @Lazy(false)\n     @Bean\n     public SchedulerFactoryBean scheduler(final ApplicationContext ctx,\n-                                          final ProvisioningProperties provisioningProperties) {\n+            final ProvisioningProperties provisioningProperties) {\n         SchedulerFactoryBean scheduler = new SchedulerFactoryBean();\n         scheduler.setAutoStartup(true);\n         scheduler.setApplicationContext(ctx);\n@@ -347,7 +350,7 @@ public JobManager jobManager(\n     @ConditionalOnMissingBean\n     @Bean\n     public JavaMailSender mailSender(final ProvisioningProperties provisioningProperties)\n-        throws IllegalArgumentException, IOException {\n+            throws IllegalArgumentException, IOException {\n         JavaMailSenderImpl mailSender = new JavaMailSenderImpl() {\n \n             @Override\n@@ -582,7 +585,7 @@ public ConnIdBundleManager connIdBundleManager(final ProvisioningProperties prov\n \n     @ConditionalOnMissingBean\n     @Bean\n-        public IntAttrNameParser intAttrNameParser(\n+    public IntAttrNameParser intAttrNameParser(\n             final AnyUtilsFactory anyUtilsFactory,\n             final PlainSchemaDAO plainSchemaDAO,\n             final DerSchemaDAO derSchemaDAO,\n@@ -764,16 +767,21 @@ public NotificationJobDelegate notificationJobDelegate(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public NotificationJob notificationJob(final NotificationJobDelegate delegate,\n-                                           final DomainHolder domainHolder,\n-                                           final SecurityProperties securityProperties) {\n+    public NotificationJob notificationJob(\n+            final NotificationJobDelegate delegate,\n+            final DomainHolder domainHolder,\n+            final SecurityProperties securityProperties) {\n+\n         return new NotificationJob(securityProperties, domainHolder, delegate);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ReportJobDelegate reportJobDelegate(final ReportDAO reportDAO, final ReportExecDAO reportExecDAO,\n-                                               final EntityFactory entityFactory) {\n+    public ReportJobDelegate reportJobDelegate(\n+            final ReportDAO reportDAO,\n+            final ReportExecDAO reportExecDAO,\n+            final EntityFactory entityFactory) {\n+\n         return new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory);\n     }\n \n@@ -870,8 +878,10 @@ public AnyTypeDataBinder anyTypeDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ApplicationDataBinder applicationDataBinder(final ApplicationDAO applicationDAO,\n-                                                       final EntityFactory entityFactory) {\n+    public ApplicationDataBinder applicationDataBinder(\n+            final ApplicationDAO applicationDAO,\n+            final EntityFactory entityFactory) {\n+\n         return new ApplicationDataBinderImpl(applicationDAO, entityFactory);\n     }\n \n@@ -895,8 +905,10 @@ public AuthProfileDataBinder authProfileDataBinder(final EntityFactory entityFac\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ClientAppDataBinder clientAppDataBinder(final PolicyDAO policyDAO,\n-                                                   final EntityFactory entityFactory) {\n+    public ClientAppDataBinder clientAppDataBinder(\n+            final PolicyDAO policyDAO,\n+            final EntityFactory entityFactory) {\n+\n         return new ClientAppDataBinderImpl(policyDAO, entityFactory);\n     }\n \n@@ -913,16 +925,22 @@ public ConnInstanceDataBinder connInstanceDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DelegationDataBinder delegationDataBinder(final UserDAO userDAO, final RoleDAO roleDAO,\n-                                                     final EntityFactory entityFactory) {\n+    public DelegationDataBinder delegationDataBinder(\n+            final UserDAO userDAO,\n+            final RoleDAO roleDAO,\n+            final EntityFactory entityFactory) {\n+\n         return new DelegationDataBinderImpl(userDAO, roleDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DynRealmDataBinder dynRealmDataBinder(final AnyTypeDAO anyTypeDAO, final DynRealmDAO dynRealmDAO,\n-                                                 final SearchCondVisitor searchCondVisitor,\n-                                                 final EntityFactory entityFactory) {\n+    public DynRealmDataBinder dynRealmDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final SearchCondVisitor searchCondVisitor,\n+            final EntityFactory entityFactory) {\n+\n         return new DynRealmDataBinderImpl(anyTypeDAO, dynRealmDAO, entityFactory, searchCondVisitor);\n     }\n \n@@ -1066,7 +1084,8 @@ public ResourceDataBinder resourceDataBinder(\n             final AnyTypeClassDAO anyTypeClassDAO,\n             final ImplementationDAO implementationDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n-            final IntAttrNameParser intAttrNameParser) {\n+            final IntAttrNameParser intAttrNameParser,\n+            final PropagationTaskExecutor propagationTaskExecutor) {\n \n         return new ResourceDataBinderImpl(\n                 anyTypeDAO,\n@@ -1077,7 +1096,8 @@ public ResourceDataBinder resourceDataBinder(\n                 implementationDAO,\n                 plainSchemaDAO,\n                 entityFactory,\n-                intAttrNameParser);\n+                intAttrNameParser,\n+                propagationTaskExecutor);\n     }\n \n     @ConditionalOnMissingBean\n@@ -1224,8 +1244,10 @@ public UserDataBinder userDataBinder(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public WAConfigDataBinder waConfigDataBinder(final WAConfigDAO waConfigDAO,\n-                                                 final EntityFactory entityFactory) {\n+    public WAConfigDataBinder waConfigDataBinder(\n+            final WAConfigDAO waConfigDAO,\n+            final EntityFactory entityFactory) {\n+\n         return new WAConfigDataBinderImpl(waConfigDAO, entityFactory);\n     }\n "},{"sha":"afbe9ca61e413bb7ceeb89601cd20541b1a9a1cf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.PropagationPolicyTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n@@ -43,6 +44,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n@@ -138,6 +140,17 @@ protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO\n                     accountPolicy.add(resource);\n                 }\n             });\n+        } else if (policyTO instanceof PropagationPolicyTO) {\n+            if (result == null) {\n+                result = (T) entityFactory.newEntity(PropagationPolicy.class);\n+            }\n+\n+            PropagationPolicy propagationPolicy = PropagationPolicy.class.cast(result);\n+            PropagationPolicyTO propagationPolicyTO = PropagationPolicyTO.class.cast(policyTO);\n+\n+            propagationPolicy.setBackOffStrategy(propagationPolicyTO.getBackOffStrategy());\n+            propagationPolicy.setBackOffParams(propagationPolicyTO.getBackOffParams());\n+            propagationPolicy.setMaxAttempts(propagationPolicyTO.getMaxAttempts());\n         } else if (policyTO instanceof PullPolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(PullPolicy.class);\n@@ -169,8 +182,8 @@ protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO\n                 }\n             });\n             // remove all rules not contained in the TO\n-            pullPolicy.getCorrelationRules().removeIf(anyFilter\n-                    -> !pullPolicyTO.getCorrelationRules().containsKey(anyFilter.getAnyType().getKey()));\n+            pullPolicy.getCorrelationRules().removeIf(anyFilter -> !pullPolicyTO.getCorrelationRules().\n+                    containsKey(anyFilter.getAnyType().getKey()));\n         } else if (policyTO instanceof PushPolicyTO) {\n             if (result == null) {\n                 result = (T) entityFactory.newEntity(PushPolicy.class);\n@@ -289,6 +302,14 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n \n             accountPolicyTO.getPassthroughResources().addAll(\n                     accountPolicy.getResources().stream().map(Entity::getKey).collect(Collectors.toList()));\n+        } else if (policy instanceof PropagationPolicy) {\n+            PropagationPolicy propagationPolicy = PropagationPolicy.class.cast(policy);\n+            PropagationPolicyTO propagationPolicyTO = new PropagationPolicyTO();\n+            policyTO = (T) propagationPolicyTO;\n+\n+            propagationPolicyTO.setBackOffStrategy(propagationPolicy.getBackOffStrategy());\n+            propagationPolicyTO.setBackOffParams(propagationPolicy.getBackOffParams());\n+            propagationPolicyTO.setMaxAttempts(propagationPolicy.getMaxAttempts());\n         } else if (policy instanceof PullPolicy) {\n             PullPolicy pullPolicy = PullPolicy.class.cast(policy);\n             PullPolicyTO pullPolicyTO = new PullPolicyTO();"},{"sha":"6cbf8cd4b01f5f48e1288521b1794b241a7cc104","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -60,6 +60,7 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n@@ -69,6 +70,7 @@\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -95,6 +97,8 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n \n     protected final IntAttrNameParser intAttrNameParser;\n \n+    protected final PropagationTaskExecutor propagationTaskExecutor;\n+\n     public ResourceDataBinderImpl(\n             final AnyTypeDAO anyTypeDAO,\n             final ConnInstanceDAO connInstanceDAO,\n@@ -104,7 +108,8 @@ public ResourceDataBinderImpl(\n             final ImplementationDAO implementationDAO,\n             final PlainSchemaDAO plainSchemaDAO,\n             final EntityFactory entityFactory,\n-            final IntAttrNameParser intAttrNameParser) {\n+            final IntAttrNameParser intAttrNameParser,\n+            final PropagationTaskExecutor propagationTaskExecutor) {\n \n         this.anyTypeDAO = anyTypeDAO;\n         this.connInstanceDAO = connInstanceDAO;\n@@ -115,6 +120,7 @@ public ResourceDataBinderImpl(\n         this.plainSchemaDAO = plainSchemaDAO;\n         this.entityFactory = entityFactory;\n         this.intAttrNameParser = intAttrNameParser;\n+        this.propagationTaskExecutor = propagationTaskExecutor;\n     }\n \n     @Override\n@@ -358,6 +364,14 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setAccountPolicy(resourceTO.getAccountPolicy() == null\n                 ? null : (AccountPolicy) policyDAO.find(resourceTO.getAccountPolicy()));\n \n+        if (resource.getPropagationPolicy() != null\n+                && !resource.getPropagationPolicy().getKey().equals(resourceTO.getPropagationPolicy())) {\n+\n+            propagationTaskExecutor.expireRetryTemplate(resource.getKey());\n+        }\n+        resource.setPropagationPolicy(resourceTO.getPropagationPolicy() == null\n+                ? null : (PropagationPolicy) policyDAO.find(resourceTO.getPropagationPolicy()));\n+\n         resource.setPullPolicy(resourceTO.getPullPolicy() == null\n                 ? null : (PullPolicy) policyDAO.find(resourceTO.getPullPolicy()));\n \n@@ -688,6 +702,9 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n         resourceTO.setAccountPolicy(resource.getAccountPolicy() == null\n                 ? null : resource.getAccountPolicy().getKey());\n \n+        resourceTO.setPropagationPolicy(resource.getPropagationPolicy() == null\n+                ? null : resource.getPropagationPolicy().getKey());\n+\n         resourceTO.setPullPolicy(resource.getPullPolicy() == null\n                 ? null : resource.getPullPolicy().getKey());\n "},{"sha":"e6daff8a3da56d5fc1689d7e114f31bd5a86d593","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":141,"deletions":42,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -20,7 +20,8 @@\n \n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n-import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n@@ -61,7 +62,6 @@\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n@@ -79,13 +79,21 @@\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.retry.RetryException;\n+import org.springframework.retry.backoff.ExponentialBackOffPolicy;\n+import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.SimpleRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(rollbackFor = { Throwable.class })\n public abstract class AbstractPropagationTaskExecutor implements PropagationTaskExecutor {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationTaskExecutor.class);\n \n+    protected final Map<String, RetryTemplate> retryTemplates = Collections.synchronizedMap(new HashMap<>());\n+\n     protected final ConnectorManager connectorManager;\n \n     protected final ConnObjectUtils connObjectUtils;\n@@ -146,6 +154,11 @@ public AbstractPropagationTaskExecutor(\n         this.outboundMatcher = outboundMatcher;\n     }\n \n+    @Override\n+    public void expireRetryTemplate(final String resource) {\n+        retryTemplates.remove(resource);\n+    }\n+\n     protected List<PropagationActions> getPropagationActions(final ExternalResource resource) {\n         List<PropagationActions> result = new ArrayList<>();\n \n@@ -298,6 +311,94 @@ protected PropagationTask buildTask(final PropagationTaskInfo taskInfo) {\n         return task;\n     }\n \n+    protected Optional<RetryTemplate> retryTemplate(final ExternalResource resource) {\n+        RetryTemplate retryTemplate = null;\n+\n+        if (resource.getPropagationPolicy() != null) {\n+            retryTemplate = retryTemplates.get(resource.getKey());\n+            if (retryTemplate == null) {\n+                retryTemplate = new RetryTemplate();\n+\n+                SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();\n+                retryPolicy.setMaxAttempts(resource.getPropagationPolicy().getMaxAttempts());\n+                retryTemplate.setRetryPolicy(retryPolicy);\n+\n+                String[] params = resource.getPropagationPolicy().getBackOffParams().split(\";\");\n+\n+                switch (resource.getPropagationPolicy().getBackOffStrategy()) {\n+                    case EXPONENTIAL:\n+                        ExponentialBackOffPolicy eBackOffPolicy = new ExponentialBackOffPolicy();\n+                        if (params.length > 0) {\n+                            try {\n+                                eBackOffPolicy.setInitialInterval(Long.valueOf(params[0]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to long: {}\", params[0], e);\n+                            }\n+                        }\n+                        if (params.length > 1) {\n+                            try {\n+                                eBackOffPolicy.setMaxInterval(Long.valueOf(params[1]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to long: {}\", params[1], e);\n+                            }\n+                        }\n+                        if (params.length > 2) {\n+                            try {\n+                                eBackOffPolicy.setMultiplier(Double.valueOf(params[2]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to double: {}\", params[2], e);\n+                            }\n+                        }\n+                        retryTemplate.setBackOffPolicy(eBackOffPolicy);\n+                        break;\n+\n+                    case RANDOM:\n+                        ExponentialRandomBackOffPolicy erBackOffPolicy = new ExponentialRandomBackOffPolicy();\n+                        if (params.length > 0) {\n+                            try {\n+                                erBackOffPolicy.setInitialInterval(Long.valueOf(params[0]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to long: {}\", params[0], e);\n+                            }\n+                        }\n+                        if (params.length > 1) {\n+                            try {\n+                                erBackOffPolicy.setMaxInterval(Long.valueOf(params[1]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to long: {}\", params[1], e);\n+                            }\n+                        }\n+                        if (params.length > 2) {\n+                            try {\n+                                erBackOffPolicy.setMultiplier(Double.valueOf(params[2]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to double: {}\", params[2], e);\n+                            }\n+                        }\n+                        retryTemplate.setBackOffPolicy(erBackOffPolicy);\n+                        break;\n+\n+                    case FIXED:\n+                    default:\n+                        FixedBackOffPolicy fBackOffPolicy = new FixedBackOffPolicy();\n+                        if (params.length > 0) {\n+                            try {\n+                                fBackOffPolicy.setBackOffPeriod(Long.valueOf(params[0]));\n+                            } catch (NumberFormatException e) {\n+                                LOG.error(\"Could not convert to long: {}\", params[0], e);\n+                            }\n+\n+                        }\n+                        retryTemplate.setBackOffPolicy(fBackOffPolicy);\n+                }\n+\n+                retryTemplates.put(resource.getKey(), retryTemplate);\n+            }\n+        }\n+\n+        return Optional.ofNullable(retryTemplate);\n+    }\n+\n     @Override\n     public TaskExec execute(\n             final PropagationTaskInfo taskInfo,\n@@ -306,6 +407,25 @@ public TaskExec execute(\n \n         PropagationTask task = buildTask(taskInfo);\n \n+        return retryTemplate(task.getResource()).map(rt -> rt.execute(context -> {\n+            LOG.debug(\"#{} Propagation attempt\", context.getRetryCount());\n+\n+            TaskExec exec = doExecute(taskInfo, task, reporter, executor);\n+            if (context.getRetryCount() < task.getResource().getPropagationPolicy().getMaxAttempts() - 1\n+                    && !ExecStatus.SUCCESS.name().equals(exec.getStatus())) {\n+\n+                throw new RetryException(\"Attempt #\" + context.getRetryCount() + \" failed\");\n+            }\n+            return exec;\n+        })).orElseGet(() -> doExecute(taskInfo, task, reporter, executor));\n+    }\n+\n+    protected TaskExec doExecute(\n+            final PropagationTaskInfo taskInfo,\n+            final PropagationTask task,\n+            final PropagationReporter reporter,\n+            final String executor) {\n+\n         Connector connector = taskInfo.getConnector() == null\n                 ? connectorManager.getConnector(task.getResource())\n                 : taskInfo.getConnector();\n@@ -314,9 +434,9 @@ public TaskExec execute(\n \n         OffsetDateTime start = OffsetDateTime.now();\n \n-        TaskExec execution = entityFactory.newEntity(TaskExec.class);\n-        execution.setStatus(ExecStatus.CREATED.name());\n-        execution.setExecutor(executor);\n+        TaskExec exec = entityFactory.newEntity(TaskExec.class);\n+        exec.setStatus(ExecStatus.CREATED.name());\n+        exec.setExecutor(executor);\n \n         String taskExecutionMessage = null;\n         String failureReason = null;\n@@ -363,7 +483,7 @@ public TaskExec execute(\n                 default:\n             }\n \n-            execution.setStatus(propagationAttempted.get()\n+            exec.setStatus(propagationAttempted.get()\n                     ? ExecStatus.SUCCESS.name()\n                     : ExecStatus.NOT_ATTEMPTED.name());\n \n@@ -390,14 +510,14 @@ public TaskExec execute(\n             }\n \n             try {\n-                execution.setStatus(ExecStatus.FAILURE.name());\n+                exec.setStatus(ExecStatus.FAILURE.name());\n             } catch (Exception wft) {\n-                LOG.error(\"While executing KO action on {}\", execution, wft);\n+                LOG.error(\"While executing KO action on {}\", exec, wft);\n             }\n \n             propagationAttempted.set(true);\n \n-            actions.forEach(action -> action.onError(task, execution, e));\n+            actions.forEach(action -> action.onError(task, exec, e));\n         } finally {\n             // Try to read remote object AFTER any actual operation\n             if (connector != null) {\n@@ -424,17 +544,17 @@ public TaskExec execute(\n                         build();\n             }\n \n-            execution.setStart(start);\n-            execution.setMessage(taskExecutionMessage);\n-            execution.setEnd(OffsetDateTime.now());\n+            exec.setStart(start);\n+            exec.setMessage(taskExecutionMessage);\n+            exec.setEnd(OffsetDateTime.now());\n \n-            LOG.debug(\"Execution finished: {}\", execution);\n+            LOG.debug(\"Execution finished: {}\", exec);\n \n-            if (hasToBeregistered(task, execution)) {\n-                LOG.debug(\"Execution to be stored: {}\", execution);\n+            if (hasToBeregistered(task, exec)) {\n+                LOG.debug(\"Execution to be stored: {}\", exec);\n \n-                execution.setTask(task);\n-                task.add(execution);\n+                exec.setTask(task);\n+                task.add(exec);\n \n                 taskDAO.save(task);\n             }\n@@ -447,15 +567,15 @@ public TaskExec execute(\n                                     ? outboundMatcher.getFIQL(beforeObj, provision)\n                                     : null;\n             reporter.onSuccessOrNonPriorityResourceFailures(taskInfo,\n-                    ExecStatus.valueOf(execution.getStatus()),\n+                    ExecStatus.valueOf(exec.getStatus()),\n                     failureReason,\n                     fiql,\n                     beforeObj,\n                     afterObj);\n         }\n \n         for (PropagationActions action : actions) {\n-            action.after(task, execution, afterObj);\n+            action.after(task, exec, afterObj);\n         }\n         // SYNCOPE-1136\n         String anyTypeKind = task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase();\n@@ -470,7 +590,7 @@ public TaskExec execute(\n                 operation);\n \n         if (notificationsAvailable || auditRequested) {\n-            ExecTO execTO = taskDataBinder.getExecTO(execution);\n+            ExecTO execTO = taskDataBinder.getExecTO(exec);\n             notificationManager.createTasks(\n                     AuthContextUtils.getWho(),\n                     AuditElements.EventCategoryType.PROPAGATION,\n@@ -494,13 +614,9 @@ public TaskExec execute(\n                     taskInfo);\n         }\n \n-        return execution;\n+        return exec;\n     }\n \n-    protected abstract void doExecute(\n-            Collection<PropagationTaskInfo> taskInfos, PropagationReporter reporter, boolean nullPriorityAsync,\n-            String executor);\n-\n     protected TaskExec rejected(\n             final PropagationTaskInfo taskInfo,\n             final String rejectReason,\n@@ -536,23 +652,6 @@ protected TaskExec rejected(\n         return execution;\n     }\n \n-    @Override\n-    public PropagationReporter execute(\n-            final Collection<PropagationTaskInfo> taskInfos,\n-            final boolean nullPriorityAsync,\n-            final String executor) {\n-\n-        PropagationReporter reporter = new DefaultPropagationReporter();\n-        try {\n-            doExecute(taskInfos, reporter, nullPriorityAsync, executor);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Error propagation priority resource\", e);\n-            reporter.onPriorityResourceFailure(e.getResourceName(), taskInfos);\n-        }\n-\n-        return reporter;\n-    }\n-\n     /**\n      * Check whether an execution has to be stored, for a given task.\n      *"},{"sha":"f1d1218bdaf629f83177f1cabdc3c4043a84b717","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":59,"deletions":52,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -120,72 +120,79 @@ public PriorityPropagationTaskExecutor(\n     }\n \n     @Override\n-    protected void doExecute(\n+    public PropagationReporter execute(\n             final Collection<PropagationTaskInfo> taskInfos,\n-            final PropagationReporter reporter,\n             final boolean nullPriorityAsync,\n             final String executor) {\n \n-        List<PropagationTaskInfo> prioritizedTasks = taskInfos.stream().\n-                filter(task -> task.getExternalResource().getPropagationPriority() != null).\n-                sorted(Comparator.comparing(task -> task.getExternalResource().getPropagationPriority())).\n-                collect(Collectors.toList());\n-        LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n-\n-        List<PropagationTaskInfo> concurrentTasks = taskInfos.stream().\n-                filter(task -> !prioritizedTasks.contains(task)).\n-                collect(Collectors.toList());\n-        LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n-\n-        // first process priority resources sequentially and fail as soon as any propagation failure is reported\n-        prioritizedTasks.forEach(task -> {\n-            TaskExec execution = null;\n-            ExecStatus execStatus;\n-            String errorMessage = null;\n-            try {\n-                execution = newPropagationTaskCallable(task, reporter, executor).call();\n-                execStatus = ExecStatus.valueOf(execution.getStatus());\n-            } catch (Exception e) {\n-                LOG.error(\"Unexpected exception\", e);\n-                execStatus = ExecStatus.FAILURE;\n-                errorMessage = e.getMessage();\n-            }\n-            if (execStatus != ExecStatus.SUCCESS) {\n-                throw new PropagationException(\n-                        task.getResource(),\n-                        Optional.ofNullable(execution).map(Exec::getMessage).orElse(errorMessage));\n-            }\n-        });\n-\n-        // then process non-priority resources concurrently...\n-        if (!concurrentTasks.isEmpty()) {\n-            CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(taskExecutor);\n-            List<Future<TaskExec>> futures = new ArrayList<>();\n-\n-            concurrentTasks.forEach(taskInfo -> {\n+        PropagationReporter reporter = new DefaultPropagationReporter();\n+        try {\n+            List<PropagationTaskInfo> prioritizedTasks = taskInfos.stream().\n+                    filter(task -> task.getExternalResource().getPropagationPriority() != null).\n+                    sorted(Comparator.comparing(task -> task.getExternalResource().getPropagationPriority())).\n+                    collect(Collectors.toList());\n+            LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n+\n+            List<PropagationTaskInfo> concurrentTasks = taskInfos.stream().\n+                    filter(task -> !prioritizedTasks.contains(task)).\n+                    collect(Collectors.toList());\n+            LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n+\n+            // first process priority resources sequentially and fail as soon as any propagation failure is reported\n+            prioritizedTasks.forEach(task -> {\n+                TaskExec exec = null;\n+                ExecStatus execStatus;\n+                String errorMessage = null;\n                 try {\n-                    futures.add(completionService.submit(newPropagationTaskCallable(taskInfo, reporter, executor)));\n-\n-                    if (nullPriorityAsync) {\n-                        reporter.onSuccessOrNonPriorityResourceFailures(\n-                                taskInfo, ExecStatus.CREATED, null, null, null, null);\n-                    }\n+                    exec = newPropagationTaskCallable(task, reporter, executor).call();\n+                    execStatus = ExecStatus.valueOf(exec.getStatus());\n                 } catch (Exception e) {\n-                    LOG.error(\"While submitting task for async execution: {}\", taskInfo, e);\n-                    rejected(taskInfo, e.getMessage(), reporter, executor);\n+                    LOG.error(\"Unexpected exception\", e);\n+                    execStatus = ExecStatus.FAILURE;\n+                    errorMessage = e.getMessage();\n+                }\n+                if (execStatus != ExecStatus.SUCCESS) {\n+                    throw new PropagationException(\n+                            task.getResource(),\n+                            Optional.ofNullable(exec).map(Exec::getMessage).orElse(errorMessage));\n                 }\n             });\n \n-            // ...waiting for all callables to complete, if async processing was not required\n-            if (!nullPriorityAsync) {\n-                futures.forEach(future -> {\n+            // then process non-priority resources concurrently...\n+            if (!concurrentTasks.isEmpty()) {\n+                CompletionService<TaskExec> completionService = new ExecutorCompletionService<>(taskExecutor);\n+                List<Future<TaskExec>> futures = new ArrayList<>();\n+\n+                concurrentTasks.forEach(taskInfo -> {\n                     try {\n-                        future.get();\n+                        futures.add(completionService.submit(newPropagationTaskCallable(taskInfo, reporter, executor)));\n+\n+                        if (nullPriorityAsync) {\n+                            reporter.onSuccessOrNonPriorityResourceFailures(\n+                                    taskInfo, ExecStatus.CREATED, null, null, null, null);\n+                        }\n                     } catch (Exception e) {\n-                        LOG.error(\"Unexpected exception\", e);\n+                        LOG.error(\"While submitting task for async execution: {}\", taskInfo, e);\n+                        rejected(taskInfo, e.getMessage(), reporter, executor);\n                     }\n                 });\n+\n+                // ...waiting for all callables to complete, if async processing was not required\n+                if (!nullPriorityAsync) {\n+                    futures.forEach(future -> {\n+                        try {\n+                            future.get();\n+                        } catch (Exception e) {\n+                            LOG.error(\"Unexpected exception\", e);\n+                        }\n+                    });\n+                }\n             }\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation priority resource\", e);\n+            reporter.onPriorityResourceFailure(e.getResourceName(), taskInfos);\n         }\n+\n+        return reporter;\n     }\n }"},{"sha":"9cbe4bfd6ccb5b03cdacadc5ce74544c7b9d1464","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/PoliciesITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -149,7 +149,7 @@ private static void createPasswordPolicy(String name) {\n     }\n \n     private static void createPullPolicy(String name) {\n-        TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:5:link\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:6:link\");\n         TESTER.clickLink(\"body:content:tabbedPanel:panel:container:content:add\");\n         TESTER.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n \n@@ -244,7 +244,7 @@ private static void deletePasswordPolicy(String name) {\n     }\n \n     private static void deletePullPolicy(String name) {\n-        TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:5:link\");\n+        TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:6:link\");\n         Component component = findComponentByProp(\"name\",\n                 \"body:content:tabbedPanel:panel:container:content:\"\n                 + \"searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", name);"},{"sha":"7f250a1372329b89b38992360aa6b5adc6ce5a4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":29,"deletions":9,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -58,6 +58,8 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.PropagationPolicyTO;\n+import org.apache.syncope.common.lib.types.BackOffStrategy;\n \n public class PolicyITCase extends AbstractITCase {\n \n@@ -117,10 +119,13 @@ private PushPolicyTO buildPushPolicyTO() throws IOException {\n \n     @Test\n     public void listByType() {\n-        List<PullPolicyTO> policyTOs = policyService.list(PolicyType.PULL);\n+        List<PropagationPolicyTO> propagationPolicies = policyService.list(PolicyType.PROPAGATION);\n+        assertNotNull(propagationPolicies);\n+        assertFalse(propagationPolicies.isEmpty());\n \n-        assertNotNull(policyTOs);\n-        assertFalse(policyTOs.isEmpty());\n+        List<PullPolicyTO> pullPolicies = policyService.list(PolicyType.PULL);\n+        assertNotNull(pullPolicies);\n+        assertFalse(pullPolicies.isEmpty());\n     }\n \n     @Test\n@@ -141,6 +146,16 @@ public void getPasswordPolicy() {\n         assertTrue(policyTO.getUsedByRealms().containsAll(List.of(\"/\", \"/odd\", \"/even\")));\n     }\n \n+    @Test\n+    public void getPropagationPolicy() {\n+        PropagationPolicyTO policyTO =\n+                policyService.read(PolicyType.PROPAGATION, \"89d322db-9878-420c-b49c-67be13df9a12\");\n+\n+        assertNotNull(policyTO);\n+        assertTrue(policyTO.getUsedByResources().contains(RESOURCE_NAME_DBSCRIPTED));\n+        assertTrue(policyTO.getUsedByRealms().isEmpty());\n+    }\n+\n     @Test\n     public void getPullPolicy() {\n         PullPolicyTO policyTO = policyService.read(PolicyType.PULL, \"66691e96-285f-4464-bc19-e68384ea4c85\");\n@@ -151,17 +166,15 @@ public void getPullPolicy() {\n \n     @Test\n     public void getAuthPolicy() {\n-        AuthPolicyTO policyTO =\n-                policyService.read(PolicyType.AUTH, \"659b9906-4b6e-4bc0-aca0-6809dff346d4\");\n+        AuthPolicyTO policyTO = policyService.read(PolicyType.AUTH, \"659b9906-4b6e-4bc0-aca0-6809dff346d4\");\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByRealms().isEmpty());\n     }\n \n     @Test\n     public void getAccessPolicy() {\n-        AccessPolicyTO policyTO =\n-                policyService.read(PolicyType.ACCESS, \"419935c7-deb3-40b3-8a9a-683037e523a2\");\n+        AccessPolicyTO policyTO = policyService.read(PolicyType.ACCESS, \"419935c7-deb3-40b3-8a9a-683037e523a2\");\n \n         assertNotNull(policyTO);\n         assertTrue(policyTO.getUsedByRealms().isEmpty());\n@@ -178,6 +191,14 @@ public void getAttributeReleasePolicy() {\n \n     @Test\n     public void create() throws IOException {\n+        PropagationPolicyTO propagationPolicyTO = new PropagationPolicyTO();\n+        propagationPolicyTO.setName(\"propagation policy name\");\n+        propagationPolicyTO.setBackOffStrategy(BackOffStrategy.EXPONENTIAL);\n+        propagationPolicyTO = createPolicy(PolicyType.PROPAGATION, propagationPolicyTO);\n+        assertNotNull(propagationPolicyTO);\n+        assertEquals(3, propagationPolicyTO.getMaxAttempts());\n+        assertEquals(BackOffStrategy.EXPONENTIAL.getDefaultBackOffParams(), propagationPolicyTO.getBackOffParams());\n+\n         PullPolicyTO pullPolicyTO = createPolicy(PolicyType.PULL, buildPullPolicyTO());\n         assertNotNull(pullPolicyTO);\n         assertEquals(\"TestPullRule\", pullPolicyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n@@ -186,8 +207,7 @@ public void create() throws IOException {\n         assertNotNull(pushPolicyTO);\n         assertEquals(\"TestPushRule\", pushPolicyTO.getCorrelationRules().get(AnyTypeKind.USER.name()));\n \n-        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH,\n-                buildAuthPolicyTO(\"LdapAuthentication1\"));\n+        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, buildAuthPolicyTO(\"LdapAuthentication1\"));\n         assertNotNull(authPolicyTO);\n         assertEquals(\"Test Authentication policy\", authPolicyTO.getName());\n "},{"sha":"6c46c8d15ee16ce6626ce8dcf3fa31419800d517","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.awaitility.Awaitility.await;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -42,12 +43,14 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import javax.ws.rs.core.GenericType;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.TaskTO;\n@@ -96,6 +99,8 @@\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.BeforeAll;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n \n public class PropagationTaskITCase extends AbstractTaskITCase {\n \n@@ -310,6 +315,41 @@ public void purgePropagations() {\n         assertNotNull(deleted);\n     }\n \n+    @Test\n+    public void propagationPolicy() throws InterruptedException {\n+        SyncopeClient.nullPriorityAsync(anyObjectService, true);\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        jdbcTemplate.execute(\"ALTER TABLE TESTPRINTER ADD COLUMN MAND_VALUE VARCHAR(1)\");\n+        jdbcTemplate.execute(\"UPDATE TESTPRINTER SET MAND_VALUE='C'\");\n+        jdbcTemplate.execute(\"ALTER TABLE TESTPRINTER ALTER COLUMN MAND_VALUE VARCHAR(1) NOT NULL\");\n+        try {\n+            String entityKey = createAnyObject(AnyObjectITCase.getSample(\"propagationPolicy\")).getEntity().getKey();\n+\n+            Thread.sleep(1000);\n+            jdbcTemplate.execute(\"ALTER TABLE TESTPRINTER DROP COLUMN MAND_VALUE\");\n+\n+            PagedResult<PropagationTaskTO> propagations = await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).until(\n+                    () -> taskService.search(\n+                            new TaskQuery.Builder(TaskType.PROPAGATION).resource(RESOURCE_NAME_DBSCRIPTED).\n+                                    anyTypeKind(AnyTypeKind.ANY_OBJECT).entityKey(entityKey).build()),\n+                    p -> p.getTotalCount() > 0);\n+\n+            propagations.getResult().get(0).getExecutions().stream().\n+                    anyMatch(e -> ExecStatus.FAILURE.name().equals(e.getStatus()));\n+            propagations.getResult().get(0).getExecutions().stream().\n+                    anyMatch(e -> ExecStatus.SUCCESS.name().equals(e.getStatus()));\n+        } finally {\n+            SyncopeClient.nullPriorityAsync(anyObjectService, false);\n+\n+            try {\n+                jdbcTemplate.execute(\"ALTER TABLE TESTPRINTER DROP COLUMN MAND_VALUE\");\n+            } catch (DataAccessException e) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE741() {\n         for (int i = 0; i < 3; i++) {"},{"sha":"951dcc901195798f087f5ea19a7de329b55dcf03","filename":"src/main/asciidoc/reference-guide/concepts/authenticationmodules.adoc","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fauthenticationmodules.adoc?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -24,18 +24,18 @@ technology or repository, in the context of a certain <<policies-authentication,\n Several authentication modules are provided:\n \n * Principal Authentication:\n-    ** https://apereo.github.io/cas/6.4.x/authentication/Database-Authentication.html[Database^]\n-    ** https://apereo.github.io/cas/6.4.x/authentication/JAAS-Authentication.html[JAAS^]\n-    ** https://apereo.github.io/cas/6.4.x/authentication/LDAP-Authentication.html[LDAP^]\n-    ** https://apereo.github.io/cas/6.4.x/integration/Delegate-Authentication.html[OpenID Connect^]\n-    ** https://apereo.github.io/cas/6.4.x/mfa/RADIUS-Authentication.html[Radius^]\n-    ** https://apereo.github.io/cas/6.4.x/authentication/Syncope-Authentication.html[Static^]\n-    ** https://apereo.github.io/cas/6.4.x/authentication/Syncope-Authentication.html[Syncope^]\n-    ** https://apereo.github.io/cas/6.4.x/integration/Delegate-Authentication.html[SAML^]\n+    ** https://apereo.github.io/cas/6.5.x/authentication/Database-Authentication.html[Database^]\n+    ** https://apereo.github.io/cas/6.5.x/authentication/JAAS-Authentication.html[JAAS^]\n+    ** https://apereo.github.io/cas/6.5.x/authentication/LDAP-Authentication.html[LDAP^]\n+    ** https://apereo.github.io/cas/6.5.x/integration/Delegate-Authentication.html[OpenID Connect^]\n+    ** https://apereo.github.io/cas/6.5.x/mfa/RADIUS-Authentication.html[Radius^]\n+    ** https://apereo.github.io/cas/6.5.x/authentication/Syncope-Authentication.html[Static^]\n+    ** https://apereo.github.io/cas/6.5.x/authentication/Syncope-Authentication.html[Syncope^]\n+    ** https://apereo.github.io/cas/6.5.x/integration/Delegate-Authentication.html[SAML^]\n * MFA:\n-    ** https://apereo.github.io/cas/6.4.x/mfa/DuoSecurity-Authentication.html[Duo Security^]\n-    ** https://apereo.github.io/cas/6.4.x/mfa/FIDO-U2F-Authentication.html[Fido U2F^]\n-    ** https://apereo.github.io/cas/6.4.x/mfa/GoogleAuthenticator-Authentication.html[Google Authenticator^]\n+    ** https://apereo.github.io/cas/6.5.x/mfa/DuoSecurity-Authentication.html[Duo Security^]\n+    ** https://apereo.github.io/cas/6.5.x/mfa/FIDO-U2F-Authentication.html[Fido U2F^]\n+    ** https://apereo.github.io/cas/6.5.x/mfa/GoogleAuthenticator-Authentication.html[Google Authenticator^]\n \n [TIP]\n ====\n@@ -58,4 +58,4 @@ class.\n \n [NOTE]\n Authentication Modules are dynamically translated into\n-https://apereo.github.io/cas/6.4.x/authentication/Configuring-Authentication-Components.html#authentication-handlers[CAS Authentication Handlers^].\n+https://apereo.github.io/cas/6.5.x/authentication/Configuring-Authentication-Components.html#authentication-handlers[CAS Authentication Handlers^]."},{"sha":"97d84372f8b0b29930093729172d4db11d1a2d5c","filename":"src/main/asciidoc/reference-guide/concepts/clientapplications.adoc","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fclientapplications.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fclientapplications.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fclientapplications.adoc?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -41,4 +41,4 @@ More parameters are required to be specified depending on the actual client appl\n \n [NOTE]\n Client Applications are dynamically translated into\n-https://apereo.github.io/cas/6.4.x/services/Service-Management.html[CAS Services^].\n+https://apereo.github.io/cas/6.5.x/services/Service-Management.html[CAS Services^]."},{"sha":"576d8385c9621b845aa00d29d9fb85d08d013913","filename":"src/main/asciidoc/reference-guide/concepts/policies.adoc","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -286,7 +286,7 @@ authentication request from the application arrives.\n \n [NOTE]\n Access Policy instances are dynamically translated into\n-https://apereo.github.io/cas/6.4.x/services/Configuring-Service-Access-Strategy.html#configure-service-access-strategy[CAS Service Access Strategy^].\n+https://apereo.github.io/cas/6.5.x/services/Configuring-Service-Access-Strategy.html#configure-service-access-strategy[CAS Service Access Strategy^].\n \n [[policies-attribute-release]]\n ==== Attribute Release\n@@ -298,7 +298,7 @@ values.\n \n [NOTE]\n Attribute Release Policy instances are dynamically translated into\n-https://apereo.github.io/cas/6.4.x/integration/Attribute-Release-Policies.html#attribute-release-policies[CAS Attribute Release Policy^].\n+https://apereo.github.io/cas/6.5.x/integration/Attribute-Release-Policies.html#attribute-release-policies[CAS Attribute Release Policy^].\n \n [[policies-authentication]]\n ==== Authentication\n@@ -325,7 +325,21 @@ be considered successful.\n \n [NOTE]\n Authentication Policy instances are dynamically translated into\n-https://apereo.github.io/cas/6.4.x/authentication/Configuring-Authentication-Policy.html#authentication-policy[CAS Authentication Policy^].\n+https://apereo.github.io/cas/6.5.x/authentication/Configuring-Authentication-Policy.html#authentication-policy[CAS Authentication Policy^].\n+\n+[[policies-propagation]]\n+==== Propagation\n+\n+Propagation policies are evaluated during the execution of <<tasks-propagation,propagation tasks>> and are meant to\n+retry the configured operations in case of propagation failures.\n+\n+When defining a propagation policy, the following information must be provided:\n+\n+* max number of attempts\n+* back-off strategy\n+** `FIXED` - pauses for a fixed period of time before continuing\n+** `EXPONENTIAL` - increases the back off period for each retry attempt in a given set up to a limit\n+** `RANDOM` - chooses a random multiple of the interval that would come from a simple deterministic exponential\n \n [[policies-pull]]\n ==== Pull"},{"sha":"26c29cfa2084a867c5269a88f05c2ab5b2c96a95","filename":"src/main/asciidoc/reference-guide/concepts/tasks.adoc","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftasks.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a03989916e1d86e6a8412de6f4b9ecdb2269e4c5/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftasks.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftasks.adoc?ref=a03989916e1d86e6a8412de6f4b9ecdb2269e4c5","patch":"@@ -62,6 +62,9 @@ endif::[]\n during the <<propagation,propagation>> process, and are permanently saved - for later re-execution or for examining\n the execution details - depending on the trace levels set on the related\n <<external-resource-details,external resource>>.\n+\n+Automatic retry in case of failure can be configured by mean of a <<policies-propagation,propagation policy>>, for the\n+related external resource.\n ====\n \n [[tasks-pull]]"}]}