{"sha":"630dc73548ce378e95acb50e122b612eecc2988f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYzMGRjNzM1NDhjZTM3OGU5NWFjYjUwZTEyMmI2MTJlZWNjMjk4OGY=","commit":{"author":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2012-04-18T08:31:23Z"},"committer":{"name":"Colm O Heigeartaigh","email":"coheigea@apache.org","date":"2012-04-18T08:31:23Z"},"message":"[SYNCOPE-45] - Make all delete operations consistent in the REST API\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1327423 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5bf8647c663330ab2e54b6a51bc943dec844f55d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5bf8647c663330ab2e54b6a51bc943dec844f55d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/630dc73548ce378e95acb50e122b612eecc2988f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/630dc73548ce378e95acb50e122b612eecc2988f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/630dc73548ce378e95acb50e122b612eecc2988f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/630dc73548ce378e95acb50e122b612eecc2988f/comments","author":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"committer":{"login":"coheigea","id":472162,"node_id":"MDQ6VXNlcjQ3MjE2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/472162?v=4","gravatar_id":"","url":"https://api.github.com/users/coheigea","html_url":"https://github.com/coheigea","followers_url":"https://api.github.com/users/coheigea/followers","following_url":"https://api.github.com/users/coheigea/following{/other_user}","gists_url":"https://api.github.com/users/coheigea/gists{/gist_id}","starred_url":"https://api.github.com/users/coheigea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coheigea/subscriptions","organizations_url":"https://api.github.com/users/coheigea/orgs","repos_url":"https://api.github.com/users/coheigea/repos","events_url":"https://api.github.com/users/coheigea/events{/privacy}","received_events_url":"https://api.github.com/users/coheigea/received_events","type":"User","site_admin":false},"parents":[{"sha":"a89b2f199419e8377e6c1ca6e7fff4a3bc21fa5e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a89b2f199419e8377e6c1ca6e7fff4a3bc21fa5e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a89b2f199419e8377e6c1ca6e7fff4a3bc21fa5e"}],"stats":{"total":268,"additions":180,"deletions":88},"files":[{"sha":"4e9939cf4fb8a5a6b7014862c1792b43ff830ec2","filename":"console/src/main/java/org/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -155,7 +155,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.delete(taskTO.getId());\n+                            restClient.delete(taskTO.getId(), NotificationTaskTO.class);\n                             info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());"},{"sha":"3d182f943e0211b1647f6fa2acffad5371b02c23","filename":"console/src/main/java/org/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -178,7 +178,7 @@ public Page createPage() {\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n \n-                            policyRestClient.delete(accountPolicyTO.getId());\n+                            policyRestClient.delete(accountPolicyTO.getId(), accountPolicyTO.getClass());\n                             info(getString(\"operation_succeded\"));\n \n                         } catch (SyncopeClientCompositeErrorException e) {"},{"sha":"59405aba235ba3f9e31d664810c1e621da999a67","filename":"console/src/main/java/org/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -165,7 +165,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.delete(taskTO.getId());\n+                            restClient.delete(taskTO.getId(), PropagationTaskTO.class);\n                             info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());"},{"sha":"6e38cff3f7f7155636aaf0de510994515e1a7ba4","filename":"console/src/main/java/org/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -192,7 +192,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.delete(taskTO.getId());\n+                            restClient.delete(taskTO.getId(), SchedTaskTO.class);\n                             info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());"},{"sha":"8f9cd6ac0c93386bbe271b07f29eaa30acb785de","filename":"console/src/main/java/org/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -212,7 +212,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.delete(taskTO.getId());\n+                            restClient.delete(taskTO.getId(), SyncTaskTO.class);\n                             info(getString(\"operation_succeded\"));\n                         } catch (SyncopeClientCompositeErrorException scce) {\n                             error(scce.getMessage());"},{"sha":"f3eecf13ef65a01bbe4c3df450f80c22945832f3","filename":"console/src/main/java/org/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -60,7 +60,7 @@ public void updateConfiguration(final ConfigurationTO configurationTO) {\n     /**\n      * Delete a configuration by key.\n      */\n-    public void deleteConfiguration(final String key) {\n-        restTemplate.delete(baseURL + \"configuration/delete/{key}.json\", key);\n+    public ConfigurationTO deleteConfiguration(final String key) {\n+        return restTemplate.getForObject(baseURL + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\n     }\n }"},{"sha":"65cee56317274d294b5f4a46dff9520b6d7bb66c","filename":"console/src/main/java/org/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -82,8 +82,9 @@ public void update(final ConnInstanceTO connectorTO) {\n         restTemplate.postForObject(baseURL + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\n     }\n \n-    public void delete(Long id) {\n-        restTemplate.delete(baseURL + \"connector/delete/{connectorId}.json\", id.toString());\n+    public ConnInstanceTO delete(Long id) {\n+        return restTemplate.getForObject(baseURL + \"connector/delete/{connectorId}.json\", \n+                                         ConnInstanceTO.class, id.toString());\n     }\n \n     public List<ConnBundleTO> getAllBundles() {"},{"sha":"8238b20e8a935a31fee3d2ba3f169ca4aa84b0bc","filename":"console/src/main/java/org/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -63,8 +63,8 @@ public void enableAudit(final AuditLoggerName auditLoggerName) {\n         restTemplate.put(baseURL + \"logger/audit/enable\", auditLoggerName);\n     }\n \n-    public void deleteLog(final String name) {\n-        restTemplate.delete(baseURL + \"logger/log/delete/{name}\", name);\n+    public LoggerTO deleteLog(final String name) {\n+        return restTemplate.getForObject(baseURL + \"logger/log/delete/{name}\", LoggerTO.class, name);\n     }\n \n     public void disableAudit(final AuditLoggerName auditLoggerName) {"},{"sha":"7dce005d4297aa40145acb585aa2b60234ea0591","filename":"console/src/main/java/org/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -175,7 +175,7 @@ public <T extends PolicyTO> T updatePolicy(final T policy) throws InvalidPolicyT\n         }\n     }\n \n-    public void delete(final Long id) {\n-        restTemplate.delete(baseURL + \"policy/delete/\" + id);\n+    public PolicyTO delete(final Long id, Class<? extends PolicyTO> policyClass) {\n+        return restTemplate.getForObject(baseURL + \"policy/delete/\" + id, policyClass);\n     }\n }"},{"sha":"9c462c3672865043125dfca358fc222e7d7863e0","filename":"console/src/main/java/org/syncope/console/rest/ReportRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -66,8 +66,8 @@ public ReportTO update(final ReportTO reportTO) {\n      *\n      * @param reportId report to delete\n      */\n-    public void delete(final Long reportId) {\n-        restTemplate.delete(baseURL + \"report/delete/{reportId}\", reportId);\n+    public ReportTO delete(final Long reportId) {\n+        return restTemplate.getForObject(baseURL + \"report/delete/{reportId}\", ReportTO.class, reportId);\n     }\n \n     /**"},{"sha":"c0078f9cbfc24b725ea10834d9ed2817e31cfd9a","filename":"console/src/main/java/org/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -61,7 +61,8 @@ public void update(final ResourceTO resourceTO) {\n         restTemplate.postForObject(baseURL + \"resource/update.json\", resourceTO, ResourceTO.class);\n     }\n \n-    public void delete(final String name) {\n-        restTemplate.delete(baseURL + \"resource/delete/{resourceName}.json\", name);\n+    public ResourceTO delete(final String name) {\n+        return restTemplate.getForObject(baseURL + \"resource/delete/{resourceName}.json\", \n+                                         ResourceTO.class, name);\n     }\n }"},{"sha":"0242ce9718f6b3a7bb48775cf56de4591634d67a","filename":"console/src/main/java/org/syncope/console/rest/RoleRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -82,11 +82,11 @@ public void updateRole(RoleMod roleMod) {\n     }\n \n     /**\n-     * Delete an already existent role by its name.\n-     * @param name (e.g.:surname)\n-     * @return schemaTO\n+     * Delete an already existent role by its id.\n+     * @param name (e.g.:rolename)\n+     * @return roleTO\n      */\n-    public void deleteRole(Long id) {\n-        restTemplate.delete(baseURL + \"role/delete/{roleId}.json\", id);\n+    public RoleTO deleteRole(Long id) {\n+        return restTemplate.getForObject(baseURL + \"role/delete/{roleId}.json\", RoleTO.class, id);\n     }\n }"},{"sha":"99d85159f06e7d06049f47eef007e9a235e0ab82","filename":"console/src/main/java/org/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -201,8 +201,9 @@ public void updateSchema(final AttributableType type, SchemaTO schemaTO) {\n      * @param name (e.g.:surname)\n      * @return schemaTO\n      */\n-    public void deleteSchema(final AttributableType type, String name) {\n-        restTemplate.delete(baseURL + \"schema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\");\n+    public SchemaTO deleteSchema(final AttributableType type, String name) {\n+        return restTemplate.getForObject(baseURL + \"schema/\" + type.name().toLowerCase() + \"/delete/\" \n+                + name + \".json\", SchemaTO.class);\n     }\n \n     /**\n@@ -267,17 +268,19 @@ public void updateVirtualSchema(final AttributableType type, final VirtualSchema\n      *\n      * @param name (e.g.:surname)\n      */\n-    public void deleteDerivedSchema(final AttributableType type, String name) {\n-        restTemplate.delete(baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\");\n+    public DerivedSchemaTO deleteDerivedSchema(final AttributableType type, String name) {\n+        return restTemplate.getForObject(baseURL + \"derivedSchema/\" + type.name().toLowerCase() + \"/delete/\" + name \n+                                         + \".json\", DerivedSchemaTO.class);\n     }\n \n     /**\n      * Delete an already existent user virtual schema by its name.\n      *\n      * @param name (e.g.:surname)\n      */\n-    public void deleteVirtualSchema(final AttributableType type, final String name) {\n-        restTemplate.delete(baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/delete/\" + name + \".json\");\n+    public VirtualSchemaTO deleteVirtualSchema(final AttributableType type, final String name) {\n+        return restTemplate.getForObject(baseURL + \"virtualSchema/\" + type.name().toLowerCase() + \"/delete/\" + name \n+                                         + \".json\", VirtualSchemaTO.class);\n     }\n \n     /**"},{"sha":"4ad34322dcfb02e8f35de66c1f1342d3c54ba5b1","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -131,8 +131,8 @@ public List<TaskExecTO> listExecutions() {\n      *\n      * @param taskId task to delete\n      */\n-    public void delete(final Long taskId) {\n-        restTemplate.delete(baseURL + \"task/delete/{taskId}\", taskId);\n+    public TaskTO delete(final Long taskId, final Class<? extends TaskTO> taskToClass) {\n+        return restTemplate.getForObject(baseURL + \"task/delete/{taskId}\", taskToClass, taskId);\n     }\n \n     @Override"},{"sha":"7629530e4bf0d6e9cfa2a11258c526ef277e7f58","filename":"console/src/main/java/org/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -36,8 +36,8 @@ public List<UserRequestTO> list() {\n         return Arrays.asList(restTemplate.getForObject(baseURL + \"user/request/list\", UserRequestTO[].class));\n     }\n \n-    public void delete(final Long requestId) {\n-        restTemplate.delete(baseURL + \"user/request/deleteRequest/{requestId}\", requestId);\n+    public UserRequestTO delete(final Long requestId) {\n+        return restTemplate.getForObject(baseURL + \"user/request/deleteRequest/{requestId}\", UserRequestTO.class, requestId);\n     }\n \n     public UserRequestTO requestCreate(final UserTO userTO) {"},{"sha":"1896fa993e75c3236f4cce3a031c48f38ad40b3c","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -90,14 +90,16 @@ public ConfigurationTO create(final HttpServletResponse response,\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{key}\")\n-    public void delete(@PathVariable(\"key\") final String key) throws MissingConfKeyException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{key}\")\n+    public ConfigurationTO delete(@PathVariable(\"key\") final String key) throws MissingConfKeyException {\n \n-        confDAO.find(key);\n+        SyncopeConf conf = confDAO.find(key);\n+        ConfigurationTO confToDelete = configurationDataBinder.getConfigurationTO(conf);\n         confDAO.delete(key);\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.delete, Result.success,\n                 \"Successfully deleted conf: \" + key);\n+        return confToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")"},{"sha":"0ba037250629312da1686eb587f80cbcb09464ae","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -149,8 +149,8 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{connectorId}\")\n-    public void delete(@PathVariable(\"connectorId\") Long connectorId) throws NotFoundException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{connectorId}\")\n+    public ConnInstanceTO delete(@PathVariable(\"connectorId\") Long connectorId) throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n         if (connInstance == null) {\n@@ -169,10 +169,14 @@ public void delete(@PathVariable(\"connectorId\") Long connectorId) throws NotFoun\n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n+        \n+        ConnInstanceTO connToDelete = binder.getConnInstanceTO(connInstance);\n \n         connInstanceDAO.delete(connectorId);\n         auditManager.audit(Category.connector, ConnectorSubCategory.delete, Result.success,\n                 \"Successfully deleted connector instance: \" + connectorId);\n+        \n+        return connToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")"},{"sha":"ba61e0bf635d37f56eeb163c21ccdd7b39c692c0","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -69,20 +69,24 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/{kind}/delete/{schema}\")\n-    public void delete(@PathVariable(\"kind\") final String kind,\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n+    public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String derivedSchemaName) throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).derivedSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n+        \n+        DerivedSchemaTO schemaToDelete = derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n \n         derivedSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.deleteDerived, Result.success,\n                 \"Successfully deleted derived schema: \" + kind + \"/\" + derivedSchema.getName());\n+        \n+        return schemaToDelete;\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")"},{"sha":"a9611b3c31636836f73dfb32ac086312078a86d1","filename":"core/src/main/java/org/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -161,13 +161,16 @@ public void enableAudit(@RequestBody final AuditLoggerName auditLoggerName) {\n         }\n     }\n \n-    private void delete(final String name, final SyncopeLoggerType expectedType) throws NotFoundException {\n+    private LoggerTO delete(final String name, final SyncopeLoggerType expectedType) throws NotFoundException {\n         SyncopeLogger syncopeLogger = loggerDAO.find(name);\n         if (syncopeLogger == null) {\n             throw new NotFoundException(\"Logger \" + name);\n         } else if (expectedType != syncopeLogger.getType()) {\n             throwInvalidLogger(expectedType);\n         }\n+        \n+        LoggerTO loggerToDelete = new LoggerTO();\n+        BeanUtils.copyProperties(syncopeLogger, loggerToDelete);\n \n         // remove SyncopeLogger from local storage, so that LoggerLoader won't load this next time\n         loggerDAO.delete(syncopeLogger);\n@@ -179,12 +182,14 @@ private void delete(final String name, final SyncopeLoggerType expectedType) thr\n \n         auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success, String.format(\n                 \"Successfully deleted logger %s (%s)\", name, expectedType));\n+        \n+        return loggerToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('LOG_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/log/delete/{name}\")\n-    public void deleteLog(@PathVariable(\"name\") final String name) throws NotFoundException {\n-        delete(name, SyncopeLoggerType.LOG);\n+    @RequestMapping(method = RequestMethod.GET, value = \"/log/delete/{name}\")\n+    public LoggerTO deleteLog(@PathVariable(\"name\") final String name) throws NotFoundException {\n+        return delete(name, SyncopeLoggerType.LOG);\n     }\n \n     @PreAuthorize(\"hasRole('AUDIT_DISABLE')\")"},{"sha":"1b555d966bd793745365ae8aaff391afdf62a500","filename":"core/src/main/java/org/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -121,19 +121,23 @@ public NotificationTO update(@RequestBody final NotificationTO notificationTO) t\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{notificationId}\")\n-    public void delete(@PathVariable(\"notificationId\") final Long notificationId) throws NotFoundException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{notificationId}\")\n+    public NotificationTO delete(@PathVariable(\"notificationId\") final Long notificationId) throws NotFoundException {\n \n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n             LOG.error(\"Could not find notificatin '\" + notificationId + \"'\");\n \n             throw new NotFoundException(String.valueOf(notificationId));\n         }\n+        \n+        NotificationTO notificationToDelete = binder.getNotificationTO(notification);\n \n         auditManager.audit(Category.notification, NotificationSubCategory.delete, Result.success,\n                 \"Successfully deleted notification: \" + notification.getId());\n \n         notificationDAO.delete(notificationId);\n+        \n+        return notificationToDelete;\n     }\n }"},{"sha":"d81f8ea874b4d8da64d911edd2906e46e7a48909","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -245,13 +245,20 @@ public PolicyTO read(@PathVariable(\"id\") final Long id)\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{id}\")\n-    public void delete(@PathVariable(\"id\") final Long id) throws NotFoundException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{id}\")\n+    public PolicyTO delete(@PathVariable(\"id\") final Long id) throws NotFoundException {\n \n         LOG.debug(\"Delete policy\");\n+        Policy policy = policyDAO.find(id);\n+        if (policy == null) {\n+            throw new NotFoundException(\"Policy \" + id + \" not found\");\n+        }\n+        PolicyTO policyToDelete = binder.getPolicyTO(policy);\n         policyDAO.delete(id);\n \n         auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,\n                 \"Successfully deleted policy: \" + id);\n+        \n+        return policyToDelete;\n     }\n }"},{"sha":"8cd3e085b53ddac46977d2b4cc8e8a9fc75162bd","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -391,36 +391,44 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throw\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{reportId}\")\n-    public void delete(@PathVariable(\"reportId\") final Long reportId)\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{reportId}\")\n+    public ReportTO delete(@PathVariable(\"reportId\") final Long reportId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n+        \n+        ReportTO deletedReport = binder.getReportTO(report);\n \n         jobInstanceLoader.unregisterJob(report);\n \n         reportDAO.delete(report);\n \n         auditManager.audit(Category.report, ReportSubCategory.delete, Result.success,\n                 \"Successfully deleted report: \" + report.getId());\n+        \n+        return deletedReport;\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/execution/delete/{executionId}\")\n-    public void deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\n+    public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n \n+        ReportExecTO reportExecToDelete = binder.getReportExecTO(reportExec);\n+                \n         reportExecDAO.delete(reportExec);\n \n         auditManager.audit(Category.report, ReportSubCategory.deleteExecution, Result.success,\n                 \"Successfully deleted report execution: \" + reportExec.getId());\n+        \n+        return reportExecToDelete;\n     }\n }"},{"sha":"f374007a3540b496ef17d733333ae3687c4b8987","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -123,19 +123,23 @@ public ResourceTO update(@RequestBody final ResourceTO resourceTO)\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{resourceName}\")\n-    public void delete(@PathVariable(\"resourceName\") final String resourceName)\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{resourceName}\")\n+    public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName)\n             throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n+        \n+        ResourceTO resourceToDelete = binder.getResourceTO(resource);\n \n         auditManager.audit(Category.resource, ResourceSubCategory.delete, Result.success,\n                 \"Successfully deleted resource: \" + resource.getName());\n \n         resourceDAO.delete(resourceName);\n+        \n+        return resourceToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")"},{"sha":"7173cd36962ff17f8b51c977214231d34fa4c0b5","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -84,13 +84,15 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{roleId}\")\n-    public void delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException, UnauthorizedRoleException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n+    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n             throw new NotFoundException(\"Role \" + roleId);\n         }\n+        \n+        RoleTO roleToDelete = roleDataBinder.getRoleTO(role);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (!allowedRoleIds.contains(role.getId())) {\n@@ -101,6 +103,8 @@ public void delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundExc\n                 \"Successfully deleted role: \" + role.getId());\n \n         roleDAO.delete(roleId);\n+        \n+        return roleToDelete;\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")"},{"sha":"84682fe1cf4dd2494365bd68f232b99bc36703f6","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -69,20 +69,24 @@ public SchemaTO create(final HttpServletResponse response, @RequestBody final Sc\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/{kind}/delete/{schema}\")\n-    public void delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"schema\") final String schemaName)\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n+    public SchemaTO delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n+        \n+        SchemaTO schemaToDelete = schemaDataBinder.getSchemaTO(schema, getAttributableUtil(kind));\n \n         schemaDAO.delete(schemaName, getAttributableUtil(kind));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.delete, Result.success,\n                 \"Successfully deleted schema: \" + kind + \"/\" + schema.getName());\n+        \n+        return schemaToDelete;\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")"},{"sha":"39e889e24d012ce77a0357b734c6ea47ed762935","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -416,15 +416,17 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{taskId}\")\n-    public void delete(@PathVariable(\"taskId\") final Long taskId)\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{taskId}\")\n+    public TaskTO delete(@PathVariable(\"taskId\") final Long taskId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n         TaskUtil taskUtil = getTaskUtil(task);\n+        \n+        TaskTO taskToDelete = binder.getTaskTO(task, taskUtil);\n \n         if (TaskUtil.SCHED == taskUtil || TaskUtil.SYNC == taskUtil) {\n             jobInstanceLoader.unregisterJob(task);\n@@ -434,21 +436,26 @@ public void delete(@PathVariable(\"taskId\") final Long taskId)\n \n         auditManager.audit(Category.task, TaskSubCategory.delete, Result.success,\n                 \"Successfully deleted task: \" + task.getId() + \"/\" + taskUtil);\n+        \n+        return taskToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/execution/delete/{executionId}\")\n-    public void deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n+    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\n+    public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n+        \n+        TaskExecTO taskExecutionToDelete = binder.getTaskExecTO(taskExec);\n \n         taskExecDAO.delete(taskExec);\n \n         auditManager.audit(Category.task, TaskSubCategory.deleteExecution, Result.success,\n                 \"Successfully deleted task execution: \" + taskExec.getId());\n+        return taskExecutionToDelete;\n     }\n }"},{"sha":"8a4f5a8341f5626ace8ae2aae4040ab22ffc6de7","filename":"core/src/main/java/org/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -179,8 +179,8 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) throw\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/delete\")\n-    public UserRequestTO delete(@RequestBody final Long userId) throws NotFoundException, UnauthorizedRoleException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{requestId}\")\n+    public UserRequestTO delete(@PathVariable(\"requestId\") final Long userId) throws NotFoundException, UnauthorizedRoleException {\n \n         LOG.debug(\"Request user delete called with {}\", userId);\n \n@@ -201,17 +201,21 @@ public UserRequestTO delete(@RequestBody final Long userId) throws NotFoundExcep\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/deleteRequest/{requestId}\")\n-    public void deleteRequest(@PathVariable(\"requestId\") final Long requestId) throws NotFoundException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/deleteRequest/{requestId}\")\n+    public UserRequestTO deleteRequest(@PathVariable(\"requestId\") final Long requestId) throws NotFoundException {\n \n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n+        \n+        UserRequestTO requestToDelete = dataBinder.getUserRequestTO(request);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n                 \"Successfully deleted user request for user\" + request.getUserId());\n \n         userRequestDAO.delete(requestId);\n+        \n+        return requestToDelete;\n     }\n }"},{"sha":"d9b9c0560e3081fc92f878302eee419e1c686eaf","filename":"core/src/main/java/org/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -70,8 +70,8 @@ virtualSchemaTO, getAttributableUtil(kind).newVirtualSchema(),\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/{kind}/delete/{schema}\")\n-    public void delete(@PathVariable(\"kind\") final String kind,\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n+    public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String virtualSchemaName) throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).virtualSchemaClass();\n@@ -80,10 +80,12 @@ public void delete(@PathVariable(\"kind\") final String kind,\n             throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n         }\n \n+        VirtualSchemaTO schemaToDelete = virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n         virtualSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.deleteVirtual, Result.success,\n                 \"Successfully deleted virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n+        return schemaToDelete;\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")"},{"sha":"0eeb78f281fe88cba6d73fd23c4712b7a906dd17","filename":"core/src/test/java/org/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -45,15 +45,19 @@ public void create() {\n     public void delete() throws UnsupportedEncodingException {\n \n         try {\n-            restTemplate.delete(BASE_URL + \"configuration/delete/{key}.json\", \"nonExistent\");\n+            restTemplate.getForObject(\n+                    BASE_URL + \"configuration/delete/{key}.json\", ConfigurationTO.class, \"nonExistent\");\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n \n         ConfigurationTO tokenLengthTO = restTemplate.getForObject(BASE_URL + \"configuration/read/{key}.json\",\n                 ConfigurationTO.class, \"token.length\");\n \n-        restTemplate.delete(BASE_URL + \"configuration/delete/{key}.json\", \"token.length\");\n+        ConfigurationTO deletedConfig =\n+                restTemplate.getForObject(\n+                        BASE_URL + \"configuration/delete/{key}.json\", ConfigurationTO.class, \"token.length\");\n+        assertNotNull(deletedConfig);\n         try {\n             restTemplate\n                     .getForObject(BASE_URL + \"configuration/read/{key}.json\", ConfigurationTO.class, \"token.length\");"},{"sha":"24b2337559a677b4802ce6f0f5ce82918e28b7e6","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -160,7 +160,12 @@ public void create() {\n \n         // check also for the deletion of the created object\n         try {\n-            restTemplate.delete(BASE_URL + \"connector/delete/{connectorId}.json\", String.valueOf(actual.getId()));\n+            ConnInstanceTO deletedConn = restTemplate.getForObject(\n+                BASE_URL + \"connector/delete/{connectorId}.json\", \n+                ConnInstanceTO.class, \n+                String.valueOf(actual.getId())\n+            );\n+            assertNotNull(deletedConn);\n         } catch (HttpStatusCodeException e) {\n             LOG.error(\"delete failed\", e);\n             t = e;\n@@ -320,7 +325,8 @@ public void issueSYNCOPE10() {\n     @Test\n     public void deleteWithException() {\n         try {\n-            restTemplate.delete(BASE_URL + \"connector/delete/{connectorId}.json\", \"0\");\n+            restTemplate.getForObject(\n+                    BASE_URL + \"connector/delete/{connectorId}.json\", ConnInstanceTO.class, \"0\");\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }"},{"sha":"117edf7f78251e88721c03a4e4c3ff2b04b5c598","filename":"core/src/test/java/org/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -67,7 +67,10 @@ public void delete() {\n                 DerivedSchemaTO.class);\n         assertNotNull(schema);\n \n-        restTemplate.delete(BASE_URL + \"derivedSchema/role/delete/{schema}\", schema.getName());\n+        DerivedSchemaTO schemaToDelete =\n+                restTemplate.getForObject(\n+                    BASE_URL + \"derivedSchema/role/delete/{schema}\", DerivedSchemaTO.class, schema.getName());\n+        assertNotNull(schemaToDelete);\n \n         Throwable t = null;\n         try {"},{"sha":"a7bc9d4f9fc2b3790f85906089bf882663e8590e","filename":"core/src/test/java/org/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -123,7 +123,9 @@ public void update() {\n \n     @Test\n     public void delete() {\n-        restTemplate.delete(BASE_URL + \"notification/delete/{notificationId}.json\", \"101\");\n+        NotificationTO deletedNotification = restTemplate.getForObject(\n+                BASE_URL + \"notification/delete/{notificationId}.json\", NotificationTO.class, \"101\");\n+        assertNotNull(deletedNotification);\n \n         SyncopeClientException exception = null;\n         try {"},{"sha":"492a7d91042541d2e25e948da43661a17cb21653","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -150,7 +150,9 @@ public void delete() {\n \n         assertNotNull(\"find to delete did not work\", policyTO);\n \n-        restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 7L);\n+        PolicyTO policyToDelete =\n+                restTemplate.getForObject(BASE_URL + \"policy/delete/{id}\", SyncPolicyTO.class, 7L);\n+        assertNotNull(policyToDelete);\n \n         Throwable t = null;\n         try {"},{"sha":"acbb10a98cf1e284404524cc1683fe2138df3c03","filename":"core/src/test/java/org/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -136,7 +136,9 @@ public void delete() {\n         report = restTemplate.postForObject(BASE_URL + \"report/create\", report, ReportTO.class);\n         assertNotNull(report);\n \n-        restTemplate.delete(BASE_URL + \"report/delete/{reportId}\", report.getId());\n+        ReportTO deletedReport = \n+                restTemplate.getForObject(BASE_URL + \"report/delete/{reportId}\", ReportTO.class, report.getId());\n+        assertNotNull(deletedReport);\n \n         try {\n             restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", UserTO.class, report.getId());"},{"sha":"95485fceb04bec96fa766ebb7561fe3592497a36","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -315,7 +315,8 @@ public void update() {\n     @Test\n     public void deleteWithException() {\n         try {\n-            restTemplate.delete(BASE_URL + \"resource/delete/{resourceName}.json\", \"resourcenotfound\");\n+            restTemplate.getForObject(\n+                BASE_URL + \"resource/delete/{resourceName}.json\", ResourceTO.class, \"resourcenotfound\");\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -341,7 +342,10 @@ public void updateResetSyncToken() {\n     public void delete() {\n         final String resourceName = \"ws-target-resource-delete\";\n \n-        restTemplate.delete(BASE_URL + \"resource/delete/{resourceName}.json\", resourceName);\n+        ResourceTO deletedResource = \n+                restTemplate.getForObject(BASE_URL + \"resource/delete/{resourceName}.json\", ResourceTO.class, \n+                        resourceName);\n+        assertNotNull(deletedResource);\n \n         try {\n             restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class, resourceName);"},{"sha":"26e6a257d67450ac549f6a608e8cda1f5d984d54","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -113,12 +113,13 @@ public void createWithPasswordPolicy() {\n     @Test\n     public void delete() {\n         try {\n-            restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 0);\n+            restTemplate.getForObject(BASE_URL + \"role/delete/{roleId}\", RoleTO.class, 0);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n \n-        restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 5);\n+        RoleTO deletedRole = restTemplate.getForObject(BASE_URL + \"role/delete/{roleId}\", RoleTO.class, 5);\n+        assertNotNull(deletedRole);\n         try {\n             restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\", RoleTO.class, 2);\n         } catch (HttpStatusCodeException e) {"},{"sha":"1f17925adcb329111d72aeecb1549946815567db","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -110,7 +110,9 @@ public void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        restTemplate.delete(BASE_URL + \"schema/user/delete/cool.json\");\n+        SchemaTO deletedSchema = \n+            restTemplate.getForObject(BASE_URL + \"schema/user/delete/cool.json\", SchemaTO.class);\n+        assertNotNull(deletedSchema);\n         SchemaTO firstname = null;\n         try {\n             firstname = restTemplate.getForObject(BASE_URL + \"schema/user/read/cool.json\", SchemaTO.class);"},{"sha":"4c28b51cfc1030fee6428119b44028f476a844ab","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -167,11 +167,10 @@ public void readExecution() {\n     @Test\n     public void deal() {\n         try {\n-            restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 0);\n+            restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", TaskTO.class, 0);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n-\n         TaskExecTO execution = restTemplate\n                 .postForObject(BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, 1);\n         assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), execution.getStatus());\n@@ -181,7 +180,7 @@ public void deal() {\n         assertEquals(PropagationTaskExecStatus.SUCCESS.name(), execution.getStatus());\n         assertEquals(\"OK\", execution.getMessage());\n \n-        restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 1);\n+        restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", PropagationTaskTO.class, 1);\n         try {\n             restTemplate.getForObject(BASE_URL + \"task/execution/read/{executionId}\", TaskExecTO.class, execution\n                     .getId());"},{"sha":"6afd58c4f520f60e1c660531976412eb8682281a","filename":"core/src/test/java/org/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -185,7 +185,7 @@ public void delete() {\n         // 2. try to request user delete as admin: failure\n         SyncopeClientException exception = null;\n         try {\n-            restTemplate.postForObject(BASE_URL + \"user/request/delete/\", userTO.getId(), UserRequestTO.class);\n+            restTemplate.getForObject(BASE_URL + \"user/request/delete/{userId}\", UserRequestTO.class, userTO.getId());\n             fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n@@ -199,8 +199,8 @@ public void delete() {\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(userTO.getUsername(), initialPassword));\n \n         // 4. now request user delete works\n-        UserRequestTO request = restTemplate.postForObject(BASE_URL + \"user/request/delete\", userTO.getId(),\n-                UserRequestTO.class);\n+        UserRequestTO request = restTemplate.getForObject(BASE_URL + \"user/request/delete/{userId}\", \n+                UserRequestTO.class, userTO.getId());\n         assertNotNull(request);\n \n         // 5. switch back to admin"},{"sha":"105f57e6e9b4072edd6fd6f4f57cf8f8154cca1b","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -203,7 +203,7 @@ public void issue172() {\n \n         assertNotNull(policyTO);\n \n-        restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 2L);\n+        restTemplate.getForObject(BASE_URL + \"policy/delete/{id}\", PasswordPolicyTO.class, 2L);\n \n         UserTO userTO = new UserTO();\n         userTO.setUsername(\"issue172@syncope-idm.org\");"},{"sha":"81f5911372360e29106f0daa903a0af7d37d6dcb","filename":"core/src/test/java/org/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/630dc73548ce378e95acb50e122b612eecc2988f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=630dc73548ce378e95acb50e122b612eecc2988f","patch":"@@ -65,7 +65,10 @@ public void delete() {\n                 VirtualSchemaTO.class);\n         assertNotNull(schema);\n \n-        restTemplate.delete(BASE_URL + \"virtualSchema/role/delete/{schema}\", schema.getName());\n+        VirtualSchemaTO deletedSchema = \n+            restTemplate.getForObject(BASE_URL + \"virtualSchema/role/delete/{schema}\", VirtualSchemaTO.class, \n+                    schema.getName());\n+        assertNotNull(deletedSchema);\n \n         Throwable t = null;\n         try {"}]}