{"sha":"8def92a4ed2a3660552816f3b93eddb8cdc799ba","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhkZWY5MmE0ZWQyYTM2NjA1NTI4MTZmM2I5M2VkZGI4Y2RjNzk5YmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-07-02T13:56:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-07-02T13:56:50Z"},"message":"Splitting user integration tests in two classes to ease manageability","tree":{"sha":"0cd88b28a64a9d25c49b1fee610cc41013c19ee5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0cd88b28a64a9d25c49b1fee610cc41013c19ee5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8def92a4ed2a3660552816f3b93eddb8cdc799ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8def92a4ed2a3660552816f3b93eddb8cdc799ba","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8def92a4ed2a3660552816f3b93eddb8cdc799ba","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8def92a4ed2a3660552816f3b93eddb8cdc799ba/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c54adf5ce25d7a4de93a0805b639b25ba83eb34b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c54adf5ce25d7a4de93a0805b639b25ba83eb34b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c54adf5ce25d7a4de93a0805b639b25ba83eb34b"}],"stats":{"total":2830,"additions":1444,"deletions":1386},"files":[{"sha":"80d1e90f4d98e795274400208447e065270fde2e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":110,"deletions":1386,"changes":1496,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8def92a4ed2a3660552816f3b93eddb8cdc799ba/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8def92a4ed2a3660552816f3b93eddb8cdc799ba/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=8def92a4ed2a3660552816f3b93eddb8cdc799ba","patch":"@@ -20,23 +20,19 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.io.IOException;\n import java.security.AccessControlException;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.UUID;\n-import javax.naming.NamingException;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -45,8 +41,6 @@\n import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.cxf.common.util.Base64Utility;\n-import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n@@ -55,32 +49,24 @@\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.BulkActionResult.Status;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.MappingItemTO;\n-import org.apache.syncope.common.lib.to.MappingTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n@@ -92,22 +78,15 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n-import org.apache.syncope.core.spring.security.Encryptor;\n-import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n-import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n-import org.apache.syncope.fit.core.reference.DoubleValueLogicActions;\n import org.apache.syncope.fit.core.reference.TestAccountRuleConf;\n import org.apache.syncope.fit.core.reference.TestPasswordRuleConf;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ActivitiDetector;\n-import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.jdbc.core.JdbcTemplate;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserITCase extends AbstractITCase {\n@@ -160,60 +139,6 @@ public void createUserWithNoPropagation() {\n         assertEquals(PropagationTaskExecStatus.NOT_ATTEMPTED.name(), taskTO.getExecutions().get(0).getStatus());\n     }\n \n-    @Test\n-    public void issue186() {\n-        // 1. create an user with strict mandatory attributes only\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        String userId = getUUIDString() + \"issue186@syncope.apache.org\";\n-        userTO.setUsername(userId);\n-        userTO.setPassword(\"password123\");\n-\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getResources().isEmpty());\n-\n-        // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n-\n-        try {\n-            userTO = updateUser(userPatch).getEntity();\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n-        }\n-\n-        // 3. update assigning a resource NOT forcing mandatory constraints\n-        // AND priority: must fail with PropagationException\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n-\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n-        userTO = result.getEntity();\n-\n-        // 4. update assigning a resource NOT forcing mandatory constraints\n-        // BUT not priority: must succeed\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123456\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_CSV).build());\n-\n-        updateUser(userPatch);\n-    }\n-\n     @Test\n     public void enforceMandatoryCondition() {\n         UserTO userTO = getUniqueSampleTO(\"enforce@apache.org\");\n@@ -989,115 +914,6 @@ public void async() {\n         verifyAsyncResult(result.getPropagationStatuses());\n     }\n \n-    @Test(expected = EmptyResultDataAccessException.class)\n-    public void issue213() {\n-        UserTO userTO = getUniqueSampleTO(\"issue213@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getResources().size());\n-\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-\n-        String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n-                userTO.getUsername());\n-\n-        assertEquals(userTO.getUsername(), username);\n-\n-        UserPatch userPatch = new UserPatch();\n-\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(\n-                new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(RESOURCE_NAME_TESTDB).build());\n-\n-        userTO = updateUser(userPatch).getEntity();\n-        assertTrue(userTO.getResources().isEmpty());\n-\n-        jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n-    }\n-\n-    @Test\n-    public void issue234() {\n-        UserTO inUserTO = getUniqueSampleTO(\"issue234@syncope.apache.org\");\n-        inUserTO.getResources().add(RESOURCE_NAME_LDAP);\n-\n-        UserTO userTO = createUser(inUserTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        UserPatch userPatch = new UserPatch();\n-\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n-\n-        userTO = updateUser(userPatch).getEntity();\n-        assertNotNull(userTO);\n-        assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n-    }\n-\n-    @Test\n-    public final void issue280() {\n-        UserTO userTO = getUniqueSampleTO(\"issue280@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).\n-                resource(RESOURCE_NAME_TESTDB).value(\"123password\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        assertNotNull(result);\n-\n-        List<PropagationStatus> propagations = result.getPropagationStatuses();\n-        assertNotNull(propagations);\n-        assertEquals(1, propagations.size());\n-\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n-\n-        String resource = propagations.get(0).getResource();\n-        assertEquals(RESOURCE_NAME_TESTDB, resource);\n-    }\n-\n-    @Test\n-    public void issue281() {\n-        UserTO userTO = getUniqueSampleTO(\"issue281@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertNotNull(result);\n-\n-        List<PropagationStatus> propagations = result.getPropagationStatuses();\n-        assertNotNull(propagations);\n-        assertEquals(1, propagations.size());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n-\n-        String resource = propagations.get(0).getResource();\n-        assertEquals(RESOURCE_NAME_CSV, resource);\n-    }\n-\n-    @Test\n-    public void issue288() {\n-        UserTO userTO = getSampleTO(\"issue288@syncope.apache.org\");\n-        userTO.getPlainAttrs().add(attrTO(\"aLong\", \"STRING\"));\n-\n-        try {\n-            createUser(userTO);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidValues, e.getType());\n-        }\n-    }\n-\n     @Test\n     public void groupAttrPropagation() {\n         UserTO userTO = getUniqueSampleTO(\"checkGroupAttrPropagation@syncope.apache.org\");\n@@ -1185,705 +1001,163 @@ public void customPolicyRules() {\n     }\n \n     @Test\n-    public void issueSYNCOPE108() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n+    public void mappingPurpose() {\n+        UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n         userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        userTO.getMemberships().add(new MembershipTO.Builder().\n-                group(\"0626100b-a4ba-4e00-9971-86fad52a6216\").build());\n-        userTO.getMemberships().add(new MembershipTO.Builder().\n-                group(\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\").build());\n+        AttrTO csvuserid = new AttrTO();\n+        csvuserid.setSchema(\"csvuserid\");\n+        userTO.getDerAttrs().add(csvuserid);\n \n+        userTO.getResources().clear();\n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n-        assertEquals(2, userTO.getMemberships().size());\n-        assertEquals(1, userTO.getResources().size());\n \n         ConnObjectTO connObjectTO =\n                 resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n+        assertNull(connObjectTO.getAttrMap().get(\"email\"));\n+    }\n \n-        // -----------------------------------\n-        // Remove the first membership: de-provisioning shouldn't happen\n-        // -----------------------------------\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+    @Test\n+    public void bulkActions() {\n+        BulkAction bulkAction = new BulkAction();\n \n-        userPatch.getMemberships().add(new MembershipPatch.Builder().\n-                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n+        for (int i = 0; i < 10; i++) {\n+            UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n+            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getEntity().getKey()));\n+        }\n \n-        userTO = updateUser(userPatch).getEntity();\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getMemberships().size());\n+        // check for a fail\n+        bulkAction.getTargets().add(String.valueOf(Long.MAX_VALUE));\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        // -----------------------------------\n+        assertEquals(11, bulkAction.getTargets().size());\n \n-        // -----------------------------------\n-        // Remove the resource assigned directly: de-provisioning shouldn't happen\n-        // -----------------------------------\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        bulkAction.setType(BulkAction.Type.SUSPEND);\n+        BulkActionResult res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n+        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n+        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+        assertEquals(\"suspended\", userService.read(res.getResultByStatus(Status.SUCCESS).get(3)).getStatus());\n \n-        userPatch.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n-                value(userTO.getResources().iterator().next()).build());\n+        bulkAction.setType(BulkAction.Type.REACTIVATE);\n+        res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n+        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n+        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+        assertEquals(\"active\", userService.read(res.getResultByStatus(Status.SUCCESS).get(3)).getStatus());\n \n-        userTO = updateUser(userPatch).getEntity();\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getMemberships().size());\n-        assertFalse(userTO.getResources().isEmpty());\n+        bulkAction.setType(BulkAction.Type.DELETE);\n+        res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n+        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n+        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n+    }\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        // -----------------------------------\n+    @Test\n+    public void unlink() {\n+        UserTO userTO = getUniqueSampleTO(\"unlink@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        // -----------------------------------\n-        // Remove the first membership: de-provisioning should happen\n-        // -----------------------------------\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserTO actual = createUser(userTO).getEntity();\n+        assertNotNull(actual);\n+        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n+\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        userPatch.getMemberships().add(new MembershipPatch.Builder().\n-                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n-        userTO = updateUser(userPatch).getEntity();\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getMemberships().isEmpty());\n-        assertTrue(userTO.getResources().isEmpty());\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n \n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-            fail(\"Read should not succeeed\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.NotFound, e.getType());\n-        }\n+        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n     }\n \n     @Test\n-    public void issueSYNCOPE185() {\n-        // 1. create user with LDAP resource, succesfully propagated\n-        UserTO userTO = getSampleTO(\"syncope185@syncope.apache.org\");\n+    public void link() {\n+        UserTO userTO = getUniqueSampleTO(\"link@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n         userTO.getVirAttrs().clear();\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertNotNull(result);\n-        assertFalse(result.getPropagationStatuses().isEmpty());\n-        assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        // 2. delete this user\n-        userService.delete(userTO.getKey());\n+        UserTO actual = createUser(userTO).getEntity();\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n \n-        // 3. try (and fail) to find this user on the external LDAP resource\n         try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n-            fail(\"This entry should not be present on this resource\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n         }\n-    }\n \n-    @Test()\n-    public void issueSYNCOPE51() {\n-        AttrTO defaultCA = configurationService.get(\"password.cipher.algorithm\");\n-        final String originalCAValue = defaultCA.getValues().get(0);\n-        defaultCA.getValues().set(0, \"MD5\");\n-        configurationService.set(defaultCA);\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setAction(ResourceAssociationAction.LINK);\n+        associationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        AttrTO newCA = configurationService.get(defaultCA.getSchema());\n-        assertEquals(defaultCA, newCA);\n+        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n-        UserTO userTO = getSampleTO(\"syncope51@syncope.apache.org\");\n-        userTO.setPassword(\"password\");\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertFalse(actual.getResources().isEmpty());\n \n         try {\n-            createUser(userTO);\n-            fail(\"Create user should not succeed\");\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.NotFound, e.getType());\n-            assertTrue(e.getElements().iterator().next().contains(\"MD5\"));\n+            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n         }\n-\n-        defaultCA.getValues().set(0, originalCAValue);\n-        configurationService.set(defaultCA);\n-\n-        AttrTO oldCA = configurationService.get(defaultCA.getSchema());\n-        assertEquals(defaultCA, oldCA);\n     }\n \n     @Test\n-    public void issueSYNCOPE267() {\n-        // ----------------------------------\n-        // create user and check virtual attribute value propagation\n-        // ----------------------------------\n-        UserTO userTO = getUniqueSampleTO(\"syncope267@apache.org\");\n-        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n+    public void unassign() {\n+        UserTO userTO = getUniqueSampleTO(\"unassign@syncope.apache.org\");\n         userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n \n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertNotNull(result);\n-        assertFalse(result.getPropagationStatuses().isEmpty());\n-        assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(0).getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n+        UserTO actual = createUser(userTO).getEntity();\n+        assertNotNull(actual);\n+        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_DBVIRATTR, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"USERNAME\").getValues().get(0));\n-        // ----------------------------------\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        userTO = userService.read(userTO.getKey());\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getVirAttrs().size());\n-        assertEquals(\"virtualvalue\", userTO.getVirAttrs().iterator().next().getValues().get(0));\n+        actual = userService.read(actual.getKey());\n+        assertNotNull(actual);\n+        assertTrue(actual.getResources().isEmpty());\n+\n+        try {\n+            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n     }\n \n     @Test\n-    public void issueSYNCOPE266() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope266@apache.org\");\n-        userTO.getResources().clear();\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-\n-        // this resource has not a mapping for Password\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_UPDATE).build());\n-\n-        userTO = updateUser(userPatch).getEntity();\n-        assertNotNull(userTO);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE279() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope279@apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_TIMEOUT);\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertEquals(RESOURCE_NAME_TIMEOUT, result.getPropagationStatuses().get(0).getResource());\n-        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n-        assertEquals(PropagationTaskExecStatus.FAILURE, result.getPropagationStatuses().get(0).getStatus());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE122() {\n-        // 1. create user on testdb and testdb2\n-        UserTO userTO = getUniqueSampleTO(\"syncope122@apache.org\");\n-        userTO.getResources().clear();\n-\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n-        userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n-        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n-\n-        final String pwdOnSyncope = userTO.getPassword();\n-\n-        ConnObjectTO userOnDb = resourceService.readConnObject(\n-                RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDbAttr = userOnDb.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n-        assertNotNull(pwdOnTestDbAttr);\n-        assertNotNull(pwdOnTestDbAttr.getValues());\n-        assertFalse(pwdOnTestDbAttr.getValues().isEmpty());\n-        final String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n-\n-        ConnObjectTO userOnDb2 = resourceService.readConnObject(\n-                RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDb2Attr = userOnDb2.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n-        assertNotNull(pwdOnTestDb2Attr);\n-        assertNotNull(pwdOnTestDb2Attr.getValues());\n-        assertFalse(pwdOnTestDb2Attr.getValues().isEmpty());\n-        final String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n-\n-        // 2. request to change password only on testdb (no Syncope, no testdb2)\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n-                resource(RESOURCE_NAME_TESTDB).build());\n-\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        userTO = result.getEntity();\n-\n-        // 3a. Chech that only a single propagation took place\n-        assertNotNull(result.getPropagationStatuses());\n-        assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().iterator().next().getResource());\n-\n-        // 3b. verify that password hasn't changed on Syncope\n-        assertEquals(pwdOnSyncope, userTO.getPassword());\n-\n-        // 3c. verify that password *has* changed on testdb\n-        userOnDb = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDbAttrAfter = userOnDb.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n-        assertNotNull(pwdOnTestDbAttrAfter);\n-        assertNotNull(pwdOnTestDbAttrAfter.getValues());\n-        assertFalse(pwdOnTestDbAttrAfter.getValues().isEmpty());\n-        assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().iterator().next());\n-\n-        // 3d. verify that password hasn't changed on testdb2\n-        userOnDb2 = resourceService.readConnObject(RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n-        final AttrTO pwdOnTestDb2AttrAfter = userOnDb2.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n-        assertNotNull(pwdOnTestDb2AttrAfter);\n-        assertNotNull(pwdOnTestDb2AttrAfter.getValues());\n-        assertFalse(pwdOnTestDb2AttrAfter.getValues().isEmpty());\n-        assertEquals(pwdOnTestDb2, pwdOnTestDb2AttrAfter.getValues().iterator().next());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE136AES() {\n-        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n-        AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n-        final String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n-\n-        // 2. set AES password cipher algorithm\n-        pwdCipherAlgo.getValues().set(0, \"AES\");\n-        configurationService.set(pwdCipherAlgo);\n-\n-        UserTO userTO = null;\n-        try {\n-            // 3. create user with no resources\n-            userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n-            userTO.getResources().clear();\n-\n-            userTO = createUser(userTO).getEntity();\n-            assertNotNull(userTO);\n-\n-            // 4. update user, assign a propagation priority resource but don't provide any password\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.getResources().add(new StringPatchItem.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n-            userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n-\n-            ProvisioningResult<UserTO> result = updateUser(userPatch);\n-            assertNotNull(result);\n-            userTO = result.getEntity();\n-            assertNotNull(userTO);\n-\n-            // 5. verify that propagation was successful\n-            List<PropagationStatus> props = result.getPropagationStatuses();\n-            assertNotNull(props);\n-            assertEquals(1, props.size());\n-            PropagationStatus prop = props.iterator().next();\n-            assertNotNull(prop);\n-            assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n-        } finally {\n-            // restore initial cipher algorithm\n-            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n-            configurationService.set(pwdCipherAlgo);\n-\n-            if (userTO != null) {\n-                deleteUser(userTO.getKey());\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public void isseSYNCOPE136Random() {\n-        // 1. create user with no resources\n-        UserTO userTO = getUniqueSampleTO(\"syncope136_Random@apache.org\");\n-        userTO.getResources().clear();\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        // 2. update user, assign a propagation priority resource but don't provide any password\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n-\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        assertNotNull(result);\n-\n-        // 3. verify that propagation was successful\n-        List<PropagationStatus> props = result.getPropagationStatuses();\n-        assertNotNull(props);\n-        assertEquals(1, props.size());\n-        PropagationStatus prop = props.iterator().next();\n-        assertNotNull(prop);\n-        assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n-    }\n-\n-    @Test\n-    public void mappingPurpose() {\n-        UserTO userTO = getUniqueSampleTO(\"mpurpose@apache.org\");\n-        userTO.getAuxClasses().add(\"csv\");\n-\n-        AttrTO csvuserid = new AttrTO();\n-        csvuserid.setSchema(\"csvuserid\");\n-        userTO.getDerAttrs().add(csvuserid);\n-\n-        userTO.getResources().clear();\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNull(connObjectTO.getAttrMap().get(\"email\"));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE265() {\n-        String[] userKeys = new String[] {\n-            \"1417acbe-cbf6-4277-9372-e75e04f97000\",\n-            \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\",\n-            \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\",\n-            \"c9b2dec2-00a7-4855-97c0-d854842b4b24\",\n-            \"823074dc-d280-436d-a7dd-07399fae48ec\" };\n-\n-        for (String userKey : userKeys) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userKey);\n-            userPatch.getPlainAttrs().add(attrAddReplacePatch(\"ctype\", \"a type\"));\n-            UserTO userTO = updateUser(userPatch).getEntity();\n-            assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"ctype\").getValues().get(0));\n-        }\n-    }\n-\n-    @Test\n-    public void bulkActions() {\n-        BulkAction bulkAction = new BulkAction();\n-\n-        for (int i = 0; i < 10; i++) {\n-            UserTO userTO = getUniqueSampleTO(\"bulk_\" + i + \"@apache.org\");\n-            bulkAction.getTargets().add(String.valueOf(createUser(userTO).getEntity().getKey()));\n-        }\n-\n-        // check for a fail\n-        bulkAction.getTargets().add(String.valueOf(Long.MAX_VALUE));\n-\n-        assertEquals(11, bulkAction.getTargets().size());\n-\n-        bulkAction.setType(BulkAction.Type.SUSPEND);\n-        BulkActionResult res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n-        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n-        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n-        assertEquals(\"suspended\", userService.read(res.getResultByStatus(Status.SUCCESS).get(3)).getStatus());\n-\n-        bulkAction.setType(BulkAction.Type.REACTIVATE);\n-        res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n-        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n-        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n-        assertEquals(\"active\", userService.read(res.getResultByStatus(Status.SUCCESS).get(3)).getStatus());\n-\n-        bulkAction.setType(BulkAction.Type.DELETE);\n-        res = userService.bulk(bulkAction).readEntity(BulkActionResult.class);\n-        assertEquals(10, res.getResultByStatus(Status.SUCCESS).size());\n-        assertEquals(1, res.getResultByStatus(Status.FAILURE).size());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE354() {\n-        // change resource-ldap group mapping for including uniqueMember (need for assertions below)\n-        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n-        for (MappingItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n-            if (\"description\".equals(item.getExtAttrName())) {\n-                item.setExtAttrName(\"uniqueMember\");\n-            }\n-        }\n-        resourceService.update(ldap);\n-\n-        // 1. create group with LDAP resource\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"SYNCOPE354-\" + getUUIDString());\n-        groupTO.setRealm(\"/\");\n-        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n-\n-        groupTO = createGroup(groupTO).getEntity();\n-        assertNotNull(groupTO);\n-\n-        // 2. create user with LDAP resource and membership of the above group\n-        UserTO userTO = getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n-\n-        // 3. read group on resource, check that user DN is included in uniqueMember\n-        ConnObjectTO connObj = resourceService.readConnObject(\n-                RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-        assertNotNull(connObj);\n-        assertTrue(connObj.getAttrMap().get(\"uniqueMember\").getValues().\n-                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n-\n-        // 4. remove membership\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n-                group(userTO.getMemberships().get(0).getGroupKey()).build());\n-\n-        userTO = updateUser(userPatch).getEntity();\n-        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n-\n-        // 5. read group on resource, check that user DN was removed from uniqueMember\n-        connObj = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n-        assertNotNull(connObj);\n-        assertFalse(connObj.getAttrMap().get(\"uniqueMember\").getValues().\n-                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n-\n-        // 6. restore original resource-ldap group mapping\n-        for (MappingItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n-            if (\"uniqueMember\".equals(item.getExtAttrName())) {\n-                item.setExtAttrName(\"description\");\n-            }\n-        }\n-        resourceService.update(ldap);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE357() throws IOException {\n-        // 1. create group with LDAP resource\n-        GroupTO groupTO = new GroupTO();\n-        groupTO.setName(\"SYNCOPE357-\" + getUUIDString());\n-        groupTO.setRealm(\"/\");\n-        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n-\n-        groupTO = createGroup(groupTO).getEntity();\n-        assertNotNull(groupTO);\n-\n-        // 2. create user with membership of the above group\n-        UserTO userTO = getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n-        userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n-        userTO.getPlainAttrs().add(attrTO(\"photo\",\n-                Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n-        assertNotNull(userTO.getPlainAttrMap().get(\"obscure\"));\n-        assertNotNull(userTO.getPlainAttrMap().get(\"photo\"));\n-\n-        // 3. read user on resource\n-        ConnObjectTO connObj = resourceService.readConnObject(\n-                RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObj);\n-        AttrTO registeredAddress = connObj.getAttrMap().get(\"registeredAddress\");\n-        assertNotNull(registeredAddress);\n-        assertEquals(userTO.getPlainAttrMap().get(\"obscure\").getValues(), registeredAddress.getValues());\n-        AttrTO jpegPhoto = connObj.getAttrMap().get(\"jpegPhoto\");\n-        assertNotNull(jpegPhoto);\n-        assertEquals(userTO.getPlainAttrMap().get(\"photo\").getValues(), jpegPhoto.getValues());\n-\n-        // 4. remove group\n-        groupService.delete(groupTO.getKey());\n-\n-        // 5. try to read user on resource: fail\n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.NotFound, e.getType());\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE383() {\n-        // 1. create user without resources\n-        UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n-        userTO.getResources().clear();\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        // 2. assign resource without specifying a new pwd and check propagation failure\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        assertNotNull(result);\n-        userTO = result.getEntity();\n-        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n-        userTO = result.getEntity();\n-\n-        // 3. request to change password only on testdb\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(\n-                new PasswordPatch.Builder().value(getUUIDString() + \"abbcbcbddd123\").resource(RESOURCE_NAME_TESTDB).\n-                build());\n-\n-        result = updateUser(userPatch);\n-        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE402() {\n-        // 1. create an user with strict mandatory attributes only\n-        UserTO userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        String userId = getUUIDString() + \"syncope402@syncope.apache.org\";\n-        userTO.setUsername(userId);\n-        userTO.setPassword(\"password123\");\n-\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getResources().isEmpty());\n-\n-        // 2. update assigning a resource NOT forcing mandatory constraints\n-        // AND priority: must fail with PropagationException\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-\n-        List<PropagationStatus> propagationStatuses = result.getPropagationStatuses();\n-        PropagationStatus ws1PropagationStatus = null;\n-        if (propagationStatuses != null) {\n-            for (PropagationStatus propStatus : propagationStatuses) {\n-                if (RESOURCE_NAME_WS1.equals(propStatus.getResource())) {\n-                    ws1PropagationStatus = propStatus;\n-                    break;\n-                }\n-            }\n-        }\n-        assertNotNull(ws1PropagationStatus);\n-        assertEquals(RESOURCE_NAME_WS1, ws1PropagationStatus.getResource());\n-        assertNotNull(ws1PropagationStatus.getFailureReason());\n-        assertEquals(PropagationTaskExecStatus.FAILURE, ws1PropagationStatus.getStatus());\n-    }\n-\n-    @Test\n-    public void unlink() {\n-        UserTO userTO = getUniqueSampleTO(\"unlink@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        UserTO actual = createUser(userTO).getEntity();\n-        assertNotNull(actual);\n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n-\n-        DeassociationPatch deassociationPatch = new DeassociationPatch();\n-        deassociationPatch.setKey(actual.getKey());\n-        deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n-        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n-\n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n-\n-        actual = userService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertTrue(actual.getResources().isEmpty());\n-\n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n-    }\n-\n-    @Test\n-    public void link() {\n-        UserTO userTO = getUniqueSampleTO(\"link@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-\n-        UserTO actual = createUser(userTO).getEntity();\n-        assertNotNull(actual);\n-        assertTrue(actual.getResources().isEmpty());\n-\n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n-\n-        AssociationPatch associationPatch = new AssociationPatch();\n-        associationPatch.setKey(actual.getKey());\n-        associationPatch.setAction(ResourceAssociationAction.LINK);\n-        associationPatch.getResources().add(RESOURCE_NAME_CSV);\n-\n-        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n-\n-        actual = userService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertFalse(actual.getResources().isEmpty());\n-\n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void unassign() {\n-        UserTO userTO = getUniqueSampleTO(\"unassign@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-\n-        UserTO actual = createUser(userTO).getEntity();\n-        assertNotNull(actual);\n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n-\n-        DeassociationPatch deassociationPatch = new DeassociationPatch();\n-        deassociationPatch.setKey(actual.getKey());\n-        deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n-        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n-\n-        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n-\n-        actual = userService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertTrue(actual.getResources().isEmpty());\n-\n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void assign() {\n-        UserTO userTO = getUniqueSampleTO(\"assign@syncope.apache.org\");\n+    public void assign() {\n+        UserTO userTO = getUniqueSampleTO(\"assign@syncope.apache.org\");\n         userTO.getResources().clear();\n         userTO.getMemberships().clear();\n         userTO.getDerAttrs().clear();\n@@ -2038,554 +1312,4 @@ public void deprovisionUnlinked() {\n         }\n     }\n \n-    @Test\n-    public void issueSYNCOPE420() {\n-        RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n-        assertNotNull(realm);\n-        realm.getActionsClassNames().add(DoubleValueLogicActions.class.getName());\n-        realmService.update(realm);\n-\n-        UserTO userTO = getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n-        userTO.setRealm(realm.getFullPath());\n-        userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n-\n-        userTO = createUser(userTO).getEntity();\n-        assertEquals(\"6\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n-\n-        userTO = updateUser(userPatch).getEntity();\n-        assertEquals(\"14\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE426() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope426@syncope.apache.org\");\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n-        userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getEntity();\n-        assertNotNull(userTO);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE435() {\n-        // 1. create user without password\n-        UserTO userTO = getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n-        userTO.setPassword(null);\n-        userTO = createUser(userTO, false).getEntity();\n-        assertNotNull(userTO);\n-\n-        // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n-\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n-        assertNotNull(result);\n-        userTO = result.getEntity();\n-        assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n-        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        assertTrue(result.getPropagationStatuses().get(0).getFailureReason().\n-                startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE454() throws NamingException {\n-        // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n-        UserTO userTO = getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        // 2. read resource configuration for LDAP binding\n-        ConnObjectTO connObject =\n-                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n-\n-        // 3. try (and succeed) to perform simple LDAP binding with provided password ('password123')\n-        assertNotNull(getLdapRemoteObject(\n-                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n-                \"password123\",\n-                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n-\n-        // 4. update user without any password change request\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n-\n-        userService.update(userPatch);\n-\n-        // 5. try (and succeed again) to perform simple LDAP binding: password has not changed\n-        assertNotNull(getLdapRemoteObject(\n-                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n-                \"password123\",\n-                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE493() {\n-        // 1.  create user and check that firstname is not propagated on resource with mapping for firstname set to NONE\n-        UserTO userTO = getUniqueSampleTO(\"493@test.org\");\n-        userTO.getResources().add(RESOURCE_NAME_WS1);\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n-\n-        ConnObjectTO actual =\n-                resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(actual);\n-        // check if mapping attribute with purpose NONE really hasn't been propagated\n-        assertNull(actual.getAttrMap().get(\"NAME\"));\n-\n-        // 2.  update resource ws-target-resource-1\n-        ResourceTO ws1 = resourceService.read(RESOURCE_NAME_WS1);\n-        assertNotNull(ws1);\n-\n-        MappingTO ws1NewUMapping = ws1.getProvision(AnyTypeKind.USER.name()).getMapping();\n-        // change purpose from NONE to BOTH\n-        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n-            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n-                itemTO.setPurpose(MappingPurpose.BOTH);\n-            }\n-        }\n-\n-        ws1.getProvision(AnyTypeKind.USER.name()).setMapping(ws1NewUMapping);\n-\n-        resourceService.update(ws1);\n-        ResourceTO newWs1 = resourceService.read(ws1.getKey());\n-        assertNotNull(newWs1);\n-\n-        // check for existence\n-        Collection<MappingItemTO> mapItems = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping().getItems();\n-        assertNotNull(mapItems);\n-        assertEquals(7, mapItems.size());\n-\n-        // 3.  update user and check firstname propagation        \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"firstname\", \"firstnameNew\"));\n-\n-        result = updateUser(userPatch);\n-        assertNotNull(userTO);\n-        assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n-        userTO = result.getEntity();\n-\n-        ConnObjectTO newUser =\n-                resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n-\n-        assertNotNull(newUser.getAttrMap().get(\"NAME\"));\n-        assertEquals(\"firstnameNew\", newUser.getAttrMap().get(\"NAME\").getValues().get(0));\n-\n-        // 4.  restore resource ws-target-resource-1 mapping\n-        ws1NewUMapping = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping();\n-        // restore purpose from BOTH to NONE\n-        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n-            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n-                itemTO.setPurpose(MappingPurpose.NONE);\n-            }\n-        }\n-\n-        newWs1.getProvision(AnyTypeKind.USER.name()).setMapping(ws1NewUMapping);\n-\n-        resourceService.update(newWs1);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE505DB() throws Exception {\n-        // 1. create user\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-db@syncope.apache.org\");\n-        user.setPassword(\"security123\");\n-        user = createUser(user).getEntity();\n-        assertNotNull(user);\n-        assertTrue(user.getResources().isEmpty());\n-\n-        // 2. Add DBPasswordPropagationActions\n-        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n-        assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().add(DBPasswordPropagationActions.class.getName());\n-        resourceService.update(resourceTO);\n-\n-        // 3. Add a db resource to the User\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-\n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n-\n-        user = updateUser(userPatch).getEntity();\n-        assertNotNull(user);\n-        assertEquals(1, user.getResources().size());\n-\n-        // 4. Check that the DB resource has the correct password\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-        String value = jdbcTemplate.queryForObject(\n-                \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n-        assertEquals(Encryptor.getInstance().encode(\"security123\", CipherAlgorithm.SHA1), value.toUpperCase());\n-\n-        // 5. Remove DBPasswordPropagationActions\n-        resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n-        assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().remove(DBPasswordPropagationActions.class.getName());\n-        resourceService.update(resourceTO);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE505LDAP() throws Exception {\n-        // 1. create user\n-        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-ldap@syncope.apache.org\");\n-        user.setPassword(\"security123\");\n-        user = createUser(user).getEntity();\n-        assertNotNull(user);\n-        assertTrue(user.getResources().isEmpty());\n-\n-        // 2. Add LDAPPasswordPropagationActions\n-        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n-        assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().add(LDAPPasswordPropagationActions.class.getName());\n-        resourceTO.setRandomPwdIfNotProvided(false);\n-        resourceService.update(resourceTO);\n-\n-        // 3. Add a resource to the User\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n-\n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n-\n-        user = updateUser(userPatch).getEntity();\n-        assertNotNull(user);\n-        assertEquals(1, user.getResources().size());\n-\n-        // 4. Check that the LDAP resource has the correct password\n-        ConnObjectTO connObject =\n-                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n-\n-        assertNotNull(getLdapRemoteObject(\n-                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n-                \"security123\",\n-                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n-\n-        // 5. Remove LDAPPasswordPropagationActions\n-        resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n-        assertNotNull(resourceTO);\n-        resourceTO.getPropagationActionsClassNames().remove(LDAPPasswordPropagationActions.class.getName());\n-        resourceTO.setRandomPwdIfNotProvided(true);\n-        resourceService.update(resourceTO);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE391() {\n-        // 1. create user on Syncope with null password\n-        UserTO userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-        userTO.setPassword(null);\n-\n-        userTO = createUser(userTO, false).getEntity();\n-        assertNotNull(userTO);\n-        assertNull(userTO.getPassword());\n-\n-        // 2. create existing user on csv and check that password on Syncope is null and that password on resource\n-        // doesn't change\n-        userTO = new UserTO();\n-        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n-        userTO.setPassword(null);\n-        userTO.setUsername(\"syncope391@syncope.apache.org\");\n-        userTO.getPlainAttrs().add(attrTO(\"fullname\", \"fullname\"));\n-        userTO.getPlainAttrs().add(attrTO(\"firstname\", \"nome0\"));\n-        userTO.getPlainAttrs().add(attrTO(\"surname\", \"cognome0\"));\n-        userTO.getPlainAttrs().add(attrTO(\"userId\", \"syncope391@syncope.apache.org\"));\n-        userTO.getPlainAttrs().add(attrTO(\"email\", \"syncope391@syncope.apache.org\"));\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false).getEntity();\n-        assertNotNull(userTO);\n-\n-        ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-\n-        // check if password has not changed\n-        assertEquals(\"password0\", connObjectTO.getAttrMap().\n-                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n-        assertNull(userTO.getPassword());\n-\n-        // 3. create user with not null password and propagate onto resource-csv, specify not to save password on\n-        // Syncope local storage\n-        userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-        userTO.setPassword(\"passwordTESTNULL1\");\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        userTO = createUser(userTO, false).getEntity();\n-        assertNotNull(userTO);\n-\n-        connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-\n-        // check if password has been propagated and that saved userTO's password is null\n-        assertEquals(\"passwordTESTNULL1\", connObjectTO.getAttrMap().\n-                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n-        assertNull(userTO.getPassword());\n-\n-        // 4. create user and propagate password on resource-csv and on Syncope local storage\n-        userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-        userTO.setPassword(\"passwordTESTNULL1\");\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-\n-        userTO.getResources().add(RESOURCE_NAME_CSV);\n-        // storePassword true by default\n-        userTO = createUser(userTO).getEntity();\n-        assertNotNull(userTO);\n-\n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n-        assertNotNull(connObjectTO);\n-\n-        // check if password has been correctly propagated on Syncope and resource-csv as usual\n-        assertEquals(\"passwordTESTNULL1\", connObjectTO.getAttrMap().\n-                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n-        Pair<Map<String, Set<String>>, UserTO> self =\n-                clientFactory.create(userTO.getUsername(), \"passwordTESTNULL1\").self();\n-        assertNotNull(self);\n-\n-        // 4. add password policy to resource with passwordNotStore to false --> must store password\n-        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n-        assertNotNull(csv);\n-        try {\n-            csv.setPasswordPolicy(\"55e5de0b-c79c-4e66-adda-251b6fb8579a\");\n-            resourceService.update(csv);\n-            csv = resourceService.read(RESOURCE_NAME_CSV);\n-            assertEquals(\"55e5de0b-c79c-4e66-adda-251b6fb8579a\", csv.getPasswordPolicy());\n-\n-            userTO = getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n-            userTO.setPassword(null);\n-            userTO.getDerAttrs().clear();\n-            userTO.getVirAttrs().clear();\n-            userTO.getAuxClasses().add(\"csv\");\n-            userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-\n-            userTO.getResources().add(RESOURCE_NAME_CSV);\n-            createUser(userTO, false);\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n-            assertTrue(e.getMessage().contains(\"Password mandatory\"));\n-        } finally {\n-            // resource csv with null password policy\n-            csv.setPasswordPolicy(null);\n-            resourceService.update(csv);\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE647() {\n-        UserTO userTO = getUniqueSampleTO(\"syncope647@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getDerAttrs().clear();\n-        userTO.getVirAttrs().clear();\n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n-\n-        userTO.getAuxClasses().add(\"generic membership\");\n-        userTO.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n-\n-        userTO.getResources().add(RESOURCE_NAME_LDAP);\n-\n-        UserTO actual = createUser(userTO).getEntity();\n-        assertNotNull(actual);\n-        assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n-\n-        ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"postalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n-\n-        actual = updateUser(userPatch).getEntity();\n-\n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n-        assertNotNull(connObjectTO);\n-        assertEquals(\"newPostalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE626() {\n-        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n-        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n-\n-        DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n-        ruleConf.setUsernameAllowed(false);\n-        passwordPolicy.getRuleConfs().add(ruleConf);\n-\n-        passwordPolicy = createPolicy(passwordPolicy);\n-        assertNotNull(passwordPolicy);\n-\n-        RealmTO realm = realmService.list(\"/even/two\").get(0);\n-        String oldPasswordPolicy = realm.getPasswordPolicy();\n-        realm.setPasswordPolicy(passwordPolicy.getKey());\n-        realmService.update(realm);\n-\n-        try {\n-            UserTO user = getUniqueSampleTO(\"syncope626@syncope.apache.org\");\n-            user.setRealm(realm.getFullPath());\n-            user.setPassword(user.getUsername());\n-            try {\n-                createUser(user);\n-                fail();\n-            } catch (SyncopeClientException e) {\n-                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n-                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n-            }\n-\n-            user.setPassword(\"password123\");\n-            user = createUser(user).getEntity();\n-            assertNotNull(user);\n-        } finally {\n-            realm.setPasswordPolicy(oldPasswordPolicy);\n-            realmService.update(realm);\n-\n-            policyService.delete(passwordPolicy.getKey());\n-        }\n-\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE686() {\n-        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n-        AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n-        String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n-\n-        // 2. set AES password cipher algorithm\n-        pwdCipherAlgo.getValues().set(0, \"AES\");\n-        configurationService.set(pwdCipherAlgo);\n-\n-        try {\n-            // 3. create group with LDAP resource assigned\n-            GroupTO group = GroupITCase.getBasicSampleTO(\"syncope686\");\n-            group.getResources().add(RESOURCE_NAME_LDAP);\n-            group = createGroup(group).getEntity();\n-            assertNotNull(group);\n-\n-            // 4. create user with no resources\n-            UserTO userTO = getUniqueSampleTO(\"syncope686@apache.org\");\n-            userTO.getResources().clear();\n-\n-            userTO = createUser(userTO).getEntity();\n-            assertNotNull(userTO);\n-\n-            // 5. update user with the new group, and don't provide any password\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                    group(group.getKey()).build());\n-\n-            ProvisioningResult<UserTO> result = updateUser(userPatch);\n-            assertNotNull(result);\n-\n-            // 5. verify that propagation was successful\n-            List<PropagationStatus> props = result.getPropagationStatuses();\n-            assertNotNull(props);\n-            assertEquals(1, props.size());\n-            PropagationStatus prop = props.iterator().next();\n-            assertNotNull(prop);\n-            assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n-            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n-        } finally {\n-            // restore initial cipher algorithm\n-            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n-            configurationService.set(pwdCipherAlgo);\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE710() {\n-        // 1. create groups for indirect resource assignment\n-        GroupTO ldapGroup = GroupITCase.getBasicSampleTO(\"syncope710.ldap\");\n-        ldapGroup.getResources().add(RESOURCE_NAME_LDAP);\n-        ldapGroup = createGroup(ldapGroup).getEntity();\n-\n-        GroupTO dbGroup = GroupITCase.getBasicSampleTO(\"syncope710.db\");\n-        dbGroup.getResources().add(RESOURCE_NAME_TESTDB);\n-        dbGroup = createGroup(dbGroup).getEntity();\n-\n-        // 2. create user with memberships for the groups created above\n-        UserTO userTO = getUniqueSampleTO(\"syncope710@syncope.apache.org\");\n-        userTO.getResources().clear();\n-        userTO.getMemberships().clear();\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(ldapGroup.getKey()).build());\n-        userTO.getMemberships().add(new MembershipTO.Builder().group(dbGroup.getKey()).build());\n-\n-        ProvisioningResult<UserTO> result = createUser(userTO);\n-        assertEquals(2, result.getPropagationStatuses().size());\n-        userTO = result.getEntity();\n-\n-        // 3. request to propagate passwod only to db\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().\n-                onSyncope(false).resource(RESOURCE_NAME_TESTDB).value(\"newpassword123\").build());\n-\n-        result = updateUser(userPatch);\n-        assertEquals(1, result.getPropagationStatuses().size());\n-        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().get(0).getResource());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE881() {\n-        // 1. create group and assign LDAP\n-        GroupTO group = GroupITCase.getSampleTO(\"syncope881G\");\n-        group.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n-\n-        group = createGroup(group).getEntity();\n-        assertNotNull(group);\n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), group.getKey()));\n-\n-        // 2. create user and assign such group\n-        UserTO user = getUniqueSampleTO(\"syncope881U@apache.org\");\n-        user.getMemberships().clear();\n-        user.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n-\n-        user = createUser(user).getEntity();\n-        assertNotNull(user);\n-\n-        // 3. verify that user is in LDAP\n-        ConnObjectTO connObject =\n-                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n-        assertNotNull(connObject);\n-        AttrTO userDn = connObject.getAttrMap().get(Name.NAME);\n-        assertNotNull(userDn);\n-        assertEquals(1, userDn.getValues().size());\n-        assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n-\n-        // 4. remove user\n-        userService.delete(user.getKey());\n-\n-        // 5. verify that user is not in LDAP anynmore\n-        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n-    }\n }"},{"sha":"1e50c24d95016985982728b698aa3e7b99ca48f7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"added","additions":1334,"deletions":0,"changes":1334,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8def92a4ed2a3660552816f3b93eddb8cdc799ba/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8def92a4ed2a3660552816f3b93eddb8cdc799ba/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=8def92a4ed2a3660552816f3b93eddb8cdc799ba","patch":"@@ -0,0 +1,1334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.naming.NamingException;\n+import javax.ws.rs.core.GenericType;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.common.util.Base64Utility;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n+import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.core.reference.DoubleValueLogicActions;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.junit.Test;\n+import org.springframework.dao.EmptyResultDataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+public class UserIssuesITCase extends AbstractITCase {\n+\n+    @Test\n+    public void issue186() {\n+        // 1. create an user with strict mandatory attributes only\n+        UserTO userTO = new UserTO();\n+        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        String userId = getUUIDString() + \"issue186@syncope.apache.org\";\n+        userTO.setUsername(userId);\n+        userTO.setPassword(\"password123\");\n+\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n+\n+        try {\n+            userTO = updateUser(userPatch).getEntity();\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+        }\n+\n+        // 3. update assigning a resource NOT forcing mandatory constraints\n+        // AND priority: must fail with PropagationException\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n+        userTO = result.getEntity();\n+\n+        // 4. update assigning a resource NOT forcing mandatory constraints\n+        // BUT not priority: must succeed\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123456\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_CSV).build());\n+\n+        updateUser(userPatch);\n+    }\n+\n+    @Test(expected = EmptyResultDataAccessException.class)\n+    public void issue213() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue213@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getResources().size());\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n+        String username = jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class,\n+                userTO.getUsername());\n+\n+        assertEquals(userTO.getUsername(), username);\n+\n+        UserPatch userPatch = new UserPatch();\n+\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(\n+                new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(RESOURCE_NAME_TESTDB).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n+    }\n+\n+    @Test\n+    public void issue234() {\n+        UserTO inUserTO = UserITCase.getUniqueSampleTO(\"issue234@syncope.apache.org\");\n+        inUserTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        UserTO userTO = createUser(inUserTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        UserPatch userPatch = new UserPatch();\n+\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertNotNull(userTO);\n+        assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n+    }\n+\n+    @Test\n+    public final void issue280() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue280@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).\n+                resource(RESOURCE_NAME_TESTDB).value(\"123password\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n+\n+        List<PropagationStatus> propagations = result.getPropagationStatuses();\n+        assertNotNull(propagations);\n+        assertEquals(1, propagations.size());\n+\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n+\n+        String resource = propagations.get(0).getResource();\n+        assertEquals(RESOURCE_NAME_TESTDB, resource);\n+    }\n+\n+    @Test\n+    public void issue281() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"issue281@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+\n+        List<PropagationStatus> propagations = result.getPropagationStatuses();\n+        assertNotNull(propagations);\n+        assertEquals(1, propagations.size());\n+        assertNotEquals(PropagationTaskExecStatus.SUCCESS, propagations.get(0).getStatus());\n+\n+        String resource = propagations.get(0).getResource();\n+        assertEquals(RESOURCE_NAME_CSV, resource);\n+    }\n+\n+    @Test\n+    public void issue288() {\n+        UserTO userTO = UserITCase.getSampleTO(\"issue288@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"aLong\", \"STRING\"));\n+\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidValues, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE108() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope108@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getMemberships().add(new MembershipTO.Builder().\n+                group(\"0626100b-a4ba-4e00-9971-86fad52a6216\").build());\n+        userTO.getMemberships().add(new MembershipTO.Builder().\n+                group(\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\").build());\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+        assertEquals(2, userTO.getMemberships().size());\n+        assertEquals(1, userTO.getResources().size());\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // -----------------------------------\n+        // Remove the first membership: de-provisioning shouldn't happen\n+        // -----------------------------------\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        // -----------------------------------\n+\n+        // -----------------------------------\n+        // Remove the resource assigned directly: de-provisioning shouldn't happen\n+        // -----------------------------------\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+\n+        userPatch.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n+                value(userTO.getResources().iterator().next()).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getMemberships().size());\n+        assertFalse(userTO.getResources().isEmpty());\n+\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        // -----------------------------------\n+\n+        // -----------------------------------\n+        // Remove the first membership: de-provisioning should happen\n+        // -----------------------------------\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getMemberships().isEmpty());\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        try {\n+            resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+            fail(\"Read should not succeeed\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE185() {\n+        // 1. create user with LDAP resource, succesfully propagated\n+        UserTO userTO = UserITCase.getSampleTO(\"syncope185@syncope.apache.org\");\n+        userTO.getVirAttrs().clear();\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getEntity();\n+\n+        // 2. delete this user\n+        userService.delete(userTO.getKey());\n+\n+        // 3. try (and fail) to find this user on the external LDAP resource\n+        try {\n+            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n+            fail(\"This entry should not be present on this resource\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test()\n+    public void issueSYNCOPE51() {\n+        AttrTO defaultCA = configurationService.get(\"password.cipher.algorithm\");\n+        final String originalCAValue = defaultCA.getValues().get(0);\n+        defaultCA.getValues().set(0, \"MD5\");\n+        configurationService.set(defaultCA);\n+\n+        AttrTO newCA = configurationService.get(defaultCA.getSchema());\n+        assertEquals(defaultCA, newCA);\n+\n+        UserTO userTO = UserITCase.getSampleTO(\"syncope51@syncope.apache.org\");\n+        userTO.setPassword(\"password\");\n+\n+        try {\n+            createUser(userTO);\n+            fail(\"Create user should not succeed\");\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+            assertTrue(e.getElements().iterator().next().contains(\"MD5\"));\n+        }\n+\n+        defaultCA.getValues().set(0, originalCAValue);\n+        configurationService.set(defaultCA);\n+\n+        AttrTO oldCA = configurationService.get(defaultCA.getSchema());\n+        assertEquals(defaultCA, oldCA);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE267() {\n+        // ----------------------------------\n+        // create user and check virtual attribute value propagation\n+        // ----------------------------------\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope267@apache.org\");\n+        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n+\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(result);\n+        assertFalse(result.getPropagationStatuses().isEmpty());\n+        assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(0).getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getEntity();\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.readConnObject(RESOURCE_NAME_DBVIRATTR, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"virtualvalue\", connObjectTO.getAttrMap().get(\"USERNAME\").getValues().get(0));\n+        // ----------------------------------\n+\n+        userTO = userService.read(userTO.getKey());\n+\n+        assertNotNull(userTO);\n+        assertEquals(1, userTO.getVirAttrs().size());\n+        assertEquals(\"virtualvalue\", userTO.getVirAttrs().iterator().next().getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE266() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope266@apache.org\");\n+        userTO.getResources().clear();\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+\n+        // this resource has not a mapping for Password\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_UPDATE).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE279() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope279@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getResources().add(RESOURCE_NAME_TIMEOUT);\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertEquals(RESOURCE_NAME_TIMEOUT, result.getPropagationStatuses().get(0).getResource());\n+        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n+        assertEquals(PropagationTaskExecStatus.FAILURE, result.getPropagationStatuses().get(0).getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE122() {\n+        // 1. create user on testdb and testdb2\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope122@apache.org\");\n+        userTO.getResources().clear();\n+\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB);\n+        userTO.getResources().add(RESOURCE_NAME_TESTDB2);\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB));\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        final String pwdOnSyncope = userTO.getPassword();\n+\n+        ConnObjectTO userOnDb = resourceService.readConnObject(\n+                RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n+        final AttrTO pwdOnTestDbAttr = userOnDb.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDbAttr);\n+        assertNotNull(pwdOnTestDbAttr.getValues());\n+        assertFalse(pwdOnTestDbAttr.getValues().isEmpty());\n+        final String pwdOnTestDb = pwdOnTestDbAttr.getValues().iterator().next();\n+\n+        ConnObjectTO userOnDb2 = resourceService.readConnObject(\n+                RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n+        final AttrTO pwdOnTestDb2Attr = userOnDb2.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDb2Attr);\n+        assertNotNull(pwdOnTestDb2Attr.getValues());\n+        assertFalse(pwdOnTestDb2Attr.getValues().isEmpty());\n+        final String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n+\n+        // 2. request to change password only on testdb (no Syncope, no testdb2)\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n+                resource(RESOURCE_NAME_TESTDB).build());\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        userTO = result.getEntity();\n+\n+        // 3a. Chech that only a single propagation took place\n+        assertNotNull(result.getPropagationStatuses());\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().iterator().next().getResource());\n+\n+        // 3b. verify that password hasn't changed on Syncope\n+        assertEquals(pwdOnSyncope, userTO.getPassword());\n+\n+        // 3c. verify that password *has* changed on testdb\n+        userOnDb = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey());\n+        final AttrTO pwdOnTestDbAttrAfter = userOnDb.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDbAttrAfter);\n+        assertNotNull(pwdOnTestDbAttrAfter.getValues());\n+        assertFalse(pwdOnTestDbAttrAfter.getValues().isEmpty());\n+        assertNotEquals(pwdOnTestDb, pwdOnTestDbAttrAfter.getValues().iterator().next());\n+\n+        // 3d. verify that password hasn't changed on testdb2\n+        userOnDb2 = resourceService.readConnObject(RESOURCE_NAME_TESTDB2, AnyTypeKind.USER.name(), userTO.getKey());\n+        final AttrTO pwdOnTestDb2AttrAfter = userOnDb2.getAttrMap().get(OperationalAttributes.PASSWORD_NAME);\n+        assertNotNull(pwdOnTestDb2AttrAfter);\n+        assertNotNull(pwdOnTestDb2AttrAfter.getValues());\n+        assertFalse(pwdOnTestDb2AttrAfter.getValues().isEmpty());\n+        assertEquals(pwdOnTestDb2, pwdOnTestDb2AttrAfter.getValues().iterator().next());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE136AES() {\n+        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n+        AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n+        final String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n+\n+        // 2. set AES password cipher algorithm\n+        pwdCipherAlgo.getValues().set(0, \"AES\");\n+        configurationService.set(pwdCipherAlgo);\n+\n+        UserTO userTO = null;\n+        try {\n+            // 3. create user with no resources\n+            userTO = UserITCase.getUniqueSampleTO(\"syncope136_AES@apache.org\");\n+            userTO.getResources().clear();\n+\n+            userTO = createUser(userTO).getEntity();\n+            assertNotNull(userTO);\n+\n+            // 4. update user, assign a propagation priority resource but don't provide any password\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n+            userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n+\n+            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            assertNotNull(result);\n+            userTO = result.getEntity();\n+            assertNotNull(userTO);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatus> props = result.getPropagationStatuses();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatus prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+            configurationService.set(pwdCipherAlgo);\n+\n+            if (userTO != null) {\n+                deleteUser(userTO.getKey());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void isseSYNCOPE136Random() {\n+        // 1. create user with no resources\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope136_Random@apache.org\");\n+        userTO.getResources().clear();\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        // 2. update user, assign a propagation priority resource but don't provide any password\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n+\n+        // 3. verify that propagation was successful\n+        List<PropagationStatus> props = result.getPropagationStatuses();\n+        assertNotNull(props);\n+        assertEquals(1, props.size());\n+        PropagationStatus prop = props.iterator().next();\n+        assertNotNull(prop);\n+        assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE265() {\n+        String[] userKeys = new String[] {\n+            \"1417acbe-cbf6-4277-9372-e75e04f97000\",\n+            \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\",\n+            \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\",\n+            \"c9b2dec2-00a7-4855-97c0-d854842b4b24\",\n+            \"823074dc-d280-436d-a7dd-07399fae48ec\" };\n+\n+        for (String userKey : userKeys) {\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userKey);\n+            userPatch.getPlainAttrs().add(attrAddReplacePatch(\"ctype\", \"a type\"));\n+            UserTO userTO = updateUser(userPatch).getEntity();\n+            assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"ctype\").getValues().get(0));\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE354() {\n+        // change resource-ldap group mapping for including uniqueMember (need for assertions below)\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        for (MappingItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n+            if (\"description\".equals(item.getExtAttrName())) {\n+                item.setExtAttrName(\"uniqueMember\");\n+            }\n+        }\n+        resourceService.update(ldap);\n+\n+        // 1. create group with LDAP resource\n+        GroupTO groupTO = new GroupTO();\n+        groupTO.setName(\"SYNCOPE354-\" + getUUIDString());\n+        groupTO.setRealm(\"/\");\n+        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        groupTO = createGroup(groupTO).getEntity();\n+        assertNotNull(groupTO);\n+\n+        // 2. create user with LDAP resource and membership of the above group\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 3. read group on resource, check that user DN is included in uniqueMember\n+        ConnObjectTO connObj = resourceService.readConnObject(\n+                RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+        assertNotNull(connObj);\n+        assertTrue(connObj.getAttrMap().get(\"uniqueMember\").getValues().\n+                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n+\n+        // 4. remove membership\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n+                group(userTO.getMemberships().get(0).getGroupKey()).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 5. read group on resource, check that user DN was removed from uniqueMember\n+        connObj = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+        assertNotNull(connObj);\n+        assertFalse(connObj.getAttrMap().get(\"uniqueMember\").getValues().\n+                contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n+\n+        // 6. restore original resource-ldap group mapping\n+        for (MappingItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).getMapping().getItems()) {\n+            if (\"uniqueMember\".equals(item.getExtAttrName())) {\n+                item.setExtAttrName(\"description\");\n+            }\n+        }\n+        resourceService.update(ldap);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE357() throws IOException {\n+        // 1. create group with LDAP resource\n+        GroupTO groupTO = new GroupTO();\n+        groupTO.setName(\"SYNCOPE357-\" + getUUIDString());\n+        groupTO.setRealm(\"/\");\n+        groupTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        groupTO = createGroup(groupTO).getEntity();\n+        assertNotNull(groupTO);\n+\n+        // 2. create user with membership of the above group\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n+        userTO.getPlainAttrs().add(attrTO(\"photo\",\n+                Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+        assertNotNull(userTO.getPlainAttrMap().get(\"obscure\"));\n+        assertNotNull(userTO.getPlainAttrMap().get(\"photo\"));\n+\n+        // 3. read user on resource\n+        ConnObjectTO connObj = resourceService.readConnObject(\n+                RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObj);\n+        AttrTO registeredAddress = connObj.getAttrMap().get(\"registeredAddress\");\n+        assertNotNull(registeredAddress);\n+        assertEquals(userTO.getPlainAttrMap().get(\"obscure\").getValues(), registeredAddress.getValues());\n+        AttrTO jpegPhoto = connObj.getAttrMap().get(\"jpegPhoto\");\n+        assertNotNull(jpegPhoto);\n+        assertEquals(userTO.getPlainAttrMap().get(\"photo\").getValues(), jpegPhoto.getValues());\n+\n+        // 4. remove group\n+        groupService.delete(groupTO.getKey());\n+\n+        // 5. try to read user on resource: fail\n+        try {\n+            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE383() {\n+        // 1. create user without resources\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope383@apache.org\");\n+        userTO.getResources().clear();\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        // 2. assign resource without specifying a new pwd and check propagation failure\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n+        userTO = result.getEntity();\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n+        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n+        userTO = result.getEntity();\n+\n+        // 3. request to change password only on testdb\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(\n+                new PasswordPatch.Builder().value(getUUIDString() + \"abbcbcbddd123\").resource(RESOURCE_NAME_TESTDB).\n+                build());\n+\n+        result = updateUser(userPatch);\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE402() {\n+        // 1. create an user with strict mandatory attributes only\n+        UserTO userTO = new UserTO();\n+        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        String userId = getUUIDString() + \"syncope402@syncope.apache.org\";\n+        userTO.setUsername(userId);\n+        userTO.setPassword(\"password123\");\n+\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+        assertTrue(userTO.getResources().isEmpty());\n+\n+        // 2. update assigning a resource NOT forcing mandatory constraints\n+        // AND priority: must fail with PropagationException\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+\n+        List<PropagationStatus> propagationStatuses = result.getPropagationStatuses();\n+        PropagationStatus ws1PropagationStatus = null;\n+        if (propagationStatuses != null) {\n+            for (PropagationStatus propStatus : propagationStatuses) {\n+                if (RESOURCE_NAME_WS1.equals(propStatus.getResource())) {\n+                    ws1PropagationStatus = propStatus;\n+                    break;\n+                }\n+            }\n+        }\n+        assertNotNull(ws1PropagationStatus);\n+        assertEquals(RESOURCE_NAME_WS1, ws1PropagationStatus.getResource());\n+        assertNotNull(ws1PropagationStatus.getFailureReason());\n+        assertEquals(PropagationTaskExecStatus.FAILURE, ws1PropagationStatus.getStatus());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE420() {\n+        RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n+        assertNotNull(realm);\n+        realm.getActionsClassNames().add(DoubleValueLogicActions.class.getName());\n+        realmService.update(realm);\n+\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n+        userTO.setRealm(realm.getFullPath());\n+        userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n+\n+        userTO = createUser(userTO).getEntity();\n+        assertEquals(\"6\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertEquals(\"14\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE426() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope426@syncope.apache.org\");\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n+        userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n+        assertNotNull(userTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE435() {\n+        // 1. create user without password\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope435@syncope.apache.org\");\n+        userTO.setPassword(null);\n+        userTO = createUser(userTO, false).getEntity();\n+        assertNotNull(userTO);\n+\n+        // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n+\n+        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        assertNotNull(result);\n+        userTO = result.getEntity();\n+        assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n+        assertNotEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        assertTrue(result.getPropagationStatuses().get(0).getFailureReason().\n+                startsWith(\"Not attempted because there are mandatory attributes without value(s): [__PASSWORD__]\"));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE454() throws NamingException {\n+        // 1. create user with LDAP resource (with 'Generate password if missing' enabled)\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope454@syncope.apache.org\");\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        // 2. read resource configuration for LDAP binding\n+        ConnObjectTO connObject =\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userTO.getKey());\n+\n+        // 3. try (and succeed) to perform simple LDAP binding with provided password ('password123')\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n+                \"password123\",\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 4. update user without any password change request\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n+\n+        userService.update(userPatch);\n+\n+        // 5. try (and succeed again) to perform simple LDAP binding: password has not changed\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n+                \"password123\",\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE493() {\n+        // 1.  create user and check that firstname is not propagated on resource with mapping for firstname set to NONE\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"493@test.org\");\n+        userTO.getResources().add(RESOURCE_NAME_WS1);\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertNotNull(userTO);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getEntity();\n+\n+        ConnObjectTO actual =\n+                resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(actual);\n+        // check if mapping attribute with purpose NONE really hasn't been propagated\n+        assertNull(actual.getAttrMap().get(\"NAME\"));\n+\n+        // 2.  update resource ws-target-resource-1\n+        ResourceTO ws1 = resourceService.read(RESOURCE_NAME_WS1);\n+        assertNotNull(ws1);\n+\n+        MappingTO ws1NewUMapping = ws1.getProvision(AnyTypeKind.USER.name()).getMapping();\n+        // change purpose from NONE to BOTH\n+        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n+            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n+                itemTO.setPurpose(MappingPurpose.BOTH);\n+            }\n+        }\n+\n+        ws1.getProvision(AnyTypeKind.USER.name()).setMapping(ws1NewUMapping);\n+\n+        resourceService.update(ws1);\n+        ResourceTO newWs1 = resourceService.read(ws1.getKey());\n+        assertNotNull(newWs1);\n+\n+        // check for existence\n+        Collection<MappingItemTO> mapItems = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping().getItems();\n+        assertNotNull(mapItems);\n+        assertEquals(7, mapItems.size());\n+\n+        // 3.  update user and check firstname propagation        \n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"firstname\", \"firstnameNew\"));\n+\n+        result = updateUser(userPatch);\n+        assertNotNull(userTO);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n+        userTO = result.getEntity();\n+\n+        ConnObjectTO newUser =\n+                resourceService.readConnObject(RESOURCE_NAME_WS1, AnyTypeKind.USER.name(), userTO.getKey());\n+\n+        assertNotNull(newUser.getAttrMap().get(\"NAME\"));\n+        assertEquals(\"firstnameNew\", newUser.getAttrMap().get(\"NAME\").getValues().get(0));\n+\n+        // 4.  restore resource ws-target-resource-1 mapping\n+        ws1NewUMapping = newWs1.getProvision(AnyTypeKind.USER.name()).getMapping();\n+        // restore purpose from BOTH to NONE\n+        for (MappingItemTO itemTO : ws1NewUMapping.getItems()) {\n+            if (\"firstname\".equals(itemTO.getIntAttrName())) {\n+                itemTO.setPurpose(MappingPurpose.NONE);\n+            }\n+        }\n+\n+        newWs1.getProvision(AnyTypeKind.USER.name()).setMapping(ws1NewUMapping);\n+\n+        resourceService.update(newWs1);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE505DB() throws Exception {\n+        // 1. create user\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-db@syncope.apache.org\");\n+        user.setPassword(\"security123\");\n+        user = createUser(user).getEntity();\n+        assertNotNull(user);\n+        assertTrue(user.getResources().isEmpty());\n+\n+        // 2. Add DBPasswordPropagationActions\n+        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().add(DBPasswordPropagationActions.class.getName());\n+        resourceService.update(resourceTO);\n+\n+        // 3. Add a db resource to the User\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n+\n+        user = updateUser(userPatch).getEntity();\n+        assertNotNull(user);\n+        assertEquals(1, user.getResources().size());\n+\n+        // 4. Check that the DB resource has the correct password\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        String value = jdbcTemplate.queryForObject(\n+                \"SELECT PASSWORD FROM test WHERE ID=?\", String.class, user.getUsername());\n+        assertEquals(Encryptor.getInstance().encode(\"security123\", CipherAlgorithm.SHA1), value.toUpperCase());\n+\n+        // 5. Remove DBPasswordPropagationActions\n+        resourceTO = resourceService.read(RESOURCE_NAME_TESTDB);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().remove(DBPasswordPropagationActions.class.getName());\n+        resourceService.update(resourceTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE505LDAP() throws Exception {\n+        // 1. create user\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope505-ldap@syncope.apache.org\");\n+        user.setPassword(\"security123\");\n+        user = createUser(user).getEntity();\n+        assertNotNull(user);\n+        assertTrue(user.getResources().isEmpty());\n+\n+        // 2. Add LDAPPasswordPropagationActions\n+        ResourceTO resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().add(LDAPPasswordPropagationActions.class.getName());\n+        resourceTO.setRandomPwdIfNotProvided(false);\n+        resourceService.update(resourceTO);\n+\n+        // 3. Add a resource to the User\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n+\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n+\n+        user = updateUser(userPatch).getEntity();\n+        assertNotNull(user);\n+        assertEquals(1, user.getResources().size());\n+\n+        // 4. Check that the LDAP resource has the correct password\n+        ConnObjectTO connObject =\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n+\n+        assertNotNull(getLdapRemoteObject(\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0),\n+                \"security123\",\n+                connObject.getAttrMap().get(Name.NAME).getValues().get(0)));\n+\n+        // 5. Remove LDAPPasswordPropagationActions\n+        resourceTO = resourceService.read(RESOURCE_NAME_LDAP);\n+        assertNotNull(resourceTO);\n+        resourceTO.getPropagationActionsClassNames().remove(LDAPPasswordPropagationActions.class.getName());\n+        resourceTO.setRandomPwdIfNotProvided(true);\n+        resourceService.update(resourceTO);\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE391() {\n+        // 1. create user on Syncope with null password\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(null);\n+\n+        userTO = createUser(userTO, false).getEntity();\n+        assertNotNull(userTO);\n+        assertNull(userTO.getPassword());\n+\n+        // 2. create existing user on csv and check that password on Syncope is null and that password on resource\n+        // doesn't change\n+        userTO = new UserTO();\n+        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        userTO.setPassword(null);\n+        userTO.setUsername(\"syncope391@syncope.apache.org\");\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", \"fullname\"));\n+        userTO.getPlainAttrs().add(attrTO(\"firstname\", \"nome0\"));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", \"cognome0\"));\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", \"syncope391@syncope.apache.org\"));\n+        userTO.getPlainAttrs().add(attrTO(\"email\", \"syncope391@syncope.apache.org\"));\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userTO = createUser(userTO, false).getEntity();\n+        assertNotNull(userTO);\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has not changed\n+        assertEquals(\"password0\", connObjectTO.getAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNull(userTO.getPassword());\n+\n+        // 3. create user with not null password and propagate onto resource-csv, specify not to save password on\n+        // Syncope local storage\n+        userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(\"passwordTESTNULL1\");\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        userTO = createUser(userTO, false).getEntity();\n+        assertNotNull(userTO);\n+\n+        connObjectTO =\n+                resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has been propagated and that saved userTO's password is null\n+        assertEquals(\"passwordTESTNULL1\", connObjectTO.getAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        assertNull(userTO.getPassword());\n+\n+        // 4. create user and propagate password on resource-csv and on Syncope local storage\n+        userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+        userTO.setPassword(\"passwordTESTNULL1\");\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getResources().add(RESOURCE_NAME_CSV);\n+        // storePassword true by default\n+        userTO = createUser(userTO).getEntity();\n+        assertNotNull(userTO);\n+\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), userTO.getKey());\n+        assertNotNull(connObjectTO);\n+\n+        // check if password has been correctly propagated on Syncope and resource-csv as usual\n+        assertEquals(\"passwordTESTNULL1\", connObjectTO.getAttrMap().\n+                get(OperationalAttributes.PASSWORD_NAME).getValues().get(0));\n+        Pair<Map<String, Set<String>>, UserTO> self =\n+                clientFactory.create(userTO.getUsername(), \"passwordTESTNULL1\").self();\n+        assertNotNull(self);\n+\n+        // 4. add password policy to resource with passwordNotStore to false --> must store password\n+        ResourceTO csv = resourceService.read(RESOURCE_NAME_CSV);\n+        assertNotNull(csv);\n+        try {\n+            csv.setPasswordPolicy(\"55e5de0b-c79c-4e66-adda-251b6fb8579a\");\n+            resourceService.update(csv);\n+            csv = resourceService.read(RESOURCE_NAME_CSV);\n+            assertEquals(\"55e5de0b-c79c-4e66-adda-251b6fb8579a\", csv.getPasswordPolicy());\n+\n+            userTO = UserITCase.getUniqueSampleTO(\"syncope391@syncope.apache.org\");\n+            userTO.setPassword(null);\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+            userTO.getAuxClasses().add(\"csv\");\n+            userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+            userTO.getResources().add(RESOURCE_NAME_CSV);\n+            createUser(userTO, false);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+            assertTrue(e.getMessage().contains(\"Password mandatory\"));\n+        } finally {\n+            // resource csv with null password policy\n+            csv.setPasswordPolicy(null);\n+            resourceService.update(csv);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE647() {\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope647@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getDerAttrs().clear();\n+        userTO.getVirAttrs().clear();\n+        userTO.getAuxClasses().add(\"csv\");\n+        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+\n+        userTO.getAuxClasses().add(\"generic membership\");\n+        userTO.getPlainAttrs().add(attrTO(\"postalAddress\", \"postalAddress\"));\n+\n+        userTO.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        UserTO actual = createUser(userTO).getEntity();\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDerAttrMap().get(\"csvuserid\"));\n+\n+        ConnObjectTO connObjectTO =\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"postalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n+\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n+\n+        actual = updateUser(userPatch).getEntity();\n+\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n+        assertNotNull(connObjectTO);\n+        assertEquals(\"newPostalAddress\", connObjectTO.getAttrMap().get(\"postalAddress\").getValues().get(0));\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE626() {\n+        PasswordPolicyTO passwordPolicy = new PasswordPolicyTO();\n+        passwordPolicy.setDescription(\"Password Policy for SYNCOPE-626\");\n+\n+        DefaultPasswordRuleConf ruleConf = new DefaultPasswordRuleConf();\n+        ruleConf.setUsernameAllowed(false);\n+        passwordPolicy.getRuleConfs().add(ruleConf);\n+\n+        passwordPolicy = createPolicy(passwordPolicy);\n+        assertNotNull(passwordPolicy);\n+\n+        RealmTO realm = realmService.list(\"/even/two\").get(0);\n+        String oldPasswordPolicy = realm.getPasswordPolicy();\n+        realm.setPasswordPolicy(passwordPolicy.getKey());\n+        realmService.update(realm);\n+\n+        try {\n+            UserTO user = UserITCase.getUniqueSampleTO(\"syncope626@syncope.apache.org\");\n+            user.setRealm(realm.getFullPath());\n+            user.setPassword(user.getUsername());\n+            try {\n+                createUser(user);\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+                assertTrue(e.getElements().iterator().next().startsWith(\"InvalidPassword\"));\n+            }\n+\n+            user.setPassword(\"password123\");\n+            user = createUser(user).getEntity();\n+            assertNotNull(user);\n+        } finally {\n+            realm.setPasswordPolicy(oldPasswordPolicy);\n+            realmService.update(realm);\n+\n+            policyService.delete(passwordPolicy.getKey());\n+        }\n+\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE686() {\n+        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n+        AttrTO pwdCipherAlgo = configurationService.get(\"password.cipher.algorithm\");\n+        String origpwdCipherAlgo = pwdCipherAlgo.getValues().get(0);\n+\n+        // 2. set AES password cipher algorithm\n+        pwdCipherAlgo.getValues().set(0, \"AES\");\n+        configurationService.set(pwdCipherAlgo);\n+\n+        try {\n+            // 3. create group with LDAP resource assigned\n+            GroupTO group = GroupITCase.getBasicSampleTO(\"syncope686\");\n+            group.getResources().add(RESOURCE_NAME_LDAP);\n+            group = createGroup(group).getEntity();\n+            assertNotNull(group);\n+\n+            // 4. create user with no resources\n+            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope686@apache.org\");\n+            userTO.getResources().clear();\n+\n+            userTO = createUser(userTO).getEntity();\n+            assertNotNull(userTO);\n+\n+            // 5. update user with the new group, and don't provide any password\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                    group(group.getKey()).build());\n+\n+            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            assertNotNull(result);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatus> props = result.getPropagationStatuses();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatus prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(RESOURCE_NAME_LDAP, prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+        } finally {\n+            // restore initial cipher algorithm\n+            pwdCipherAlgo.getValues().set(0, origpwdCipherAlgo);\n+            configurationService.set(pwdCipherAlgo);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE710() {\n+        // 1. create groups for indirect resource assignment\n+        GroupTO ldapGroup = GroupITCase.getBasicSampleTO(\"syncope710.ldap\");\n+        ldapGroup.getResources().add(RESOURCE_NAME_LDAP);\n+        ldapGroup = createGroup(ldapGroup).getEntity();\n+\n+        GroupTO dbGroup = GroupITCase.getBasicSampleTO(\"syncope710.db\");\n+        dbGroup.getResources().add(RESOURCE_NAME_TESTDB);\n+        dbGroup = createGroup(dbGroup).getEntity();\n+\n+        // 2. create user with memberships for the groups created above\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope710@syncope.apache.org\");\n+        userTO.getResources().clear();\n+        userTO.getMemberships().clear();\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(ldapGroup.getKey()).build());\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(dbGroup.getKey()).build());\n+\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertEquals(2, result.getPropagationStatuses().size());\n+        userTO = result.getEntity();\n+\n+        // 3. request to propagate passwod only to db\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().\n+                onSyncope(false).resource(RESOURCE_NAME_TESTDB).value(\"newpassword123\").build());\n+\n+        result = updateUser(userPatch);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().get(0).getResource());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE881() {\n+        // 1. create group and assign LDAP\n+        GroupTO group = GroupITCase.getSampleTO(\"syncope881G\");\n+        group.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n+\n+        group = createGroup(group).getEntity();\n+        assertNotNull(group);\n+        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), group.getKey()));\n+\n+        // 2. create user and assign such group\n+        UserTO user = UserITCase.getUniqueSampleTO(\"syncope881U@apache.org\");\n+        user.getMemberships().clear();\n+        user.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n+\n+        user = createUser(user).getEntity();\n+        assertNotNull(user);\n+\n+        // 3. verify that user is in LDAP\n+        ConnObjectTO connObject =\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), user.getKey());\n+        assertNotNull(connObject);\n+        AttrTO userDn = connObject.getAttrMap().get(Name.NAME);\n+        assertNotNull(userDn);\n+        assertEquals(1, userDn.getValues().size());\n+        assertNotNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n+\n+        // 4. remove user\n+        userService.delete(user.getKey());\n+\n+        // 5. verify that user is not in LDAP anynmore\n+        assertNull(getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n+    }\n+}"}]}