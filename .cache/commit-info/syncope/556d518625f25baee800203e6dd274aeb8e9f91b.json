{"sha":"556d518625f25baee800203e6dd274aeb8e9f91b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU1NmQ1MTg2MjVmMjViYWVlODAwMjAzZTZkZDI3NGFlYjhlOWY5MWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-01T18:11:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-01T18:11:28Z"},"message":"[SYNCOPE-620] JPA entities + basic tests","tree":{"sha":"df42cbcaf742023269fe89c05a4554b433b38234","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/df42cbcaf742023269fe89c05a4554b433b38234"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/556d518625f25baee800203e6dd274aeb8e9f91b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/556d518625f25baee800203e6dd274aeb8e9f91b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/556d518625f25baee800203e6dd274aeb8e9f91b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/556d518625f25baee800203e6dd274aeb8e9f91b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"20390b01e600d6294308658971e0cf7e11da35c7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/20390b01e600d6294308658971e0cf7e11da35c7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/20390b01e600d6294308658971e0cf7e11da35c7"}],"stats":{"total":31375,"additions":31025,"deletions":350},"files":[{"sha":"d52f1363f30d64c43c406897e096c518742e54bd","filename":"syncope620/common/lib/pom.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fpom.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -30,7 +30,7 @@ under the License.\n   <name>Apache Syncope Common Lib</name>\n   <description>Apache Syncope Common Lib</description>\n   <groupId>org.apache.syncope.common</groupId>\n-  <artifactId>syncope-lib</artifactId>\n+  <artifactId>syncope-common-lib</artifactId>\n   <packaging>jar</packaging>\n \n   <dependencies>\n@@ -44,6 +44,10 @@ under the License.\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-api</artifactId>"},{"sha":"28bd4bd17d06a03c3992093899500bf12a586ac4","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/AbstractBaseBean.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractBaseBean.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.io.Serializable;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+@XmlType\n+// Reporting here only classes used via PagedResult\n+//@XmlSeeAlso({ AbstractTaskTO.class, ReportTO.class, RoleTO.class, UserTO.class })\n+public abstract class AbstractBaseBean implements Serializable {\n+\n+    private static final long serialVersionUID = 3119542005279892164L;\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"817b00df08ab0092856ddf6b15d24e160c05f1a1","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.util.regex.Pattern;\n+\n+public class SyncopeConstants {\n+\n+    public static final String NAMESPACE = \"http://syncope.apache.org/2.0\";\n+\n+    public static final String UNAUTHENTICATED = \"unauthenticated\";\n+\n+    public static final String ANONYMOUS_ENTITLEMENT = \"anonymous\";\n+\n+    public static final String ENUM_VALUES_SEPARATOR = \";\";\n+\n+    public static final String[] DATE_PATTERNS = {\n+        \"yyyy-MM-dd'T'HH:mm:ssZ\",\n+        \"EEE, dd MMM yyyy HH:mm:ss z\",\n+        \"yyyy-MM-dd'T'HH:mm:ssz\",\n+        \"yyyy-MM-dd HH:mm:ss\",\n+        \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\n+        \"yyyy-MM-dd\" };\n+\n+    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n+\n+    public static final String DEFAULT_ENCODING = \"UTF-8\";\n+\n+    public static final String ROOT_LOGGER = \"ROOT\";\n+\n+    public static final Pattern EMAIL_PATTERN = Pattern.compile(\n+            \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*\"\n+            + \"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+}"},{"sha":"f007020a0171cd85285ece2b82f4d5a24e587929","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/annotation/FormAttributeField.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FFormAttributeField.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+\n+@Target({ ElementType.FIELD })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface FormAttributeField {\n+\n+    boolean userSearch() default false;\n+\n+    boolean roleSearch() default false;\n+\n+    IntMappingType schema() default IntMappingType.UserSchema;\n+}"},{"sha":"7339565d06977336eb6cc067efb4daf18b4f31c2","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/mod/AbstractAttributableMod.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractAttributableMod.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+/**\n+ * Abstract base class for objects that can have attributes removed, added or updated.\n+ *\n+ * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\n+ */\n+@XmlType\n+public abstract class AbstractAttributableMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 3241118574016303198L;\n+\n+    protected long key;\n+\n+    protected final Set<AttrMod> attrsToUpdate = new HashSet<>();\n+\n+    protected final Set<String> attrsToRemove = new HashSet<>();\n+\n+    protected final Set<String> derAttrsToAdd = new HashSet<>();\n+\n+    protected final Set<String> derAttrsToRemove = new HashSet<>();\n+\n+    protected final Set<AttrMod> virAttrsToUpdate = new HashSet<>();\n+\n+    protected final Set<String> virAttrsToRemove = new HashSet<>();\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    @XmlElementWrapper(name = \"attributesToRemove\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributesToRemove\")\n+    public Set<String> getAttrsToRemove() {\n+        return attrsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"attributesToUpdate\")\n+    @XmlElement(name = \"attributeMod\")\n+    @JsonProperty(\"attributesToUpdate\")\n+    public Set<AttrMod> getAttrsToUpdate() {\n+        return attrsToUpdate;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrsToAdd\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrsToAdd\")\n+    public Set<String> getDerAttrsToAdd() {\n+        return derAttrsToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrsToRemove\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrsToRemove\")\n+    public Set<String> getDerAttrsToRemove() {\n+        return derAttrsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrsToRemove\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrsToRemove\")\n+    public Set<String> getVirAttrsToRemove() {\n+        return virAttrsToRemove;\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrsToUpdate\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrsToUpdate\")\n+    public Set<AttrMod> getVirAttrsToUpdate() {\n+        return virAttrsToUpdate;\n+    }\n+\n+    /**\n+     * @return true is all backing Sets are empty.\n+     */\n+    public boolean isEmpty() {\n+        return attrsToUpdate.isEmpty() && attrsToRemove.isEmpty()\n+                && derAttrsToAdd.isEmpty() && derAttrsToRemove.isEmpty()\n+                && virAttrsToUpdate.isEmpty() && virAttrsToRemove.isEmpty();\n+    }\n+}"},{"sha":"96e2a64a8c4d71d07abe9d193819a814602dc726","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/mod/AbstractSubjectMod.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAbstractSubjectMod.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public abstract class AbstractSubjectMod extends AbstractAttributableMod {\n+\n+    private static final long serialVersionUID = -6404459635536484024L;\n+\n+    protected final Set<String> resourcesToAdd = new HashSet<>();\n+\n+    protected final Set<String> resourcesToRemove = new HashSet<>();\n+\n+    @XmlElementWrapper(name = \"resourcesToAdd\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resourcesToAdd\")\n+    public Set<String> getResourcesToAdd() {\n+        return resourcesToAdd;\n+    }\n+\n+    @XmlElementWrapper(name = \"resourcesToRemove\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resourcesToRemove\")\n+    public Set<String> getResourcesToRemove() {\n+        return resourcesToRemove;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty() && resourcesToAdd.isEmpty() && resourcesToRemove.isEmpty();\n+    }\n+\n+}"},{"sha":"b0cee5bbc0968baf2ab233ecd0bd27dc90f54212","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/mod/AttrMod.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAttrMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAttrMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAttrMod.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.mod;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement\n+@XmlType\n+public class AttrMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -913573979137431406L;\n+\n+    private String schema;\n+\n+    private List<String> valuesToBeAdded;\n+\n+    private List<String> valuesToBeRemoved;\n+\n+    public AttrMod() {\n+        super();\n+\n+        valuesToBeAdded = new ArrayList<>();\n+        valuesToBeRemoved = new ArrayList<>();\n+    }\n+\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @XmlElementWrapper(name = \"valuesToBeAdded\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"valuesToBeAdded\")\n+    public List<String> getValuesToBeAdded() {\n+        return valuesToBeAdded;\n+    }\n+\n+    @XmlElementWrapper(name = \"valuesToBeRemoved\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"valuesToBeRemoved\")\n+    public List<String> getValuesToBeRemoved() {\n+        return valuesToBeRemoved;\n+    }\n+\n+    @JsonIgnore\n+    public boolean isEmpty() {\n+        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\n+    }\n+}"},{"sha":"6efdb3275280ae96f512658a48678d079d3297b2","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/AbstractReportletConf.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FAbstractReportletConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlType\n+@XmlSeeAlso({ StaticReportletConf.class, UserReportletConf.class, RoleReportletConf.class })\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n+\n+    private static final long serialVersionUID = -6130008602014516608L;\n+\n+    private String name;\n+\n+    public AbstractReportletConf() {\n+        this(\"\");\n+        setName(getClass().getName());\n+    }\n+\n+    public AbstractReportletConf(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    public final void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"55e2da9a38208818bdc30cff51694fc133c021c3","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/RoleReportletConf.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FRoleReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FRoleReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FRoleReportletConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.annotation.FormAttributeField;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+\n+@XmlRootElement(name = \"roleReportletConf\")\n+@XmlType\n+public class RoleReportletConf extends AbstractReportletConf {\n+\n+    private static final long serialVersionUID = -8488503068032439699L;\n+\n+    @XmlEnum\n+    @XmlType(name = \"roleReportletConfFeature\")\n+    public enum Feature {\n+\n+        id,\n+        name,\n+        roleOwner,\n+        userOwner,\n+        entitlements,\n+        users,\n+        resources\n+\n+    }\n+\n+    @FormAttributeField(userSearch = true)\n+    private String matchingCond;\n+\n+    @FormAttributeField(schema = IntMappingType.RoleSchema)\n+    private final List<String> attrs = new ArrayList<String>();\n+\n+    @FormAttributeField(schema = IntMappingType.RoleDerivedSchema)\n+    private final List<String> derAttrs = new ArrayList<String>();\n+\n+    @FormAttributeField(schema = IntMappingType.RoleVirtualSchema)\n+    private final List<String> virAttrs = new ArrayList<String>();\n+\n+    private final List<Feature> features = new ArrayList<Feature>();\n+\n+    public RoleReportletConf() {\n+        super();\n+    }\n+\n+    public RoleReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributes\")\n+    public List<String> getAttrs() {\n+        return attrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"derivedAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derivedAttributes\")\n+    public List<String> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"virtualAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virtualAttributes\")\n+    public List<String> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"features\")\n+    @XmlElement(name = \"feature\")\n+    @JsonProperty(\"features\")\n+    public List<Feature> getFeatures() {\n+        return features;\n+    }\n+\n+    public String getMatchingCond() {\n+        return matchingCond;\n+    }\n+\n+    public void setMatchingCond(final String matchingCond) {\n+        this.matchingCond = matchingCond;\n+    }\n+}"},{"sha":"916008985bfa379753290f61baf3514f24b58b74","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/StaticReportletConf.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FStaticReportletConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+\n+@XmlRootElement(name = \"staticReportletConf\")\n+@XmlType\n+public class StaticReportletConf extends AbstractReportletConf {\n+\n+    private static final long serialVersionUID = -4814950086361753689L;\n+\n+    private String stringField;\n+\n+    private Long longField;\n+\n+    private Double doubleField;\n+\n+    private Date dateField;\n+\n+    private TraceLevel traceLevel;\n+\n+    private final List<String> listField = new ArrayList<String>();\n+\n+    public StaticReportletConf() {\n+        super();\n+    }\n+\n+    public StaticReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    public Date getDateField() {\n+        return dateField == null\n+                ? null\n+                : new Date(dateField.getTime());\n+    }\n+\n+    public void setDateField(Date dateField) {\n+        this.dateField = dateField == null\n+                ? null\n+                : new Date(dateField.getTime());\n+    }\n+\n+    public Double getDoubleField() {\n+        return doubleField;\n+    }\n+\n+    public void setDoubleField(Double doubleField) {\n+        this.doubleField = doubleField;\n+    }\n+\n+    @XmlElementWrapper(name = \"listField\")\n+    @XmlElement(name = \"field\")\n+    @JsonProperty(\"listField\")\n+    public List<String> getListField() {\n+        return listField;\n+    }\n+\n+    public Long getLongField() {\n+        return longField;\n+    }\n+\n+    public void setLongField(Long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public TraceLevel getTraceLevel() {\n+        return traceLevel;\n+    }\n+\n+    public void setTraceLevel(TraceLevel traceLevel) {\n+        this.traceLevel = traceLevel;\n+    }\n+}"},{"sha":"2c6ed17ac37bda67521ad87d93440aa1dfc4d7a0","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/UserReportletConf.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FUserReportletConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.report;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlEnum;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.annotation.FormAttributeField;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+\n+@XmlRootElement(name = \"userReportletConf\")\n+@XmlType\n+public class UserReportletConf extends AbstractReportletConf {\n+\n+    @XmlEnum\n+    @XmlType(name = \"userReportletConfFeature\")\n+    public enum Feature {\n+\n+        id,\n+        username,\n+        workflowId,\n+        status,\n+        creationDate,\n+        lastLoginDate,\n+        changePwdDate,\n+        passwordHistorySize,\n+        failedLoginCount,\n+        memberships,\n+        resources\n+\n+    }\n+\n+    private static final long serialVersionUID = 6602717600064602764L;\n+\n+    @FormAttributeField(userSearch = true)\n+    private String matchingCond;\n+\n+    @FormAttributeField(schema = IntMappingType.UserSchema)\n+    private final List<String> attrs = new ArrayList<String>();\n+\n+    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n+    private final List<String> derAttrs = new ArrayList<String>();\n+\n+    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n+    private final List<String> virAttrs = new ArrayList<String>();\n+\n+    private final List<Feature> features = new ArrayList<Feature>();\n+\n+    public UserReportletConf() {\n+        super();\n+    }\n+\n+    public UserReportletConf(final String name) {\n+        super(name);\n+    }\n+\n+    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributes\")\n+    public List<String> getAttrs() {\n+        return attrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"derivedAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derivedAttributes\")\n+    public List<String> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"virtualAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virtualAttributes\")\n+    public List<String> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"features\")\n+    @XmlElement(name = \"feature\")\n+    @JsonProperty(\"features\")\n+    public List<Feature> getFeatures() {\n+        return features;\n+    }\n+\n+    public String getMatchingCond() {\n+        return matchingCond;\n+    }\n+\n+    public void setMatchingCond(final String matchingCond) {\n+        this.matchingCond = matchingCond;\n+    }\n+}"},{"sha":"bc452c11280eae90b5d2b9b76b2c32e626e69c53","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/report/package-info.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2Fpackage-info.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NAMESPACE)\n+package org.apache.syncope.common.lib.report;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import org.apache.syncope.common.lib.SyncopeConstants;"},{"sha":"c0f7155721f0f1d2ff3a60e726ebe8913df74711","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAnnotatedBean.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import java.util.Date;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Abstract wrapper for common system information.\n+ */\n+@XmlType\n+public class AbstractAnnotatedBean extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -930797879027642457L;\n+\n+    /**\n+     * Username of the user that has created this profile.\n+     * <p>\n+     * Cannot be used a reference to an existing user for two main reasons: the creator can be the user <tt>admin</tt>;\n+     * the creator could have been removed.\n+     */\n+    private String creator;\n+\n+    /**\n+     * Creation date.\n+     */\n+    private Date creationDate;\n+\n+    /**\n+     * Username of the user that has performed the last modification to this profile.\n+     * <p>\n+     * This field cannot be null: at creation time it have to be initialized with the creator username.\n+     * <p>\n+     * The modifier can be the user itself whether the last performed change has been a self-modification.\n+     * <p>\n+     * Cannot be used a reference to an existing user for two main reasons: the modifier can be the user <tt>admin</tt>;\n+     * the modifier could have been removed.\n+     */\n+    private String lastModifier;\n+\n+    /**\n+     * Last change date.\n+     * <p>\n+     * This field cannot be null: at creation time it has to be initialized with <tt>creationDate</tt> field value.\n+     */\n+    private Date lastChangeDate;\n+\n+    public String getCreator() {\n+        return creator;\n+    }\n+\n+    public void setCreator(final String creator) {\n+        this.creator = creator;\n+    }\n+\n+    public Date getCreationDate() {\n+        return creationDate;\n+    }\n+\n+    public void setCreationDate(final Date creationDate) {\n+        this.creationDate = creationDate;\n+    }\n+\n+    public String getLastModifier() {\n+        return lastModifier;\n+    }\n+\n+    public void setLastModifier(final String lastModifier) {\n+        this.lastModifier = lastModifier;\n+    }\n+\n+    public Date getLastChangeDate() {\n+        return lastChangeDate;\n+    }\n+\n+    public void setLastChangeDate(final Date lastChangeDate) {\n+        this.lastChangeDate = lastChangeDate;\n+    }\n+\n+    @JsonIgnore\n+    public String getETagValue() {\n+        Date etagDate = getLastChangeDate() == null\n+                ? getCreationDate() : getLastChangeDate();\n+        return etagDate == null\n+                ? StringUtils.EMPTY\n+                : String.valueOf(etagDate.getTime());\n+\n+    }\n+}"},{"sha":"5cb48bb3a7b19659fc58a1e25d6a4255b6dc8b41","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAttributableTO.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAttributableTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public abstract class AbstractAttributableTO extends ConnObjectTO {\n+\n+    private static final long serialVersionUID = 4083884098736820255L;\n+\n+    private long id;\n+\n+    private final List<AttrTO> derAttrs = new ArrayList<>();\n+\n+    private final List<AttrTO> virAttrs = new ArrayList<>();\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(final long id) {\n+        this.id = id;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttrTO> getDerAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(derAttrs.size());\n+        for (AttrTO attributeTO : derAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttrTO> getVirAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(virAttrs.size());\n+        for (AttrTO attributeTO : virAttrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+        result = Collections.unmodifiableMap(result);\n+\n+        return result;\n+    }\n+\n+    @XmlElementWrapper(name = \"derivedAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derivedAttributes\")\n+    public List<AttrTO> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"virtualAttributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virtualAttributes\")\n+    public List<AttrTO> getVirAttrs() {\n+        return virAttrs;\n+    }\n+}"},{"sha":"5c9fa425d35bc52f5720afd661da13cb63b445bb","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSubjectTO.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSubjectTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+public abstract class AbstractSubjectTO extends AbstractAttributableTO {\n+\n+    private static final long serialVersionUID = 114668706977919206L;\n+\n+    private final Set<String> resources = new HashSet<>();\n+\n+    private final List<PropagationStatus> propagationStatusTOs = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    public boolean removePropagationTO(final String resource) {\n+        if (resource != null && getPropagationStatusTOs().isEmpty()) {\n+            final List<PropagationStatus> toBeRemoved = new ArrayList<PropagationStatus>();\n+\n+            for (PropagationStatus propagationTO : getPropagationStatusTOs()) {\n+                if (resource.equals(propagationTO.getResource())) {\n+                    toBeRemoved.add(propagationTO);\n+                }\n+            }\n+\n+            return propagationStatusTOs.removeAll(toBeRemoved);\n+        }\n+        return false;\n+    }\n+\n+    @XmlElementWrapper(name = \"propagationStatuses\")\n+    @XmlElement(name = \"propagationStatus\")\n+    @JsonProperty(\"propagationStatuses\")\n+    public List<PropagationStatus> getPropagationStatusTOs() {\n+        return propagationStatusTOs;\n+    }\n+\n+}"},{"sha":"829f309d010d8043e2f161902ab950df1ad5aea8","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"attribute\")\n+@XmlType\n+public class AttrTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 4941691338796323623L;\n+\n+    /**\n+     * Name of the schema that this attribute is referring to.\n+     */\n+    private String schema;\n+\n+    /**\n+     * Set of (string) values of this attribute.\n+     */\n+    private final List<String> values;\n+\n+    /**\n+     * Whether this attribute is read-only or not.\n+     */\n+    private boolean readonly;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public AttrTO() {\n+        super();\n+        values = new ArrayList<String>();\n+        readonly = false;\n+    }\n+\n+    /**\n+     * @return the name of the schema that this attribute is referring to\n+     */\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    /**\n+     * @param schema name to be set\n+     */\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+\n+    }\n+\n+    /**\n+     * @return attribute values as strings\n+     */\n+    @XmlElementWrapper(name = \"values\")\n+    @XmlElement(name = \"value\")\n+    @JsonProperty(\"values\")\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    public boolean isReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(final boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+}"},{"sha":"d298609fa7f3c48a9079e68a78f5dc104de33492","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnObjectTO.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnObjectTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"connObject\")\n+@XmlType\n+public class ConnObjectTO extends AbstractAnnotatedBean {\n+\n+    private static final long serialVersionUID = 5139554911265442497L;\n+\n+    private final List<AttrTO> attrs = new ArrayList<>();\n+\n+    @XmlElementWrapper(name = \"attributes\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"attributes\")\n+    public List<AttrTO> getPlainAttrs() {\n+        return attrs;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttrTO> getAttrMap() {\n+        Map<String, AttrTO> result = new HashMap<>(attrs.size());\n+        for (AttrTO attributeTO : attrs) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+        result = Collections.<String, AttrTO>unmodifiableMap(result);\n+\n+        return result;\n+    }\n+}"},{"sha":"9f455dc10ffd3e16c5ee1cd388535543f93edf29","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnPoolConfTO.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnPoolConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnPoolConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnPoolConfTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"connPoolConf\")\n+@XmlType\n+public class ConnPoolConfTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -214360178113476623L;\n+\n+    private Integer maxObjects;\n+\n+    private Integer minIdle;\n+\n+    private Integer maxIdle;\n+\n+    private Long maxWait;\n+\n+    private Long minEvictableIdleTimeMillis;\n+\n+    public Integer getMaxObjects() {\n+        return maxObjects;\n+    }\n+\n+    public void setMaxObjects(final Integer maxObjects) {\n+        this.maxObjects = maxObjects;\n+    }\n+\n+    public Integer getMinIdle() {\n+        return minIdle;\n+    }\n+\n+    public void setMinIdle(final Integer minIdle) {\n+        this.minIdle = minIdle;\n+    }\n+\n+    public Integer getMaxIdle() {\n+        return maxIdle;\n+    }\n+\n+    public void setMaxIdle(final Integer maxIdle) {\n+        this.maxIdle = maxIdle;\n+    }\n+\n+    public Long getMaxWait() {\n+        return maxWait;\n+    }\n+\n+    public void setMaxWait(final Long maxWait) {\n+        this.maxWait = maxWait;\n+    }\n+\n+    public Long getMinEvictableIdleTimeMillis() {\n+        return minEvictableIdleTimeMillis;\n+    }\n+\n+    public void setMinEvictableIdleTimeMillis(final Long minEvictableIdleTimeMillis) {\n+        this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;\n+    }\n+\n+}"},{"sha":"d53e20abbb3c5738176c50f76738ea91ec91c358","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"membership\")\n+@XmlType\n+public class MembershipTO extends AbstractAttributableTO {\n+\n+    private static final long serialVersionUID = 5992828670273935861L;\n+\n+    private long roleId;\n+\n+    private String roleName;\n+\n+    public long getRoleId() {\n+        return roleId;\n+    }\n+\n+    public void setRoleId(final long roleId) {\n+        this.roleId = roleId;\n+    }\n+\n+    public String getRoleName() {\n+        return roleName;\n+    }\n+\n+    public void setRoleName(final String roleName) {\n+        this.roleName = roleName;\n+    }\n+}"},{"sha":"de844bee667b01cf85764effc2d8b08ad3e023b5","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationStatus.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationStatus.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+\n+/**\n+ * Single propagation status.\n+ */\n+@XmlRootElement(name = \"propagationStatus\")\n+@XmlType\n+public class PropagationStatus extends AbstractBaseBean {\n+\n+    /**\n+     * Serial version ID.\n+     */\n+    private static final long serialVersionUID = 3921498450222857690L;\n+\n+    /**\n+     * Object before propagation.\n+     */\n+    private ConnObjectTO beforeObj;\n+\n+    /**\n+     * Object after propagation.\n+     */\n+    private ConnObjectTO afterObj;\n+\n+    /**\n+     * Propagated resource name.\n+     */\n+    private String resource;\n+\n+    /**\n+     * Propagation task execution status.\n+     */\n+    private PropagationTaskExecStatus status;\n+\n+    /**\n+     * Propagation task execution failure message.\n+     */\n+    private String failureReason;\n+\n+    /**\n+     * After object getter.\n+     *\n+     * @return after object.\n+     */\n+    public ConnObjectTO getAfterObj() {\n+        return afterObj;\n+    }\n+\n+    /**\n+     * After object setter.\n+     *\n+     * @param afterObj object.\n+     */\n+    public void setAfterObj(final ConnObjectTO afterObj) {\n+        this.afterObj = afterObj;\n+    }\n+\n+    /**\n+     * Before object getter.\n+     *\n+     * @return before object.\n+     */\n+    public ConnObjectTO getBeforeObj() {\n+        return beforeObj;\n+    }\n+\n+    /**\n+     * Before object setter.\n+     *\n+     * @param beforeObj object.\n+     */\n+    public void setBeforeObj(final ConnObjectTO beforeObj) {\n+        this.beforeObj = beforeObj;\n+    }\n+\n+    /**\n+     * resource name getter.\n+     *\n+     * @return resource name.\n+     */\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    /**\n+     * Resource name setter.\n+     *\n+     * @param resource resource name\n+     */\n+    public void setResource(final String resource) {\n+        this.resource = resource;\n+    }\n+\n+    /**\n+     * Propagation execution status getter.\n+     *\n+     * @return status\n+     */\n+    public PropagationTaskExecStatus getStatus() {\n+        return status;\n+    }\n+\n+    /**\n+     * Propagation execution status setter.\n+     *\n+     * @param status propagation execution status\n+     */\n+    public void setStatus(final PropagationTaskExecStatus status) {\n+        this.status = status;\n+    }\n+\n+    /**\n+     * Propagation execution message getter.\n+     *\n+     * @return failureReason.\n+     */\n+    public String getFailureReason() {\n+        return failureReason;\n+    }\n+\n+    /**\n+     * Propagation execution failure message setter.\n+     *\n+     * @param failureReason describes why this propagation failed\n+     */\n+    public void setFailureReason(final String failureReason) {\n+        this.failureReason = failureReason;\n+    }\n+}"},{"sha":"79ddfb346b2feb6a1ce8282fbebe24d9df6bfdab","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"role\")\n+@XmlType\n+@JsonIgnoreProperties({ \"displayName\" })\n+public class RoleTO extends AbstractSubjectTO {\n+\n+    private static final long serialVersionUID = -7785920258290147542L;\n+\n+    private String name;\n+\n+    private long parent;\n+\n+    private Long userOwner;\n+\n+    private Long roleOwner;\n+\n+    private boolean inheritOwner;\n+\n+    private boolean inheritTemplates;\n+\n+    private boolean inheritAttrs;\n+\n+    private boolean inheritDerAttrs;\n+\n+    private boolean inheritVirAttrs;\n+\n+    private boolean inheritPasswordPolicy;\n+\n+    private boolean inheritAccountPolicy;\n+\n+    private final List<String> entitlements = new ArrayList<>();\n+\n+    private List<String> rAttrTemplates = new ArrayList<>();\n+\n+    private List<String> rDerAttrTemplates = new ArrayList<>();\n+\n+    private List<String> rVirAttrTemplates = new ArrayList<>();\n+\n+    private List<String> mAttrTemplates = new ArrayList<>();\n+\n+    private List<String> mDerAttrTemplates = new ArrayList<>();\n+\n+    private List<String> mVirAttrTemplates = new ArrayList<>();\n+\n+    private Long passwordPolicy;\n+\n+    private Long accountPolicy;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public long getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(final long parent) {\n+        this.parent = parent;\n+    }\n+\n+    public Long getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(final Long userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public Long getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    public void setRoleOwner(final Long roleOwner) {\n+        this.roleOwner = roleOwner;\n+    }\n+\n+    public boolean isInheritOwner() {\n+        return inheritOwner;\n+    }\n+\n+    public void setInheritOwner(final boolean inheritOwner) {\n+        this.inheritOwner = inheritOwner;\n+    }\n+\n+    public boolean isInheritTemplates() {\n+        return inheritTemplates;\n+    }\n+\n+    public void setInheritTemplates(boolean inheritTemplates) {\n+        this.inheritTemplates = inheritTemplates;\n+    }\n+\n+    public boolean isInheritAttrs() {\n+        return inheritAttrs;\n+    }\n+\n+    public void setInheritAttrs(final boolean inheritAttrs) {\n+        this.inheritAttrs = inheritAttrs;\n+    }\n+\n+    public boolean isInheritDerAttrs() {\n+        return inheritDerAttrs;\n+    }\n+\n+    public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n+        this.inheritDerAttrs = inheritDerAttrs;\n+    }\n+\n+    public boolean isInheritVirAttrs() {\n+        return inheritVirAttrs;\n+    }\n+\n+    public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n+        this.inheritVirAttrs = inheritVirAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"entitlements\")\n+    @XmlElement(name = \"entitlement\")\n+    @JsonProperty(\"entitlements\")\n+    public List<String> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    @XmlElementWrapper(name = \"rAttrTemplates\")\n+    @XmlElement(name = \"rAttrTemplate\")\n+    @JsonProperty(\"rAttrTemplates\")\n+    public List<String> getRAttrTemplates() {\n+        return rAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rDerAttrTemplates\")\n+    @XmlElement(name = \"rDerAttrTemplate\")\n+    @JsonProperty(\"rDerAttrTemplates\")\n+    public List<String> getRDerAttrTemplates() {\n+        return rDerAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"rVirAttrTemplates\")\n+    @XmlElement(name = \"rVirAttrTemplate\")\n+    @JsonProperty(\"rVirAttrTemplates\")\n+    public List<String> getRVirAttrTemplates() {\n+        return rVirAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mAttrTemplates\")\n+    @XmlElement(name = \"mAttrTemplate\")\n+    @JsonProperty(\"mAttrTemplates\")\n+    public List<String> getMAttrTemplates() {\n+        return mAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mDerAttrTemplates\")\n+    @XmlElement(name = \"mDerAttrTemplate\")\n+    @JsonProperty(\"mDerAttrTemplates\")\n+    public List<String> getMDerAttrTemplates() {\n+        return mDerAttrTemplates;\n+    }\n+\n+    @XmlElementWrapper(name = \"mVirAttrTemplates\")\n+    @XmlElement(name = \"mVirAttrTemplate\")\n+    @JsonProperty(\"mVirAttrTemplates\")\n+    public List<String> getMVirAttrTemplates() {\n+        return mVirAttrTemplates;\n+    }\n+\n+    public Long getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    public void setPasswordPolicy(final Long passwordPolicy) {\n+        this.passwordPolicy = passwordPolicy;\n+    }\n+\n+    public boolean isInheritPasswordPolicy() {\n+        return inheritPasswordPolicy;\n+    }\n+\n+    /**\n+     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\n+     *\n+     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\n+     */\n+    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\n+    }\n+\n+    public Long getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    public void setAccountPolicy(final Long accountPolicy) {\n+        this.accountPolicy = accountPolicy;\n+    }\n+\n+    public boolean isInheritAccountPolicy() {\n+        return inheritAccountPolicy;\n+    }\n+\n+    /**\n+     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\n+     *\n+     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\n+     */\n+    public void setInheritAccountPolicy(final boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = inheritAccountPolicy;\n+    }\n+\n+    public String getDisplayName() {\n+        return getId() + \" \" + getName();\n+    }\n+\n+    public static long fromDisplayName(final String displayName) {\n+        long result = 0;\n+        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\n+            try {\n+                result = Long.valueOf(displayName.split(\" \")[0]);\n+            } catch (NumberFormatException e) {\n+                // just to avoid PMD warning about \"empty catch block\"\n+                result = 0;\n+            }\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"aceefe15a1453df58c7326edb8dff89bc055aed4","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+@XmlRootElement(name = \"user\")\n+@XmlType\n+public class UserTO extends AbstractSubjectTO {\n+\n+    private static final long serialVersionUID = 7791304495192615740L;\n+\n+    private String password;\n+\n+    private final List<MembershipTO> memberships = new ArrayList<>();\n+\n+    private String status;\n+\n+    private String token;\n+\n+    private Date tokenExpireTime;\n+\n+    private String username;\n+\n+    private Date lastLoginDate;\n+\n+    private Date changePwdDate;\n+\n+    private Integer failedLogins;\n+\n+    private Long securityQuestion;\n+\n+    private String securityAnswer;\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public List<MembershipTO> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @JsonIgnore\n+    public Map<Long, MembershipTO> getMembershipMap() {\n+        Map<Long, MembershipTO> result;\n+\n+        if (getMemberships() == null) {\n+            result = Collections.emptyMap();\n+        } else {\n+            result = new HashMap<>(getMemberships().size());\n+            for (MembershipTO membership : getMemberships()) {\n+                result.put(membership.getRoleId(), membership);\n+            }\n+            result = Collections.unmodifiableMap(result);\n+        }\n+\n+        return result;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    public void setToken(final String token) {\n+        this.token = token;\n+    }\n+\n+    public Date getTokenExpireTime() {\n+        return tokenExpireTime == null\n+                ? null\n+                : new Date(tokenExpireTime.getTime());\n+    }\n+\n+    public void setTokenExpireTime(final Date tokenExpireTime) {\n+        if (tokenExpireTime != null) {\n+            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\n+        }\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public Date getChangePwdDate() {\n+        return changePwdDate;\n+    }\n+\n+    public Integer getFailedLogins() {\n+        return failedLogins;\n+    }\n+\n+    public Date getLastLoginDate() {\n+        return lastLoginDate;\n+    }\n+\n+    public void setChangePwdDate(final Date changePwdDate) {\n+        this.changePwdDate = changePwdDate;\n+    }\n+\n+    public void setFailedLogins(final Integer failedLogins) {\n+        this.failedLogins = failedLogins;\n+    }\n+\n+    public void setLastLoginDate(final Date lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate;\n+    }\n+\n+    public Long getSecurityQuestion() {\n+        return securityQuestion;\n+    }\n+\n+    public void setSecurityQuestion(final Long securityQuestion) {\n+        this.securityQuestion = securityQuestion;\n+    }\n+\n+    public String getSecurityAnswer() {\n+        return securityAnswer;\n+    }\n+\n+    public void setSecurityAnswer(final String securityAnswer) {\n+        this.securityAnswer = securityAnswer;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {\n+\n+            @Override\n+            protected boolean accept(final Field f) {\n+                return super.accept(f) && !f.getName().equals(\"password\");\n+            }\n+        }.toString();\n+    }\n+}"},{"sha":"3394d05cd9f325660b432a04e7e17f5134dbae03","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":32,"deletions":31,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -24,37 +24,38 @@\n public enum EntityViolationType {\n \n     Standard(\"\"),\n-    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\n-    InvalidConnInstanceLocation(\"org.apache.syncope.core.validation.conninstance.location\"),\n-    InvalidConnPoolConf(\"org.apache.syncope.core.validation.conninstance.poolConf\"),\n-    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\n-    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\n-    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\n-    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\n-    InvalidName(\"org.apache.syncope.core.validation.name\"),\n-    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\n-    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\n-    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\n-    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\n-    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\n-    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\n-    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\n-    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\n-    InvalidReport(\"org.apache.syncope.core.validation.report\"),\n-    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\n-    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\n-    InvalidSchemaEncrypted(\"org.apache.syncope.core.validation.schema.encrypted\"),\n-    InvalidSchemaEnum(\"org.apache.syncope.core.validation.schema.enum\"),\n-    InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.validation.schema.multivalueUnique\"),\n-    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\n-    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\n-    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\n-    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\n-    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\n-    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\n-    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\n-    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\n-    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\n+    InvalidAccountPolicy(\"org.apache.syncope.persistence.validation.accountpolicy\"),\n+    InvalidConnInstanceLocation(\"org.apache.syncope.persistence.validation.conninstance.location\"),\n+    InvalidConnPoolConf(\"org.apache.syncope.persistence.validation.conninstance.poolConf\"),\n+    InvalidCPlainSchema(\"org.apache.syncope.persistence.validation.attrvalue.cPlainSchema\"),\n+    InvalidMapping(\"org.apache.syncope.persistence.validation.mapping\"),\n+    InvalidMPlainSchema(\"org.apache.syncope.persistence.validation.attrvalue.mPlainSchema\"),\n+    InvalidMDerSchema(\"org.apache.syncope.persistence.validation.attrvalue.mDerSchema\"),\n+    InvalidMVirSchema(\"org.apache.syncope.persistence.validation.attrvalue.mVirSchema\"),\n+    InvalidName(\"org.apache.syncope.persistence.validation.name\"),\n+    InvalidNotification(\"org.apache.syncope.persistence.validation.notification\"),\n+    InvalidPassword(\"org.apache.syncope.persistence.validation.syncopeuser.password\"),\n+    InvalidPasswordPolicy(\"org.apache.syncope.persistence.validation.passwordpolicy\"),\n+    InvalidPolicy(\"org.apache.syncope.persistence.validation.policy\"),\n+    InvalidPropagationTask(\"org.apache.syncope.persistence.validation.propagationtask\"),\n+    InvalidRPlainSchema(\"org.apache.syncope.persistence.validation.attrvalue.rPlainSchema\"),\n+    InvalidRDerSchema(\"org.apache.syncope.persistence.validation.attrvalue.rDerSchema\"),\n+    InvalidRVirSchema(\"org.apache.syncope.persistence.validation.attrvalue.rVirSchema\"),\n+    InvalidReport(\"org.apache.syncope.persistence.validation.report\"),\n+    InvalidResource(\"org.apache.syncope.persistence.validation.externalresource\"),\n+    InvalidRoleOwner(\"org.apache.syncope.persistence.validation.syncoperole.owner\"),\n+    InvalidSchemaEncrypted(\"org.apache.syncope.persistence.validation.schema.encrypted\"),\n+    InvalidSchemaEnum(\"org.apache.syncope.persistence.validation.schema.enum\"),\n+    InvalidSchemaMultivalueUnique(\"org.apache.syncope.persistence.validation.schema.multivalueUnique\"),\n+    InvalidSchedTask(\"org.apache.syncope.persistence.validation.schedtask\"),\n+    InvalidSyncTask(\"org.apache.syncope.persistence.validation.synctask\"),\n+    InvalidSyncPolicy(\"org.apache.syncope.persistence.validation.syncpolicy\"),\n+    InvalidUPlainSchema(\"org.apache.syncope.persistence.validation.attrvalue.uPlainSchema\"),\n+    InvalidUDerSchema(\"org.apache.syncope.persistence.validation.attrvalue.derSchema\"),\n+    InvalidUVirSchema(\"org.apache.syncope.persistence.validation.attrvalue.uVirSchema\"),\n+    InvalidUsername(\"org.apache.syncope.persistence.validation.syncopeuser.username\"),\n+    InvalidValueList(\"org.apache.syncope.persistence.validation.attr.valueList\"),\n+    MoreThanOneNonNull(\"org.apache.syncope.persistence.validation.attrvalue.moreThanOneNonNull\");\n \n     private String message;\n "},{"sha":"448b3a9b86c8f3eaeac237a1814d0d3f4b390262","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationTaskExecStatus.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationTaskExecStatus.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+/**\n+ * Status of a propagation task execution.\n+ *\n+ * CREATED -&gt; SUBMITTED or UBSUBMITTED (depending on the external resource to\n+ * return success or failure).\n+ * SUBMITTED -&gt; SUCCESS or FAILURE (depending on the external resource to\n+ * report success or failure).\n+ */\n+@XmlEnum\n+public enum PropagationTaskExecStatus {\n+\n+    CREATED,\n+    SUBMITTED,\n+    UNSUBMITTED,\n+    SUCCESS,\n+    FAILURE;\n+\n+    public boolean isSuccessful() {\n+        return this == SUCCESS || this == SUBMITTED;\n+    }\n+\n+    public static PropagationTaskExecStatus fromString(final String value) {\n+        return PropagationTaskExecStatus.valueOf(value.toUpperCase());\n+    }\n+}"},{"sha":"a20d0a7443799a07176f3b98679d0974e9986610","filename":"syncope620/common/lib/src/main/java/org/apache/syncope/common/lib/types/TaskType.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum TaskType {\n+\n+    PROPAGATION(\"propagation\"),\n+    NOTIFICATION(\"notification\"),\n+    SCHEDULED(\"sched\"),\n+    SYNCHRONIZATION(\"sync\"),\n+    PUSH(\"push\");\n+\n+    private String name;\n+\n+    private TaskType(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public static TaskType fromString(final String name) {\n+        if (name != null) {\n+            for (TaskType t : TaskType.values()) {\n+                if (t.name.equalsIgnoreCase(name)) {\n+                    return t;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n+}"},{"sha":"7587710a580a068b3fca40395843a863c30e40d4","filename":"syncope620/pom.xml","status":"modified","additions":206,"deletions":0,"changes":206,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -303,12 +303,47 @@ under the License.\n     <syncope.version>${project.version}</syncope.version>\n \n     <connid.version>1.4.0.0</connid.version>\n+    <connid.soap.version>1.3.0</connid.soap.version>\n+    <connid.db.table.version>2.2.0</connid.db.table.version>\n+    <connid.csvdir.version>0.8</connid.csvdir.version>\n+    <connid.ldap.version>1.4.0</connid.ldap.version>\n+    <connid.ad.version>1.2.1</connid.ad.version>\n \n     <jackson.version>2.4.4</jackson.version>\n \n+    <spring.version>4.1.4.RELEASE</spring.version>\n+    <spring-security.version>3.2.5.RELEASE</spring-security.version>\n+\n+    <openjpa.version>2.3.0</openjpa.version>\n+    <commons-dbcp.version>2.0.1</commons-dbcp.version>\n+    <hibernate-validator.version>5.1.3.Final</hibernate-validator.version>\n+\n+    <jasypt.version>1.9.2</jasypt.version>\n+\n+    <quartz.version>2.2.1</quartz.version>\n+\n+    <slf4j.version>1.7.9</slf4j.version>\n     <log4j.version>2.1</log4j.version>\n \n+    <commons-io.version>2.4</commons-io.version>\n+    <commons-codec.version>1.10</commons-codec.version>\n+    <commons-jexl.version>2.1.1</commons-jexl.version>\n     <commons-lang.version>3.3.2</commons-lang.version>\n+    <commons.logging.version>1.1.3</commons.logging.version>\n+\n+    <h2.version>1.4.184</h2.version>\n+    <junit.version>4.12</junit.version>\n+\n+    <conf.directory>${project.build.directory}/test-classes</conf.directory>\n+    <bundles.directory>${project.build.directory}/bundles</bundles.directory>\n+    <connid.location>file:${bundles.directory}/</connid.location>\n+    <log.directory>${project.build.directory}/log</log.directory>\n+    <activiti-modeler.directory>${project.build.directory}/activiti-modeler</activiti-modeler.directory>\n+    \n+    <anonymousUser>anonymous</anonymousUser>\n+    <!-- static keys, only used for build: generated overlays will override during archetype:generate -->\n+    <anonymousKey>anonymousKey</anonymousKey>\n+    <secretKey>1abcdefghilmnopqrstuvz2!</secretKey>\n \n     <targetJdk>1.7</targetJdk>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n@@ -322,13 +357,108 @@ under the License.\n         <artifactId>validation-api</artifactId>\n         <version>1.1.0.Final</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.geronimo.specs</groupId>\n+        <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+        <version>1.1</version> \n+      </dependency>\n+      <dependency>\n+        <groupId>javax.el</groupId>\n+        <artifactId>javax.el-api</artifactId>\n+        <version>3.0.0</version>\n+        <scope>provided</scope>\n+      </dependency>\n       \n+      <dependency>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-jdbc</artifactId>\n+        <version>${openjpa.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-persistence-jdbc</artifactId>\n+        <version>${openjpa.version}</version>\n+      </dependency>\n+\n+      <dependency>\n+        <groupId>org.apache.commons</groupId>\n+        <artifactId>commons-dbcp2</artifactId>\n+        <version>${commons-dbcp.version}</version>\n+      </dependency>\n+\n+      <dependency>\n+        <groupId>org.hibernate</groupId>\n+        <artifactId>hibernate-validator</artifactId>\n+        <version>${hibernate-validator.version}</version>\n+      </dependency>\n+            \n+      <dependency>\n+        <groupId>com.fasterxml.jackson.core</groupId>\n+        <artifactId>jackson-core</artifactId>\n+        <version>${jackson.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>com.fasterxml.jackson.core</groupId>\n+        <artifactId>jackson-databind</artifactId>\n+        <version>${jackson.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>com.fasterxml.jackson.core</groupId>\n         <artifactId>jackson-annotations</artifactId>\n         <version>${jackson.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>com.fasterxml.jackson.jaxrs</groupId>\n+        <artifactId>jackson-jaxrs-json-provider</artifactId>\n+        <version>${jackson.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>com.fasterxml.jackson.module</groupId>\n+        <artifactId>jackson-module-afterburner</artifactId>\n+        <version>${jackson.version}</version>\n+      </dependency>\n+            \n+      <dependency>\n+        <groupId>org.springframework</groupId>\n+        <artifactId>spring-context</artifactId>\n+        <version>${spring.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework</groupId>\n+        <artifactId>spring-tx</artifactId>\n+        <version>${spring.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework</groupId>\n+        <artifactId>spring-jdbc</artifactId>\n+        <version>${spring.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework</groupId>\n+        <artifactId>spring-orm</artifactId>\n+        <version>${spring.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.springframework.security</groupId>\n+        <artifactId>spring-security-core</artifactId>\n+        <version>${spring-security.version}</version>\n+      </dependency>\n       \n+      <dependency>\n+        <groupId>commons-io</groupId>\n+        <artifactId>commons-io</artifactId>\n+        <version>${commons-io.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>commons-codec</groupId>\n+        <artifactId>commons-codec</artifactId>\n+        <version>${commons-codec.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.commons</groupId>\n+        <artifactId>commons-jexl</artifactId>\n+        <version>${commons-jexl.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apache.commons</groupId>\n         <artifactId>commons-lang3</artifactId>\n@@ -340,12 +470,64 @@ under the License.\n         <artifactId>connector-framework</artifactId>\n         <version>${connid.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>net.tirasa.connid</groupId>\n+        <artifactId>connector-framework-internal</artifactId>\n+        <version>${connid.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>net.tirasa.connid</groupId>\n+        <artifactId>slf4j-logging</artifactId>\n+        <version>${connid.version}</version>\n+      </dependency>\n       \n+      <dependency>\n+        <groupId>com.h2database</groupId>\n+        <artifactId>h2</artifactId>\n+        <version>${h2.version}</version>\n+      </dependency>\n+      \n+      <dependency>\n+        <groupId>org.jasypt</groupId>\n+        <artifactId>jasypt</artifactId>\n+        <version>${jasypt.version}</version>\n+      </dependency>\n+      \n+      <dependency>\n+        <groupId>org.quartz-scheduler</groupId>\n+        <artifactId>quartz</artifactId>\n+        <version>${quartz.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>c3p0</groupId>\n+            <artifactId>c3p0</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+      \n+      <dependency>\n+        <groupId>org.slf4j</groupId>\n+        <artifactId>slf4j-api</artifactId>\n+        <version>${slf4j.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apache.logging.log4j</groupId>\n         <artifactId>log4j-api</artifactId>\n         <version>${log4j.version}</version>\n       </dependency>\n+      \n+      <dependency>\n+        <groupId>org.springframework</groupId>\n+        <artifactId>spring-test</artifactId>\n+        <version>${spring.version}</version>\n+        <scope>test</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>junit</groupId>\n+        <artifactId>junit</artifactId>\n+        <version>${junit.version}</version>\n+        <scope>test</scope>\n+      </dependency>\n     </dependencies>\n \n   </dependencyManagement>\n@@ -387,6 +569,30 @@ under the License.\n             <!--<compilerArgument>-Xlint:unchecked</compilerArgument>-->\n           </configuration>\n         </plugin>\n+        \n+        <plugin>\n+          <groupId>org.apache.openjpa</groupId>\n+          <artifactId>openjpa-maven-plugin</artifactId>\n+          <version>${openjpa.version}</version>\n+        </plugin>\n+        \n+        <plugin>\n+          <groupId>org.apache.maven.plugins</groupId>\n+          <artifactId>maven-surefire-plugin</artifactId>\n+          <version>2.18</version>\n+          <configuration>\n+            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n+            <encoding>utf-8</encoding>\n+            <runOrder>alphabetical</runOrder>\n+            <argLine>-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m</argLine>\n+          </configuration>\n+        </plugin>\n+        \n+        <plugin>\n+          <groupId>org.codehaus.mojo</groupId>\n+          <artifactId>exec-maven-plugin</artifactId>\n+          <version>1.3.2</version>\n+        </plugin>\n       </plugins>\n     </pluginManagement>\n "},{"sha":"ff1d63201587517dddcd706725cfdabdad99199c","filename":"syncope620/server/persistence-api/pom.xml","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fpom.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -43,10 +43,18 @@ under the License.\n       <groupId>net.tirasa.connid</groupId>\n       <artifactId>connector-framework</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>net.tirasa.connid</groupId>\n+      <artifactId>connector-framework-internal</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>net.tirasa.connid</groupId>\n+      <artifactId>slf4j-logging</artifactId>\n+    </dependency>\n       \n     <dependency>\n       <groupId>org.apache.syncope.common</groupId>\n-      <artifactId>syncope-lib</artifactId>\n+      <artifactId>syncope-common-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n   </dependencies>"},{"sha":"4e65eb336fc4853b847bd63624565a2cd33ab9b8","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/RoleEntitlementUtil.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2FRoleEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2FRoleEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2FRoleEntitlementUtil.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.apache.syncope.persistence.api.entity.Entitlement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Utility class for manipulating entitlements.\n+ */\n+public final class RoleEntitlementUtil {\n+\n+    private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN = Pattern.compile(\"^ROLE_([\\\\d])+\");\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RoleEntitlementUtil.class);\n+\n+    public static String getEntitlementNameFromRoleId(final Long roleId) {\n+        return \"ROLE_\" + roleId;\n+    }\n+\n+    public static boolean isRoleEntitlement(final String entitlementName) {\n+        return ROLE_ENTITLEMENT_NAME_PATTERN.matcher(entitlementName).matches();\n+    }\n+\n+    public static Long getRoleId(final String entitlementName) {\n+        Long result = null;\n+\n+        if (isRoleEntitlement(entitlementName)) {\n+            try {\n+                result = Long.valueOf(entitlementName.substring(entitlementName.indexOf('_') + 1));\n+            } catch (Exception e) {\n+                LOG.error(\"unable to parse {} to Long\", entitlementName, e);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static Set<Long> getRoleIds(final Set<String> entitlements) {\n+        Set<Long> result = new HashSet<>();\n+\n+        for (String entitlement : entitlements) {\n+            if (isRoleEntitlement(entitlement)) {\n+                Long roleId = getRoleId(entitlement);\n+                if (roleId != null) {\n+                    result.add(roleId);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static Set<Long> getRoleIds(final List<Entitlement> entitlements) {\n+        Set<String> names = new HashSet<>(entitlements.size());\n+        for (Entitlement entitlement : entitlements) {\n+            names.add(entitlement.getKey());\n+        }\n+        return getRoleIds(names);\n+    }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private RoleEntitlementUtil() {\n+    }\n+}"},{"sha":"2822c211ad6d29d1b0f4ff152fd465de217a4382","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.persistence.api.dao.validation;\n+package org.apache.syncope.persistence.api.attrvalue.validation;\n \n import java.util.EnumSet;\n import java.util.HashMap;","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/validation/InvalidEntityException.java"},{"sha":"37466e3237b33e5078db1367fe1b1bbe5449f8d1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/attrvalue/validation/InvalidPlainAttrValueException.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidPlainAttrValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidPlainAttrValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidPlainAttrValueException.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -16,28 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.persistence.api.dao.validation;\n+package org.apache.syncope.persistence.api.attrvalue.validation;\n \n import javax.validation.ValidationException;\n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n \n-public class InvalidNormAttrValueException extends ValidationException {\n+public class InvalidPlainAttrValueException extends ValidationException {\n \n     private static final long serialVersionUID = -5023202610580202148L;\n \n-    public InvalidNormAttrValueException(final String errorMessage) {\n+    public InvalidPlainAttrValueException(final String errorMessage) {\n         super(errorMessage);\n     }\n \n-    public InvalidNormAttrValueException(final String errorMessage, final Throwable cause) {\n+    public InvalidPlainAttrValueException(final String errorMessage, final Throwable cause) {\n         super(errorMessage, cause);\n     }\n \n-    public InvalidNormAttrValueException(final NormAttrValue value) {\n+    public InvalidPlainAttrValueException(final PlainAttrValue value) {\n         this(\"Could not validate \" + value.getValue());\n     }\n \n-    public InvalidNormAttrValueException(final NormAttrValue value, Throwable cause) {\n+    public InvalidPlainAttrValueException(final PlainAttrValue value, Throwable cause) {\n         this(\"Could not validate \" + value.getValue(), cause);\n     }\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/validation/InvalidNormAttrValueException.java"},{"sha":"efb1fd933d34145e4b2eac2910ab9b2d3fa7005a","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/attrvalue/validation/ParsingValidationException.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FParsingValidationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FParsingValidationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FParsingValidationException.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.persistence.api.dao.validation;\n+package org.apache.syncope.persistence.api.attrvalue.validation;\n \n import javax.validation.ValidationException;\n ","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/validation/ParsingValidationException.java"},{"sha":"bb88519ca3ffbb5e5a2a4cbf0a806da1fd348434","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/attrvalue/validation/Validator.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -16,11 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.persistence.api.dao.validation;\n+package org.apache.syncope.persistence.api.attrvalue.validation;\n \n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n \n public interface Validator {\n \n-    void validate(String value, NormAttrValue attrValue) throws ParsingValidationException, InvalidNormAttrValueException;\n+    void validate(String value, PlainAttrValue attrValue)\n+            throws ParsingValidationException, InvalidPlainAttrValueException;\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/validation/Validator.java"},{"sha":"25b0ecd468551025fb47af295c9a7079c6335f78","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/content/ContentExporter.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.content;\n+\n+import java.io.OutputStream;\n+import javax.xml.transform.TransformerConfigurationException;\n+import org.xml.sax.SAXException;\n+\n+public interface ContentExporter {\n+\n+    void export(OutputStream output, String wfTablePrefix) throws SAXException, TransformerConfigurationException;\n+}"},{"sha":"2f14027b0ee5cadce07ad83f803028808ceaec1e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/content/ContentLoader.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fcontent%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fcontent%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fcontent%2FContentLoader.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.content;\n+\n+public interface ContentLoader {\n+\n+    void load();\n+\n+}"},{"sha":"e07c02c33b6027a20e6b48f6bb2d29a385c56393","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/AttrTemplateDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FAttrTemplateDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FAttrTemplateDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FAttrTemplateDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,9 +20,9 @@\n \n import java.util.List;\n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.NormSchema;\n+import org.apache.syncope.persistence.api.entity.Schema;\n \n-public interface AttrTemplateDAO<K extends NormSchema> extends DAO<AttrTemplate<K>> {\n+public interface AttrTemplateDAO<K extends Schema> extends DAO<AttrTemplate<K>, Long> {\n \n     <T extends AttrTemplate<K>> T find(Long key, Class<T> reference);\n "},{"sha":"359c603d5333443e51649cb652d1df141379f2c1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/ConfDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,18 +18,18 @@\n  */\n package org.apache.syncope.persistence.api.dao;\n \n-import org.apache.syncope.persistence.api.entity.conf.CNormAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.persistence.api.entity.conf.Conf;\n \n-public interface ConfDAO extends DAO<Conf> {\n+public interface ConfDAO extends DAO<Conf, Long> {\n \n-    CNormAttr find(String key);\n+    CPlainAttr find(String key);\n \n-    CNormAttr find(String key, String defaultValue);\n+    CPlainAttr find(String key, String defaultValue);\n \n     Conf get();\n \n-    Conf save(CNormAttr attr);\n+    Conf save(CPlainAttr attr);\n \n     Conf delete(String key);\n }"},{"sha":"90c10c476082b8f58e5e84c38fdf7812c96863c0","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/ConnInstanceDAO.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FConnInstanceDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+\n+public interface ConnInstanceDAO extends DAO<ConnInstance, Long> {\n+\n+    ConnInstance find(Long key);\n+\n+    List<ConnInstance> findAll();\n+\n+    ConnInstance save(ConnInstance connector) throws InvalidEntityException;\n+\n+    void delete(Long key);\n+}"},{"sha":"504f7e68d1a8fc606757d5cd8be8de8a03ca1da7","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/DAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,11 +20,11 @@\n \n import org.apache.syncope.persistence.api.entity.Entity;\n \n-public interface DAO<T extends Entity> {\n+public interface DAO<E extends Entity<KEY>, KEY> {\n \n-    void refresh(T entity);\n+    void refresh(E entity);\n \n-    void detach(T entity);\n+    void detach(E entity);\n \n     void flush();\n "},{"sha":"5c8116b795c19a04e5e1f1c2fd2933ef41e7d20c","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/DerAttrDAO.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDerAttrDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,19 +19,18 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.DerAttr;\n-import org.apache.syncope.persistence.api.entity.NormAttr;\n \n-public interface DerAttrDAO<K extends NormAttr> extends DAO<DerAttr<K>> {\n+public interface DerAttrDAO extends DAO<DerAttr, Long> {\n \n-    <T extends DerAttr<K>> T find(Long key, Class<T> reference);\n+    <T extends DerAttr> T find(Long key, Class<T> reference);\n \n-    <T extends DerAttr<K>> List<T> findAll(Class<T> reference);\n+    <T extends DerAttr> List<T> findAll(Class<T> reference);\n \n-    <T extends DerAttr<K>> T save(T derAttr) throws InvalidEntityException;\n+    <T extends DerAttr> T save(T derAttr) throws InvalidEntityException;\n \n-    <T extends DerAttr<K>> void delete(Long key, Class<T> reference);\n+    <T extends DerAttr> void delete(Long key, Class<T> reference);\n \n-    <T extends DerAttr<K>> void delete(T derAttr);\n+    <T extends DerAttr> void delete(T derAttr);\n }"},{"sha":"46972a21e22d1ac7d0d98049ae2b3d189d65c5af","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/DerSchemaDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,19 +19,18 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.persistence.api.entity.DerAttr;\n import org.apache.syncope.persistence.api.entity.DerSchema;\n-import org.apache.syncope.persistence.api.entity.NormAttr;\n \n-public interface DerSchemaDAO extends DAO<DerSchema> {\n+public interface DerSchemaDAO extends DAO<DerSchema, String> {\n \n     <T extends DerSchema> T find(String name, Class<T> reference);\n \n     <T extends DerSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends DerAttr<K>, K extends NormAttr> List<T> findAttrs(DerSchema schema, Class<T> reference);\n+    <T extends DerAttr> List<T> findAttrs(DerSchema schema, Class<T> reference);\n \n     <T extends DerSchema> T save(T derSchema) throws InvalidEntityException;\n "},{"sha":"8ca510bf38b8b9ae1206ad1f19a5d753a9fcfed5","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/EntitlementDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FEntitlementDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,19 +19,19 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.Entitlement;\n import org.apache.syncope.persistence.api.entity.role.Role;\n \n-public interface EntitlementDAO extends DAO<Entitlement> {\n+public interface EntitlementDAO extends DAO<Entitlement, String> {\n \n     Entitlement find(String key);\n \n     List<Entitlement> findAll();\n \n     Entitlement save(Entitlement entitlement) throws InvalidEntityException;\n \n-    Entitlement saveEntitlementRole(Role role);\n+    Entitlement saveRoleEntitlement(Role role);\n \n     void delete(String key);\n "},{"sha":"5b3d4597d7ea35739cb1ce6bd73852f0a589cadf","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -21,12 +21,12 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.ExternalResource;\n import org.apache.syncope.persistence.api.entity.MappingItem;\n import org.apache.syncope.persistence.api.entity.Policy;\n \n-public interface ExternalResourceDAO extends DAO<ExternalResource> {\n+public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n     ExternalResource find(String key);\n "},{"sha":"13808c35730076fe972687ae9d5e2c343bf2140d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/LoggerDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.Logger;\n \n-public interface LoggerDAO extends DAO<Logger> {\n+public interface LoggerDAO extends DAO<Logger, String> {\n \n     Logger find(String key);\n "},{"sha":"43412fe65c5149946a3a06e6c82bfb07b25fa634","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/MembershipDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FMembershipDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FMembershipDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FMembershipDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.membership.Membership;\n import org.apache.syncope.persistence.api.entity.role.Role;\n import org.apache.syncope.persistence.api.entity.user.User;\n \n-public interface MembershipDAO extends DAO<Membership> {\n+public interface MembershipDAO extends DAO<Membership, Long> {\n \n     Membership find(Long key);\n "},{"sha":"fadb8116ae2be9ff0e4d21ec287af4573ac31fe6","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/NotificationDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FNotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FNotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FNotificationDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.Notification;\n \n-public interface NotificationDAO extends DAO<Notification> {\n+public interface NotificationDAO extends DAO<Notification, Long> {\n \n     Notification find(Long key);\n "},{"sha":"8b21ac2491b3565917fc8db99edde84c7709f28e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/PlainAttrDAO.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainAttrDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.persistence.api.dao;\n \n-import org.apache.syncope.persistence.api.entity.NormAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n \n-public interface NormAttrDAO extends DAO<NormAttr> {\n+public interface PlainAttrDAO extends DAO<PlainAttr, Long> {\n \n-    <T extends NormAttr> T find(Long key, Class<T> reference);\n+    <T extends PlainAttr> T find(Long key, Class<T> reference);\n \n-    <T extends NormAttr> void delete(Long key, Class<T> reference);\n+    <T extends PlainAttr> void delete(Long key, Class<T> reference);\n \n-    <T extends NormAttr> void delete(T attr);\n+    <T extends PlainAttr> void delete(T attr);\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/NormAttrDAO.java"},{"sha":"e6d9226c881e6b72679dede23b9f8e735c64125d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/PlainAttrValueDAO.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainAttrValueDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,18 +19,18 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n \n-public interface NormAttrValueDAO extends DAO<NormAttrValue> {\n+public interface PlainAttrValueDAO extends DAO<PlainAttrValue, Long> {\n \n-    <T extends NormAttrValue> T find(Long key, Class<T> reference);\n+    <T extends PlainAttrValue> T find(Long key, Class<T> reference);\n \n-    <T extends NormAttrValue> List<T> findAll(Class<T> reference);\n+    <T extends PlainAttrValue> List<T> findAll(Class<T> reference);\n \n-    <T extends NormAttrValue> T save(T attributeValue) throws InvalidEntityException;\n+    <T extends PlainAttrValue> T save(T attributeValue) throws InvalidEntityException;\n \n-    <T extends NormAttrValue> void delete(Long key, Class<T> reference);\n+    <T extends PlainAttrValue> void delete(Long key, Class<T> reference);\n \n-    <T extends NormAttrValue> void delete(T attributeValue);\n+    <T extends PlainAttrValue> void delete(T attributeValue);\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/NormAttrValueDAO.java"},{"sha":"ea9860e917eb56e62d54e76fa417b5b6b5ce8945","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/PlainSchemaDAO.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,20 +19,20 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.AttributableUtil;\n-import org.apache.syncope.persistence.api.entity.NormAttr;\n-import org.apache.syncope.persistence.api.entity.NormSchema;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n \n-public interface NormSchemaDAO extends DAO<NormSchema> {\n+public interface PlainSchemaDAO extends DAO<PlainSchema, String> {\n \n-    <T extends NormSchema> T find(String key, Class<T> reference);\n+    <T extends PlainSchema> T find(String key, Class<T> reference);\n \n-    <T extends NormSchema> List<T> findAll(Class<T> reference);\n+    <T extends PlainSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends NormAttr> List<T> findAttrs(NormSchema schema, Class<T> reference);\n+    <T extends PlainAttr> List<T> findAttrs(PlainSchema schema, Class<T> reference);\n \n-    <T extends NormSchema> T save(T schema) throws InvalidEntityException;\n+    <T extends PlainSchema> T save(T schema) throws InvalidEntityException;\n \n     void delete(String name, AttributableUtil attributableUtil);\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/NormSchemaDAO.java"},{"sha":"0161c23a22168e7dd50d3cdbf38c849ce206b09f","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FPolicyDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.persistence.api.entity.Policy;\n import org.apache.syncope.persistence.api.entity.SyncPolicy;\n \n-public interface PolicyDAO extends DAO<Policy> {\n+public interface PolicyDAO extends DAO<Policy, Long> {\n \n     <T extends Policy> T find(Long key);\n "},{"sha":"d154534efa0066359b56e947fb2303804539b197","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/ReportDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FReportDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.Report;\n \n-public interface ReportDAO extends DAO<Report> {\n+public interface ReportDAO extends DAO<Report, Long> {\n \n     Report find(Long key);\n "},{"sha":"dc1c2bf993149d0ab0cf8eadb59f9f644e910544","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/ReportExecDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,11 +19,11 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.Report;\n import org.apache.syncope.persistence.api.entity.ReportExec;\n \n-public interface ReportExecDAO extends DAO<ReportExec> {\n+public interface ReportExecDAO extends DAO<ReportExec, Long> {\n \n     ReportExec find(Long key);\n "},{"sha":"b2d7dd32172a78c12007ded999efcae052237a80","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/RoleDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -21,18 +21,18 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.Entitlement;\n import org.apache.syncope.persistence.api.entity.ExternalResource;\n import org.apache.syncope.persistence.api.entity.Policy;\n import org.apache.syncope.persistence.api.entity.membership.Membership;\n import org.apache.syncope.persistence.api.entity.role.RDerAttr;\n-import org.apache.syncope.persistence.api.entity.role.RNormAttr;\n-import org.apache.syncope.persistence.api.entity.role.RNormAttrValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n import org.apache.syncope.persistence.api.entity.role.RVirAttr;\n import org.apache.syncope.persistence.api.entity.role.Role;\n \n-public interface RoleDAO extends SubjectDAO<RNormAttr, RDerAttr, RVirAttr> {\n+public interface RoleDAO extends SubjectDAO<RPlainAttr, RDerAttr, RVirAttr> {\n \n     Role find(Long key);\n \n@@ -58,9 +58,9 @@ public interface RoleDAO extends SubjectDAO<RNormAttr, RDerAttr, RVirAttr> {\n \n     List<Role> findByDerAttrValue(String schemaName, String value);\n \n-    List<Role> findByAttrValue(String schemaName, RNormAttrValue attrValue);\n+    List<Role> findByAttrValue(String schemaName, RPlainAttrValue attrValue);\n \n-    Role findByAttrUniqueValue(String schemaName, RNormAttrValue attrUniqueValue);\n+    Role findByAttrUniqueValue(String schemaName, RPlainAttrValue attrUniqueValue);\n \n     List<Role> findByResource(ExternalResource resource);\n "},{"sha":"efe1aa7ce2c5b1b646f6bbe61976dbee06566b98","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/SecurityQuestionDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSecurityQuestionDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSecurityQuestionDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSecurityQuestionDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n \n-public interface SecurityQuestionDAO extends DAO<SecurityQuestion> {\n+public interface SecurityQuestionDAO extends DAO<SecurityQuestion, Long> {\n \n     SecurityQuestion find(Long key);\n "},{"sha":"f542422ef16e49ac187496e8c6b294e0ba16fdc1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/SubjectDAO.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSubjectDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -22,21 +22,23 @@\n import org.apache.syncope.persistence.api.entity.AttributableUtil;\n import org.apache.syncope.persistence.api.entity.DerAttr;\n import org.apache.syncope.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.persistence.api.entity.NormAttr;\n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.persistence.api.entity.Subject;\n import org.apache.syncope.persistence.api.entity.VirAttr;\n \n-public interface SubjectDAO<N extends NormAttr, D extends DerAttr<N>, V extends VirAttr> extends DAO<Subject<N, D, V>> {\n+public interface SubjectDAO<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n+        extends DAO<Subject<P, D, V>, Long> {\n \n-    <T extends Subject<N, D, V>> List<T> findByAttrValue(String schemaName,\n-            NormAttrValue attrValue, AttributableUtil attrUtil);\n+    List<? extends Subject<P, D, V>> findByAttrValue(\n+            String schemaName, PlainAttrValue attrValue, AttributableUtil attrUtil);\n \n-    <T extends Subject<N, D, V>> T findByAttrUniqueValue(String schemaName,\n-            NormAttrValue attrUniqueValue, AttributableUtil attrUtil);\n+    Subject<P, D, V> findByAttrUniqueValue(\n+            String schemaName, PlainAttrValue attrUniqueValue, AttributableUtil attrUtil);\n \n-    <T extends Subject<N, D, V>> List<T> findByDerAttrValue(\n+    List<? extends Subject<P, D, V>> findByDerAttrValue(\n             String schemaName, String value, AttributableUtil attrUtil);\n \n-    <T extends Subject<N, D, V>> List<T> findByResource(ExternalResource resource, Class<T> reference);\n+    List<? extends Subject<P, D, V>> findByResource(\n+            ExternalResource resource, AttributableUtil attrUtil);\n }"},{"sha":"4bb811ad0cee121c3413a2d2cf668bc0febe601c","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/SubjectSearchDAO.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FSubjectSearchDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -23,9 +23,12 @@\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n \n-public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>> {\n+public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>, Long> {\n \n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n@@ -42,7 +45,8 @@ public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>> {\n      * @param <T> user/role\n      * @return the list of users/roles matching the given search condition\n      */\n-    <T extends Subject<?, ?, ?>> List<T> search(Set<Long> adminRoles, SearchCond searchCondition, SubjectType type);\n+    <T extends Subject<?, ?, ?>> List<T> search(\n+            Set<Long> adminRoles, SearchCond searchCondition, SubjectType type);\n \n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n@@ -52,8 +56,8 @@ public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>> {\n      * @param <T> user/role\n      * @return the list of users/roles matching the given search condition\n      */\n-    <T extends Subject<?, ?, ?>> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n-            List<OrderByClause> orderBy, SubjectType type);\n+    <T extends Subject<?, ?, ?>> List<T> search(\n+            Set<Long> adminRoles, SearchCond searchCondition, List<OrderByClause> orderBy, SubjectType type);\n \n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n@@ -65,8 +69,9 @@ public interface SubjectSearchDAO extends DAO<Subject<?, ?, ?>> {\n      * @param <T> user/role\n      * @return the list of users/roles matching the given search condition (in the given page)\n      */\n-    <T extends Subject<?, ?, ?>> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n-            int page, int itemsPerPage, List<OrderByClause> orderBy, SubjectType type);\n+    <T extends Subject<?, ?, ?>> List<T> search(\n+            Set<Long> adminRoles, SearchCond searchCondition, int page, int itemsPerPage,\n+            List<OrderByClause> orderBy, SubjectType type);\n \n     /**\n      * Verify if user/role matches the given search condition."},{"sha":"63e435812f30b4c8ef1b4ec765b58a9518a50afd","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/TaskDAO.java","status":"modified","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,31 +19,34 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.ExternalResource;\n import org.apache.syncope.persistence.api.entity.task.Task;\n \n-public interface TaskDAO extends DAO<Task> {\n+public interface TaskDAO extends DAO<Task, Long> {\n+\n+    Class<? extends Task> getEntityReference(TaskType type);\n \n     <T extends Task> T find(Long key);\n \n-    <T extends Task> List<T> findToExec(Class<T> reference);\n+    <T extends Task> List<T> findToExec(TaskType type);\n \n-    <T extends Task> List<T> findAll(ExternalResource resource, Class<T> reference);\n+    <T extends Task> List<T> findAll(ExternalResource resource, TaskType type);\n \n-    <T extends Task> List<T> findAll(Class<T> reference);\n+    <T extends Task> List<T> findAll(TaskType type);\n \n     <T extends Task> List<T> findAll(\n-            int page, int itemsPerPage, List<OrderByClause> orderByClauses, Class<T> reference);\n+            int page, int itemsPerPage, List<OrderByClause> orderByClauses, TaskType type);\n \n-    <T extends Task> int count(Class<T> reference);\n+    int count(TaskType type);\n \n     <T extends Task> T save(T task) throws InvalidEntityException;\n \n-    <T extends Task> void delete(Long key);\n+    void delete(Long key);\n \n-    <T extends Task> void delete(T task);\n+    void delete(Task task);\n \n-    <T extends Task> void deleteAll(ExternalResource resource, Class<T> reference);\n+    void deleteAll(ExternalResource resource, TaskType type);\n }"},{"sha":"7b8d30df980e1614d282ee8d7348d7972d6cf246","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,19 +19,20 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.task.Task;\n import org.apache.syncope.persistence.api.entity.task.TaskExec;\n \n-public interface TaskExecDAO extends DAO<TaskExec> {\n+public interface TaskExecDAO extends DAO<TaskExec, Long> {\n \n     TaskExec find(Long key);\n \n     <T extends Task> TaskExec findLatestStarted(T task);\n \n     <T extends Task> TaskExec findLatestEnded(T task);\n \n-    <T extends Task> List<TaskExec> findAll(Class<T> reference);\n+    List<TaskExec> findAll(TaskType type);\n \n     TaskExec save(TaskExec execution) throws InvalidEntityException;\n "},{"sha":"42ea10aa19fd7eafacd9ca4777216e2f1faf1c27","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/UserDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -21,16 +21,16 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.ExternalResource;\n import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.persistence.api.entity.user.UNormAttr;\n-import org.apache.syncope.persistence.api.entity.user.UNormAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.persistence.api.entity.user.User;\n \n-public interface UserDAO extends SubjectDAO<UNormAttr, UDerAttr, UVirAttr> {\n+public interface UserDAO extends SubjectDAO<UPlainAttr, UDerAttr, UVirAttr> {\n \n     User find(Long key);\n \n@@ -44,9 +44,9 @@ public interface UserDAO extends SubjectDAO<UNormAttr, UDerAttr, UVirAttr> {\n \n     List<User> findByDerAttrValue(String schemaName, String value);\n \n-    List<User> findByAttrValue(String schemaName, UNormAttrValue attrValue);\n+    List<User> findByAttrValue(String schemaName, UPlainAttrValue attrValue);\n \n-    User findByAttrUniqueValue(String schemaName, UNormAttrValue attrUniqueValue);\n+    User findByAttrUniqueValue(String schemaName, UPlainAttrValue attrUniqueValue);\n \n     List<User> findByResource(ExternalResource resource);\n "},{"sha":"e8df331c80a729c02a2747342acd7b2b212af7a4","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/VirAttrDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FVirAttrDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.VirAttr;\n \n-public interface VirAttrDAO extends DAO<VirAttr> {\n+public interface VirAttrDAO extends DAO<VirAttr, Long> {\n \n     <T extends VirAttr> T find(Long key, Class<T> reference);\n "},{"sha":"41bdf0f4bbf0a4d3e43c795e76101a7ac26ef22c","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,17 +19,18 @@\n package org.apache.syncope.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n import org.apache.syncope.persistence.api.entity.VirSchema;\n \n-public interface VirSchemaDAO extends DAO<VirSchema> {\n+public interface VirSchemaDAO extends DAO<VirSchema, String> {\n \n     <T extends VirSchema> T find(String key, Class<T> reference);\n \n     <T extends VirSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends VirSchema> List<T> findAttrs(VirSchema virSchema, Class<T> reference);\n+    <T extends VirAttr> List<T> findAttrs(VirSchema virSchema, Class<T> reference);\n \n     <T extends VirSchema> T save(T virSchema) throws InvalidEntityException;\n "},{"sha":"912c622d972b3022779fb29d521ac741c6f110f6","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/AccountPolicy.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAccountPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,18 +18,15 @@\n  */\n package org.apache.syncope.persistence.api.entity;\n \n-import java.util.Collection;\n import java.util.Set;\n \n public interface AccountPolicy extends Policy {\n \n-    Set<String> getResourceNames();\n-\n-    Set<ExternalResource> getResources();\n-\n     boolean addResource(ExternalResource resource);\n \n     boolean removeResource(ExternalResource resource);\n \n-    void setResources(Collection<ExternalResource> resources);\n+    Set<String> getResourceNames();\n+\n+    Set<? extends ExternalResource> getResources();\n }"},{"sha":"bb81373919ae95e2cc5222b083bcb0d7439ad951","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Attr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -25,6 +25,6 @@\n     void setOwner(Attributable<?, ?, ?> owner);\n \n     S getSchema();\n-    \n+\n     void setSchema(S schema);\n }"},{"sha":"c01622350cb4e5dc241e21c431af27491dc55473","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/AttrTemplate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,13 +20,13 @@\n \n import org.apache.syncope.persistence.api.entity.role.Role;\n \n-public interface AttrTemplate<T extends Schema> extends Entity<Long> {\n+public interface AttrTemplate<S extends Schema> extends Entity<Long> {\n \n     Role getOwner();\n \n     void setOwner(Role role);\n \n-    T getSchema();\n+    S getSchema();\n \n-    void setSchema(T schema);\n+    void setSchema(S schema);\n }"},{"sha":"350a52414f5f4cdec835a484bd2227a560342462","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Attributable.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttributable.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,29 +20,29 @@\n \n import java.util.List;\n \n-public interface Attributable<N extends NormAttr, D extends DerAttr, V extends VirAttr> extends AnnotatedEntity<Long> {\n+public interface Attributable<P extends PlainAttr, D extends DerAttr, V extends VirAttr> extends AnnotatedEntity<Long> {\n \n-    boolean addNormAttr(N attr);\n+    boolean addPlainAttr(P attr);\n \n-    boolean addDerAttr(D attr);\n+    boolean addDerAttr(D derAttr);\n \n-    boolean addVirAttr(V attr);\n+    boolean addVirAttr(V virAttr);\n \n-    N getNormAttr(String normSchemaName);\n+    boolean removePlainAttr(P attr);\n \n-    List<N> getNormAttrs();\n+    boolean removeDerAttr(D derAttr);\n \n-    D getDerAttr(String derSchemaName);\n+    boolean removeVirAttr(V virAttr);\n \n-    List<D> getDerAttrs();\n+    P getPlainAttr(String plainSchemaName);\n \n-    V getVirAttr(String virSchemaName);\n+    List<? extends P> getPlainAttrs();\n \n-    List<V> getVirAttrs();\n+    D getDerAttr(String derSchemaName);\n \n-    boolean removeNormAttr(N attr);\n+    List<? extends D> getDerAttrs();\n \n-    boolean removeDerAttr(D derAttr);\n+    V getVirAttr(String virSchemaName);\n \n-    boolean removeVirAttr(V virAttr);\n+    List<? extends V> getVirAttrs();\n }"},{"sha":"ff1679c257f141751be438991a8920d238add4be","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/AttributableUtil.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FAttributableUtil.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -27,23 +27,25 @@ public interface AttributableUtil {\n \n     AttributableType getType();\n \n-    <T extends Attributable> Class<T> attributableClass();\n+    <T extends Attributable<?, ?, ?>> Class<T> attributableClass();\n \n-    <T extends NormSchema> Class<T> normSchemaClass();\n+    <T extends PlainSchema> Class<T> plainSchemaClass();\n \n-    <T extends NormAttr> Class<T> normAttrClass();\n+    <T extends PlainSchema> T newPlainSchema();\n \n-    <T extends NormAttr> T newNormAttr();\n+    <T extends PlainAttr> Class<T> plainAttrClass();\n \n-    <T extends NormAttrValue> Class<T> attrUniqueValueClass();\n+    <T extends PlainAttr> T newPlainAttr();\n \n-    <T extends NormAttrValue> T newNormAttrUniqueValue();\n+    <T extends PlainAttrValue> Class<T> plainAttrValueClass();\n \n-    <T extends NormAttrValue> Class<T> attrValueClass();\n+    <T extends PlainAttrValue> T newPlainAttrValue();\n \n-    <T extends NormAttrValue> T newNormAttrValue();\n+    <T extends AttrTemplate<PlainSchema>> Class<T> plainAttrTemplateClass();\n \n-    <T extends AttrTemplate<NormSchema>> Class<T> normAttrTemplateClass();\n+    <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass();\n+\n+    <T extends PlainAttrValue> T newPlainAttrUniqueValue();\n \n     <T extends DerSchema> Class<T> derSchemaClass();\n \n@@ -71,8 +73,7 @@ public interface AttributableUtil {\n \n     <T extends MappingItem> List<T> getMappingItems(ExternalResource resource, MappingPurpose purpose);\n \n-    <T extends MappingItem> List<T> getUidToMappingItems(\n-            ExternalResource resource, MappingPurpose purpose, AttributableType type);\n+    <T extends MappingItem> List<T> getUidToMappingItems(ExternalResource resource, MappingPurpose purpose);\n \n     IntMappingType intMappingType();\n "},{"sha":"21d8286b53eb8b661b8d75c5f02a1d7ec903b8d5","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/ConnInstance.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -45,7 +45,7 @@ public interface ConnInstance extends Entity<Long> {\n \n     ConnPoolConf getPoolConf();\n \n-    List<ExternalResource> getResources();\n+    List<? extends ExternalResource> getResources();\n \n     String getVersion();\n \n@@ -55,11 +55,9 @@ public interface ConnInstance extends Entity<Long> {\n \n     void setBundleName(String bundleName);\n \n-    void setCapabilities(Set<ConnectorCapability> capabilities);\n-\n     void setConfiguration(Set<ConnConfProperty> configuration);\n \n-    void setConnRequestTimeout(Integer connRequestTimeout);\n+    void setConnRequestTimeout(Integer timeout);\n \n     void setConnectorName(String connectorName);\n \n@@ -69,7 +67,5 @@ public interface ConnInstance extends Entity<Long> {\n \n     void setPoolConf(ConnPoolConf poolConf);\n \n-    void setResources(List<ExternalResource> resources);\n-\n     void setVersion(String version);\n }"},{"sha":"0494d01a468a105536237437728d3fda2e2633c1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/DerAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Collection;\n \n-public interface DerAttr<N extends NormAttr> extends Attr<DerSchema> {\n+public interface DerAttr extends Attr<DerSchema> {\n \n-    String getValue(Collection<N> attrs);\n+    String getValue(Collection<? extends PlainAttr> attrs);\n }"},{"sha":"965c1a5a5f718622b884be37b165594d0f6bf22e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/ExternalResource.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FExternalResource.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -99,10 +99,6 @@ public interface ExternalResource extends Entity<String> {\n \n     void setRmapping(RMapping rmapping);\n \n-    void setSerializedUSyncToken(String token);\n-\n-    void setSerializedRSyncToken(String token);\n-\n     void setEnforceMandatoryCondition(boolean enforce);\n \n     void setPropagationPrimary(boolean condition);"},{"sha":"128483338088db96b0e115caa937979b43f2bb48","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Logger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FLogger.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -23,7 +23,7 @@\n \n public interface Logger extends Entity<String> {\n \n-    void setName(String name);\n+    void setKey(String name);\n \n     LoggerLevel getLevel();\n "},{"sha":"3639e8ec198015b5940b86373e412a00382f94ad","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Mapping.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FMapping.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -26,7 +26,7 @@\n \n     String getAccountLink();\n \n-    List<T> getItems();\n+    List<? extends T> getItems();\n \n     ExternalResource getResource();\n \n@@ -38,7 +38,5 @@\n \n     void setAccountLink(String accountLink);\n \n-    void setItems(List<T> items);\n-\n     void setResource(ExternalResource resource);\n }"},{"sha":"07a12b8e45d0841c702461a10afdbbe29f2916e0","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/MappingItem.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FMappingItem.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -31,7 +31,7 @@ public interface MappingItem extends Entity<Long> {\n \n     String getMandatoryCondition();\n \n-    <T extends MappingItem> Mapping<T> getMapping();\n+    Mapping<?> getMapping();\n \n     MappingPurpose getPurpose();\n \n@@ -49,7 +49,7 @@ public interface MappingItem extends Entity<Long> {\n \n     void setMandatoryCondition(String condition);\n \n-    void setMapping(Mapping mapping);\n+    void setMapping(Mapping<?> mapping);\n \n     void setPassword(boolean password);\n "},{"sha":"d7f7dc0a849a34bbddecced0087415600df18156","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Notification.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FNotification.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -30,8 +30,6 @@ public interface Notification extends Entity<Long> {\n \n     List<String> getEvents();\n \n-    Long getId();\n-\n     String getRecipientAttrName();\n \n     IntMappingType getRecipientAttrType();\n@@ -62,8 +60,6 @@ public interface Notification extends Entity<Long> {\n \n     void setActive(boolean active);\n \n-    void setEvents(List<String> events);\n-\n     void setRecipientAttrName(String recipientAttrName);\n \n     void setRecipientAttrType(IntMappingType recipientAttrType);\n@@ -76,8 +72,6 @@ public interface Notification extends Entity<Long> {\n \n     void setSender(String sender);\n \n-    void setStaticRecipients(List<String> staticRecipients);\n-\n     void setSubject(String subject);\n \n     void setTemplate(String template);"},{"sha":"d5b2d6ee5a9b2a60b9aafa0a9f92549e0c3b35ab","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/PlainAttr.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,19 +19,19 @@\n package org.apache.syncope.persistence.api.entity;\n \n import java.util.List;\n-import org.apache.syncope.persistence.api.dao.validation.InvalidNormAttrValueException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n \n-public interface NormAttr extends Attr<NormSchema> {\n+public interface PlainAttr extends Attr<PlainSchema> {\n \n-    void addValue(String value, AttributableUtil attributableUtil) throws InvalidNormAttrValueException;\n+    void addValue(String value, AttributableUtil attributableUtil) throws InvalidPlainAttrValueException;\n \n-    NormAttrValue getUniqueValue();\n+    boolean removeValue(PlainAttrValue attrValue);\n \n-    List<? extends NormAttrValue> getValues();\n+    PlainAttrUniqueValue getUniqueValue();\n \n-    List<String> getValuesAsStrings();\n+    List<? extends PlainAttrValue> getValues();\n \n-    boolean removeValue(NormAttrValue attrValue);\n+    List<String> getValuesAsStrings();\n \n-    void setUniqueValue(NormAttrValue uniqueValue);\n+    void setUniqueValue(PlainAttrUniqueValue uniqueValue);\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/NormAttr.java"},{"sha":"6f7113a4adb6dcc36ef1191285fcaa64334d5a18","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/PlainAttrUniqueValue.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity;\n+\n+public interface PlainAttrUniqueValue extends PlainAttrValue {\n+\n+    PlainSchema getSchema();\n+\n+    void setSchema(PlainSchema schema);\n+}"},{"sha":"da7f1c34a07fe0ddc79d5f1c388d4fbe186aca69","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/PlainAttrValue.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,11 +20,11 @@\n \n import java.util.Date;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.persistence.api.dao.validation.ParsingValidationException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.ParsingValidationException;\n \n-public interface NormAttrValue extends Entity<Long> {\n+public interface PlainAttrValue extends Entity<Long> {\n \n-    NormAttr getNormAttr();\n+    PlainAttr getAttr();\n \n     byte[] getBinaryValue();\n \n@@ -44,9 +44,9 @@ public interface NormAttrValue extends Entity<Long> {\n \n     String getValueAsString(AttrSchemaType type);\n \n-    void parseValue(NormSchema schema, String value) throws ParsingValidationException;\n+    void parseValue(PlainSchema schema, String value) throws ParsingValidationException;\n \n-    void setNormAttr(NormAttr attr);\n+    void setAttr(PlainAttr attr);\n \n     void setBinaryValue(byte[] binaryValue);\n ","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/NormAttrValue.java"},{"sha":"2ba286cb05c442df9b0feb915c9cf92b7f86fd7c","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/PlainSchema.java","status":"renamed","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.persistence.api.entity;\n \n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.persistence.api.dao.validation.Validator;\n+import org.apache.syncope.persistence.api.attrvalue.validation.Validator;\n \n-public interface NormSchema extends Schema {\n+public interface PlainSchema extends Schema {\n \n     CipherAlgorithm getCipherAlgorithm();\n \n@@ -53,4 +54,14 @@ public interface NormSchema extends Schema {\n \n     void setValidatorClass(String validatorClass);\n \n+    void setType(AttrSchemaType type);\n+\n+    void setMandatoryCondition(String condition);\n+\n+    void setMultivalue(boolean multivalue);\n+\n+    void setReadonly(boolean readonly);\n+\n+    void setUniqueConstraint(boolean uniquevalue);\n+\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/NormSchema.java"},{"sha":"d97ad6441017bffe8559867c93d68cd509ef400e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/PushPolicy.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FPushPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity;\n+\n+public interface PushPolicy extends Policy {\n+    \n+}"},{"sha":"09fe0638d7f4ab0a651a5475f3d2e1883b043bdf","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Report.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FReport.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -31,19 +31,15 @@ public interface Report extends Entity<Long> {\n \n     String getCronExpression();\n \n-    List<ReportExec> getExecs();\n+    List<? extends ReportExec> getExecs();\n \n-    List<ReportletConf> getReportletConfs();\n+    List<? extends ReportletConf> getReportletConfs();\n \n     boolean removeExec(ReportExec exec);\n \n     boolean removeReportletConf(ReportletConf reportletConf);\n \n     void setCronExpression(String cronExpression);\n \n-    void setExecs(List<ReportExec> executions);\n-\n     void setName(String name);\n-\n-    void setReportletConfs(List<ReportletConf> reportletConfs);\n }"},{"sha":"dcf56edf4bff381fa84f4cc786d14c5fde22a988","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/ReportletConfInstance.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FReportletConfInstance.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity;\n+\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+\n+public interface ReportletConfInstance extends Entity<Long> {\n+\n+    ReportletConf getInstance();\n+\n+    Report getReport();\n+\n+    void setInstance(ReportletConf instance);\n+\n+    void setReport(Report report);\n+\n+}"},{"sha":"2e4a5eb83ac72e73297c989a60b164b3ef403408","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Schema.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -32,16 +32,6 @@ public interface Schema extends Entity<String> {\n \n     boolean isUniqueConstraint();\n \n-    void setName(String name);\n-\n-    void setType(AttrSchemaType type);\n-\n-    void setMandatoryCondition(String condition);\n-\n-    void setMultivalue(boolean multivalue);\n-\n-    void setReadonly(boolean readonly);\n-\n-    void setUniqueConstraint(boolean uniquevalue);\n+    void setKey(String name);\n \n }"},{"sha":"7f13b0300ac0f3501cbcada8eee9aabb83866986","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/Subject.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FSubject.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,15 +20,13 @@\n \n import java.util.Set;\n \n-public interface Subject<N extends NormAttr, D extends DerAttr<N>, V extends VirAttr> extends Attributable<N, D, V> {\n+public interface Subject<N extends PlainAttr, D extends DerAttr, V extends VirAttr> extends Attributable<N, D, V> {\n \n     boolean addResource(ExternalResource resource);\n \n     boolean removeResource(ExternalResource resource);\n \n     Set<String> getResourceNames();\n \n-    Set<ExternalResource> getResources();\n-\n-    void setResources(Set<ExternalResource> resources);\n+    Set<? extends ExternalResource> getResources();\n }"},{"sha":"a7287c7703a843850cb18666cd18877ca2a893b8","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/VirAttr.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -27,6 +27,4 @@ public interface VirAttr extends Attr<VirSchema> {\n     boolean addValue(String value);\n \n     boolean removeValue(String value);\n-\n-    void setValues(List<String> values);\n }"},{"sha":"274aa8cf27efb8c929d15703ae5645aa4f50d19c","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/VirSchema.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,4 +20,5 @@\n \n public interface VirSchema extends Schema {\n \n+    void setReadonly(boolean readonly);\n }"},{"sha":"3636d527317df6ea6831fa855f519c69228dbbf1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/conf/CPlainAttr.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.conf;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+\n+public interface CPlainAttr extends PlainAttr {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    Conf getOwner();\n+\n+    @Override\n+    CPlainSchema getSchema();\n+\n+    @Override\n+    List<? extends CPlainAttrValue> getValues();\n+\n+    @Override\n+    CPlainAttrUniqueValue getUniqueValue();\n+\n+}"},{"sha":"3c27fbbabdc3856b30a83aa8c41475aed030c6a1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/conf/CPlainAttrUniqueValue.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.conf;\n+\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+\n+public interface CPlainAttrUniqueValue extends PlainAttrUniqueValue {\n+\n+    @Override\n+    CPlainAttr getAttr();\n+\n+    @Override\n+    CPlainSchema getSchema();\n+\n+}"},{"sha":"dbf8ba514af42d2c6dbd75ad3bf28f26ea20aa3e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/conf/CPlainAttrValue.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.conf;\n+\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+\n+public interface CPlainAttrValue extends PlainAttrValue {\n+\n+    @Override\n+    CPlainAttr getAttr();\n+\n+}"},{"sha":"aa2fbfc43578a02b107440648a38f43ad330bff1","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/conf/CPlainSchema.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FCPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.persistence.api.entity.conf;\n \n-import org.apache.syncope.persistence.api.entity.NormAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n \n-public interface CNormAttr extends NormAttr {\n+public interface CPlainSchema extends PlainSchema {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/conf/CNormAttr.java"},{"sha":"5a3b28dcf2d44c68976267b2e7d93dd60749022d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/conf/Conf.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -23,17 +23,17 @@\n import org.apache.syncope.persistence.api.entity.DerAttr;\n import org.apache.syncope.persistence.api.entity.VirAttr;\n \n-public interface Conf extends Attributable<CNormAttr, DerAttr<CNormAttr>, VirAttr> {\n+public interface Conf extends Attributable<CPlainAttr, DerAttr, VirAttr> {\n \n-    @Override\n-    boolean addNormAttr(CNormAttr attr);\n+    void setKey(Long key);\n \n     @Override\n-    CNormAttr getNormAttr(String normSchemaName);\n+    boolean addPlainAttr(CPlainAttr attr);\n \n     @Override\n-    List<CNormAttr> getNormAttrs();\n+    boolean removePlainAttr(CPlainAttr attr);\n \n     @Override\n-    boolean removeNormAttr(CNormAttr attr);\n+    List<? extends CPlainAttr> getPlainAttrs();\n+\n }"},{"sha":"26dcd91f4c5927e159441100bbe6d19bedc72b04","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MDerAttr.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,7 +20,13 @@\n \n import org.apache.syncope.persistence.api.entity.DerAttr;\n \n-public interface MDerAttr extends DerAttr<MNormAttr> {\n+public interface MDerAttr extends DerAttr {\n+\n+    @Override\n+    Membership getOwner();\n+\n+    @Override\n+    MDerSchema getSchema();\n \n     MDerAttrTemplate getTemplate();\n "},{"sha":"2413e9a6ecb9dc3dd63fb0d2ab5d4038ae1f3b1e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MDerAttrTemplate.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.persistence.api.entity.membership;\n \n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.DerSchema;\n \n-public interface MDerAttrTemplate extends AttrTemplate<DerSchema> {\n+public interface MDerAttrTemplate extends AttrTemplate<MDerSchema> {\n \n }"},{"sha":"554b064a1df8d13fad1e4c8f27d7da23ed345a57","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MDerSchema.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.persistence.api.entity.membership;\n \n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n \n-public interface MNormAttrValue extends NormAttrValue {\n+public interface MDerSchema extends DerSchema {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MNormAttrValue.java"},{"sha":"b134b011fbceeda3f304559f95cd62d8783a03f2","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MPlainAttr.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.membership;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+\n+public interface MPlainAttr extends PlainAttr {\n+\n+    @Override\n+    Membership getOwner();\n+\n+    @Override\n+    MPlainSchema getSchema();\n+\n+    MPlainAttrTemplate getTemplate();\n+\n+    void setTemplate(MPlainAttrTemplate template);\n+\n+    @Override\n+    List<? extends MPlainAttrValue> getValues();\n+\n+    @Override\n+    MPlainAttrUniqueValue getUniqueValue();\n+\n+}"},{"sha":"ac6ab911aabfa894ae8516789d0c31e3d8c382bd","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MPlainAttrTemplate.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.persistence.api.entity.membership;\n \n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.NormSchema;\n \n-public interface MNormAttrTemplate extends AttrTemplate<NormSchema> {\n+public interface MPlainAttrTemplate extends AttrTemplate<MPlainSchema> {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MNormAttrTemplate.java"},{"sha":"a611d8a0810f0bbdd229731e1299f0e4b92dea08","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MPlainAttrUniqueValue.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.membership;\n+\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+\n+public interface MPlainAttrUniqueValue extends PlainAttrUniqueValue {\n+\n+    @Override\n+    MPlainAttr getAttr();\n+\n+    @Override\n+    MPlainSchema getSchema();\n+\n+}"},{"sha":"6518ae33773015ca3f5b2f15e31cebddc51080de","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MPlainAttrValue.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.persistence.api.entity.membership;\n \n-import org.apache.syncope.persistence.api.entity.NormAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n \n-public interface MNormAttr extends NormAttr {\n+public interface MPlainAttrValue extends PlainAttrValue {\n \n-    MNormAttrTemplate getTemplate();\n+    @Override\n+    MPlainAttr getAttr();\n \n-    void setTemplate(MNormAttrTemplate template);\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MNormAttr.java"},{"sha":"3af8f97cc95f9ec6c2d4a5c5340d546586fae976","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MPlainSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.membership;\n+\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+\n+public interface MPlainSchema extends PlainSchema {\n+\n+}"},{"sha":"17a74ca2b1ef35265d78a3bdbce43151fcaba432","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MVirAttr.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -22,6 +22,12 @@\n \n public interface MVirAttr extends VirAttr {\n \n+    @Override\n+    Membership getOwner();\n+\n+    @Override\n+    MVirSchema getSchema();\n+\n     MVirAttrTemplate getTemplate();\n \n     void setTemplate(MVirAttrTemplate template);"},{"sha":"1f3a6882e73ba8d00f6d3c8f64ccc86ced82a5e6","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MVirAttrTemplate.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.persistence.api.entity.membership;\n \n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.VirSchema;\n \n-public interface MVirAttrTemplate extends AttrTemplate<VirSchema> {\n+public interface MVirAttrTemplate extends AttrTemplate<MVirSchema> {\n \n }"},{"sha":"8d5fa7b508c643998f576cb860fb73edaf27e557","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/MVirSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.membership;\n+\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+\n+public interface MVirSchema extends VirSchema {\n+\n+}"},{"sha":"d07dbd6c2b58715a9bec6c6ea488e5b7ca342025","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/membership/Membership.java","status":"modified","additions":5,"deletions":23,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fmembership%2FMembership.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.persistence.api.entity.role.Role;\n import org.apache.syncope.persistence.api.entity.user.User;\n \n-public interface Membership extends Attributable<MNormAttr, MDerAttr, MVirAttr> {\n+public interface Membership extends Attributable<MPlainAttr, MDerAttr, MVirAttr> {\n \n     Role getRole();\n \n@@ -34,38 +34,20 @@ public interface Membership extends Attributable<MNormAttr, MDerAttr, MVirAttr>\n     void setUser(User user);\n \n     @Override\n-    boolean addNormAttr(MNormAttr attr);\n+    MPlainAttr getPlainAttr(String plainSchemaName);\n \n     @Override\n-    boolean addDerAttr(MDerAttr attr);\n-\n-    @Override\n-    boolean addVirAttr(MVirAttr attr);\n-\n-    @Override\n-    MNormAttr getNormAttr(String normSchemaName);\n-\n-    @Override\n-    List<MNormAttr> getNormAttrs();\n+    List<? extends MPlainAttr> getPlainAttrs();\n \n     @Override\n     MDerAttr getDerAttr(String derSchemaName);\n \n     @Override\n-    List<MDerAttr> getDerAttrs();\n+    List<? extends MDerAttr> getDerAttrs();\n \n     @Override\n     MVirAttr getVirAttr(String virSchemaName);\n \n     @Override\n-    List<MVirAttr> getVirAttrs();\n-\n-    @Override\n-    boolean removeNormAttr(MNormAttr attr);\n-\n-    @Override\n-    boolean removeDerAttr(MDerAttr derAttr);\n-\n-    @Override\n-    boolean removeVirAttr(MVirAttr virAttr);\n+    List<? extends MVirAttr> getVirAttrs();\n }"},{"sha":"16a0c4e5d0c75055b40030a172e0f8e548b1646b","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RDerAttr.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,7 +20,13 @@\n \n import org.apache.syncope.persistence.api.entity.DerAttr;\n \n-public interface RDerAttr extends DerAttr<RNormAttr> {\n+public interface RDerAttr extends DerAttr {\n+\n+    @Override\n+    Role getOwner();\n+\n+    @Override\n+    RDerSchema getSchema();\n \n     RDerAttrTemplate getTemplate();\n "},{"sha":"66bf7e0bd1381866b142396634aa1a4ac8527ee2","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RDerAttrTemplate.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.persistence.api.entity.role;\n \n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.DerSchema;\n \n-public interface RDerAttrTemplate extends AttrTemplate<DerSchema> {\n+public interface RDerAttrTemplate extends AttrTemplate<RDerSchema> {\n \n }"},{"sha":"583c78337f9b34e33dbb9090d7fc4a588ffe9b8d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RDerSchema.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.persistence.api.entity.role;\n \n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n \n-public interface RNormAttrValue extends NormAttrValue {\n+public interface RDerSchema extends DerSchema {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RNormAttrValue.java"},{"sha":"983dc18eb779455a7d35b7ba88e41dcffb65ed57","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RMappingItem.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRMappingItem.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,12 @@\n  */\n package org.apache.syncope.persistence.api.entity.role;\n \n+import org.apache.syncope.persistence.api.entity.Mapping;\n import org.apache.syncope.persistence.api.entity.MappingItem;\n \n public interface RMappingItem extends MappingItem {\n \n+    @Override\n+    Mapping<RMappingItem> getMapping();\n+\n }"},{"sha":"e1cd627f7d6f3a23ddaa489b7d8e169ce76e103e","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RPlainAttr.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.role;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+\n+public interface RPlainAttr extends PlainAttr {\n+\n+    @Override\n+    Role getOwner();\n+\n+    @Override\n+    RPlainSchema getSchema();\n+\n+    RPlainAttrTemplate getTemplate();\n+\n+    void setTemplate(RPlainAttrTemplate template);\n+\n+    @Override\n+    List<? extends RPlainAttrValue> getValues();\n+\n+    @Override\n+    RPlainAttrUniqueValue getUniqueValue();\n+\n+}"},{"sha":"231bffe38450218099330c9fb9c0d0c4e8dfdcfb","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RPlainAttrTemplate.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.persistence.api.entity.role;\n \n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.NormSchema;\n \n-public interface RNormAttrTemplate extends AttrTemplate<NormSchema> {\n+public interface RPlainAttrTemplate extends AttrTemplate<RPlainSchema> {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RNormAttrTemplate.java"},{"sha":"5356ad784c636e742a54f01d30f9b55a55ab8306","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RPlainAttrUniqueValue.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.role;\n+\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+\n+public interface RPlainAttrUniqueValue extends PlainAttrUniqueValue {\n+\n+    @Override\n+    RPlainAttr getAttr();\n+\n+    @Override\n+    RPlainSchema getSchema();\n+\n+}"},{"sha":"c4d95670655901d2d3a5b55e4c39397566c366c9","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RPlainAttrValue.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.persistence.api.entity.role;\n \n-import org.apache.syncope.persistence.api.entity.NormAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n \n-public interface RNormAttr extends NormAttr {\n+public interface RPlainAttrValue extends PlainAttrValue {\n \n-    RNormAttrTemplate getTemplate();\n+    @Override\n+    RPlainAttr getAttr();\n \n-    void setTemplate(RNormAttrTemplate template);\n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RNormAttr.java"},{"sha":"5fc5da81850c7299ab0541429e791e3664297d29","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RPlainSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.role;\n+\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+\n+public interface RPlainSchema extends PlainSchema {\n+\n+}"},{"sha":"92810fc849deb3f276b0a21323ab5ec8679a9102","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RVirAttr.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -22,6 +22,12 @@\n \n public interface RVirAttr extends VirAttr {\n \n+    @Override\n+    Role getOwner();\n+\n+    @Override\n+    RVirSchema getSchema();\n+\n     RVirAttrTemplate getTemplate();\n \n     void setTemplate(RVirAttrTemplate template);"},{"sha":"c7602a411f51bd361ace88efba262e5b4be7813a","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RVirAttrTemplate.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,8 +19,7 @@\n package org.apache.syncope.persistence.api.entity.role;\n \n import org.apache.syncope.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.persistence.api.entity.VirSchema;\n \n-public interface RVirAttrTemplate extends AttrTemplate<VirSchema> {\n+public interface RVirAttrTemplate extends AttrTemplate<RVirSchema> {\n \n }"},{"sha":"1d4cb96fe116de9b6e871a9a80bb68aa359fb429","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/RVirSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.role;\n+\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+\n+public interface RVirSchema extends VirSchema {\n+\n+}"},{"sha":"0c3ac503e587c8de8d46c4ac007bbf6893f55ca3","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/role/Role.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Frole%2FRole.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.persistence.api.entity.Subject;\n import org.apache.syncope.persistence.api.entity.user.User;\n \n-public interface Role extends Subject<RNormAttr, RDerAttr, RVirAttr> {\n+public interface Role extends Subject<RPlainAttr, RDerAttr, RVirAttr> {\n \n     String getName();\n \n@@ -43,21 +43,21 @@ public interface Role extends Subject<RNormAttr, RDerAttr, RVirAttr> {\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n-    List<RNormAttr> findLastInheritedAncestorNormAttrs();\n+    List<? extends RPlainAttr> findLastInheritedAncestorPlainAttrs();\n \n     /**\n      * Get all inherited derived attributes from the ancestors.\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n-    List<RDerAttr> findLastInheritedAncestorDerAttrs();\n+    List<? extends RDerAttr> findLastInheritedAncestorDerAttrs();\n \n     /**\n      * Get all inherited virtual attributes from the ancestors.\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n-    List<RVirAttr> findLastInheritedAncestorVirAttrs();\n+    List<? extends RVirAttr> findLastInheritedAncestorVirAttrs();\n \n     /**\n      * Get first valid account policy.\n@@ -74,9 +74,9 @@ <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n \n     <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(Class<T> reference);\n \n-    <T extends AttrTemplate<Schema>> List<T> getAttrTemplates(Class<T> reference);\n+    <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(Class<T> reference);\n \n-    Set<Entitlement> getEntitlements();\n+    Set<? extends Entitlement> getEntitlements();\n \n     /**\n      * Get first valid password policy.\n@@ -106,8 +106,6 @@ <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n \n     void setAccountPolicy(AccountPolicy accountPolicy);\n \n-    void setEntitlements(List<Entitlement> entitlements);\n-\n     void setInheritAccountPolicy(boolean condition);\n \n     void setInheritAttrs(boolean inheritAttrs);\n@@ -133,7 +131,7 @@ <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n     void setUserOwner(User userOwner);\n \n     @Override\n-    boolean addNormAttr(RNormAttr attr);\n+    boolean addPlainAttr(RPlainAttr attr);\n \n     @Override\n     boolean addDerAttr(RDerAttr attr);\n@@ -142,25 +140,25 @@ <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n     boolean addVirAttr(RVirAttr attr);\n \n     @Override\n-    RNormAttr getNormAttr(String normSchemaName);\n+    RPlainAttr getPlainAttr(String plainSchemaName);\n \n     @Override\n-    List<RNormAttr> getNormAttrs();\n+    List<? extends RPlainAttr> getPlainAttrs();\n \n     @Override\n     RDerAttr getDerAttr(String derSchemaName);\n \n     @Override\n-    List<RDerAttr> getDerAttrs();\n+    List<? extends RDerAttr> getDerAttrs();\n \n     @Override\n     RVirAttr getVirAttr(String virSchemaName);\n \n     @Override\n-    List<RVirAttr> getVirAttrs();\n+    List<? extends RVirAttr> getVirAttrs();\n \n     @Override\n-    boolean removeNormAttr(RNormAttr attr);\n+    boolean removePlainAttr(RPlainAttr attr);\n \n     @Override\n     boolean removeDerAttr(RDerAttr derAttr);"},{"sha":"07c37447f0e0379593458af90166d565b924795a","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/task/NotificationTask.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FNotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FNotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FNotificationTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -45,8 +45,6 @@ public interface NotificationTask extends Task {\n \n     boolean removeRecipient(String recipient);\n \n-    void setRecipients(Set<String> recipients);\n-\n     void setSender(String sender);\n \n     void setSubject(String subject);"},{"sha":"1cf1e35c7851d13f308c0e71c6f7e6f260ebb0ca","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/task/SyncTask.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,17 +18,20 @@\n  */\n package org.apache.syncope.persistence.api.entity.task;\n \n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+\n public interface SyncTask extends ProvisioningTask {\n \n-    String getRoleTemplate();\n+    RoleTO getRoleTemplate();\n \n-    String getUserTemplate();\n+    UserTO getUserTemplate();\n \n     boolean isFullReconciliation();\n \n     void setFullReconciliation(boolean condition);\n \n-    void setRoleTemplate(String roleTemplate);\n+    void setRoleTemplate(RoleTO roleTemplate);\n \n-    void setUserTemplate(String userTemplate);\n+    void setUserTemplate(UserTO userTemplate);\n }"},{"sha":"7c7c0051b928702e8d09e5760225a8ee45c84ab8","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/task/Task.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -19,15 +19,16 @@\n package org.apache.syncope.persistence.api.entity.task;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.persistence.api.entity.Entity;\n \n public interface Task extends Entity<Long> {\n \n+    TaskType getType();\n+\n     boolean addExec(TaskExec exec);\n \n     boolean removeExec(TaskExec exec);\n \n-    List<TaskExec> getExecs();\n-\n-    void setExecs(List<TaskExec> executions);\n+    List<? extends TaskExec> getExecs();\n }"},{"sha":"5c5e52d3028674318f53416f17a35757dfa03172","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UDerAttr.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -20,6 +20,12 @@\n \n import org.apache.syncope.persistence.api.entity.DerAttr;\n \n-public interface UDerAttr extends DerAttr<UNormAttr> {\n+public interface UDerAttr extends DerAttr {\n+\n+    @Override\n+    User getOwner();\n+\n+    @Override\n+    UDerSchema getSchema();\n \n }"},{"sha":"7ab8cb19dfc7cac15a0966ed8bef6a8eaaaa45c6","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UDerSchema.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.persistence.api.entity.user;\n \n-import org.apache.syncope.persistence.api.entity.NormAttr;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n \n-public interface UNormAttr extends NormAttr {\n+public interface UDerSchema extends DerSchema {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UNormAttr.java"},{"sha":"23521305ec80de25e009b6a09b3781099b0b9381","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UMappingItem.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUMappingItem.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,12 @@\n  */\n package org.apache.syncope.persistence.api.entity.user;\n \n+import org.apache.syncope.persistence.api.entity.Mapping;\n import org.apache.syncope.persistence.api.entity.MappingItem;\n \n public interface UMappingItem extends MappingItem {\n \n+    @Override\n+    Mapping<UMappingItem> getMapping();\n+\n }"},{"sha":"59a9863cc66002926725386ef060189bffcbeb38","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UPlainAttr.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.user;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+\n+public interface UPlainAttr extends PlainAttr {\n+\n+    @Override\n+    User getOwner();\n+\n+    @Override\n+    UPlainSchema getSchema();\n+\n+    @Override\n+    List<? extends UPlainAttrValue> getValues();\n+\n+    @Override\n+    UPlainAttrUniqueValue getUniqueValue();\n+\n+}"},{"sha":"078da5294eba96fdaac313fcc2c2e7b99830cc2d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UPlainAttrUniqueValue.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.user;\n+\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+\n+public interface UPlainAttrUniqueValue extends PlainAttrUniqueValue {\n+\n+    @Override\n+    UPlainAttr getAttr();\n+\n+    @Override\n+    UPlainSchema getSchema();\n+\n+}"},{"sha":"bab1fde38fef22a0ebb3b7366ca2dfb03bf05d4d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UPlainAttrValue.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.user;\n+\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+\n+public interface UPlainAttrValue extends PlainAttrValue {\n+\n+    @Override\n+    UPlainAttr getAttr();\n+\n+}"},{"sha":"1ec236e80035a6a6f48801cdde1a40f53e456e24","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UPlainSchema.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.persistence.api.entity.user;\n \n-import org.apache.syncope.persistence.api.entity.NormAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n \n-public interface UNormAttrValue extends NormAttrValue {\n+public interface UPlainSchema extends PlainSchema {\n \n }","previous_filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UNormAttrValue.java"},{"sha":"78f6882377734601ca06782b56c8fdd3cffd4623","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UVirAttr.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -22,4 +22,10 @@\n \n public interface UVirAttr extends VirAttr {\n \n+    @Override\n+    User getOwner();\n+\n+    @Override\n+    UVirSchema getSchema();\n+\n }"},{"sha":"78575f7f4a8255a26144a7fb7f95d3f376e9674d","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/UVirSchema.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.api.entity.user;\n+\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+\n+public interface UVirSchema extends VirSchema {\n+\n+}"},{"sha":"6eece4d8bbeb122b51319be655117934c29e047a","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/entity/user/User.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.persistence.api.entity.membership.Membership;\n import org.apache.syncope.persistence.api.entity.role.Role;\n \n-public interface User extends Subject<UNormAttr, UDerAttr, UVirAttr> {\n+public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n     boolean addMembership(Membership membership);\n \n@@ -49,9 +49,9 @@ public interface User extends Subject<UNormAttr, UDerAttr, UVirAttr> {\n \n     Membership getMembership(Long syncopeRoleId);\n \n-    List<Membership> getMemberships();\n+    List<? extends Membership> getMemberships();\n \n-    Set<ExternalResource> getOwnResources();\n+    Set<? extends ExternalResource> getOwnResources();\n \n     String getPassword();\n \n@@ -95,8 +95,6 @@ public interface User extends Subject<UNormAttr, UDerAttr, UVirAttr> {\n \n     void setLastLoginDate(Date lastLoginDate);\n \n-    void setMemberships(List<Membership> memberships);\n-\n     void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n \n     void setSecurityAnswer(String securityAnswer);\n@@ -114,39 +112,39 @@ public interface User extends Subject<UNormAttr, UDerAttr, UVirAttr> {\n     boolean verifyPasswordHistory(String password, int size);\n \n     @Override\n-    boolean addNormAttr(UNormAttr attr);\n+    boolean addPlainAttr(UPlainAttr attr);\n \n     @Override\n-    boolean addDerAttr(UDerAttr attr);\n+    boolean removePlainAttr(UPlainAttr attr);\n \n     @Override\n-    boolean addVirAttr(UVirAttr attr);\n+    boolean addDerAttr(UDerAttr attr);\n \n     @Override\n-    UNormAttr getNormAttr(String normSchemaName);\n+    boolean removeDerAttr(UDerAttr derAttr);\n \n     @Override\n-    List<UNormAttr> getNormAttrs();\n+    boolean addVirAttr(UVirAttr attr);\n \n     @Override\n-    UDerAttr getDerAttr(String derSchemaName);\n+    boolean removeVirAttr(UVirAttr virAttr);\n \n     @Override\n-    List<UDerAttr> getDerAttrs();\n+    UPlainAttr getPlainAttr(String plainSchemaName);\n \n     @Override\n-    UVirAttr getVirAttr(String virSchemaName);\n+    List<? extends UPlainAttr> getPlainAttrs();\n \n     @Override\n-    List<UVirAttr> getVirAttrs();\n+    UDerAttr getDerAttr(String derSchemaName);\n \n     @Override\n-    boolean removeNormAttr(UNormAttr attr);\n+    List<? extends UDerAttr> getDerAttrs();\n \n     @Override\n-    boolean removeDerAttr(UDerAttr derAttr);\n+    UVirAttr getVirAttr(String virSchemaName);\n \n     @Override\n-    boolean removeVirAttr(UVirAttr virAttr);\n+    List<? extends UVirAttr> getVirAttrs();\n \n }"},{"sha":"17b6a92df78a8ec17c9cbcc06cb18de8d2177e1a","filename":"syncope620/server/persistence-jpa/pom.xml","status":"added","additions":224,"deletions":0,"changes":224,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fpom.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,224 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-server</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Server Persistence JPA</name>\n+  <description>Apache Syncope Server Persistence JPA</description>\n+  <groupId>org.apache.syncope.server</groupId>\n+  <artifactId>syncope-persistence-jpa</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <dependencies>    \n+    <dependency>\n+      <groupId>org.apache.geronimo.specs</groupId>\n+      <artifactId>geronimo-jpa_2.0_spec</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.el</groupId>\n+      <artifactId>javax.el-api</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.apache.openjpa</groupId>\n+      <artifactId>openjpa-jdbc</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.openjpa</groupId>\n+      <artifactId>openjpa-persistence-jdbc</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-dbcp2</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.hibernate</groupId>\n+      <artifactId>hibernate-validator</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-tx</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-jdbc</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-orm</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-codec</groupId>\n+      <artifactId>commons-codec</artifactId>\n+    </dependency>\n+            \n+    <dependency>\n+      <groupId>org.quartz-scheduler</groupId>\n+      <artifactId>quartz</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-utils</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-spring</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-security</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <version>${slf4j.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <persistenceXmlFile>${project.basedir}/src/main/resources/META-INF/spring-persistence.xml</persistenceXmlFile> \n+          <includes>org/apache/syncope/persistence/jpa/entity/**/*.class</includes>\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+          <connectionProperties>\n+            driverClassName=org.h2.Driver,\n+            url=jdbc:h2:mem:syncopedb\n+            username=sa,\n+            password=\n+          </connectionProperties>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>enhancer</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>enhance</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+\n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+    <testResources>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>true</filtering>        \n+      </testResource>\n+    </testResources>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>sqlgen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>sqlgenr</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>sql</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+        \n+    </profile>\n+  </profiles>\n+\n+</project>"},{"sha":"637f923f5a8920ee459c4943fe12e652eb719659","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/attrvalue/validation/AbstractValidator.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAbstractValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.attrvalue.validation;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractValidator implements Validator, Serializable {\n+\n+    private static final long serialVersionUID = -5439345166669502493L;\n+\n+    /*\n+     * Logger\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n+\n+    protected final PlainSchema schema;\n+\n+    public AbstractValidator(final PlainSchema schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    public void validate(String value, PlainAttrValue attrValue)\n+            throws ParsingValidationException, InvalidPlainAttrValueException {\n+\n+        attrValue.parseValue(schema, value);\n+        doValidate(attrValue);\n+    }\n+\n+    protected abstract void doValidate(PlainAttrValue attrValue) throws InvalidPlainAttrValueException;\n+}"},{"sha":"919da6d2efd9817bab8a9944bedd1fd9001a058a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/attrvalue/validation/AlwaysTrueValidator.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FAlwaysTrueValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.attrvalue.validation;\n+\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+\n+public class AlwaysTrueValidator extends AbstractValidator {\n+\n+    private static final long serialVersionUID = 872107345555773183L;\n+\n+    public AlwaysTrueValidator(final PlainSchema schema) {\n+        super(schema);\n+    }\n+\n+    @Override\n+    protected void doValidate(final PlainAttrValue attrValue) throws InvalidPlainAttrValueException {\n+        Boolean value = attrValue.getValue();\n+        if (!value) {\n+            throw new InvalidPlainAttrValueException(\"This attribute must be set to \\\"true\\\"\");\n+        }\n+    }\n+}"},{"sha":"a2b97314955a9f722c5250542e91400dcdf0638b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/attrvalue/validation/BasicValidator.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.attrvalue.validation;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+\n+public class BasicValidator extends AbstractValidator {\n+\n+    private static final long serialVersionUID = -2606728447694223607L;\n+\n+    public BasicValidator(final PlainSchema schema) {\n+        super(schema);\n+    }\n+\n+    @Override\n+    protected void doValidate(final PlainAttrValue attrValue) throws InvalidPlainAttrValueException {\n+        if (AttrSchemaType.Enum == schema.getType()) {\n+            final String[] enumeration = schema.getEnumerationValues().split(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n+            final String value = attrValue.getStringValue();\n+\n+            boolean found = false;\n+            for (int i = 0; i < enumeration.length && !found; i++) {\n+                if (enumeration[i].trim().equals(value)) {\n+                    found = true;\n+                }\n+            }\n+\n+            if (!found) {\n+                throw new InvalidPlainAttrValueException(\n+                        \"'\" + value + \"' is not one of: \" + schema.getEnumerationValues());\n+            }\n+        }\n+    }\n+}"},{"sha":"d334b65a024d838e322a5897bc2c19521d9f4754","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/attrvalue/validation/EmailAddressValidator.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FEmailAddressValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.attrvalue.validation;\n+\n+import java.util.regex.Matcher;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+\n+public class EmailAddressValidator extends AbstractValidator {\n+\n+    private static final long serialVersionUID = 792457177290331518L;\n+\n+    public EmailAddressValidator(final PlainSchema schema) {\n+        super(schema);\n+    }\n+\n+    @Override\n+    protected void doValidate(final PlainAttrValue attrValue) throws InvalidPlainAttrValueException {\n+        Matcher matcher = SyncopeConstants.EMAIL_PATTERN.matcher(attrValue.<CharSequence>getValue());\n+        if (!matcher.matches()) {\n+            throw new InvalidPlainAttrValueException(\"\\\"\" + attrValue.getValue() + \"\\\" is not a valid email address\");\n+        }\n+    }\n+}"},{"sha":"e3ad2d499e5483dd8bfbe1d24c5048227192db2a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/content/AbstractContentDealer.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FAbstractContentDealer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FAbstractContentDealer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FAbstractContentDealer.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.content;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.annotation.Resource;\n+import javax.sql.DataSource;\n+import org.apache.syncope.server.spring.ResourceWithFallbackLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+public abstract class AbstractContentDealer {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractContentDealer.class);\n+\n+    protected static final String ROOT_ELEMENT = \"dataset\";\n+\n+    @Resource(name = \"database.schema\")\n+    protected String dbSchema;\n+\n+    @Resource(name = \"indexesXML\")\n+    private ResourceWithFallbackLoader indexesXML;\n+\n+    @Resource(name = \"viewsXML\")\n+    private ResourceWithFallbackLoader viewsXML;\n+\n+    @Autowired\n+    protected DataSource dataSource;\n+\n+    protected void createIndexes() throws IOException {\n+        LOG.debug(\"Creating indexes\");\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        Properties indexes = PropertiesLoaderUtils.loadProperties(indexesXML.getResource());\n+        for (String idx : indexes.stringPropertyNames()) {\n+            LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n+\n+            try {\n+                jdbcTemplate.execute(indexes.get(idx).toString());\n+            } catch (DataAccessException e) {\n+                LOG.error(\"Could not create index \", e);\n+            }\n+        }\n+\n+        LOG.debug(\"Indexes created\");\n+    }\n+\n+    protected void createViews() throws IOException {\n+        LOG.debug(\"Creating views\");\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        Properties views = PropertiesLoaderUtils.loadProperties(viewsXML.getResource());\n+        for (String idx : views.stringPropertyNames()) {\n+            LOG.debug(\"Creating view {}\", views.get(idx).toString());\n+\n+            try {\n+                jdbcTemplate.execute(views.get(idx).toString().replaceAll(\"\\\\n\", \" \"));\n+            } catch (DataAccessException e) {\n+                LOG.error(\"Could not create view \", e);\n+            }\n+        }\n+\n+        LOG.debug(\"Views created\");\n+    }\n+}"},{"sha":"2b3bd4a064ec9aa232e1cb0630262ee4ca75a25f","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/content/ContentLoaderHandler.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.content;\n+\n+import org.apache.syncope.server.utils.DataFormat;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.text.ParseException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.ResultSetExtractor;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * SAX handler for generating SQL INSERT statements out of given XML file.\n+ */\n+class ContentLoaderHandler extends DefaultHandler {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ContentLoaderHandler.class);\n+\n+    private final DataSource dataSource;\n+\n+    private final String rootElement;\n+\n+    public ContentLoaderHandler(final DataSource dataSource, final String rootElement) {\n+        this.dataSource = dataSource;\n+        this.rootElement = rootElement;\n+    }\n+\n+    private Object[] getParameters(final String tableName, final Attributes attrs) {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        Map<String, Integer> colTypes = jdbcTemplate.query(\"SELECT * FROM \" + tableName,\n+                new ResultSetExtractor<Map<String, Integer>>() {\n+\n+                    @Override\n+                    public Map<String, Integer> extractData(final ResultSet rs) throws SQLException, DataAccessException {\n+                        Map<String, Integer> colTypes = new HashMap<String, Integer>();\n+                        for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {\n+                            colTypes.put(rs.getMetaData().getColumnName(i).toUpperCase(),\n+                                    rs.getMetaData().getColumnType(i));\n+                        }\n+                        return colTypes;\n+                    }\n+                });\n+\n+        Object[] parameters = new Object[attrs.getLength()];\n+        for (int i = 0; i < attrs.getLength(); i++) {\n+            Integer colType = colTypes.get(attrs.getQName(i).toUpperCase());\n+            if (colType == null) {\n+                LOG.warn(\"No column type found for {}\", attrs.getQName(i).toUpperCase());\n+                colType = Types.VARCHAR;\n+            }\n+\n+            switch (colType) {\n+                case Types.INTEGER:\n+                case Types.TINYINT:\n+                case Types.SMALLINT:\n+                    try {\n+                        parameters[i] = Integer.valueOf(attrs.getValue(i));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Integer '{}'\", attrs.getValue(i));\n+                        parameters[i] = attrs.getValue(i);\n+                    }\n+                    break;\n+\n+                case Types.NUMERIC:\n+                case Types.DECIMAL:\n+                case Types.BIGINT:\n+                    try {\n+                        parameters[i] = Long.valueOf(attrs.getValue(i));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Long '{}'\", attrs.getValue(i));\n+                        parameters[i] = attrs.getValue(i);\n+                    }\n+                    break;\n+\n+                case Types.DOUBLE:\n+                    try {\n+                        parameters[i] = Double.valueOf(attrs.getValue(i));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Double '{}'\", attrs.getValue(i));\n+                        parameters[i] = attrs.getValue(i);\n+                    }\n+                    break;\n+\n+                case Types.REAL:\n+                case Types.FLOAT:\n+                    try {\n+                        parameters[i] = Float.valueOf(attrs.getValue(i));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Float '{}'\", attrs.getValue(i));\n+                        parameters[i] = attrs.getValue(i);\n+                    }\n+                    break;\n+\n+                case Types.DATE:\n+                case Types.TIME:\n+                case Types.TIMESTAMP:\n+                    try {\n+                        parameters[i] = DataFormat.parseDate(attrs.getValue(i));\n+                    } catch (ParseException e) {\n+                        LOG.error(\"Unparsable Date '{}'\", attrs.getValue(i));\n+                        parameters[i] = attrs.getValue(i);\n+                    }\n+                    break;\n+\n+                case Types.BIT:\n+                case Types.BOOLEAN:\n+                    parameters[i] = \"1\".equals(attrs.getValue(i)) ? Boolean.TRUE : Boolean.FALSE;\n+                    break;\n+\n+                case Types.BINARY:\n+                case Types.VARBINARY:\n+                case Types.LONGVARBINARY:\n+                    try {\n+                        parameters[i] = Hex.decodeHex(attrs.getValue(i).toCharArray());\n+                    } catch (DecoderException | IllegalArgumentException e) {\n+                        parameters[i] = attrs.getValue(i);\n+                    }\n+                    break;\n+\n+                case Types.BLOB:\n+                    try {\n+                        parameters[i] = Hex.decodeHex(attrs.getValue(i).toCharArray());\n+                    } catch (DecoderException | IllegalArgumentException e) {\n+                        LOG.warn(\"Error decoding hex string to specify a blob parameter\", e);\n+                        parameters[i] = attrs.getValue(i);\n+                    } catch (Exception e) {\n+                        LOG.warn(\"Error creating a new blob parameter\", e);\n+                    }\n+                    break;\n+\n+                default:\n+                    parameters[i] = attrs.getValue(i);\n+            }\n+        }\n+\n+        return parameters;\n+    }\n+\n+    @Override\n+    public void startElement(final String uri, final String localName, final String qName, final Attributes atts)\n+            throws SAXException {\n+\n+        // skip root element\n+        if (rootElement.equals(qName)) {\n+            return;\n+        }\n+\n+        StringBuilder query = new StringBuilder(\"INSERT INTO \").append(qName).append('(');\n+\n+        StringBuilder values = new StringBuilder();\n+\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            query.append(atts.getQName(i));\n+            values.append('?');\n+            if (i < atts.getLength() - 1) {\n+                query.append(',');\n+                values.append(',');\n+            }\n+        }\n+        query.append(\") VALUES (\").append(values).append(')');\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        try {\n+            jdbcTemplate.update(query.toString(), getParameters(qName, atts));\n+        } catch (DataAccessException e) {\n+            LOG.error(\"While trying to perform {}\", query, e);\n+        }\n+    }\n+}"},{"sha":"e222501a81224e15cb11c0e3d2d7c03a778145d4","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/content/XMLContentLoader.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.content;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.annotation.Resource;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.persistence.api.content.ContentLoader;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPAConf;\n+import org.apache.syncope.server.spring.ResourceWithFallbackLoader;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * Initialize Database with default content if no data is present already.\n+ */\n+@Component\n+public class XMLContentLoader extends AbstractContentDealer implements ContentLoader {\n+\n+    @Resource(name = \"contentXML\")\n+    private ResourceWithFallbackLoader contentXML;\n+\n+    @Transactional\n+    @Override\n+    public void load() {\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+\n+        boolean existingData;\n+        try {\n+            existingData = jdbcTemplate.queryForObject(\"SELECT COUNT(0) FROM \" + JPAConf.TABLE, Integer.class) > 0;\n+        } catch (DataAccessException e) {\n+            LOG.error(\"Could not access to table \" + JPAConf.TABLE, e);\n+            existingData = true;\n+        }\n+\n+        if (existingData) {\n+            LOG.info(\"Data found in the database, leaving untouched\");\n+        } else {\n+            LOG.info(\"Empty database found, loading default content\");\n+\n+            try {\n+                loadDefaultContent();\n+            } catch (Exception e) {\n+                LOG.error(\"While loading default content\", e);\n+            }\n+            try {\n+                createIndexes();\n+                createViews();\n+            } catch (IOException e) {\n+                LOG.error(\"While creating indexes and views\", e);\n+            }\n+        }\n+    }\n+\n+    private void loadDefaultContent() throws Exception {\n+        SAXParserFactory factory = SAXParserFactory.newInstance();\n+        InputStream in = null;\n+        try {\n+            in = contentXML.getResource().getInputStream();\n+\n+            SAXParser parser = factory.newSAXParser();\n+            parser.parse(in, new ContentLoaderHandler(dataSource, ROOT_ELEMENT));\n+            LOG.debug(\"Default content successfully loaded\");\n+        } finally {\n+            IOUtils.closeQuietly(in);\n+        }\n+    }\n+}"},{"sha":"b7b1f5d15525ac9ab9cdf3d4a36dcaa383723b16","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/AbstractDAO.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.CacheRetrieveMode;\n+import javax.persistence.CacheStoreMode;\n+import javax.persistence.EntityManager;\n+import javax.persistence.PersistenceContext;\n+import javax.persistence.PersistenceContextType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.persistence.api.dao.DAO;\n+import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.persistence.api.entity.Entity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.util.ReflectionUtils;\n+\n+@Configurable\n+public abstract class AbstractDAO<E extends Entity<KEY>, KEY> implements DAO<E, KEY> {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);\n+\n+    private static final String CACHE_STORE_MODE = \"javax.persistence.cache.storeMode\";\n+\n+    private static final String CACHE_RETRIEVE_MODE = \"javax.persistence.cache.retrieveMode\";\n+\n+    @Value(\"#{entityManager}\")\n+    @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n+    protected EntityManager entityManager;\n+\n+    protected CacheRetrieveMode getCacheRetrieveMode() {\n+        return entityManager.getProperties().containsKey(CACHE_RETRIEVE_MODE)\n+                ? (CacheRetrieveMode) entityManager.getProperties().get(CACHE_RETRIEVE_MODE)\n+                : CacheRetrieveMode.BYPASS;\n+    }\n+\n+    protected void setCacheRetrieveMode(final CacheRetrieveMode retrieveMode) {\n+        if (retrieveMode != null) {\n+            entityManager.getProperties().put(CACHE_RETRIEVE_MODE, retrieveMode);\n+        }\n+    }\n+\n+    protected CacheStoreMode getCacheStoreMode() {\n+        return entityManager.getProperties().containsKey(CACHE_STORE_MODE)\n+                ? (CacheStoreMode) entityManager.getProperties().get(CACHE_STORE_MODE)\n+                : CacheStoreMode.BYPASS;\n+    }\n+\n+    protected void setCacheStoreMode(final CacheStoreMode storeMode) {\n+        if (storeMode != null) {\n+            entityManager.getProperties().put(CACHE_STORE_MODE, storeMode);\n+        }\n+    }\n+\n+    protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass, final String prefix,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        StringBuilder statement = new StringBuilder();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            String field = clause.getField().trim();\n+            if (ReflectionUtils.findField(beanClass, field) != null) {\n+                if (StringUtils.isNotBlank(prefix)) {\n+                    statement.append(prefix).append('.');\n+                }\n+                statement.append(field).append(' ').append(clause.getDirection().name());\n+            }\n+        }\n+\n+        if (statement.length() > 0) {\n+            statement.insert(0, \"ORDER BY \");\n+        }\n+        return statement.toString();\n+    }\n+\n+    @Override\n+    public void refresh(final E entity) {\n+        entityManager.refresh(entity);\n+    }\n+\n+    @Override\n+    public void detach(final E entity) {\n+        entityManager.detach(entity);\n+    }\n+\n+    @Override\n+    public void flush() {\n+        entityManager.flush();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        entityManager.clear();\n+    }\n+}"},{"sha":"53b2cc418fd495c2428237d6a7375470d2ee57af","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/AbstractSubjectDAO.java","status":"added","additions":349,"deletions":0,"changes":349,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,349 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import static org.apache.syncope.common.lib.types.AttrSchemaType.Double;\n+\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n+import org.apache.commons.jexl2.parser.Parser;\n+import org.apache.commons.jexl2.parser.ParserConstants;\n+import org.apache.commons.jexl2.parser.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.SubjectDAO;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+abstract class AbstractSubjectDAO<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n+        extends AbstractDAO<Subject<P, D, V>, Long> implements SubjectDAO<P, D, V> {\n+\n+    @Autowired\n+    protected PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    protected DerSchemaDAO derSchemaDAO;\n+\n+    /**\n+     * Split an attribute value recurring on provided literals/tokens.\n+     *\n+     * @param attrValue value to be split\n+     * @param literals literals/tokens\n+     * @return split value\n+     */\n+    private List<String> split(final String attrValue, final List<String> literals) {\n+        final List<String> attrValues = new ArrayList<>();\n+\n+        if (literals.isEmpty()) {\n+            attrValues.add(attrValue);\n+        } else {\n+            for (String token : attrValue.split(Pattern.quote(literals.get(0)))) {\n+                attrValues.addAll(split(token, literals.subList(1, literals.size())));\n+            }\n+        }\n+\n+        return attrValues;\n+    }\n+\n+    /**\n+     * Generate one where clause for each different attribute schema into the derived schema expression provided.\n+     *\n+     * @param expression derived schema expression\n+     * @param value derived attribute value\n+     * @param attrUtil USER / ROLE\n+     * @return where clauses to use to build the query\n+     */\n+    private Set<String> getWhereClause(final String expression, final String value, final AttributableUtil attrUtil) {\n+        final Parser parser = new Parser(new StringReader(expression));\n+\n+        // Schema names\n+        final List<String> identifiers = new ArrayList<String>();\n+\n+        // Literals\n+        final List<String> literals = new ArrayList<String>();\n+\n+        // Get schema names and literals\n+        Token token;\n+        while ((token = parser.getNextToken()) != null && StringUtils.isNotBlank(token.toString())) {\n+            if (token.kind == ParserConstants.STRING_LITERAL) {\n+                literals.add(token.toString().substring(1, token.toString().length() - 1));\n+            }\n+\n+            if (token.kind == ParserConstants.IDENTIFIER) {\n+                identifiers.add(token.toString());\n+            }\n+        }\n+\n+        // Sort literals in order to process later literals included into others\n+        Collections.sort(literals, new Comparator<String>() {\n+\n+            @Override\n+            public int compare(final String t, final String t1) {\n+                if (t == null && t1 == null) {\n+                    return 0;\n+                } else if (t != null && t1 == null) {\n+                    return -1;\n+                } else if (t == null && t1 != null) {\n+                    return 1;\n+                } else if (t.length() == t1.length()) {\n+                    return 0;\n+                } else if (t.length() > t1.length()) {\n+                    return -1;\n+                } else {\n+                    return 1;\n+                }\n+            }\n+        });\n+\n+        // Split value on provided literals\n+        final List<String> attrValues = split(value, literals);\n+\n+        if (attrValues.size() != identifiers.size()) {\n+            LOG.error(\"Ambiguous jexl expression resolution.\");\n+            throw new IllegalArgumentException(\"literals and values have different size\");\n+        }\n+\n+        // clauses to be used with INTERSECTed queries\n+        final Set<String> clauses = new HashSet<String>();\n+\n+        // builder to build the clauses\n+        final StringBuilder bld = new StringBuilder();\n+\n+        // Contains used identifiers in order to avoid replications\n+        final Set<String> used = new HashSet<String>();\n+\n+        // Create several clauses: one for eanch identifiers\n+        for (int i = 0; i < identifiers.size(); i++) {\n+            if (!used.contains(identifiers.get(i))) {\n+\n+                // verify schema existence and get schema type\n+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i), attrUtil.plainSchemaClass());\n+                if (schema == null) {\n+                    LOG.error(\"Invalid schema name '{}'\", identifiers.get(i));\n+                    throw new IllegalArgumentException(\"Invalid schema name \" + identifiers.get(i));\n+                }\n+\n+                // clear builder\n+                bld.delete(0, bld.length());\n+\n+                bld.append(\"(\");\n+\n+                // set schema name\n+                bld.append(\"s.name = '\").append(identifiers.get(i)).append(\"'\");\n+\n+                bld.append(\" AND \");\n+\n+                bld.append(\"s.name = a.schema_name\").append(\" AND \");\n+\n+                bld.append(\"a.id = v.attribute_id\");\n+\n+                bld.append(\" AND \");\n+\n+                // use a value clause different for eanch different schema type\n+                switch (schema.getType()) {\n+                    case Boolean:\n+                        bld.append(\"v.booleanValue = '\").append(attrValues.get(i)).append(\"'\");\n+                        break;\n+                    case Long:\n+                        bld.append(\"v.longValue = \").append(attrValues.get(i));\n+                        break;\n+                    case Double:\n+                        bld.append(\"v.doubleValue = \").append(attrValues.get(i));\n+                        break;\n+                    case Date:\n+                        bld.append(\"v.dateValue = '\").append(attrValues.get(i)).append(\"'\");\n+                        break;\n+                    default:\n+                        bld.append(\"v.stringValue = '\").append(attrValues.get(i)).append(\"'\");\n+                }\n+\n+                bld.append(\")\");\n+\n+                used.add(identifiers.get(i));\n+\n+                clauses.add(bld.toString());\n+            }\n+        }\n+\n+        LOG.debug(\"Generated where clauses {}\", clauses);\n+\n+        return clauses;\n+    }\n+\n+    protected abstract Subject<P, D, V> findInternal(Long key);\n+\n+    private Query findByAttrValueQuery(final String entityName) {\n+        return entityManager.createQuery(\"SELECT e FROM \" + entityName + \" e\"\n+                + \" WHERE e.attribute.schema.name = :schemaName AND (e.stringValue IS NOT NULL\"\n+                + \" AND e.stringValue = :stringValue)\"\n+                + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n+                + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n+                + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n+                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue)\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<? extends Subject<P, D, V>> findByAttrValue(\n+            final String schemaName, final PlainAttrValue attrValue, final AttributableUtil attrUtil) {\n+\n+        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtil.plainSchemaClass());\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return Collections.<Subject<P, D, V>>emptyList();\n+        }\n+\n+        final String entityName = schema.isUniqueConstraint()\n+                ? attrUtil.plainAttrUniqueValueClass().getName()\n+                : attrUtil.plainAttrValueClass().getName();\n+\n+        Query query = findByAttrValueQuery(entityName);\n+\n+        query.setParameter(\"schemaName\", schemaName);\n+        query.setParameter(\"stringValue\", attrValue.getStringValue());\n+        query.setParameter(\"booleanValue\", attrValue.getBooleanValue() == null\n+                ? null\n+                : ((AbstractPlainAttrValue) attrValue).getBooleanAsInteger(attrValue.getBooleanValue()));\n+        if (attrValue.getDateValue() == null) {\n+            query.setParameter(\"dateValue\", null);\n+        } else {\n+            query.setParameter(\"dateValue\", attrValue.getDateValue(), TemporalType.TIMESTAMP);\n+        }\n+        query.setParameter(\"longValue\", attrValue.getLongValue());\n+        query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n+\n+        List<Subject<P, D, V>> result = new ArrayList<>();\n+        for (PlainAttrValue value : (List<PlainAttrValue>) query.getResultList()) {\n+            Subject<P, D, V> subject = (Subject<P, D, V>) value.getAttr().getOwner();\n+            if (!result.contains(subject)) {\n+                result.add(subject);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Subject<P, D, V> findByAttrUniqueValue(\n+            final String schemaName, final PlainAttrValue attrUniqueValue, final AttributableUtil attrUtil) {\n+\n+        PlainSchema schema = plainSchemaDAO.find(schemaName, attrUtil.plainSchemaClass());\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return null;\n+        }\n+        if (!schema.isUniqueConstraint()) {\n+            LOG.error(\"This schema has not unique constraint: '{}'\", schemaName);\n+            return null;\n+        }\n+\n+        List<? extends Subject<P, D, V>> result = findByAttrValue(schemaName, attrUniqueValue, attrUtil);\n+        return result.isEmpty()\n+                ? null\n+                : result.iterator().next();\n+    }\n+\n+    /**\n+     * Find users / roles by derived attribute value. This method could fail if one or more string literals contained\n+     * into the derived attribute value provided derive from identifier (schema name) replacement. When you are going to\n+     * specify a derived attribute expression you must be quite sure that string literals used to build the expression\n+     * cannot be found into the attribute values used to replace attribute schema names used as identifiers.\n+     *\n+     * @param schemaName derived schema name\n+     * @param value derived attribute value\n+     * @param attrUtil AttributableUtil\n+     * @return list of users / roles\n+     */\n+    @Override\n+    public List<? extends Subject<P, D, V>> findByDerAttrValue(\n+            final String schemaName, final String value, final AttributableUtil attrUtil) {\n+\n+        DerSchema schema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n+        if (schema == null) {\n+            LOG.error(\"Invalid schema name '{}'\", schemaName);\n+            return Collections.<Subject<P, D, V>>emptyList();\n+        }\n+\n+        // query string\n+        final StringBuilder querystring = new StringBuilder();\n+\n+        boolean subquery = false;\n+        for (String clause : getWhereClause(schema.getExpression(), value, attrUtil)) {\n+            if (querystring.length() > 0) {\n+                subquery = true;\n+                querystring.append(\" AND a.owner_id IN ( \");\n+            }\n+\n+            querystring.append(\"SELECT a.owner_id \").\n+                    append(\"FROM \").append(attrUtil.plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n+                    append(attrUtil.plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n+                    append(attrUtil.plainSchemaClass().getSimpleName().substring(3)).append(\" s \").\n+                    append(\"WHERE \").append(clause);\n+\n+            if (subquery) {\n+                querystring.append(')');\n+            }\n+        }\n+\n+        LOG.debug(\"Execute query {}\", querystring);\n+\n+        final Query query = entityManager.createNativeQuery(querystring.toString());\n+\n+        final List<Subject<P, D, V>> result = new ArrayList<>();\n+        for (Object userId : query.getResultList()) {\n+            Subject<P, D, V> subject = findInternal(Long.parseLong(userId.toString()));\n+            if (!result.contains(subject)) {\n+                result.add(subject);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<? extends Subject<P, D, V>> findByResource(\n+            final ExternalResource resource, final AttributableUtil attrUtil) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + attrUtil.attributableClass().getSimpleName() + \" e \"\n+                + \"WHERE :resource MEMBER OF e.resources\");\n+        query.setParameter(\"resource\", resource);\n+\n+        return query.getResultList();\n+    }\n+}"},{"sha":"eb289b1e6b3b4ea1a161ef4d79985cdd025e7243","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAAttrTemplateDAO.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrTemplateDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrTemplateDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAAttrTemplateDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.apache.syncope.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.persistence.api.entity.Schema;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttrTemplate;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.ReflectionUtils;\n+\n+@Repository\n+public class JPAAttrTemplateDAO<S extends Schema>\n+        extends AbstractDAO<AttrTemplate<S>, Long> implements AttrTemplateDAO<S> {\n+\n+    private <T extends AttrTemplate<S>> Class<? extends AbstractAttrTemplate<? extends Schema>> getJPAEntityReference(\n+            final Class<T> reference) {\n+\n+        return MPlainAttrTemplate.class.isAssignableFrom(reference)\n+                ? JPAMPlainAttrTemplate.class\n+                : MDerAttrTemplate.class.isAssignableFrom(reference)\n+                        ? JPAMDerAttrTemplate.class\n+                        : MVirAttrTemplate.class.isAssignableFrom(reference)\n+                                ? JPAMVirAttrTemplate.class\n+                                : RPlainAttrTemplate.class.isAssignableFrom(reference)\n+                                        ? JPARPlainAttrTemplate.class\n+                                        : RDerAttrTemplate.class.isAssignableFrom(reference)\n+                                                ? JPARDerAttrTemplate.class\n+                                                : RVirAttrTemplate.class.isAssignableFrom(reference)\n+                                                        ? JPARVirAttrTemplate.class\n+                                                        : null;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<S>> T find(final Long key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AttrTemplate<S>> List<Number> findBySchemaName(\n+            final String schemaName, final Class<T> reference) {\n+\n+        Query query = null;\n+        try {\n+            query = entityManager.createNativeQuery(\"SELECT id FROM \"\n+                    + ReflectionUtils.findField(getJPAEntityReference(reference), \"TABLE\").get(null).toString()\n+                    + \" WHERE schema_name=?1\");\n+            query.setParameter(1, schemaName);\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception\", e);\n+        }\n+\n+        return query == null ? Collections.<Number>emptyList() : query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<S>> void delete(final Long key, final Class<T> reference) {\n+        T attrTemplate = find(key, reference);\n+        if (attrTemplate == null) {\n+            return;\n+        }\n+\n+        delete(attrTemplate);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AttrTemplate<S>> void delete(final T attrTemplate) {\n+        if (attrTemplate.getOwner() != null) {\n+            attrTemplate.getOwner().getAttrTemplates(attrTemplate.getClass()).remove(attrTemplate);\n+        }\n+\n+        entityManager.remove(attrTemplate);\n+    }\n+}"},{"sha":"d38b1cd50ec2cc774cb2b2b83379a9c82d1a81e2","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAConfDAO.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n+import org.apache.syncope.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPAConf;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAConfDAO extends AbstractDAO<Conf, Long> implements ConfDAO {\n+\n+    @Autowired\n+    private PlainSchemaDAO schemaDAO;\n+\n+    @Autowired\n+    private PlainAttrDAO attrDAO;\n+\n+    @Override\n+    public Conf get() {\n+        Conf instance = entityManager.find(JPAConf.class, 1L);\n+        if (instance == null) {\n+            instance = new JPAConf();\n+            instance.setKey(1L);\n+\n+            instance = entityManager.merge(instance);\n+        }\n+\n+        return instance;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public CPlainAttr find(final String key) {\n+        return get().getPlainAttr(key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public CPlainAttr find(final String key, final String defaultValue) {\n+        CPlainAttr result = find(key);\n+        if (result == null) {\n+            result = new JPACPlainAttr();\n+            result.setSchema(schemaDAO.find(key, CPlainSchema.class));\n+\n+            result.addValue(defaultValue, JPAAttributableUtil.getInstance(AttributableType.CONFIGURATION));\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Conf save(final CPlainAttr attr) {\n+        Conf instance = get();\n+\n+        CPlainAttr old = instance.getPlainAttr(attr.getSchema().getKey());\n+        if (old != null && (!attr.getSchema().isUniqueConstraint()\n+                || (!attr.getUniqueValue().getStringValue().equals(old.getUniqueValue().getStringValue())))) {\n+\n+            instance.removePlainAttr(old);\n+            attrDAO.delete(old.getKey(), CPlainAttr.class);\n+        }\n+\n+        instance.addPlainAttr(attr);\n+        attr.setOwner(instance);\n+\n+        return entityManager.merge(instance);\n+    }\n+\n+    @Override\n+    public Conf delete(final String key) {\n+        Conf instance = get();\n+        CPlainAttr attr = instance.getPlainAttr(key);\n+        if (attr != null) {\n+            instance.removePlainAttr(attr);\n+            instance = entityManager.merge(instance);\n+        }\n+\n+        return instance;\n+    }\n+}"},{"sha":"e1c547747382f41fbb1a0c727a2d5195c8333f04","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.jpa.entity.JPAConnInstance;\n+import org.apache.syncope.provisioning.api.ConnectorRegistry;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAConnInstanceDAO extends AbstractDAO<ConnInstance, Long> implements ConnInstanceDAO {\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ConnectorRegistry connRegistry;\n+\n+    @Override\n+    public ConnInstance find(final Long key) {\n+        return entityManager.find(JPAConnInstance.class, key);\n+    }\n+\n+    @Override\n+    public List<ConnInstance> findAll() {\n+        TypedQuery<ConnInstance> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAConnInstance.class.getSimpleName() + \" e\", ConnInstance.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public ConnInstance save(final ConnInstance connector) {\n+        final ConnInstance merged = entityManager.merge(connector);\n+\n+        for (ExternalResource resource : merged.getResources()) {\n+            try {\n+                connRegistry.registerConnector(resource);\n+            } catch (NotFoundException e) {\n+                LOG.error(\"While registering connector for resource\", e);\n+            }\n+        }\n+\n+        return merged;\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        ConnInstance connInstance = find(key);\n+        if (connInstance == null) {\n+            return;\n+        }\n+\n+        Set<String> resourceNames = new HashSet<>(connInstance.getResources().size());\n+        for (ExternalResource resource : connInstance.getResources()) {\n+            resourceNames.add(resource.getKey());\n+        }\n+        for (String resourceName : resourceNames) {\n+            resourceDAO.delete(resourceName);\n+        }\n+\n+        entityManager.remove(connInstance);\n+\n+        connRegistry.unregisterConnector(key.toString());\n+    }\n+}"},{"sha":"ee452f84fdadb5aa33fc32df15ed6beb2f8ca303","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPADerAttrDAO.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.DerAttrDAO;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttr;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerAttr;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPADerAttrDAO extends AbstractDAO<DerAttr, Long> implements DerAttrDAO {\n+\n+    public <T extends DerAttr> Class<? extends AbstractDerAttr> getJPAEntityReference(\n+            final Class<T> reference) {\n+\n+        return RDerAttr.class.isAssignableFrom(reference)\n+                ? JPARDerAttr.class\n+                : MDerAttr.class.isAssignableFrom(reference)\n+                        ? JPAMDerAttr.class\n+                        : UDerAttr.class.isAssignableFrom(reference)\n+                                ? JPAUDerAttr.class\n+                                : null;\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> T find(final Long key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> List<T> findAll(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> T save(final T derAttr) {\n+        return entityManager.merge(derAttr);\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> void delete(final Long key, final Class<T> reference) {\n+        T derAttr = find(key, reference);\n+        if (derAttr == null) {\n+            return;\n+        }\n+\n+        delete(derAttr);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends DerAttr> void delete(final T derAttr) {\n+        if (derAttr.getOwner() != null) {\n+            ((Subject<?, T, ?>) derAttr.getOwner()).removeDerAttr(derAttr);\n+        }\n+\n+        entityManager.remove(derAttr);\n+    }\n+}"},{"sha":"9a239fb2abd62f5d2e2244cb6d3638ccb4de4acb","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPADerSchemaDAO.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.persistence.api.dao.DerAttrDAO;\n+import org.apache.syncope.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MDerSchema;\n+import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPADerSchemaDAO extends AbstractDAO<DerSchema, String> implements DerSchemaDAO {\n+\n+    @Autowired\n+    private DerAttrDAO derAttrDAO;\n+\n+    @Autowired\n+    private AttrTemplateDAO<DerSchema> attrTemplateDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    private <T extends DerSchema> Class<? extends AbstractDerSchema> getJPAEntityReference(final Class<T> reference) {\n+        return RDerSchema.class.isAssignableFrom(reference)\n+                ? JPARDerSchema.class\n+                : MDerSchema.class.isAssignableFrom(reference)\n+                        ? JPAMDerSchema.class\n+                        : UDerSchema.class.isAssignableFrom(reference)\n+                                ? JPAUDerSchema.class\n+                                : null;\n+    }\n+\n+    @Override\n+    public <T extends DerSchema> T find(final String key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends DerSchema> List<T> findAll(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> List<T> findAttrs(final DerSchema schema, final Class<T> reference) {\n+        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(((JPADerAttrDAO) derAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n+                append(\" e WHERE e.\");\n+        if (UDerAttr.class.isAssignableFrom(reference)) {\n+            queryString.append(\"derSchema\");\n+        } else {\n+            queryString.append(\"template.schema\");\n+        }\n+        queryString.append(\"=:schema\");\n+\n+        TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n+        query.setParameter(\"schema\", schema);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends DerSchema> T save(final T derSchema) {\n+        return entityManager.merge(derSchema);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void delete(final String key, final AttributableUtil attributableUtil) {\n+        final DerSchema schema = find(key, attributableUtil.derSchemaClass());\n+        if (schema == null) {\n+            return;\n+        }\n+\n+        final Set<Long> attrIds = new HashSet<>();\n+        for (DerAttr attr : findAttrs(schema, attributableUtil.derAttrClass())) {\n+            attrIds.add(attr.getKey());\n+        }\n+        for (Long attrId : attrIds) {\n+            derAttrDAO.delete(attrId, attributableUtil.derAttrClass());\n+        }\n+\n+        if (attributableUtil.getType() != AttributableType.USER) {\n+            for (Iterator<Number> it = attrTemplateDAO.\n+                    findBySchemaName(schema.getKey(), attributableUtil.derAttrTemplateClass()).iterator();\n+                    it.hasNext();) {\n+\n+                attrTemplateDAO.delete(it.next().longValue(), attributableUtil.derAttrTemplateClass());\n+            }\n+        }\n+\n+        resourceDAO.deleteMapping(key, attributableUtil.derIntMappingType(), UMappingItem.class);\n+\n+        entityManager.remove(schema);\n+    }\n+}"},{"sha":"cb7b90e70fe48cb4faaeb5a73791f026561a073d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAEntitlementDAO.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.RoleEntitlementUtil;\n+import org.apache.syncope.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.entity.Entitlement;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.JPAEntitlement;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAEntitlementDAO extends AbstractDAO<Entitlement, String> implements EntitlementDAO {\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Override\n+    public Entitlement find(final String name) {\n+        return entityManager.find(JPAEntitlement.class, name);\n+    }\n+\n+    @Override\n+    public List<Entitlement> findAll() {\n+        TypedQuery<Entitlement> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAEntitlement.class.getSimpleName() + \" e\", Entitlement.class);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Entitlement save(final Entitlement entitlement) {\n+        return entityManager.merge(entitlement);\n+    }\n+\n+    @Override\n+    public Entitlement saveRoleEntitlement(final Role role) {\n+        Entitlement roleEnt = new JPAEntitlement();\n+        roleEnt.setKey(RoleEntitlementUtil.getEntitlementNameFromRoleId(role.getKey()));\n+        roleEnt.setDescription(\"Entitlement for managing role \" + role.getKey());\n+\n+        return save(roleEnt);\n+    }\n+\n+    @Override\n+    public void delete(final String name) {\n+        Entitlement entitlement = find(name);\n+        if (entitlement == null) {\n+            return;\n+        }\n+\n+        delete(entitlement);\n+    }\n+\n+    @Override\n+    public void delete(final Entitlement entitlement) {\n+        if (entitlement == null) {\n+            return;\n+        }\n+\n+        for (Role role : roleDAO.findByEntitlement(entitlement)) {\n+            role.removeEntitlement(entitlement);\n+            roleDAO.save(role);\n+        }\n+\n+        entityManager.remove(entitlement);\n+    }\n+}"},{"sha":"c689ae869f4d33f6c91162adbe61a1b1e62d9081","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"added","additions":254,"deletions":0,"changes":254,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.Mapping;\n+import org.apache.syncope.persistence.api.entity.MappingItem;\n+import org.apache.syncope.persistence.api.entity.Policy;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.persistence.api.entity.task.SyncTask;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.AbstractMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMappingItem;\n+import org.apache.syncope.provisioning.api.ConnectorRegistry;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String> implements ExternalResourceDAO {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private ConnectorRegistry connRegistry;\n+\n+    @Override\n+    public ExternalResource find(final String name) {\n+        TypedQuery<ExternalResource> query = entityManager.createQuery(\"SELECT e FROM \"\n+                + JPAExternalResource.class.getSimpleName() + \" e WHERE e.name = :name\", ExternalResource.class);\n+        query.setParameter(\"name\", name);\n+\n+        ExternalResource result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No resource found with name {}\", name, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private StringBuilder getByPolicyQuery(final PolicyType type) {\n+        StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAExternalResource.class.getSimpleName()).\n+                append(\" e WHERE e.\");\n+        switch (type) {\n+            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n+                query.append(\"accountPolicy\");\n+                break;\n+\n+            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n+                query.append(\"passwordPolicy\");\n+                break;\n+\n+            case SYNC:\n+            case GLOBAL_SYNC:\n+                query.append(\"syncPolicy\");\n+                break;\n+\n+            default:\n+                break;\n+        }\n+        return query;\n+    }\n+\n+    @Override\n+    public List<ExternalResource> findByPolicy(final Policy policy) {\n+        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+                getByPolicyQuery(policy.getType()).append(\" = :policy\").toString(), ExternalResource.class);\n+        query.setParameter(\"policy\", policy);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<ExternalResource> findWithoutPolicy(final PolicyType type) {\n+        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+                getByPolicyQuery(type).append(\" IS NULL\").toString(), ExternalResource.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<ExternalResource> findAll() {\n+        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+                \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e\", ExternalResource.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<ExternalResource> findAllByPriority() {\n+        TypedQuery<ExternalResource> query = entityManager.createQuery(\n+                \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e ORDER BY e.propagationPriority\",\n+                ExternalResource.class);\n+        return query.getResultList();\n+    }\n+\n+    /**\n+     * This method has an explicit Transactional annotation because it is called by SyncJob.\n+     *\n+     * @see org.apache.syncope.core.sync.impl.SyncJob\n+     *\n+     * @param resource entity to be merged\n+     * @return the same entity, updated\n+     */\n+    @Override\n+    @Transactional(rollbackFor = { Throwable.class })\n+    public ExternalResource save(final ExternalResource resource) {\n+        ExternalResource merged = entityManager.merge(resource);\n+        try {\n+            connRegistry.registerConnector(merged);\n+        } catch (NotFoundException e) {\n+            LOG.error(\"While registering connector for resource\", e);\n+        }\n+        return merged;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends MappingItem> void deleteMapping(\n+            final String intAttrName, final IntMappingType intMappingType, final Class<T> reference) {\n+\n+        if (IntMappingType.getEmbedded().contains(intMappingType)) {\n+            return;\n+        }\n+\n+        Class<? extends AbstractMappingItem> jpaRef = reference.equals(UMappingItem.class)\n+                ? JPAUMappingItem.class\n+                : JPARMappingItem.class;\n+\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT m FROM \" + jpaRef.getSimpleName()\n+                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\", reference);\n+        query.setParameter(\"intAttrName\", intAttrName);\n+        query.setParameter(\"intMappingType\", intMappingType);\n+\n+        Set<Long> itemIds = new HashSet<>();\n+        for (T item : query.getResultList()) {\n+            itemIds.add(item.getKey());\n+        }\n+        Class<?> mappingRef = null;\n+        for (Long itemId : itemIds) {\n+            T item = (T) entityManager.find(jpaRef, itemId);\n+            if (item != null) {\n+                mappingRef = item.getMapping().getClass();\n+\n+                ((Mapping<T>) item.getMapping()).removeItem(item);\n+                item.setMapping(null);\n+\n+                entityManager.remove(item);\n+            }\n+        }\n+\n+        // Make empty query cache for *MappingItem and related *Mapping\n+        entityManager.getEntityManagerFactory().getCache().evict(jpaRef);\n+        if (mappingRef != null) {\n+            entityManager.getEntityManagerFactory().getCache().evict(mappingRef);\n+        }\n+    }\n+\n+    @Override\n+    public void delete(final String name) {\n+        ExternalResource resource = find(name);\n+        if (resource == null) {\n+            return;\n+        }\n+\n+        taskDAO.deleteAll(resource, TaskType.PROPAGATION);\n+        taskDAO.deleteAll(resource, TaskType.SYNCHRONIZATION);\n+        taskDAO.deleteAll(resource, TaskType.PUSH);\n+\n+        for (User user : userDAO.findByResource(resource)) {\n+            user.removeResource(resource);\n+        }\n+        for (Role role : roleDAO.findByResource(resource)) {\n+            role.removeResource(resource);\n+        }\n+        for (AccountPolicy policy : policyDAO.findByResource(resource)) {\n+            policy.removeResource(resource);\n+        }\n+\n+        if (resource.getConnector() != null && resource.getConnector().getResources() != null\n+                && !resource.getConnector().getResources().isEmpty()) {\n+\n+            resource.getConnector().getResources().remove(resource);\n+        }\n+        resource.setConnector(null);\n+\n+        if (resource.getUmapping() != null) {\n+            for (MappingItem item : resource.getUmapping().getItems()) {\n+                item.setMapping(null);\n+            }\n+            resource.getUmapping().getItems().clear();\n+            resource.getUmapping().setResource(null);\n+            resource.setUmapping(null);\n+        }\n+        if (resource.getRmapping() != null) {\n+            for (MappingItem item : resource.getRmapping().getItems()) {\n+                item.setMapping(null);\n+            }\n+            resource.getRmapping().getItems().clear();\n+            resource.getRmapping().setResource(null);\n+            resource.setRmapping(null);\n+        }\n+\n+        entityManager.remove(resource);\n+    }\n+}"},{"sha":"b615fdc6a66cf5bd41003c06238e3d82e63c0456","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPALoggerDAO.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.persistence.api.dao.LoggerDAO;\n+import org.apache.syncope.persistence.api.entity.Logger;\n+import org.apache.syncope.persistence.jpa.entity.JPALogger;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPALoggerDAO extends AbstractDAO<Logger, String> implements LoggerDAO {\n+\n+    @Override\n+    public Logger find(final String key) {\n+        return entityManager.find(JPALogger.class, key);\n+    }\n+\n+    @Override\n+    public List<Logger> findAll(final LoggerType type) {\n+        TypedQuery<Logger> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPALogger.class.getSimpleName() + \" e WHERE e.type=:type\", Logger.class);\n+        query.setParameter(\"type\", type);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Logger save(final Logger logger) {\n+        // Audit loggers must be either OFF or DEBUG, no more options\n+        if (LoggerType.AUDIT == logger.getType() && LoggerLevel.OFF != logger.getLevel()) {\n+            logger.setLevel(LoggerLevel.DEBUG);\n+        }\n+        return entityManager.merge(logger);\n+    }\n+\n+    @Override\n+    public void delete(final Logger logger) {\n+        entityManager.remove(logger);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        Logger logger = find(key);\n+        if (logger == null) {\n+            return;\n+        }\n+\n+        delete(logger);\n+    }\n+}"},{"sha":"af6dbd2240948b0a235d2af1dd0029759aac90fd","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAMembershipDAO.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAMembershipDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAMembershipDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAMembershipDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.MembershipDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAMembershipDAO extends AbstractDAO<Membership, Long> implements MembershipDAO {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Override\n+    public Membership find(final Long key) {\n+        return entityManager.find(JPAMembership.class, key);\n+    }\n+\n+    @Override\n+    public Membership find(final User user, final Role role) {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e WHERE e.user = :user AND e.role = :role\");\n+        query.setParameter(\"user\", user);\n+        query.setParameter(\"role\", role);\n+\n+        Membership result = null;\n+\n+        try {\n+            result = (Membership) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No membership was found for user {} and role {}\", user, role, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Membership> findAll() {\n+        TypedQuery<Membership> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e\", Membership.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Membership save(final Membership membership) {\n+        return entityManager.merge(membership);\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        Membership membership = find(key);\n+        if (membership == null) {\n+            return;\n+        }\n+\n+        membership.getUser().removeMembership(membership);\n+        userDAO.save(membership.getUser());\n+\n+        entityManager.remove(membership);\n+    }\n+}"},{"sha":"b9cab70c1da5cb7b1b2942c903e09b26bb4c48ab","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPANotificationDAO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.entity.Notification;\n+import org.apache.syncope.persistence.jpa.entity.JPANotification;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPANotificationDAO extends AbstractDAO<Notification, Long> implements NotificationDAO {\n+\n+    @Override\n+    public Notification find(final Long key) {\n+        return entityManager.find(JPANotification.class, key);\n+    }\n+\n+    @Override\n+    public List<Notification> findAll() {\n+        TypedQuery<Notification> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPANotification.class.getSimpleName() + \" e\", Notification.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Notification save(final Notification notification) throws InvalidEntityException {\n+        return entityManager.merge(notification);\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        entityManager.remove(find(key));\n+    }\n+}"},{"sha":"52a260d412648cbcce440bc7bd8bece4489c68af","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttr;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAPlainAttrDAO extends AbstractDAO<PlainAttr, Long> implements PlainAttrDAO {\n+\n+    public <T extends PlainAttr> Class<? extends AbstractPlainAttr> getJPAEntityReference(\n+            final Class<T> reference) {\n+\n+        return CPlainAttr.class.isAssignableFrom(reference)\n+                ? JPACPlainAttr.class\n+                : RPlainAttr.class.isAssignableFrom(reference)\n+                        ? JPARPlainAttr.class\n+                        : MPlainAttr.class.isAssignableFrom(reference)\n+                                ? JPAMPlainAttr.class\n+                                : UPlainAttr.class.isAssignableFrom(reference)\n+                                        ? JPAUPlainAttr.class\n+                                        : null;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr> T find(final Long key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr> void delete(final Long key, final Class<T> reference) {\n+        T attribute = find(key, reference);\n+        if (attribute == null) {\n+            return;\n+        }\n+\n+        delete(attribute);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends PlainAttr> void delete(final T plainAttr) {\n+        if (plainAttr.getOwner() != null) {\n+            ((Subject<T, ?, ?>) plainAttr.getOwner()).removePlainAttr(plainAttr);\n+        }\n+\n+        entityManager.remove(plainAttr);\n+    }\n+}"},{"sha":"75951cb66cb9adc7260a16cdd6e45c89cc9ac86a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrValue;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue, Long> implements PlainAttrValueDAO {\n+\n+    private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJPAEntityReference(\n+            final Class<T> reference) {\n+\n+        return reference.equals(CPlainAttrValue.class)\n+                ? JPACPlainAttrValue.class\n+                : reference.equals(CPlainAttrUniqueValue.class)\n+                        ? JPACPlainAttrUniqueValue.class\n+                        : reference.equals(RPlainAttrValue.class)\n+                                ? JPARPlainAttrValue.class\n+                                : reference.equals(RPlainAttrUniqueValue.class)\n+                                        ? JPARPlainAttrUniqueValue.class\n+                                        : reference.equals(MPlainAttrValue.class)\n+                                                ? JPAMPlainAttrValue.class\n+                                                : reference.equals(MPlainAttrUniqueValue.class)\n+                                                        ? JPAMPlainAttrUniqueValue.class\n+                                                        : reference.equals(UPlainAttrValue.class)\n+                                                                ? JPAUPlainAttrValue.class\n+                                                                : reference.equals(UPlainAttrUniqueValue.class)\n+                                                                        ? JPAUPlainAttrUniqueValue.class\n+                                                                        : null;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> T find(final Long key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> List<T> findAll(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> T save(final T attributeValue) {\n+        return entityManager.merge(attributeValue);\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> void delete(final Long id, final Class<T> reference) {\n+        T attributeValue = find(id, reference);\n+        if (attributeValue == null) {\n+            return;\n+        }\n+\n+        delete(attributeValue);\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> void delete(final T attrValue) {\n+        if (attrValue.getAttr() != null) {\n+            attrValue.getAttr().removeValue(attrValue);\n+        }\n+\n+        entityManager.remove(attrValue);\n+    }\n+}"},{"sha":"47c512709984f3d34ef6e3626ae98b7ee1a487d0","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.RMappingItem;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainSchema;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema, String> implements PlainSchemaDAO {\n+\n+    @Autowired\n+    private PlainAttrDAO attrDAO;\n+\n+    @Autowired\n+    private AttrTemplateDAO<PlainSchema> attrTemplateDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    private <T extends PlainSchema> Class<? extends AbstractPlainSchema> getJPAEntityReference(\n+            final Class<T> reference) {\n+\n+        return CPlainSchema.class.isAssignableFrom(reference)\n+                ? JPACPlainSchema.class\n+                : RPlainSchema.class.isAssignableFrom(reference)\n+                        ? JPARPlainSchema.class\n+                        : MPlainSchema.class.isAssignableFrom(reference)\n+                                ? JPAMPlainSchema.class\n+                                : UPlainSchema.class.isAssignableFrom(reference)\n+                                        ? JPAUPlainSchema.class\n+                                        : null;\n+    }\n+\n+    @Override\n+    public <T extends PlainSchema> T find(final String key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends PlainSchema> List<T> findAll(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n+        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(((JPAPlainAttrDAO) attrDAO).getJPAEntityReference(reference).getSimpleName()).\n+                append(\" e WHERE e.\");\n+        if (RPlainAttr.class.isAssignableFrom(reference) || MPlainAttr.class.isAssignableFrom(reference)) {\n+            queryString.append(\"template.\");\n+        }\n+        queryString.append(\"schema=:schema\");\n+\n+        TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n+        query.setParameter(\"schema\", schema);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends PlainSchema> T save(final T schema) {\n+        return entityManager.merge(schema);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void delete(final String key, final AttributableUtil attributableUtil) {\n+        PlainSchema schema = find(key, attributableUtil.plainSchemaClass());\n+        if (schema == null) {\n+            return;\n+        }\n+\n+        final Set<Long> attrIds = new HashSet<>();\n+        for (PlainAttr attr : findAttrs(schema, attributableUtil.plainAttrClass())) {\n+            attrIds.add(attr.getKey());\n+        }\n+        for (Long attrId : attrIds) {\n+            attrDAO.delete(attrId, attributableUtil.plainAttrClass());\n+        }\n+\n+        if (attributableUtil.getType() == AttributableType.ROLE\n+                || attributableUtil.getType() == AttributableType.MEMBERSHIP) {\n+\n+            for (Iterator<Number> it = attrTemplateDAO.\n+                    findBySchemaName(schema.getKey(), attributableUtil.plainAttrTemplateClass()).iterator();\n+                    it.hasNext();) {\n+\n+                attrTemplateDAO.delete(it.next().longValue(), attributableUtil.plainAttrTemplateClass());\n+            }\n+        }\n+\n+        resourceDAO.deleteMapping(key, attributableUtil.intMappingType(), UMappingItem.class);\n+        resourceDAO.deleteMapping(key, attributableUtil.intMappingType(), RMappingItem.class);\n+\n+        entityManager.remove(schema);\n+    }\n+}"},{"sha":"d9aedcee9fc1e4b44f5cfa55707610315758b6a4","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAPolicyDAO.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.persistence.api.entity.Policy;\n+import org.apache.syncope.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.persistence.jpa.entity.JPAPolicy;\n+import org.apache.syncope.persistence.jpa.entity.JPAAccountPolicy;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAPolicyDAO extends AbstractDAO<Policy, Long> implements PolicyDAO {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Policy> T find(final Long key) {\n+        final Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.id=:id\");\n+        query.setParameter(\"id\", key);\n+\n+        List<T> result = query.getResultList();\n+        return result.isEmpty()\n+                ? null\n+                : result.iterator().next();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Policy> List<T> find(final PolicyType type) {\n+        final Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e WHERE e.type=:type\");\n+        query.setParameter(\"type\", type);\n+\n+        return (List<T>) query.getResultList();\n+    }\n+\n+    @Override\n+    public List<AccountPolicy> findByResource(final ExternalResource resource) {\n+        TypedQuery<AccountPolicy> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAAccountPolicy.class.getSimpleName() + \" e \"\n+                + \"WHERE :resource MEMBER OF e.resources\", AccountPolicy.class);\n+        query.setParameter(\"resource\", resource);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public PasswordPolicy getGlobalPasswordPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_PASSWORD);\n+        return policies == null || policies.isEmpty()\n+                ? null\n+                : (PasswordPolicy) policies.get(0);\n+    }\n+\n+    @Override\n+    public AccountPolicy getGlobalAccountPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_ACCOUNT);\n+        return policies == null || policies.isEmpty()\n+                ? null\n+                : (AccountPolicy) policies.get(0);\n+    }\n+\n+    @Override\n+    public SyncPolicy getGlobalSyncPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_SYNC);\n+        return policies == null || policies.isEmpty()\n+                ? null\n+                : (SyncPolicy) policies.get(0);\n+    }\n+\n+    @Override\n+    public List<Policy> findAll() {\n+        TypedQuery<Policy> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAPolicy.class.getSimpleName() + \" e\", Policy.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends Policy> T save(final T policy) {\n+        switch (policy.getType()) {\n+            case GLOBAL_PASSWORD:\n+                // just one GLOBAL_PASSWORD policy\n+                final PasswordPolicy passwordPolicy = getGlobalPasswordPolicy();\n+\n+                if (passwordPolicy != null && !passwordPolicy.getKey().equals(policy.getKey())) {\n+                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidPasswordPolicy,\n+                            \"Global Password policy already exists\");\n+                }\n+                break;\n+\n+            case GLOBAL_ACCOUNT:\n+                // just one GLOBAL_ACCOUNT policy\n+                final AccountPolicy accountPolicy = getGlobalAccountPolicy();\n+\n+                if (accountPolicy != null && !accountPolicy.getKey().equals(policy.getKey())) {\n+                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidAccountPolicy,\n+                            \"Global Account policy already exists\");\n+                }\n+                break;\n+\n+            case GLOBAL_SYNC:\n+                // just one GLOBAL_SYNC policy\n+                final SyncPolicy syncPolicy = getGlobalSyncPolicy();\n+\n+                if (syncPolicy != null && !syncPolicy.getKey().equals(policy.getKey())) {\n+                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidSyncPolicy,\n+                            \"Global Synchronization policy already exists\");\n+                }\n+                break;\n+\n+            case PASSWORD:\n+            case ACCOUNT:\n+            case SYNC:\n+            default:\n+        }\n+\n+        return entityManager.merge(policy);\n+    }\n+\n+    @Override\n+    public <T extends Policy> void delete(final T policy) {\n+        entityManager.remove(policy);\n+    }\n+}"},{"sha":"b398ae1e3cefae2548e0ad642ab899e851f77a29","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAReportDAO.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.persistence.jpa.entity.JPAReport;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAReportDAO extends AbstractDAO<Report, Long> implements ReportDAO {\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Report find(final Long key) {\n+        return entityManager.find(JPAReport.class, key);\n+    }\n+\n+    @Override\n+    public List<Report> findAll() {\n+        return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n+    }\n+\n+    @Override\n+    public List<Report> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+        final TypedQuery<Report> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAReport.class.getSimpleName() + \" e \"\n+                + toOrderByStatement(Report.class, \"e\", orderByClauses), Report.class);\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0\n+                ? 0\n+                : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public int count() {\n+        Query countQuery = entityManager.createNativeQuery(\"SELECT COUNT(id) FROM \" + JPAReport.TABLE);\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    @Transactional(rollbackFor = Throwable.class)\n+    public Report save(final Report report) throws InvalidEntityException {\n+        return entityManager.merge(report);\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        Report report = find(key);\n+        if (report == null) {\n+            return;\n+        }\n+\n+        delete(report);\n+    }\n+\n+    @Override\n+    public void delete(final Report report) {\n+        entityManager.remove(report);\n+    }\n+}"},{"sha":"d2ba1dc16169953cc144f9a26ca51fba79a8bbea","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAReportExecDAO.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.persistence.api.entity.ReportExec;\n+import org.apache.syncope.persistence.jpa.entity.JPAReportExec;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPAReportExecDAO extends AbstractDAO<ReportExec, Long> implements ReportExecDAO {\n+\n+    @Override\n+    public ReportExec find(final Long key) {\n+        return entityManager.find(JPAReportExec.class, key);\n+    }\n+\n+    private ReportExec findLatest(final Report report, final String field) {\n+        TypedQuery<ReportExec> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.report=:report ORDER BY e.\" + field + \" DESC\", ReportExec.class);\n+        query.setParameter(\"report\", report);\n+        query.setMaxResults(1);\n+\n+        List<ReportExec> result = query.getResultList();\n+        return result == null || result.isEmpty()\n+                ? null\n+                : result.iterator().next();\n+    }\n+\n+    @Override\n+    public ReportExec findLatestStarted(final Report report) {\n+        return findLatest(report, \"startDate\");\n+    }\n+\n+    @Override\n+    public ReportExec findLatestEnded(final Report report) {\n+        return findLatest(report, \"endDate\");\n+    }\n+\n+    @Override\n+    public List<ReportExec> findAll() {\n+        TypedQuery<ReportExec> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e\", ReportExec.class);\n+        return query.getResultList();\n+    }\n+\n+    /**\n+     * This method is annotated as transactional because called from ReportJob.\n+     *\n+     * @see org.apache.syncope.core.report.ReportJob\n+     * @param execution to be merged\n+     * @return merged execution\n+     * @throws InvalidEntityException if any validation error occurs\n+     */\n+    @Override\n+    @Transactional(rollbackFor = Throwable.class)\n+    public ReportExec save(final ReportExec execution) throws InvalidEntityException {\n+        return entityManager.merge(execution);\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        ReportExec execution = find(key);\n+        if (execution == null) {\n+            return;\n+        }\n+\n+        delete(execution);\n+    }\n+\n+    @Override\n+    public void delete(final ReportExec execution) {\n+        if (execution.getReport() != null) {\n+            execution.getReport().removeExec(execution);\n+        }\n+\n+        entityManager.remove(execution);\n+    }\n+}"},{"sha":"96174fe8ebb677c719539c866dccfed924802d43","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPARoleDAO.java","status":"added","additions":531,"deletions":0,"changes":531,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,531 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.RoleEntitlementUtil;\n+import org.apache.syncope.persistence.api.dao.DerAttrDAO;\n+import org.apache.syncope.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.dao.VirAttrDAO;\n+import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.Entitlement;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.Policy;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttr;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttr;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPARoleDAO extends AbstractSubjectDAO<RPlainAttr, RDerAttr, RVirAttr> implements RoleDAO {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n+    @Autowired\n+    private DerAttrDAO derAttrDAO;\n+\n+    @Autowired\n+    private VirAttrDAO virAttrDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Override\n+    protected Subject<RPlainAttr, RDerAttr, RVirAttr> findInternal(final Long key) {\n+        return find(key);\n+    }\n+\n+    @Override\n+    public Role find(final Long key) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE e.id = :id\", Role.class);\n+        query.setParameter(\"id\", key);\n+\n+        Role result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No role found with id {}\", key, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Role> find(final String name) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e WHERE e.name = :name\", Role.class);\n+        query.setParameter(\"name\", name);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Role find(final String name, final Long parentId) {\n+        TypedQuery<Role> query;\n+        if (parentId == null) {\n+            query = entityManager.createQuery(\"SELECT r FROM \" + JPARole.class.getSimpleName() + \" r WHERE \"\n+                    + \"r.name=:name AND r.parent IS NULL\", Role.class);\n+        } else {\n+            query = entityManager.createQuery(\"SELECT r FROM \" + JPARole.class.getSimpleName() + \" r WHERE \"\n+                    + \"r.name=:name AND r.parent.id=:parentId\", Role.class);\n+            query.setParameter(\"parentId\", parentId);\n+        }\n+        query.setParameter(\"name\", name);\n+\n+        List<Role> result = query.getResultList();\n+        return result.isEmpty()\n+                ? null\n+                : result.get(0);\n+    }\n+\n+    private void findSameOwnerDescendants(final List<Role> result, final Role role) {\n+        List<Role> children = findChildren(role);\n+        if (children != null) {\n+            for (Role child : children) {\n+                if ((child.getUserOwner() == null && child.getRoleOwner() == null && child.isInheritOwner())\n+                        || (child.getUserOwner() != null && child.getUserOwner().equals(role.getUserOwner()))\n+                        || (child.getRoleOwner() != null && child.getRoleOwner().equals(role.getRoleOwner()))) {\n+\n+                    findDescendants(result, child);\n+                }\n+            }\n+        }\n+        result.add(role);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<Role> findOwnedByUser(final Long userKey) {\n+        User owner = userDAO.find(userKey);\n+        if (owner == null) {\n+            return Collections.<Role>emptyList();\n+        }\n+\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPARole.class.getSimpleName()).\n+                append(\" e WHERE e.userOwner=:owner \");\n+        for (Long roleId : owner.getRoleIds()) {\n+            queryString.append(\"OR e.roleOwner.id=\").append(roleId).append(' ');\n+        }\n+\n+        TypedQuery<Role> query = entityManager.createQuery(queryString.toString(), Role.class);\n+        query.setParameter(\"owner\", owner);\n+\n+        List<Role> result = new ArrayList<>();\n+        for (Role role : query.getResultList()) {\n+            findSameOwnerDescendants(result, role);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<Role> findOwnedByRole(final Long roleId) {\n+        Role owner = find(roleId);\n+        if (owner == null) {\n+            return Collections.<Role>emptyList();\n+        }\n+\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPARole.class.getSimpleName()).\n+                append(\" e WHERE e.roleOwner=:owner \");\n+\n+        TypedQuery<Role> query = entityManager.createQuery(queryString.toString(), Role.class);\n+        query.setParameter(\"owner\", owner);\n+\n+        List<Role> result = new ArrayList<Role>();\n+        for (Role role : query.getResultList()) {\n+            findSameOwnerDescendants(result, role);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Role> findByEntitlement(final Entitlement entitlement) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e \"\n+                + \"WHERE :entitlement MEMBER OF e.entitlements\", Role.class);\n+        query.setParameter(\"entitlement\", entitlement);\n+\n+        return query.getResultList();\n+    }\n+\n+    private Map.Entry<String, String> getPolicyFields(final PolicyType type) {\n+        String policyField;\n+        String inheritPolicyField;\n+        if (type == PolicyType.GLOBAL_ACCOUNT || type == PolicyType.ACCOUNT) {\n+            policyField = \"accountPolicy\";\n+            inheritPolicyField = \"inheritAccountPolicy\";\n+        } else {\n+            policyField = \"passwordPolicy\";\n+            inheritPolicyField = \"inheritPasswordPolicy\";\n+        }\n+\n+        return new AbstractMap.SimpleEntry<>(policyField, inheritPolicyField);\n+    }\n+\n+    private List<Role> findSamePolicyChildren(final Role role, final PolicyType type) {\n+        List<Role> result = new ArrayList<Role>();\n+\n+        for (Role child : findChildren(role)) {\n+            boolean inherit = type == PolicyType.GLOBAL_ACCOUNT || type == PolicyType.ACCOUNT\n+                    ? child.isInheritAccountPolicy()\n+                    : child.isInheritPasswordPolicy();\n+            if (inherit) {\n+                result.add(child);\n+                result.addAll(findSamePolicyChildren(child, type));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Role> findByPolicy(final Policy policy) {\n+        if (policy.getType() == PolicyType.GLOBAL_SYNC || policy.getType() == PolicyType.SYNC) {\n+            return Collections.<Role>emptyList();\n+        }\n+\n+        Map.Entry<String, String> policyFields = getPolicyFields(policy.getType());\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPARole.class.getSimpleName()).append(\" e WHERE e.\").\n+                append(policyFields.getKey()).append(\" = :policy AND (e.\").\n+                append(policyFields.getValue()).append(\" IS NULL OR e.\").\n+                append(policyFields.getValue()).append(\" = 0)\");\n+\n+        TypedQuery<Role> query = entityManager.createQuery(queryString.toString(), Role.class);\n+        query.setParameter(\"policy\", policy);\n+\n+        List<Role> result = new ArrayList<Role>();\n+        for (Role role : query.getResultList()) {\n+            result.add(role);\n+            result.addAll(findSamePolicyChildren(role, policy.getType()));\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Role> findWithoutPolicy(final PolicyType type) {\n+        if (type == PolicyType.GLOBAL_SYNC || type == PolicyType.SYNC) {\n+            return Collections.<Role>emptyList();\n+        }\n+\n+        Map.Entry<String, String> policyFields = getPolicyFields(type);\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPARole.class.getSimpleName()).append(\" e WHERE e.\").\n+                append(policyFields.getKey()).append(\" IS NULL AND (e.\").\n+                append(policyFields.getValue()).append(\" IS NULL OR e.\").\n+                append(policyFields.getValue()).append(\" = 0)\");\n+\n+        TypedQuery<Role> query = entityManager.createQuery(queryString.toString(), Role.class);\n+        return query.getResultList();\n+    }\n+\n+    private void findAncestors(final List<Role> result, final Role role) {\n+        if (role.getParent() != null && !result.contains(role.getParent())) {\n+            result.add(role.getParent());\n+            findAncestors(result, role.getParent());\n+        }\n+    }\n+\n+    @Override\n+    public List<Role> findAncestors(final Role role) {\n+        List<Role> result = new ArrayList<>();\n+        findAncestors(result, role);\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Role> findChildren(final Role role) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT r FROM \" + JPARole.class.getSimpleName() + \" r WHERE r.parent=:role\", Role.class);\n+        query.setParameter(\"role\", role);\n+\n+        return query.getResultList();\n+    }\n+\n+    private void findDescendants(final List<Role> result, final Role role) {\n+        List<Role> children = findChildren(role);\n+        if (children != null) {\n+            for (Role child : children) {\n+                findDescendants(result, child);\n+            }\n+        }\n+        result.add(role);\n+    }\n+\n+    @Override\n+    public List<Role> findDescendants(final Role role) {\n+        List<Role> result = new ArrayList<>();\n+        findDescendants(result, role);\n+        return result;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public List<Role> findByAttrValue(final String schemaName, final RPlainAttrValue attrValue) {\n+        return (List<Role>) findByAttrValue(\n+                schemaName, attrValue, JPAAttributableUtil.getInstance(AttributableType.ROLE));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Role findByAttrUniqueValue(final String schemaName, final RPlainAttrValue attrUniqueValue) {\n+        return (Role) findByAttrUniqueValue(schemaName, attrUniqueValue,\n+                JPAAttributableUtil.getInstance(AttributableType.ROLE));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public List<Role> findByDerAttrValue(final String schemaName, final String value) {\n+        return (List<Role>) findByDerAttrValue(\n+                schemaName, value, JPAAttributableUtil.getInstance(AttributableType.ROLE));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public List<Role> findByResource(final ExternalResource resource) {\n+        return (List<Role>) findByResource(resource, JPAAttributableUtil.getInstance(AttributableType.ROLE));\n+    }\n+\n+    @Override\n+    public List<Role> findAll() {\n+        return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n+    }\n+\n+    @Override\n+    public List<Role> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPARole.class.getSimpleName() + \" e \"\n+                + toOrderByStatement(Role.class, \"e\", orderBy), Role.class);\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0\n+                ? 0\n+                : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<Membership> findMemberships(final Role role) {\n+        TypedQuery<Membership> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAMembership.class.getSimpleName() + \" e\"\n+                + \" WHERE e.role=:role\", Membership.class);\n+        query.setParameter(\"role\", role);\n+\n+        return query.getResultList();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private List<Long> unmatched(final Long roleId,\n+            final Class<?> attrClass, final Class<? extends AttrTemplate<?>> attrTemplateClass) {\n+\n+        final Query query = entityManager.createNativeQuery(new StringBuilder().\n+                append(\"SELECT ma.id \").\n+                append(\"FROM \").append(JPAMembership.TABLE).append(\" m, \").\n+                append(attrClass.getSimpleName()).append(\" ma \").\n+                append(\"WHERE m.role_id = ?1 \").\n+                append(\"AND ma.owner_id = m.id \").\n+                append(\"AND ma.template_id NOT IN (\").\n+                append(\"SELECT id \").\n+                append(\"FROM \").append(attrTemplateClass.getSimpleName()).append(' ').\n+                append(\"WHERE owner_id = ?1)\").toString());\n+        query.setParameter(1, roleId);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public final int count() {\n+        Query countQuery = entityManager.createNativeQuery(\n+                \"SELECT COUNT(e.id) FROM \" + JPARole.TABLE + \" e\");\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public Role save(final Role role) {\n+        // reset account policy in case of inheritance\n+        if (role.isInheritAccountPolicy()) {\n+            role.setAccountPolicy(null);\n+        }\n+\n+        // reset password policy in case of inheritance\n+        if (role.isInheritPasswordPolicy()) {\n+            role.setPasswordPolicy(null);\n+        }\n+\n+        // remove attributes without a valid template\n+        List<RPlainAttr> rToBeDeleted = new ArrayList<>();\n+        for (PlainAttr attr : role.getPlainAttrs()) {\n+            boolean found = false;\n+            for (RPlainAttrTemplate template : role.findInheritedTemplates(RPlainAttrTemplate.class)) {\n+                if (template.getSchema().equals(attr.getSchema())) {\n+                    found = true;\n+                }\n+            }\n+            if (!found) {\n+                rToBeDeleted.add((RPlainAttr) attr);\n+            }\n+        }\n+        for (RPlainAttr attr : rToBeDeleted) {\n+            LOG.debug(\"Removing {} from {} because no template is available for it\", attr, role);\n+            role.removePlainAttr(attr);\n+        }\n+\n+        // remove derived attributes without a valid template\n+        List<RDerAttr> rDerToBeDeleted = new ArrayList<RDerAttr>();\n+        for (DerAttr attr : role.getDerAttrs()) {\n+            boolean found = false;\n+            for (RDerAttrTemplate template : role.findInheritedTemplates(RDerAttrTemplate.class)) {\n+                if (template.getSchema().equals(attr.getSchema())) {\n+                    found = true;\n+                }\n+            }\n+            if (!found) {\n+                rDerToBeDeleted.add((RDerAttr) attr);\n+            }\n+        }\n+        for (RDerAttr attr : rDerToBeDeleted) {\n+            LOG.debug(\"Removing {} from {} because no template is available for it\", attr, role);\n+            role.removeDerAttr(attr);\n+        }\n+\n+        // remove virtual attributes without a valid template\n+        List<RVirAttr> rVirToBeDeleted = new ArrayList<RVirAttr>();\n+        for (VirAttr attr : role.getVirAttrs()) {\n+            boolean found = false;\n+            for (RVirAttrTemplate template : role.findInheritedTemplates(RVirAttrTemplate.class)) {\n+                if (template.getSchema().equals(attr.getSchema())) {\n+                    found = true;\n+                }\n+            }\n+            if (!found) {\n+                LOG.debug(\"Removing {} from {} because no template is available for it\", attr, role);\n+                rVirToBeDeleted.add((RVirAttr) attr);\n+            }\n+        }\n+        for (RVirAttr attr : rVirToBeDeleted) {\n+            role.removeVirAttr(attr);\n+        }\n+\n+        Role merged = entityManager.merge(role);\n+\n+        // Now the same process for any exising membership of the role being saved\n+        if (role.getKey() != null) {\n+            for (Long key : unmatched(role.getKey(), MPlainAttr.class, MPlainAttrTemplate.class)) {\n+                LOG.debug(\"Removing MAttr[{}] because no template is available for it in {}\", key, role);\n+                plainAttrDAO.delete(key, MPlainAttr.class);\n+            }\n+            for (Long id : unmatched(role.getKey(), MDerAttr.class, MDerAttrTemplate.class)) {\n+                LOG.debug(\"Removing MDerAttr[{}] because no template is available for it in {}\", id, role);\n+                derAttrDAO.delete(id, MDerAttr.class);\n+            }\n+            for (Long id : unmatched(role.getKey(), MVirAttr.class, MVirAttrTemplate.class)) {\n+                LOG.debug(\"Removing MVirAttr[{}] because no template is available for it in {}\", id, role);\n+                virAttrDAO.delete(id, MVirAttr.class);\n+            }\n+        }\n+\n+        merged = entityManager.merge(merged);\n+        for (VirAttr attr : merged.getVirAttrs()) {\n+            attr.getValues().clear();\n+            attr.getValues().addAll(role.getVirAttr(attr.getSchema().getKey()).getValues());\n+        }\n+\n+        entitlementDAO.saveRoleEntitlement(merged);\n+\n+        return merged;\n+    }\n+\n+    @Override\n+    public void delete(final Role role) {\n+        for (Role roleToBeDeleted : findDescendants(role)) {\n+            for (Membership membership : findMemberships(roleToBeDeleted)) {\n+                membership.getUser().removeMembership(membership);\n+                userDAO.save(membership.getUser());\n+\n+                entityManager.remove(membership);\n+            }\n+\n+            roleToBeDeleted.getEntitlements().clear();\n+\n+            roleToBeDeleted.setParent(null);\n+            roleToBeDeleted.setUserOwner(null);\n+            roleToBeDeleted.setRoleOwner(null);\n+            entityManager.remove(roleToBeDeleted);\n+\n+            entitlementDAO.delete(RoleEntitlementUtil.getEntitlementNameFromRoleId(roleToBeDeleted.getKey()));\n+        }\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        Role role = (Role) findInternal(key);\n+        if (role == null) {\n+            return;\n+        }\n+\n+        delete(role);\n+    }\n+}"},{"sha":"f17e7c07584228494c46ca9c3ff4449dd7c53260","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPASecurityQuestionDAO.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.JPASecurityQuestion;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPASecurityQuestionDAO extends AbstractDAO<SecurityQuestion, Long> implements SecurityQuestionDAO {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Override\n+    public SecurityQuestion find(final Long key) {\n+        return entityManager.find(JPASecurityQuestion.class, key);\n+    }\n+\n+    @Override\n+    public List<SecurityQuestion> findAll() {\n+        final TypedQuery<SecurityQuestion> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPASecurityQuestion.class.getSimpleName() + \" e \", SecurityQuestion.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public SecurityQuestion save(final SecurityQuestion securityQuestion) throws InvalidEntityException {\n+        return entityManager.merge(securityQuestion);\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        SecurityQuestion securityQuestion = find(key);\n+        if (securityQuestion == null) {\n+            return;\n+        }\n+\n+        for (User user : userDAO.findBySecurityQuestion(securityQuestion)) {\n+            user.setSecurityQuestion(null);\n+            user.setSecurityAnswer(null);\n+            userDAO.save(user);\n+        }\n+\n+        entityManager.remove(securityQuestion);\n+    }\n+\n+}"},{"sha":"86e596ffd69d3a17e86b5619c3e32c80afb2474a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPASubjectSearchDAO.java","status":"added","additions":715,"deletions":0,"changes":715,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,715 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n+import javax.validation.ValidationException;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.persistence.api.dao.search.EntitlementCond;\n+import org.apache.syncope.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.persistence.api.dao.search.SubjectCond;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.ReflectionUtils;\n+\n+@Repository\n+public class JPASubjectSearchDAO extends AbstractDAO<Subject<?, ?, ?>, Long> implements SubjectSearchDAO {\n+\n+    private static final String EMPTY_ATTR_QUERY = \"SELECT subject_id FROM user_search_attr WHERE 1=2\";\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO schemaDAO;\n+\n+    private String getAdminRolesFilter(final Set<Long> adminRoles, final SubjectType type) {\n+        final StringBuilder adminRolesFilter = new StringBuilder();\n+\n+        if (type == SubjectType.USER) {\n+            adminRolesFilter.append(\"SELECT user_id AS subject_id FROM Membership M1 WHERE role_id IN (\").\n+                    append(\"SELECT role_id FROM Membership M2 WHERE M2.user_id=M1.user_id \").\n+                    append(\"AND role_id NOT IN (\");\n+        }\n+\n+        adminRolesFilter.append(\"SELECT id AS \").\n+                append(type == SubjectType.USER ? \"role\" : \"subject\").\n+                append(\"_id FROM SyncopeRole\");\n+\n+        boolean firstRole = true;\n+\n+        for (Long adminRoleId : adminRoles) {\n+            if (firstRole) {\n+                adminRolesFilter.append(\" WHERE\");\n+                firstRole = false;\n+            } else {\n+                adminRolesFilter.append(type == SubjectType.USER ? \" OR\" : \" AND\");\n+            }\n+            adminRolesFilter.append(type == SubjectType.USER ? \" id = \" : \" id <> \").append(adminRoleId);\n+        }\n+\n+        if (type == SubjectType.USER) {\n+            adminRolesFilter.append(\"))\");\n+        }\n+\n+        return adminRolesFilter.toString();\n+    }\n+\n+    @Override\n+    public int count(final Set<Long> adminRoles, final SearchCond searchCondition, final SubjectType type) {\n+        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n+\n+        // 1. get the query string from the search condition\n+        SearchSupport svs = new SearchSupport(type);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, type, svs);\n+\n+        // 2. take into account administrative roles\n+        queryString.insert(0, \"SELECT u.subject_id FROM (\");\n+        queryString.append(\") u WHERE subject_id NOT IN (\");\n+        queryString.append(getAdminRolesFilter(adminRoles, type)).append(')');\n+\n+        // 3. prepare the COUNT query\n+        queryString.insert(0, \"SELECT COUNT(subject_id) FROM (\");\n+        queryString.append(\") count_subject_id\");\n+\n+        Query countQuery = entityManager.createNativeQuery(queryString.toString());\n+        fillWithParameters(countQuery, parameters);\n+\n+        LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\", queryString.toString(), parameters);\n+\n+        int result = ((Number) countQuery.getSingleResult()).intValue();\n+        LOG.debug(\"Native count query result: {}\", result);\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends Subject<?, ?, ?>> List<T> search(\n+            final Set<Long> adminRoles, final SearchCond searchCondition, final SubjectType type) {\n+\n+        return search(adminRoles, searchCondition, Collections.<OrderByClause>emptyList(), type);\n+    }\n+\n+    @Override\n+    public <T extends Subject<?, ?, ?>> List<T> search(\n+            final Set<Long> adminRoles, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n+            final SubjectType type) {\n+\n+        return search(adminRoles, searchCondition, -1, -1, orderBy, type);\n+    }\n+\n+    @Override\n+    public <T extends Subject<?, ?, ?>> List<T> search(\n+            final Set<Long> adminRoles, final SearchCond searchCondition, final int page, final int itemsPerPage,\n+            final List<OrderByClause> orderBy, final SubjectType type) {\n+\n+        List<T> result = Collections.<T>emptyList();\n+\n+        if (adminRoles != null && (!adminRoles.isEmpty() || roleDAO.findAll().isEmpty())) {\n+            LOG.debug(\"Search condition:\\n{}\", searchCondition);\n+\n+            if (searchCondition != null && searchCondition.isValid()) {\n+                try {\n+                    result = doSearch(adminRoles, searchCondition, page, itemsPerPage, orderBy, type);\n+                } catch (Exception e) {\n+                    LOG.error(\"While searching for {}\", type, e);\n+                }\n+            } else {\n+                LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends Subject<?, ?, ?>> boolean matches(\n+            final T subject, final SearchCond searchCondition, final SubjectType type) {\n+\n+        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n+\n+        // 1. get the query string from the search condition\n+        SearchSupport svs = new SearchSupport(type);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, type, svs);\n+\n+        boolean matches;\n+        if (queryString.length() == 0) {\n+            // Could be empty: got into a role search with a single membership condition ...\n+            matches = false;\n+        } else {\n+            // 2. take into account the passed user\n+            queryString.insert(0, \"SELECT u.subject_id FROM (\");\n+            queryString.append(\") u WHERE subject_id=?\").append(setParameter(parameters, subject.getKey()));\n+\n+            // 3. prepare the search query\n+            Query query = entityManager.createNativeQuery(queryString.toString());\n+\n+            // 4. populate the search query with parameter values\n+            fillWithParameters(query, parameters);\n+\n+            // 5. executes query\n+            matches = !query.getResultList().isEmpty();\n+        }\n+\n+        return matches;\n+    }\n+\n+    private int setParameter(final List<Object> parameters, final Object parameter) {\n+        int key;\n+        synchronized (parameters) {\n+            parameters.add(parameter);\n+            key = parameters.size();\n+        }\n+\n+        return key;\n+    }\n+\n+    private void fillWithParameters(final Query query, final List<Object> parameters) {\n+        for (int i = 0; i < parameters.size(); i++) {\n+            if (parameters.get(i) instanceof Date) {\n+                query.setParameter(i + 1, (Date) parameters.get(i), TemporalType.TIMESTAMP);\n+            } else if (parameters.get(i) instanceof Boolean) {\n+                query.setParameter(i + 1, ((Boolean) parameters.get(i))\n+                        ? 1\n+                        : 0);\n+            } else {\n+                query.setParameter(i + 1, parameters.get(i));\n+            }\n+        }\n+    }\n+\n+    private StringBuilder buildSelect(final OrderBySupport orderBySupport) {\n+        final StringBuilder select = new StringBuilder(\"SELECT u.subject_id\");\n+\n+        for (OrderBySupport.Item obs : orderBySupport.items) {\n+            select.append(',').append(obs.select);\n+        }\n+        select.append(\" FROM \");\n+\n+        return select;\n+    }\n+\n+    private StringBuilder buildWhere(final OrderBySupport orderBySupport, final SubjectType type) {\n+        final StringBuilder where = new StringBuilder(\" u\");\n+        for (SearchSupport.SearchView searchView : orderBySupport.views) {\n+            where.append(',').append(searchView.name).append(' ').append(searchView.alias);\n+        }\n+        where.append(\" WHERE \");\n+        for (SearchSupport.SearchView searchView : orderBySupport.views) {\n+            where.append(\"u.subject_id=\").append(searchView.alias).append(\".subject_id AND \");\n+        }\n+\n+        for (OrderBySupport.Item obs : orderBySupport.items) {\n+            if (StringUtils.isNotBlank(obs.where)) {\n+                where.append(obs.where).append(\" AND \");\n+            }\n+        }\n+        where.append(\"u.subject_id NOT IN (\");\n+\n+        return where;\n+    }\n+\n+    private StringBuilder buildOrderBy(final OrderBySupport orderBySupport) {\n+        final StringBuilder orderBy = new StringBuilder();\n+\n+        for (OrderBySupport.Item obs : orderBySupport.items) {\n+            orderBy.append(obs.orderBy).append(',');\n+        }\n+        if (!orderBySupport.items.isEmpty()) {\n+            orderBy.insert(0, \" ORDER BY \");\n+            orderBy.deleteCharAt(orderBy.length() - 1);\n+        }\n+\n+        return orderBy;\n+    }\n+\n+    private OrderBySupport parseOrderBy(final SubjectType type, final SearchSupport svs,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        final AttributableUtil attrUtil = JPAAttributableUtil.getInstance(type.asAttributableType());\n+\n+        OrderBySupport orderBySupport = new OrderBySupport();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            OrderBySupport.Item obs = new OrderBySupport.Item();\n+\n+            Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), clause.getField());\n+            if (subjectField == null) {\n+                PlainSchema schema = schemaDAO.find(clause.getField(), attrUtil.plainSchemaClass());\n+                if (schema != null) {\n+                    if (schema.isUniqueConstraint()) {\n+                        orderBySupport.views.add(svs.uniqueAttr());\n+\n+                        obs.select = new StringBuilder().\n+                                append(svs.uniqueAttr().alias).append('.').append(svs.fieldName(schema.getType())).\n+                                append(\" AS \").append(clause.getField()).toString();\n+                        obs.where = new StringBuilder().\n+                                append(svs.uniqueAttr().alias).\n+                                append(\".schema_name='\").append(clause.getField()).append(\"'\").toString();\n+                        obs.orderBy = clause.getField() + \" \" + clause.getDirection().name();\n+                    } else {\n+                        orderBySupport.views.add(svs.attr());\n+\n+                        obs.select = new StringBuilder().\n+                                append(svs.attr().alias).append('.').append(svs.fieldName(schema.getType())).\n+                                append(\" AS \").append(clause.getField()).toString();\n+                        obs.where = new StringBuilder().\n+                                append(svs.attr().alias).\n+                                append(\".schema_name='\").append(clause.getField()).append(\"'\").toString();\n+                        obs.orderBy = clause.getField() + \" \" + clause.getDirection().name();\n+                    }\n+                }\n+            } else {\n+                orderBySupport.views.add(svs.field());\n+\n+                obs.select = svs.field().alias + \".\" + clause.getField();\n+                obs.where = StringUtils.EMPTY;\n+                obs.orderBy = svs.field().alias + \".\" + clause.getField() + \" \" + clause.getDirection().name();\n+            }\n+\n+            if (obs.isEmpty()) {\n+                LOG.warn(\"Cannot build any valid clause from {}\", clause);\n+            } else {\n+                orderBySupport.items.add(obs);\n+            }\n+        }\n+\n+        return orderBySupport;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T extends Subject<?, ?, ?>> List<T> doSearch(final Set<Long> adminRoles,\n+            final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n+            final SubjectType type) {\n+\n+        List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n+\n+        // 1. get the query string from the search condition\n+        SearchSupport svs = new SearchSupport(type);\n+        StringBuilder queryString = getQuery(nodeCond, parameters, type, svs);\n+\n+        // 2. take into account administrative roles and ordering\n+        OrderBySupport orderBySupport = parseOrderBy(type, svs, orderBy);\n+        if (queryString.charAt(0) == '(') {\n+            queryString.insert(0, buildSelect(orderBySupport));\n+            queryString.append(buildWhere(orderBySupport, type));\n+        } else {\n+            queryString.insert(0, buildSelect(orderBySupport).append('('));\n+            queryString.append(')').append(buildWhere(orderBySupport, type));\n+        }\n+        queryString.\n+                append(getAdminRolesFilter(adminRoles, type)).append(')').\n+                append(buildOrderBy(orderBySupport));\n+\n+        // 3. prepare the search query\n+        Query query = entityManager.createNativeQuery(queryString.toString());\n+\n+        // 4. page starts from 1, while setFirtResult() starts from 0\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage >= 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        // 5. populate the search query with parameter values\n+        fillWithParameters(query, parameters);\n+\n+        LOG.debug(\"Native query\\n{}\\nwith parameters\\n{}\", queryString.toString(), parameters);\n+\n+        // 6. Prepare the result (avoiding duplicates)\n+        List<T> result = new ArrayList<>();\n+\n+        for (Object subjectId : query.getResultList()) {\n+            long actualId;\n+            if (subjectId instanceof Object[]) {\n+                actualId = ((Number) ((Object[]) subjectId)[0]).longValue();\n+            } else {\n+                actualId = ((Number) subjectId).longValue();\n+            }\n+\n+            T subject = type == SubjectType.USER\n+                    ? (T) userDAO.find(actualId)\n+                    : (T) roleDAO.find(actualId);\n+            if (subject == null) {\n+                LOG.error(\"Could not find {} with id {}, even though returned by the native query\",\n+                        type, actualId);\n+            } else {\n+                if (!result.contains(subject)) {\n+                    result.add(subject);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters,\n+            final SubjectType type, final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder();\n+\n+        switch (nodeCond.getType()) {\n+\n+            case LEAF:\n+            case NOT_LEAF:\n+                if (nodeCond.getMembershipCond() != null && SubjectType.USER == type) {\n+                    query.append(getQuery(nodeCond.getMembershipCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                }\n+                if (nodeCond.getResourceCond() != null) {\n+                    query.append(getQuery(nodeCond.getResourceCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n+                }\n+                if (nodeCond.getEntitlementCond() != null) {\n+                    query.append(getQuery(nodeCond.getEntitlementCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                }\n+                if (nodeCond.getAttributeCond() != null) {\n+                    query.append(getQuery(nodeCond.getAttributeCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n+                }\n+                if (nodeCond.getSubjectCond() != null) {\n+                    query.append(getQuery(nodeCond.getSubjectCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n+                }\n+                break;\n+\n+            case AND:\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, type, svs)).\n+                        append(\" AND subject_id IN ( \").\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, type, svs)).\n+                        append(\")\");\n+                break;\n+\n+            case OR:\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, type, svs)).\n+                        append(\" OR subject_id IN ( \").\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, type, svs)).\n+                        append(\")\");\n+                break;\n+\n+            default:\n+        }\n+\n+        return query;\n+    }\n+\n+    private String getQuery(final MembershipCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"subject_id NOT IN (\");\n+        } else {\n+            query.append(\"subject_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+                append(svs.membership().name).append(\" WHERE \").\n+                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleId())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(final ResourceCond cond, final boolean not, final List<Object> parameters,\n+            final SubjectType type, final SearchSupport svs) {\n+\n+        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"subject_id NOT IN (\");\n+        } else {\n+            query.append(\"subject_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.resource().name).\n+                append(\" WHERE resource_name=?\").\n+                append(setParameter(parameters, cond.getResourceName()));\n+\n+        if (type == SubjectType.USER) {\n+            query.append(\" UNION SELECT DISTINCT subject_id FROM \").\n+                    append(svs.roleResource().name).\n+                    append(\" WHERE resource_name=?\").\n+                    append(setParameter(parameters, cond.getResourceName()));\n+        }\n+\n+        query.append(')');\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(final EntitlementCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.entitlements().name).\n+                append(\" WHERE entitlement_name \");\n+        if (not) {\n+            query.append(\" NOT \");\n+        }\n+        query.append(\" LIKE ?\").append(setParameter(parameters, cond.getExpression()));\n+\n+        return query.toString();\n+    }\n+\n+    private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue attrValue,\n+            final PlainSchema schema, final AttributeCond cond, final boolean not,\n+            final List<Object> parameters, final SearchSupport svs) {\n+\n+        String column = (cond instanceof SubjectCond)\n+                ? cond.getSchema()\n+                : \"' AND \" + svs.fieldName(schema.getType());\n+\n+        switch (cond.getType()) {\n+\n+            case ISNULL:\n+                query.append(column).append(not\n+                        ? \" IS NOT NULL\"\n+                        : \" IS NULL\");\n+                break;\n+\n+            case ISNOTNULL:\n+                query.append(column).append(not\n+                        ? \" IS NULL\"\n+                        : \" IS NOT NULL\");\n+                break;\n+\n+            case LIKE:\n+                if (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) {\n+                    query.append(column);\n+                    if (not) {\n+                        query.append(\" NOT \");\n+                    }\n+                    query.append(\" LIKE ?\").append(setParameter(parameters, cond.getExpression()));\n+                } else {\n+                    if (!(cond instanceof SubjectCond)) {\n+                        query.append(\"' AND\");\n+                    }\n+                    query.append(\" 1=2\");\n+                    LOG.error(\"LIKE is only compatible with string or enum schemas\");\n+                }\n+                break;\n+\n+            case EQ:\n+                query.append(column);\n+                if (not) {\n+                    query.append(\"<>\");\n+                } else {\n+                    query.append('=');\n+                }\n+                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                break;\n+\n+            case GE:\n+                query.append(column);\n+                if (not) {\n+                    query.append('<');\n+                } else {\n+                    query.append(\">=\");\n+                }\n+                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                break;\n+\n+            case GT:\n+                query.append(column);\n+                if (not) {\n+                    query.append(\"<=\");\n+                } else {\n+                    query.append('>');\n+                }\n+                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                break;\n+\n+            case LE:\n+                query.append(column);\n+                if (not) {\n+                    query.append('>');\n+                } else {\n+                    query.append(\"<=\");\n+                }\n+                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                break;\n+\n+            case LT:\n+                query.append(column);\n+                if (not) {\n+                    query.append(\">=\");\n+                } else {\n+                    query.append('<');\n+                }\n+                query.append('?').append(setParameter(parameters, attrValue.getValue()));\n+                break;\n+\n+            default:\n+        }\n+    }\n+\n+    private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n+            final SubjectType type, final SearchSupport svs) {\n+\n+        final AttributableUtil attrUtil = JPAAttributableUtil.getInstance(type.asAttributableType());\n+\n+        PlainSchema schema = schemaDAO.find(cond.getSchema(), attrUtil.plainSchemaClass());\n+        if (schema == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        PlainAttrValue attrValue = attrUtil.newPlainAttrValue();\n+        try {\n+            if (cond.getType() != AttributeCond.Type.LIKE && cond.getType() != AttributeCond.Type.ISNULL\n+                    && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n+                schema.getValidator().validate(cond.getExpression(), attrValue);\n+            }\n+        } catch (ValidationException e) {\n+            LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \");\n+        if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n+            query.append(svs.field().name).\n+                    append(\" WHERE subject_id NOT IN (SELECT subject_id FROM \").\n+                    append(svs.nullAttr().name).\n+                    append(\" WHERE schema_name='\").append(schema.getKey()).append(\"')\");\n+        } else {\n+            if (cond.getType() == AttributeCond.Type.ISNULL) {\n+                query.append(svs.nullAttr().name).\n+                        append(\" WHERE schema_name='\").append(schema.getKey()).append(\"'\");\n+            } else {\n+                if (schema.isUniqueConstraint()) {\n+                    query.append(svs.uniqueAttr().name);\n+                } else {\n+                    query.append(svs.attr().name);\n+                }\n+                query.append(\" WHERE schema_name='\").append(schema.getKey());\n+\n+                fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+            }\n+        }\n+\n+        return query.toString();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private String getQuery(final SubjectCond cond, final boolean not, final List<Object> parameters,\n+            final SubjectType type, final SearchSupport svs) {\n+\n+        final AttributableUtil attrUtil = JPAAttributableUtil.getInstance(type.asAttributableType());\n+\n+        Field subjectField = ReflectionUtils.findField(attrUtil.attributableClass(), cond.getSchema());\n+        if (subjectField == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        PlainSchema schema = attrUtil.newPlainSchema();\n+        schema.setKey(subjectField.getName());\n+        for (AttrSchemaType attrSchemaType : AttrSchemaType.values()) {\n+            if (subjectField.getType().isAssignableFrom(attrSchemaType.getType())) {\n+                schema.setType(attrSchemaType);\n+            }\n+        }\n+\n+        // Deal with subject Integer fields logically mapping to boolean values\n+        // (SyncopeRole.inheritAttrs, for example)\n+        boolean foundBooleanMin = false;\n+        boolean foundBooleanMax = false;\n+        if (Integer.class.equals(subjectField.getType())) {\n+            for (Annotation annotation : subjectField.getAnnotations()) {\n+                if (Min.class.equals(annotation.annotationType())) {\n+                    foundBooleanMin = ((Min) annotation).value() == 0;\n+                } else if (Max.class.equals(annotation.annotationType())) {\n+                    foundBooleanMax = ((Max) annotation).value() == 1;\n+                }\n+            }\n+        }\n+        if (foundBooleanMin && foundBooleanMax) {\n+            schema.setType(AttrSchemaType.Boolean);\n+        }\n+\n+        // Deal with subject fields representing relationships to other entities\n+        if (subjectField.getType().getAnnotation(Entity.class) != null) {\n+            if (BeanUtils.findDeclaredMethodWithMinimalParameters(subjectField.getType(), \"getId\") != null) {\n+                cond.setSchema(cond.getSchema() + \"_id\");\n+                schema.setType(AttrSchemaType.Long);\n+            }\n+            if (BeanUtils.findDeclaredMethodWithMinimalParameters(subjectField.getType(), \"getName\") != null) {\n+                cond.setSchema(cond.getSchema() + \"_name\");\n+                schema.setType(AttrSchemaType.String);\n+            }\n+        }\n+\n+        PlainAttrValue attrValue = attrUtil.newPlainAttrValue();\n+        if (cond.getType() != AttributeCond.Type.LIKE\n+                && cond.getType() != AttributeCond.Type.ISNULL\n+                && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+\n+            try {\n+                schema.getValidator().validate(cond.getExpression(), attrValue);\n+            } catch (ValidationException e) {\n+                LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+                return EMPTY_ATTR_QUERY;\n+            }\n+        }\n+\n+        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+\n+        return query.toString();\n+    }\n+}"},{"sha":"d1d9b154dc47fa6d4ced931eef50927ecdb5fee9","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPATaskDAO.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.task.Task;\n+import org.apache.syncope.persistence.jpa.entity.task.JPANotificationTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPAPropagationTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPAPushTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPASchedTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPASyncTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPATask;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPATaskDAO extends AbstractDAO<Task, Long> implements TaskDAO {\n+\n+    @Override\n+    public Class<? extends Task> getEntityReference(final TaskType type) {\n+        Class<? extends Task> result = null;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = JPANotificationTask.class;\n+                break;\n+\n+            case PROPAGATION:\n+                result = JPAPropagationTask.class;\n+                break;\n+\n+            case PUSH:\n+                result = JPAPushTask.class;\n+                break;\n+\n+            case SCHEDULED:\n+                result = JPASchedTask.class;\n+                break;\n+\n+            case SYNCHRONIZATION:\n+                result = JPASyncTask.class;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T extends Task> T find(final Long key) {\n+        return (T) entityManager.find(JPATask.class, key);\n+    }\n+\n+    private <T extends Task> StringBuilder buildfindAllQuery(final TaskType type) {\n+        return new StringBuilder(\"SELECT e FROM \").\n+                append(getEntityReference(type).getSimpleName()).\n+                append(\" e WHERE e.type=:type \");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Task> List<T> findToExec(final TaskType type) {\n+        StringBuilder queryString = buildfindAllQuery(type).append(\"AND \");\n+\n+        if (type == TaskType.NOTIFICATION) {\n+            queryString.append(\"e.executed = 0 \");\n+        } else {\n+            queryString.append(\"e.executions IS EMPTY \");\n+        }\n+        queryString.append(\"ORDER BY e.id DESC\");\n+\n+        Query query = entityManager.createQuery(queryString.toString());\n+        query.setParameter(\"type\", type);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Task> List<T> findAll(final ExternalResource resource, final TaskType type) {\n+        StringBuilder queryString = buildfindAllQuery(type).append(\"AND e.resource=:resource ORDER BY e.id DESC\");\n+\n+        final Query query = entityManager.createQuery(queryString.toString());\n+        query.setParameter(\"type\", type);\n+        query.setParameter(\"resource\", resource);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends Task> List<T> findAll(final TaskType type) {\n+        return findAll(-1, -1, Collections.<OrderByClause>emptyList(), type);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n+            final List<OrderByClause> orderByClauses, final TaskType type) {\n+\n+        StringBuilder queryString = buildfindAllQuery(type);\n+        queryString.append(orderByClauses.isEmpty()\n+                ? \"ORDER BY e.id DESC\"\n+                : toOrderByStatement(getEntityReference(type), \"e\", orderByClauses));\n+\n+        Query query = entityManager.createQuery(queryString.toString());\n+        query.setParameter(\"type\", type);\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0\n+                ? 0\n+                : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public int count(final TaskType type) {\n+        Query countQuery = entityManager.createNativeQuery(\"SELECT COUNT(id) FROM Task WHERE TYPE=?1\");\n+        countQuery.setParameter(1, type.toString());\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    @Transactional(rollbackFor = { Throwable.class })\n+    @Override\n+    public <T extends Task> T save(final T task) {\n+        return entityManager.merge(task);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        Task task = find(id);\n+        if (task == null) {\n+            return;\n+        }\n+\n+        delete(task);\n+    }\n+\n+    @Override\n+    public void delete(final Task task) {\n+        entityManager.remove(task);\n+    }\n+\n+    @Override\n+    public void deleteAll(final ExternalResource resource, final TaskType type) {\n+        List<Task> tasks = findAll(resource, type);\n+        if (tasks != null) {\n+            List<Long> taskIds = new ArrayList<>(tasks.size());\n+            for (Task task : tasks) {\n+                taskIds.add(task.getKey());\n+            }\n+            for (Long taskId : taskIds) {\n+                delete(taskId);\n+            }\n+        }\n+    }\n+}"},{"sha":"cc47a2968c6b2f79d081d0718601376b218de968","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPATaskExecDAO.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.persistence.api.dao.TaskExecDAO;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.entity.task.Task;\n+import org.apache.syncope.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.persistence.jpa.entity.task.JPATaskExec;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPATaskExecDAO extends AbstractDAO<TaskExec, Long> implements TaskExecDAO {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Override\n+    public TaskExec find(final Long key) {\n+        return entityManager.find(JPATaskExec.class, key);\n+    }\n+\n+    private <T extends Task> TaskExec findLatest(final T task, final String field) {\n+        TypedQuery<TaskExec> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.task=:task \"\n+                + \"ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n+        query.setParameter(\"task\", task);\n+        query.setMaxResults(1);\n+\n+        List<TaskExec> result = query.getResultList();\n+        return result == null || result.isEmpty()\n+                ? null\n+                : result.iterator().next();\n+    }\n+\n+    @Override\n+    public <T extends Task> TaskExec findLatestStarted(final T task) {\n+        return findLatest(task, \"startDate\");\n+    }\n+\n+    @Override\n+    public <T extends Task> TaskExec findLatestEnded(final T task) {\n+        return findLatest(task, \"endDate\");\n+    }\n+\n+    @Override\n+    public List<TaskExec> findAll(final TaskType type) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPATaskExec.class.getSimpleName()).\n+                append(\" e WHERE e.task IN (\").append(\"SELECT t FROM \").\n+                append(taskDAO.getEntityReference(type).getSimpleName()).append(\" t)\");\n+\n+        TypedQuery<TaskExec> query = entityManager.createQuery(queryString.toString(), TaskExec.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public TaskExec save(final TaskExec execution) {\n+        return entityManager.merge(execution);\n+    }\n+\n+    /**\n+     * This method has an explicit Transactional annotation because it is called by\n+     * {@link org.apache.syncope.core.quartz.AbstractTaskJob#execute(org.quartz.JobExecutionContext) }.\n+     *\n+     * @param taskId task id\n+     * @param execution task execution\n+     * @throws InvalidEntityException if any bean validation fails\n+     */\n+    @Override\n+    @Transactional(rollbackFor = { Throwable.class })\n+    public void saveAndAdd(final Long taskId, final TaskExec execution) throws InvalidEntityException {\n+        Task task = taskDAO.find(taskId);\n+        task.addExec(execution);\n+        taskDAO.save(task);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        TaskExec execution = find(id);\n+        if (execution == null) {\n+            return;\n+        }\n+\n+        delete(execution);\n+    }\n+\n+    @Override\n+    public void delete(final TaskExec execution) {\n+        if (execution.getTask() != null) {\n+            execution.getTask().removeExec(execution);\n+        }\n+\n+        entityManager.remove(execution);\n+    }\n+}"},{"sha":"2c141a66b8f6e88ed2e0e6648de8ab55c2682d05","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAUserDAO.java","status":"added","additions":225,"deletions":0,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.persistence.api.dao.search.SubjectCond;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAUserDAO extends AbstractSubjectDAO<UPlainAttr, UDerAttr, UVirAttr> implements UserDAO {\n+\n+    @Autowired\n+    private SubjectSearchDAO searchDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Override\n+    protected Subject<UPlainAttr, UDerAttr, UVirAttr> findInternal(Long key) {\n+        return find(key);\n+    }\n+\n+    @Override\n+    public User find(final Long key) {\n+        TypedQuery<User> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAUser.class.getSimpleName() + \" e WHERE e.id = :id\", User.class);\n+        query.setParameter(\"id\", key);\n+\n+        User result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No user found with id {}\", key, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public User find(final String username) {\n+        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+                + \" e WHERE e.username = :username\", User.class);\n+        query.setParameter(\"username\", username);\n+\n+        User result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No user found with username {}\", username, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public User findByWorkflowId(final String workflowId) {\n+        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+                + \" e WHERE e.workflowId = :workflowId\", User.class);\n+        query.setParameter(\"workflowId\", workflowId);\n+\n+        User result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No user found with workflow id {}\", workflowId, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public User findByToken(final String token) {\n+        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+                + \" e WHERE e.token = :token\", User.class);\n+        query.setParameter(\"token\", token);\n+\n+        User result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No user found with token {}\", token, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion) {\n+        TypedQuery<User> query = entityManager.createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()\n+                + \" e WHERE e.securityQuestion = :securityQuestion\", User.class);\n+        query.setParameter(\"securityQuestion\", securityQuestion);\n+\n+        return query.getResultList();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public List<User> findByAttrValue(final String schemaName, final UPlainAttrValue attrValue) {\n+        return (List<User>) findByAttrValue(\n+                schemaName, attrValue, JPAAttributableUtil.getInstance(AttributableType.USER));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public User findByAttrUniqueValue(final String schemaName, final UPlainAttrValue attrUniqueValue) {\n+        return (User) findByAttrUniqueValue(schemaName, attrUniqueValue,\n+                JPAAttributableUtil.getInstance(AttributableType.USER));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public List<User> findByDerAttrValue(final String schemaName, final String value) {\n+        return (List<User>) findByDerAttrValue(\n+                schemaName, value, JPAAttributableUtil.getInstance(AttributableType.USER));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public List<User> findByResource(final ExternalResource resource) {\n+        return (List<User>) findByResource(resource, JPAAttributableUtil.getInstance(AttributableType.USER));\n+    }\n+\n+    @Override\n+    public final List<User> findAll(final Set<Long> adminRoles, final int page, final int itemsPerPage) {\n+        return findAll(adminRoles, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n+    }\n+\n+    private SearchCond getAllMatchingCond() {\n+        SubjectCond idCond = new SubjectCond(AttributeCond.Type.ISNOTNULL);\n+        idCond.setSchema(\"id\");\n+        return SearchCond.getLeafCond(idCond);\n+    }\n+\n+    @Override\n+    public List<User> findAll(final Set<Long> adminRoles,\n+            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n+\n+        return searchDAO.search(\n+                adminRoles, getAllMatchingCond(), page, itemsPerPage, orderBy, SubjectType.USER);\n+    }\n+\n+    @Override\n+    public final int count(final Set<Long> adminRoles) {\n+        return searchDAO.count(adminRoles, getAllMatchingCond(), SubjectType.USER);\n+    }\n+\n+    @Override\n+    public User save(final User user) {\n+        final User merged = entityManager.merge(user);\n+        for (VirAttr virAttr : merged.getVirAttrs()) {\n+            virAttr.getValues().clear();\n+            virAttr.getValues().addAll(user.getVirAttr(virAttr.getSchema().getKey()).getValues());\n+        }\n+\n+        return merged;\n+    }\n+\n+    @Override\n+    public void delete(final Long key) {\n+        User user = (User) findInternal(key);\n+        if (user == null) {\n+            return;\n+        }\n+\n+        delete(user);\n+    }\n+\n+    @Override\n+    public void delete(final User user) {\n+        // Not calling membershipDAO.delete() here because it would try to save this user as well, thus going into\n+        // ConcurrentModificationException\n+        for (Membership membership : user.getMemberships()) {\n+            membership.setUser(null);\n+\n+            roleDAO.save(membership.getRole());\n+            membership.setRole(null);\n+\n+            entityManager.remove(membership);\n+        }\n+        user.getMemberships().clear();\n+\n+        entityManager.remove(user);\n+    }\n+}"},{"sha":"62a1185cd594c88eb7526ee0a3e467db0a4a24e5","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAVirAttrDAO.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.persistence.api.dao.VirAttrDAO;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttr;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttr;\n+import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUVirAttr;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAVirAttrDAO extends AbstractDAO<VirAttr, Long> implements VirAttrDAO {\n+\n+    public <T extends VirAttr> Class<? extends AbstractVirAttr> getJPAEntityReference(\n+            final Class<T> reference) {\n+\n+        return RVirAttr.class.isAssignableFrom(reference)\n+                ? JPARVirAttr.class\n+                : MVirAttr.class.isAssignableFrom(reference)\n+                        ? JPAMVirAttr.class\n+                        : UVirAttr.class.isAssignableFrom(reference)\n+                                ? JPAUVirAttr.class\n+                                : null;\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> T find(final Long key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> List<T> findAll(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> T save(final T virAttr) {\n+        return entityManager.merge(virAttr);\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> void delete(final Long key, final Class<T> reference) {\n+        T virAttr = find(key, reference);\n+        if (virAttr == null) {\n+            return;\n+        }\n+\n+        delete(virAttr);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends VirAttr> void delete(final T virAttr) {\n+        if (virAttr.getOwner() != null) {\n+            ((Subject<?, ?, T>) virAttr.getOwner()).removeVirAttr(virAttr);\n+        }\n+\n+        entityManager.remove(virAttr);\n+    }\n+}"},{"sha":"c0311f2c5c65376fe6f6d4c7b1306cc938ea7b99","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.AttrTemplateDAO;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.VirAttrDAO;\n+import org.apache.syncope.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MVirSchema;\n+import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.persistence.api.entity.user.UVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUVirSchema;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPAVirSchemaDAO extends AbstractDAO<VirSchema, String> implements VirSchemaDAO {\n+\n+    @Autowired\n+    private VirAttrDAO virAttrDAO;\n+\n+    @Autowired\n+    private AttrTemplateDAO<VirSchema> attrTemplateDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    private <T extends VirSchema> Class<? extends AbstractVirSchema> getJPAEntityReference(final Class<T> reference) {\n+        return RVirSchema.class.isAssignableFrom(reference)\n+                ? JPARVirSchema.class\n+                : MVirSchema.class.isAssignableFrom(reference)\n+                        ? JPAMVirSchema.class\n+                        : UVirSchema.class.isAssignableFrom(reference)\n+                                ? JPAUVirSchema.class\n+                                : null;\n+    }\n+\n+    @Override\n+    public <T extends VirSchema> T find(final String key, final Class<T> reference) {\n+        return reference.cast(entityManager.find(getJPAEntityReference(reference), key));\n+    }\n+\n+    @Override\n+    public <T extends VirSchema> List<T> findAll(final Class<T> reference) {\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n+        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(((JPAVirAttrDAO) virAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n+                append(\" e WHERE e.\");\n+        if (UVirAttr.class.isAssignableFrom(reference)) {\n+            queryString.append(\"virSchema\");\n+        } else {\n+            queryString.append(\"template.schema\");\n+        }\n+        queryString.append(\"=:schema\");\n+\n+        TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n+        query.setParameter(\"schema\", schema);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public <T extends VirSchema> T save(final T virSchema) {\n+        return entityManager.merge(virSchema);\n+    }\n+\n+    @Override\n+    public void delete(final String name, final AttributableUtil attributableUtil) {\n+        final VirSchema schema = find(name, attributableUtil.virSchemaClass());\n+        if (schema == null) {\n+            return;\n+        }\n+\n+        final Set<Long> attrIds = new HashSet<>();\n+        for (VirAttr attr : findAttrs(schema, attributableUtil.virAttrClass())) {\n+            attrIds.add(attr.getKey());\n+        }\n+        for (Long attrId : attrIds) {\n+            virAttrDAO.delete(attrId, attributableUtil.virAttrClass());\n+        }\n+\n+        if (attributableUtil.getType() != AttributableType.USER) {\n+            for (Iterator<Number> it = attrTemplateDAO.\n+                    findBySchemaName(schema.getKey(), attributableUtil.virAttrTemplateClass()).iterator();\n+                    it.hasNext();) {\n+\n+                attrTemplateDAO.delete(it.next().longValue(), attributableUtil.virAttrTemplateClass());\n+            }\n+        }\n+\n+        resourceDAO.deleteMapping(name, attributableUtil.virIntMappingType(), UMappingItem.class);\n+\n+        entityManager.remove(schema);\n+    }\n+}"},{"sha":"aafaf0e4541cf2acf6fbc5ad1808936ad4fa43f8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/OrderBySupport.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FOrderBySupport.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+class OrderBySupport {\n+\n+    static class Item {\n+\n+        protected String select;\n+\n+        protected String where;\n+\n+        protected String orderBy;\n+\n+        protected boolean isEmpty() {\n+            return (select == null || select.isEmpty())\n+                    && (where == null || where.isEmpty())\n+                    && (orderBy == null || orderBy.isEmpty());\n+        }\n+    }\n+\n+    protected Set<SearchSupport.SearchView> views = new HashSet<>();\n+\n+    protected List<Item> items = new ArrayList<>();\n+\n+}"},{"sha":"2e2c7a74e37b6d36e206a64f83f5935701694a58","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/SearchSupport.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.dao;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+\n+class SearchSupport {\n+\n+    static class SearchView {\n+\n+        protected String alias;\n+\n+        protected String name;\n+\n+        protected SearchView(final String alias, final String name) {\n+            this.alias = alias;\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            return EqualsBuilder.reflectionEquals(this, obj);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return HashCodeBuilder.reflectionHashCode(this);\n+        }\n+    }\n+\n+    private final SubjectType type;\n+\n+    public SearchSupport(final SubjectType type) {\n+        this.type = type;\n+    }\n+\n+    public String fieldName(final AttrSchemaType type) {\n+        String result;\n+\n+        switch (type) {\n+            case Boolean:\n+                result = \"booleanvalue\";\n+                break;\n+\n+            case Date:\n+                result = \"datevalue\";\n+                break;\n+\n+            case Double:\n+                result = \"doublevalue\";\n+                break;\n+\n+            case Long:\n+                result = \"longvalue\";\n+                break;\n+\n+            case String:\n+            case Enum:\n+                result = \"stringvalue\";\n+                break;\n+\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    public SearchView field() {\n+        String result = \"\";\n+\n+        switch (type) {\n+            case USER:\n+            default:\n+                result = \"user_search\";\n+                break;\n+\n+            case ROLE:\n+                result = \"role_search\";\n+                break;\n+        }\n+\n+        return new SearchView(\"sv\", result);\n+    }\n+\n+    public SearchView attr() {\n+        return new SearchView(\"sva\", field().name + \"_attr\");\n+    }\n+\n+    public SearchView membership() {\n+        return new SearchView(\"svm\", field().name + \"_membership\");\n+    }\n+\n+    public SearchView nullAttr() {\n+        return new SearchView(\"svna\", field().name + \"_null_attr\");\n+    }\n+\n+    public SearchView resource() {\n+        return new SearchView(\"svr\", field().name + \"_resource\");\n+    }\n+\n+    public SearchView roleResource() {\n+        return new SearchView(\"svrr\", field().name + \"_role_resource\");\n+    }\n+\n+    public SearchView uniqueAttr() {\n+        return new SearchView(\"svua\", field().name + \"_unique_attr\");\n+    }\n+\n+    public SearchView entitlements() {\n+        return new SearchView(\"sve\", field().name + \"_entitlements\");\n+    }\n+}"},{"sha":"149767651b591a186c3d5a988e9502dee184acd1","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractAnnotatedEntity.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnnotatedEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnnotatedEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAnnotatedEntity.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.apache.syncope.persistence.api.entity.AnnotatedEntity;\n+\n+/**\n+ * Abstract wrapper for common system information.\n+ */\n+@MappedSuperclass\n+@EntityListeners(value = AnnotatedEntityListener.class)\n+public abstract class AbstractAnnotatedEntity<KEY> extends AbstractEntity<KEY> implements AnnotatedEntity<KEY> {\n+\n+    private static final long serialVersionUID = -4801685541488201219L;\n+\n+    /**\n+     * Username of the user that has created this profile.\n+     * <br/>\n+     * Reference to existing user cannot be used: the creator can either be <tt>admin</tt> or was deleted.\n+     */\n+    @Column(nullable = false)\n+    private String creator;\n+\n+    /**\n+     * Creation date.\n+     */\n+    @Column(nullable = false)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date creationDate;\n+\n+    /**\n+     * Username of the user that has performed the last modification to this profile.\n+     * <br/>\n+     * This field cannot be null: at creation time it needs to be initialized with the creator username.\n+     * <br/>\n+     * The modifier can be the user itself if the last performed change was a self-modification.\n+     * <br/>\n+     * Reference to existing user cannot be used: the creator can either be <tt>admin</tt> or was deleted.\n+     */\n+    @Column(nullable = false)\n+    private String lastModifier;\n+\n+    /**\n+     * Last change date.\n+     * <br/>\n+     * This field cannot be null: at creation time it needs to be initialized with <tt>creationDate</tt> field value.\n+     */\n+    @Column(nullable = false)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date lastChangeDate;\n+\n+    @Override\n+    public String getCreator() {\n+        return creator;\n+    }\n+\n+    @Override\n+    public void setCreator(final String creator) {\n+        this.creator = creator;\n+    }\n+\n+    @Override\n+    public Date getCreationDate() {\n+        return creationDate == null ? null : new Date(creationDate.getTime());\n+    }\n+\n+    @Override\n+    public void setCreationDate(final Date creationDate) {\n+        this.creationDate = creationDate == null ? null : new Date(creationDate.getTime());\n+    }\n+\n+    @Override\n+    public String getLastModifier() {\n+        return lastModifier;\n+    }\n+\n+    @Override\n+    public void setLastModifier(final String lastModifier) {\n+        this.lastModifier = lastModifier;\n+    }\n+\n+    @Override\n+    public Date getLastChangeDate() {\n+        return lastChangeDate == null ? creationDate : lastChangeDate;\n+    }\n+\n+    @Override\n+    public void setLastChangeDate(final Date lastChangeDate) {\n+        this.lastChangeDate = lastChangeDate == null ? null : new Date(lastChangeDate.getTime());\n+    }\n+}"},{"sha":"d3b65905c7abc3538a7dbc62fc8c446a5648664d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractAttrTemplate.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.persistence.api.entity.Schema;\n+\n+@MappedSuperclass\n+public abstract class AbstractAttrTemplate<S extends Schema> extends AbstractEntity<Long> implements AttrTemplate<S> {\n+\n+    private static final long serialVersionUID = 4829112252713766666L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+}"},{"sha":"a6398cff54305867b60f3f5f99953b12b38da010","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractAttributable.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttributable.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+\n+public abstract class AbstractAttributable<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n+        extends AbstractAnnotatedEntity<Long> implements Attributable<P, D, V> {\n+\n+    private static final long serialVersionUID = -4801685541488201119L;\n+\n+    @Override\n+    public P getPlainAttr(final String plainSchemaName) {\n+        P result = null;\n+        for (P plainAttr : getPlainAttrs()) {\n+            if (plainAttr != null && plainAttr.getSchema() != null\n+                    && plainSchemaName.equals(plainAttr.getSchema().getKey())) {\n+\n+                result = plainAttr;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public D getDerAttr(final String derSchemaName) {\n+        D result = null;\n+        for (D derAttr : getDerAttrs()) {\n+            if (derAttr != null && derAttr.getSchema() != null\n+                    && derSchemaName.equals(derAttr.getSchema().getKey())) {\n+\n+                result = derAttr;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public V getVirAttr(final String virSchemaName) {\n+        V result = null;\n+        for (V virAttr : getVirAttrs()) {\n+            if (virAttr != null && virAttr.getSchema() != null\n+                    && virSchemaName.equals(virAttr.getSchema().getKey())) {\n+\n+                result = virAttr;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    protected Map<PlainSchema, P> getPlainAttrMap() {\n+        final Map<PlainSchema, P> map = new HashMap<>();\n+\n+        for (P attr : getPlainAttrs()) {\n+            map.put(attr.getSchema(), attr);\n+        }\n+\n+        return map;\n+    }\n+\n+    protected Map<DerSchema, D> getDerAttrMap() {\n+        final Map<DerSchema, D> map = new HashMap<>();\n+\n+        for (D attr : getDerAttrs()) {\n+            map.put(attr.getSchema(), attr);\n+        }\n+\n+        return map;\n+    }\n+\n+    protected Map<VirSchema, V> getVirAttrMap() {\n+        final Map<VirSchema, V> map = new HashMap<>();\n+\n+        for (V attr : getVirAttrs()) {\n+            map.put(attr.getSchema(), attr);\n+        }\n+\n+        return map;\n+    }\n+}"},{"sha":"4e1eb4da6887664ce45b59b4d779bc0ca3d9cb64","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractDerAttr.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.Collection;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.server.utils.jexl.JexlUtil;\n+\n+@MappedSuperclass\n+public abstract class AbstractDerAttr extends AbstractEntity<Long> implements DerAttr {\n+\n+    private static final long serialVersionUID = 4740924251090424771L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    /**\n+     * @param attributes the set of attributes against which evaluate this derived attribute\n+     * @return the value of this derived attribute\n+     */\n+    @Override\n+    public String getValue(final Collection<? extends PlainAttr> attributes) {\n+        return JexlUtil.evaluate(getSchema().getExpression(), getOwner(), attributes);\n+    }\n+}"},{"sha":"e348aa720f6a64c4a43eece2f8206ade093886c9","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractDerSchema.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.jpa.validation.entity.SchemaNameCheck;\n+\n+@MappedSuperclass\n+@SchemaNameCheck\n+public abstract class AbstractDerSchema extends AbstractEntity<String> implements DerSchema {\n+\n+    private static final long serialVersionUID = -6173643493348674060L;\n+\n+    @Id\n+    private String name;\n+\n+    @Column(nullable = false)\n+    private String expression;\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.name = key;\n+    }\n+\n+    @Override\n+    public String getExpression() {\n+        return expression;\n+    }\n+\n+    @Override\n+    public void setExpression(final String expression) {\n+        this.expression = expression;\n+    }\n+\n+    @Override\n+    public AttrSchemaType getType() {\n+        return AttrSchemaType.String;\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return Boolean.FALSE.toString().toLowerCase();\n+    }\n+\n+    @Override\n+    public boolean isMultivalue() {\n+        return Boolean.TRUE;\n+    }\n+\n+    @Override\n+    public boolean isUniqueConstraint() {\n+        return Boolean.FALSE;\n+    }\n+\n+    @Override\n+    public boolean isReadonly() {\n+        return Boolean.FALSE;\n+    }\n+\n+}"},{"sha":"720b62b189de073411eac3e6f723dc6d901c4cf7","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractEntity.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.beans.PropertyDescriptor;\n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.persistence.api.entity.Entity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+\n+public abstract class AbstractEntity<KEY> implements Entity<KEY>, Serializable {\n+\n+    private static final long serialVersionUID = -9017214159540857901L;\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractEntity.class);\n+\n+    protected void checkType(final Object object, final Class<?> clazz) {\n+        if (object !=null && !clazz.isInstance(object)) {\n+            throw new ClassCastException(\"Expected \" + clazz.getName() + \", got \" + object.getClass().getName());\n+        }\n+    }\n+\n+    /**\n+     * @param property the integer representing a boolean value\n+     * @return the boolean value corresponding to the property param\n+     */\n+    public final boolean isBooleanAsInteger(final Integer property) {\n+        return property != null && property == 1;\n+    }\n+\n+    /**\n+     * @param value the boolean value to be represented as integer\n+     * @return the integer corresponding to the property param\n+     */\n+    public final Integer getBooleanAsInteger(final Boolean value) {\n+        return Boolean.TRUE.equals(value)\n+                ? 1\n+                : 0;\n+    }\n+\n+    /**\n+     * @return fields to be excluded when computing equals() or hashcode()\n+     */\n+    private String[] getExcludeFields() {\n+        Set<String> excludeFields = new HashSet<>();\n+\n+        for (PropertyDescriptor propDesc : BeanUtils.getPropertyDescriptors(getClass())) {\n+            if (propDesc.getPropertyType().isInstance(Collections.emptySet())\n+                    || propDesc.getPropertyType().isInstance(Collections.emptyList())) {\n+\n+                excludeFields.add(propDesc.getName());\n+            }\n+        }\n+\n+        return excludeFields.toArray(new String[] {});\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj, getExcludeFields());\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this, getExcludeFields());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        Method method = BeanUtils.findMethod(getClass(), \"getKey\");\n+\n+        StringBuilder result = new StringBuilder().append(getClass().getSimpleName()).append('[');\n+        if (method != null) {\n+            try {\n+                result.append(method.invoke(this));\n+            } catch (Exception e) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.error(\"While serializing to string\", e);\n+                }\n+            }\n+        }\n+        result.append(']');\n+\n+        return result.toString();\n+    }\n+}"},{"sha":"0d62824339a1d80bbafc9148fb86f10f3a972160","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractExec.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Lob;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.apache.syncope.persistence.api.entity.Exec;\n+\n+@MappedSuperclass\n+public abstract class AbstractExec extends AbstractEntity<Long> implements Exec {\n+\n+    private static final long serialVersionUID = -812344822970166317L;\n+\n+    @Column(nullable = false)\n+    protected String status;\n+\n+    /**\n+     * Any information to be accompanied to this execution's result.\n+     */\n+    @Lob\n+    protected String message;\n+\n+    /**\n+     * Start instant of this execution.\n+     */\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date startDate;\n+\n+    /**\n+     * End instant of this execution.\n+     */\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date endDate;\n+\n+    @Override\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    @Override\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    /**\n+     * Set a message for this execution, taking care of replacing every null character with newline.\n+     *\n+     * @param message the message to set for this execution\n+     */\n+    @Override\n+    public void setMessage(String message) {\n+        if (message != null) {\n+            message = message.replace('\\0', '\\n');\n+        }\n+        this.message = message;\n+    }\n+\n+    @Override\n+    public Date getEndDate() {\n+        return endDate == null\n+                ? null\n+                : new Date(endDate.getTime());\n+    }\n+\n+    @Override\n+\n+    public void setEndDate(final Date endDate) {\n+        this.endDate = endDate == null\n+                ? null\n+                : new Date(endDate.getTime());\n+    }\n+\n+    @Override\n+\n+    public Date getStartDate() {\n+        return startDate == null\n+                ? null\n+                : new Date(startDate.getTime());\n+    }\n+\n+    @Override\n+\n+    public void setStartDate(final Date startDate) {\n+        this.startDate = startDate == null\n+                ? null\n+                : new Date(startDate.getTime());\n+    }\n+}"},{"sha":"f48a2bb33df75636fd2a2ab76f0a6c147a858123","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractMapping.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractMapping.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.persistence.api.entity.Mapping;\n+import org.apache.syncope.persistence.api.entity.MappingItem;\n+\n+@MappedSuperclass\n+@Cacheable\n+public abstract class AbstractMapping<T extends MappingItem> extends AbstractEntity<Long> implements Mapping<T> {\n+\n+    private static final long serialVersionUID = 4316047254916259158L;\n+\n+    /**\n+     * A JEXL expression for determining how to find the account id in external resource's space.\n+     */\n+    private String accountLink;\n+\n+    @Override\n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    @Override\n+    public void setAccountLink(final String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n+    @Override\n+    public T getAccountIdItem() {\n+        T accountIdItem = null;\n+        for (T item : getItems()) {\n+            if (item.isAccountid()) {\n+                accountIdItem = item;\n+            }\n+        }\n+        return accountIdItem;\n+    }\n+\n+    protected boolean addAccountIdItem(final T accountIdItem) {\n+        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n+                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+\n+            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n+        }\n+        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n+            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n+        }\n+\n+        accountIdItem.setExtAttrName(accountIdItem.getExtAttrName());\n+        accountIdItem.setAccountid(true);\n+\n+        return this.addItem(accountIdItem);\n+    }\n+}"},{"sha":"7ad5e979a75457e649781e92844f508ac55f474d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractMappingItem.java","status":"added","additions":190,"deletions":0,"changes":190,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractMappingItem.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.persistence.api.entity.MappingItem;\n+\n+@MappedSuperclass\n+@Cacheable\n+public abstract class AbstractMappingItem extends AbstractEntity<Long> implements MappingItem {\n+\n+    private static final long serialVersionUID = 7383601853619332424L;\n+\n+    @Column(nullable = true)\n+    private String intAttrName;\n+\n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private IntMappingType intMappingType;\n+\n+    /**\n+     * Target resource's field to be mapped.\n+     */\n+    @Column(nullable = true)\n+    private String extAttrName;\n+\n+    /**\n+     * Specify if the mapped target resource's field is nullable.\n+     */\n+    @Column(nullable = false)\n+    private String mandatoryCondition;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the key.\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer accountid;\n+\n+    /**\n+     * Specify if the mapped target resource's field is the password.\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer password;\n+\n+    /**\n+     * Mapping purposes: SYNCHRONIZATION, PROPAGATION, BOTH.\n+     */\n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private MappingPurpose purpose;\n+\n+    public AbstractMappingItem() {\n+        super();\n+\n+        mandatoryCondition = Boolean.FALSE.toString();\n+\n+        accountid = getBooleanAsInteger(false);\n+        password = getBooleanAsInteger(false);\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n+    }\n+\n+    @Override\n+    public void setMandatoryCondition(final String mandatoryCondition) {\n+        this.mandatoryCondition = mandatoryCondition;\n+    }\n+\n+    @Override\n+    public String getIntAttrName() {\n+        final String name;\n+\n+        switch (getIntMappingType()) {\n+            case UserId:\n+            case RoleId:\n+            case MembershipId:\n+                name = \"id\";\n+                break;\n+\n+            case Username:\n+                name = \"username\";\n+                break;\n+\n+            case Password:\n+                name = \"password\";\n+                break;\n+\n+            case RoleName:\n+                name = \"roleName\";\n+                break;\n+\n+            case RoleOwnerSchema:\n+                name = \"roleOwnerSchema\";\n+                break;\n+\n+            default:\n+                name = intAttrName;\n+        }\n+\n+        return name;\n+    }\n+\n+    @Override\n+    public void setIntAttrName(final String intAttrName) {\n+        this.intAttrName = intAttrName;\n+    }\n+\n+    @Override\n+    public IntMappingType getIntMappingType() {\n+        return intMappingType;\n+    }\n+\n+    @Override\n+    public void setIntMappingType(final IntMappingType intMappingType) {\n+        this.intMappingType = intMappingType;\n+    }\n+\n+    @Override\n+    public boolean isAccountid() {\n+        return isBooleanAsInteger(accountid);\n+    }\n+\n+    @Override\n+    public void setAccountid(final boolean accountid) {\n+        this.accountid = getBooleanAsInteger(accountid);\n+    }\n+\n+    @Override\n+    public boolean isPassword() {\n+        return isBooleanAsInteger(password);\n+    }\n+\n+    @Override\n+    public void setPassword(final boolean password) {\n+        this.password = getBooleanAsInteger(password);\n+    }\n+\n+    @Override\n+    public MappingPurpose getPurpose() {\n+        return purpose;\n+    }\n+\n+    @Override\n+    public void setPurpose(final MappingPurpose purpose) {\n+        this.purpose = purpose;\n+    }\n+}"},{"sha":"4c8f2db149b4be40593d6affa12fb5cf1e4b3856","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractPlainAttr.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.jpa.validation.entity.PlainAttrCheck;\n+\n+@MappedSuperclass\n+@PlainAttrCheck\n+public abstract class AbstractPlainAttr extends AbstractEntity<Long> implements PlainAttr {\n+\n+    private static final long serialVersionUID = -9115431608821806124L;\n+\n+    protected abstract boolean addValue(PlainAttrValue attrValue);\n+\n+    @Override\n+    public void addValue(final String value, final AttributableUtil attributableUtil)\n+            throws InvalidPlainAttrValueException {\n+\n+        PlainAttrValue attrValue;\n+        if (getSchema().isUniqueConstraint()) {\n+            attrValue = attributableUtil.newPlainAttrUniqueValue();\n+            ((PlainAttrUniqueValue) attrValue).setSchema(getSchema());\n+        } else {\n+            attrValue = attributableUtil.newPlainAttrValue();\n+        }\n+\n+        attrValue.setAttr(this);\n+        getSchema().getValidator().validate(value, attrValue);\n+\n+        if (getSchema().isUniqueConstraint()) {\n+            setUniqueValue((PlainAttrUniqueValue) attrValue);\n+        } else {\n+            if (!getSchema().isMultivalue()) {\n+                getValues().clear();\n+            }\n+            addValue(attrValue);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getValuesAsStrings() {\n+        List<String> result;\n+        if (getUniqueValue() == null) {\n+            result = new ArrayList<>(getValues().size());\n+            for (PlainAttrValue attributeValue : getValues()) {\n+                result.add(attributeValue.getValueAsString());\n+            }\n+        } else {\n+            result = Collections.singletonList(getUniqueValue().getValueAsString());\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"282e3daf24aadb4d1409d774df26b83de63547b9","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,282 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.Basic;\n+import javax.persistence.Lob;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.server.utils.DataFormat;\n+import org.apache.syncope.persistence.jpa.validation.entity.PlainAttrValueCheck;\n+import org.apache.syncope.server.security.Encryptor;\n+\n+@MappedSuperclass\n+@PlainAttrValueCheck\n+public abstract class AbstractPlainAttrValue extends AbstractEntity<Long> implements PlainAttrValue {\n+\n+    private static final long serialVersionUID = -9141923816611244785L;\n+\n+    private String stringValue;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date dateValue;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer booleanValue;\n+\n+    private Long longValue;\n+\n+    private Double doubleValue;\n+\n+    @Lob\n+    private byte[] binaryValue;\n+\n+    @Override\n+    public Boolean getBooleanValue() {\n+        return booleanValue == null\n+                ? null\n+                : isBooleanAsInteger(booleanValue);\n+    }\n+\n+    @Override\n+    public void setBooleanValue(final Boolean booleanValue) {\n+        this.booleanValue = booleanValue == null\n+                ? null\n+                : getBooleanAsInteger(booleanValue);\n+    }\n+\n+    @Override\n+    public Date getDateValue() {\n+        return dateValue == null\n+                ? null\n+                : new Date(dateValue.getTime());\n+    }\n+\n+    @Override\n+    public void setDateValue(final Date dateValue) {\n+        this.dateValue = dateValue == null\n+                ? null\n+                : new Date(dateValue.getTime());\n+    }\n+\n+    @Override\n+    public Double getDoubleValue() {\n+        return doubleValue;\n+    }\n+\n+    @Override\n+    public void setDoubleValue(final Double doubleValue) {\n+        this.doubleValue = doubleValue;\n+    }\n+\n+    @Override\n+    public Long getLongValue() {\n+        return longValue;\n+    }\n+\n+    @Override\n+    public void setLongValue(final Long longValue) {\n+        this.longValue = longValue;\n+    }\n+\n+    @Override\n+    public String getStringValue() {\n+        return stringValue;\n+    }\n+\n+    @Override\n+    public void setStringValue(final String stringValue) {\n+        this.stringValue = stringValue;\n+    }\n+\n+    @Override\n+    public byte[] getBinaryValue() {\n+        return binaryValue;\n+    }\n+\n+    @Override\n+    public void setBinaryValue(final byte[] binaryValue) {\n+        this.binaryValue = ArrayUtils.clone(binaryValue);\n+    }\n+\n+    @Override\n+    public void parseValue(final PlainSchema schema, final String value) throws ParsingValidationException {\n+        Exception exception = null;\n+\n+        switch (schema.getType()) {\n+\n+            case Boolean:\n+                this.setBooleanValue(Boolean.parseBoolean(value));\n+                break;\n+\n+            case Long:\n+                try {\n+                    this.setLongValue(schema.getConversionPattern() == null\n+                            ? Long.valueOf(value)\n+                            : DataFormat.parseNumber(value, schema.getConversionPattern()).longValue());\n+                } catch (Exception pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Double:\n+                try {\n+                    this.setDoubleValue(schema.getConversionPattern() == null\n+                            ? Double.valueOf(value)\n+                            : DataFormat.parseNumber(value, schema.getConversionPattern()).doubleValue());\n+                } catch (Exception pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Date:\n+                try {\n+                    this.setDateValue(schema.getConversionPattern() == null\n+                            ? DataFormat.parseDate(value)\n+                            : new Date(DataFormat.parseDate(value, schema.getConversionPattern()).getTime()));\n+                } catch (Exception pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Encrypted:\n+                try {\n+                    this.setStringValue(Encryptor.getInstance(schema.getSecretKey()).\n+                            encode(value, schema.getCipherAlgorithm()));\n+                } catch (Exception pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Binary:\n+                this.setBinaryValue(Base64.decodeBase64(value));\n+                break;\n+\n+            case String:\n+            case Enum:\n+            default:\n+                this.setStringValue(value);\n+        }\n+\n+        if (exception != null) {\n+            throw new ParsingValidationException(\"While trying to parse '\" + value + \"' as \" + schema.getKey(),\n+                    exception);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T> T getValue() {\n+        return (T) (booleanValue != null\n+                ? getBooleanValue()\n+                : dateValue != null\n+                        ? getDateValue()\n+                        : doubleValue != null\n+                                ? getDoubleValue()\n+                                : longValue != null\n+                                        ? getLongValue()\n+                                        : binaryValue != null\n+                                                ? getBinaryValue()\n+                                                : stringValue);\n+    }\n+\n+    @Override\n+    public String getValueAsString() {\n+        final AttrSchemaType type = getAttr() == null || getAttr().getSchema() == null\n+                || getAttr().getSchema().getType() == null\n+                        ? AttrSchemaType.String\n+                        : getAttr().getSchema().getType();\n+\n+        return getValueAsString(type);\n+    }\n+\n+    @Override\n+    public String getValueAsString(final AttrSchemaType type) {\n+        Exception exception = null;\n+\n+        String result = null;\n+\n+        switch (type) {\n+\n+            case Boolean:\n+                result = getBooleanValue().toString();\n+                break;\n+\n+            case Long:\n+                result = getAttr() == null || getAttr().getSchema() == null\n+                        || getAttr().getSchema().getConversionPattern() == null\n+                                ? getLongValue().toString()\n+                                : DataFormat.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n+                break;\n+\n+            case Double:\n+                result = getAttr() == null || getAttr().getSchema() == null\n+                        || getAttr().getSchema().getConversionPattern() == null\n+                                ? getDoubleValue().toString()\n+                                : DataFormat.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n+                break;\n+\n+            case Date:\n+                result = getAttr() == null || getAttr().getSchema() == null\n+                        || getAttr().getSchema().getConversionPattern() == null\n+                                ? DataFormat.format(getDateValue())\n+                                : DataFormat.format(getDateValue(), false, getAttr().getSchema().\n+                                        getConversionPattern());\n+                break;\n+\n+            case Binary:\n+                result = new String(Base64.encodeBase64String(getBinaryValue()));\n+                break;\n+\n+            case String:\n+            case Enum:\n+            case Encrypted:\n+            default:\n+                result = getStringValue();\n+                break;\n+        }\n+\n+        if (exception != null) {\n+            throw new InvalidPlainAttrValueException(\n+                    \"While trying to format '\" + getValue() + \"' as \" + type, exception);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"075252a590eea581f41fa9bfb7028bdfe2dff1e5","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractPlainSchema.java","status":"added","additions":271,"deletions":0,"changes":271,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.lang.reflect.Constructor;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Transient;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.jpa.attrvalue.validation.BasicValidator;\n+import org.apache.syncope.persistence.jpa.validation.entity.PlainSchemaCheck;\n+import org.apache.syncope.persistence.jpa.validation.entity.SchemaNameCheck;\n+\n+@MappedSuperclass\n+@PlainSchemaCheck\n+@SchemaNameCheck\n+public abstract class AbstractPlainSchema extends AbstractEntity<String> implements PlainSchema {\n+\n+    private static final long serialVersionUID = -8621028596062054739L;\n+\n+    @Id\n+    private String name;\n+\n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private AttrSchemaType type;\n+\n+    @Column(nullable = false)\n+    private String mandatoryCondition;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer multivalue;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer uniqueConstraint;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer readonly;\n+\n+    @Column(nullable = true)\n+    private String conversionPattern;\n+\n+    @Column(nullable = true)\n+    private String validatorClass;\n+\n+    @Column(nullable = true)\n+    @Lob\n+    private String enumerationValues;\n+\n+    @Column(nullable = true)\n+    @Lob\n+    private String enumerationKeys;\n+\n+    @Column(nullable = true)\n+    private String secretKey;\n+\n+    @Column(nullable = true)\n+    @Enumerated(EnumType.STRING)\n+    private CipherAlgorithm cipherAlgorithm;\n+\n+    @Column(nullable = true)\n+    private String mimeType;\n+\n+    @Transient\n+    private Validator validator;\n+\n+    public AbstractPlainSchema() {\n+        super();\n+\n+        type = AttrSchemaType.String;\n+        mandatoryCondition = Boolean.FALSE.toString();\n+        multivalue = getBooleanAsInteger(false);\n+        uniqueConstraint = getBooleanAsInteger(false);\n+        readonly = getBooleanAsInteger(false);\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public AttrSchemaType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public void setType(final AttrSchemaType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return mandatoryCondition;\n+    }\n+\n+    @Override\n+    public void setMandatoryCondition(final String condition) {\n+        this.mandatoryCondition = condition;\n+    }\n+\n+    @Override\n+    public boolean isMultivalue() {\n+        return isBooleanAsInteger(multivalue);\n+    }\n+\n+    @Override\n+    public void setMultivalue(boolean multivalue) {\n+        this.multivalue = getBooleanAsInteger(multivalue);\n+    }\n+\n+    @Override\n+    public boolean isUniqueConstraint() {\n+        return isBooleanAsInteger(uniqueConstraint);\n+    }\n+\n+    @Override\n+    public void setUniqueConstraint(final boolean uniquevalue) {\n+        this.uniqueConstraint = getBooleanAsInteger(uniquevalue);\n+    }\n+\n+    @Override\n+    public boolean isReadonly() {\n+        return isBooleanAsInteger(readonly);\n+    }\n+\n+    @Override\n+    public void setReadonly(final boolean readonly) {\n+        this.readonly = getBooleanAsInteger(readonly);\n+    }\n+\n+    @Override\n+    public Validator getValidator() {\n+        if (validator != null) {\n+            return validator;\n+        }\n+\n+        if (getValidatorClass() != null && getValidatorClass().length() > 0) {\n+            try {\n+                Constructor<?> validatorConstructor = Class.forName(getValidatorClass()).\n+                        getConstructor(new Class<?>[] { PlainSchema.class });\n+                validator = (Validator) validatorConstructor.newInstance(this);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not instantiate validator of type {}, reverting to {}\",\n+                        getValidatorClass(), BasicValidator.class.getSimpleName(), e);\n+            }\n+        }\n+\n+        if (validator == null) {\n+            validator = new BasicValidator(this);\n+        }\n+\n+        return validator;\n+    }\n+\n+    @Override\n+    public String getValidatorClass() {\n+        return validatorClass;\n+    }\n+\n+    @Override\n+    public void setValidatorClass(final String validatorClass) {\n+        this.validatorClass = validatorClass;\n+    }\n+\n+    @Override\n+    public String getEnumerationValues() {\n+        return enumerationValues;\n+    }\n+\n+    @Override\n+    public void setEnumerationValues(final String enumerationValues) {\n+        this.enumerationValues = enumerationValues;\n+    }\n+\n+    @Override\n+    public String getEnumerationKeys() {\n+        return enumerationKeys;\n+    }\n+\n+    @Override\n+    public void setEnumerationKeys(String enumerationKeys) {\n+        this.enumerationKeys = enumerationKeys;\n+    }\n+\n+    @Override\n+    public String getConversionPattern() {\n+        if (!getType().isConversionPatternNeeded()) {\n+            LOG.debug(\"Conversion pattern is not needed: {}'s type is {}\", this, getType());\n+        }\n+\n+        return conversionPattern;\n+    }\n+\n+    @Override\n+    public void setConversionPattern(final String conversionPattern) {\n+        if (!getType().isConversionPatternNeeded()) {\n+            LOG.warn(\"Conversion pattern will be ignored: this attribute type is {}\", getType());\n+        }\n+\n+        this.conversionPattern = conversionPattern;\n+    }\n+\n+    @Override\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    @Override\n+    public void setSecretKey(final String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    @Override\n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return cipherAlgorithm;\n+    }\n+\n+    @Override\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        this.cipherAlgorithm = cipherAlgorithm;\n+    }\n+\n+    @Override\n+    public String getMimeType() {\n+        return mimeType;\n+    }\n+\n+    @Override\n+    public void setMimeType(final String mimeType) {\n+        this.mimeType = mimeType;\n+    }\n+\n+}"},{"sha":"36286974ba8f5c742e626674dd56e3dd3d4d183d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractSubject.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.Subject;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+\n+public abstract class AbstractSubject<P extends PlainAttr, D extends DerAttr, V extends VirAttr>\n+        extends AbstractAttributable<P, D, V> implements Subject<P, D, V> {\n+\n+    private static final long serialVersionUID = -6876467491398928855L;\n+\n+    protected abstract Set<? extends ExternalResource> internalGetResources();\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public boolean addResource(final ExternalResource resource) {\n+        return ((Set<ExternalResource>) internalGetResources()).add(resource);\n+    }\n+\n+    @Override\n+    public boolean removeResource(final ExternalResource resource) {\n+        return internalGetResources().remove(resource);\n+    }\n+\n+    @Override\n+    public Set<? extends ExternalResource> getResources() {\n+        return internalGetResources();\n+    }\n+\n+    @Override\n+    public Set<String> getResourceNames() {\n+        Set<? extends ExternalResource> ownResources = getResources();\n+\n+        Set<String> result = new HashSet<>(ownResources.size());\n+        for (ExternalResource resource : ownResources) {\n+            result.add(resource.getKey());\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"3805489f485eae54b323953075ca797cf910f20d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractVirAttr.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Transient;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+\n+@MappedSuperclass\n+public abstract class AbstractVirAttr extends AbstractEntity<Long> implements VirAttr {\n+\n+    private static final long serialVersionUID = 5023204776925954907L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    protected Long id;\n+\n+    @Transient\n+    protected List<String> values = new ArrayList<>();\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public List<String> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public boolean addValue(final String value) {\n+        return !values.contains(value) && values.add(value);\n+    }\n+\n+    @Override\n+    public boolean removeValue(final String value) {\n+        return values.remove(value);\n+    }\n+}"},{"sha":"311350e8d4410aa8c1affad2c6ecbe737bb63583","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AbstractVirSchema.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.jpa.validation.entity.SchemaNameCheck;\n+\n+@MappedSuperclass\n+@SchemaNameCheck\n+public abstract class AbstractVirSchema extends AbstractEntity<String> implements VirSchema {\n+\n+    private static final long serialVersionUID = 3274006935328590141L;\n+\n+    @Id\n+    private String name;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer readonly;\n+\n+    public AbstractVirSchema() {\n+        super();\n+\n+        readonly = getBooleanAsInteger(false);\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.name = key;\n+    }\n+\n+    @Override\n+    public AttrSchemaType getType() {\n+        return AttrSchemaType.String;\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return Boolean.FALSE.toString().toLowerCase();\n+    }\n+\n+    @Override\n+    public boolean isMultivalue() {\n+        return Boolean.TRUE;\n+    }\n+\n+    @Override\n+    public boolean isUniqueConstraint() {\n+        return Boolean.FALSE;\n+    }\n+\n+    @Override\n+    public boolean isReadonly() {\n+        return isBooleanAsInteger(readonly);\n+    }\n+\n+    @Override\n+    public void setReadonly(final boolean readonly) {\n+        this.readonly = getBooleanAsInteger(readonly);\n+    }\n+}"},{"sha":"e6ce64ff3860848217b1e1475b8cad87d91bae7d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/AnnotatedEntityListener.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import org.apache.syncope.persistence.api.entity.AnnotatedEntity;\n+import org.apache.syncope.server.security.AuthContextUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AnnotatedEntityListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(AnnotatedEntityListener.class);\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void setSysInfo(final AnnotatedEntity entity) {\n+        final String username = AuthContextUtil.getAuthenticatedUsername();\n+        LOG.debug(\"Set system properties for '{}'\", entity);\n+\n+        final Date now = new Date();\n+\n+        if (entity.getCreationDate() == null) {\n+            LOG.debug(\"Set creation date '{}' and creator '{}' for '{}'\", now, username, entity);\n+            entity.setCreationDate(now);\n+            entity.setCreator(username);\n+        }\n+\n+        LOG.debug(\"Set last change date '{}' and modifier '{}' for '{}'\", now, username, entity);\n+        entity.setLastModifier(username);\n+        entity.setLastChangeDate(now);\n+    }\n+}"},{"sha":"229dd43ef78a70adb498466123199e688afbf6ea","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAAccountPolicy.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAAccountPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.validation.Valid;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+\n+@Entity\n+@DiscriminatorValue(\"AccountPolicy\")\n+public class JPAAccountPolicy extends JPAPolicy implements AccountPolicy {\n+\n+    private static final long serialVersionUID = -2767606675667839060L;\n+\n+    /**\n+     * Resources for alternative user authentication: if empty, only internal storage will be used.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"account_policy_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"resource_name\"))\n+    @Valid\n+    private Set<JPAExternalResource> resources;\n+\n+    public JPAAccountPolicy() {\n+        this(false);\n+        this.resources = new HashSet<>();\n+    }\n+\n+    public JPAAccountPolicy(final boolean global) {\n+        super();\n+\n+        this.type = global\n+                ? PolicyType.GLOBAL_ACCOUNT\n+                : PolicyType.ACCOUNT;\n+    }\n+\n+    @Override\n+    public boolean addResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public boolean removeResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return resources.remove((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public Set<? extends ExternalResource> getResources() {\n+        return resources;\n+    }\n+\n+    @Override\n+    public Set<String> getResourceNames() {\n+        Set<String> result = new HashSet<>(resources.size());\n+        for (ExternalResource resource : resources) {\n+            result.add(resource.getKey());\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"2705285e2b01d26bd42846fc2dade0c9be0cedab","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAAttributableUtil.java","status":"added","additions":882,"deletions":0,"changes":882,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtil.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,882 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.AttributableUtil;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.MappingItem;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPACPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.conf.JPAConf;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUVirAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUser;\n+import org.apache.syncope.server.spring.BeanUtils;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+public class JPAAttributableUtil implements AttributableUtil {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AttributableUtil.class);\n+\n+    public static AttributableUtil getInstance(final AttributableType type) {\n+        return new JPAAttributableUtil(type);\n+    }\n+\n+    public static AttributableUtil valueOf(final String name) {\n+        return new JPAAttributableUtil(AttributableType.valueOf(name));\n+    }\n+\n+    public static AttributableUtil getInstance(final ObjectClass objectClass) {\n+        AttributableType type = null;\n+        if (ObjectClass.ACCOUNT.equals(objectClass)) {\n+            type = AttributableType.USER;\n+        }\n+        if (ObjectClass.GROUP.equals(objectClass)) {\n+            type = AttributableType.ROLE;\n+        }\n+\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"ObjectClass not supported: \" + objectClass);\n+        }\n+\n+        return new JPAAttributableUtil(type);\n+    }\n+\n+    public static AttributableUtil getInstance(final Attributable attributable) {\n+        AttributableType type = null;\n+        if (attributable instanceof User) {\n+            type = AttributableType.USER;\n+        }\n+        if (attributable instanceof Role) {\n+            type = AttributableType.ROLE;\n+        }\n+        if (attributable instanceof Membership) {\n+            type = AttributableType.MEMBERSHIP;\n+        }\n+        if (attributable instanceof Conf) {\n+            type = AttributableType.CONFIGURATION;\n+        }\n+\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"Attributable type not supported: \" + attributable.getClass().getName());\n+        }\n+\n+        return new JPAAttributableUtil(type);\n+    }\n+\n+    private final AttributableType type;\n+\n+    private JPAAttributableUtil(final AttributableType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public AttributableType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public <T extends Attributable<?, ?, ?>> Class<T> attributableClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = JPARole.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMembership.class;\n+                break;\n+\n+            case CONFIGURATION:\n+                result = JPAConf.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUser.class;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainSchema> Class<T> plainSchemaClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = JPARPlainSchema.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMPlainSchema.class;\n+                break;\n+\n+            case CONFIGURATION:\n+                result = JPACPlainSchema.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainSchema.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainSchema> T newPlainSchema() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUPlainSchema();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARPlainSchema();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMPlainSchema();\n+                break;\n+\n+            case CONFIGURATION:\n+                result = (T) new JPACPlainSchema();\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr> Class<T> plainAttrClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = JPARPlainAttr.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMPlainAttr.class;\n+                break;\n+\n+            case CONFIGURATION:\n+                result = JPACPlainAttr.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainAttr.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttr> T newPlainAttr() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUPlainAttr();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARPlainAttr();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMPlainAttr();\n+                break;\n+\n+            case CONFIGURATION:\n+                result = (T) new JPACPlainAttr();\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> Class<T> plainAttrValueClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = JPARPlainAttrValue.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMPlainAttrValue.class;\n+                break;\n+\n+            case CONFIGURATION:\n+                result = JPACPlainAttrValue.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainAttrValue.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> T newPlainAttrValue() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUPlainAttrValue();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARPlainAttrValue();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMPlainAttrValue();\n+                break;\n+\n+            case CONFIGURATION:\n+                result = (T) new JPACPlainAttrValue();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> Class<T> plainAttrUniqueValueClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = JPARPlainAttrUniqueValue.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMPlainAttrUniqueValue.class;\n+                break;\n+\n+            case CONFIGURATION:\n+                result = JPACPlainAttrUniqueValue.class;\n+                break;\n+\n+            case USER:\n+            default:\n+                result = JPAUPlainAttrUniqueValue.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUPlainAttrUniqueValue();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARPlainAttrUniqueValue();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMPlainAttrUniqueValue();\n+                break;\n+\n+            case CONFIGURATION:\n+                result = (T) new JPACPlainAttrUniqueValue();\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<PlainSchema>> Class<T> plainAttrTemplateClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = JPARPlainAttrTemplate.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMPlainAttrTemplate.class;\n+                break;\n+\n+            case USER:\n+            case CONFIGURATION:\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends DerSchema> Class<T> derSchemaClass() {\n+        Class result;\n+\n+        switch (type) {\n+            case USER:\n+                result = JPAUDerSchema.class;\n+                break;\n+\n+            case ROLE:\n+                result = JPARDerSchema.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMDerSchema.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends DerSchema> T newDerSchema() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUDerSchema();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARDerSchema();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMDerSchema();\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> Class<T> derAttrClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = JPAUDerAttr.class;\n+                break;\n+\n+            case ROLE:\n+                result = JPARDerAttr.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMDerAttr.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends DerAttr> T newDerAttr() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUDerAttr();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARDerAttr();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMDerAttr();\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<DerSchema>> Class<T> derAttrTemplateClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case USER:\n+                break;\n+\n+            case ROLE:\n+                result = JPARDerAttrTemplate.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMDerAttrTemplate.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends VirSchema> Class<T> virSchemaClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = JPAUVirSchema.class;\n+                break;\n+\n+            case ROLE:\n+                result = JPARVirSchema.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMVirSchema.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends VirSchema> T newVirSchema() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUVirSchema();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARVirSchema();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMVirSchema();\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> Class<T> virAttrClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = JPAUVirAttr.class;\n+                break;\n+\n+            case ROLE:\n+                result = JPARVirAttr.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMVirAttr.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends VirAttr> T newVirAttr() {\n+        T result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = (T) new JPAUVirAttr();\n+                break;\n+\n+            case ROLE:\n+                result = (T) new JPARVirAttr();\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = (T) new JPAMVirAttr();\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<VirSchema>> Class<T> virAttrTemplateClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case USER:\n+                break;\n+\n+            case ROLE:\n+                result = JPARVirAttrTemplate.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = JPAMVirAttrTemplate.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends MappingItem> T getAccountIdItem(final ExternalResource resource) {\n+        T result = null;\n+\n+        if (resource != null) {\n+            switch (type) {\n+                case ROLE:\n+                    if (resource.getRmapping() != null) {\n+                        result = (T) resource.getRmapping().getAccountIdItem();\n+                    }\n+                    break;\n+\n+                case MEMBERSHIP:\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        result = (T) resource.getUmapping().getAccountIdItem();\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String getAccountLink(final ExternalResource resource) {\n+        String result = null;\n+\n+        if (resource != null) {\n+            switch (type) {\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        result = resource.getUmapping().getAccountLink();\n+                    }\n+                    break;\n+\n+                case ROLE:\n+                    if (resource.getRmapping() != null) {\n+                        result = resource.getRmapping().getAccountLink();\n+                    }\n+                    break;\n+\n+                case MEMBERSHIP:\n+                case CONFIGURATION:\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends MappingItem> List<T> getMappingItems(\n+            final ExternalResource resource, final MappingPurpose purpose) {\n+\n+        List<T> items = Collections.<T>emptyList();\n+\n+        if (resource != null) {\n+            switch (type) {\n+                case ROLE:\n+                    if (resource.getRmapping() != null) {\n+                        items = (List<T>) resource.getRmapping().getItems();\n+                    }\n+                    break;\n+\n+                case MEMBERSHIP:\n+                case USER:\n+                    if (resource.getUmapping() != null) {\n+                        items = (List<T>) resource.getUmapping().getItems();\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        final List<T> result = new ArrayList<T>();\n+\n+        switch (purpose) {\n+            case SYNCHRONIZATION:\n+                for (T item : items) {\n+                    if (MappingPurpose.PROPAGATION != item.getPurpose()\n+                            && MappingPurpose.NONE != item.getPurpose()) {\n+\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case PROPAGATION:\n+                for (T item : items) {\n+                    if (MappingPurpose.SYNCHRONIZATION != item.getPurpose()\n+                            && MappingPurpose.NONE != item.getPurpose()) {\n+\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case BOTH:\n+                for (T item : items) {\n+                    if (MappingPurpose.NONE != item.getPurpose()) {\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+\n+            case NONE:\n+                for (T item : items) {\n+                    if (MappingPurpose.NONE == item.getPurpose()) {\n+                        result.add(item);\n+                    }\n+                }\n+                break;\n+            default:\n+                LOG.error(\"You requested not existing purpose {}\", purpose);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends MappingItem> List<T> getUidToMappingItems(\n+            final ExternalResource resource, final MappingPurpose purpose) {\n+\n+        List<T> items = getMappingItems(resource, purpose);\n+\n+        MappingItem uidItem = type == AttributableType.USER ? new JPAUMappingItem() : new JPARMappingItem();\n+        BeanUtils.copyProperties(getAccountIdItem(resource), uidItem);\n+        uidItem.setExtAttrName(Uid.NAME);\n+        uidItem.setAccountid(false);\n+        items.add((T) uidItem);\n+\n+        return items;\n+    }\n+\n+    @Override\n+    public IntMappingType intMappingType() {\n+        IntMappingType result = null;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = IntMappingType.RoleSchema;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = IntMappingType.MembershipSchema;\n+                break;\n+\n+            case USER:\n+                result = IntMappingType.UserSchema;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public IntMappingType derIntMappingType() {\n+        IntMappingType result = null;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = IntMappingType.RoleSchema;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = IntMappingType.MembershipSchema;\n+                break;\n+\n+            case USER:\n+                result = IntMappingType.UserSchema;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public IntMappingType virIntMappingType() {\n+        IntMappingType result = null;\n+\n+        switch (type) {\n+            case ROLE:\n+                result = IntMappingType.RoleVirtualSchema;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = IntMappingType.MembershipVirtualSchema;\n+                break;\n+\n+            case USER:\n+                result = IntMappingType.UserVirtualSchema;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends MappingItem> Class<T> mappingItemClass() {\n+        Class result = null;\n+\n+        switch (type) {\n+            case USER:\n+                result = JPAUMappingItem.class;\n+                break;\n+\n+            case ROLE:\n+                result = JPARMappingItem.class;\n+                break;\n+\n+            case MEMBERSHIP:\n+                result = AbstractMappingItem.class;\n+                break;\n+\n+            case CONFIGURATION:\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"271f899dc9f76da57dfe019987f4abcf5f8d1a14","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAConnInstance.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.api.entity.ConnPoolConf;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.jpa.validation.entity.ConnInstanceCheck;\n+import org.apache.syncope.server.utils.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAConnInstance.TABLE)\n+@ConnInstanceCheck\n+public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstance {\n+\n+    private static final long serialVersionUID = -2294708794497208872L;\n+\n+    public static final String TABLE = \"ConnInstance\";\n+\n+    private static final int DEFAULT_TIMEOUT = 10;\n+\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * URI identifying the local / remote ConnId location where the related connector bundle is found.\n+     */\n+    @Column(nullable = false)\n+    private String location;\n+\n+    /**\n+     * Connector bundle class name.\n+     * Within a given location, the triple\n+     * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n+     */\n+    @Column(nullable = false)\n+    private String connectorName;\n+\n+    /**\n+     * Qualified name for the connector bundle.\n+     * Within a given location, the triple\n+     * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n+     */\n+    @Column(nullable = false)\n+    private String bundleName;\n+\n+    /**\n+     * Version of the bundle.\n+     * Within a given location, the triple\n+     * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n+     */\n+    @Column(nullable = false)\n+    private String version;\n+\n+    /**\n+     * The set of capabilities supported by this connector instance.\n+     */\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"capabilities\")\n+    @CollectionTable(name = \"ConnInstance_capabilities\",\n+            joinColumns =\n+            @JoinColumn(name = \"ConnInstance_id\", referencedColumnName = \"id\"))\n+    private Set<ConnectorCapability> capabilities;\n+\n+    /**\n+     * The main configuration for the connector instance. This is directly implemented by the Configuration bean class\n+     * which contains annotated ConfigurationProperties.\n+     *\n+     * @see org.identityconnectors.framework.api.ConfigurationProperty\n+     */\n+    @Lob\n+    private String jsonConf;\n+\n+    @Column(unique = true)\n+    private String displayName;\n+\n+    /**\n+     * External resources associated to the connector.\n+     */\n+    @OneToMany(cascade = { CascadeType.ALL }, mappedBy = \"connector\")\n+    private List<JPAExternalResource> resources;\n+\n+    /**\n+     * Connector request timeout. It is not applied in case of sync, full reconciliation and search.\n+     * DEFAULT_TIMEOUT is the default value to be used in case of unspecified timeout.\n+     */\n+    private Integer connRequestTimeout = DEFAULT_TIMEOUT;\n+\n+    private JPAConnPoolConf poolConf;\n+\n+    public JPAConnInstance() {\n+        super();\n+\n+        capabilities = new HashSet<>();\n+        resources = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getLocation() {\n+        return location;\n+    }\n+\n+    @Override\n+    public void setLocation(final String location) {\n+        this.location = location;\n+    }\n+\n+    @Override\n+    public String getConnectorName() {\n+        return connectorName;\n+    }\n+\n+    @Override\n+    public void setConnectorName(final String connectorName) {\n+        this.connectorName = connectorName;\n+    }\n+\n+    @Override\n+    public String getBundleName() {\n+        return bundleName;\n+    }\n+\n+    @Override\n+    public void setBundleName(final String bundleName) {\n+        this.bundleName = bundleName;\n+    }\n+\n+    @Override\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    @Override\n+    public void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    @Override\n+    public Set<ConnConfProperty> getConfiguration() {\n+        Set<ConnConfProperty> configuration = Collections.<ConnConfProperty>emptySet();\n+        if (!StringUtils.isBlank(jsonConf)) {\n+            ConnConfProperty[] deserialized = POJOHelper.deserialize(jsonConf, ConnConfProperty[].class);\n+            if (ArrayUtils.isNotEmpty(deserialized)) {\n+                configuration = new HashSet<ConnConfProperty>(Arrays.asList(deserialized));\n+            }\n+        }\n+\n+        return configuration;\n+    }\n+\n+    @Override\n+    public void setConfiguration(final Set<ConnConfProperty> configuration) {\n+        jsonConf = POJOHelper.serialize(new HashSet<ConnConfProperty>(configuration));\n+    }\n+\n+    @Override\n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    @Override\n+    public void setDisplayName(final String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n+    @Override\n+    public List<? extends ExternalResource> getResources() {\n+        return this.resources;\n+    }\n+\n+    @Override\n+    public boolean addResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return this.resources.contains((JPAExternalResource) resource)\n+                || this.resources.add((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public boolean removeResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        return this.resources.remove((JPAExternalResource) resource);\n+    }\n+\n+    @Override\n+    public boolean addCapability(final ConnectorCapability capabitily) {\n+        return capabilities.add(capabitily);\n+    }\n+\n+    @Override\n+    public boolean removeCapability(final ConnectorCapability capabitily) {\n+        return capabilities.remove(capabitily);\n+    }\n+\n+    @Override\n+    public Set<ConnectorCapability> getCapabilities() {\n+        return capabilities;\n+    }\n+\n+    @Override\n+    public Integer getConnRequestTimeout() {\n+        // DEFAULT_TIMEOUT will be returned in case of null timeout:\n+        // * instances created by the content loader \n+        // * or with a timeout nullified explicitely\n+        return connRequestTimeout == null ? DEFAULT_TIMEOUT : connRequestTimeout;\n+    }\n+\n+    @Override\n+    public void setConnRequestTimeout(final Integer timeout) {\n+        this.connRequestTimeout = timeout;\n+    }\n+\n+    @Override\n+    public ConnPoolConf getPoolConf() {\n+        return poolConf;\n+    }\n+\n+    @Override\n+    public void setPoolConf(final ConnPoolConf poolConf) {\n+        checkType(poolConf, JPAConnPoolConf.class);\n+        this.poolConf = (JPAConnPoolConf) poolConf;\n+    }\n+\n+}"},{"sha":"a7ed75929ac4c9e73ee15fcb2eeaa78433579c7d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAConnPoolConf.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAConnPoolConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAConnPoolConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAConnPoolConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.io.Serializable;\n+import javax.persistence.Embeddable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.persistence.api.entity.ConnPoolConf;\n+\n+@Embeddable\n+public class JPAConnPoolConf implements ConnPoolConf, Serializable {\n+\n+    private static final long serialVersionUID = -34259572059178970L;\n+\n+    private Integer maxObjects;\n+\n+    private Integer minIdle;\n+\n+    private Integer maxIdle;\n+\n+    private Long maxWait;\n+\n+    private Long minEvictableIdleTimeMillis;\n+\n+    @Override\n+    public Integer getMaxObjects() {\n+        return maxObjects;\n+    }\n+\n+    @Override\n+    public void setMaxObjects(final Integer maxObjects) {\n+        this.maxObjects = maxObjects;\n+    }\n+\n+    @Override\n+    public Integer getMinIdle() {\n+        return minIdle;\n+    }\n+\n+    @Override\n+    public void setMinIdle(final Integer minIdle) {\n+        this.minIdle = minIdle;\n+    }\n+\n+    @Override\n+    public Integer getMaxIdle() {\n+        return maxIdle;\n+    }\n+\n+    @Override\n+    public void setMaxIdle(final Integer maxIdle) {\n+        this.maxIdle = maxIdle;\n+    }\n+\n+    @Override\n+    public Long getMaxWait() {\n+        return maxWait;\n+    }\n+\n+    @Override\n+    public void setMaxWait(final Long maxWait) {\n+        this.maxWait = maxWait;\n+    }\n+\n+    @Override\n+    public Long getMinEvictableIdleTimeMillis() {\n+        return minEvictableIdleTimeMillis;\n+    }\n+\n+    @Override\n+    public void setMinEvictableIdleTimeMillis(final Long minEvictableIdleTimeMillis) {\n+        this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ToStringBuilder.reflectionToString(this);\n+    }\n+}"},{"sha":"f96f4bc9b9d7a0dfa0488f9a2c1eeb0491ab746f","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAEntitlement.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAEntitlement.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Entitlement;\n+\n+@Entity\n+@Table(name = JPAEntitlement.TABLE)\n+@Cacheable\n+public class JPAEntitlement extends AbstractEntity<String> implements Entitlement {\n+\n+    private static final long serialVersionUID = 8044745999246422483L;\n+\n+    public static final String TABLE = \"Entitlement\";\n+\n+    @Id\n+    private String name;\n+\n+    @Column(nullable = true)\n+    private String description;\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.name = key;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+}"},{"sha":"2b055bd2f9ea5cffeb89743b56c3d7c3d1b79071","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAExternalResource.java","status":"added","additions":426,"deletions":0,"changes":426,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,426 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.PropagationMode;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.persistence.api.entity.SyncPolicy;\n+import org.apache.syncope.persistence.api.entity.role.RMapping;\n+import org.apache.syncope.persistence.api.entity.user.UMapping;\n+import org.apache.syncope.persistence.jpa.validation.entity.ExternalResourceCheck;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARMapping;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMapping;\n+import org.apache.syncope.server.utils.serialization.POJOHelper;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+\n+/**\n+ * Resource for propagation and synchronization.\n+ */\n+@Entity\n+@Table(name = JPAExternalResource.TABLE)\n+@ExternalResourceCheck\n+public class JPAExternalResource extends AbstractAnnotatedEntity<String> implements ExternalResource {\n+\n+    private static final long serialVersionUID = -6937712883512073278L;\n+\n+    public static final String TABLE = \"ExternalResource\";\n+\n+    /**\n+     * The resource identifier is the name.\n+     */\n+    @Id\n+    private String name;\n+\n+    /**\n+     * Should this resource enforce the mandatory constraints?\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer enforceMandatoryCondition;\n+\n+    /**\n+     * The resource type is identified by the associated connector.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER, cascade = { CascadeType.MERGE })\n+    @NotNull\n+    private JPAConnInstance connector;\n+\n+    /**\n+     * Mapping for user objects.\n+     */\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    private JPAUMapping umapping;\n+\n+    /**\n+     * Mapping for role objects.\n+     */\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    private JPARMapping rmapping;\n+\n+    /**\n+     * Is this resource primary, for propagations?\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer propagationPrimary;\n+\n+    /**\n+     * Priority index for propagation ordering.\n+     */\n+    @Column(nullable = false)\n+    private Integer propagationPriority;\n+\n+    /**\n+     * Generate random password for propagation, if not provided?\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer randomPwdIfNotProvided;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private PropagationMode propagationMode;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private TraceLevel createTraceLevel;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private TraceLevel updateTraceLevel;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private TraceLevel deleteTraceLevel;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(nullable = false)\n+    private TraceLevel syncTraceLevel;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPAPasswordPolicy passwordPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPAAccountPolicy accountPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPASyncPolicy syncPolicy;\n+\n+    /**\n+     * Configuration properties that are overridden from the connector instance.\n+     */\n+    @Lob\n+    private String jsonConf;\n+\n+    /**\n+     * SyncToken for calling ConnId's sync() on users.\n+     */\n+    @Lob\n+    private String userializedSyncToken;\n+\n+    /**\n+     * SyncToken for calling ConnId's sync() on roles.\n+     */\n+    @Lob\n+    private String rserializedSyncToken;\n+\n+    /**\n+     * (Optional) classes for PropagationAction.\n+     */\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"action\")\n+    @CollectionTable(name = \"ExternalResource_PropActions\",\n+            joinColumns =\n+            @JoinColumn(name = \"ExternalResource_name\", referencedColumnName = \"name\"))\n+    private List<String> propagationActionsClassNames = new ArrayList<>();\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public JPAExternalResource() {\n+        super();\n+\n+        enforceMandatoryCondition = getBooleanAsInteger(false);\n+        propagationPrimary = 0;\n+        propagationPriority = 0;\n+        randomPwdIfNotProvided = 0;\n+        propagationMode = PropagationMode.TWO_PHASES;\n+\n+        createTraceLevel = TraceLevel.FAILURES;\n+        updateTraceLevel = TraceLevel.FAILURES;\n+        deleteTraceLevel = TraceLevel.FAILURES;\n+        syncTraceLevel = TraceLevel.FAILURES;\n+    }\n+\n+    @Override\n+    public boolean isEnforceMandatoryCondition() {\n+        return isBooleanAsInteger(enforceMandatoryCondition);\n+    }\n+\n+    @Override\n+    public void setEnforceMandatoryCondition(boolean enforceMandatoryCondition) {\n+        this.enforceMandatoryCondition = getBooleanAsInteger(enforceMandatoryCondition);\n+    }\n+\n+    @Override\n+    public ConnInstance getConnector() {\n+        return connector;\n+    }\n+\n+    @Override\n+    public void setConnector(final ConnInstance connector) {\n+        checkType(connector, JPAConnInstance.class);\n+        this.connector = (JPAConnInstance) connector;\n+    }\n+\n+    @Override\n+    public UMapping getUmapping() {\n+        return umapping;\n+    }\n+\n+    @Override\n+    public void setUmapping(final UMapping umapping) {\n+        checkType(umapping, JPAUMapping.class);\n+        this.umapping = (JPAUMapping) umapping;\n+    }\n+\n+    @Override\n+    public RMapping getRmapping() {\n+        return rmapping;\n+    }\n+\n+    @Override\n+    public void setRmapping(final RMapping rmapping) {\n+        checkType(rmapping, JPARMapping.class);\n+        this.rmapping = (JPARMapping) rmapping;\n+    }\n+\n+    @Override\n+    public boolean isPropagationPrimary() {\n+        return isBooleanAsInteger(propagationPrimary);\n+    }\n+\n+    @Override\n+    public void setPropagationPrimary(boolean propagationPrimary) {\n+        this.propagationPrimary = getBooleanAsInteger(propagationPrimary);\n+    }\n+\n+    @Override\n+    public Integer getPropagationPriority() {\n+        return propagationPriority;\n+    }\n+\n+    @Override\n+    public void setPropagationPriority(Integer propagationPriority) {\n+        if (propagationPriority != null) {\n+            this.propagationPriority = propagationPriority;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRandomPwdIfNotProvided() {\n+        return isBooleanAsInteger(randomPwdIfNotProvided);\n+    }\n+\n+    @Override\n+    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\n+        this.randomPwdIfNotProvided = getBooleanAsInteger(randomPwdIfNotProvided);\n+    }\n+\n+    @Override\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    @Override\n+    public void setPropagationMode(PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public TraceLevel getCreateTraceLevel() {\n+        return createTraceLevel;\n+    }\n+\n+    @Override\n+    public void setCreateTraceLevel(final TraceLevel createTraceLevel) {\n+        this.createTraceLevel = createTraceLevel;\n+    }\n+\n+    @Override\n+\n+    public TraceLevel getDeleteTraceLevel() {\n+        return deleteTraceLevel;\n+    }\n+\n+    @Override\n+    public void setDeleteTraceLevel(final TraceLevel deleteTraceLevel) {\n+        this.deleteTraceLevel = deleteTraceLevel;\n+    }\n+\n+    @Override\n+    public TraceLevel getUpdateTraceLevel() {\n+        return updateTraceLevel;\n+    }\n+\n+    @Override\n+    public void setUpdateTraceLevel(final TraceLevel updateTraceLevel) {\n+        this.updateTraceLevel = updateTraceLevel;\n+    }\n+\n+    @Override\n+    public TraceLevel getSyncTraceLevel() {\n+        return syncTraceLevel;\n+    }\n+\n+    @Override\n+    public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\n+        this.syncTraceLevel = syncTraceLevel;\n+    }\n+\n+    @Override\n+    public AccountPolicy getAccountPolicy() {\n+        return accountPolicy;\n+    }\n+\n+    @Override\n+    public void setAccountPolicy(final AccountPolicy accountPolicy) {\n+        checkType(accountPolicy, JPAAccountPolicy.class);\n+        this.accountPolicy = (JPAAccountPolicy) accountPolicy;\n+    }\n+\n+    @Override\n+    public PasswordPolicy getPasswordPolicy() {\n+        return passwordPolicy;\n+    }\n+\n+    @Override\n+    public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n+        checkType(passwordPolicy, JPAPasswordPolicy.class);\n+        this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n+    }\n+\n+    @Override\n+    public SyncPolicy getSyncPolicy() {\n+        return syncPolicy;\n+    }\n+\n+    @Override\n+    public void setSyncPolicy(final SyncPolicy syncPolicy) {\n+        checkType(syncPolicy, JPASyncPolicy.class);\n+        this.syncPolicy = (JPASyncPolicy) syncPolicy;\n+    }\n+\n+    @Override\n+    public Set<ConnConfProperty> getConnInstanceConfiguration() {\n+        return StringUtils.isBlank(jsonConf)\n+                ? Collections.<ConnConfProperty>emptySet()\n+                : new HashSet<>(Arrays.asList(POJOHelper.deserialize(jsonConf, ConnConfProperty[].class)));\n+    }\n+\n+    @Override\n+    public void setConnInstanceConfiguration(final Set<ConnConfProperty> properties) {\n+        jsonConf = POJOHelper.serialize(new HashSet<>(properties));\n+    }\n+\n+    @Override\n+    public String getSerializedUSyncToken() {\n+        return userializedSyncToken;\n+    }\n+\n+    @Override\n+    public SyncToken getUsyncToken() {\n+        return userializedSyncToken == null\n+                ? null\n+                : POJOHelper.deserialize(userializedSyncToken, SyncToken.class);\n+    }\n+\n+    @Override\n+    public void setUsyncToken(final SyncToken syncToken) {\n+        this.userializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n+    }\n+\n+    @Override\n+    public String getSerializedRSyncToken() {\n+        return rserializedSyncToken;\n+    }\n+\n+    @Override\n+    public SyncToken getRsyncToken() {\n+        return rserializedSyncToken == null\n+                ? null\n+                : POJOHelper.deserialize(rserializedSyncToken, SyncToken.class);\n+    }\n+\n+    @Override\n+    public void setRsyncToken(final SyncToken syncToken) {\n+        this.rserializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n+    }\n+\n+    @Override\n+    public List<String> getPropagationActionsClassNames() {\n+        return propagationActionsClassNames;\n+    }\n+}"},{"sha":"c20856dbeba522209699f8818fab79395cbe4359","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPALogger.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPALogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPALogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPALogger.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.persistence.api.entity.Logger;\n+\n+@Entity\n+@Table(name = JPALogger.TABLE)\n+public class JPALogger extends AbstractEntity<String> implements Logger {\n+\n+    private static final long serialVersionUID = 943012777014416027L;\n+\n+    public static final String TABLE = \"SyncopeLogger\";\n+\n+    @Id\n+    @Column(name = \"logName\")\n+    private String name;\n+\n+    @Column(name = \"logLevel\", nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private LoggerLevel level;\n+\n+    @Column(name = \"logType\", nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private LoggerType type;\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public LoggerLevel getLevel() {\n+        return level;\n+    }\n+\n+    @Override\n+    public void setLevel(final LoggerLevel level) {\n+        this.level = level;\n+    }\n+\n+    @Override\n+    public LoggerType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public void setType(final LoggerType type) {\n+        this.type = type;\n+    }\n+}"},{"sha":"8f93dbd54a4874b47141482e7b2159d3a2c13956","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPANotification.java","status":"added","additions":262,"deletions":0,"changes":262,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,262 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.persistence.api.entity.Notification;\n+import org.apache.syncope.persistence.jpa.validation.entity.NotificationCheck;\n+\n+@Entity\n+@Table(name = JPANotification.TABLE)\n+@NotificationCheck\n+public class JPANotification extends AbstractEntity<Long> implements Notification {\n+\n+    private static final long serialVersionUID = 3112582296912757537L;\n+\n+    public static final String TABLE = \"Notification\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @CollectionTable(name = \"Notification_events\",\n+            joinColumns =\n+            @JoinColumn(name = \"Notification_id\", referencedColumnName = \"id\"))\n+    @Column(name = \"events\")\n+    private List<String> events;\n+\n+    private String userAbout;\n+\n+    private String roleAbout;\n+\n+    private String recipients;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @CollectionTable(name = \"Notification_staticRecipients\",\n+            joinColumns =\n+            @JoinColumn(name = \"Notification_id\", referencedColumnName = \"id\"))\n+    @Column(name = \"staticRecipients\")\n+    private List<String> staticRecipients;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private IntMappingType recipientAttrType;\n+\n+    @NotNull\n+    private String recipientAttrName;\n+\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer selfAsRecipient;\n+\n+    @NotNull\n+    private String sender;\n+\n+    @NotNull\n+    private String subject;\n+\n+    @NotNull\n+    private String template;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private TraceLevel traceLevel;\n+\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer active;\n+\n+    public JPANotification() {\n+        events = new ArrayList<>();\n+        staticRecipients = new ArrayList<>();\n+        selfAsRecipient = getBooleanAsInteger(false);\n+        active = getBooleanAsInteger(true);\n+        traceLevel = TraceLevel.ALL;\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getUserAbout() {\n+        return userAbout;\n+    }\n+\n+    @Override\n+    public void setUserAbout(final String userAbout) {\n+        this.userAbout = userAbout;\n+    }\n+\n+    @Override\n+    public String getRoleAbout() {\n+        return roleAbout;\n+    }\n+\n+    @Override\n+    public void setRoleAbout(final String roleAbout) {\n+        this.roleAbout = roleAbout;\n+    }\n+\n+    @Override\n+    public String getRecipients() {\n+        return recipients;\n+    }\n+\n+    @Override\n+    public void setRecipients(final String recipients) {\n+        this.recipients = recipients;\n+    }\n+\n+    @Override\n+    public String getRecipientAttrName() {\n+        return recipientAttrName;\n+    }\n+\n+    @Override\n+    public void setRecipientAttrName(final String recipientAttrName) {\n+        this.recipientAttrName = recipientAttrName;\n+    }\n+\n+    @Override\n+    public IntMappingType getRecipientAttrType() {\n+        return recipientAttrType;\n+    }\n+\n+    @Override\n+\n+    public void setRecipientAttrType(final IntMappingType recipientAttrType) {\n+        this.recipientAttrType = recipientAttrType;\n+    }\n+\n+    @Override\n+    public List<String> getEvents() {\n+        return events;\n+    }\n+\n+    @Override\n+    public boolean addEvent(final String event) {\n+        return event != null && !events.contains(event) && events.add(event);\n+    }\n+\n+    @Override\n+    public boolean removeEvent(final String event) {\n+        return event != null && events.remove(event);\n+    }\n+\n+    @Override\n+    public List<String> getStaticRecipients() {\n+        return staticRecipients;\n+    }\n+\n+    @Override\n+    public boolean addStaticRecipient(final String staticRecipient) {\n+        return staticRecipient != null && !staticRecipients.contains(staticRecipient)\n+                && staticRecipients.add(staticRecipient);\n+    }\n+\n+    @Override\n+    public boolean removeStaticRecipient(final String staticRecipient) {\n+        return staticRecipient != null && staticRecipients.remove(staticRecipient);\n+    }\n+\n+    @Override\n+    public boolean isSelfAsRecipient() {\n+        return isBooleanAsInteger(selfAsRecipient);\n+    }\n+\n+    @Override\n+    public void setSelfAsRecipient(final boolean selfAsRecipient) {\n+        this.selfAsRecipient = getBooleanAsInteger(selfAsRecipient);\n+    }\n+\n+    @Override\n+    public String getSender() {\n+        return sender;\n+    }\n+\n+    @Override\n+    public void setSender(final String sender) {\n+        this.sender = sender;\n+    }\n+\n+    @Override\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    @Override\n+\n+    public void setSubject(final String subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public String getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final String template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public TraceLevel getTraceLevel() {\n+        return traceLevel;\n+    }\n+\n+    @Override\n+    public void setTraceLevel(final TraceLevel traceLevel) {\n+        this.traceLevel = traceLevel;\n+    }\n+\n+    @Override\n+    public boolean isActive() {\n+        return isBooleanAsInteger(active);\n+    }\n+\n+    @Override\n+    public void setActive(final boolean active) {\n+        this.active = getBooleanAsInteger(active);\n+    }\n+}"},{"sha":"1f0ee3ac77737e703ee7b3f870c997bb98abfd0f","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAPasswordPolicy.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPasswordPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+\n+@Entity\n+@DiscriminatorValue(\"PasswordPolicy\")\n+public class JPAPasswordPolicy extends JPAPolicy implements PasswordPolicy {\n+\n+    private static final long serialVersionUID = 9138550910385232849L;\n+\n+    public JPAPasswordPolicy() {\n+        this(false);\n+    }\n+\n+    public JPAPasswordPolicy(boolean global) {\n+        super();\n+\n+        this.type = global\n+                ? PolicyType.GLOBAL_PASSWORD\n+                : PolicyType.PASSWORD;\n+    }\n+}"},{"sha":"af0ab0a5fffa00209e042350b705b0476e38457e","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAPolicy.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.PolicySpec;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.entity.Policy;\n+import org.apache.syncope.persistence.jpa.validation.entity.PolicyCheck;\n+import org.apache.syncope.server.utils.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAPolicy.TABLE)\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"DTYPE\")\n+@PolicyCheck\n+public abstract class JPAPolicy extends AbstractEntity<Long> implements Policy {\n+\n+    private static final long serialVersionUID = -5844833125843247458L;\n+\n+    public static final String TABLE = \"Policy\";\n+\n+    @Id\n+    private Long id;\n+\n+    @NotNull\n+    private String description;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    protected PolicyType type;\n+\n+    @Lob\n+    private String specification;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public <T extends PolicySpec> T getSpecification(final Class<T> reference) {\n+        return POJOHelper.deserialize(specification, reference);\n+    }\n+\n+    @Override\n+    public void setSpecification(final PolicySpec policy) {\n+        this.specification = POJOHelper.serialize(policy);\n+    }\n+}"},{"sha":"1a661a98046e676b483255e90211b99329456103","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAPushPolicy.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAPushPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.entity.PushPolicy;\n+\n+@Entity\n+public class JPAPushPolicy extends JPAPolicy implements PushPolicy {\n+\n+    private static final long serialVersionUID = -6090413855809521279L;\n+\n+    public JPAPushPolicy() {\n+        this(false);\n+    }\n+\n+    public JPAPushPolicy(final boolean global) {\n+        super();\n+\n+        this.type = global\n+                ? PolicyType.GLOBAL_PUSH\n+                : PolicyType.PUSH;\n+    }\n+\n+}"},{"sha":"3fcdd63c9e53421ffbd61220c856f1bd2e61a8f3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAReport.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReport.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.persistence.api.entity.ReportExec;\n+import org.apache.syncope.persistence.jpa.validation.entity.ReportCheck;\n+\n+@Entity\n+@Table(name = JPAReport.TABLE)\n+@ReportCheck\n+public class JPAReport extends AbstractEntity<Long> implements Report {\n+\n+    private static final long serialVersionUID = -587652654964285834L;\n+\n+    public static final String TABLE = \"Report\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n+    private List<JPAReportletConfInstance> reportletConfs;\n+\n+    private String cronExpression;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"report\")\n+    private List<JPAReportExec> executions;\n+\n+    public JPAReport() {\n+        super();\n+\n+        reportletConfs = new ArrayList<>();\n+        executions = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean addExec(final ReportExec exec) {\n+        checkType(exec, JPAReportExec.class);\n+        return exec != null && !executions.contains((JPAReportExec) exec) && executions.add((JPAReportExec) exec);\n+    }\n+\n+    @Override\n+    public boolean removeExec(final ReportExec exec) {\n+        checkType(exec, JPAReportExec.class);\n+        return exec != null && executions.remove((JPAReportExec) exec);\n+    }\n+\n+    @Override\n+    public List<? extends ReportExec> getExecs() {\n+        return executions;\n+    }\n+\n+    @Override\n+    public boolean addReportletConf(final ReportletConf reportletConf) {\n+        if (reportletConf == null) {\n+            return false;\n+        }\n+\n+        JPAReportletConfInstance instance = new JPAReportletConfInstance();\n+        instance.setReport(this);\n+        instance.setInstance(reportletConf);\n+\n+        return reportletConfs.add(instance);\n+    }\n+\n+    @Override\n+    public boolean removeReportletConf(final ReportletConf reportletConf) {\n+        if (reportletConf == null) {\n+            return false;\n+        }\n+\n+        checkType(reportletConf, JPAReportletConfInstance.class);\n+\n+        JPAReportletConfInstance found = null;\n+        for (JPAReportletConfInstance instance : reportletConfs) {\n+            if (reportletConf.equals(instance.getInstance())) {\n+                found = instance;\n+            }\n+        }\n+\n+        return found == null\n+                ? false\n+                : reportletConfs.remove(found);\n+    }\n+\n+    @Override\n+    public List<ReportletConf> getReportletConfs() {\n+        List<ReportletConf> result = new ArrayList<>(reportletConfs.size());\n+\n+        for (JPAReportletConfInstance instance : reportletConfs) {\n+            result.add(instance.getInstance());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    @Override\n+    public void setCronExpression(final String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+}"},{"sha":"9f9be18a14b7ed441993a06d023f2d8489188c3b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAReportExec.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReportExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReportExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReportExec.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.persistence.api.entity.ReportExec;\n+\n+@Entity\n+@Table(name = JPAReportExec.TABLE)\n+public class JPAReportExec extends AbstractExec implements ReportExec {\n+\n+    private static final long serialVersionUID = -6178274296037547769L;\n+\n+    public static final String TABLE = \"ReportExec\";\n+\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * The referred report.\n+     */\n+    @ManyToOne(optional = false)\n+    private JPAReport report;\n+\n+    /**\n+     * Report execution result, stored as an XML stream.\n+     */\n+    @Lob\n+    @Basic(fetch = FetchType.LAZY)\n+    private Byte[] execResult;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Report getReport() {\n+        return report;\n+    }\n+\n+    @Override\n+    public void setReport(final Report report) {\n+        checkType(report, JPAReport.class);\n+        this.report = (JPAReport) report;\n+    }\n+\n+    @Override\n+    public byte[] getExecResult() {\n+        return execResult == null ? null : ArrayUtils.toPrimitive(execResult);\n+    }\n+\n+    @Override\n+    public void setExecResult(final byte[] execResult) {\n+        this.execResult = execResult == null ? null : ArrayUtils.toObject(execResult);\n+    }\n+\n+    @Override\n+    public void setStatus(final ReportExecStatus status) {\n+        super.setStatus(status.name());\n+    }\n+}"},{"sha":"dbe3cf296e71db06e89b4a878b59c6d4a980d2f3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPAReportletConfInstance.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPAReportletConfInstance.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import org.apache.syncope.persistence.api.entity.ReportletConfInstance;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.server.utils.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAReportletConfInstance.TABLE)\n+public class JPAReportletConfInstance extends AbstractEntity<Long> implements ReportletConfInstance {\n+\n+    private static final long serialVersionUID = -2436055132955674610L;\n+\n+    public static final String TABLE = \"ReportletConfInstance\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Lob\n+    private String serializedInstance;\n+\n+    @ManyToOne\n+    private JPAReport report;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Report getReport() {\n+        return report;\n+    }\n+\n+    @Override\n+    public void setReport(final Report report) {\n+        checkType(report, JPAReport.class);\n+        this.report = (JPAReport) report;\n+    }\n+\n+    @Override\n+    public ReportletConf getInstance() {\n+        return serializedInstance == null\n+                ? null\n+                : POJOHelper.deserialize(serializedInstance, ReportletConf.class);\n+    }\n+\n+    @Override\n+    public void setInstance(final ReportletConf instance) {\n+        this.serializedInstance = instance == null\n+                ? null\n+                : POJOHelper.serialize(instance);\n+    }\n+}"},{"sha":"bfe76bce998c6bd72e01b2008c44698591d3efc9","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPASecurityQuestion.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPASecurityQuestion.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPASecurityQuestion.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPASecurityQuestion.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n+\n+@Entity\n+@Table(name = JPASecurityQuestion.TABLE)\n+public class JPASecurityQuestion extends AbstractEntity<Long> implements SecurityQuestion {\n+\n+    private static final long serialVersionUID = -7646140284033489392L;\n+\n+    public static final String TABLE = \"SecurityQuestion\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(unique = true)\n+    private String content;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    @Override\n+    public void setContent(final String content) {\n+        this.content = content;\n+    }\n+\n+}"},{"sha":"d78425b8093ed8e8a0d477db8c2638f6f4386bb7","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/JPASyncPolicy.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FJPASyncPolicy.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.persistence.api.entity.SyncPolicy;\n+\n+@Entity\n+@DiscriminatorValue(\"SyncPolicy\")\n+public class JPASyncPolicy extends JPAPolicy implements SyncPolicy {\n+\n+    private static final long serialVersionUID = -6090413855809521279L;\n+\n+    public JPASyncPolicy() {\n+        this(false);\n+    }\n+\n+    public JPASyncPolicy(final boolean global) {\n+        super();\n+\n+        this.type = global\n+                ? PolicyType.GLOBAL_SYNC\n+                : PolicyType.SYNC;\n+    }\n+}"},{"sha":"74c7d669ccc69d59bc52848eaa1adc4273c61783","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/conf/JPACPlainAttr.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.conf;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n+import org.apache.syncope.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttr;\n+\n+/**\n+ * Configuration attribute.\n+ */\n+@Entity\n+@Table(name = JPACPlainAttr.TABLE)\n+public class JPACPlainAttr extends AbstractPlainAttr implements CPlainAttr {\n+\n+    private static final long serialVersionUID = 6333601983691157406L;\n+\n+    public static final String TABLE = \"CPlainAttr\";\n+\n+    /**\n+     * Auto-generated id for this table.\n+     */\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAConf owner;\n+\n+    /**\n+     * The schema of this attribute.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"schema_name\")\n+    private JPACPlainSchema schema;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private List<JPACPlainAttrValue> values;\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n+    private JPACPlainAttrUniqueValue uniqueValue;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public JPACPlainAttr() {\n+        super();\n+        values = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Conf getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAConf.class);\n+        this.owner = (JPAConf) owner;\n+    }\n+\n+    @Override\n+    public CPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPACPlainSchema.class);\n+        this.schema = (JPACPlainSchema) schema;\n+    }\n+\n+    @Override\n+    protected boolean addValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPACPlainAttrValue.class);\n+        return values.add((JPACPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean removeValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPACPlainAttrValue.class);\n+        return values.remove((JPACPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public List<? extends CPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public CPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(owner, JPACPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPACPlainAttrUniqueValue) uniqueValue;\n+    }\n+}"},{"sha":"13e8e04ff12cecafa57b9dc27185417369a2d91a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/conf/JPACPlainAttrUniqueValue.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.conf;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPACPlainAttrUniqueValue.TABLE)\n+public class JPACPlainAttrUniqueValue extends AbstractPlainAttrValue implements CPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = -64080804563305387L;\n+\n+    public static final String TABLE = \"CPlainAttrUniqueValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne(optional = false)\n+    private JPACPlainAttr attribute;\n+\n+    @ManyToOne(optional = false)\n+    @JoinColumn(name = \"schema_name\")\n+    private JPACPlainSchema schema;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public CPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPACPlainAttr.class);\n+        this.attribute = (JPACPlainAttr) attr;\n+    }\n+\n+    @Override\n+    public CPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPACPlainSchema.class);\n+        this.schema = (JPACPlainSchema) schema;\n+    }\n+}"},{"sha":"70e30f3e13cd11194c0f1dbb1dd12612d8499f82","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/conf/JPACPlainAttrValue.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.conf;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPACPlainAttrValue.TABLE)\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class JPACPlainAttrValue extends AbstractPlainAttrValue implements CPlainAttrValue {\n+\n+    private static final long serialVersionUID = -6259576015647897446L;\n+\n+    public static final String TABLE = \"CPlainAttrValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    @NotNull\n+    private JPACPlainAttr attribute;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public CPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPACPlainAttr.class);\n+        this.attribute = (JPACPlainAttr) attr;\n+    }\n+}"},{"sha":"e0c4ec83a61d8b5c480224e81c268ddd6246136a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/conf/JPACPlainSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.conf;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainSchema;\n+\n+@Entity\n+@Table(name = JPACPlainSchema.TABLE)\n+@Cacheable\n+public class JPACPlainSchema extends AbstractPlainSchema implements CPlainSchema {\n+\n+    private static final long serialVersionUID = 3363019039331594433L;\n+\n+    public static final String TABLE = \"CPlainSchema\";\n+\n+}"},{"sha":"3bfa884046e86884390cfe0fe6f55e6dc0429508","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/conf/JPAConf.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.conf;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.persistence.api.entity.DerAttr;\n+import org.apache.syncope.persistence.api.entity.VirAttr;\n+import org.apache.syncope.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttributable;\n+\n+@Entity\n+@Table(name = JPAConf.TABLE)\n+@Cacheable\n+public class JPAConf extends AbstractAttributable<CPlainAttr, DerAttr, VirAttr> implements Conf {\n+\n+    private static final long serialVersionUID = -5281258853142421875L;\n+\n+    public static final String TABLE = \"SyncopeConf\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPACPlainAttr> plainAttrs;\n+\n+    public JPAConf() {\n+        super();\n+\n+        plainAttrs = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public void setKey(final Long key) {\n+        this.id = key;\n+    }\n+\n+    @Override\n+    public boolean addPlainAttr(final CPlainAttr attr) {\n+        checkType(attr, JPACPlainAttr.class);\n+        return plainAttrs.add((JPACPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removePlainAttr(final CPlainAttr attr) {\n+        checkType(attr, JPACPlainAttr.class);\n+        return plainAttrs.remove((JPACPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends CPlainAttr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public boolean addDerAttr(final DerAttr attr) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeDerAttr(final DerAttr derAttr) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<? extends DerAttr> getDerAttrs() {\n+        return Collections.emptyList();\n+    }\n+\n+    @Override\n+    public boolean addVirAttr(final VirAttr attr) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeVirAttr(final VirAttr virAttr) {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<? extends VirAttr> getVirAttrs() {\n+        return Collections.emptyList();\n+    }\n+\n+}"},{"sha":"c154e904b774f4de58f3553055625228f47f5776","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMDerAttr.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MDerSchema;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerAttr;\n+\n+@Entity\n+@Table(name = JPAMDerAttr.TABLE)\n+public class JPAMDerAttr extends AbstractDerAttr implements MDerAttr {\n+\n+    private static final long serialVersionUID = -443509121923448129L;\n+\n+    public static final String TABLE = \"MDerAttr\";\n+\n+    @ManyToOne\n+    private JPAMembership owner;\n+\n+    @Column(nullable = false)\n+    @OneToOne(cascade = CascadeType.MERGE)\n+    private JPAMDerAttrTemplate template;\n+\n+    @Override\n+    public Membership getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAMembership.class);\n+        this.owner = (JPAMembership) owner;\n+    }\n+\n+    @Override\n+    public MDerAttrTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final MDerAttrTemplate template) {\n+        checkType(template, JPAMDerAttrTemplate.class);\n+        this.template = (JPAMDerAttrTemplate) template;\n+    }\n+\n+    @Override\n+    public MDerSchema getSchema() {\n+        return template == null ? null : template.getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final DerSchema schema) {\n+        LOG.warn(\"This is role attribute, set template to select schema\");\n+    }\n+\n+}"},{"sha":"7ec7fcfe0c1a915d106c3995fa069e7af60152b3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMDerAttrTemplate.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MDerSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+\n+@Entity\n+@Table(name = JPAMDerAttrTemplate.TABLE)\n+public class JPAMDerAttrTemplate extends AbstractAttrTemplate<MDerSchema> implements MDerAttrTemplate {\n+\n+    private static final long serialVersionUID = -3424574558427502145L;\n+\n+    public static final String TABLE = \"MDerAttrTemplate\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"schema_name\")\n+    private JPAMDerSchema schema;\n+\n+    @Override\n+    public MDerSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final MDerSchema schema) {\n+        checkType(schema, JPAMDerSchema.class);\n+        this.schema = (JPAMDerSchema) schema;\n+    }\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Role owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+}"},{"sha":"d3e2e0364e55a26f92f1b68f520d1c0ac4d89c4c","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMDerSchema.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.membership.MDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerSchema;\n+\n+@Entity\n+@Table(name = JPAMDerSchema.TABLE)\n+public class JPAMDerSchema extends AbstractDerSchema implements MDerSchema {\n+\n+    private static final long serialVersionUID = -4694082505732174583L;\n+\n+    public static final String TABLE = \"MDerSchema\";\n+\n+}"},{"sha":"38f2b24cdb6e74752575f189928a10c9fff5a5c8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMPlainAttr.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttr;\n+\n+@Entity\n+@Table(name = JPAMPlainAttr.TABLE)\n+public class JPAMPlainAttr extends AbstractPlainAttr implements MPlainAttr {\n+\n+    private static final long serialVersionUID = 3755864809152866489L;\n+\n+    public static final String TABLE = \"MPlainAttr\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAMembership owner;\n+\n+    @Column(nullable = false)\n+    @OneToOne(cascade = CascadeType.MERGE)\n+    private JPAMPlainAttrTemplate template;\n+\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private List<JPAMPlainAttrValue> values;\n+\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n+    private JPAMPlainAttrUniqueValue uniqueValue;\n+\n+    public JPAMPlainAttr() {\n+        super();\n+        values = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Membership getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAMembership.class);\n+        this.owner = (JPAMembership) owner;\n+    }\n+\n+    @Override\n+    public MPlainAttrTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final MPlainAttrTemplate template) {\n+        checkType(template, JPAMPlainAttrTemplate.class);\n+        this.template = (JPAMPlainAttrTemplate) template;\n+    }\n+\n+    @Override\n+    public MPlainSchema getSchema() {\n+        return template == null ? null : template.getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        LOG.warn(\"This is role attribute, set template to select schema\");\n+    }\n+\n+    @Override\n+    protected boolean addValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAMPlainAttrValue.class);\n+        return values.add((JPAMPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean removeValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAMPlainAttrValue.class);\n+        return values.remove((JPAMPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public List<? extends MPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public MPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(owner, JPAMPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPAMPlainAttrUniqueValue) uniqueValue;\n+    }\n+\n+}"},{"sha":"fb8e7287b4bab405536e6a9ba97c9339c21cd28d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMPlainAttrTemplate.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+\n+@Entity\n+@Table(name = JPAMPlainAttrTemplate.TABLE)\n+public class JPAMPlainAttrTemplate extends AbstractAttrTemplate<MPlainSchema> implements MPlainAttrTemplate {\n+\n+    private static final long serialVersionUID = -3424574558427502145L;\n+\n+    public static final String TABLE = \"MPlainAttrTemplate\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"schema_name\")\n+    private JPAMPlainSchema schema;\n+\n+    @Override\n+    public MPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final MPlainSchema schema) {\n+        checkType(schema, JPAMPlainSchema.class);\n+        this.schema = (JPAMPlainSchema) schema;\n+    }\n+\n+    @Override\n+    public JPARole getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Role owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+\n+}"},{"sha":"344ebc23690e65ef1870ab441b9b28b3793917fb","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMPlainAttrUniqueValue.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPAMPlainAttrUniqueValue.TABLE)\n+public class JPAMPlainAttrUniqueValue extends AbstractPlainAttrValue implements MPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = 3985867531873453718L;\n+\n+    public static final String TABLE = \"MPlainAttrUniqueValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne(optional = false)\n+    private JPAMPlainAttr attribute;\n+\n+    @ManyToOne(optional = false)\n+    @JoinColumn(name = \"schema_name\")\n+    private JPAMPlainSchema schema;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public MPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPAMPlainAttr.class);\n+        this.attribute = (JPAMPlainAttr) attr;\n+    }\n+\n+    @Override\n+    public MPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPAMPlainSchema.class);\n+        this.schema = (JPAMPlainSchema) schema;\n+    }\n+}"},{"sha":"520e2440afb13d0baff5562841fccd286d13ba1b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMPlainAttrValue.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPAMPlainAttrValue.TABLE)\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class JPAMPlainAttrValue extends AbstractPlainAttrValue implements MPlainAttrValue {\n+\n+    private static final long serialVersionUID = -7188881172631198385L;\n+\n+    public static final String TABLE = \"MPlainAttrValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    @NotNull\n+    private JPAMPlainAttr attribute;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public MPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPAMPlainAttr.class);\n+        this.attribute = (JPAMPlainAttr) attr;\n+    }\n+}"},{"sha":"e4ba2a9e18bf6fd9fbe197ccba7906c9e758c8d5","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMPlainSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainSchema;\n+\n+@Entity\n+@Table(name = JPAMPlainSchema.TABLE)\n+@Cacheable\n+public class JPAMPlainSchema extends AbstractPlainSchema implements MPlainSchema {\n+\n+    private static final long serialVersionUID = -8053736450044590651L;\n+\n+    public static final String TABLE = \"MPlainSchema\";\n+\n+}"},{"sha":"4cfe2079126eaafe32547fd9ae31d7b07ce583d4","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMVirAttr.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MVirSchema;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirAttr;\n+\n+@Entity\n+@Table(name = JPAMVirAttr.TABLE)\n+public class JPAMVirAttr extends AbstractVirAttr implements MVirAttr {\n+\n+    private static final long serialVersionUID = 7774760571251641332L;\n+\n+    public static final String TABLE = \"MVirAttr\";\n+\n+    @ManyToOne\n+    private JPAMembership owner;\n+\n+    @Column(nullable = false)\n+    @OneToOne(cascade = CascadeType.MERGE)\n+    private JPAMVirAttrTemplate template;\n+\n+    @Override\n+    public Membership getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAMembership.class);\n+        this.owner = (JPAMembership) owner;\n+    }\n+\n+    @Override\n+    public MVirAttrTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final MVirAttrTemplate template) {\n+        checkType(template, JPAMVirAttrTemplate.class);\n+        this.template = (JPAMVirAttrTemplate) template;\n+    }\n+\n+    @Override\n+    public MVirSchema getSchema() {\n+        return template == null ? null : template.getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final VirSchema schema) {\n+        LOG.warn(\"This is role attribute, set template to select schema\");\n+    }\n+}"},{"sha":"7bd60db5260fc23f07bfe158876de7d26c98741a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMVirAttrTemplate.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MVirSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+\n+@Entity\n+@Table(name = JPAMVirAttrTemplate.TABLE)\n+public class JPAMVirAttrTemplate extends AbstractAttrTemplate<MVirSchema> implements MVirAttrTemplate {\n+\n+    private static final long serialVersionUID = -3424574558427502145L;\n+\n+    public static final String TABLE = \"MVirAttrTemplate\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"schema_name\")\n+    private JPAMVirSchema schema;\n+\n+    @Override\n+    public MVirSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final MVirSchema schema) {\n+        checkType(schema, JPAMVirSchema.class);\n+        this.schema = (JPAMVirSchema) schema;\n+    }\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Role role) {\n+        checkType(role, JPARole.class);\n+        this.owner = (JPARole) role;\n+    }\n+}"},{"sha":"78b0358923ca08d51268bc7f9f7cce8496665af1","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMVirSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.membership.MVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirSchema;\n+\n+@Entity\n+@Table(name = JPAMVirSchema.TABLE)\n+@Cacheable\n+public class JPAMVirSchema extends AbstractVirSchema implements MVirSchema {\n+\n+    private static final long serialVersionUID = 6255905733563668766L;\n+\n+    public static final String TABLE = \"MVirSchema\";\n+\n+}"},{"sha":"5f7cef304a6a56400d83eb9b1e7b59e096ae2aab","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/membership/JPAMembership.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fmembership%2FJPAMembership.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,195 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.membership;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttributable;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUser;\n+\n+@Entity\n+@Table(name = JPAMembership.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"user_id\", \"role_id\" }))\n+public class JPAMembership extends AbstractAttributable<MPlainAttr, MDerAttr, MVirAttr> implements Membership {\n+\n+    private static final long serialVersionUID = 5030106264797289469L;\n+\n+    public static final String TABLE = \"Membership\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPAUser user;\n+\n+    @ManyToOne\n+    private JPARole role;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAMPlainAttr> plainAttrs;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAMDerAttr> derAttrs;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAMVirAttr> virAttrs;\n+\n+    public JPAMembership() {\n+        super();\n+\n+        plainAttrs = new ArrayList<>();\n+        derAttrs = new ArrayList<>();\n+        virAttrs = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getRole() {\n+        return role;\n+    }\n+\n+    @Override\n+    public void setRole(final Role role) {\n+        checkType(role, JPARole.class);\n+        this.role = (JPARole) role;\n+    }\n+\n+    @Override\n+    public User getUser() {\n+        return user;\n+    }\n+\n+    @Override\n+    public void setUser(final User user) {\n+        checkType(user, JPAUser.class);\n+        this.user = (JPAUser) user;\n+    }\n+\n+    @Override\n+    public boolean addPlainAttr(final MPlainAttr attr) {\n+        checkType(attr, JPAMPlainAttr.class);\n+        return plainAttrs.add((JPAMPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removePlainAttr(final MPlainAttr attr) {\n+        checkType(attr, JPAMPlainAttr.class);\n+        return plainAttrs.remove((JPAMPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends MPlainAttr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public boolean addDerAttr(final MDerAttr derAttr) {\n+        checkType(derAttr, JPAMDerAttr.class);\n+\n+        if (getRole() != null && derAttr.getSchema() != null) {\n+            MDerAttrTemplate found = null;\n+            for (MDerAttrTemplate template : getRole().findInheritedTemplates(MDerAttrTemplate.class)) {\n+                if (derAttr.getSchema().equals(template.getSchema())) {\n+                    found = template;\n+                }\n+            }\n+            if (found != null) {\n+                derAttr.setTemplate(found);\n+                return derAttrs.add((JPAMDerAttr) derAttr);\n+            }\n+        }\n+\n+        LOG.warn(\"Attribute not added because either role was not yet set, \"\n+                + \"schema was not specified or no template for that schema is available\");\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeDerAttr(final MDerAttr derAttr) {\n+        checkType(derAttr, JPAMDerAttr.class);\n+        return derAttrs.remove((JPAMDerAttr) derAttr);\n+    }\n+\n+    @Override\n+    public List<? extends MDerAttr> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @Override\n+    public boolean addVirAttr(final MVirAttr virAttr) {\n+        checkType(virAttr, JPAMVirAttr.class);\n+\n+        if (getRole() != null && virAttr.getSchema() != null) {\n+            MVirAttrTemplate found = null;\n+            for (MVirAttrTemplate template : getRole().findInheritedTemplates(MVirAttrTemplate.class)) {\n+                if (virAttr.getSchema().equals(template.getSchema())) {\n+                    found = template;\n+                }\n+            }\n+            if (found != null) {\n+                virAttr.setTemplate(found);\n+                return virAttrs.add((JPAMVirAttr) virAttr);\n+            }\n+        }\n+\n+        LOG.warn(\"Attribute not added because either \"\n+                + \"schema was not specified or no template for that schema is available\");\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeVirAttr(final MVirAttr virAttr) {\n+        checkType(virAttr, JPAMVirAttr.class);\n+        return virAttrs.remove((JPAMVirAttr) virAttr);\n+    }\n+\n+    @Override\n+    public List<? extends MVirAttr> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Membership[\" + \"id=\" + id + \", \" + user + \", \" + role + ']';\n+    }\n+}"},{"sha":"a4dbd7a0cf50f70b6578ea47038b31228aed8cf7","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARDerAttr.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttr;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerAttr;\n+\n+@Entity\n+@Table(name = JPARDerAttr.TABLE)\n+public class JPARDerAttr extends AbstractDerAttr implements RDerAttr {\n+\n+    private static final long serialVersionUID = 8007080005675899946L;\n+\n+    public static final String TABLE = \"RDerAttr\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @Column(nullable = false)\n+    @OneToOne(cascade = CascadeType.MERGE)\n+    private JPARDerAttrTemplate template;\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+\n+    @Override\n+    public RDerAttrTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final RDerAttrTemplate template) {\n+        checkType(template, JPARDerAttrTemplate.class);\n+        this.template = (JPARDerAttrTemplate) template;\n+    }\n+\n+    @Override\n+    public RDerSchema getSchema() {\n+        return template == null ? null : template.getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final DerSchema schema) {\n+        LOG.warn(\"This is role attribute, set template to select schema\");\n+    }\n+\n+}"},{"sha":"ba565a710f78e6fa1d2d4aa9ec06ad308015820b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARDerAttrTemplate.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+\n+@Entity\n+@Table(name = JPARDerAttrTemplate.TABLE)\n+public class JPARDerAttrTemplate extends AbstractAttrTemplate<RDerSchema> implements RDerAttrTemplate {\n+\n+    private static final long serialVersionUID = -3424574558427502145L;\n+\n+    public static final String TABLE = \"RDerAttrTemplate\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"schema_name\")\n+    private JPARDerSchema schema;\n+\n+    @Override\n+    public RDerSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final RDerSchema schema) {\n+        checkType(schema, JPARDerSchema.class);\n+        this.schema = (JPARDerSchema) schema;\n+    }\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Role owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+}"},{"sha":"19ec371746d9df6710770b118d2d2ebaf09f33ed","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARDerSchema.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerSchema;\n+\n+@Entity\n+@Table(name = JPARDerSchema.TABLE)\n+public class JPARDerSchema extends AbstractDerSchema implements RDerSchema {\n+\n+    private static final long serialVersionUID = -6868889736207576372L;\n+\n+    public static final String TABLE = \"RDerSchema\";\n+\n+}"},{"sha":"00af59adeb0738548bf5df5582571711555e59b0","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARMapping.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARMapping.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.role.RMapping;\n+import org.apache.syncope.persistence.api.entity.role.RMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.AbstractMapping;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+\n+@Entity\n+@Table(name = JPARMapping.TABLE)\n+public class JPARMapping extends AbstractMapping<RMappingItem> implements RMapping {\n+\n+    public static final String TABLE = \"RMapping\";\n+\n+    private static final long serialVersionUID = 4578756002867863392L;\n+\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * Resource owning this mapping.\n+     */\n+    @OneToOne\n+    private JPAExternalResource resource;\n+\n+    /**\n+     * Attribute mappings.\n+     */\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n+    private List<JPARMappingItem> items;\n+\n+    public JPARMapping() {\n+        super();\n+\n+        items = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n+    }\n+\n+    @Override\n+    public void setAccountIdItem(final RMappingItem item) {\n+        checkType(item, JPARMappingItem.class);\n+        this.addAccountIdItem((JPARMappingItem) item);\n+    }\n+\n+    @Override\n+    public List<? extends RMappingItem> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public boolean addItem(final RMappingItem item) {\n+        checkType(item, JPARMappingItem.class);\n+        return items.contains((JPARMappingItem) item) || items.add((JPARMappingItem) item);\n+    }\n+\n+    @Override\n+    public boolean removeItem(final RMappingItem item) {\n+        checkType(item, JPARMappingItem.class);\n+        return items.remove((JPARMappingItem) item);\n+    }\n+}"},{"sha":"68fb3bd437316195c230d2cba8b7b2a5750fe586","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARMappingItem.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARMappingItem.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Mapping;\n+import org.apache.syncope.persistence.api.entity.role.RMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.AbstractMappingItem;\n+\n+@Entity\n+@Table(name = JPARMappingItem.TABLE)\n+public class JPARMappingItem extends AbstractMappingItem implements RMappingItem {\n+\n+    public static final String TABLE = \"RMappingItem\";\n+\n+    private static final long serialVersionUID = -2670787666933476166L;\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPARMapping mapping;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Mapping<RMappingItem> getMapping() {\n+        return mapping;\n+    }\n+\n+    @Override\n+    public void setMapping(final Mapping<?> mapping) {\n+        checkType(mapping, JPARMapping.class);\n+        this.mapping = (JPARMapping) mapping;\n+    }\n+}"},{"sha":"243c0dbf0a2e75aeefb7cb2921dd3ec605415433","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARPlainAttr.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttr;\n+\n+@Entity\n+@Table(name = JPARPlainAttr.TABLE)\n+public class JPARPlainAttr extends AbstractPlainAttr implements RPlainAttr {\n+\n+    private static final long serialVersionUID = 2848159565890995780L;\n+\n+    public static final String TABLE = \"RPlainAttr\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPARole owner;\n+\n+    @Column(nullable = false)\n+    @OneToOne(cascade = CascadeType.MERGE)\n+    private JPARPlainAttrTemplate template;\n+\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private List<JPARPlainAttrValue> values;\n+\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n+    private JPARPlainAttrUniqueValue uniqueValue;\n+\n+    public JPARPlainAttr() {\n+        super();\n+        values = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+\n+    @Override\n+    public RPlainAttrTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final RPlainAttrTemplate template) {\n+        checkType(template, JPARPlainAttrTemplate.class);\n+        this.template = (JPARPlainAttrTemplate) template;\n+    }\n+\n+    @Override\n+    public RPlainSchema getSchema() {\n+        return template == null ? null : template.getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        LOG.warn(\"This is role attribute, set template to select schema\");\n+    }\n+\n+    @Override\n+    protected boolean addValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPARPlainAttrValue.class);\n+        return values.add((JPARPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean removeValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPARPlainAttrValue.class);\n+        return values.remove((JPARPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public List<? extends RPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public RPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(owner, JPARPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPARPlainAttrUniqueValue) uniqueValue;\n+    }\n+}"},{"sha":"90ac15302d55e06fde74fb1425e84fea471daabd","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARPlainAttrTemplate.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+\n+@Entity\n+@Table(name = JPARPlainAttrTemplate.TABLE)\n+public class JPARPlainAttrTemplate extends AbstractAttrTemplate<RPlainSchema> implements RPlainAttrTemplate {\n+\n+    private static final long serialVersionUID = -3424574558427502145L;\n+\n+    public static final String TABLE = \"RPlainAttrTemplate\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"schema_name\")\n+    private JPARPlainSchema schema;\n+\n+    @Override\n+    public RPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final RPlainSchema schema) {\n+        checkType(schema, JPARPlainSchema.class);\n+        this.schema = (JPARPlainSchema) schema;\n+    }\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Role owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+}"},{"sha":"7a4cdb92b45fc4629bca7dc9c99e042565799d31","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARPlainAttrUniqueValue.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPARPlainAttrUniqueValue.TABLE)\n+public class JPARPlainAttrUniqueValue extends AbstractPlainAttrValue implements RPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = 4681561795607192855L;\n+\n+    public static final String TABLE = \"RPlainAttrUniqueValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne(optional = false)\n+    private JPARPlainAttr attribute;\n+\n+    @ManyToOne(optional = false)\n+    @JoinColumn(name = \"schema_name\")\n+    private JPARPlainSchema schema;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public RPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPARPlainAttr.class);\n+        this.attribute = (JPARPlainAttr) attr;\n+    }\n+\n+    @Override\n+    public RPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPARPlainSchema.class);\n+        this.schema = (JPARPlainSchema) schema;\n+    }\n+}"},{"sha":"428e6410d4f680dd8f85951b60a9152049a82c41","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARPlainAttrValue.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPARPlainAttrValue.TABLE)\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class JPARPlainAttrValue extends AbstractPlainAttrValue implements RPlainAttrValue {\n+\n+    private static final long serialVersionUID = -766808291128424707L;\n+\n+    public static final String TABLE = \"RPlainAttrValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    @NotNull\n+    private JPARPlainAttr attribute;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public RPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPARPlainAttr.class);\n+        this.attribute = (JPARPlainAttr) attr;\n+    }\n+}"},{"sha":"5b1d019b782ade803abdacb80430c1940304160d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARPlainSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainSchema;\n+\n+@Entity\n+@Table(name = JPARPlainSchema.TABLE)\n+@Cacheable\n+public class JPARPlainSchema extends AbstractPlainSchema implements RPlainSchema {\n+\n+    private static final long serialVersionUID = -7417234690221851342L;\n+\n+    public static final String TABLE = \"RPlainSchema\";\n+\n+}"},{"sha":"6795a637b7f9ab14c061506fb4756834895bd874","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARVirAttr.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttr;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirAttr;\n+\n+@Entity\n+@Table(name = JPARVirAttr.TABLE)\n+public class JPARVirAttr extends AbstractVirAttr implements RVirAttr {\n+\n+    private static final long serialVersionUID = -1747430556914428649L;\n+\n+    public static final String TABLE = \"RVirAttr\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @Column(nullable = false)\n+    @OneToOne(cascade = CascadeType.MERGE)\n+    private JPARVirAttrTemplate template;\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPARole.class);\n+        this.owner = (JPARole) owner;\n+    }\n+\n+    @Override\n+    public RVirAttrTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    @Override\n+    public void setTemplate(final RVirAttrTemplate template) {\n+        checkType(template, JPARVirAttrTemplate.class);\n+        this.template = (JPARVirAttrTemplate) template;\n+    }\n+\n+    @Override\n+    public RVirSchema getSchema() {\n+        return template == null ? null : template.getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final VirSchema schema) {\n+        LOG.warn(\"This is role attribute, set template to select schema\");\n+    }\n+\n+}"},{"sha":"a5e41bdd422f5054a1d9fb0acab1dc85b60dfd9e","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARVirAttrTemplate.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttrTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttrTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirAttrTemplate.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.jpa.entity.AbstractAttrTemplate;\n+\n+@Entity\n+@Table(name = JPARVirAttrTemplate.TABLE)\n+public class JPARVirAttrTemplate extends AbstractAttrTemplate<RVirSchema> implements RVirAttrTemplate {\n+\n+    private static final long serialVersionUID = -3424574558427502145L;\n+\n+    public static final String TABLE = \"RVirAttrTemplate\";\n+\n+    @ManyToOne\n+    private JPARole owner;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"schema_name\")\n+    private JPARVirSchema schema;\n+\n+    @Override\n+    public RVirSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final RVirSchema schema) {\n+        checkType(schema, JPARVirSchema.class);\n+        this.schema = (JPARVirSchema) schema;\n+    }\n+\n+    @Override\n+    public Role getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Role role) {\n+        checkType(role, JPARole.class);\n+        this.owner = (JPARole) role;\n+    }\n+}"},{"sha":"0a4fa9dd90c9119ff69b25baaa2f57961e51e1a9","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARVirSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirSchema;\n+\n+@Entity\n+@Table(name = JPARVirSchema.TABLE)\n+@Cacheable\n+public class JPARVirSchema extends AbstractVirSchema implements RVirSchema {\n+\n+    private static final long serialVersionUID = -2595041749349652939L;\n+\n+    public static final String TABLE = \"RVirSchema\";\n+\n+}"},{"sha":"05c9e9f129104008b51c4b1a15b652cef248fa6e","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/role/JPARole.java","status":"added","additions":593,"deletions":0,"changes":593,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Frole%2FJPARole.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,593 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.role;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.persistence.api.entity.AccountPolicy;\n+import org.apache.syncope.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.Entitlement;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.Schema;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.api.entity.membership.MDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttr;\n+import org.apache.syncope.persistence.api.entity.role.RDerAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RDerSchema;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttr;\n+import org.apache.syncope.persistence.api.entity.role.RVirAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.RVirSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.validation.entity.RoleCheck;\n+import org.apache.syncope.persistence.jpa.entity.AbstractSubject;\n+import org.apache.syncope.persistence.jpa.entity.JPAAccountPolicy;\n+import org.apache.syncope.persistence.jpa.entity.JPAEntitlement;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+import org.apache.syncope.persistence.jpa.entity.JPAPasswordPolicy;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMVirAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUser;\n+\n+@Entity\n+@Table(name = JPARole.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"name\", \"parent_id\" }))\n+@Cacheable\n+@RoleCheck\n+public class JPARole extends AbstractSubject<RPlainAttr, RDerAttr, RVirAttr> implements Role {\n+\n+    private static final long serialVersionUID = -5281258853142421875L;\n+\n+    public static final String TABLE = \"SyncopeRole\";\n+\n+    @Id\n+    private Long id;\n+\n+    @NotNull\n+    private String name;\n+\n+    @ManyToOne(optional = true)\n+    private JPARole parent;\n+\n+    @ManyToOne(optional = true)\n+    private JPAUser userOwner;\n+\n+    @ManyToOne(optional = true)\n+    private JPARole roleOwner;\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"role_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"entitlement_name\"))\n+    private Set<JPAEntitlement> entitlements;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPARPlainAttrTemplate> rAttrTemplates;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPARDerAttrTemplate> rDerAttrTemplates;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPARVirAttrTemplate> rVirAttrTemplates;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAMPlainAttrTemplate> mAttrTemplates;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAMDerAttrTemplate> mDerAttrTemplates;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAMVirAttrTemplate> mVirAttrTemplates;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPARPlainAttr> plainAttrs;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPARDerAttr> derAttrs;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPARVirAttr> virAttrs;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritOwner;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritTemplates;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritAttrs;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritDerAttrs;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritVirAttrs;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritPasswordPolicy;\n+\n+    @Basic(optional = true)\n+    @Min(0)\n+    @Max(1)\n+    private Integer inheritAccountPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPAPasswordPolicy passwordPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private JPAAccountPolicy accountPolicy;\n+\n+    /**\n+     * Provisioning external resources.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"role_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"resource_name\"))\n+    @Valid\n+    private Set<JPAExternalResource> resources;\n+\n+    public JPARole() {\n+        super();\n+\n+        entitlements = new HashSet<>();\n+\n+        rAttrTemplates = new ArrayList<>();\n+        rDerAttrTemplates = new ArrayList<>();\n+        rVirAttrTemplates = new ArrayList<>();\n+        mAttrTemplates = new ArrayList<>();\n+        mDerAttrTemplates = new ArrayList<>();\n+        mVirAttrTemplates = new ArrayList<>();\n+\n+        plainAttrs = new ArrayList<>();\n+        derAttrs = new ArrayList<>();\n+        virAttrs = new ArrayList<>();\n+\n+        inheritOwner = getBooleanAsInteger(false);\n+        inheritTemplates = getBooleanAsInteger(false);\n+        inheritAttrs = getBooleanAsInteger(false);\n+        inheritDerAttrs = getBooleanAsInteger(false);\n+        inheritVirAttrs = getBooleanAsInteger(false);\n+        inheritPasswordPolicy = getBooleanAsInteger(false);\n+        inheritAccountPolicy = getBooleanAsInteger(false);\n+\n+        resources = new HashSet<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    protected Set<? extends ExternalResource> internalGetResources() {\n+        return resources;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Role getParent() {\n+        return parent;\n+    }\n+\n+    @Override\n+    public void setParent(final Role parent) {\n+        checkType(parent, JPARole.class);\n+        this.parent = (JPARole) parent;\n+    }\n+\n+    @Override\n+    public boolean isInheritOwner() {\n+        return isBooleanAsInteger(inheritOwner);\n+    }\n+\n+    @Override\n+    public void setInheritOwner(final boolean inheritOwner) {\n+        this.inheritOwner = getBooleanAsInteger(inheritOwner);\n+    }\n+\n+    @Override\n+    public User getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    @Override\n+    public void setUserOwner(final User userOwner) {\n+        checkType(userOwner, JPAUser.class);\n+        this.userOwner = (JPAUser) userOwner;\n+    }\n+\n+    @Override\n+    public JPARole getRoleOwner() {\n+        return roleOwner;\n+    }\n+\n+    @Override\n+    public void setRoleOwner(final Role roleOwner) {\n+        checkType(roleOwner, JPARole.class);\n+        this.roleOwner = (JPARole) roleOwner;\n+    }\n+\n+    @Override\n+    public boolean addEntitlement(final Entitlement entitlement) {\n+        checkType(entitlement, JPAEntitlement.class);\n+        return entitlements.add((JPAEntitlement) entitlement);\n+    }\n+\n+    @Override\n+    public boolean removeEntitlement(final Entitlement entitlement) {\n+        checkType(entitlement, JPAEntitlement.class);\n+        return entitlements.remove((JPAEntitlement) entitlement);\n+    }\n+\n+    @Override\n+    public Set<? extends Entitlement> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    @Override\n+    public boolean isInheritTemplates() {\n+        return isBooleanAsInteger(inheritTemplates);\n+    }\n+\n+    @Override\n+    public void setInheritTemplates(final boolean inheritAttrTemplates) {\n+        this.inheritTemplates = getBooleanAsInteger(inheritAttrTemplates);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AttrTemplate<K>, K extends Schema> List<T> getAttrTemplates(final Class<T> reference) {\n+        List<T> result = new ArrayList<>();\n+\n+        if (RPlainAttrTemplate.class.isAssignableFrom(reference)) {\n+            result = (List<T>) rAttrTemplates;\n+        } else if (RDerAttrTemplate.class.isAssignableFrom(reference)) {\n+            result = (List<T>) rDerAttrTemplates;\n+        } else if (RVirAttrTemplate.class.isAssignableFrom(reference)) {\n+            result = (List<T>) rVirAttrTemplates;\n+        } else if (MPlainAttrTemplate.class.isAssignableFrom(reference)) {\n+            result = (List<T>) mAttrTemplates;\n+        } else if (MDerAttrTemplate.class.isAssignableFrom(reference)) {\n+            result = (List<T>) mDerAttrTemplates;\n+        } else if (MVirAttrTemplate.class.isAssignableFrom(reference)) {\n+            result = (List<T>) mVirAttrTemplates;\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<K>, K extends Schema> T getAttrTemplate(\n+            final Class<T> reference, final String schemaName) {\n+\n+        T result = null;\n+\n+        for (T template : findInheritedTemplates(reference)) {\n+            if (schemaName.equals(template.getSchema().getKey())) {\n+                result = template;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<K>, K extends Schema> List<K> getAttrTemplateSchemas(final Class<T> reference) {\n+        final List<K> result = new ArrayList<>();\n+\n+        for (T template : findInheritedTemplates(reference)) {\n+            result.add(template.getSchema());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <T extends AttrTemplate<K>, K extends Schema> List<T> findInheritedTemplates(final Class<T> reference) {\n+        final List<T> result = new ArrayList<>(getAttrTemplates(reference));\n+\n+        if (isInheritTemplates() && getParent() != null) {\n+            result.addAll(getParent().findInheritedTemplates(reference));\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean addPlainAttr(final RPlainAttr attr) {\n+        checkType(attr, JPARPlainAttr.class);\n+        return plainAttrs.add((JPARPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removePlainAttr(final RPlainAttr attr) {\n+        checkType(attr, JPARPlainAttr.class);\n+        return plainAttrs.remove((JPARPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends RPlainAttr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public boolean addDerAttr(final RDerAttr attr) {\n+        checkType(attr, JPARDerAttr.class);\n+        return derAttrs.add((JPARDerAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removeDerAttr(final RDerAttr attr) {\n+        checkType(attr, JPARDerAttr.class);\n+        return derAttrs.remove((JPARDerAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends RDerAttr> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @Override\n+    public boolean addVirAttr(final RVirAttr attr) {\n+        checkType(attr, JPARVirAttr.class);\n+        return virAttrs.add((JPARVirAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removeVirAttr(final RVirAttr attr) {\n+        checkType(attr, JPARVirAttr.class);\n+        return virAttrs.remove((JPARVirAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends RVirAttr> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @Override\n+    public boolean isInheritAttrs() {\n+        return isBooleanAsInteger(inheritAttrs);\n+    }\n+\n+    @Override\n+    public void setInheritAttrs(final boolean inheritAttrs) {\n+        this.inheritAttrs = getBooleanAsInteger(inheritAttrs);\n+    }\n+\n+    /**\n+     * Get all inherited attributes from the ancestors.\n+     *\n+     * @return a list of inherited and only inherited attributes.\n+     */\n+    @Override\n+    public List<? extends RPlainAttr> findLastInheritedAncestorPlainAttrs() {\n+        final Map<JPARPlainSchema, RPlainAttr> result = new HashMap<>();\n+\n+        if (!isInheritAttrs()) {\n+            return plainAttrs;\n+        }\n+        if (isInheritAttrs() && getParent() != null) {\n+            final Map<PlainSchema, RPlainAttr> attrMap = getPlainAttrMap();\n+\n+            // Add inherit attributes\n+            for (RPlainAttr attr : getParent().findLastInheritedAncestorPlainAttrs()) {\n+                if (attrMap.containsKey(attr.getSchema())) {\n+                    result.remove((JPARPlainSchema) attr.getSchema());\n+                }\n+                result.put((JPARPlainSchema) attr.getSchema(), attr);\n+            }\n+        }\n+        return new ArrayList<>(result.values());\n+    }\n+\n+    @Override\n+    public boolean isInheritDerAttrs() {\n+        return isBooleanAsInteger(inheritDerAttrs);\n+    }\n+\n+    @Override\n+    public void setInheritDerAttrs(final boolean inheritDerAttrs) {\n+        this.inheritDerAttrs = getBooleanAsInteger(inheritDerAttrs);\n+\n+    }\n+\n+    /**\n+     * Get all inherited derived attributes from the ancestors.\n+     *\n+     * @return a list of inherited and only inherited attributes.\n+     */\n+    @Override\n+    public List<? extends RDerAttr> findLastInheritedAncestorDerAttrs() {\n+        final Map<RDerSchema, RDerAttr> result = new HashMap<>();\n+\n+        if (!isInheritDerAttrs()) {\n+            return derAttrs;\n+        }\n+        if (isInheritDerAttrs() && getParent() != null) {\n+            Map<DerSchema, RDerAttr> derAttrMap = getDerAttrMap();\n+\n+            // Add inherit derived attributes\n+            for (RDerAttr attr : getParent().findLastInheritedAncestorDerAttrs()) {\n+                if (derAttrMap.containsKey(attr.getSchema())) {\n+                    result.remove(attr.getSchema());\n+                }\n+                result.put(attr.getSchema(), attr);\n+            }\n+        }\n+        return new ArrayList<>(result.values());\n+    }\n+\n+    @Override\n+    public boolean isInheritVirAttrs() {\n+        return isBooleanAsInteger(inheritVirAttrs);\n+    }\n+\n+    @Override\n+    public void setInheritVirAttrs(final boolean inheritVirAttrs) {\n+        this.inheritVirAttrs = getBooleanAsInteger(inheritVirAttrs);\n+\n+    }\n+\n+    /**\n+     * Get all inherited virtual attributes from the ancestors.\n+     *\n+     * @return a list of inherited and only inherited attributes.\n+     */\n+    @Override\n+    public List<? extends RVirAttr> findLastInheritedAncestorVirAttrs() {\n+        final Map<RVirSchema, RVirAttr> result = new HashMap<>();\n+\n+        if (!isInheritVirAttrs()) {\n+            return virAttrs;\n+        }\n+\n+        if (isInheritVirAttrs() && getParent() != null) {\n+            Map<VirSchema, RVirAttr> virAttrMap = getVirAttrMap();\n+\n+            // Add inherit virtual attributes\n+            for (RVirAttr attr : getParent().findLastInheritedAncestorVirAttrs()) {\n+                if (virAttrMap.containsKey(attr.getSchema())) {\n+                    result.remove(attr.getSchema());\n+                }\n+                result.put(attr.getSchema(), attr);\n+            }\n+        }\n+        return new ArrayList<>(result.values());\n+    }\n+\n+    /**\n+     * Get first valid password policy.\n+     *\n+     * @return parent password policy if isInheritPasswordPolicy is 'true' and parent is not null, local password policy\n+     * otherwise\n+     */\n+    @Override\n+    public PasswordPolicy getPasswordPolicy() {\n+        return isInheritPasswordPolicy() && getParent() != null\n+                ? getParent().getPasswordPolicy()\n+                : passwordPolicy;\n+    }\n+\n+    @Override\n+    public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n+        checkType(passwordPolicy, JPAPasswordPolicy.class);\n+        this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n+    }\n+\n+    @Override\n+    public boolean isInheritPasswordPolicy() {\n+        return isBooleanAsInteger(inheritPasswordPolicy);\n+    }\n+\n+    @Override\n+    public void setInheritPasswordPolicy(final boolean inheritPasswordPolicy) {\n+        this.inheritPasswordPolicy = getBooleanAsInteger(inheritPasswordPolicy);\n+    }\n+\n+    /**\n+     * Get first valid account policy.\n+     *\n+     * @return parent account policy if isInheritAccountPolicy is 'true' and parent is not null, local account policy\n+     * otherwise.\n+     */\n+    @Override\n+    public AccountPolicy getAccountPolicy() {\n+        return isInheritAccountPolicy() && getParent() != null\n+                ? getParent().getAccountPolicy()\n+                : accountPolicy;\n+    }\n+\n+    @Override\n+    public void setAccountPolicy(final AccountPolicy accountPolicy) {\n+        checkType(accountPolicy, JPAAccountPolicy.class);\n+        this.accountPolicy = (JPAAccountPolicy) accountPolicy;\n+    }\n+\n+    @Override\n+    public boolean isInheritAccountPolicy() {\n+        return isBooleanAsInteger(inheritAccountPolicy);\n+    }\n+\n+    @Override\n+    public void setInheritAccountPolicy(boolean inheritAccountPolicy) {\n+        this.inheritAccountPolicy = getBooleanAsInteger(inheritAccountPolicy);\n+    }\n+}"},{"sha":"7938b015c9186b2e9289b7da52b0bca0a63c27c3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/AbstractProvisioningTask.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FAbstractProvisioningTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.task.ProvisioningTask;\n+import org.apache.syncope.persistence.jpa.validation.entity.ProvisioningTaskCheck;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+\n+@MappedSuperclass\n+@ProvisioningTaskCheck\n+public abstract class AbstractProvisioningTask extends JPASchedTask implements ProvisioningTask {\n+\n+    private static final long serialVersionUID = -4141057723006682562L;\n+\n+    /**\n+     * ExternalResource to which the sync happens.\n+     */\n+    @ManyToOne\n+    private JPAExternalResource resource;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer performCreate;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer performUpdate;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer performDelete;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer syncStatus;\n+\n+    /**\n+     * @see UnmatchingRule\n+     */\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    protected UnmatchingRule unmatchingRule;\n+\n+    /**\n+     * @see MatchingRule\n+     */\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    protected MatchingRule matchingRule;\n+\n+    public AbstractProvisioningTask(final TaskType type, final String jobClassName) {\n+        super();\n+\n+        this.type = type;\n+        super.setJobClassName(jobClassName);\n+    }\n+\n+    @Override\n+    public void setJobClassName(final String jobClassName) {\n+        // fixed to SyncJob, cannot be changed\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n+    }\n+\n+    @Override\n+    public boolean isPerformCreate() {\n+        return isBooleanAsInteger(performCreate);\n+    }\n+\n+    @Override\n+\n+    public void setPerformCreate(final boolean performCreate) {\n+        this.performCreate = getBooleanAsInteger(performCreate);\n+    }\n+\n+    @Override\n+\n+    public boolean isPerformUpdate() {\n+        return isBooleanAsInteger(performUpdate);\n+    }\n+\n+    @Override\n+\n+    public void setPerformUpdate(final boolean performUpdate) {\n+        this.performUpdate = getBooleanAsInteger(performUpdate);\n+    }\n+\n+    @Override\n+    public boolean isPerformDelete() {\n+        return isBooleanAsInteger(performDelete);\n+    }\n+\n+    @Override\n+    public void setPerformDelete(boolean performDelete) {\n+        this.performDelete = getBooleanAsInteger(performDelete);\n+    }\n+\n+    @Override\n+    public boolean isSyncStatus() {\n+        return isBooleanAsInteger(syncStatus);\n+    }\n+\n+    @Override\n+    public void setSyncStatus(final boolean syncStatus) {\n+        this.syncStatus = getBooleanAsInteger(syncStatus);\n+    }\n+\n+    @Override\n+    public UnmatchingRule getUnmatchingRule() {\n+        return this.unmatchingRule;\n+    }\n+\n+    @Override\n+    public void setUnmatchingRule(final UnmatchingRule unmatchigRule) {\n+        this.unmatchingRule = unmatchigRule;\n+    }\n+\n+    @Override\n+    public MatchingRule getMatchingRule() {\n+        return this.matchingRule;\n+    }\n+\n+    @Override\n+    public void setMatchingRule(final MatchingRule matchigRule) {\n+        this.matchingRule = matchigRule;\n+    }\n+}"},{"sha":"6edf99e0bae90f8a6f73a70554217d30345bff22","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPANotificationTask.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.persistence.api.entity.task.NotificationTask;\n+\n+@Entity\n+@DiscriminatorValue(\"NotificationTask\")\n+public class JPANotificationTask extends JPATask implements NotificationTask {\n+\n+    private static final long serialVersionUID = 95731573485279180L;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"address\")\n+    @CollectionTable(name = \"NotificationTask_recipients\",\n+            joinColumns =\n+            @JoinColumn(name = \"NotificationTask_id\", referencedColumnName = \"id\"))\n+    private Set<String> recipients;\n+\n+    @NotNull\n+    private String sender;\n+\n+    @NotNull\n+    private String subject;\n+\n+    @NotNull\n+    @Lob\n+    private String textBody;\n+\n+    @NotNull\n+    @Lob\n+    private String htmlBody;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer executed;\n+\n+    @Enumerated(EnumType.STRING)\n+    @NotNull\n+    private TraceLevel traceLevel;\n+\n+    public JPANotificationTask() {\n+        super();\n+\n+        type = TaskType.NOTIFICATION;\n+        recipients = new HashSet<>();\n+        executed = getBooleanAsInteger(false);\n+    }\n+\n+    @Override\n+    public Set<String> getRecipients() {\n+        return recipients;\n+    }\n+\n+    @Override\n+    public boolean addRecipient(final String recipient) {\n+        return recipients.add(recipient);\n+    }\n+\n+    @Override\n+    public boolean removeRecipient(final String recipient) {\n+        return recipients.remove(recipient);\n+    }\n+\n+    @Override\n+    public String getSender() {\n+        return sender;\n+    }\n+\n+    @Override\n+    public void setSender(final String sender) {\n+        this.sender = sender;\n+    }\n+\n+    @Override\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    @Override\n+    public void setSubject(final String subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public String getTextBody() {\n+        return textBody;\n+    }\n+\n+    @Override\n+    public void setTextBody(final String textBody) {\n+        this.textBody = textBody;\n+    }\n+\n+    @Override\n+    public String getHtmlBody() {\n+        return htmlBody;\n+    }\n+\n+    @Override\n+    public void setHtmlBody(final String htmlBody) {\n+        this.htmlBody = htmlBody;\n+    }\n+\n+    @Override\n+    public boolean isExecuted() {\n+        return isBooleanAsInteger(executed);\n+    }\n+\n+    @Override\n+    public void setExecuted(boolean executed) {\n+        this.executed = getBooleanAsInteger(executed);\n+    }\n+\n+    @Override\n+    public TraceLevel getTraceLevel() {\n+        return traceLevel;\n+    }\n+\n+    @Override\n+    public void setTraceLevel(final TraceLevel traceLevel) {\n+        this.traceLevel = traceLevel;\n+    }\n+}"},{"sha":"ec47e5935cb7ffdf7d659082a7b635d7da6506a3","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPAPropagationTask.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.PropagationMode;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.persistence.jpa.validation.entity.PropagationTaskCheck;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+import org.apache.syncope.server.utils.serialization.POJOHelper;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+\n+/**\n+ * Encapsulate all information about a propagation task.\n+ */\n+@Entity\n+@DiscriminatorValue(\"PropagationTask\")\n+@PropagationTaskCheck\n+public class JPAPropagationTask extends JPATask implements PropagationTask {\n+\n+    private static final long serialVersionUID = 7086054884614511210L;\n+\n+    /**\n+     * @see PropagationMode\n+     */\n+    @Enumerated(EnumType.STRING)\n+    private PropagationMode propagationMode;\n+\n+    /**\n+     * @see ResourceOperation\n+     */\n+    @Enumerated(EnumType.STRING)\n+    private ResourceOperation propagationOperation;\n+\n+    /**\n+     * The accountId on the external resource.\n+     */\n+    private String accountId;\n+\n+    /**\n+     * The (optional) former accountId on the external resource.\n+     */\n+    private String oldAccountId;\n+\n+    /**\n+     * Attributes to be propagated.\n+     */\n+    @Lob\n+    private String xmlAttributes;\n+\n+    private String objectClassName;\n+\n+    @Enumerated(EnumType.STRING)\n+    private AttributableType subjectType;\n+\n+    private Long subjectId;\n+\n+    public JPAPropagationTask() {\n+        super();\n+        type = TaskType.PROPAGATION;\n+    }\n+\n+    /**\n+     * ExternalResource to which the propagation happens.\n+     */\n+    @ManyToOne\n+    private JPAExternalResource resource;\n+\n+    @Override\n+    public String getAccountId() {\n+        return accountId;\n+    }\n+\n+    @Override\n+    public void setAccountId(final String accountId) {\n+        this.accountId = accountId;\n+    }\n+\n+    @Override\n+    public String getOldAccountId() {\n+        return oldAccountId;\n+    }\n+\n+    @Override\n+    public void setOldAccountId(final String oldAccountId) {\n+        this.oldAccountId = oldAccountId;\n+    }\n+\n+    @Override\n+    public Set<Attribute> getAttributes() {\n+        return StringUtils.isBlank(xmlAttributes)\n+                ? Collections.<Attribute>emptySet()\n+                : new HashSet<>(Arrays.asList(POJOHelper.deserialize(xmlAttributes, Attribute[].class)));\n+    }\n+\n+    @Override\n+    public void setAttributes(final Set<Attribute> attributes) {\n+        xmlAttributes = POJOHelper.serialize(attributes);\n+    }\n+\n+    @Override\n+\n+    public PropagationMode getPropagationMode() {\n+        return propagationMode;\n+    }\n+\n+    @Override\n+\n+    public void setPropagationMode(final PropagationMode propagationMode) {\n+        this.propagationMode = propagationMode;\n+    }\n+\n+    @Override\n+\n+    public ResourceOperation getPropagationOperation() {\n+        return propagationOperation;\n+    }\n+\n+    @Override\n+\n+    public void setPropagationOperation(final ResourceOperation propagationOperation) {\n+        this.propagationOperation = propagationOperation;\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n+    }\n+\n+    @Override\n+    public String getObjectClassName() {\n+        return objectClassName;\n+    }\n+\n+    @Override\n+    public void setObjectClassName(final String objectClassName) {\n+        this.objectClassName = objectClassName;\n+    }\n+\n+    @Override\n+\n+    public AttributableType getSubjectType() {\n+        return subjectType;\n+    }\n+\n+    @Override\n+\n+    public void setSubjectType(final AttributableType subjectType) {\n+        this.subjectType = subjectType;\n+    }\n+\n+    @Override\n+\n+    public Long getSubjectId() {\n+        return subjectId;\n+    }\n+\n+    @Override\n+\n+    public void setSubjectId(final Long subjectId) {\n+        this.subjectId = subjectId;\n+    }\n+}"},{"sha":"d137ef3b109d410d3c96cd5cb6ce0e57547173e7","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPAPushTask.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPushTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.provisioning.api.job.PushJob;\n+\n+@Entity\n+@DiscriminatorValue(\"PushTask\")\n+public class JPAPushTask extends AbstractProvisioningTask implements PushTask {\n+\n+    private static final long serialVersionUID = -4141057723006682564L;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"actionClassName\")\n+    @CollectionTable(name = \"PushTask_actionsClassNames\",\n+            joinColumns =\n+            @JoinColumn(name = \"PushTask_id\", referencedColumnName = \"id\"))\n+    private List<String> actionsClassNames = new ArrayList<>();\n+\n+    private String userFilter;\n+\n+    private String roleFilter;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public JPAPushTask() {\n+        super(TaskType.PUSH, PushJob.class.getName());\n+    }\n+\n+    @Override\n+    public List<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    @Override\n+    public String getUserFilter() {\n+        return userFilter;\n+    }\n+\n+    @Override\n+    public void setUserFilter(final String filter) {\n+        this.userFilter = filter;\n+    }\n+\n+    @Override\n+    public String getRoleFilter() {\n+        return roleFilter;\n+    }\n+\n+    @Override\n+    public void setRoleFilter(final String roleFilter) {\n+        this.roleFilter = roleFilter;\n+    }\n+}"},{"sha":"649664d55b6389a8dc96b29f336073b9e6c89105","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPASchedTask.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.persistence.jpa.validation.entity.SchedTaskCheck;\n+\n+@Entity\n+@DiscriminatorValue(\"SchedTask\")\n+@SchedTaskCheck\n+public class JPASchedTask extends JPATask implements SchedTask {\n+\n+    private static final long serialVersionUID = -4141057723006682562L;\n+\n+    protected String cronExpression;\n+\n+    @NotNull\n+    protected String jobClassName;\n+\n+    @NotNull\n+    protected String name;\n+\n+    protected String description;\n+\n+    public JPASchedTask() {\n+        super();\n+        this.type = TaskType.SCHEDULED;\n+    }\n+\n+    @Override\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    @Override\n+    public void setCronExpression(final String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+\n+    @Override\n+    public String getJobClassName() {\n+        return jobClassName;\n+    }\n+\n+    @Override\n+    public void setJobClassName(final String jobClassName) {\n+        this.jobClassName = jobClassName;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"0e0a22535c6647e5a9e00b965218687c78a1aaec","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPASyncTask.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Basic;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Lob;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.entity.task.SyncTask;\n+import org.apache.syncope.provisioning.api.job.SyncJob;\n+import org.apache.syncope.server.utils.serialization.POJOHelper;\n+\n+@Entity\n+@DiscriminatorValue(\"SyncTask\")\n+public class JPASyncTask extends AbstractProvisioningTask implements SyncTask {\n+\n+    private static final long serialVersionUID = -4141057723006682563L;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"actionClassName\")\n+    @CollectionTable(name = \"SyncTask_actionsClassNames\",\n+            joinColumns =\n+            @JoinColumn(name = \"SyncTask_id\", referencedColumnName = \"id\"))\n+    private List<String> actionsClassNames = new ArrayList<>();\n+\n+    @Lob\n+    private String userTemplate;\n+\n+    @Lob\n+    private String roleTemplate;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer fullReconciliation;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public JPASyncTask() {\n+        super(TaskType.SYNCHRONIZATION, SyncJob.class.getName());\n+    }\n+\n+    @Override\n+    public List<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    @Override\n+    public UserTO getUserTemplate() {\n+        return userTemplate == null\n+                ? new UserTO()\n+                : POJOHelper.deserialize(userTemplate, UserTO.class);\n+    }\n+\n+    @Override\n+    public void setUserTemplate(final UserTO userTemplate) {\n+        this.userTemplate = POJOHelper.serialize(userTemplate);\n+    }\n+\n+    @Override\n+    public RoleTO getRoleTemplate() {\n+        return userTemplate == null\n+                ? new RoleTO()\n+                : POJOHelper.deserialize(roleTemplate, RoleTO.class);\n+    }\n+\n+    @Override\n+    public void setRoleTemplate(final RoleTO roleTemplate) {\n+        this.roleTemplate = POJOHelper.serialize(roleTemplate);\n+    }\n+\n+    @Override\n+    public boolean isFullReconciliation() {\n+        return isBooleanAsInteger(fullReconciliation);\n+    }\n+\n+    @Override\n+    public void setFullReconciliation(final boolean fullReconciliation) {\n+        this.fullReconciliation = getBooleanAsInteger(fullReconciliation);\n+    }\n+}"},{"sha":"eba6df5c81f8348538d28b0e3976c72ed39ea78a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPATask.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATask.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.entity.task.Task;\n+import org.apache.syncope.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.persistence.jpa.entity.AbstractEntity;\n+\n+@Entity\n+@Table(name = JPATask.TABLE)\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"DTYPE\")\n+public abstract class JPATask extends AbstractEntity<Long> implements Task {\n+\n+    private static final long serialVersionUID = 5837401178128177511L;\n+\n+    public static final String TABLE = \"Task\";\n+\n+    /**\n+     * Id.\n+     */\n+    @Id\n+    private Long id;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    protected TaskType type;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n+    private List<JPATaskExec> executions;\n+\n+    public JPATask() {\n+        super();\n+\n+        executions = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public TaskType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public boolean addExec(final TaskExec exec) {\n+        checkType(exec, JPATaskExec.class);\n+        return exec != null && !executions.contains((JPATaskExec) exec) && executions.add((JPATaskExec) exec);\n+    }\n+\n+    @Override\n+    public boolean removeExec(final TaskExec exec) {\n+        checkType(exec, JPATaskExec.class);\n+        return exec != null && executions.remove((JPATaskExec) exec);\n+    }\n+\n+    @Override\n+    public List<? extends TaskExec> getExecs() {\n+        return executions;\n+    }\n+\n+}"},{"sha":"ec29c0b105306e8487d456e1886c81e7eeada87e","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/task/JPATaskExec.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.task;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.task.Task;\n+import org.apache.syncope.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.persistence.jpa.entity.AbstractExec;\n+\n+/**\n+ * An execution (with result) of a Task.\n+ *\n+ * @see JPATask\n+ */\n+@Entity\n+@Table(name = JPATaskExec.TABLE)\n+public class JPATaskExec extends AbstractExec implements TaskExec {\n+\n+    private static final long serialVersionUID = 1909033231464074554L;\n+\n+    public static final String TABLE = \"TaskExec\";\n+\n+    /**\n+     * Id.\n+     */\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * The referred task.\n+     */\n+    @ManyToOne(optional = false)\n+    private JPATask task;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Task getTask() {\n+        return task;\n+    }\n+\n+    @Override\n+    public void setTask(final Task task) {\n+        checkType(task, JPATask.class);\n+        this.task = (JPATask) task;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new StringBuilder(getClass().getSimpleName()).append('{').\n+                append(\"id=\").append(id).append(\", \").\n+                append(\"startDate=\").append(startDate).append(\", \").\n+                append(\"endDate=\").append(endDate).append(\", \").\n+                append(\"task=\").append(task).append(\", \").\n+                append(\"status=\").append(status).append(\", \").\n+                append(\"message=\").append(message).\n+                append('}').\n+                toString();\n+    }\n+}"},{"sha":"868b2634db587cd3e93ccdeb7ce5e19935ff039d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUDerAttr.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.DerSchema;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerAttr;\n+\n+@Entity\n+@Table(name = JPAUDerAttr.TABLE)\n+public class JPAUDerAttr extends AbstractDerAttr implements UDerAttr {\n+\n+    private static final long serialVersionUID = 4723044452807292060L;\n+\n+    public static final String TABLE = \"UDerAttr\";\n+\n+    @ManyToOne\n+    private JPAUser owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAUDerSchema derSchema;\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAUser.class);\n+        this.owner = (JPAUser) owner;\n+    }\n+\n+    @Override\n+    public UDerSchema getSchema() {\n+        return derSchema;\n+    }\n+\n+    @Override\n+    public void setSchema(final DerSchema derSchema) {\n+        checkType(derSchema, JPAUDerSchema.class);\n+        this.derSchema = (JPAUDerSchema) derSchema;\n+    }\n+}"},{"sha":"2acf3a3ecbcadd3d19499ea5bd062734e7135f56","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUDerSchema.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractDerSchema;\n+\n+@Entity\n+@Table(name = JPAUDerSchema.TABLE)\n+public class JPAUDerSchema extends AbstractDerSchema implements UDerSchema {\n+\n+    private static final long serialVersionUID = 6244467775394201229L;\n+\n+    public static final String TABLE = \"UDerSchema\";\n+\n+}"},{"sha":"f778eeb3a00b383210d19a0b88224e4670f69426","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUMapping.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMapping.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.MappingItem;\n+import org.apache.syncope.persistence.api.entity.user.UMapping;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.AbstractMapping;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+\n+@Entity\n+@Table(name = JPAUMapping.TABLE)\n+public class JPAUMapping extends AbstractMapping<UMappingItem> implements UMapping {\n+\n+    private static final long serialVersionUID = 4285801404504561073L;\n+\n+    public static final String TABLE = \"UMapping\";\n+\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * Resource owning this mapping.\n+     */\n+    @OneToOne\n+    private JPAExternalResource resource;\n+\n+    /**\n+     * Attribute mappings.\n+     */\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n+    private List<JPAUMappingItem> items;\n+\n+    public JPAUMapping() {\n+        super();\n+\n+        items = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n+    }\n+\n+    @Override\n+    public void setAccountIdItem(final UMappingItem item) {\n+        checkType(item, JPAUMappingItem.class);\n+        this.addAccountIdItem((JPAUMappingItem) item);\n+    }\n+\n+    @Override\n+    public UMappingItem getPasswordItem() {\n+        UMappingItem passwordItem = null;\n+        for (MappingItem item : getItems()) {\n+            if (item.isPassword()) {\n+                passwordItem = (JPAUMappingItem) item;\n+            }\n+        }\n+        return passwordItem;\n+    }\n+\n+    @Override\n+    public boolean setPasswordItem(final UMappingItem passwordItem) {\n+        checkType(passwordItem, JPAUMappingItem.class);\n+\n+        passwordItem.setExtAttrName(OperationalAttributes.PASSWORD_NAME);\n+        passwordItem.setPassword(true);\n+        return this.addItem((JPAUMappingItem) passwordItem);\n+    }\n+\n+    @Override\n+    public List<? extends UMappingItem> getItems() {\n+        return items;\n+    }\n+\n+    @Override\n+    public boolean addItem(final UMappingItem item) {\n+        checkType(item, JPAUMappingItem.class);\n+        return items.contains((JPAUMappingItem) item) || items.add((JPAUMappingItem) item);\n+    }\n+\n+    @Override\n+    public boolean removeItem(final UMappingItem item) {\n+        checkType(item, JPAUMappingItem.class);\n+        return items.remove((JPAUMappingItem) item);\n+    }\n+}"},{"sha":"47aa4e921a7629460d60a0b59f47823c8dbcfdcf","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUMappingItem.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUMappingItem.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Mapping;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.AbstractMappingItem;\n+\n+@Entity\n+@Table(name = JPAUMappingItem.TABLE)\n+public class JPAUMappingItem extends AbstractMappingItem implements UMappingItem {\n+\n+    private static final long serialVersionUID = 2936446317887310833L;\n+\n+    public static final String TABLE = \"UMappingItem\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPAUMapping mapping;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Mapping<UMappingItem> getMapping() {\n+        return mapping;\n+    }\n+\n+    @Override\n+    public void setMapping(final Mapping<?> mapping) {\n+        checkType(mapping, JPAUMapping.class);\n+        this.mapping = (JPAUMapping) mapping;\n+    }\n+}"},{"sha":"7f32ae32420e92571a9d41aa99ca2beec8952f25","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUPlainAttr.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttr;\n+\n+@Entity\n+@Table(name = JPAUPlainAttr.TABLE)\n+public class JPAUPlainAttr extends AbstractPlainAttr implements UPlainAttr {\n+\n+    private static final long serialVersionUID = 6333601983691157406L;\n+\n+    public static final String TABLE = \"UPlainAttr\";\n+\n+    /**\n+     * Auto-generated id for this table.\n+     */\n+    @Id\n+    private Long id;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAUser owner;\n+\n+    /**\n+     * The schema of this attribute.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"schema_name\")\n+    private JPAUPlainSchema schema;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private List<JPAUPlainAttrValue> values;\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @OneToOne(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @Valid\n+    private JPAUPlainAttrUniqueValue uniqueValue;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public JPAUPlainAttr() {\n+        super();\n+        values = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAUser.class);\n+        this.owner = (JPAUser) owner;\n+    }\n+\n+    @Override\n+    public UPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPAUPlainSchema.class);\n+        this.schema = (JPAUPlainSchema) schema;\n+    }\n+\n+    @Override\n+    protected boolean addValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAUPlainAttrValue.class);\n+        return values.add((JPAUPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean removeValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAUPlainAttrValue.class);\n+        return values.remove((JPAUPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public List<? extends UPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public UPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, JPAUPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPAUPlainAttrUniqueValue) uniqueValue;\n+    }\n+}"},{"sha":"d65c569745377c01cac8a406a321659c386181d6","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUPlainAttrUniqueValue.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrUniqueValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPAUPlainAttrUniqueValue.TABLE)\n+public class JPAUPlainAttrUniqueValue extends AbstractPlainAttrValue implements UPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = -64080804563305387L;\n+\n+    public static final String TABLE = \"UPlainAttrUniqueValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne(optional = false)\n+    private JPAUPlainAttr attribute;\n+\n+    @ManyToOne(optional = false)\n+    @JoinColumn(name = \"schema_name\")\n+    private JPAUPlainSchema schema;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public UPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPAUPlainAttr.class);\n+        this.attribute = (JPAUPlainAttr) attr;\n+    }\n+\n+    @Override\n+    public UPlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPAUPlainSchema.class);\n+        this.schema = (JPAUPlainSchema) schema;\n+    }\n+\n+}"},{"sha":"6f9791593d988b59f0884e94f7e6c4fe1d8720b8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUPlainAttrValue.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPAUPlainAttrValue.TABLE)\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class JPAUPlainAttrValue extends AbstractPlainAttrValue implements UPlainAttrValue {\n+\n+    private static final long serialVersionUID = -6259576015647897446L;\n+\n+    public static final String TABLE = \"UPlainAttrValue\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    @NotNull\n+    private JPAUPlainAttr attribute;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public UPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr attr) {\n+        checkType(attr, JPAUPlainAttr.class);\n+        this.attribute = (JPAUPlainAttr) attr;\n+    }\n+}"},{"sha":"1054a59f286cba6790a714731ed58e02e80bf326","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUPlainSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractPlainSchema;\n+\n+@Entity\n+@Table(name = JPAUPlainSchema.TABLE)\n+@Cacheable\n+public class JPAUPlainSchema extends AbstractPlainSchema implements UPlainSchema {\n+\n+    public static final String TABLE = \"UPlainSchema\";\n+\n+    private static final long serialVersionUID = -7272127460142463237L;\n+\n+}"},{"sha":"06770d52ac0aca5d27fb9bbc8ab924264bf1c1d8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUVirAttr.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.Attributable;\n+import org.apache.syncope.persistence.api.entity.VirSchema;\n+import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.persistence.api.entity.user.UVirSchema;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirAttr;\n+\n+@Entity\n+@Table(name = JPAUVirAttr.TABLE)\n+public class JPAUVirAttr extends AbstractVirAttr implements UVirAttr {\n+\n+    private static final long serialVersionUID = 2943450934283989741L;\n+\n+    public static final String TABLE = \"UVirAttr\";\n+\n+    @ManyToOne\n+    private JPAUser owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAUVirSchema virSchema;\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final Attributable<?, ?, ?> owner) {\n+        checkType(owner, JPAUser.class);\n+        this.owner = (JPAUser) owner;\n+    }\n+\n+    @Override\n+    public UVirSchema getSchema() {\n+        return virSchema;\n+    }\n+\n+    @Override\n+    public void setSchema(final VirSchema virSchema) {\n+        checkType(virSchema, JPAUVirSchema.class);\n+        this.virSchema = (JPAUVirSchema) virSchema;\n+    }\n+}"},{"sha":"abf363536db7493d0ab69a82dcd80f46a171bf40","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUVirSchema.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirSchema.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.persistence.api.entity.user.UVirSchema;\n+import org.apache.syncope.persistence.jpa.entity.AbstractVirSchema;\n+\n+@Entity\n+@Table(name = JPAUVirSchema.TABLE)\n+@Cacheable\n+public class JPAUVirSchema extends AbstractVirSchema implements UVirSchema {\n+\n+    private static final long serialVersionUID = 1089308700791426201L;\n+\n+    public static final String TABLE = \"UVirSchema\";\n+\n+}"},{"sha":"ec28d6c8989798cfec343caf85a90a206d4b67bf","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/entity/user/JPAUser.java","status":"added","additions":536,"deletions":0,"changes":536,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,536 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+import javax.validation.Valid;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.SecurityQuestion;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UVirAttr;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.validation.entity.UserCheck;\n+import org.apache.syncope.persistence.jpa.entity.AbstractSubject;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n+import org.apache.syncope.server.security.Encryptor;\n+import org.apache.syncope.server.security.SecureRandomUtil;\n+\n+/**\n+ * Syncope user bean.\n+ */\n+@Entity\n+@Table(name = JPAUser.TABLE)\n+@Cacheable\n+@UserCheck\n+public class JPAUser extends AbstractSubject<UPlainAttr, UDerAttr, UVirAttr> implements User {\n+\n+    private static final long serialVersionUID = -3905046855521446823L;\n+\n+    public static final String TABLE = \"SyncopeUser\";\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(nullable = true)\n+    private String password;\n+\n+    @Transient\n+    private String clearPassword;\n+\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"user\")\n+    @Valid\n+    private List<JPAMembership> memberships;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAUPlainAttr> plainAttrs;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAUDerAttr> derAttrs;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAUVirAttr> virAttrs;\n+\n+    private String workflowId;\n+\n+    @Column(nullable = true)\n+    private String status;\n+\n+    @Lob\n+    private String token;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date tokenExpireTime;\n+\n+    @Column(nullable = true)\n+    @Enumerated(EnumType.STRING)\n+    private CipherAlgorithm cipherAlgorithm;\n+\n+    @ElementCollection\n+    @Column(name = \"passwordHistoryValue\")\n+    @CollectionTable(name = \"SyncopeUser_passwordHistory\",\n+            joinColumns =\n+            @JoinColumn(name = \"SyncopeUser_id\", referencedColumnName = \"id\"))\n+    private List<String> passwordHistory;\n+\n+    /**\n+     * Subsequent failed logins.\n+     */\n+    @Column(nullable = true)\n+    private Integer failedLogins;\n+\n+    /**\n+     * Username/Login.\n+     */\n+    @Column(unique = true)\n+    @NotNull(message = \"Blank username\")\n+    private String username;\n+\n+    /**\n+     * Last successful login date.\n+     */\n+    @Column(nullable = true)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date lastLoginDate;\n+\n+    /**\n+     * Change password date.\n+     */\n+    @Column(nullable = true)\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date changePwdDate;\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer suspended;\n+\n+    /**\n+     * Provisioning external resources.\n+     */\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"user_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"resource_name\"))\n+    @Valid\n+    private Set<JPAExternalResource> resources;\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private SecurityQuestion securityQuestion;\n+\n+    @Column(nullable = true)\n+    private String securityAnswer;\n+\n+    public JPAUser() {\n+        super();\n+\n+        memberships = new ArrayList<>();\n+        plainAttrs = new ArrayList<>();\n+        derAttrs = new ArrayList<>();\n+        virAttrs = new ArrayList<>();\n+        passwordHistory = new ArrayList<>();\n+        failedLogins = 0;\n+        suspended = getBooleanAsInteger(Boolean.FALSE);\n+        resources = new HashSet<>();\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    protected Set<? extends ExternalResource> internalGetResources() {\n+        return resources;\n+    }\n+\n+    @Override\n+    public boolean addMembership(final Membership membership) {\n+        checkType(membership, JPAMembership.class);\n+        return memberships.contains((JPAMembership) membership) || memberships.add((JPAMembership) membership);\n+    }\n+\n+    @Override\n+    public boolean removeMembership(final Membership membership) {\n+        return memberships.remove(membership);\n+    }\n+\n+    @Override\n+    public Membership getMembership(final Long syncopeRoleId) {\n+        Membership result = null;\n+        Membership membership;\n+        for (Iterator<? extends Membership> itor = getMemberships().iterator(); result == null && itor.hasNext();) {\n+            membership = itor.next();\n+            if (membership.getRole() != null && syncopeRoleId.equals(membership.getRole().getKey())) {\n+                result = membership;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<? extends Membership> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @Override\n+    public List<Role> getRoles() {\n+        List<Role> result = new ArrayList<>();\n+\n+        for (Membership membership : memberships) {\n+            if (membership.getRole() != null) {\n+                result.add(membership.getRole());\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Set<Long> getRoleIds() {\n+        List<Role> roles = getRoles();\n+\n+        Set<Long> result = new HashSet<>(roles.size());\n+        for (Role role : roles) {\n+            result.add(role.getKey());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Set<ExternalResource> getResources() {\n+        Set<ExternalResource> result = new HashSet<>();\n+        result.addAll(super.getResources());\n+        for (Role role : getRoles()) {\n+            result.addAll(role.getResources());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Set<? extends ExternalResource> getOwnResources() {\n+        return super.getResources();\n+    }\n+\n+    @Override\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    @Override\n+    public String getClearPassword() {\n+        return clearPassword;\n+    }\n+\n+    @Override\n+    public void removeClearPassword() {\n+        clearPassword = null;\n+    }\n+\n+    @Override\n+    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        // clear password\n+        this.clearPassword = null;\n+\n+        this.password = password;\n+        this.cipherAlgorithm = cipherAlgoritm;\n+    }\n+\n+    @Override\n+    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        // clear password\n+        this.clearPassword = password;\n+\n+        try {\n+            this.password = Encryptor.getInstance().encode(password, cipherAlgoritm);\n+            this.cipherAlgorithm = cipherAlgoritm;\n+        } catch (Exception e) {\n+            LOG.error(\"Could not encode password\", e);\n+            this.password = null;\n+        }\n+    }\n+\n+    @Override\n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return cipherAlgorithm;\n+    }\n+\n+    @Override\n+    public boolean canDecodePassword() {\n+        return this.cipherAlgorithm != null && this.cipherAlgorithm.isInvertible();\n+    }\n+\n+    @Override\n+    public boolean addPlainAttr(final UPlainAttr attr) {\n+        checkType(attr, JPAUPlainAttr.class);\n+        return plainAttrs.add((JPAUPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removePlainAttr(final UPlainAttr attr) {\n+        checkType(attr, JPAUPlainAttr.class);\n+        return plainAttrs.remove((JPAUPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends UPlainAttr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public boolean addDerAttr(final UDerAttr attr) {\n+        checkType(attr, JPAUDerAttr.class);\n+        return derAttrs.add((JPAUDerAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removeDerAttr(final UDerAttr attr) {\n+        checkType(attr, JPAUDerAttr.class);\n+        return derAttrs.remove((JPAUDerAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends UDerAttr> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @Override\n+    public boolean addVirAttr(final UVirAttr attr) {\n+        checkType(attr, JPAUVirAttr.class);\n+        return virAttrs.add((JPAUVirAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean removeVirAttr(final UVirAttr attr) {\n+        checkType(attr, JPAUVirAttr.class);\n+        return virAttrs.remove((JPAUVirAttr) attr);\n+    }\n+\n+    @Override\n+    public List<? extends UVirAttr> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @Override\n+    public String getWorkflowId() {\n+        return workflowId;\n+    }\n+\n+    @Override\n+    public void setWorkflowId(final String workflowId) {\n+        this.workflowId = workflowId;\n+    }\n+\n+    @Override\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    @Override\n+    public void setStatus(final String status) {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public void generateToken(final int tokenLength, final int tokenExpireTime) {\n+        this.token = SecureRandomUtil.generateRandomPassword(tokenLength);\n+\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(Calendar.MINUTE, tokenExpireTime);\n+        this.tokenExpireTime = calendar.getTime();\n+    }\n+\n+    @Override\n+    public void removeToken() {\n+        this.token = null;\n+        this.tokenExpireTime = null;\n+    }\n+\n+    @Override\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    @Override\n+    public Date getTokenExpireTime() {\n+        return tokenExpireTime == null\n+                ? null\n+                : new Date(tokenExpireTime.getTime());\n+    }\n+\n+    @Override\n+    public boolean checkToken(final String token) {\n+        return this.token == null || this.token.equals(token) && !hasTokenExpired();\n+    }\n+\n+    @Override\n+    public boolean hasTokenExpired() {\n+        return tokenExpireTime == null\n+                ? false\n+                : tokenExpireTime.before(new Date());\n+    }\n+\n+    @Override\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        this.cipherAlgorithm = cipherAlgorithm;\n+    }\n+\n+    @Override\n+    public List<String> getPasswordHistory() {\n+        return passwordHistory;\n+    }\n+\n+    @Override\n+    public Date getChangePwdDate() {\n+        return changePwdDate == null\n+                ? null\n+                : new Date(changePwdDate.getTime());\n+    }\n+\n+    @Override\n+    public void setChangePwdDate(final Date changePwdDate) {\n+        this.changePwdDate = changePwdDate == null\n+                ? null\n+                : new Date(changePwdDate.getTime());\n+    }\n+\n+    @Override\n+    public Integer getFailedLogins() {\n+        return failedLogins == null ? 0 : failedLogins;\n+    }\n+\n+    @Override\n+    public void setFailedLogins(final Integer failedLogins) {\n+        this.failedLogins = failedLogins;\n+    }\n+\n+    @Override\n+    public Date getLastLoginDate() {\n+        return lastLoginDate == null\n+                ? null\n+                : new Date(lastLoginDate.getTime());\n+    }\n+\n+    @Override\n+    public void setLastLoginDate(final Date lastLoginDate) {\n+        this.lastLoginDate = lastLoginDate == null\n+                ? null\n+                : new Date(lastLoginDate.getTime());\n+    }\n+\n+    @Override\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    @Override\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    @Override\n+    public void setSuspended(final Boolean suspended) {\n+        this.suspended = getBooleanAsInteger(suspended);\n+    }\n+\n+    @Override\n+    public Boolean isSuspended() {\n+        return suspended == null ? null : isBooleanAsInteger(suspended);\n+    }\n+\n+    @Override\n+    public boolean verifyPasswordHistory(final String password, final int size) {\n+        boolean res = false;\n+\n+        if (size > 0) {\n+            try {\n+                res = passwordHistory.subList(size >= passwordHistory.size()\n+                        ? 0\n+                        : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n+                                        ? password\n+                                        : Encryptor.getInstance().encode(password, cipherAlgorithm));\n+            } catch (Exception e) {\n+                LOG.error(\"Error evaluating password history\", e);\n+            }\n+        }\n+\n+        return res;\n+    }\n+\n+    @Override\n+    public SecurityQuestion getSecurityQuestion() {\n+        return securityQuestion;\n+    }\n+\n+    @Override\n+    public void setSecurityQuestion(final SecurityQuestion securityQuestion) {\n+        this.securityQuestion = securityQuestion;\n+    }\n+\n+    @Override\n+    public String getSecurityAnswer() {\n+        return securityAnswer;\n+    }\n+\n+    @Override\n+    public void setSecurityAnswer(final String securityAnswer) {\n+        this.securityAnswer = securityAnswer;\n+    }\n+\n+}"},{"sha":"6ebfb15574cbfb22741564c65c08294aa6a3bfa6","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/AbstractValidator.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.regex.Pattern;\n+import javax.validation.ConstraintValidator;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractValidator<A extends Annotation, T> implements ConstraintValidator<A, T> {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n+\n+    protected static final Pattern NAME_PATTERN =\n+            Pattern.compile(\"^[\\\\w \\\\-@.]+\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+    @Override\n+    public void initialize(final A annotation) {\n+        // no initialization\n+    }\n+\n+    protected final String getTemplate(final EntityViolationType type, final String message) {\n+        return type.name() + \";\" + message;\n+    }\n+}"},{"sha":"f96cd8f894d86d5f145d792867bad529d2f89ad8","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ConnInstanceCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = ConnInstanceValidator.class)\n+@Documented\n+public @interface ConnInstanceCheck {\n+\n+    String message() default \"{org.apache.syncope.persistence.validation.connninstance}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"ba60ae40ad510d3f0e489ea130902d7c2552fe09","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ConnInstanceValidator.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FConnInstanceValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.jpa.entity.JPAConnPoolConf;\n+import org.apache.syncope.server.utils.URIUtil;\n+import org.apache.syncope.provisioning.api.ConnPoolConfUtil;\n+\n+public class ConnInstanceValidator extends AbstractValidator<ConnInstanceCheck, ConnInstance> {\n+\n+    @Override\n+    public boolean isValid(final ConnInstance connInstance, final ConstraintValidatorContext context) {\n+        boolean isValid = true;\n+\n+        try {\n+            URIUtil.buildForConnId(connInstance.getLocation());\n+        } catch (Exception e) {\n+            LOG.error(\"While validating {}\", connInstance.getLocation(), e);\n+\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidConnInstanceLocation, e.getMessage())).\n+                    addPropertyNode(\"location\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        if (isValid && connInstance.getPoolConf() != null) {\n+            try {\n+                ConnPoolConfUtil.getObjectPoolConfiguration(connInstance.getPoolConf()).validate();\n+            } catch (Exception e) {\n+                LOG.error(\"Invalid pool configuration\", e);\n+\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidConnPoolConf, e.getMessage())).\n+                        addPropertyNode(\"poolConf\").addConstraintViolation();\n+\n+                isValid = false;\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"4836e87a304a961987db3094c53a41ea8f81800d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/EntityValidationListener.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.validation.entity;\n+\n+import java.util.Set;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validator;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.server.spring.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * JPA validation listener implementing bean validation.\n+ */\n+public class EntityValidationListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(EntityValidationListener.class);\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void validate(final Object object) {\n+        final Validator validator = ApplicationContextProvider.getApplicationContext().getBean(Validator.class);\n+        Set<ConstraintViolation<Object>> violations = validator.validate(object);\n+        if (!violations.isEmpty()) {\n+            LOG.warn(\"Bean validation errors found: {}\", violations);\n+            throw new InvalidEntityException(object.getClass().getSimpleName(), violations);\n+        }\n+    }\n+}"},{"sha":"f2f3843c6241a38d80be5881f86d246585e91bcb","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ExternalResourceCheck.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"db4fb94c16da87a362419bd7d5b4c3cf5430d374","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"cee0bdef8ccc040528d71e722ab1dc8405998a3a","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/NotificationCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FNotificationCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FNotificationCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FNotificationCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"fe815c8e094f507ab9792b56bbfa946d34d3047f","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/NotificationValidator.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FNotificationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FNotificationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FNotificationValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"43810138e59d6f3732d0e3dff5676f4dc56c1e8d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PlainAttrCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"88fcbfc46cad6e67da29ce25956973d67945bb51","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PlainAttrValidator.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"17cf3625c5e16bde71beb4df4147d96122471ed2","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PlainAttrValueCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"f68bb66c196bde2456a9c6a0e9f1f6f585903554","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PlainAttrValueValidator.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValueValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"fd2584220c6fb76e98d557767dfa9f01929bf367","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PlainSchemaCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"5267785b19fa474d4007179c143f7c8cc0466f6d","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PlainSchemaValidator.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainSchemaValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"e67b662810e321d0fd9cfed4d01058ebc1a8cdc7","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PolicyCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"551bc6fbd2c00e303057700576e98aa0fdd9246f","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PolicyValidator.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"f6d374ff9f39ebdc77d6994bf363e7962fc63498","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PropagationTaskCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"8e53c4729ed4cdc44cdebb3367087e58fdcca87b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/PropagationTaskValidator.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"affc52ae9493aa25cb27a56d088768c5ac8dcaa9","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ProvisioningTaskCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"01d1d5d78c346c85ba53014f9e2fe6a55203ac01","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ProvisioningTaskValidator.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"7b18e8c81eac64bb2b14c343c335fa74e0fe944b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ReportCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"7d2aa74cd0b19b5886b1ea5484e8e6692d4cd81c","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ReportValidator.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"fc9d95840a30a54aa252f5ea9034c3b8e6ad96b5","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/RoleCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"a946b30b651f2814aac12bb9aa1f25e631ed1958","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/RoleValidator.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"2b67e4b0c26cbf5e76150a2b647f685be118f732","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/SchedTaskCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"2591b944bb91ff2c3e3960272f15c07ca5622d25","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/SchedTaskValidator.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"b445c79504eddd243d096c23ea76626d0d2db39b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/SchemaNameCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"eda316d355df5eb03bbe16c53d81c4fe9d29042e","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/SchemaNameValidator.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchemaNameValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"854d4dd135d4eea8eb69fef3ba183830030a7b2b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/UserCheck.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserCheck.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"5ef691797d840c7ac67eca1a9817a6486c31179b","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/UserValidator.java","status":"added","additions":194,"deletions":0,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"4ea467f1f5d864216db62f92a6f02da578b641ee","filename":"syncope620/server/persistence-jpa/src/main/resources/META-INF/orm.xml","status":"added","additions":355,"deletions":0,"changes":355,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"d66835394f0c7f75179347f2281647da107f444a","filename":"syncope620/server/persistence-jpa/src/main/resources/META-INF/spring-persistence.xml","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-persistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-persistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-persistence.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"faf8c5bb87dd66b955c1db796efb6cdc3ce7af1d","filename":"syncope620/server/persistence-jpa/src/main/resources/audit/audit.sql","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"ff753fa2e20cd2cd12ac074e30ac7ba4ca00316d","filename":"syncope620/server/persistence-jpa/src/main/resources/audit/audit_mysql_innodb.sql","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"e1b7d81fac937123ddd5c06c4b8d221da710181c","filename":"syncope620/server/persistence-jpa/src/main/resources/audit/audit_oracle.sql","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"191428a84633455455df82af95d6706ea66a517a","filename":"syncope620/server/persistence-jpa/src/main/resources/audit/audit_sqlserver.sql","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"827e6c98be72852f54408f6c17066ea1657b19df","filename":"syncope620/server/persistence-jpa/src/main/resources/content.xml","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"effcb7b1f53d125d6a490a3440309b409c716df2","filename":"syncope620/server/persistence-jpa/src/main/resources/indexes.xml","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"a737b930fa19ee2395e4ce08a267dc4049cf8d79","filename":"syncope620/server/persistence-jpa/src/main/resources/persistence.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"df0b79550c0450d5d7cda5bba96bbe8838cea013","filename":"syncope620/server/persistence-jpa/src/main/resources/persistenceContext.xml","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"3337dd32373d9431a43f9522527f7b1ba89d004c","filename":"syncope620/server/persistence-jpa/src/main/resources/persistenceContextEMFactory.xml","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"e798223d2bef8300a76f5147a9f4a8188f2a6604","filename":"syncope620/server/persistence-jpa/src/main/resources/quartz/tables_h2.sql","status":"added","additions":266,"deletions":0,"changes":266,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_h2.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"ebb8e59702733989df95b2792d20d08f8b775dd6","filename":"syncope620/server/persistence-jpa/src/main/resources/quartz/tables_mysql.sql","status":"added","additions":206,"deletions":0,"changes":206,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"c54493ed85c2cc9b1dbfb2abd2a206c03b353389","filename":"syncope620/server/persistence-jpa/src/main/resources/quartz/tables_mysql_innodb.sql","status":"added","additions":221,"deletions":0,"changes":221,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_mysql_innodb.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"4384ac59498df2ee32cd1dc003179f91f412128f","filename":"syncope620/server/persistence-jpa/src/main/resources/quartz/tables_oracle.sql","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_oracle.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"9b7800f6e61c39c2b5fbf11ddbcbdbcd13f3031d","filename":"syncope620/server/persistence-jpa/src/main/resources/quartz/tables_postgres.sql","status":"added","additions":204,"deletions":0,"changes":204,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_postgres.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"288b990f9bb6a7d4c5d8d42ee147a9d6c2d76a57","filename":"syncope620/server/persistence-jpa/src/main/resources/quartz/tables_sqlServer.sql","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fquartz%2Ftables_sqlServer.sql?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"2e029c88a1eb73f142ac33e7dfb11d99fd453a06","filename":"syncope620/server/persistence-jpa/src/main/resources/views.xml","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"b0fda7c79451655f053b59b968ccebbb327064fc","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/AbstractTest.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FAbstractTest.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"94c639c70c1e4d5e59d54aa737386e6e5cc92f9f","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/DummyConnectorRegistry.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FDummyConnectorRegistry.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"ec2934585cfae5064a15c59bd6cba81c68ad4840","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/TestInitializer.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2FTestInitializer.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"7fa964293a8153f880903bd778ca9c7b181d7922","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/AttrTest.java","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"b4217fc0220e86967edba11309a67f098ef709d5","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/AttributableSearchTest.java","status":"added","additions":484,"deletions":0,"changes":484,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"08d991990a1d3a51e206a116a79cf737f9a9259f","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/ConfTest.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConfTest.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"95ce1a37d4001359787f6de5bfbfe115ef21a185","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/ConnInstanceTest.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FConnInstanceTest.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"},{"sha":"bd76f3cfb108ade293124aa9452149b961013e17","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/DerAttrTest.java","status":"added","additions":280,"deletions":0,"changes":280,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/556d518625f25baee800203e6dd274aeb8e9f91b/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FDerAttrTest.java?ref=556d518625f25baee800203e6dd274aeb8e9f91b"}]}