{"sha":"52062c462fffa5a440bc75952d9ec832f44914f0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyMDYyYzQ2MmZmZmE1YTQ0MGJjNzU5NTJkOWVjODMyZjQ0OTE0ZjA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-09T13:49:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-10-09T13:49:44Z"},"message":"[SYNCOPE-1465] White noise","tree":{"sha":"0df48baf621c6240fba071800886a3d5838bbf9e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0df48baf621c6240fba071800886a3d5838bbf9e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/52062c462fffa5a440bc75952d9ec832f44914f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52062c462fffa5a440bc75952d9ec832f44914f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/52062c462fffa5a440bc75952d9ec832f44914f0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/52062c462fffa5a440bc75952d9ec832f44914f0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0c2fd972523fe2d34f5ce1e98db23c2f63989f5"}],"stats":{"total":90,"additions":26,"deletions":64},"files":[{"sha":"f56334721a48a4927828bd467c229d3127fb9c6e","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -161,11 +161,11 @@ public Pair<Integer, List<GroupTO>> search(\n \n         int count = searchDAO.count(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-            Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()), AnyTypeKind.GROUP);\n+                Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()), AnyTypeKind.GROUP);\n \n         List<Group> matching = searchDAO.search(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-            Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()),\n+                Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()),\n                 page, size, orderBy, AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n                 map(group -> binder.getGroupTO(group, details)).collect(Collectors.toList());\n@@ -410,12 +410,11 @@ public ExecTO provisionMembers(final String key, final ProvisionAction action) {\n         task = taskDAO.save(task);\n \n         try {\n-            String executor = AuthContextUtils.getUsername();\n             Map<String, Object> jobDataMap = jobManager.register(\n                     task,\n                     null,\n                     confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n-                    executor);\n+                    AuthContextUtils.getUsername());\n \n             jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, false);\n             jobDataMap.put(GroupMemberProvisionTaskJobDelegate.GROUP_KEY_JOBDETAIL_KEY, key);"},{"sha":"580ac15e3afa35fcaa23fafbc45ab756189ebd97","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -117,11 +117,11 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n         }\n \n         Realm realm = realmDAO.save(binder.create(parent, realmTO));\n-        String executor = AuthContextUtils.getUsername();\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false, executor);\n+        PropagationReporter propagationReporter =\n+                taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));\n@@ -138,12 +138,12 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n \n             throw new NotFoundException(realmTO.getFullPath());\n         }\n-        String executor = AuthContextUtils.getUsername();\n         PropagationByResource<String> propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false, executor);\n+        PropagationReporter propagationReporter =\n+                taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));\n@@ -180,11 +180,11 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n             containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n             throw containedAnys;\n         }\n-        String executor = AuthContextUtils.getUsername();\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false, executor);\n+        PropagationReporter propagationReporter =\n+                taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n \n         ProvisioningResult<RealmTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getRealmTO(realm, true));"},{"sha":"bf5b987da88764221718558cc76c3ff907f1b780","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -75,7 +75,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.Assert;\n \n @Component\n public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n@@ -100,14 +99,12 @@ public ReportTO create(final ReportTO reportTO) {\n         Report report = entityFactory.newEntity(Report.class);\n         binder.getReport(report, reportTO);\n         report = reportDAO.save(report);\n-        String executor = AuthContextUtils.getUsername();\n-        Assert.notNull(executor, \"executor cannot be null when creating report\");\n         try {\n             jobManager.register(\n                     report,\n                     null,\n                     confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n-                    executor);\n+                    AuthContextUtils.getUsername());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -128,13 +125,12 @@ public ReportTO update(final ReportTO reportTO) {\n \n         binder.getReport(report, reportTO);\n         report = reportDAO.save(report);\n-        String executor = AuthContextUtils.getUsername();\n         try {\n             jobManager.register(\n                     report,\n                     null,\n                     confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n-                    executor);\n+                    AuthContextUtils.getUsername());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -175,14 +171,13 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n             sce.getElements().add(\"Report \" + key + \" is not active\");\n             throw sce;\n         }\n-        String executor = AuthContextUtils.getUsername();\n-        Assert.notNull(executor, \"executor cannot be null when executing report\");\n+\n         try {\n             jobManager.register(\n                     report,\n                     startAt,\n                     confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n-                    executor);\n+                    AuthContextUtils.getUsername());\n \n             scheduler.getScheduler().triggerJob(JobNamer.getJobKey(report));\n         } catch (Exception e) {\n@@ -200,7 +195,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n         result.setStart(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n-        result.setExecutor(executor);\n+        result.setExecutor(AuthContextUtils.getUsername());\n         return result;\n     }\n \n@@ -222,7 +217,7 @@ public ReportExec getReportExec(final String executionKey) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n     public static void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n-                                             final ReportExecExportFormat format) {\n+            final ReportExecExportFormat format) {\n \n         // streaming SAX handler from a compressed byte array stream\n         try (ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());\n@@ -379,7 +374,7 @@ protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n \n         Report report = reportDAO.find(key);\n         return Optional.ofNullable(report)\n-            .map(report1 -> Triple.of(JobType.REPORT, key, binder.buildRefDesc(report1))).orElse(null);\n+                .map(report1 -> Triple.of(JobType.REPORT, key, binder.buildRefDesc(report1))).orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_LIST + \"')\")"},{"sha":"7dec93ddc7f9f9d19254878c11c60d81e5b12284","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -110,7 +110,6 @@ public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T ta\n             sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n             throw sce;\n         }\n-        String executor = AuthContextUtils.getUsername();\n         SchedTask task = binder.createSchedTask(taskTO, taskUtils);\n         task = taskDAO.save(task);\n \n@@ -119,7 +118,7 @@ public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T ta\n                     task,\n                     task.getStartAt(),\n                     confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n-                    executor);\n+                    AuthContextUtils.getUsername());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -147,13 +146,12 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n \n         binder.updateSchedTask(task, taskTO, taskUtils);\n         task = taskDAO.save(task);\n-        String executor = AuthContextUtils.getUsername();\n         try {\n             jobManager.register(\n                     task,\n                     task.getStartAt(),\n                     confParamOps.get(AuthContextUtils.getDomain(), \"tasks.interruptMaxRetries\", 1L, Long.class),\n-                    executor);\n+                    AuthContextUtils.getUsername());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n "},{"sha":"20ec3262851b69de8be72c4f618b1cd464cc2ead","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -253,15 +253,14 @@ protected Optional<ProvisioningReport> deprovision(\n                 propByLinkedAccount.add(\n                         ResourceOperation.DELETE,\n                         Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue()));\n-                String executor = AuthContextUtils.getUsername();\n                 taskExecutor.execute(propagationManager.getDeleteTasks(\n                         AnyTypeKind.USER,\n                         account.getOwner().getKey(),\n                         null,\n                         propByLinkedAccount,\n                         null),\n                         false,\n-                        executor);\n+                        AuthContextUtils.getUsername());\n \n                 for (PullActions action : profile.getActions()) {\n                     action.after(profile, delta, before, report);"},{"sha":"a0b4a3a0787143050b3e3a28dee9ad394605a744","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -184,7 +184,6 @@ public UserTO submitForm(final UserRequestForm form) {\n         }\n \n         UserWorkflowResult<UserUR> wfResult = userRequestHandler.submitForm(form);\n-        String executor = AuthContextUtils.getUsername();\n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n         if (wfResult.getPropByRes() != null && !wfResult.getPropByRes().isEmpty()) {\n@@ -195,7 +194,7 @@ public UserTO submitForm(final UserRequestForm form) {\n                             wfResult.getPropByLinkedAccount(),\n                             wfResult.getPerformedTasks()));\n \n-            taskExecutor.execute(taskInfos, false, executor);\n+            taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n         }\n \n         UserTO userTO;"},{"sha":"343d21debdca144e78e7ac9bd5a9394cff98523e","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -80,8 +80,7 @@ public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput)\n                         updated.getPropByRes(),\n                         updated.getPropByLinkedAccount(),\n                         updated.getPerformedTasks()));\n-        String executor = AuthContextUtils.getUsername();\n-        taskExecutor.execute(taskInfos, false, executor);\n+        taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n \n         return binder.getUserTO(updated.getResult());\n     }"},{"sha":"f0cc43da6ab71fd286ee77356a634c44c4cd062f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":3,"deletions":16,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -54,25 +54,12 @@\n import org.apache.syncope.common.rest.api.beans.ExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n \n public class ReportITCase extends AbstractITCase {\n \n-    @BeforeAll\n-    public static void setup() {\n-        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n-            new User(\"admin\", \"FAKE_PASSWORD\", List.of()), \"FAKE_PASSWORD\", List.of());\n-        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n-        SecurityContextHolder.getContext().setAuthentication(auth);\n-    }\n-    \n     protected static String execReport(final String reportKey) {\n         ReportTO reportTO = reportService.read(reportKey);\n         assertNotNull(reportTO);\n@@ -83,7 +70,7 @@ protected static String execReport(final String reportKey) {\n         ExecTO exec = reportService.execute(query);\n         assertNotNull(exec);\n         assertNotNull(exec.getExecutor());\n-        \n+\n         int i = 0;\n         int maxit = 50;\n \n@@ -98,7 +85,7 @@ protected static String execReport(final String reportKey) {\n \n             assertNotNull(reportTO);\n             assertNotNull(reportTO.getExecutions());\n-            \n+\n             i++;\n         } while (preExecSize == reportTO.getExecutions().size() && i < maxit);\n         if (i == maxit) {\n@@ -370,7 +357,7 @@ public void issueSYNCOPE43() {\n         reportTO.setTemplate(\"sample\");\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n-        \n+\n         ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n         assertNotNull(execution);\n "},{"sha":"773c2d60518daf922f967c7de9762b43a105cddb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportTemplateITCase.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/52062c462fffa5a440bc75952d9ec832f44914f0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/52062c462fffa5a440bc75952d9ec832f44914f0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java?ref=52062c462fffa5a440bc75952d9ec832f44914f0","patch":"@@ -36,23 +36,11 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n-import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.core.userdetails.User;\n \n public class ReportTemplateITCase extends AbstractITCase {\n-    @BeforeAll\n-    public static void setup() {\n-        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n-            new User(\"admin\", \"FAKE_PASSWORD\", List.of()), \"FAKE_PASSWORD\", List.of());\n-        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n-        SecurityContextHolder.getContext().setAuthentication(auth);\n-    }\n-    \n+\n     @Test\n     public void read() {\n         ReportTemplateTO reportTemplateTO = reportTemplateService.read(\"sample\");\n@@ -64,9 +52,7 @@ public void list() {\n         List<ReportTemplateTO> reportTemplateTOs = reportTemplateService.list();\n         assertNotNull(reportTemplateTOs);\n         assertFalse(reportTemplateTOs.isEmpty());\n-        for (ReportTemplateTO instance : reportTemplateTOs) {\n-            assertNotNull(instance);\n-        }\n+        reportTemplateTOs.forEach(instance -> assertNotNull(instance));\n     }\n \n     @Test"}]}