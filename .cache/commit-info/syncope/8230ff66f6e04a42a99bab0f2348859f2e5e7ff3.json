{"sha":"8230ff66f6e04a42a99bab0f2348859f2e5e7ff3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgyMzBmZjY2ZjZlMDRhNDJhOTliYWIwZjIzNDg4NTlmMmU1ZTdmZjM=","commit":{"author":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T17:10:13Z"},"committer":{"name":"René Mulder","email":"rene@apache.org","date":"2012-05-01T17:10:13Z"},"message":"sonar: fix unchecked casts\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1332753 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37965225b464f7dda944ecfc617f55fd5415b084","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/37965225b464f7dda944ecfc617f55fd5415b084"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8230ff66f6e04a42a99bab0f2348859f2e5e7ff3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8230ff66f6e04a42a99bab0f2348859f2e5e7ff3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8230ff66f6e04a42a99bab0f2348859f2e5e7ff3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8230ff66f6e04a42a99bab0f2348859f2e5e7ff3/comments","author":null,"committer":null,"parents":[{"sha":"cdd152c2f0fdb119e58a233cedba3511c4530691","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cdd152c2f0fdb119e58a233cedba3511c4530691","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cdd152c2f0fdb119e58a233cedba3511c4530691"}],"stats":{"total":25,"additions":13,"deletions":12},"files":[{"sha":"965e901b25085db718b15c0ce49dde1145f13d1a","filename":"core/src/main/java/org/apache/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8230ff66f6e04a42a99bab0f2348859f2e5e7ff3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8230ff66f6e04a42a99bab0f2348859f2e5e7ff3/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=8230ff66f6e04a42a99bab0f2348859f2e5e7ff3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.policy;\n \n+import java.util.ArrayList;\n import java.util.List;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -53,7 +54,7 @@ public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final Abst\n                     final PasswordPolicySpec pspec = policy.getSpecification();\n                     final PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n \n-                    BeanUtils.copyProperties(pspec, passwordPolicy, new String[] { \"schemasNotPermitted\" });\n+                    BeanUtils.copyProperties(pspec, passwordPolicy, new String[]{\"schemasNotPermitted\"});\n \n                     for (String schema : pspec.getSchemasNotPermitted()) {\n                         attribute = attributable.getAttribute(schema);\n@@ -66,36 +67,36 @@ public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final Abst\n                     }\n \n                     // Password history verification and update\n-                    final String password = ((SyncopeUser) attributable).getPassword();\n \n-                    final List<String> passwordHistory = ((SyncopeUser) attributable).getPasswordHistory();\n-\n-                    if (((SyncopeUser) attributable).verifyPasswordHistory(((SyncopeUser) attributable)\n-                            .getClearPassword(), pspec.getHistoryLength())) {\n+                    if (!(attributable instanceof SyncopeUser)) {\n+                        LOG.error(\"Cannot check previous passwords. attributable is not a user object: \" + attributable.getClass().toString());\n+                        result = (T) passwordPolicy;\n+                        break;\n+                    }\n+                    SyncopeUser user = (SyncopeUser) attributable;\n+                    final String password = user.getPassword();\n+                    final List<String> passwordHistory = user.getPasswordHistory();\n \n-                        passwordPolicy.getWordsNotPermitted().add(((SyncopeUser) attributable).getClearPassword());\n+                    if (user.verifyPasswordHistory(user.getClearPassword(), pspec.getHistoryLength())) {\n+                        passwordPolicy.getWordsNotPermitted().add(user.getClearPassword());\n                     } else {\n-\n                         if (pspec.getHistoryLength() > 0 && password != null) {\n                             passwordHistory.add(password);\n                         }\n-\n                         if (pspec.getHistoryLength() < passwordHistory.size()) {\n                             for (int i = 0; i < passwordHistory.size() - pspec.getHistoryLength(); i++) {\n-\n                                 passwordHistory.remove(i);\n                             }\n                         }\n                     }\n-\n                     result = (T) passwordPolicy;\n                     break;\n                 case ACCOUNT:\n                 case GLOBAL_ACCOUNT:\n                     final AccountPolicySpec spec = policy.getSpecification();\n                     final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n \n-                    BeanUtils.copyProperties(spec, accountPolicy, new String[] { \"schemasNotPermitted\" });\n+                    BeanUtils.copyProperties(spec, accountPolicy, new String[]{\"schemasNotPermitted\"});\n \n                     for (String schema : spec.getSchemasNotPermitted()) {\n                         attribute = attributable.getAttribute(schema);"}]}