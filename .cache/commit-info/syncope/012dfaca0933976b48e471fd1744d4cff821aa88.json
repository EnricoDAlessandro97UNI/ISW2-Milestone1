{"sha":"012dfaca0933976b48e471fd1744d4cff821aa88","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAxMmRmYWNhMDkzMzk3NmI0OGU0NzFmZDE3NDRkNGNmZjgyMWFhODg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-04-04T06:28:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-04T07:11:10Z"},"message":"Sandboxing JEXL (#171)","tree":{"sha":"a28525525bba2653bcd568f29c942b224521dd6e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a28525525bba2653bcd568f29c942b224521dd6e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/012dfaca0933976b48e471fd1744d4cff821aa88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/012dfaca0933976b48e471fd1744d4cff821aa88","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/012dfaca0933976b48e471fd1744d4cff821aa88","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/012dfaca0933976b48e471fd1744d4cff821aa88/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"da8bd881b80a9b7523ae58e078d69f56a853832c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/da8bd881b80a9b7523ae58e078d69f56a853832c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/da8bd881b80a9b7523ae58e078d69f56a853832c"}],"stats":{"total":301,"additions":189,"deletions":112},"files":[{"sha":"8a1b283b565817a71ff0e2d47f771c40b3797e48","filename":"core/provisioning-api/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fpom.xml?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -80,6 +80,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <version>${slf4j.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.mockito</groupId>\n       <artifactId>mockito-core</artifactId>"},{"sha":"e218836a28b716a519a2be316b31e15472aff0bc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/ClassFreeUberspect.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/da8bd881b80a9b7523ae58e078d69f56a853832c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FClassFreeUberspect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/da8bd881b80a9b7523ae58e078d69f56a853832c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FClassFreeUberspect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FClassFreeUberspect.java?ref=da8bd881b80a9b7523ae58e078d69f56a853832c","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.jexl;\n-\n-import org.apache.commons.jexl3.internal.introspection.Uberspect;\n-import org.apache.commons.jexl3.introspection.JexlMethod;\n-import org.apache.commons.jexl3.introspection.JexlPropertyGet;\n-\n-class ClassFreeUberspect extends Uberspect {\n-\n-    ClassFreeUberspect() {\n-        super(null, null);\n-    }\n-\n-    @Override\n-    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {\n-        return \"class\".equals(identifier) ? null : super.getPropertyGet(obj, identifier);\n-    }\n-\n-    @Override\n-    public JexlMethod getMethod(final Object obj, final String method, final Object... args) {\n-        return \"getClass\".equals(method) ? null : super.getMethod(obj, method, args);\n-    }\n-\n-}"},{"sha":"5a22d8c1732e6f1d5b3126c708e78490cde3e571","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/EmptyClassLoader.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FEmptyClassLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FEmptyClassLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FEmptyClassLoader.java?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -32,5 +32,4 @@ public Class<?> loadClass(final String name) throws ClassNotFoundException {\n     protected Class<?> loadClass(final String name, final boolean resolve) throws ClassNotFoundException {\n         throw new ClassNotFoundException(\"This classloader won't attemp to load \" + name);\n     }\n-\n }"},{"sha":"891accaa5a1339629848c98f3f630452fe67cc8f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/JexlUtils.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -65,16 +65,15 @@ public final class JexlUtils {\n     private static final String[] IGNORE_FIELDS = { \"password\", \"clearPassword\", \"serialVersionUID\", \"class\" };\n \n     private static final Map<Class<?>, Set<Pair<PropertyDescriptor, Field>>> FIELD_CACHE =\n-            Collections.<Class<?>, Set<Pair<PropertyDescriptor, Field>>>synchronizedMap(\n-                    new HashMap<Class<?>, Set<Pair<PropertyDescriptor, Field>>>());\n+            Collections.synchronizedMap(new HashMap<Class<?>, Set<Pair<PropertyDescriptor, Field>>>());\n \n     private static JexlEngine JEXL_ENGINE;\n \n     private static JexlEngine getEngine() {\n         synchronized (LOG) {\n             if (JEXL_ENGINE == null) {\n                 JEXL_ENGINE = new JexlBuilder().\n-                        uberspect(new ClassFreeUberspect()).\n+                        uberspect(new SandboxUberspect()).\n                         loader(new EmptyClassLoader()).\n                         namespaces(Map.of(\"syncope\", new SyncopeJexlFunctions())).\n                         cache(512)."},{"sha":"08f9168fe532be687e64ffcfc75fd3082a7bbbea","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/SandboxUberspect.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSandboxUberspect.java?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.jexl;\n+\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.commons.jexl3.JexlEngine;\n+import org.apache.commons.jexl3.internal.introspection.Uberspect;\n+import org.apache.commons.jexl3.introspection.JexlMethod;\n+import org.apache.commons.jexl3.introspection.JexlPropertySet;\n+import org.apache.commons.jexl3.introspection.JexlUberspect;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Membership;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+\n+class SandboxUberspect extends Uberspect {\n+\n+    private static final Set<String> COLLECTION_METHODS = Collections.unmodifiableSet(new HashSet<>(\n+            Arrays.asList(\"contains\", \"containsAll\", \"isEmpty\", \"size\", \"iterator\", \"toString\")));\n+\n+    private static final Set<String> LIST_METHODS = Collections.unmodifiableSet(new HashSet<>(\n+            Arrays.asList(\"get\", \"indexOf\", \"lastIndexOf\", \"toString\")));\n+\n+    private static final Set<String> MAP_METHODS = Collections.unmodifiableSet(new HashSet<>(\n+            Arrays.asList(\"get\", \"getOrDefault\", \"containsKey\", \"containsValue\", \"toString\")));\n+\n+    SandboxUberspect() {\n+        super(LogFactory.getLog(JexlEngine.class), JexlUberspect.JEXL_STRATEGY);\n+    }\n+\n+    @Override\n+    public JexlMethod getConstructor(final Object ctorHandle, final Object... args) {\n+        return null;\n+    }\n+\n+    @Override\n+    public JexlMethod getMethod(final Object obj, final String method, final Object... args) {\n+        if (obj instanceof AnyTO || obj instanceof Any\n+                || obj instanceof PlainAttr || obj instanceof Attr\n+                || obj instanceof MembershipTO || obj instanceof Membership\n+                || obj instanceof Realm || obj instanceof RealmTO) {\n+\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof SyncopeJexlFunctions) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof Optional) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj.getClass().isArray()) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof String) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof Date || obj instanceof Instant) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof Map && MAP_METHODS.contains(method)) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof List && (LIST_METHODS.contains(method) || COLLECTION_METHODS.contains(method))) {\n+            return super.getMethod(obj, method, args);\n+        } else if (obj instanceof Collection && COLLECTION_METHODS.contains(method)) {\n+            return super.getMethod(obj, method, args);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {\n+        return null;\n+    }\n+\n+    @Override\n+    public JexlPropertySet getPropertySet(\n+            final List<PropertyResolver> resolvers, final Object obj, final Object identifier, final Object arg) {\n+\n+        return null;\n+    }\n+}"},{"sha":"d83b2a65874f1ded70980d4c41f886c16af12915","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/jexl/MailTemplateTest.java","status":"renamed","additions":39,"deletions":26,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FMailTemplateTest.java?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -16,9 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.jexl;\n-\n-import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+package org.apache.syncope.core.provisioning.api.jexl;\n \n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -36,17 +34,36 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n-import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(\"Master\")\n public class MailTemplateTest extends AbstractTest {\n \n-    @Autowired\n-    private MailTemplateDAO mailTemplateDAO;\n+    private static final String CONFIRM_PASSWORD_RESET_TEMPLATE =\n+            \"<html><body>\"\n+            + \"<p>Hi,<br/> we are happy to inform you that the password request was successfully executed for \"\n+            + \"your account.</p>  <p>Best regards.</p> </body> </html>\";\n+\n+    private static final String REQUEST_PASSWORD_RESET_TEMPLATE = \"Hi, a password reset was request for \"\n+            + \"${user.getUsername()}.  In order to complete this request, you need to visit this link: \"\n+            + \"http://localhost:9080/syncope-enduser/app/#!/confirmpasswordreset?token=\"\n+            + \"${input.get(0).replaceAll(' ', '%20')}\"\n+            + \"If you did not request this reset, just ignore the present e-mail.  Best regards.\";\n+\n+    private static final String OPTIN_TEMPLATE =\n+            \"<html> <body> <h3>Hi ${user.getPlainAttr(\\\"firstname\\\").get().values[0]} \"\n+            + \"${user.getPlainAttr(\\\"surname\\\").get().values[0]}, welcome to Syncope!</h3>\"\n+            + \"<p> Your username is ${user.username}.<br/>\"\n+            + \"Your email address is ${user.getPlainAttr(\\\"email\\\").get().values[0]}.\"\n+            + \"Your email address inside a <a href=\\\"http://localhost/?email=\"\n+            + \"${user.getPlainAttr(\\\"email\\\").get().values[0].replace('@', '%40')}\\\">link</a>.</p>\"\n+            + \"<p>This message was sent to the following recipients: <ul>\\n $$ for (recipient: recipients) {\\n\"\n+            + \"   <li>${recipient.getPlainAttr(\\\"email\\\").get().values[0]}</li>\\n $$ }\\n </ul>\\n\"\n+            + \"  because one of the following events occurred: <ul>\\n $$ for (event: events) {\\n\"\n+            + \"   <li>${event}</li>\\n $$ }\\n </ul>\\n </p> \\n $$ if (!empty(user.memberships)) {\\n\"\n+            + \" You have been provided with the following groups:\\n <ul>\\n\"\n+            + \" $$ for(membership : user.memberships) {\\n   <li>${membership.groupName}</li>\\n $$ }\\n\"\n+            + \" </ul>\\n $$ }\\n </body> </html>\";\n \n     private static String evaluate(final String template, final Map<String, Object> jexlVars) {\n         StringWriter writer = new StringWriter();\n@@ -58,10 +75,7 @@ private static String evaluate(final String template, final Map<String, Object>\n \n     @Test\n     public void confirmPasswordReset() throws IOException {\n-        String htmlBody = evaluate(\n-                mailTemplateDAO.find(\"confirmPasswordReset\").getHTMLTemplate(),\n-                new HashMap<>());\n-\n+        String htmlBody = evaluate(CONFIRM_PASSWORD_RESET_TEMPLATE, new HashMap<>());\n         assertNotNull(htmlBody);\n     }\n \n@@ -79,17 +93,15 @@ public void requestPasswordReset() throws IOException {\n         input.add(token);\n         ctx.put(\"input\", input);\n \n-        String htmlBody = evaluate(\n-                mailTemplateDAO.find(\"requestPasswordReset\").getHTMLTemplate(),\n-                ctx);\n+        String textBody = evaluate(REQUEST_PASSWORD_RESET_TEMPLATE, ctx);\n \n-        assertNotNull(htmlBody);\n-        assertTrue(htmlBody.contains(\"a password reset was request for \" + username + '.'));\n-        assertFalse(htmlBody.contains(\n-                \"http://localhost:9080/syncope-enduser/confirmpasswordreset?token=\"\n+        assertNotNull(textBody);\n+        assertTrue(textBody.contains(\"a password reset was request for \" + username + \".\"));\n+        assertFalse(textBody.contains(\n+                \"http://localhost:9080/syncope-enduser/app/#!/confirmpasswordreset?token=\"\n                 + token));\n-        assertTrue(htmlBody.contains(\n-                \"http://localhost:9080/syncope-enduser/confirmpasswordreset?token=\"\n+        assertTrue(textBody.contains(\n+                \"http://localhost:9080/syncope-enduser/app/#!/confirmpasswordreset?token=\"\n                 + token.replaceAll(\" \", \"%20\")));\n     }\n \n@@ -115,15 +127,16 @@ public void optin() throws IOException {\n         recipient.getPlainAttr(\"email\").get().getValues().set(0, \"another@syncope.apache.org\");\n         ctx.put(\"recipients\", List.of(recipient));\n \n-        String htmlBody = evaluate(\n-                mailTemplateDAO.find(\"optin\").getHTMLTemplate(),\n-                ctx);\n+        ctx.put(\"events\", List.of(\"event1\"));\n+\n+        String htmlBody = evaluate(OPTIN_TEMPLATE, ctx);\n \n         assertNotNull(htmlBody);\n \n         assertTrue(htmlBody.contains(\"Hi John Doe,\"));\n         assertTrue(htmlBody.contains(\"Your email address is john.doe@syncope.apache.org.\"));\n         assertTrue(htmlBody.contains(\"<li>another@syncope.apache.org</li>\"));\n         assertTrue(htmlBody.contains(\"<li>a group</li>\"));\n+        assertTrue(htmlBody.contains(\"<li>event1</li>\"));\n     }\n }","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/jexl/MailTemplateTest.java"},{"sha":"0199413bbcb9cc6b5ff514823b0ec6fbe1d97e3a","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/jexl/MappingTest.java","status":"renamed","additions":15,"deletions":40,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FMappingTest.java?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -16,71 +16,46 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.jexl;\n-\n-import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+package org.apache.syncope.core.provisioning.api.jexl;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n \n-@Transactional(\"Master\")\n public class MappingTest extends AbstractTest {\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n     @Test\n     public void anyConnObjectLink() {\n-        ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n-        assertNotNull(ldap);\n-\n-        Provision provision = ldap.getProvision(anyTypeDAO.findUser()).get();\n-        assertNotNull(provision);\n-        assertNotNull(provision.getMapping());\n-        assertNotNull(provision.getMapping().getConnObjectLink());\n+        Realm realm = mock(Realm.class);\n+        when(realm.getFullPath()).thenReturn(\"/even\");\n \n-        User user = userDAO.findByUsername(\"rossini\");\n+        User user = mock(User.class);\n+        when(user.getUsername()).thenReturn(\"rossini\");\n+        when(user.getRealm()).thenReturn(realm);\n         assertNotNull(user);\n \n         JexlContext jexlContext = new MapContext();\n         JexlUtils.addFieldsToContext(user, jexlContext);\n-        JexlUtils.addPlainAttrsToContext(user.getPlainAttrs(), jexlContext);\n \n-        assertEquals(\n-                \"uid=rossini,ou=people,o=isp\",\n-                JexlUtils.evaluate(provision.getMapping().getConnObjectLink(), jexlContext));\n+        String connObjectLink = \"'uid=' + username + ',ou=people,o=isp'\";\n+        assertEquals(\"uid=rossini,ou=people,o=isp\", JexlUtils.evaluate(connObjectLink, jexlContext));\n \n-        String connObjectLink = \"'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'\";\n+        connObjectLink = \"'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'\";\n         assertEquals(\"uid=rossini,o=even,ou=people,o=isp\", JexlUtils.evaluate(connObjectLink, jexlContext));\n     }\n \n     @Test\n     public void realmConnObjectLink() {\n-        Realm realm = realmDAO.findByFullPath(\"/even/two\");\n+        Realm realm = mock(Realm.class);\n+        when(realm.getFullPath()).thenReturn(\"/even/two\");\n         assertNotNull(realm);\n \n         JexlContext jexlContext = new MapContext();\n@@ -89,7 +64,7 @@ public void realmConnObjectLink() {\n         String connObjectLink = \"syncope:fullPath2Dn(fullPath, 'ou') + ',o=isp'\";\n         assertEquals(\"ou=two,ou=even,o=isp\", JexlUtils.evaluate(connObjectLink, jexlContext));\n \n-        realm = realmDAO.findByFullPath(\"/even\");\n+        when(realm.getFullPath()).thenReturn(\"/even\");\n         assertNotNull(realm);\n \n         jexlContext = new MapContext();","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/jexl/MappingTest.java"},{"sha":"973e0096ff174e0228c297292dc4bc0ec81c7dd3","filename":"core/provisioning-api/src/test/resources/simplelogger.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+# See http://www.slf4j.org/api/org/slf4j/impl/SimpleLogger.html\n+# Possible values: \"trace\", \"debug\", \"info\", \"warn\", or \"error\"\n+org.slf4j.simpleLogger.defaultLogLevel=debug\n+"},{"sha":"b294c82b81bf6e0ce6bf9d4db6fdc5844ba3e16b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/012dfaca0933976b48e471fd1744d4cff821aa88/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=012dfaca0933976b48e471fd1744d4cff821aa88","patch":"@@ -364,7 +364,7 @@ public List<NotificationTask> createTasks(\n                     } else if (any instanceof Group) {\n                         model.put(\"group\", groupDataBinder.getGroupTO((Group) any, true));\n                     } else if (any instanceof AnyObject) {\n-                        model.put(\"group\", anyObjectDataBinder.getAnyObjectTO((AnyObject) any, true));\n+                        model.put(\"anyObject\", anyObjectDataBinder.getAnyObjectTO((AnyObject) any, true));\n                     }\n \n                     NotificationTask notificationTask = getNotificationTask(notification, any, model);"}]}