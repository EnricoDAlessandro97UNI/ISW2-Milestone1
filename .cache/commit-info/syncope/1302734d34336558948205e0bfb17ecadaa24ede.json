{"sha":"1302734d34336558948205e0bfb17ecadaa24ede","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEzMDI3MzRkMzQzMzY1NTg5NDgyMDVlMGJmYjE3ZWNhZGFhMjRlZGU=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-10-08T13:55:42Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-10-08T13:59:58Z"},"message":"[SYNCOPE-1379] provide the possibility to configure check connection timeouts (console side) + properties to customize resource connection checks thread pool","tree":{"sha":"436287c2be099e57bb84adad268f2500c951415e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/436287c2be099e57bb84adad268f2500c951415e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1302734d34336558948205e0bfb17ecadaa24ede","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1302734d34336558948205e0bfb17ecadaa24ede","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1302734d34336558948205e0bfb17ecadaa24ede","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1302734d34336558948205e0bfb17ecadaa24ede/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"f0398c7d70a1e107e38d4dcb77bcf30b5d1265ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0398c7d70a1e107e38d4dcb77bcf30b5d1265ef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f0398c7d70a1e107e38d4dcb77bcf30b5d1265ef"}],"stats":{"total":253,"additions":211,"deletions":42},"files":[{"sha":"2e15b19eaba0d57fbabc1da5c4fa1b4102dfadb7","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=1302734d34336558948205e0bfb17ecadaa24ede","patch":"@@ -104,6 +104,12 @@ public static SyncopeConsoleApplication get() {\n \n     private Integer maxWaitTime;\n \n+    private Integer corePoolSize;\n+\n+    private Integer maxPoolSize;\n+\n+    private Integer queueCapacity;\n+\n     private List<String> domains;\n \n     private Map<String, Class<? extends BasePage>> pageClasses;\n@@ -159,6 +165,11 @@ protected void init() {\n \n         maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));\n \n+        // Resource connections check thread pool size\n+        corePoolSize = Integer.valueOf(props.getProperty(\"topology.corePoolSize\", \"5\"));\n+        maxPoolSize = Integer.valueOf(props.getProperty(\"topology.maxPoolSize\", \"10\"));\n+        queueCapacity = Integer.valueOf(props.getProperty(\"topology.queueCapacity\", \"50\"));\n+\n         String csrf = props.getProperty(\"csrf\");\n \n         // process page properties\n@@ -276,6 +287,18 @@ public Integer getMaxWaitTimeInSeconds() {\n         return maxWaitTime;\n     }\n \n+    public Integer getCorePoolSize() {\n+        return corePoolSize;\n+    }\n+\n+    public Integer getMaxPoolSize() {\n+        return maxPoolSize;\n+    }\n+\n+    public Integer getQueueCapacity() {\n+        return queueCapacity;\n+    }\n+\n     public SyncopeClientFactoryBean newClientFactory() {\n         return new SyncopeClientFactoryBean().\n                 setAddress(scheme + \"://\" + host + \":\" + port + StringUtils.prependIfMissing(rootPath, \"/\"))."},{"sha":"d793da20febd2b6c23433459626296a57f067eb6","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=1302734d34336558948205e0bfb17ecadaa24ede","patch":"@@ -104,9 +104,9 @@ public SyncopeConsoleSession(final Request request) {\n \n         executor = new ThreadPoolTaskExecutor();\n         executor.setWaitForTasksToCompleteOnShutdown(false);\n-        executor.setCorePoolSize(5);\n-        executor.setMaxPoolSize(10);\n-        executor.setQueueCapacity(50);\n+        executor.setCorePoolSize(SyncopeConsoleApplication.get().getCorePoolSize());\n+        executor.setMaxPoolSize(SyncopeConsoleApplication.get().getMaxPoolSize());\n+        executor.setQueueCapacity(SyncopeConsoleApplication.get().getQueueCapacity());\n         executor.initialize();\n     }\n "},{"sha":"320e52ca4a48af581068500f59500099e4f398b0","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":172,"deletions":39,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=1302734d34336558948205e0bfb17ecadaa24ede","patch":"@@ -30,9 +30,15 @@\n import javax.servlet.SessionTrackingMode;\n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.rest.ConfRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.wicket.Application;\n@@ -46,6 +52,7 @@\n import org.apache.wicket.util.cookies.CookieUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.util.CollectionUtils;\n \n public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n@@ -55,26 +62,54 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n-    private final Map<String, String> resources =\n-            Collections.<String, String>synchronizedMap(new HashMap<>());\n+    private final Map<String, String> resources = Collections.<String, String>synchronizedMap(new HashMap<>());\n+\n+    private static final String CONNECTOR_TEST_TIMEOUT_PARAMETER = \"connector.test.timeout\";\n+\n+    private Integer connectorTestTimeout = null;\n+\n+    private static final String RESOURCE_TEST_TIMEOUT_PARAMETER = \"resource.test.timeout\";\n+\n+    private Integer resourceTestTimeout = null;\n \n     private final Set<String> runningResCheck = Collections.synchronizedSet(new HashSet<>());\n \n-    private final Map<String, String> connectors =\n-            Collections.<String, String>synchronizedMap(new HashMap<>());\n+    private final Map<String, String> connectors = Collections.<String, String>synchronizedMap(new HashMap<>());\n \n     private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<>());\n \n     private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n \n     private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n \n+    public TopologyWebSocketBehavior() {\n+        // Handling with timeout as per SYNCOPE-1379\n+        try {\n+            // Loop just to avoid NotFound exception raising on the Core side\n+            for (AttrTO param : new ConfRestClient().list()) {\n+                if (!CollectionUtils.isEmpty(param.getValues())) {\n+                    try {\n+                        if (CONNECTOR_TEST_TIMEOUT_PARAMETER.equalsIgnoreCase(param.getSchema())) {\n+                            connectorTestTimeout = Integer.parseInt(param.getValues().get(0));\n+                        } else if (RESOURCE_TEST_TIMEOUT_PARAMETER.equalsIgnoreCase(param.getSchema())) {\n+                            resourceTestTimeout = Integer.parseInt(param.getValues().get(0));\n+                        }\n+                    } catch (NumberFormatException e) {\n+                        LOG.warn(\"Invalid timeout {}\", param);\n+                    }\n+                }\n+            }\n+        } catch (SyncopeClientException e) {\n+            // ignore exception\n+        }\n+    }\n+\n     @Override\n     protected CharSequence getSessionId(final Component component) {\n         String sessionId = \"\";\n         WebApplication application = (WebApplication) component.getApplication();\n-        Set<SessionTrackingMode> effectiveSessionTrackingModes =\n-                application.getServletContext().getEffectiveSessionTrackingModes();\n+        Set<SessionTrackingMode> effectiveSessionTrackingModes = application.getServletContext().\n+                getEffectiveSessionTrackingModes();\n         Object containerRequest = component.getRequest().getContainerRequest();\n         if (effectiveSessionTrackingModes.size() == 1\n                 && SessionTrackingMode.URL.equals(effectiveSessionTrackingModes.iterator().next())) {\n@@ -120,7 +155,11 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                         runningConnCheck.add(ckey);\n                     }\n \n-                    SyncopeConsoleSession.get().execute(new ConnCheck(ckey));\n+                    try {\n+                        SyncopeConsoleSession.get().execute(new ConnCheck(ckey));\n+                    } catch (Exception e) {\n+                        LOG.error(\"Unexpected error\", e);\n+                    }\n \n                     break;\n                 case CHECK_RESOURCE:\n@@ -139,7 +178,11 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                         runningResCheck.add(rkey);\n                     }\n \n-                    SyncopeConsoleSession.get().execute(new ResCheck(rkey));\n+                    try {\n+                        SyncopeConsoleSession.get().execute(new ResCheck(rkey));\n+                    } catch (Exception e) {\n+                        LOG.error(\"Unexpected error\", e);\n+                    }\n \n                     break;\n                 case ADD_ENDPOINT:\n@@ -163,6 +206,37 @@ public boolean resCheckDone(final Collection<String> resources) {\n         return this.resources.keySet().containsAll(resources);\n     }\n \n+    private void timeoutHandlingConnectionChecker(\n+            final Checker checker,\n+            final Integer timeout,\n+            final Map<String, String> responses,\n+            final Set<String> running) {\n+        String res = null;\n+        try {\n+            if (timeout == null) {\n+                LOG.debug(\"No timeouts for resource connection checking ... \");\n+                res = SyncopeConsoleSession.get().execute(checker).get();\n+            } else if (timeout > 0) {\n+                LOG.debug(\"Timeouts provided for resource connection checking ... \");\n+                res = SyncopeConsoleSession.get().execute(checker).get(timeout, TimeUnit.SECONDS);\n+            }\n+        } catch (InterruptedException | TimeoutException e) {\n+            LOG.warn(\"Connection with {} timed out\", checker.getKey());\n+            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                    TopologyNode.Status.UNREACHABLE, checker.getKey());\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception conneting to {}\", checker.getKey(), e);\n+            res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                    TopologyNode.Status.FAILURE, checker.getKey());\n+        }\n+\n+        if (res != null) {\n+            responses.put(checker.getKey(), res);\n+        }\n+\n+        running.remove(checker.getKey());\n+    }\n+\n     class ConnCheck implements Runnable {\n \n         private final String key;\n@@ -179,23 +253,15 @@ class ConnCheck implements Runnable {\n \n         @Override\n         public void run() {\n-            try {\n-                ThreadContext.setApplication(application);\n-                ThreadContext.setSession(session);\n-\n-                String res;\n-                try {\n-                    final ConnInstanceTO connector = connectorRestClient.read(key);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                            connectorRestClient.check(connector).getLeft()\n-                            ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n-                } catch (Exception e) {\n-                    LOG.warn(\"Error checking connection for {}\", key, e);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n-                }\n+            ThreadContext.setApplication(application);\n+            ThreadContext.setSession(session);\n \n-                connectors.put(key, res);\n-                runningConnCheck.remove(key);\n+            try {\n+                timeoutHandlingConnectionChecker(\n+                        new ConnectorChecker(key, this.application),\n+                        connectorTestTimeout,\n+                        connectors,\n+                        runningConnCheck);\n             } finally {\n                 ThreadContext.detach();\n             }\n@@ -218,23 +284,90 @@ class ResCheck implements Runnable {\n \n         @Override\n         public void run() {\n+            ThreadContext.setApplication(application);\n+            ThreadContext.setSession(session);\n+\n             try {\n-                ThreadContext.setApplication(application);\n-                ThreadContext.setSession(session);\n-\n-                String res;\n-                try {\n-                    final ResourceTO resource = resourceRestClient.read(key);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                            resourceRestClient.check(resource).getLeft()\n-                            ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n-                } catch (Exception e) {\n-                    LOG.warn(\"Error checking connection for {}\", key, e);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n-                }\n+                timeoutHandlingConnectionChecker(\n+                        new ResourceChecker(key, this.application),\n+                        resourceTestTimeout,\n+                        resources,\n+                        runningResCheck);\n+            } finally {\n+                ThreadContext.detach();\n+            }\n+        }\n+    }\n \n-                resources.put(key, res);\n-                runningResCheck.remove(key);\n+    abstract class Checker implements Callable<String> {\n+\n+        protected final String key;\n+\n+        protected final Application application;\n+\n+        protected final Session session;\n+\n+        Checker(final String key, final Application application) {\n+            this.key = key;\n+            this.application = application;\n+            this.session = Session.exists() ? Session.get() : null;\n+        }\n+\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public abstract String call() throws Exception;\n+    }\n+\n+    class ConnectorChecker extends Checker {\n+\n+        ConnectorChecker(final String key, final Application application) {\n+            super(key, application);\n+        }\n+\n+        @Override\n+        public String call() throws Exception {\n+            ThreadContext.setApplication(application);\n+            ThreadContext.setSession(session);\n+\n+            try {\n+                final ConnInstanceTO connector = connectorRestClient.read(key);\n+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                        connectorRestClient.check(connector).getLeft()\n+                        ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n+            } catch (Exception e) {\n+                LOG.warn(\"Error checking connection for {}\", key, e);\n+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                        TopologyNode.Status.FAILURE, key);\n+            } finally {\n+                ThreadContext.detach();\n+            }\n+        }\n+    }\n+\n+    class ResourceChecker extends Checker {\n+\n+        ResourceChecker(final String key, final Application application) {\n+            super(key, application);\n+        }\n+\n+        @Override\n+        public String call() throws Exception {\n+            ThreadContext.setApplication(application);\n+            ThreadContext.setSession(session);\n+\n+            try {\n+                final ResourceTO resource = resourceRestClient.read(key);\n+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                        resourceRestClient.check(resource).getLeft()\n+                        ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n+            } catch (Exception e) {\n+                LOG.warn(\"Error checking connection for {}\", key, e);\n+                return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n+                        TopologyNode.Status.FAILURE,\n+                        key);\n             } finally {\n                 ThreadContext.detach();\n             }"},{"sha":"756e71eba24caa0b2f21f6abeb607d5371ebb93d","filename":"client/console/src/main/resources/console.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1302734d34336558948205e0bfb17ecadaa24ede/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=1302734d34336558948205e0bfb17ecadaa24ede","patch":"@@ -47,3 +47,7 @@ page.types=org.apache.syncope.client.console.pages.Types\n page.policies=org.apache.syncope.client.console.pages.Policies\n page.notifications=org.apache.syncope.client.console.pages.Notifications\n page.parameters=org.apache.syncope.client.console.pages.Parameters\n+\n+topology.corePoolSize=10\n+topology.maxPoolSize=20\n+topology.queueCapacity=50"},{"sha":"310ceff83184fd3a838ff7eaa75965bb23722d66","filename":"fit/console-reference/src/main/resources/console.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1302734d34336558948205e0bfb17ecadaa24ede/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1302734d34336558948205e0bfb17ecadaa24ede/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=1302734d34336558948205e0bfb17ecadaa24ede","patch":"@@ -47,3 +47,7 @@ page.types=org.apache.syncope.client.console.pages.Types\n page.policies=org.apache.syncope.client.console.pages.Policies\n page.notifications=org.apache.syncope.client.console.pages.Notifications\n page.parameters=org.apache.syncope.client.console.pages.Parameters\n+\n+topology.corePoolSize=50\n+topology.maxPoolSize=100\n+topology.queueCapacity=10"},{"sha":"eb4523568b90066b737758855031b8a90d3661bd","filename":"fit/core-reference/src/test/resources/console.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1302734d34336558948205e0bfb17ecadaa24ede/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1302734d34336558948205e0bfb17ecadaa24ede/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fconsole.properties?ref=1302734d34336558948205e0bfb17ecadaa24ede","patch":"@@ -47,3 +47,8 @@ page.types=org.apache.syncope.client.console.pages.Types\n page.policies=org.apache.syncope.client.console.pages.Policies\n page.notifications=org.apache.syncope.client.console.pages.Notifications\n page.parameters=org.apache.syncope.client.console.pages.Parameters\n+\n+topology.corePoolSize=50\n+topology.maxPoolSize=100\n+topology.queueCapacity=10\n+"}]}