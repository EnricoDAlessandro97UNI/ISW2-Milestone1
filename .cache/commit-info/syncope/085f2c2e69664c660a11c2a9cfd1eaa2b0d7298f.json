{"sha":"085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA4NWYyYzJlNjk2NjRjNjYwYTExYzJhOWNmZDFlYWEyYjBkNzI5OGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-15T11:21:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-15T11:21:16Z"},"message":"[SYNCOPE-1416] Small refactoring, following @fmartelli's approach","tree":{"sha":"2a069d9cab9927aa18d5dddca008fff2597b23a7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2a069d9cab9927aa18d5dddca008fff2597b23a7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"eae33188b671edea90399162d2bde53d9db4ed54","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eae33188b671edea90399162d2bde53d9db4ed54","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eae33188b671edea90399162d2bde53d9db4ed54"}],"stats":{"total":88,"additions":46,"deletions":42},"files":[{"sha":"1c465e98446c3b681b88daa91b9683c17ad8b3dc","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f","patch":"@@ -97,29 +97,9 @@ protected void processOBS(\n         });\n     }\n \n-    @Override\n-    protected void parseOrderByForPlainSchema(\n-            final SearchSupport svs,\n-            final OrderBySupport obs,\n-            final OrderBySupport.Item item,\n-            final OrderByClause clause,\n-            final PlainSchema schema,\n-            final String fieldName) {\n-\n-        // keep track of involvement of non-mandatory schemas in the order by clauses\n-        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n-\n-        obs.views.add(svs.field());\n-\n-        item.select = svs.field().alias + \".attrValues ->> '\" + field(schema, null) + \"' AS \" + fieldName;\n-        item.where = \"attrs ->> 'schema' = '\" + fieldName + \"'\";\n-        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n-    }\n-\n-    private Pair<Boolean, String> field(final PlainSchema schema, final AttributeCond.Type type) {\n+    private String key(final AttrSchemaType schemaType) {\n         String key;\n-        boolean lower = false;\n-        switch (schema.getType()) {\n+        switch (schemaType) {\n             case Boolean:\n                 key = \"booleanValue\";\n                 break;\n@@ -141,10 +121,29 @@ private Pair<Boolean, String> field(final PlainSchema schema, final AttributeCon\n                 break;\n \n             default:\n-                lower = type == AttributeCond.Type.IEQ || type == AttributeCond.Type.ILIKE;\n                 key = \"stringValue\";\n         }\n-        return Pair.of(lower, key);\n+\n+        return key;\n+    }\n+\n+    @Override\n+    protected void parseOrderByForPlainSchema(\n+            final SearchSupport svs,\n+            final OrderBySupport obs,\n+            final OrderBySupport.Item item,\n+            final OrderByClause clause,\n+            final PlainSchema schema,\n+            final String fieldName) {\n+\n+        // keep track of involvement of non-mandatory schemas in the order by clauses\n+        obs.nonMandatorySchemas = !\"true\".equals(schema.getMandatoryCondition());\n+\n+        obs.views.add(svs.field());\n+\n+        item.select = svs.field().alias + \".attrValues ->> '\" + key(schema.getType()) + \"' AS \" + fieldName;\n+        item.where = \"attrs ->> 'schema' = '\" + fieldName + \"'\";\n+        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n     }\n \n     private void fillAttrQuery(\n@@ -156,7 +155,9 @@ private void fillAttrQuery(\n             final boolean not,\n             final List<Object> parameters) {\n \n-        Pair<Boolean, String> field = field(schema, cond.getType());\n+        String key = key(schema.getType());\n+        boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n+                && (cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE);\n \n         if (!not && cond.getType() == AttributeCond.Type.EQ) {\n             PlainAttr<?> container = anyUtils.newPlainAttr();\n@@ -173,11 +174,11 @@ private void fillAttrQuery(\n         } else {\n             query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).\n                     append(\" AND \").\n-                    append(field.getLeft() ? \"LOWER(\" : \"\").\n+                    append(lower ? \"LOWER(\" : \"\").\n                     append(schema.isUniqueConstraint()\n                             ? \"attrs -> 'uniqueValue'\" : \"attrValues\").\n-                    append(\" ->> '\").append(field.getRight()).append(\"'\").\n-                    append(field.getLeft() ? \")\" : \"\");\n+                    append(\" ->> '\").append(key).append(\"'\").\n+                    append(lower ? \")\" : \"\");\n \n             switch (cond.getType()) {\n                 case LIKE:\n@@ -237,10 +238,9 @@ private void fillAttrQuery(\n                     LOG.error(\"Could not parse {} as date\", value, e);\n                 }\n             }\n-\n-            query.append(field.getLeft() ? \"LOWER(\" : \"\").\n+            query.append(lower ? \"LOWER(\" : \"\").\n                     append(\"?\").append(setParameter(parameters, value)).\n-                    append(field.getLeft() ? \")\" : \"\");\n+                    append(lower ? \")\" : \"\");\n         }\n     }\n "},{"sha":"da76f4875197c1e4be61155a7a4f949d3740ad71","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=085f2c2e69664c660a11c2a9cfd1eaa2b0d7298f","patch":"@@ -130,7 +130,7 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n         Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n         // 1. get the query string from the search condition\n-        Pair<StringBuilder, Set<String>> queryInfo = \n+        Pair<StringBuilder, Set<String>> queryInfo =\n                 getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n \n         StringBuilder queryString = queryInfo.getLeft();\n@@ -167,8 +167,8 @@ protected <T extends Any<?>> List<T> doSearch(\n             Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n             // 1. get the query string from the search condition\n-            Pair<StringBuilder, Set<String>> queryInfo = getQuery(buildEffectiveCond(cond, filter.getRight()),\n-                    parameters, svs);\n+            Pair<StringBuilder, Set<String>> queryInfo =\n+                    getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n \n             StringBuilder queryString = queryInfo.getLeft();\n \n@@ -292,7 +292,10 @@ protected void processOBS(\n     }\n \n     private StringBuilder buildWhere(\n-            final SearchSupport svs, final Set<String> involvedPlainAttrs, final OrderBySupport obs) {\n+            final SearchSupport svs,\n+            final Set<String> involvedPlainAttrs,\n+            final OrderBySupport obs) {\n+\n         StringBuilder where = new StringBuilder(\" u\");\n         processOBS(svs, involvedPlainAttrs, obs, where);\n         where.append(\" WHERE \");\n@@ -418,8 +421,9 @@ private OrderBySupport parseOrderBy(\n \n     private Pair<StringBuilder, Set<String>> getQuery(\n             final SearchCond cond, final List<Object> parameters, final SearchSupport svs) {\n+\n         StringBuilder query = new StringBuilder();\n-        Set<String> involvedAttributes = new HashSet<>();\n+        Set<String> involvedPlainAttrs = new HashSet<>();\n \n         switch (cond.getType()) {\n             case LEAF:\n@@ -463,7 +467,7 @@ private Pair<StringBuilder, Set<String>> getQuery(\n                     query.append(getQuery(cond.getAttributeCond(),\n                             cond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                     try {\n-                        involvedAttributes.add(check(cond.getAttributeCond(), svs.anyTypeKind).getLeft().getKey());\n+                        involvedPlainAttrs.add(check(cond.getAttributeCond(), svs.anyTypeKind).getLeft().getKey());\n                     } catch (IllegalArgumentException e) {\n                         // ignore\n                     }\n@@ -475,10 +479,10 @@ private Pair<StringBuilder, Set<String>> getQuery(\n \n             case AND:\n                 Pair<StringBuilder, Set<String>> leftAndInfo = getQuery(cond.getLeftSearchCond(), parameters, svs);\n-                involvedAttributes.addAll(leftAndInfo.getRight());\n+                involvedPlainAttrs.addAll(leftAndInfo.getRight());\n \n                 Pair<StringBuilder, Set<String>> rigthAndInfo = getQuery(cond.getRightSearchCond(), parameters, svs);\n-                involvedAttributes.addAll(rigthAndInfo.getRight());\n+                involvedPlainAttrs.addAll(rigthAndInfo.getRight());\n \n                 String andSubQuery = leftAndInfo.getKey().toString();\n                 // Add extra parentheses\n@@ -491,10 +495,10 @@ private Pair<StringBuilder, Set<String>> getQuery(\n \n             case OR:\n                 Pair<StringBuilder, Set<String>> leftOrInfo = getQuery(cond.getLeftSearchCond(), parameters, svs);\n-                involvedAttributes.addAll(leftOrInfo.getRight());\n+                involvedPlainAttrs.addAll(leftOrInfo.getRight());\n \n                 Pair<StringBuilder, Set<String>> rigthOrInfo = getQuery(cond.getRightSearchCond(), parameters, svs);\n-                involvedAttributes.addAll(rigthOrInfo.getRight());\n+                involvedPlainAttrs.addAll(rigthOrInfo.getRight());\n \n                 String orSubQuery = leftOrInfo.getKey().toString();\n                 // Add extra parentheses\n@@ -508,7 +512,7 @@ private Pair<StringBuilder, Set<String>> getQuery(\n             default:\n         }\n \n-        return Pair.of(query, involvedAttributes);\n+        return Pair.of(query, involvedPlainAttrs);\n     }\n \n     protected String getQuery("}]}