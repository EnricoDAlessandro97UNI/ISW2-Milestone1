{"sha":"56d67c50509174eb114eb49e53b73aef60fefe8f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU2ZDY3YzUwNTA5MTc0ZWIxMTRlYjQ5ZTUzYjczYWVmNjBmZWZlOGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-11T16:58:02Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-11T16:58:02Z"},"message":"[SYNCOPE-1410] More robust Builders","tree":{"sha":"7b8c607351e2128b4fb0a2f70f3b451f68abde08","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7b8c607351e2128b4fb0a2f70f3b451f68abde08"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/56d67c50509174eb114eb49e53b73aef60fefe8f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/56d67c50509174eb114eb49e53b73aef60fefe8f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/56d67c50509174eb114eb49e53b73aef60fefe8f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/56d67c50509174eb114eb49e53b73aef60fefe8f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"90d1d931735a9e29e96f735ddaded1d9d24bfa1c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90d1d931735a9e29e96f735ddaded1d9d24bfa1c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90d1d931735a9e29e96f735ddaded1d9d24bfa1c"}],"stats":{"total":781,"additions":366,"deletions":415},"files":[{"sha":"254fb89859e2c08e70be44a6ef98e8fdea539993","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ChangePasswordModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -86,7 +86,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                     }\n                 }\n \n-                UserUR req = new UserUR.Builder().key(inner.getKey()).\n+                UserUR req = new UserUR.Builder(inner.getKey()).\n                         password(new PasswordPatch.Builder().\n                                 value(inner.getPassword()).onSyncope(isOnSyncope).resources(resources).build()).\n                         build();"},{"sha":"8333782be6ac0c18ee6ff74cea9d4413782d49b7","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -159,9 +159,7 @@ public List<MembershipTO> execute(final String filter) {\n                                     new SortParam<>(\"name\", true),\n                                     null)).stream().map(input -> {\n \n-                                return new MembershipTO.Builder().\n-                                        group(input.getKey(), input.getName()).\n-                                        build();\n+                                return new MembershipTO.Builder(input.getKey()).groupName(input.getName()).build();\n                             }).collect(Collectors.toList());\n                 }\n             }).hideLabel().setOutputMarkupId(true));"},{"sha":"5fdb0b6e7c16d59efb54352bdb1f4ecaf0ca5134","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -90,14 +90,14 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                     userTO.getPlainAttrs().stream().\n                             filter(attr -> (attr.getSchema().\n                             contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n-                            forEachOrdered(attr -> {\n+                            forEach(attr -> {\n                                 String[] simpleAttrs = attr.getSchema().split(\n                                         SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n                                 MembershipTO membership = userTO.getMemberships().stream().\n                                         filter(memb -> simpleAttrs[0].equals(memb.getGroupName())).\n                                         findFirst().orElse(null);\n                                 if (membership == null) {\n-                                    membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                    membership = new MembershipTO.Builder(null).groupName(simpleAttrs[0]).build();\n                                     userTO.getMemberships().add(membership);\n                                 }\n \n@@ -112,7 +112,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                     SyncopeEnduserSession.get().getDatePlainSchemas().stream().map(plainSchema -> {\n                         millisToDate(userTO.getPlainAttrs(), plainSchema);\n                         return plainSchema;\n-                    }).forEachOrdered(plainSchema -> {\n+                    }).forEach(plainSchema -> {\n                         userTO.getMemberships().forEach(membership -> {\n                             millisToDate(membership.getPlainAttrs(), plainSchema);\n                         });\n@@ -122,14 +122,14 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                     userTO.getDerAttrs().stream().\n                             filter(attr -> (attr.getSchema().\n                             contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n-                            forEachOrdered(attr -> {\n+                            forEach(attr -> {\n                                 String[] simpleAttrs = attr.getSchema().split(\n                                         SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n                                 MembershipTO membership = userTO.getMemberships().stream().\n                                         filter(memb -> simpleAttrs[0].equals(memb.getGroupName())).\n                                         findFirst().orElse(null);\n                                 if (membership == null) {\n-                                    membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                    membership = new MembershipTO.Builder(null).groupName(simpleAttrs[0]).build();\n                                     userTO.getMemberships().add(membership);\n                                 }\n \n@@ -144,14 +144,14 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                     userTO.getVirAttrs().stream().\n                             filter(attr -> (attr.getSchema().\n                             contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n-                            forEachOrdered(attr -> {\n+                            forEach(attr -> {\n                                 String[] simpleAttrs = attr.getSchema().split(\n                                         SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n                                 MembershipTO membership = userTO.getMemberships().stream().\n                                         filter(memb -> simpleAttrs[0].equals(memb.getGroupName())).\n                                         findFirst().orElse(null);\n                                 if (membership == null) {\n-                                    membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                    membership = new MembershipTO.Builder(null).groupName(simpleAttrs[0]).build();\n                                     userTO.getMemberships().add(membership);\n                                 }\n \n@@ -166,9 +166,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                     LOG.trace(\"Received user self registration request is: [{}]\", userTO);\n \n                     // adapt request and create user\n-                    UserCR req = new UserCR.Builder().\n-                            realm(userTO.getRealm()).\n-                            username(userTO.getUsername()).\n+                    UserCR req = new UserCR.Builder(userTO.getRealm(), userTO.getUsername()).\n                             password(userTO.getPassword()).\n                             mustChangePassword(userTO.isMustChangePassword()).\n                             securityQuestion(userTO.getSecurityQuestion())."},{"sha":"1adbdf5849080904f9222e5e0594f1116ab899e1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -75,14 +75,14 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 Set<AttrTO> membAttrs = new HashSet<>();\n                 userTO.getPlainAttrs().stream().\n                         filter(attr -> (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n-                        forEachOrdered((attr) -> {\n+                        forEach(attr -> {\n                             String[] simpleAttrs = attr.getSchema().split(\n                                     SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n                             MembershipTO membership = userTO.getMemberships().stream().\n                                     filter(item -> simpleAttrs[0].equals(item.getGroupName())).\n                                     findFirst().orElse(null);\n                             if (membership == null) {\n-                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                membership = new MembershipTO.Builder(null).groupName(simpleAttrs[0]).build();\n                                 userTO.getMemberships().add(membership);\n                             }\n                             AttrTO clone = SerializationUtils.clone(attr);\n@@ -97,7 +97,7 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                         map(plainSchema -> {\n                             millisToDate(userTO.getPlainAttrs(), plainSchema);\n                             return plainSchema;\n-                        }).forEachOrdered(plainSchema -> {\n+                        }).forEach(plainSchema -> {\n                     userTO.getMemberships().forEach(membership -> {\n                         millisToDate(membership.getPlainAttrs(), plainSchema);\n                     });\n@@ -106,14 +106,14 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 membAttrs.clear();\n                 userTO.getDerAttrs().stream().\n                         filter(attr -> (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n-                        forEachOrdered(attr -> {\n+                        forEach(attr -> {\n                             String[] simpleAttrs = attr.getSchema().split(\n                                     SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n                             MembershipTO membership = userTO.getMemberships().stream().\n                                     filter(item -> simpleAttrs[0].equals(item.getGroupName())).\n                                     findFirst().orElse(null);\n                             if (membership == null) {\n-                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                membership = new MembershipTO.Builder(null).groupName(simpleAttrs[0]).build();\n                                 userTO.getMemberships().add(membership);\n                             }\n                             AttrTO clone = SerializationUtils.clone(attr);\n@@ -126,14 +126,14 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 membAttrs.clear();\n                 userTO.getVirAttrs().stream().\n                         filter(attr -> (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR))).\n-                        forEachOrdered((attr) -> {\n+                        forEach((attr) -> {\n                             String[] simpleAttrs = attr.getSchema().split(\n                                     SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n                             MembershipTO membership = userTO.getMemberships().stream().\n                                     filter(item -> simpleAttrs[0].equals(item.getGroupName())).\n                                     findFirst().orElse(null);\n                             if (membership == null) {\n-                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                membership = new MembershipTO.Builder(null).groupName(simpleAttrs[0]).build();\n                                 userTO.getMemberships().add(membership);\n \n                             }\n@@ -212,7 +212,7 @@ private void completeAttrs(final Set<AttrTO> userTOAttrs, final Set<AttrTO> self\n                 EntityTOUtils.buildAttrMap(userTOAttrs);\n         selfTOAttrs.stream().\n                 filter(selfTOAttr -> (!userTOAttrsMap.containsKey(selfTOAttr.getSchema()))).\n-                forEachOrdered(selfTOAttr -> {\n+                forEach(selfTOAttr -> {\n                     userTOAttrs.add(selfTOAttr);\n                 });\n     }"},{"sha":"7790af7290f18619256469ed61d9aaa1e85e612d","filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/ValidationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FValidationTest.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -36,8 +36,8 @@\n \n public class ValidationTest {\n \n-    private AttrTO attrTO(String schemaKey, String... values) {\n-        return new AttrTO.Builder().schema(schemaKey).values(values).build();\n+    private AttrTO attrTO(final String schemaKey, final String... values) {\n+        return new AttrTO.Builder(schemaKey).values(values).build();\n     }\n \n     @Test"},{"sha":"fc9e834f7eb812d6c61df36ea9a76917e0d5a86a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":34,"deletions":46,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -114,26 +114,23 @@ private static void diff(\n         if (!incremental) {\n             originalAttrs.keySet().stream().filter(attr -> !updatedAttrs.containsKey(attr)).\n                     forEach(schema -> {\n-                        result.getPlainAttrs().add(new AttrPatch.Builder().\n+                        result.getPlainAttrs().add(new AttrPatch.Builder(new AttrTO.Builder(schema).build()).\n                                 operation(PatchOperation.DELETE).\n-                                attrTO(new AttrTO.Builder().schema(schema).build()).\n                                 build());\n                     });\n         }\n \n         updatedAttrs.values().forEach(attrTO -> {\n             if (isEmpty(attrTO)) {\n                 if (!incremental) {\n-                    result.getPlainAttrs().add(new AttrPatch.Builder().\n+                    result.getPlainAttrs().add(new AttrPatch.Builder(new AttrTO.Builder(attrTO.getSchema()).build()).\n                             operation(PatchOperation.DELETE).\n-                            attrTO(new AttrTO.Builder().schema(attrTO.getSchema()).build()).\n                             build());\n                 }\n             } else if (!originalAttrs.containsKey(attrTO.getSchema())\n                     || !originalAttrs.get(attrTO.getSchema()).getValues().equals(attrTO.getValues())) {\n \n-                AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).\n-                        build();\n+                AttrPatch patch = new AttrPatch.Builder(attrTO).operation(PatchOperation.ADD_REPLACE).build();\n                 if (!patch.isEmpty()) {\n                     result.getPlainAttrs().add(patch);\n                 }\n@@ -188,18 +185,16 @@ public static AnyObjectUR diff(\n \n         updatedRels.entrySet().stream().\n                 filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n-                forEachOrdered(entry -> {\n-                    result.getRelationships().add(new RelationshipUR.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).\n-                            relationshipTO(entry.getValue()).build());\n+                forEach(entry -> {\n+                    result.getRelationships().add(new RelationshipUR.Builder(entry.getValue()).\n+                            operation(PatchOperation.ADD_REPLACE).build());\n                 });\n \n         if (!incremental) {\n             originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n                     forEach(key -> {\n-                        result.getRelationships().add(new RelationshipUR.Builder().\n-                                operation(PatchOperation.DELETE).\n-                                relationshipTO(originalRels.get(key)).build());\n+                        result.getRelationships().add(new RelationshipUR.Builder(originalRels.get(key)).\n+                                operation(PatchOperation.DELETE).build());\n                     });\n         }\n \n@@ -208,8 +203,8 @@ public static AnyObjectUR diff(\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n         updatedMembs.forEach((key, value) -> {\n-            MembershipUR membershipPatch = new MembershipUR.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).group(value.getGroupKey()).build();\n+            MembershipUR membershipPatch = new MembershipUR.Builder(value.getGroupKey()).\n+                    operation(PatchOperation.ADD_REPLACE).build();\n \n             diff(value, membershipPatch);\n \n@@ -223,8 +218,8 @@ public static AnyObjectUR diff(\n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n                     forEach(key -> {\n-                        result.getMemberships().add(new MembershipUR.Builder().\n-                                operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n+                        result.getMemberships().add(new MembershipUR.Builder(originalMembs.get(key).getGroupKey()).\n+                                operation(PatchOperation.DELETE).build());\n                     });\n         }\n \n@@ -310,18 +305,16 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n \n         updatedRels.entrySet().stream().\n                 filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n-                forEachOrdered(entry -> {\n-                    result.getRelationships().add(new RelationshipUR.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).\n-                            relationshipTO(entry.getValue()).build());\n+                forEach(entry -> {\n+                    result.getRelationships().add(new RelationshipUR.Builder(entry.getValue()).\n+                            operation(PatchOperation.ADD_REPLACE).build());\n                 });\n \n         if (!incremental) {\n             originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n                     forEach(key -> {\n-                        result.getRelationships().add(new RelationshipUR.Builder().\n-                                operation(PatchOperation.DELETE).\n-                                relationshipTO(originalRels.get(key)).build());\n+                        result.getRelationships().add(new RelationshipUR.Builder(originalRels.get(key)).\n+                                operation(PatchOperation.DELETE).build());\n                     });\n         }\n \n@@ -330,8 +323,8 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n         updatedMembs.forEach((key, value) -> {\n-            MembershipUR membershipPatch = new MembershipUR.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).group(value.getGroupKey()).build();\n+            MembershipUR membershipPatch = new MembershipUR.Builder(value.getGroupKey()).\n+                    operation(PatchOperation.ADD_REPLACE).build();\n \n             diff(value, membershipPatch);\n \n@@ -345,8 +338,8 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n                     forEach(key -> {\n-                        result.getMemberships().add(new MembershipUR.Builder().\n-                                operation(PatchOperation.DELETE).group(originalMembs.get(key).getGroupKey()).build());\n+                        result.getMemberships().add(new MembershipUR.Builder(originalMembs.get(key).getGroupKey()).\n+                                operation(PatchOperation.DELETE).build());\n                     });\n         }\n \n@@ -531,14 +524,12 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectUR\n                                 findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n \n                         if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                            MembershipTO newMembershipTO =\n-                                    new MembershipTO.Builder().group(membPatch.getGroup()).build();\n-\n-                            // 3. plain attributes\n-                            newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n-\n-                            // 4. virtual attributes\n-                            newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n+                            MembershipTO newMembershipTO = new MembershipTO.Builder(membPatch.getGroup()).\n+                                    // 3. plain attributes\n+                                    plainAttrs(membPatch.getPlainAttrs()).\n+                                    // 4. virtual attributes\n+                                    virAttrs(membPatch.getVirAttrs()).\n+                                    build();\n \n                             result.getMemberships().add(newMembershipTO);\n                         }\n@@ -586,14 +577,12 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n                                 findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n \n                         if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                            MembershipTO newMembershipTO =\n-                                    new MembershipTO.Builder().group(membPatch.getGroup()).build();\n-\n-                            // 3. plain attributes\n-                            newMembershipTO.getPlainAttrs().addAll(membPatch.getPlainAttrs());\n-\n-                            // 4. virtual attributes\n-                            newMembershipTO.getVirAttrs().addAll(membPatch.getVirAttrs());\n+                            MembershipTO newMembershipTO = new MembershipTO.Builder(membPatch.getGroup()).\n+                                    // 3. plain attributes\n+                                    plainAttrs(membPatch.getPlainAttrs()).\n+                                    // 4. virtual attributes\n+                                    virAttrs(membPatch.getVirAttrs()).\n+                                    build();\n \n                             result.getMemberships().add(newMembershipTO);\n                         }\n@@ -625,9 +614,8 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n     public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyUR anyUR) {\n         anyUR.getPlainAttrs().addAll(anyTO.getPlainAttrs().stream().\n                 filter(plainAttrTO -> isEmpty(plainAttrTO)).\n-                map(plainAttrTO -> new AttrPatch.Builder().\n+                map(plainAttrTO -> new AttrPatch.Builder(new AttrTO.Builder(plainAttrTO.getSchema()).build()).\n                 operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(plainAttrTO.getSchema()).build()).\n                 build()).collect(Collectors.toSet()));\n     }\n "},{"sha":"9141e2a1192128475c1f0f15cf9eb87e0516f95d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyCR.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyCR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -53,21 +53,19 @@ public abstract class AnyCR implements Serializable, AttributableReqEntity {\n \n         protected R instance;\n \n+        Builder(final String realm) {\n+            getInstance().setRealm(realm);\n+        }\n+\n         protected abstract R newInstance();\n \n-        protected R getInstance() {\n+        protected final R getInstance() {\n             if (instance == null) {\n                 instance = newInstance();\n             }\n             return instance;\n         }\n \n-        @SuppressWarnings(\"unchecked\")\n-        public B realm(final String realm) {\n-            getInstance().setRealm(realm);\n-            return (B) this;\n-        }\n-\n         @SuppressWarnings(\"unchecked\")\n         public B auxClass(final String auxClass) {\n             getInstance().getAuxClasses().add(auxClass);"},{"sha":"ad8363e286bf32a373a83af825570fa5266ca7a8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectCR.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectCR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -53,13 +53,10 @@ protected AnyObjectCR newInstance() {\n             return new AnyObjectCR();\n         }\n \n-        public Builder(final String type) {\n+        public Builder(final String realm, final String type, final String name) {\n+            super(realm);\n             getInstance().setType(type);\n-        }\n-\n-        public Builder name(final String name) {\n             getInstance().setName(name);\n-            return this;\n         }\n \n         public Builder relationship(final RelationshipTO relationship) {"},{"sha":"577a87013dfc7805866a7ab0f7dd330e357fc848","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectUR.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -40,6 +40,10 @@ public class AnyObjectUR extends AnyUR {\n \n     public static class Builder extends AnyUR.Builder<AnyObjectUR, Builder> {\n \n+        public Builder(final String key) {\n+            super(key);\n+        }\n+\n         @Override\n         protected AnyObjectUR newInstance() {\n             return new AnyObjectUR();"},{"sha":"fd4215134a886e3cb3a389c283e1803bdc79f1cd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyUR.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -51,21 +51,19 @@ public abstract class AnyUR implements Serializable {\n \n         protected R instance;\n \n+        Builder(final String key) {\n+            getInstance().setKey(key);\n+        }\n+\n         protected abstract R newInstance();\n \n-        protected R getInstance() {\n+        protected final R getInstance() {\n             if (instance == null) {\n                 instance = newInstance();\n             }\n             return instance;\n         }\n \n-        @SuppressWarnings(\"unchecked\")\n-        public B key(final String key) {\n-            getInstance().setKey(key);\n-            return (B) this;\n-        }\n-\n         @SuppressWarnings(\"unchecked\")\n         public B realm(final StringReplacePatchItem realm) {\n             getInstance().setRealm(realm);"},{"sha":"bc874ceaf3ebb4e28ab9f8960aa157385fa7c1ea","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AttrPatch.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttrPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttrPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttrPatch.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -33,16 +33,15 @@ public class AttrPatch extends AbstractPatch {\n \n     public static class Builder extends AbstractPatch.Builder<AttrPatch, Builder> {\n \n+        public Builder(final AttrTO attrTO) {\n+            super();\n+            getInstance().setAttrTO(attrTO);\n+        }\n+\n         @Override\n         protected AttrPatch newInstance() {\n             return new AttrPatch();\n         }\n-\n-        public Builder attrTO(final AttrTO attrTO) {\n-            getInstance().setAttrTO(attrTO);\n-            return this;\n-        }\n-\n     }\n \n     private AttrTO attrTO;"},{"sha":"911d5e5aa768164e2ab3935f0b7a8d9c4d63c913","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/GroupCR.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupCR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -47,16 +47,16 @@ public class GroupCR extends AnyCR {\n \n     public static class Builder extends AnyCR.Builder<GroupCR, Builder> {\n \n+        public Builder(final String realm, final String name) {\n+            super(realm);\n+            getInstance().setName(name);\n+        }\n+\n         @Override\n         protected GroupCR newInstance() {\n             return new GroupCR();\n         }\n \n-        public Builder name(final String name) {\n-            getInstance().setName(name);\n-            return this;\n-        }\n-\n         public Builder userOwner(final String userOwner) {\n             getInstance().setUserOwner(userOwner);\n             return this;"},{"sha":"c24318cecf08a3d9123f15ada6c7190d568cb0d2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/GroupUR.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -47,6 +47,10 @@ public class GroupUR extends AnyUR {\n \n     public static class Builder extends AnyUR.Builder<GroupUR, Builder> {\n \n+        public Builder(final String key) {\n+            super(key);\n+        }\n+\n         @Override\n         protected GroupUR newInstance() {\n             return new GroupUR();"},{"sha":"bfb05036a9b84e3666a0118a181a87ff93027e67","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/MembershipUR.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipUR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -39,16 +39,16 @@ public class MembershipUR extends AbstractPatch {\n \n     public static class Builder extends AbstractPatch.Builder<MembershipUR, Builder> {\n \n+        public Builder(final String group) {\n+            super();\n+            getInstance().setGroup(group);\n+        }\n+\n         @Override\n         protected MembershipUR newInstance() {\n             return new MembershipUR();\n         }\n \n-        public Builder group(final String group) {\n-            getInstance().setGroup(group);\n-            return this;\n-        }\n-\n         public Builder plainAttr(final AttrTO plainAttr) {\n             getInstance().getPlainAttrs().add(plainAttr);\n             return this;"},{"sha":"4e14d3b469e7c8a1ddab259d54e0f8aa5b1f5961","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/RelationshipUR.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipUR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -32,15 +32,15 @@ public class RelationshipUR extends AbstractPatch {\n \n     public static class Builder extends AbstractPatch.Builder<RelationshipUR, Builder> {\n \n+        public Builder(final RelationshipTO relationshipTO) {\n+            super();\n+            getInstance().setRelationshipTO(relationshipTO);\n+        }\n+\n         @Override\n         protected RelationshipUR newInstance() {\n             return new RelationshipUR();\n         }\n-\n-        public Builder relationshipTO(final RelationshipTO relationshipTO) {\n-            getInstance().setRelationshipTO(relationshipTO);\n-            return this;\n-        }\n     }\n \n     private RelationshipTO relationshipTO;"},{"sha":"0e76d670b94246db8ca19bfd5d7951a084607e32","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/UserCR.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -50,16 +50,16 @@ public class UserCR extends AnyCR implements GroupableRelatableTO {\n \n     public static class Builder extends AnyCR.Builder<UserCR, Builder> {\n \n+        public Builder(final String realm, final String username) {\n+            super(realm);\n+            getInstance().setUsername(username);\n+        }\n+\n         @Override\n         protected UserCR newInstance() {\n             return new UserCR();\n         }\n \n-        public Builder username(final String username) {\n-            getInstance().setUsername(username);\n-            return this;\n-        }\n-\n         public Builder password(final String password) {\n             getInstance().setPassword(password);\n             return this;"},{"sha":"5a42f8cfb355423c58400929b98fd5273330455f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -40,6 +40,10 @@ public class UserUR extends AnyUR {\n \n     public static class Builder extends AnyUR.Builder<UserUR, Builder> {\n \n+        public Builder(final String key) {\n+            super(key);\n+        }\n+\n         @Override\n         protected UserUR newInstance() {\n             return new UserUR();"},{"sha":"5348e7e2e1c0c5c2a36a6853c51e2557295d5bfd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -42,9 +42,8 @@ public static class Builder {\n \n         private final AttrTO instance = new AttrTO();\n \n-        public Builder schema(final String schema) {\n+        public Builder(final String schema) {\n             instance.setSchema(schema);\n-            return this;\n         }\n \n         public Builder value(final String value) {"},{"sha":"1946964bd1c29ec5ba5fb487ba804c90210846d1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":34,"deletions":4,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -21,6 +21,8 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n@@ -41,17 +43,45 @@ public static class Builder {\n \n         private final MembershipTO instance = new MembershipTO();\n \n-        public Builder group(final String groupKey) {\n+        public Builder(final String groupKey) {\n             instance.setGroupKey(groupKey);\n-            return this;\n         }\n \n-        public Builder group(final String groupKey, final String groupName) {\n-            instance.setGroupKey(groupKey);\n+        public Builder groupName(final String groupName) {\n             instance.setGroupName(groupName);\n             return this;\n         }\n \n+        public Builder plainAttr(final AttrTO plainAttr) {\n+            instance.getPlainAttrs().add(plainAttr);\n+            return this;\n+        }\n+\n+        public Builder plainAttrs(final AttrTO... plainAttrs) {\n+            instance.getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            return this;\n+        }\n+\n+        public Builder plainAttrs(final Collection<AttrTO> plainAttrs) {\n+            instance.getPlainAttrs().addAll(plainAttrs);\n+            return this;\n+        }\n+\n+        public Builder virAttr(final AttrTO virAttr) {\n+            instance.getVirAttrs().add(virAttr);\n+            return this;\n+        }\n+\n+        public Builder virAttrs(final Collection<AttrTO> virAttrs) {\n+            instance.getVirAttrs().addAll(virAttrs);\n+            return this;\n+        }\n+\n+        public Builder virAttrs(final AttrTO... virAttrs) {\n+            instance.getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            return this;\n+        }\n+\n         public MembershipTO build() {\n             return instance;\n         }"},{"sha":"c69d179337a056f75a5c328c3459a9be20aeac7e","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/AnyOperationsTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -33,13 +33,13 @@ public class AnyOperationsTest {\n     public void mindiff() {\n         AnyObjectTO oldOne = new AnyObjectTO();\n         oldOne.setName(\"name\");\n-        oldOne.getPlainAttrs().add(new AttrTO.Builder().schema(\"plain\").value(\"oldValue\").build());\n-        oldOne.getPlainAttrs().add(new AttrTO.Builder().schema(\"encrypted\").value(\"oldValue\").build());\n+        oldOne.getPlainAttrs().add(new AttrTO.Builder(\"plain\").value(\"oldValue\").build());\n+        oldOne.getPlainAttrs().add(new AttrTO.Builder(\"encrypted\").value(\"oldValue\").build());\n \n         AnyObjectTO newOne = new AnyObjectTO();\n         newOne.setName(\"name\");\n-        newOne.getPlainAttrs().add(new AttrTO.Builder().schema(\"plain\").value(\"newValue\").build());\n-        newOne.getPlainAttrs().add(new AttrTO.Builder().schema(\"encrypted\").value(\"oldValue\").build());\n+        newOne.getPlainAttrs().add(new AttrTO.Builder(\"plain\").value(\"newValue\").build());\n+        newOne.getPlainAttrs().add(new AttrTO.Builder(\"encrypted\").value(\"oldValue\").build());\n \n         AnyObjectUR diff = AnyOperations.diff(newOne, oldOne, true);\n         assertEquals(1, diff.getPlainAttrs().size());"},{"sha":"4e6109cecadf78820e6185ee8df3302395a70a8e","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JAXBTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -63,7 +63,7 @@ public void provisioningResult() throws JAXBException {\n         GroupTO group = new GroupTO();\n         group.setName(UUID.randomUUID().toString());\n         group.setRealm(SyncopeConstants.ROOT_REALM);\n-        group.getVirAttrs().add(new AttrTO.Builder().schema(\"rvirtualdata\").value(\"rvirtualvalue\").build());\n+        group.getVirAttrs().add(new AttrTO.Builder(\"rvirtualdata\").value(\"rvirtualvalue\").build());\n         group.getADynMembershipConds().put(\"USER\", \"username==a*\");\n \n         ProvisioningResult<GroupTO> original = new ProvisioningResult<>();"},{"sha":"fb9ac178fefa443082cce29f525ffa2a04403d6b","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -84,7 +84,7 @@ public void provisioningResult() throws IOException {\n         GroupTO group = new GroupTO();\n         group.setName(UUID.randomUUID().toString());\n         group.setRealm(SyncopeConstants.ROOT_REALM);\n-        group.getVirAttrs().add(new AttrTO.Builder().schema(\"rvirtualdata\").value(\"rvirtualvalue\").build());\n+        group.getVirAttrs().add(new AttrTO.Builder(\"rvirtualdata\").value(\"rvirtualvalue\").build());\n         group.getADynMembershipConds().put(\"USER\", \"username==a*\");\n \n         ProvisioningResult<GroupTO> original = new ProvisioningResult<>();\n@@ -100,7 +100,8 @@ public void provisioningResult() throws IOException {\n         StringWriter writer = new StringWriter();\n         mapper.writeValue(writer, original);\n \n-        ProvisioningResult<GroupTO> actual = mapper.readValue(writer.toString(), new TypeReference<ProvisioningResult<GroupTO>>() {\n+        ProvisioningResult<GroupTO> actual = mapper.readValue(writer.toString(),\n+                new TypeReference<ProvisioningResult<GroupTO>>() {\n         });\n         assertEquals(original, actual);\n     }"},{"sha":"ab36bdc6643e2373cc89944dfa090eb41dfc811c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -117,10 +117,10 @@ private ConnObjectTO getOnSyncope(final Any<?> any, final Provision provision, f\n \n         ConnObjectTO connObjectTO = ConnObjectUtils.getConnObjectTO(attrs.getRight());\n         if (attrs.getLeft() != null) {\n-            connObjectTO.getAttrs().add(new AttrTO.Builder().\n-                    schema(connObjectKey.getExtAttrName()).value(attrs.getLeft()).build());\n-            connObjectTO.getAttrs().add(new AttrTO.Builder().\n-                    schema(Uid.NAME).value(attrs.getLeft()).build());\n+            connObjectTO.getAttrs().add(new AttrTO.Builder(connObjectKey.getExtAttrName()).\n+                    value(attrs.getLeft()).build());\n+            connObjectTO.getAttrs().add(new AttrTO.Builder(Uid.NAME).\n+                    value(attrs.getLeft()).build());\n         }\n \n         return connObjectTO;"},{"sha":"febaffeebe961aaab8891b6e524bd8a76a7afe41","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -94,7 +94,7 @@ public Pair<String, List<PropagationStatus>> create(\n         WorkflowResult<String> created = gwfAdapter.create(groupCR);\n \n         // see ConnObjectUtils#getAnyTOFromConnObject for GroupOwnerSchema\n-        groupCR.getPlainAttrs().stream().filter(attr -> StringUtils.EMPTY.equals(attr.getSchema())).findFirst().\n+        groupCR.getPlainAttr(StringUtils.EMPTY).\n                 ifPresent(groupOwner -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().get(0)));\n \n         List<PropagationTaskInfo> tasks = propagationManager.getCreateTasks("},{"sha":"b246830e7ba0f3306aa1085fabfadcf1010f5981","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -802,7 +802,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                         anyTO.getPlainAttrs().add(attrTO);\n                     } else {\n                         MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {\n-                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();\n+                            MembershipTO newMemb = new MembershipTO.Builder(group.getKey()).build();\n                             groupableTO.getMemberships().add(newMemb);\n                             return newMemb;\n                         });\n@@ -818,7 +818,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                         anyTO.getDerAttrs().add(attrTO);\n                     } else {\n                         MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {\n-                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();\n+                            MembershipTO newMemb = new MembershipTO.Builder(group.getKey()).build();\n                             groupableTO.getMemberships().add(newMemb);\n                             return newMemb;\n                         });\n@@ -841,7 +841,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                         anyTO.getVirAttrs().add(attrTO);\n                     } else {\n                         MembershipTO membership = groupableTO.getMembership(group.getKey()).orElseGet(() -> {\n-                            MembershipTO newMemb = new MembershipTO.Builder().group(group.getKey()).build();\n+                            MembershipTO newMemb = new MembershipTO.Builder(group.getKey()).build();\n                             groupableTO.getMemberships().add(newMemb);\n                             return newMemb;\n                         });"},{"sha":"5612a49aabf53fb44205e292c63f7e35be7f77d6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -553,17 +553,16 @@ protected void fillTO(\n         anyTO.getAuxClasses().addAll(auxClasses.stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         plainAttrs.forEach(plainAttr -> {\n-            anyTO.getPlainAttrs().add(new AttrTO.Builder().\n-                    schema(plainAttr.getSchema().getKey()).\n+            anyTO.getPlainAttrs().add(new AttrTO.Builder(plainAttr.getSchema().getKey()).\n                     values(plainAttr.getValuesAsStrings()).build());\n         });\n \n         derAttrs.forEach((schema, value) -> {\n-            anyTO.getDerAttrs().add(new AttrTO.Builder().schema(schema.getKey()).value(value).build());\n+            anyTO.getDerAttrs().add(new AttrTO.Builder(schema.getKey()).value(value).build());\n         });\n \n         virAttrs.forEach((schema, values) -> {\n-            anyTO.getVirAttrs().add(new AttrTO.Builder().schema(schema.getKey()).values(values).build());\n+            anyTO.getVirAttrs().add(new AttrTO.Builder(schema.getKey()).values(values).build());\n         });\n \n         anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n@@ -581,27 +580,24 @@ protected MembershipTO getMembershipTO(\n             final Map<VirSchema, List<String>> virAttrs,\n             final Membership<? extends Any<?>> membership) {\n \n-        MembershipTO membershipTO = new MembershipTO.Builder().\n-                group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n+        MembershipTO membershipTO = new MembershipTO.Builder(membership.getRightEnd().getKey()).\n+                groupName(membership.getRightEnd().getName()).\n                 build();\n \n         plainAttrs.forEach(plainAttr -> {\n-            membershipTO.getPlainAttrs().add(new AttrTO.Builder().\n-                    schema(plainAttr.getSchema().getKey()).\n+            membershipTO.getPlainAttrs().add(new AttrTO.Builder(plainAttr.getSchema().getKey()).\n                     values(plainAttr.getValuesAsStrings()).\n                     build());\n         });\n \n         derAttrs.forEach((schema, value) -> {\n-            membershipTO.getDerAttrs().add(new AttrTO.Builder().\n-                    schema(schema.getKey()).\n+            membershipTO.getDerAttrs().add(new AttrTO.Builder(schema.getKey()).\n                     value(value).\n                     build());\n         });\n \n         virAttrs.forEach((schema, values) -> {\n-            membershipTO.getVirAttrs().add(new AttrTO.Builder().\n-                    schema(schema.getKey()).\n+            membershipTO.getVirAttrs().add(new AttrTO.Builder(schema.getKey()).\n                     values(values).\n                     build());\n         });"},{"sha":"9c5634f4cb451ed55de970a128003fbc123edcd4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -121,11 +121,9 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n             // dynamic memberships\n             anyObjectTO.getDynMemberships().addAll(\n-                    anyObjectDAO.findDynGroups(anyObject.getKey()).stream().map(group -> {\n-                        return new MembershipTO.Builder().\n-                                group(group.getKey(), group.getName()).\n-                                build();\n-                    }).collect(Collectors.toList()));\n+                    anyObjectDAO.findDynGroups(anyObject.getKey()).stream().\n+                            map(group -> new MembershipTO.Builder(group.getKey()).groupName(group.getName()).build()).\n+                            collect(Collectors.toList()));\n         }\n \n         return anyObjectTO;\n@@ -387,7 +385,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                                 newAttr.setSchema(schema);\n                                 anyObject.add(newAttr);\n \n-                                AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n+                                AttrPatch patch = new AttrPatch.Builder(attrTO).build();\n                                 processAttrPatch(\n                                         anyObject, patch, schema, newAttr, anyUtils,\n                                         resources, propByRes, invalidValues);"},{"sha":"c0db08fcc00f4092f4633045ec18b42ff82690e8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -53,8 +53,7 @@ public List<AttrTO> getConfTO() {\n \n     @Override\n     public AttrTO getAttrTO(final CPlainAttr attr) {\n-        return new AttrTO.Builder().\n-                schema(attr.getSchema().getKey()).\n+        return new AttrTO.Builder(attr.getSchema().getKey()).\n                 values(attr.getValuesAsStrings()).\n                 build();\n     }"},{"sha":"1bc5265654eac835680b13ea9392fe4395e1d484","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -460,7 +460,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                                 attr.setSchema(schema);\n                                 user.add(attr);\n \n-                                AttrPatch patch = new AttrPatch.Builder().attrTO(attrTO).build();\n+                                AttrPatch patch = new AttrPatch.Builder(attrTO).build();\n                                 processAttrPatch(\n                                         user, patch, schema, attr, anyUtils,\n                                         resources, propByRes, invalidValues);\n@@ -630,11 +630,9 @@ public UserTO getUserTO(final User user, final boolean details) {\n \n             // dynamic memberships\n             userTO.getDynMemberships().addAll(\n-                    userDAO.findDynGroups(user.getKey()).stream().map(group -> {\n-                        return new MembershipTO.Builder().\n-                                group(group.getKey(), group.getName()).\n-                                build();\n-                    }).collect(Collectors.toList()));\n+                    userDAO.findDynGroups(user.getKey()).stream().\n+                            map(group -> new MembershipTO.Builder(group.getKey()).groupName(group.getName()).build()).\n+                            collect(Collectors.toList()));\n         }\n \n         return userTO;"},{"sha":"7e044deced43e1ef97ad799b08b70759bdb27eb6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -74,10 +74,9 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                     groups.forEach(group -> {\n                         Set<String> before = membershipsBefore.get(user);\n                         if (before == null || !before.contains(group)) {\n-                            userUR.getMemberships().add(new MembershipUR.Builder().\n-                                            operation(PatchOperation.ADD_REPLACE).\n-                                            group(group).\n-                                            build());\n+                            userUR.getMemberships().add(new MembershipUR.Builder(group).\n+                                    operation(PatchOperation.ADD_REPLACE).\n+                                    build());\n                         }\n                     });\n                 });\n@@ -86,18 +85,17 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                     UserUR userUR = updateReqs.stream().\n                             filter(req -> user.equals(req.getKey())).findFirst().\n                             orElseGet(() -> {\n-                                UserUR req = new UserUR.Builder().key(user).build();\n+                                UserUR req = new UserUR.Builder(user).build();\n                                 updateReqs.add(req);\n                                 return req;\n                             });\n \n                     groups.forEach(group -> {\n                         Set<String> after = membershipsAfter.get(user);\n                         if (after == null || !after.contains(group)) {\n-                            userUR.getMemberships().add(new MembershipUR.Builder().\n-                                            operation(PatchOperation.DELETE).\n-                                            group(group).\n-                                            build());\n+                            userUR.getMemberships().add(new MembershipUR.Builder(group).\n+                                    operation(PatchOperation.DELETE).\n+                                    build());\n                         }\n                     });\n                 });"},{"sha":"494d8241bbc79c5249d71dc5936c8bd090cc643b","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MailTemplateTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMailTemplateTest.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -99,10 +99,10 @@ public void optin() throws IOException {\n         String username = \"test\" + UUID.randomUUID().toString();\n         UserTO user = new UserTO();\n         user.setUsername(username);\n-        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"firstname\").value(\"John\").build());\n-        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"surname\").value(\"Doe\").build());\n-        user.getPlainAttrs().add(new AttrTO.Builder().schema(\"email\").value(\"john.doe@syncope.apache.org\").build());\n-        user.getMemberships().add(new MembershipTO.Builder().group(UUID.randomUUID().toString(), \"a group\").build());\n+        user.getPlainAttrs().add(new AttrTO.Builder(\"firstname\").value(\"John\").build());\n+        user.getPlainAttrs().add(new AttrTO.Builder(\"surname\").value(\"Doe\").build());\n+        user.getPlainAttrs().add(new AttrTO.Builder(\"email\").value(\"john.doe@syncope.apache.org\").build());\n+        user.getMemberships().add(new MembershipTO.Builder(UUID.randomUUID().toString()).groupName(\"a group\").build());\n         ctx.put(\"user\", user);\n \n         String token = \"token \" + UUID.randomUUID().toString();"},{"sha":"19a4862d638bb4ae5233c8e01021961bdfdc8043","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -174,7 +174,7 @@ private void addUpdateOrReplaceAttr(\n                 break;\n \n             case PLAIN:\n-                updateReq.getPlainAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n+                updateReq.getPlainAttrs().add(new AttrPatch.Builder(attrTO).operation(operation).build());\n                 break;\n \n             case DERIVED:\n@@ -196,7 +196,7 @@ public void delete(final String key, final SchemaType schemaType, final String s\n         addUpdateOrReplaceAttr(\n                 getActualKey(getAnyDAO(), key),\n                 schemaType,\n-                new AttrTO.Builder().schema(schema).build(),\n+                new AttrTO.Builder(schema).build(),\n                 PatchOperation.DELETE);\n     }\n "},{"sha":"2b1f4cfcd6dd2d3d82ac705641064affc4b3a76a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -59,7 +59,7 @@ protected AbstractAnyLogic<AnyObjectTO, AnyObjectCR, AnyObjectUR> getAnyLogic()\n \n     @Override\n     protected AnyObjectUR newUpdateReq(final String key) {\n-        return new AnyObjectUR.Builder().key(key).build();\n+        return new AnyObjectUR.Builder(key).build();\n     }\n \n     @Override"},{"sha":"eedafbabe1a3142a565357fc8848f717a2d61469","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -55,7 +55,7 @@ protected AbstractAnyLogic<GroupTO, GroupCR, GroupUR> getAnyLogic() {\n \n     @Override\n     protected GroupUR newUpdateReq(final String key) {\n-        return new GroupUR.Builder().key(key).build();\n+        return new GroupUR.Builder(key).build();\n     }\n \n     @Override"},{"sha":"6daf5018ebd775f8fe4ce81b500c46fba75cf574","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -54,7 +54,7 @@ protected AbstractAnyLogic<UserTO, UserCR, UserUR> getAnyLogic() {\n \n     @Override\n     protected UserUR newUpdateReq(final String key) {\n-        return new UserUR.Builder().key(key).build();\n+        return new UserUR.Builder(key).build();\n     }\n \n     @Override"},{"sha":"74b11f74876f2f5dab6d90d5c46db07854839f39","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -42,13 +42,13 @@ public void process(final Exchange exchange) throws Exception {\n                     (Pair<WorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n \n             // propagate suspension if and only if it is required by policy\n-            if (updated != null && updated.getValue()) {\n-                UserUR userUR = new UserUR.Builder().key(updated.getKey().getResult()).build();\n+            if (updated != null && updated.getRight()) {\n+                UserUR userUR = new UserUR.Builder(updated.getLeft().getResult()).build();\n \n                 List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(\n                         new WorkflowResult<>(\n                                 Pair.of(userUR, Boolean.FALSE),\n-                                updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n+                                updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n                 getPropagationTaskExecutor().execute(taskInfos, false);\n             }\n         }"},{"sha":"55ded95f10c14e831f6c0630f492f31602a80086","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -51,7 +51,7 @@ protected void doExecute(final DelegateExecution execution) {\n \n         user.removeToken();\n \n-        UserUR req = new UserUR.Builder().key(user.getKey()).\n+        UserUR req = new UserUR.Builder(user.getKey()).\n                 password(new PasswordPatch.Builder().\n                         onSyncope(true).\n                         resources(userDAO.findAllResourceKeys(user.getKey()))."},{"sha":"77decd65c4d19fa55ebbbb4e21c570788f6bfd38","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -69,7 +69,7 @@ public List<WorkflowTask> getAvailableTasks(final String key) {\n     public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput) {\n         WorkflowResult<String> updated = wfTaskManager.executeNextTask(workflowTaskExecInput);\n \n-        UserUR userUR = new UserUR.Builder().key(updated.getResult()).build();\n+        UserUR userUR = new UserUR.Builder(updated.getResult()).build();\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n                 Pair.<UserUR, Boolean>of(userUR, null),"},{"sha":"d7935828360ec41e265cc095ce1543806f3a7324","filename":"ext/oidcclient/agent/src/main/java/org/apache/syncope/ext/oidcclient/agent/CodeConsumer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Foidcclient%2Fagent%2FCodeConsumer.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -66,8 +66,7 @@ protected void doGet(final HttpServletRequest request, final HttpServletResponse\n                         authorizationCode,\n                         request.getSession().getAttribute(OIDCConstants.OP).toString());\n                 if (responseTO.isSelfReg()) {\n-                    responseTO.getAttrs().add(\n-                            new AttrTO.Builder().schema(\"username\").values(responseTO.getUsername()).build());\n+                    responseTO.getAttrs().add(new AttrTO.Builder(\"username\").values(responseTO.getUsername()).build());\n                     request.getSession(true).\n                             setAttribute(Constants.OIDCCLIENT_USER_ATTRS, MAPPER.writeValueAsString(responseTO.\n                                     getAttrs()));"},{"sha":"f30fb803577e9a52b48ea591458147331bf22c23","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -225,7 +225,7 @@ public void fill(final OIDCProvider op, final OIDCLoginResponseTO responseTO, fi\n                         if (attr.isPresent()) {\n                             attr.get().getValues().clear();\n                         } else {\n-                            attr = Optional.of(new AttrTO.Builder().schema(intAttrName.getSchemaName()).build());\n+                            attr = Optional.of(new AttrTO.Builder(intAttrName.getSchemaName()).build());\n                             userTO.getPlainAttrs().add(attr.get());\n                         }\n                         attr.get().getValues().addAll(values);"},{"sha":"78d071c64a3a4fa1cebc7dda33e4ce8540859bf8","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -56,8 +56,7 @@ protected void doPost(final HttpServletRequest request, final HttpServletRespons\n                             request.getInputStream()));\n \n             if (responseTO.isSelfReg()) {\n-                responseTO.getAttrs().add(\n-                        new AttrTO.Builder().schema(\"username\").values(responseTO.getUsername()).build());\n+                responseTO.getAttrs().add(new AttrTO.Builder(\"username\").values(responseTO.getUsername()).build());\n                 request.getSession(true).\n                         setAttribute(Constants.SAML2SP_USER_ATTRS, MAPPER.writeValueAsString(responseTO.getAttrs()));\n "},{"sha":"ff270837fa441fd28de8ad3611fc85ccca1635c6","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -239,7 +239,7 @@ public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, fin\n                         if (attr.isPresent()) {\n                             attr.get().getValues().clear();\n                         } else {\n-                            attr = Optional.of(new AttrTO.Builder().schema(intAttrName.getSchemaName()).build());\n+                            attr = Optional.of(new AttrTO.Builder(intAttrName.getSchemaName()).build());\n                             userTO.getPlainAttrs().add(attr.get());\n                         }\n                         attr.get().getValues().addAll(values);"},{"sha":"cc67e7251bad426d17fabc5fb18e27bf8824da7a","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":8,"deletions":14,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -162,7 +162,7 @@ public SCIMUser toSCIMUser(\n         attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getPlainAttrs()));\n         attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getDerAttrs()));\n         attrs.putAll(EntityTOUtils.buildAttrMap(userTO.getVirAttrs()));\n-        attrs.put(\"username\", new AttrTO.Builder().schema(\"username\").value(userTO.getUsername()).build());\n+        attrs.put(\"username\", new AttrTO.Builder(\"username\").value(userTO.getUsername()).build());\n \n         if (conf.getUserConf() != null) {\n             if (output(attributes, excludedAttributes, \"name\") && conf.getUserConf().getName() != null) {\n@@ -433,7 +433,7 @@ private <E extends Enum<?>> void fill(\n                 confs.stream().\n                         filter(object -> value.getType().equals(object.getType().name())).findFirst().\n                         ifPresent(conf -> attrs.add(\n-                        new AttrTO.Builder().schema(conf.getValue()).value(value.getValue()).build()));\n+                        new AttrTO.Builder(conf.getValue()).value(value.getValue()).build()));\n             }\n         });\n     }\n@@ -597,7 +597,7 @@ public UserTO toUserTO(final SCIMUser user) {\n         }\n \n         userTO.getMemberships().addAll(user.getGroups().stream().\n-                map(group -> new MembershipTO.Builder().group(group.getValue()).build()).\n+                map(group -> new MembershipTO.Builder(group.getValue()).build()).\n                 collect(Collectors.toList()));\n \n         userTO.getRoles().addAll(user.getRoles().stream().\n@@ -609,15 +609,9 @@ public UserTO toUserTO(final SCIMUser user) {\n \n     public UserCR toUserCR(final SCIMUser user) {\n         UserTO userTO = toUserTO(user);\n-\n-        return new UserCR.Builder().\n-                username(userTO.getUsername()).\n-                password(userTO.getPassword()).\n-                realm(userTO.getRealm()).\n-                plainAttrs(userTO.getPlainAttrs()).\n-                memberships(userTO.getMemberships()).\n-                roles(userTO.getRoles()).\n-                build();\n+        UserCR userCR = new UserCR();\n+        EntityTOUtils.toAnyCR(userTO, userCR);\n+        return userCR;\n     }\n \n     private void setAttribute(final UserTO userTO, final String schema, final String value) {\n@@ -627,7 +621,7 @@ private void setAttribute(final UserTO userTO, final String schema, final String\n                 break;\n \n             default:\n-                userTO.getPlainAttrs().add(new AttrTO.Builder().schema(schema).value(value).build());\n+                userTO.getPlainAttrs().add(new AttrTO.Builder(schema).value(value).build());\n         }\n     }\n \n@@ -695,6 +689,6 @@ public GroupCR toGroupCR(final SCIMGroup group) {\n             throw new BadRequestException(ErrorType.invalidValue);\n         }\n \n-        return new GroupCR.Builder().realm(SyncopeConstants.ROOT_REALM).name(group.getDisplayName()).build();\n+        return new GroupCR.Builder(SyncopeConstants.ROOT_REALM, group.getDisplayName()).build();\n     }\n }"},{"sha":"08ddf2185dcee25c99b0d20f6f72b0ab80e987d4","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SCIMConfManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMConfManager.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -89,8 +89,7 @@ public void set(final SCIMConf conf) {\n         conf.setGeneralConf(new SCIMGeneralConf());\n         conf.getGeneralConf().setLastChangeDate(new Date());\n \n-        configurationLogic.set(new AttrTO.Builder().\n-                schema(SCIMConf.KEY).\n+        configurationLogic.set(new AttrTO.Builder(SCIMConf.KEY).\n                 value(Base64.getEncoder().encodeToString(POJOHelper.serialize(conf).getBytes())).\n                 build());\n     }"},{"sha":"cd7ceb369cd56439568b4d33a92d3c47dbdbfdb7","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -57,10 +57,9 @@ public Response create(final SCIMGroup group) {\n \n         // then assign members\n         group.getMembers().forEach(member -> {\n-            UserUR req = new UserUR.Builder().\n-                    key(member.getValue()).\n-                    membership(new MembershipUR.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build()).\n+            UserUR req = new UserUR.Builder(member.getValue()).\n+                    membership(new MembershipUR.Builder(result.getEntity().getKey()).\n+                            operation(PatchOperation.ADD_REPLACE).build()).\n                     build();\n             try {\n                 userLogic().update(req, false);\n@@ -136,10 +135,9 @@ public Response replace(final String id, final SCIMGroup group) {\n             afterMembers.add(member.getValue());\n \n             if (!beforeMembers.contains(member.getValue())) {\n-                UserUR req = new UserUR.Builder().\n-                        key(member.getValue()).\n-                        membership(new MembershipUR.Builder().\n-                                operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build()).\n+                UserUR req = new UserUR.Builder(member.getValue()).\n+                        membership(new MembershipUR.Builder(result.getEntity().getKey()).\n+                                operation(PatchOperation.ADD_REPLACE).build()).\n                         build();\n                 try {\n                     userLogic().update(req, false);\n@@ -151,10 +149,9 @@ public Response replace(final String id, final SCIMGroup group) {\n         });\n         // remove unconfirmed members\n         beforeMembers.stream().filter(member -> !afterMembers.contains(member)).forEach(user -> {\n-            UserUR req = new UserUR.Builder().\n-                    key(user).\n-                    membership(new MembershipUR.Builder().\n-                            operation(PatchOperation.DELETE).group(result.getEntity().getKey()).build()).\n+            UserUR req = new UserUR.Builder(user).\n+                    membership(new MembershipUR.Builder(result.getEntity().getKey()).\n+                            operation(PatchOperation.DELETE).build()).\n                     build();\n             try {\n                 userLogic().update(req, false);"},{"sha":"f7dc23381e4071f0af036d573679e813264a2bc1","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -50,8 +50,7 @@ protected void doExecute(final DelegateExecution execution) {\n \n             UserUR userUR = new UserUR();\n             userUR.setKey(user.getKey());\n-            userUR.getMemberships().add(new MembershipUR.Builder().\n-                    group(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").build());\n+            userUR.getMemberships().add(new MembershipUR.Builder(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").build());\n \n             PropagationByResource propByRes = dataBinder.update(user, userUR);\n "},{"sha":"20bfe199de4a79a2a2661b7ccc7306159f55a0de","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -53,9 +53,8 @@ protected void doExecute(final DelegateExecution execution) {\n \n             UserUR userUR = new UserUR();\n             userUR.setKey(user.getKey());\n-            userUR.getRelationships().add(new RelationshipUR.Builder().\n-                    relationshipTO(new RelationshipTO.Builder().\n-                            otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n+            userUR.getRelationships().add(new RelationshipUR.Builder(new RelationshipTO.Builder().\n+                    otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n                     build());\n \n             PropagationByResource propByRes = dataBinder.update(user, userUR);"},{"sha":"f96f59c6bbda23b10b7cd39948d87d2d7b4aba5d","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -79,9 +79,8 @@ public void beforeUpdate(\n             }\n         }\n         if (fullnamePatch == null) {\n-            fullnamePatch = new AttrPatch.Builder().\n+            fullnamePatch = new AttrPatch.Builder(new AttrTO.Builder(\"fullname\").build()).\n                     operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(new AttrTO.Builder().schema(\"fullname\").build()).\n                     build();\n         }\n "},{"sha":"bd8a0279079ef3ebd25e0f5f4e3e6b1c6865ed52","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -354,11 +354,11 @@ protected static String getUUIDString() {\n     }\n \n     protected static AttrTO attrTO(final String schema, final String value) {\n-        return new AttrTO.Builder().schema(schema).value(value).build();\n+        return new AttrTO.Builder(schema).value(value).build();\n     }\n \n     protected static AttrPatch attrAddReplacePatch(final String schema, final String value) {\n-        return new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(schema, value)).build();\n+        return new AttrPatch.Builder(attrTO(schema, value)).operation(PatchOperation.ADD_REPLACE).build();\n     }\n \n     public static <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n@@ -439,8 +439,7 @@ protected Pair<String, String> createNotificationTask(\n \n         // 2. create user\n         UserCR req = UserITCase.getUniqueSample(\"notificationtest@syncope.apache.org\");\n-        req.getMemberships().add(\n-                new MembershipTO.Builder().group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n+        req.getMemberships().add(new MembershipTO.Builder(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n         UserTO userTO = createUser(req).getEntity();\n         assertNotNull(userTO);"},{"sha":"472a3bd5149fa1a8d34c0b57f47f0f7077f4a562","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -48,9 +48,7 @@\n public class AnyObjectITCase extends AbstractITCase {\n \n     public static AnyObjectCR getSample(final String location) {\n-        return new AnyObjectCR.Builder(\"PRINTER\").\n-                name(location + getUUIDString()).\n-                realm(SyncopeConstants.ROOT_REALM).\n+        return new AnyObjectCR.Builder(SyncopeConstants.ROOT_REALM, \"PRINTER\", location + getUUIDString()).\n                 plainAttr(attrTO(\"location\", location + getUUIDString())).\n                 resource(RESOURCE_NAME_DBSCRIPTED).\n                 build();\n@@ -77,8 +75,7 @@ public void createInvalidMembership() {\n         // 1. create anyObject in realm /odd and attempt to assign group 15, from realm /even => exception\n         AnyObjectCR anyObjectCR = getSample(\"createInvalidMembership\");\n         anyObjectCR.setRealm(\"/odd\");\n-        anyObjectCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build());\n+        anyObjectCR.getMemberships().add(new MembershipTO.Builder(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build());\n \n         try {\n             createAnyObject(anyObjectCR);"},{"sha":"749f453ea1cfb02dbe45adf0a206a09cd4e755cb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -481,8 +481,7 @@ public void issueSYNCOPE434() {\n         // 1. create user with group 'groupForWorkflowApproval' \n         // (users with group groupForWorkflowApproval are defined in workflow as subject to approval)\n         UserCR userCR = UserITCase.getUniqueSample(\"createWithReject@syncope.apache.org\");\n-        userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);"},{"sha":"77f6df04d709a0c95449ade8fbf9fbec6bd1a87b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConfigurationITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConfigurationITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -53,7 +53,7 @@ public void create() {\n         testKey.setType(AttrSchemaType.String);\n         createSchema(SchemaType.PLAIN, testKey);\n \n-        AttrTO conf = new AttrTO.Builder().schema(testKey.getKey()).value(\"testValue\").build();\n+        AttrTO conf = new AttrTO.Builder(testKey.getKey()).value(\"testValue\").build();\n \n         configurationService.set(conf);\n \n@@ -69,7 +69,7 @@ public void createRequired() {\n         testKey.setMandatoryCondition(\"true\");\n         createSchema(SchemaType.PLAIN, testKey);\n \n-        AttrTO conf = new AttrTO.Builder().schema(testKey.getKey()).build();\n+        AttrTO conf = new AttrTO.Builder(testKey.getKey()).build();\n         try {\n             configurationService.set(conf);\n             fail(\"This should not happen\");"},{"sha":"2c0cc5e3f4a86805417d861661e3f1452db67abf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -197,7 +197,7 @@ public void delegatedAdmin() {\n             // GROUP_UPDATE\n             GroupUR groupUR = new GroupUR();\n             groupUR.setKey(groupKey);\n-            groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"icon\", \"modified\")).build());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"icon\", \"modified\")).build());\n             group = delegatedGroupService.update(groupUR).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n             }).getEntity();\n             assertNotNull(group);"},{"sha":"58a55f87ae011c07e92a326c3c687ef811989ff4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -99,10 +99,7 @@\n public class GroupITCase extends AbstractITCase {\n \n     public static GroupCR getBasicSample(final String name) {\n-        return new GroupCR.Builder().\n-                realm(SyncopeConstants.ROOT_REALM).\n-                name(name + getUUIDString()).\n-                build();\n+        return new GroupCR.Builder(SyncopeConstants.ROOT_REALM, name + getUUIDString()).build();\n     }\n \n     public static GroupCR getSample(final String name) {\n@@ -238,9 +235,9 @@ public void update() {\n \n         groupTO.getPlainAttr(\"show\").get().getValues().clear();\n \n-        groupUR = new GroupUR.Builder().key(groupTO.getKey()).\n-                plainAttr(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n-                        attrTO(new AttrTO.Builder().schema(\"show\").build()).build()).build();\n+        groupUR = new GroupUR.Builder(groupTO.getKey()).\n+                plainAttr(new AttrPatch.Builder(new AttrTO.Builder(\"show\").build()).\n+                        operation(PatchOperation.DELETE).build()).build();\n \n         groupTO = updateGroup(groupUR).getEntity();\n \n@@ -257,11 +254,11 @@ public void patch() {\n \n         GroupTO created = createGroup(createReq).getEntity();\n \n-        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"icon\").build());\n-        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"show\").build());\n-        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_sx\").value(\"sx\").build());\n-        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"rderived_dx\").value(\"dx\").build());\n-        created.getPlainAttrs().add(new AttrTO.Builder().schema(\"title\").value(\"mr\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder(\"icon\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder(\"show\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder(\"rderived_sx\").value(\"sx\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder(\"rderived_dx\").value(\"dx\").build());\n+        created.getPlainAttrs().add(new AttrTO.Builder(\"title\").value(\"mr\").build());\n \n         GroupTO original = groupService.read(created.getKey());\n \n@@ -696,9 +693,8 @@ public void aDynMembership() {\n         // verify that the condition is dynamically applied\n         AnyObjectUR anyObjectUR = new AnyObjectUR();\n         anyObjectUR.setKey(newAny.getKey());\n-        anyObjectUR.getPlainAttrs().add(new AttrPatch.Builder().\n+        anyObjectUR.getPlainAttrs().add(new AttrPatch.Builder(new AttrTO.Builder(\"location\").build()).\n                 operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(\"location\").build()).\n                 build());\n         newAny = updateAnyObject(anyObjectUR).getEntity();\n         assertFalse(newAny.getPlainAttr(\"location\").isPresent());\n@@ -725,7 +721,7 @@ public void aDynMembershipCount() {\n         printerCR.setRealm(SyncopeConstants.ROOT_REALM);\n         printerCR.setName(\"Printer_\" + getUUIDString());\n         printerCR.setType(\"PRINTER\");\n-        printerCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"location\").value(\"home\").build());\n+        printerCR.getPlainAttrs().add(new AttrTO.Builder(\"location\").value(\"home\").build());\n         AnyObjectTO printer = createAnyObject(printerCR).getEntity();\n \n         group = groupService.read(group.getKey());\n@@ -746,7 +742,7 @@ public void aStaticMembershipCount() {\n         printerCR.setRealm(SyncopeConstants.ROOT_REALM);\n         printerCR.setName(\"Printer_\" + getUUIDString());\n         printerCR.setType(\"PRINTER\");\n-        printerCR.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n+        printerCR.getMemberships().add(new MembershipTO.Builder(group.getKey()).build());\n         AnyObjectTO printer = createAnyObject(printerCR).getEntity();\n \n         group = groupService.read(group.getKey());\n@@ -787,8 +783,8 @@ public void capabilitiesOverride() {\n             // 2. update succeeds\n             GroupUR groupUR = new GroupUR();\n             groupUR.setKey(group.getKey());\n-            groupUR.getPlainAttrs().add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"second\")).build());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"title\", \"second\")).\n+                    operation(PatchOperation.ADD_REPLACE).build());\n \n             result = updateGroup(groupUR);\n             assertNotNull(result);\n@@ -809,8 +805,8 @@ public void capabilitiesOverride() {\n             // 4. update succeeds again\n             groupUR = new GroupUR();\n             groupUR.setKey(group.getKey());\n-            groupUR.getPlainAttrs().add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"third\")).build());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"title\", \"third\")).\n+                    operation(PatchOperation.ADD_REPLACE).build());\n \n             result = updateGroup(groupUR);\n             assertNotNull(result);\n@@ -831,8 +827,8 @@ public void capabilitiesOverride() {\n             // 6. update now fails\n             groupUR = new GroupUR();\n             groupUR.setKey(group.getKey());\n-            groupUR.getPlainAttrs().add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"fourth\")).build());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"title\", \"fourth\")).\n+                    operation(PatchOperation.ADD_REPLACE).build());\n \n             result = updateGroup(groupUR);\n             assertNotNull(result);\n@@ -886,7 +882,7 @@ public void provisionMembers() throws InterruptedException {\n \n         // 2. create user with such group assigned\n         UserCR userCR = UserITCase.getUniqueSample(\"forProvision@syncope.apache.org\");\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(groupTO.getKey()).build());\n         UserTO userTO = createUser(userCR).getEntity();\n \n         // 3. modify the group by assiging the LDAP resource\n@@ -1103,7 +1099,7 @@ public void issueSYNCOPE717() {\n         // 5. modify group with new double value\n         GroupUR groupUR = new GroupUR();\n         groupUR.setKey(groupTO.getKey());\n-        groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.257\")).build());\n+        groupUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(doubleSchemaName, \"11.257\")).build());\n \n         groupTO = updateGroup(groupUR).getEntity();\n         assertNotNull(groupTO);\n@@ -1116,7 +1112,7 @@ public void issueSYNCOPE717() {\n         // 7. modify group with new double value, verify that no pattern is applied\n         groupUR = new GroupUR();\n         groupUR.setKey(groupTO.getKey());\n-        groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.23\")).build());\n+        groupUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(doubleSchemaName, \"11.23\")).build());\n \n         groupTO = updateGroup(groupUR).getEntity();\n         assertNotNull(groupTO);"},{"sha":"faaa15c434b848abe840a1d317d31c7f363c1d0a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -69,16 +69,16 @@ public class MembershipITCase extends AbstractITCase {\n     public void misc() {\n         UserCR userCR = UserITCase.getUniqueSample(\"memb@apache.org\");\n         userCR.setRealm(\"/even/two\");\n-        userCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+        userCR.getPlainAttrs().add(new AttrTO.Builder(\"aLong\").value(\"1976\").build());\n         userCR.getPlainAttrs().removeIf(attr -> \"ctype\".equals(attr.getSchema()));\n \n         // the group 034740a9-fa10-453b-af37-dc7897e98fb1 has USER type extensions for 'csv' and 'other' \n         // any type classes\n-        MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n-        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build());\n+        MembershipTO membership = new MembershipTO.Builder(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n+        membership.getPlainAttrs().add(new AttrTO.Builder(\"aLong\").value(\"1977\").build());\n \n         // 'fullname' is in 'minimal user', so it is not allowed for this membership\n-        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"fullname\").value(\"discarded\").build());\n+        membership.getPlainAttrs().add(new AttrTO.Builder(\"fullname\").value(\"discarded\").build());\n \n         userCR.getMemberships().add(membership);\n \n@@ -116,14 +116,14 @@ public void misc() {\n             UserUR userUR = new UserUR();\n             userUR.setKey(userTO.getKey());\n \n-            userUR.getPlainAttrs().add(new AttrPatch.Builder().\n-                    attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build()).build());\n+            userUR.getPlainAttrs().\n+                    add(new AttrPatch.Builder(new AttrTO.Builder(\"aLong\").value(\"1977\").build()).build());\n \n-            MembershipUR membershipPatch = new MembershipUR.Builder().group(membership.getGroupKey()).build();\n+            MembershipUR membershipPatch = new MembershipUR.Builder(membership.getGroupKey()).build();\n             membershipPatch.getPlainAttrs().add(\n-                    new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+                    new AttrTO.Builder(\"aLong\").value(\"1976\").build());\n             membershipPatch.getPlainAttrs().add(\n-                    new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build());\n+                    new AttrTO.Builder(\"ctype\").value(\"membership type\").build());\n             userUR.getMemberships().add(membershipPatch);\n \n             userTO = updateUser(userUR).getEntity();\n@@ -147,7 +147,7 @@ public void misc() {\n             userUR = new UserUR();\n             userUR.setKey(userTO.getKey());\n \n-            membershipPatch = new MembershipUR.Builder().group(membership.getGroupKey()).\n+            membershipPatch = new MembershipUR.Builder(membership.getGroupKey()).\n                     operation(PatchOperation.DELETE).build();\n             userUR.getMemberships().add(membershipPatch);\n \n@@ -165,10 +165,10 @@ public void misc() {\n     public void deleteUserWithMembership() {\n         UserCR userCR = UserITCase.getUniqueSample(\"memb@apache.org\");\n         userCR.setRealm(\"/even/two\");\n-        userCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n+        userCR.getPlainAttrs().add(new AttrTO.Builder(\"aLong\").value(\"1976\").build());\n \n-        MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n-        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build());\n+        MembershipTO membership = new MembershipTO.Builder(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n+        membership.getPlainAttrs().add(new AttrTO.Builder(\"aLong\").value(\"1977\").build());\n         userCR.getMemberships().add(membership);\n \n         UserTO user = createUser(userCR).getEntity();\n@@ -193,8 +193,8 @@ public void onGroupDelete() {\n         // pre: create user with membership to such group\n         UserCR userCR = UserITCase.getUniqueSample(\"typeExt@apache.org\");\n \n-        MembershipTO membership = new MembershipTO.Builder().group(groupTO.getKey()).build();\n-        membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"1454\").build());\n+        MembershipTO membership = new MembershipTO.Builder(groupTO.getKey()).build();\n+        membership.getPlainAttrs().add(new AttrTO.Builder(\"aLong\").value(\"1454\").build());\n         userCR.getMemberships().add(membership);\n \n         UserTO user = createUser(userCR).getEntity();\n@@ -248,8 +248,8 @@ public void pull() {\n             userCR.getResources().clear();\n             userCR.getResources().add(newResource.getKey());\n \n-            MembershipTO membership = new MembershipTO.Builder().group(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n-            membership.getPlainAttrs().add(new AttrTO.Builder().schema(\"aLong\").value(\"5432\").build());\n+            MembershipTO membership = new MembershipTO.Builder(\"034740a9-fa10-453b-af37-dc7897e98fb1\").build();\n+            membership.getPlainAttrs().add(new AttrTO.Builder(\"aLong\").value(\"5432\").build());\n             userCR.getMemberships().add(membership);\n \n             user = createUser(userCR).getEntity();"},{"sha":"926730b13b52f12c10098109596930495166985d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -187,10 +187,10 @@ public void binaryValidation() throws IOException {\n         UserUR userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n         // validation OK - application/pdf -> application/pdf\n-        userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                attrTO(attrTO(\"BinaryPDF\",\n-                        Base64.getEncoder().encodeToString(\n-                                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.pdf\"))))).\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"BinaryPDF\",\n+                Base64.getEncoder().encodeToString(\n+                        IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.pdf\"))))).\n+                operation(PatchOperation.ADD_REPLACE).\n                 build());\n \n         updateUser(userUR);\n@@ -200,10 +200,10 @@ public void binaryValidation() throws IOException {\n         userUR.setKey(userTO.getKey());\n         // validation KO - text/html -> application/pdf\n         try {\n-            userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(attrTO(\"BinaryPDF\",\n-                            Base64.getEncoder().encodeToString(\n-                                    IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.html\"))))).\n+            userUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"BinaryPDF\",\n+                    Base64.getEncoder().encodeToString(\n+                            IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.html\"))))).\n+                    operation(PatchOperation.ADD_REPLACE).\n                     build());\n \n             updateUser(userUR);\n@@ -215,10 +215,10 @@ public void binaryValidation() throws IOException {\n         userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n         // validation ok - application/json -> application/json\n-        userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                attrTO(attrTO(\"BinaryJSON\",\n-                        Base64.getEncoder().encodeToString(\n-                                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.json\"))))).\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"BinaryJSON\",\n+                Base64.getEncoder().encodeToString(\n+                        IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.json\"))))).\n+                operation(PatchOperation.ADD_REPLACE).\n                 build());\n \n         updateUser(userUR);\n@@ -227,10 +227,10 @@ public void binaryValidation() throws IOException {\n         userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n         // no validation - application/xml -> application/json\n-        userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                attrTO(attrTO(\"BinaryJSON2\",\n-                        Base64.getEncoder().encodeToString(\n-                                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.xml\"))))).\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"BinaryJSON2\",\n+                Base64.getEncoder().encodeToString(\n+                        IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.xml\"))))).\n+                operation(PatchOperation.ADD_REPLACE).\n                 build());\n \n         updateUser(userUR);\n@@ -351,8 +351,8 @@ public void issue259() {\n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n-        UserUR req = new UserUR.Builder().key(userTO.getKey()).\n-                membership(new MembershipUR.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build()).build();\n+        UserUR req = new UserUR.Builder(userTO.getKey()).\n+                membership(new MembershipUR.Builder(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build()).build();\n \n         UserTO newUserTO = updateUser(req).getEntity();\n         assertNotNull(newUserTO);"},{"sha":"5ab0e85b8a0b5368d77a9bb2144358b59bc0a61d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -142,8 +142,7 @@ public void propagationJEXLTransformer() {\n \n             // 1. create printer on external resource\n             AnyObjectCR anyObjectCR = AnyObjectITCase.getSample(\"propagationJEXLTransformer\");\n-            String originalLocation = anyObjectCR.getPlainAttrs().stream().\n-                    filter(attr -> \"location\".equals(attr.getSchema())).findFirst().get().getValues().get(0);\n+            String originalLocation = anyObjectCR.getPlainAttr(\"location\").get().getValues().get(0);\n             assertFalse(originalLocation.endsWith(suffix));\n \n             AnyObjectTO anyObjectTO = createAnyObject(anyObjectCR).getEntity();\n@@ -258,9 +257,9 @@ public void issueSYNCOPE1288() {\n         for (int i = 0; i < 9; i++) {\n             UserUR userUR = new UserUR();\n             userUR.setKey(userTO.getKey());\n-            userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(new AttrTO.Builder().schema(\"userId\").value(\n-                            \"test\" + getUUIDString() + i + \"@test.com\").build()).\n+            userUR.getPlainAttrs().add(new AttrPatch.Builder(new AttrTO.Builder(\"userId\").value(\n+                    \"test\" + getUUIDString() + i + \"@test.com\").build()).\n+                    operation(PatchOperation.ADD_REPLACE).\n                     build());\n \n             userService.update(userUR);"},{"sha":"57abc8eacb4c86251b25cd895f25193872921b18","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -164,8 +164,7 @@ public void create() {\n         UserTO userTemplate = new UserTO();\n         userTemplate.getResources().add(RESOURCE_NAME_WS2);\n \n-        userTemplate.getMemberships().add(\n-                new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userTemplate.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n         task.getTemplates().put(AnyTypeKind.USER.name(), userTemplate);\n \n         GroupTO groupTemplate = new GroupTO();\n@@ -778,9 +777,8 @@ public void remediation() {\n             AnyCR userCR = remediation.get().getAnyCRPayload();\n             userCR.getResources().clear();\n \n-            String email = userCR.getPlainAttrs().stream().\n-                    filter(attr -> \"email\".equals(attr.getSchema())).findFirst().get().getValues().get(0);\n-            userCR.getPlainAttrs().add(new AttrTO.Builder().schema(\"userId\").value(email).build());\n+            String email = userCR.getPlainAttr(\"email\").get().getValues().get(0);\n+            userCR.getPlainAttrs().add(new AttrTO.Builder(\"userId\").value(email).build());\n \n             remediationService.remedy(remediation.get().getKey(), userCR);\n \n@@ -821,8 +819,7 @@ public void issueSYNCOPE68() {\n         userCR.getResources().add(RESOURCE_NAME_NOPROPAGATION2);\n         userCR.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n \n-        userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n@@ -837,8 +834,7 @@ public void issueSYNCOPE68() {\n             //-----------------------------\n             UserTO template = new UserTO();\n \n-            template.getMemberships().add(\n-                    new MembershipTO.Builder().group(\"b8d38784-57e7-4595-859a-076222644b55\").build());\n+            template.getMemberships().add(new MembershipTO.Builder(\"b8d38784-57e7-4595-859a-076222644b55\").build());\n \n             template.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n             //-----------------------------\n@@ -1233,7 +1229,7 @@ public void issueSYNCOPE1062() {\n \n             UserTO template = new UserTO();\n             template.getAuxClasses().add(\"minimal group\");\n-            template.getMemberships().add(new MembershipTO.Builder().group(propagationGroup.getKey()).build());\n+            template.getMemberships().add(new MembershipTO.Builder(propagationGroup.getKey()).build());\n             template.getPlainAttrs().add(attrTO(\"firstname\", \"'fixed'\"));\n             pullTask.getTemplates().put(AnyTypeKind.USER.name(), template);\n "},{"sha":"42951d2cd2bdb90e3475906f851a20c86b9326c0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -480,18 +480,14 @@ public void issueSYNCOPE980() {\n \n         String serviceKey = null;\n         try {\n-            AnyObjectCR anyObjectCR = new AnyObjectCR();\n-            anyObjectCR.setName(\"one\");\n-            anyObjectCR.setRealm(SyncopeConstants.ROOT_REALM);\n-            anyObjectCR.setType(service.getKey());\n-            anyObjectCR.getMemberships().add(\n-                    new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n+            AnyObjectCR anyObjectCR = new AnyObjectCR.Builder(SyncopeConstants.ROOT_REALM, service.getKey(), \"one\").\n+                    membership(new MembershipTO.Builder(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build()).\n+                    build();\n             serviceKey = createAnyObject(anyObjectCR).getEntity().getKey();\n \n-            AnyObjectUR anyObjectUR = new AnyObjectUR();\n-            anyObjectUR.setKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n-            anyObjectUR.getMemberships().add(new MembershipUR.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").\n-                    build());\n+            AnyObjectUR anyObjectUR = new AnyObjectUR.Builder(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").\n+                    membership(new MembershipUR.Builder(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build()).\n+                    build();\n             updateAnyObject(anyObjectUR);\n \n             PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().fiql(\n@@ -522,7 +518,7 @@ public void issueSYNCOPE983() {\n     public void issueSYNCOPE1223() {\n         UserUR req = new UserUR();\n         req.setKey(\"vivaldi\");\n-        req.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"ou=sample,o=isp\")).build());\n+        req.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"ctype\", \"ou=sample,o=isp\")).build());\n         userService.update(req);\n \n         try {\n@@ -533,7 +529,7 @@ public void issueSYNCOPE1223() {\n             assertEquals(\"vivaldi\", users.getResult().get(0).getUsername());\n         } finally {\n             req.getPlainAttrs().clear();\n-            req.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"F\")).build());\n+            req.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"ctype\", \"F\")).build());\n             userService.update(req);\n         }\n     }"},{"sha":"fa177d36d07985370b68b475725ad7afa7b300e4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":32,"deletions":45,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -48,17 +48,17 @@\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n-import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -73,11 +73,11 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.StatusRType;\n@@ -90,10 +90,10 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.fit.core.reference.TestAccountRuleConf;\n-import org.apache.syncope.fit.core.reference.TestPasswordRuleConf;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.FlowableDetector;\n+import org.apache.syncope.fit.core.reference.TestAccountRuleConf;\n+import org.apache.syncope.fit.core.reference.TestPasswordRuleConf;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.jupiter.api.Test;\n \n@@ -108,10 +108,8 @@ public static UserCR getUniqueSample(final String email) {\n     }\n \n     public static UserCR getSample(final String email) {\n-        return new UserCR.Builder().\n-                realm(SyncopeConstants.ROOT_REALM).\n+        return new UserCR.Builder(SyncopeConstants.ROOT_REALM, email).\n                 password(\"password123\").\n-                username(email).\n                 plainAttr(attrTO(\"fullname\", email)).\n                 plainAttr(attrTO(\"firstname\", email)).\n                 plainAttr(attrTO(\"surname\", \"surname\")).\n@@ -260,8 +258,7 @@ public void createWithInvalidPasswordByGroup() {\n             // configured to be minLength=16\n             userCR.setPassword(\"password1\");\n \n-            userCR.getMemberships().add(new MembershipTO.Builder().\n-                    group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+            userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n             createUser(userCR);\n         });\n@@ -293,8 +290,7 @@ public void create() {\n         UserCR userCR = getUniqueSample(\"a.b@c.com\");\n \n         // add a membership\n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // add an attribute with a non-existing schema: must be ignored\n         AttrTO attrWithInvalidSchemaTO = attrTO(\"invalid schema\", \"a value\");\n@@ -372,12 +368,10 @@ public void create() {\n     public void createWithRequiredValueMissing() {\n         UserCR userCR = getUniqueSample(\"a.b@c.it\");\n \n-        AttrTO type = userCR.getPlainAttrs().stream().\n-                filter(attr -> \"ctype\".equals(attr.getSchema())).findFirst().get();\n+        AttrTO type = userCR.getPlainAttr(\"ctype\").get();\n         userCR.getPlainAttrs().remove(type);\n \n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user without type (mandatory by UserSchema)\n         try {\n@@ -389,8 +383,7 @@ public void createWithRequiredValueMissing() {\n \n         userCR.getPlainAttrs().add(attrTO(\"ctype\", \"F\"));\n \n-        AttrTO surname = userCR.getPlainAttrs().stream().\n-                filter(attr -> \"surname\".equals(attr.getSchema())).findFirst().get();\n+        AttrTO surname = userCR.getPlainAttr(\"surname\").get();\n         userCR.getPlainAttrs().remove(surname);\n \n         // 2. create user without surname (mandatory when type == 'F')\n@@ -506,9 +499,9 @@ public void updateWithoutPassword() {\n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO);\n \n-        UserUR userUR = new UserUR.Builder().key(userTO.getKey()).\n-                plainAttr(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n-                        attrTO(new AttrTO.Builder().schema(\"ctype\").build()).\n+        UserUR userUR = new UserUR.Builder(userTO.getKey()).\n+                plainAttr(new AttrPatch.Builder(new AttrTO.Builder(\"ctype\").build()).\n+                        operation(PatchOperation.DELETE).\n                         build()).build();\n \n         userTO = updateUser(userUR).getEntity();\n@@ -554,8 +547,7 @@ public void updateSamePassword() {\n     public void update() {\n         UserCR userCR = getUniqueSample(\"g.h@t.com\");\n \n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n \n@@ -572,10 +564,10 @@ public void update() {\n         String newFullName = getUUIDString() + \"g.h@t.com\";\n         userUR.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n \n-        userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.ADD_REPLACE).\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n-        userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.ADD_REPLACE).\n-                group(userTO.getMemberships().get(0).getGroupKey()).build());\n+        userUR.getMemberships().add(new MembershipUR.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").\n+                operation(PatchOperation.ADD_REPLACE).build());\n+        userUR.getMemberships().add(new MembershipUR.Builder(userTO.getMemberships().get(0).getGroupKey()).\n+                operation(PatchOperation.ADD_REPLACE).build());\n \n         userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n@@ -614,7 +606,7 @@ public void updatePasswordOnly() {\n         assertFalse(beforeTasks <= 0);\n \n         UserCR userCR = getUniqueSample(\"pwdonly@t.com\");\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n \n@@ -651,8 +643,7 @@ public void verifyTaskRegistration() {\n         UserCR userCR = getUniqueSample(\"t@p.mode\");\n \n         // add a membership\n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user\n         UserTO userTO = createUser(userCR).getEntity();\n@@ -716,8 +707,7 @@ public void createActivate() {\n \n         UserCR userCR = getUniqueSample(\"createActivate@syncope.apache.org\");\n \n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"268fed79-f440-4390-9435-b273768eb5d6\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"268fed79-f440-4390-9435-b273768eb5d6\").build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n \n@@ -743,8 +733,7 @@ public void createActivate() {\n     public void suspendReactivate() {\n         UserCR userCR = getUniqueSample(\"suspendReactivate@syncope.apache.org\");\n \n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n \n@@ -856,8 +845,8 @@ public void updateMultivalueAttribute() {\n         userUR.setKey(userTO.getKey());\n \n         loginDate.getValues().add(\"2000-01-01\");\n-        userUR.getPlainAttrs().add(new AttrPatch.Builder().\n-                operation(PatchOperation.ADD_REPLACE).attrTO(loginDate).build());\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder(loginDate).\n+                operation(PatchOperation.ADD_REPLACE).build());\n \n         userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n@@ -925,8 +914,7 @@ public void groupAttrPropagation() {\n \n         userCR.getAuxClasses().add(\"csv\");\n \n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"37d15e4c-cdc1-460b-a591-8505c8133806\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"37d15e4c-cdc1-460b-a591-8505c8133806\").build());\n \n         userCR.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -1339,9 +1327,8 @@ public void restResource() {\n         assertNotNull(response.getEntity());\n \n         // 2. update\n-        UserUR userUR = new UserUR.Builder().key(result.getEntity().getKey()).\n-                plainAttr(new AttrPatch.Builder().\n-                        attrTO(new AttrTO.Builder().schema(\"surname\").value(\"surname2\").build()).build()).\n+        UserUR userUR = new UserUR.Builder(result.getEntity().getKey()).\n+                plainAttr(new AttrPatch.Builder(new AttrTO.Builder(\"surname\").value(\"surname2\").build()).build()).\n                 build();\n         result = userService.update(userUR).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {"},{"sha":"d6e416f192a7219a921b106f108f6877faccfa30","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":23,"deletions":30,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -114,8 +114,7 @@ public void issue186() {\n         assertTrue(userTO.getResources().isEmpty());\n \n         // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n-        UserUR userUR = new UserUR.Builder().\n-                key(userTO.getKey()).\n+        UserUR userUR = new UserUR.Builder(userTO.getKey()).\n                 password(new PasswordPatch.Builder().value(\"newPassword123\").build()).\n                 resource(new StringPatchItem.Builder().\n                         operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build()).\n@@ -269,10 +268,8 @@ public void issueSYNCOPE108() {\n         userCR.getVirAttrs().clear();\n         userCR.getAuxClasses().add(\"csv\");\n \n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"0626100b-a4ba-4e00-9971-86fad52a6216\").build());\n-        userCR.getMemberships().add(new MembershipTO.Builder().\n-                group(\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"0626100b-a4ba-4e00-9971-86fad52a6216\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"ba9ed509-b1f5-48ab-a334-c8530a6422dc\").build());\n \n         userCR.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -288,11 +285,10 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the first membership: de-provisioning shouldn't happen\n         // -----------------------------------\n-        UserUR userUR = new UserUR();\n-        userUR.setKey(userTO.getKey());\n-\n-        userUR.getMemberships().add(new MembershipUR.Builder().\n-                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n+        UserUR userUR = new UserUR.Builder(userTO.getKey()).\n+                membership(new MembershipUR.Builder(userTO.getMemberships().get(0).getGroupKey()).\n+                        operation(PatchOperation.DELETE).build()).\n+                build();\n \n         userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n@@ -323,11 +319,10 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the first membership: de-provisioning should happen\n         // -----------------------------------\n-        userUR = new UserUR();\n-        userUR.setKey(userTO.getKey());\n-\n-        userUR.getMemberships().add(new MembershipUR.Builder().\n-                operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n+        userUR = new UserUR.Builder(userTO.getKey()).\n+                membership(new MembershipUR.Builder(userTO.getMemberships().get(0).getGroupKey()).\n+                        operation(PatchOperation.DELETE).build()).\n+                build();\n \n         userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n@@ -641,7 +636,7 @@ public void issueSYNCOPE354() {\n         // 2. create user with LDAP resource and membership of the above group\n         UserCR userCR = UserITCase.getUniqueSample(\"syncope354@syncope.apache.org\");\n         userCR.getResources().add(RESOURCE_NAME_LDAP);\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(groupTO.getKey()).build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -657,8 +652,8 @@ public void issueSYNCOPE354() {\n         // 4. remove membership\n         UserUR userUR = new UserUR();\n         userUR.setKey(userTO.getKey());\n-        userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.DELETE).\n-                group(userTO.getMemberships().get(0).getGroupKey()).build());\n+        userUR.getMemberships().add(new MembershipUR.Builder(userTO.getMemberships().get(0).getGroupKey()).\n+                operation(PatchOperation.DELETE).build());\n \n         userTO = updateUser(userUR).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -699,7 +694,7 @@ public void issueSYNCOPE357() throws IOException {\n         userCR.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n         userCR.getPlainAttrs().add(attrTO(\"photo\", Base64.getEncoder().encodeToString(\n                 IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(groupTO.getKey()).build());\n \n         UserTO userTO = createUser(userCR).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -1304,8 +1299,8 @@ public void issueSYNCOPE686() {\n             // 5. update user with the new group, and don't provide any password\n             UserUR userUR = new UserUR();\n             userUR.setKey(userTO.getKey());\n-            userUR.getMemberships().add(new MembershipUR.Builder().operation(PatchOperation.ADD_REPLACE).\n-                    group(group.getKey()).build());\n+            userUR.getMemberships().add(new MembershipUR.Builder(group.getKey()).\n+                    operation(PatchOperation.ADD_REPLACE).build());\n \n             ProvisioningResult<UserTO> result = updateUser(userUR);\n             assertNotNull(result);\n@@ -1340,8 +1335,8 @@ public void issueSYNCOPE710() {\n         UserCR userCR = UserITCase.getUniqueSample(\"syncope710@syncope.apache.org\");\n         userCR.getResources().clear();\n         userCR.getMemberships().clear();\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(ldapGroup.getKey()).build());\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(dbGroup.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(ldapGroup.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(dbGroup.getKey()).build());\n \n         ProvisioningResult<UserTO> result = createUser(userCR);\n         assertEquals(2, result.getPropagationStatuses().size());\n@@ -1371,7 +1366,7 @@ public void issueSYNCOPE881() {\n         // 2. create user and assign such group\n         UserCR userCR = UserITCase.getUniqueSample(\"syncope881U@apache.org\");\n         userCR.getMemberships().clear();\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(group.getKey()).build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(group.getKey()).build());\n \n         UserTO user = createUser(userCR).getEntity();\n         assertNotNull(user);\n@@ -1405,9 +1400,7 @@ public void issueSYNCOPE1099() {\n \n         // 2. create user matching the condition above\n         UserCR userCR = UserITCase.getUniqueSample(\"syncope1099U@apache.org\");\n-        userCR.getPlainAttrs().stream().\n-                filter(attr -> \"firstname\".equals(attr.getSchema())).findFirst().get().\n-                getValues().set(0, \"issueSYNCOPE1099\");\n+        userCR.getPlainAttr(\"firstname\").get().getValues().set(0, \"issueSYNCOPE1099\");\n \n         ProvisioningResult<UserTO> created = createUser(userCR);\n         assertNotNull(created);\n@@ -1471,7 +1464,7 @@ public void issueSYNCOPE1206() {\n         // 3. update user to match the dynamic condition: expect propagation to LDAP\n         UserUR userUR = new UserUR();\n         userUR.setKey(result.getEntity().getKey());\n-        userUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"true\")).build());\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"cool\", \"true\")).build());\n \n         result = updateUser(userUR);\n         assertEquals(1, result.getPropagationStatuses().size());\n@@ -1480,7 +1473,7 @@ public void issueSYNCOPE1206() {\n         // 4. update again user to not match the dynamic condition any more: expect propagation to LDAP\n         userUR = new UserUR();\n         userUR.setKey(result.getEntity().getKey());\n-        userUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"false\")).build());\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder(attrTO(\"cool\", \"false\")).build());\n \n         result = updateUser(userUR);\n         assertEquals(1, result.getPropagationStatuses().size());"},{"sha":"b56f9db5993d5590e9b56d3d78c06cd35cfa7cf1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -110,7 +110,7 @@ public void createAndApprove() {\n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n         userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n+                new MembershipTO.Builder(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n         userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n         SyncopeClient anonClient = clientFactory.create();\n@@ -148,7 +148,7 @@ public void createAndUnclaim() {\n         // 1. self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserCR userCR = UserITCase.getUniqueSample(\"anonymous@syncope.apache.org\");\n         userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n+                new MembershipTO.Builder(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n         userCR.getResources().add(RESOURCE_NAME_TESTDB);\n         SyncopeClient anonClient = clientFactory.create();\n         UserTO userTO = anonClient.getService(UserSelfService.class).\n@@ -252,9 +252,8 @@ public void updateWithApproval() {\n         UserUR userUR = new UserUR();\n         userUR.setKey(created.getKey());\n         userUR.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n-        userUR.getMemberships().add(new MembershipUR.Builder().\n+        userUR.getMemberships().add(new MembershipUR.Builder(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").\n                 operation(PatchOperation.ADD_REPLACE).\n-                group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").\n                 build());\n         userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n@@ -463,7 +462,7 @@ public void createWithReject() {\n         userCR.getResources().add(RESOURCE_NAME_TESTDB);\n \n         // User with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f are defined in workflow as subject to approval\n-        userCR.getMemberships().add(new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f\n         UserTO userTO = createUser(userCR).getEntity();\n@@ -542,7 +541,7 @@ public void createWithApproval() {\n \n         // User with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f are defined in workflow as subject to approval\n         userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n+                new MembershipTO.Builder(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user and verify that no propagation occurred)\n         ProvisioningResult<UserTO> result = createUser(userCR);\n@@ -632,7 +631,7 @@ public void updateApproval() {\n \n         UserUR req = new UserUR();\n         req.setKey(created.getKey());\n-        req.getMemberships().add(new MembershipUR.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n+        req.getMemberships().add(new MembershipUR.Builder(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n \n         SyncopeClient client = clientFactory.create(created.getUsername(), \"password123\");\n         Response response = client.getService(UserSelfService.class).update(req);\n@@ -707,8 +706,7 @@ public void issueSYNCOPE15() {\n         userCR.getMemberships().clear();\n \n         // Users with group 0cbcabd2-4410-4b6b-8f05-a052b451d18f are defined in workflow as subject to approval\n-        userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"0cbcabd2-4410-4b6b-8f05-a052b451d18f\").build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n         UserTO userTO = createUser(userCR).getEntity();"},{"sha":"356c070d448ce7bcff7b7c1f22f38aa42460cbe9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/56d67c50509174eb114eb49e53b73aef60fefe8f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=56d67c50509174eb114eb49e53b73aef60fefe8f","patch":"@@ -79,8 +79,7 @@ public void issueSYNCOPE16() {\n         UserCR userCR = UserITCase.getUniqueSample(\"issue16@apache.org\");\n         userCR.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualvalue\"));\n         userCR.getResources().add(RESOURCE_NAME_DBVIRATTR);\n-        userCR.getMemberships().add(\n-                new MembershipTO.Builder().group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n+        userCR.getMemberships().add(new MembershipTO.Builder(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n \n         // 1. create user\n         UserTO userTO = createUser(userCR).getEntity();\n@@ -542,7 +541,7 @@ public void issueSYNCOPE453() {\n             userCR.getVirAttrs().clear();\n             userCR.getMemberships().clear();\n \n-            userCR.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n+            userCR.getMemberships().add(new MembershipTO.Builder(groupTO.getKey()).build());\n \n             ProvisioningResult<UserTO> result = createUser(userCR);\n             assertEquals(2, result.getPropagationStatuses().size());\n@@ -684,7 +683,7 @@ public void issueSYNCOPE691() {\n             userUR.setKey(userTO.getKey());\n             // modify virtual attribute\n             userUR.getVirAttrs().add(\n-                    new AttrTO.Builder().schema(virSchema.getKey()).\n+                    new AttrTO.Builder(virSchema.getKey()).\n                             value(\"test@issue691.dom3.org\").\n                             value(\"test@issue691.dom4.org\").\n                             build());"}]}