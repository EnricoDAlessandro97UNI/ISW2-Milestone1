{"sha":"a873497dce65f3b1cb4310473ba47beac473790e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE4NzM0OTdkY2U2NWYzYjFjYjQzMTA0NzNiYTQ3YmVhYzQ3Mzc5MGU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-02T07:20:15Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-02T07:20:15Z"},"message":"missing Content Loader\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246455 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c283988369c6247f19eced5d64ba955f74d05e9d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c283988369c6247f19eced5d64ba955f74d05e9d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a873497dce65f3b1cb4310473ba47beac473790e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a873497dce65f3b1cb4310473ba47beac473790e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a873497dce65f3b1cb4310473ba47beac473790e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a873497dce65f3b1cb4310473ba47beac473790e/comments","author":null,"committer":null,"parents":[{"sha":"11804ed53f253f7f61f2b5f7939c9047ce3ac889","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11804ed53f253f7f61f2b5f7939c9047ce3ac889","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11804ed53f253f7f61f2b5f7939c9047ce3ac889"}],"stats":{"total":131,"additions":131,"deletions":0},"files":[{"sha":"23f48ee53b552991022eb55e1a304aca04359410","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/DefaultContentLoader.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a873497dce65f3b1cb4310473ba47beac473790e/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FDefaultContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a873497dce65f3b1cb4310473ba47beac473790e/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FDefaultContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FDefaultContentLoader.java?ref=a873497dce65f3b1cb4310473ba47beac473790e","patch":"@@ -0,0 +1,131 @@\n+package org.syncope.identityconnectors.bundles.staticwebservice.wstarget;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.sql.DataSource;\n+import org.dbunit.database.DatabaseConfig;\n+import org.dbunit.database.DatabaseConnection;\n+import org.dbunit.database.IDatabaseConnection;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.ITableIterator;\n+import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.web.context.WebApplicationContext;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+public class DefaultContentLoader implements ServletContextListener {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            DefaultContentLoader.class);\n+\n+    private final String DBSCHEMA = \"/schema.sql\";\n+\n+    public static DataSource localDataSource = null;\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce) {\n+        WebApplicationContext springContext =\n+                WebApplicationContextUtils.getWebApplicationContext(\n+                sce.getServletContext());\n+\n+        if (springContext == null) {\n+            log.error(\"Invalid Spring context\");\n+            return;\n+        }\n+\n+        DataSource dataSource =\n+                (DataSource) springContext.getBean(\"localDataSource\");\n+\n+        DefaultContentLoader.localDataSource = dataSource;\n+\n+        DefaultDataTypeFactory dbUnitDataTypeFactory =\n+                (DefaultDataTypeFactory) springContext.getBean(\n+                \"dbUnitDataTypeFactory\");\n+\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+\n+        // create schema\n+        StringBuilder statement = new StringBuilder();\n+\n+        InputStream dbschema =\n+                DefaultContentLoader.class.getResourceAsStream(DBSCHEMA);\n+\n+        BufferedReader buff = new BufferedReader(\n+                new InputStreamReader(dbschema));\n+\n+        String line = null;\n+\n+        try {\n+            while ((line = buff.readLine()) != null) {\n+                statement.append(line);\n+            }\n+        } catch (IOException e) {\n+            log.error(\"Error reading file \" + DBSCHEMA, e);\n+            return;\n+        }\n+\n+        Statement st = null;\n+\n+        try {\n+\n+            st = conn.createStatement();\n+            st.execute(statement.toString());\n+\n+        } catch (SQLException e) {\n+            log.error(\"Error creating schema:\\n\" + statement.toString(), e);\n+            return;\n+        } finally {\n+            try {\n+                st.close();\n+            } catch (Throwable t) {\n+                // ignore exception\n+            }\n+        }\n+\n+        try {\n+            IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n+\n+            DatabaseConfig config = dbUnitConn.getConfig();\n+            config.setProperty(\n+                    \"http://www.dbunit.org/properties/datatypeFactory\",\n+                    dbUnitDataTypeFactory);\n+\n+            boolean existingData = false;\n+            IDataSet existingDataSet = dbUnitConn.createDataSet();\n+            for (ITableIterator itor = existingDataSet.iterator();\n+                    itor.next() && !existingData;) {\n+\n+                existingData = (itor.getTable().getRowCount() > 0);\n+            }\n+\n+\n+            FlatXmlDataSetBuilder dataSetBuilder =\n+                    new FlatXmlDataSetBuilder();\n+            dataSetBuilder.setColumnSensing(true);\n+            IDataSet dataSet = dataSetBuilder.build(\n+                    getClass().getResourceAsStream(\"/content.xml\"));\n+\n+            DatabaseOperation.REFRESH.execute(dbUnitConn, dataSet);\n+\n+        } catch (Throwable t) {\n+            log.error(\"Error loding default content\", t);\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+        }\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce) {\n+    }\n+}"}]}