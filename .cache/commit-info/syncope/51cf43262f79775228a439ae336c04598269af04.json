{"sha":"51cf43262f79775228a439ae336c04598269af04","node_id":"C_kwDOJfYA1toAKDUxY2Y0MzI2MmY3OTc3NTIyOGE0MzlhZTMzNmMwNDU5ODI2OWFmMDQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-27T10:09:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-01T14:43:47Z"},"message":"Upgrading pac4j","tree":{"sha":"0d12f37fd02820e688a00f9f3b8f701a70fb1d35","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0d12f37fd02820e688a00f9f3b8f701a70fb1d35"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/51cf43262f79775228a439ae336c04598269af04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51cf43262f79775228a439ae336c04598269af04","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51cf43262f79775228a439ae336c04598269af04","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51cf43262f79775228a439ae336c04598269af04/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"185c9ff05f3cb5ae4a92e77991ac6a322baf404a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/185c9ff05f3cb5ae4a92e77991ac6a322baf404a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/185c9ff05f3cb5ae4a92e77991ac6a322baf404a"}],"stats":{"total":576,"additions":295,"deletions":281},"files":[{"sha":"173d5e5aa41f178de438ba60dc0e2d4045c30c4b","filename":"client/idrepo/console/src/main/resources/console.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -27,6 +27,7 @@ server.servlet.contextPath=/syncope-console\n \n management.endpoints.web.exposure.include=info,health,loggers\n management.endpoint.health.show-details=ALWAYS\n+management.endpoint.env.show-values=WHEN_AUTHORIZED\n \n service.discovery.address=http://localhost:8080/syncope-console/\n "},{"sha":"d41b7337e0c8e5fc1448e1ccb01e20b279c9a64d","filename":"client/idrepo/console/src/test/resources/console-debug.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Fconsole-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Fconsole-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fresources%2Fconsole-debug.properties?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -14,8 +14,8 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-keymaster.address=http://localhost:9080/syncope/rest/keymaster\n-#keymaster.address=https://localhost:9443/syncope/rest/keymaster\n+#keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+keymaster.address=https://localhost:9443/syncope/rest/keymaster\n keymaster.username=${anonymousUser}\n keymaster.password=${anonymousKey}\n "},{"sha":"c7296757c357bceaef71283cdc62d49fbc34cbd2","filename":"client/idrepo/enduser/src/main/resources/enduser.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -27,6 +27,7 @@ server.servlet.contextPath=/syncope-enduser\n \n management.endpoints.web.exposure.include=info,health,loggers\n management.endpoint.health.show-details=ALWAYS\n+management.endpoint.env.show-values=WHEN_AUTHORIZED\n \n service.discovery.address=http://localhost:8080/syncope-enduser/\n "},{"sha":"f75601eef6bb1bd66d96e0e9e1f22470a4418071","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -29,6 +29,7 @@ cxf.path=/rest\n \n management.endpoints.web.exposure.include=health,info,loggers,entityCache\n management.endpoint.health.show-details=ALWAYS\n+management.endpoint.env.show-values=WHEN_AUTHORIZED\n \n service.discovery.address=http://localhost:8080/syncope/rest/\n "},{"sha":"d3b5fb72bc4c37921a60c7f1689e919b6c18a667","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/OIDCC4UILogic.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCC4UILogic.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.pac4j.core.context.CallContext;\n import org.pac4j.core.exception.http.WithLocationAction;\n-import org.pac4j.core.profile.factory.ProfileManagerFactory;\n import org.pac4j.oidc.client.OidcClient;\n import org.pac4j.oidc.credentials.OidcCredentials;\n import org.pac4j.oidc.profile.OidcProfile;\n@@ -113,7 +112,7 @@ public OIDCRequest createLoginRequest(final String redirectURI, final String opN\n \n         // 2. create OIDCRequest\n         WithLocationAction action = oidcClient.getRedirectionAction(\n-                new CallContext(new OIDC4UIContext(), NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT)).\n+                new CallContext(new OIDC4UIContext(), NoOpSessionStore.INSTANCE)).\n                 map(WithLocationAction.class::cast).\n                 orElseThrow(() -> {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -275,7 +274,7 @@ public OIDCRequest createLogoutRequest(final String accessToken, final String re\n         profile.setIdTokenString((String) claimsSet.getClaim(JWT_CLAIM_ID_TOKEN));\n \n         WithLocationAction action = oidcClient.getLogoutAction(\n-                new CallContext(new OIDC4UIContext(), NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT),\n+                new CallContext(new OIDC4UIContext(), NoOpSessionStore.INSTANCE),\n                 profile,\n                 redirectURI).\n                 map(WithLocationAction.class::cast)."},{"sha":"19ea7c3ab6cf516accb0dfd934bea2f2ad6ad27d","filename":"ext/oidcc4ui/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCClientCache.java","status":"modified","additions":20,"deletions":11,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCClientCache.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic.oidc;\n \n+import com.nimbusds.jose.JWSAlgorithm;\n import com.nimbusds.oauth2.sdk.ParseException;\n import com.nimbusds.oauth2.sdk.id.Issuer;\n import com.nimbusds.openid.connect.sdk.SubjectType;\n@@ -31,13 +32,15 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n+import java.util.function.Function;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.entity.OIDCC4UIProvider;\n import org.pac4j.core.http.callback.NoParameterCallbackUrlResolver;\n import org.pac4j.oidc.client.OidcClient;\n import org.pac4j.oidc.config.OidcConfiguration;\n+import org.pac4j.oidc.metadata.StaticOidcOpMetadataResolver;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -48,18 +51,21 @@ public class OIDCClientCache {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(OIDCClientCache.class);\n \n+    protected static final Function<String, String> DISCOVERY_URI =\n+            issuer -> issuer + \"/.well-known/openid-configuration\";\n+\n     protected final List<OidcClient> cache = Collections.synchronizedList(new ArrayList<>());\n \n     protected static OIDCProviderMetadata getDiscoveryDocument(final String issuer) {\n-        String discoveryDocumentURL = issuer + \"/.well-known/openid-configuration\";\n+        String discoveryDocumentURI = DISCOVERY_URI.apply(issuer);\n         try {\n             HttpResponse<String> response = HttpClient.newBuilder().build().send(\n-                    HttpRequest.newBuilder(URI.create(discoveryDocumentURL)).GET().build(),\n+                    HttpRequest.newBuilder(URI.create(discoveryDocumentURI)).GET().build(),\n                     HttpResponse.BodyHandlers.ofString());\n \n             return OIDCProviderMetadata.parse(response.body());\n         } catch (IOException | InterruptedException | ParseException e) {\n-            LOG.error(\"While getting the Discovery Document at {}\", discoveryDocumentURL, e);\n+            LOG.error(\"While getting the Discovery Document at {}\", discoveryDocumentURI, e);\n \n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n             sce.getElements().add(e.getMessage());\n@@ -93,6 +99,7 @@ public OidcClient add(final OIDCC4UIProvider op, final String callbackUrl) {\n                 new Issuer(op.getIssuer()),\n                 List.of(SubjectType.PUBLIC),\n                 Optional.ofNullable(op.getJwksUri()).map(URI::create).orElse(null));\n+        metadata.setIDTokenJWSAlgs(List.of(JWSAlgorithm.HS256));\n         metadata.setAuthorizationEndpointURI(\n                 Optional.ofNullable(op.getAuthorizationEndpoint()).map(URI::create).orElse(null));\n         metadata.setTokenEndpointURI(\n@@ -102,15 +109,17 @@ public OidcClient add(final OIDCC4UIProvider op, final String callbackUrl) {\n         metadata.setEndSessionEndpointURI(\n                 Optional.ofNullable(op.getEndSessionEndpoint()).map(URI::create).orElse(null));\n \n-        OidcConfiguration config = new OidcConfiguration();\n-        config.setClientId(op.getClientID());\n-        config.setSecret(op.getClientSecret());\n-        config.setProviderMetadata(metadata);\n-        config.setScope(\"openid profile email address phone offline_access\");\n-        config.setUseNonce(false);\n-        config.setSessionLogoutHandler(new NoOpSessionLogoutHandler());\n+        OidcConfiguration cfg = new OidcConfiguration();\n+        cfg.setClientId(op.getClientID());\n+        cfg.setSecret(op.getClientSecret());\n+        cfg.setDiscoveryURI(DISCOVERY_URI.apply(op.getIssuer()));\n+        cfg.setPreferredJwsAlgorithm(JWSAlgorithm.HS256);\n+        cfg.setOpMetadataResolver(new StaticOidcOpMetadataResolver(cfg, metadata));\n+        cfg.setScope(\"openid profile email address phone offline_access\");\n+        cfg.setUseNonce(false);\n+        cfg.setSessionLogoutHandler(new NoOpSessionLogoutHandler());\n \n-        OidcClient client = new OidcClient(config);\n+        OidcClient client = new OidcClient(cfg);\n         client.setName(op.getName());\n         client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n         client.setCallbackUrl(callbackUrl);"},{"sha":"55d1d9598af008b43b1ef38ee2c41fcee73e0d19","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogic.java","status":"modified","additions":53,"deletions":51,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -72,14 +72,15 @@\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n import org.opensaml.saml.saml2.metadata.impl.AssertionConsumerServiceBuilder;\n import org.pac4j.core.context.CallContext;\n+import org.pac4j.core.credentials.Credentials;\n import org.pac4j.core.exception.http.RedirectionAction;\n import org.pac4j.core.exception.http.WithContentAction;\n import org.pac4j.core.exception.http.WithLocationAction;\n import org.pac4j.core.logout.NoLogoutActionBuilder;\n-import org.pac4j.core.profile.factory.ProfileManagerFactory;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n import org.pac4j.saml.context.SAML2MessageContext;\n+import org.pac4j.saml.credentials.SAML2AuthenticationCredentials;\n import org.pac4j.saml.credentials.SAML2Credentials;\n import org.pac4j.saml.credentials.authenticator.SAML2Authenticator;\n import org.pac4j.saml.metadata.SAML2ServiceProviderMetadataResolver;\n@@ -102,6 +103,28 @@ public class SAML2SP4UILogic extends AbstractTransactionalLogic<EntityTO> {\n \n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n+    protected static String validateUrl(final String url) {\n+        boolean isValid = true;\n+        if (url.contains(\"..\")) {\n+            isValid = false;\n+        }\n+        if (isValid) {\n+            isValid = ResourceUtils.isUrl(url);\n+        }\n+\n+        if (!isValid) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(\"Invalid URL: \" + url);\n+            throw sce;\n+        }\n+\n+        return url;\n+    }\n+\n+    protected static String getCallbackUrl(final String spEntityID, final String urlContext) {\n+        return validateUrl(spEntityID + urlContext + \"/assertion-consumer\");\n+    }\n+\n     protected final SAML2SP4UILoader loader;\n \n     protected final AccessTokenDataBinder accessTokenDataBinder;\n@@ -134,28 +157,6 @@ public SAML2SP4UILogic(\n         this.authDataAccessor = authDataAccessor;\n     }\n \n-    protected static String validateUrl(final String url) {\n-        boolean isValid = true;\n-        if (url.contains(\"..\")) {\n-            isValid = false;\n-        }\n-        if (isValid) {\n-            isValid = ResourceUtils.isUrl(url);\n-        }\n-\n-        if (!isValid) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n-            sce.getElements().add(\"Invalid URL: \" + url);\n-            throw sce;\n-        }\n-\n-        return url;\n-    }\n-\n-    protected static String getCallbackUrl(final String spEntityID, final String urlContext) {\n-        return validateUrl(spEntityID + urlContext + \"/assertion-consumer\");\n-    }\n-\n     @PreAuthorize(\"isAuthenticated()\")\n     public void getMetadata(final String spEntityID, final String urlContext, final OutputStream os) {\n         String metadata = metadataCache.get(spEntityID + urlContext);\n@@ -221,17 +222,13 @@ protected SAML2Client getSAML2Client(final String idpEntityID, final String spEn\n         return getSAML2Client(idp, spEntityID, urlContext);\n     }\n \n-    protected static SAML2Request buildRequest(final String idpEntityID, final RedirectionAction action) {\n+    protected SAML2Request buildRequest(final String idpEntityID, final RedirectionAction action) {\n         SAML2Request requestTO = new SAML2Request();\n         requestTO.setIdpEntityID(idpEntityID);\n-        if (action instanceof WithLocationAction) {\n-            WithLocationAction withLocationAction = (WithLocationAction) action;\n-\n+        if (action instanceof WithLocationAction withLocationAction) {\n             requestTO.setBindingType(SAML2BindingType.REDIRECT);\n             requestTO.setContent(withLocationAction.getLocation());\n-        } else if (action instanceof WithContentAction) {\n-            WithContentAction withContentAction = (WithContentAction) action;\n-\n+        } else if (action instanceof WithContentAction withContentAction) {\n             requestTO.setBindingType(SAML2BindingType.POST);\n             requestTO.setContent(Base64.getMimeEncoder().encodeToString(withContentAction.getContent().getBytes()));\n         }\n@@ -294,7 +291,7 @@ public AuthnRequest build(final SAML2MessageContext context) {\n                 saml2Client.getConfiguration().getAuthnRequestBindingType(),\n                 null);\n         RedirectionAction action = saml2Client.getRedirectionAction(\n-                new CallContext(ctx, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT)).\n+                new CallContext(ctx, NoOpSessionStore.INSTANCE)).\n                 orElseThrow(() -> {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n                     sce.getElements().add(\"No RedirectionAction generated for AuthnRequest\");\n@@ -315,17 +312,20 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n         SAML2Client saml2Client = getSAML2Client(idp, saml2Response.getSpEntityID(), saml2Response.getUrlContext());\n \n         // 2. validate the provided SAML response\n-        SAML2Credentials credentials;\n-        try {\n-            SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n-                    saml2Client.getConfiguration().getAuthnRequestBindingType(),\n-                    saml2Response);\n+        SAML2SP4UIContext webCtx = new SAML2SP4UIContext(\n+                saml2Client.getConfiguration().getAuthnRequestBindingType(),\n+                saml2Response);\n+        CallContext ctx = new CallContext(webCtx, NoOpSessionStore.INSTANCE);\n \n-            credentials = (SAML2Credentials) saml2Client.getCredentialsExtractor().\n-                    extract(new CallContext(ctx, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT)).\n-                    orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n+        SAML2AuthenticationCredentials authCreds;\n+        try {\n+            Credentials creds = saml2Client.getCredentialsExtractor().\n+                    extract(ctx).\n+                    orElseThrow(() -> new IllegalStateException(\"Could not extract credentials\"));\n \n-            saml2Client.getAuthenticator().validate(new CallContext(ctx, NoOpSessionStore.INSTANCE), credentials);\n+            authCreds = saml2Client.validateCredentials(ctx, creds).\n+                    map(SAML2AuthenticationCredentials.class::cast).\n+                    orElseThrow(() -> new IllegalArgumentException(\"Invalid SAML credentials provided\"));\n         } catch (Exception e) {\n             LOG.error(\"While validating AuthnResponse\", e);\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n@@ -338,7 +338,7 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n         loginResp.setIdp(saml2Client.getIdentityProviderResolvedEntityId());\n         loginResp.setSloSupported(!(saml2Client.getLogoutActionBuilder() instanceof NoLogoutActionBuilder));\n \n-        SAML2Credentials.SAMLNameID nameID = credentials.getNameId();\n+        SAML2AuthenticationCredentials.SAMLNameID nameID = authCreds.getNameId();\n \n         Item connObjectKeyItem = idp.getConnObjectKeyItem().orElse(null);\n \n@@ -350,11 +350,11 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n             keyValue = nameID.getValue();\n         }\n \n-        loginResp.setNotOnOrAfter(new Date(credentials.getConditions().getNotOnOrAfter().toInstant().toEpochMilli()));\n+        loginResp.setNotOnOrAfter(new Date(authCreds.getConditions().getNotOnOrAfter().toInstant().toEpochMilli()));\n \n-        loginResp.setSessionIndex(credentials.getSessionIndex());\n+        loginResp.setSessionIndex(authCreds.getSessionIndex());\n \n-        for (SAML2Credentials.SAMLAttribute attr : credentials.getAttributes()) {\n+        for (SAML2AuthenticationCredentials.SAMLAttribute attr : authCreds.getAttributes()) {\n             if (!attr.getAttributeValues().isEmpty()) {\n                 String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n                 if (connObjectKeyItem != null && attrName.equals(connObjectKeyItem.getExtAttrName())) {\n@@ -477,7 +477,7 @@ public SAML2Request createLogoutRequest(\n         SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n                 saml2Client.getConfiguration().getSpLogoutRequestBindingType(), null);\n         RedirectionAction action = saml2Client.getLogoutAction(\n-                new CallContext(ctx, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT),\n+                new CallContext(ctx, NoOpSessionStore.INSTANCE),\n                 saml2Profile,\n                 null).\n                 orElseThrow(() -> {\n@@ -504,17 +504,19 @@ public void validateLogoutResponse(final SAML2Response saml2Response) {\n         }\n \n         // 2. validate the provided SAML response\n-        SAML2SP4UIContext ctx = new SAML2SP4UIContext(\n-                saml2Client.getConfiguration().getSpLogoutRequestBindingType(),\n+        SAML2SP4UIContext webCtx = new SAML2SP4UIContext(\n+                saml2Client.getConfiguration().getAuthnRequestBindingType(),\n                 saml2Response);\n+        CallContext ctx = new CallContext(webCtx, NoOpSessionStore.INSTANCE);\n \n         LogoutResponse logoutResponse;\n         try {\n-            SAML2MessageContext saml2Ctx = saml2Client.getContextProvider().buildContext(\n-                    new CallContext(ctx, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT), saml2Client);\n-            saml2Client.getLogoutProfileHandler().receive(saml2Ctx);\n+            Credentials creds = saml2Client.getCredentialsExtractor().\n+                    extract(ctx).\n+                    orElseThrow(() -> new IllegalStateException(\"Could not extract credentials\"));\n \n-            logoutResponse = (LogoutResponse) saml2Ctx.getMessageContext().getMessage();\n+            saml2Client.getLogoutProcessor().processLogout(ctx, creds);\n+            logoutResponse = (LogoutResponse) ((SAML2Credentials) creds).getContext().getMessageContext().getMessage();\n         } catch (Exception e) {\n             LOG.error(\"Could not validate LogoutResponse\", e);\n             return;"},{"sha":"15577bcc342fbf05a973cb90066d4c5938ed27f9","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ClientCache.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -27,6 +27,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.common.lib.to.Item;\n@@ -125,7 +126,19 @@ public static SAML2SP4UIIdPTO importMetadata(\n     public SAML2Client add(\n             final SAML2SP4UIIdP idp, final SAML2Configuration cfg, final String spEntityID, final String callbackUrl) {\n \n-        cfg.setIdentityProviderMetadataResource((new ByteArrayResource(idp.getMetadata())));\n+        cfg.setIdentityProviderEntityId(idp.getEntityID());\n+        cfg.setIdentityProviderMetadataResource(new ByteArrayResource(idp.getMetadata()));\n+        // remove when pac4j > 6.0.0-RC5 is available\n+        cfg.setIdentityProviderMetadataResolver(new SAML2IdentityProviderMetadataResolver(cfg) {\n+\n+            private final AtomicBoolean hasChanged = new AtomicBoolean(true);\n+\n+            @Override\n+            public boolean hasChanged() {\n+                return hasChanged.getAndSet(false);\n+            }\n+        });\n+\n         cfg.setServiceProviderEntityId(spEntityID);\n         getSPMetadataPath(spEntityID).ifPresent(cfg::setServiceProviderMetadataResourceFilepath);\n "},{"sha":"834618401e5f70f0b6461328862b94dd5f806ab1","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2SP4UIContext.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2SP4UIContext.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -49,16 +49,14 @@ public String getRequestMethod() {\n \n     @Override\n     public Optional<String> getRequestParameter(final String name) {\n-        switch (name) {\n-            case SAML2Constants.SAML_RESPONSE:\n-                return Optional.ofNullable(saml2Response.getSamlResponse());\n-\n-            case SAML2Constants.RELAY_STATE:\n-                return Optional.ofNullable(saml2Response.getRelayState());\n-\n-            default:\n-                return Optional.empty();\n-        }\n+        return switch (name) {\n+            case SAML2Constants.SAML_RESPONSE ->\n+                Optional.ofNullable(saml2Response.getSamlResponse());\n+            case SAML2Constants.RELAY_STATE ->\n+                Optional.ofNullable(saml2Response.getRelayState());\n+            default ->\n+                Optional.empty();\n+        };\n     }\n \n     @Override"},{"sha":"744d540e4c1dc6ae2a965239653f6375f06d71ea","filename":"fit/wa-reference/src/main/resources/log4j2.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -39,6 +39,9 @@ under the License.\n     <asyncLogger name=\"org.apereo.cas\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apereo.cas.support.saml.idp.metadata.generator\" additivity=\"false\" level=\"TRACE\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n \n     <asyncLogger name=\"org.apereo.services.persondir\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>"},{"sha":"d99e68922195636557a525da61390b3dafba89a5","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/SAML2SRAITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FSAML2SRAITCase.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -180,8 +180,7 @@ public void web() throws IOException {\n             post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n             try (CloseableHttpResponse response = httpclient.execute(post, context)) {\n                 assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n-                location = response.getFirstHeader(HttpHeaders.LOCATION).getValue().\n-                        replace(\"http://\", \"https://\").replace(\":8080\", \":9443\");\n+                location = response.getFirstHeader(HttpHeaders.LOCATION).getValue();\n             }\n         }\n "},{"sha":"b7a38a7ad1522651d13a62bfe962f073cc9def4e","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/ui/SAML2SP4UIITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FSAML2SP4UIITCase.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -257,8 +257,7 @@ protected void sso(final String baseURL, final String username, final String pas\n             post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n             try (CloseableHttpResponse response = httpclient.execute(post, context)) {\n                 assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n-                location = response.getFirstHeader(HttpHeaders.LOCATION).getValue().\n-                        replace(\"http://\", \"https://\").replace(\":8080\", \":9443\");\n+                location = response.getFirstHeader(HttpHeaders.LOCATION).getValue();\n             }\n         }\n "},{"sha":"d853988d730408c572a8800260c55481beb749a7","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -437,7 +437,7 @@ under the License.\n \n     <modernizer-maven.version>2.5.0</modernizer-maven.version>\n \n-    <pac4j.version>6.0.0-RC5-SNAPSHOT</pac4j.version>\n+    <pac4j.version>6.0.0-RC5</pac4j.version>\n \n     <cas.version>7.0.0-SNAPSHOT</cas.version>\n     <cas-client.version>4.0.1</cas-client.version>\n@@ -1687,7 +1687,7 @@ under the License.\n             <dependency>\n               <groupId>com.puppycrawl.tools</groupId>\n               <artifactId>checkstyle</artifactId>\n-              <version>10.6.0</version>\n+              <version>10.7.0</version>\n             </dependency>\n           </dependencies>\n           <configuration>\n@@ -1749,7 +1749,7 @@ under the License.\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-enforcer-plugin</artifactId>\n-        <version>3.1.0</version>\n+        <version>3.2.1</version>\n         <executions>\n           <execution>\n             <id>default-cli</id>"},{"sha":"878ed14660d06a15dc67b1e527508bd39c7c1d0d","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -303,21 +303,19 @@ public SecurityWebFilterChain routesSecurityFilterChain(\n                 anyExchange().authenticated();\n \n         switch (props.getAmType()) {\n-            case OIDC:\n-            case OAUTH2:\n+            case OIDC, OAUTH2 -> {\n                 OAuth2SecurityConfigUtils.forLogin(http, props.getAmType(), ctx);\n                 OAuth2SecurityConfigUtils.forLogout(builder, props.getAmType(), cacheManager, logoutRouteMatcher, ctx);\n                 http.oauth2ResourceServer().jwt().jwtDecoder(ctx.getBean(ReactiveJwtDecoder.class));\n-                break;\n+            }\n \n-            case SAML2:\n+            case SAML2 ->\n                 saml2Client.ifAvailable(client -> {\n                     SAML2SecurityConfigUtils.forLogin(http, client, publicRouteMatcher);\n                     SAML2SecurityConfigUtils.forLogout(builder, client, cacheManager, logoutRouteMatcher, ctx);\n                 });\n-                break;\n \n-            case CAS:\n+            case CAS -> {\n                 CASSecurityConfigUtils.forLogin(\n                         http,\n                         props.getCas().getProtocol(),\n@@ -329,9 +327,10 @@ public SecurityWebFilterChain routesSecurityFilterChain(\n                         props.getCas().getServerPrefix(),\n                         logoutRouteMatcher,\n                         ctx);\n-                break;\n+            }\n \n-            default:\n+            default -> {\n+            }\n         }\n \n         return builder.and().csrf().requireCsrfProtectionMatcher(csrfRouteMatcher).and().build();"},{"sha":"63cbc6a68abf49292a1a92a1ac0d0a495c21d922","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/RedirectionActionUtils.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FRedirectionActionUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FRedirectionActionUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FRedirectionActionUtils.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.sra.security.pac4j;\n \n import java.net.URI;\n+import java.util.Optional;\n import org.pac4j.core.exception.http.RedirectionAction;\n import org.pac4j.core.exception.http.WithContentAction;\n import org.pac4j.core.exception.http.WithLocationAction;\n@@ -32,27 +33,24 @@ public static Mono<Void> handle(\n             final RedirectionAction action,\n             final ServerWebExchangeContext swec) {\n \n-        if (action instanceof WithLocationAction) {\n-            WithLocationAction withLocationAction = (WithLocationAction) action;\n+        if (action instanceof WithLocationAction withLocationAction) {\n             swec.getNative().getResponse().setStatusCode(HttpStatus.FOUND);\n             swec.getNative().getResponse().getHeaders().setLocation(URI.create(withLocationAction.getLocation()));\n             return swec.getNative().getResponse().setComplete();\n-        } else if (action instanceof WithContentAction) {\n-            WithContentAction withContentAction = (WithContentAction) action;\n-            String content = withContentAction.getContent();\n+        }\n \n-            if (content == null) {\n-                throw new IllegalArgumentException(\"No content set for POST AuthnRequest\");\n-            }\n+        if (action instanceof WithContentAction withContentAction) {\n+            String content = Optional.ofNullable(withContentAction.getContent()).\n+                    orElseThrow(() -> new IllegalArgumentException(\"No content set for POST AuthnRequest\"));\n \n             return Mono.defer(() -> {\n                 swec.getNative().getResponse().getHeaders().setContentType(MediaType.TEXT_HTML);\n                 return swec.getNative().getResponse().\n                         writeWith(Mono.just(swec.getNative().getResponse().bufferFactory().wrap(content.getBytes())));\n             });\n-        } else {\n-            throw new IllegalArgumentException(\"Unsupported Action: \" + action.getClass().getName());\n         }\n+\n+        throw new IllegalArgumentException(\"Unsupported Action: \" + action.getClass().getName());\n     }\n \n     private RedirectionActionUtils() {"},{"sha":"c99801dac7da47d002c693f632a0ea89a44284d5","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2AuthenticationToken.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AuthenticationToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AuthenticationToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2AuthenticationToken.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -18,21 +18,24 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n+import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n-import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.pac4j.saml.credentials.SAML2AuthenticationCredentials;\n import org.springframework.security.authentication.AbstractAuthenticationToken;\n import org.springframework.security.core.authority.SimpleGrantedAuthority;\n \n public class SAML2AuthenticationToken extends AbstractAuthenticationToken {\n \n     private static final long serialVersionUID = 8322987617416135717L;\n \n-    private final SAML2Credentials credentials;\n+    private final SAML2AuthenticationCredentials credentials;\n \n-    public SAML2AuthenticationToken(final SAML2Credentials credentials) {\n-        super(credentials.getUserProfile().getRoles().stream().\n-                map(SimpleGrantedAuthority::new).collect(Collectors.toSet()));\n+    public SAML2AuthenticationToken(final SAML2AuthenticationCredentials credentials) {\n+        super(Optional.ofNullable(credentials.getUserProfile()).\n+                map(p -> p.getRoles().stream().map(SimpleGrantedAuthority::new).collect(Collectors.toSet())).\n+                orElse(Set.of()));\n         this.credentials = credentials;\n         this.setAuthenticated(true);\n     }\n@@ -43,7 +46,7 @@ public Object getCredentials() {\n     }\n \n     @Override\n-    public SAML2Credentials getPrincipal() {\n+    public SAML2AuthenticationCredentials getPrincipal() {\n         return credentials;\n     }\n }"},{"sha":"0f55618a88c7a5c2abe4cb6b3a03a7ffd9fdaa1d","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2LogoutResponseWebFilter.java","status":"modified","additions":13,"deletions":66,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2LogoutResponseWebFilter.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -18,21 +18,13 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n-import java.util.Optional;\n-import org.apache.syncope.sra.SessionConfig;\n import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n-import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.core.context.CallContext;\n-import org.pac4j.core.exception.http.OkAction;\n-import org.pac4j.core.exception.http.RedirectionAction;\n-import org.pac4j.core.profile.factory.ProfileManagerFactory;\n-import org.pac4j.core.util.Pac4jConstants;\n+import org.pac4j.core.credentials.Credentials;\n import org.pac4j.saml.client.SAML2Client;\n-import org.pac4j.saml.context.SAML2MessageContext;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.cache.CacheManager;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.web.server.WebFilterExchange;\n import org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler;\n@@ -51,94 +43,49 @@ public class SAML2LogoutResponseWebFilter implements WebFilter {\n     public static final ServerWebExchangeMatcher MATCHER =\n             ServerWebExchangeMatchers.pathMatchers(\"/logout/saml2/sso\");\n \n-    private static class ServerWebExchangeLogoutContext extends ServerWebExchangeContext {\n-\n-        ServerWebExchangeLogoutContext(final ServerWebExchange exchange) {\n-            super(exchange);\n-        }\n-\n-        @Override\n-        public Optional<String> getRequestParameter(final String name) {\n-            return Pac4jConstants.LOGOUT_ENDPOINT_PARAMETER.equals(name)\n-                    ? Optional.of(\"true\")\n-                    : super.getRequestParameter(name);\n-        }\n-    }\n-\n     private final SAML2Client saml2Client;\n \n     private final ServerLogoutSuccessHandler logoutSuccessHandler;\n \n-    private final CacheManager cacheManager;\n-\n     public SAML2LogoutResponseWebFilter(\n             final SAML2Client saml2Client,\n-            final SAML2ServerLogoutSuccessHandler logoutSuccessHandler,\n-            final CacheManager cacheManager) {\n+            final SAML2ServerLogoutSuccessHandler logoutSuccessHandler) {\n \n         this.saml2Client = saml2Client;\n         this.logoutSuccessHandler = logoutSuccessHandler;\n-        this.cacheManager = cacheManager;\n     }\n \n     private Mono<Void> handleLogoutResponse(\n             final ServerWebExchange exchange, final WebFilterChain chain, final ServerWebExchangeContext swec) {\n \n         try {\n-            SAML2MessageContext ctx = saml2Client.getContextProvider().buildContext(\n-                    new CallContext(swec, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT),\n-                    this.saml2Client);\n-            saml2Client.getLogoutProfileHandler().receive(ctx);\n-        } catch (OkAction e) {\n-            LOG.debug(\"LogoutResponse was actually validated but no postLogoutURL was set\", e);\n+            CallContext ctx = new CallContext(swec, NoOpSessionStore.INSTANCE);\n+            Credentials creds = saml2Client.getCredentialsExtractor().\n+                    extract(ctx).\n+                    orElseThrow(() -> new IllegalStateException(\"Could not extract credentials\"));\n+\n+            saml2Client.getLogoutProcessor().processLogout(ctx, creds);\n         } catch (Exception e) {\n             LOG.error(\"Could not validate LogoutResponse\", e);\n         }\n \n         return logoutSuccessHandler.onLogoutSuccess(new WebFilterExchange(exchange, chain), null);\n     }\n \n-    private Mono<Void> handleLogoutRequest(\n-            final ServerWebExchange exchange, final WebFilterChain chain, final ServerWebExchangeContext swec) {\n-\n-        return exchange.getSession().\n-                switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n-                flatMap(session -> {\n-                    cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n-\n-                    return session.invalidate().then(Mono.defer(() -> {\n-                        try {\n-                            saml2Client.getCredentialsExtractor().extract(new CallContext(\n-                                    swec, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT));\n-                        } catch (RedirectionAction action) {\n-                            return RedirectionActionUtils.handle(action, swec);\n-                        }\n-\n-                        return chain.filter(exchange).then(Mono.empty());\n-                    }));\n-                });\n-    }\n-\n     private Mono<Void> handleGET(final ServerWebExchange exchange, final WebFilterChain chain) {\n         if (exchange.getRequest().getQueryParams().getFirst(\"SAMLResponse\") != null) {\n             return handleLogoutResponse(exchange, chain, new ServerWebExchangeContext(exchange));\n-        } else if (exchange.getRequest().getQueryParams().getFirst(\"SAMLRequest\") != null) {\n-            return handleLogoutRequest(exchange, chain, new ServerWebExchangeLogoutContext(exchange));\n         }\n \n         return chain.filter(exchange).then(Mono.empty());\n     }\n \n     private Mono<Void> handlePOST(final ServerWebExchange exchange, final WebFilterChain chain) {\n-        return exchange.getFormData().flatMap(form -> {\n-            if (form.containsKey(\"SAMLResponse\")) {\n-                return handleLogoutResponse(exchange, chain, new ServerWebExchangeContext(exchange).setForm(form));\n-            } else if (form.containsKey(\"SAMLRequest\")) {\n-                return handleLogoutRequest(exchange, chain, new ServerWebExchangeLogoutContext(exchange).setForm(form));\n-            }\n-\n-            return chain.filter(exchange).then(Mono.empty());\n-        });\n+        return exchange.getFormData().\n+                filter(form -> form.containsKey(\"SAMLResponse\")).\n+                flatMap(form -> handleLogoutResponse(\n+                exchange, chain, new ServerWebExchangeContext(exchange).setForm(form))).\n+                or(chain.filter(exchange).then(Mono.empty()));\n     }\n \n     @Override"},{"sha":"57f5fcee809e9c70638b964e194075b40dc006c2","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2RequestServerLogoutHandler.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2RequestServerLogoutHandler.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -23,9 +23,8 @@\n import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.pac4j.core.context.CallContext;\n-import org.pac4j.core.profile.factory.ProfileManagerFactory;\n import org.pac4j.saml.client.SAML2Client;\n-import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.pac4j.saml.credentials.SAML2AuthenticationCredentials;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.cache.CacheManager;\n@@ -51,7 +50,8 @@ public SAML2RequestServerLogoutHandler(final SAML2Client saml2Client, final Cach\n     public Mono<Void> logout(final WebFilterExchange exchange, final Authentication authentication) {\n         return exchange.getExchange().getSession().\n                 flatMap(session -> {\n-                    SAML2Credentials credentials = (SAML2Credentials) authentication.getPrincipal();\n+                    SAML2AuthenticationCredentials credentials = \n+                            (SAML2AuthenticationCredentials) authentication.getPrincipal();\n \n                     LOG.debug(\"Creating SAML2 SP Logout Request for IDP[{}] and Profile[{}]\",\n                             saml2Client.getIdentityProviderResolvedEntityId(), credentials.getUserProfile());\n@@ -60,9 +60,7 @@ public Mono<Void> logout(final WebFilterExchange exchange, final Authentication\n \n                     cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n                     return session.invalidate().then(saml2Client.getLogoutAction(\n-                            new CallContext(swec, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT),\n-                            credentials.getUserProfile(),\n-                            null).\n+                            new CallContext(swec, NoOpSessionStore.INSTANCE), credentials.getUserProfile(), null).\n                             map(action -> RedirectionActionUtils.handle(action, swec)).\n                             orElseThrow(() -> new IllegalStateException(\"No action generated\")));\n                 }).onErrorResume(Mono::error);"},{"sha":"21b8923e8d6e4321d8522d69ddf319c1928d72ab","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2SecurityConfigUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2SecurityConfigUtils.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -84,7 +84,7 @@ public static void forLogout(\n                     SAML2ServerLogoutSuccessHandler.class);\n \n             SAML2LogoutResponseWebFilter logoutResponseWebFilter =\n-                    new SAML2LogoutResponseWebFilter(saml2Client, logoutSuccessHandler, cacheManager);\n+                    new SAML2LogoutResponseWebFilter(saml2Client, logoutSuccessHandler);\n             builder.and().addFilterAt(logoutResponseWebFilter, SecurityWebFiltersOrder.LOGOUT);\n         } catch (ClassNotFoundException e) {\n             LOG.error(\"While creating instance of {}\", SAML2ServerLogoutSuccessHandler.class.getName(), e);"},{"sha":"a504bc97117b0f90755d08e7db1033be925bc564","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationRequestWebFilter.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationRequestWebFilter.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.sra.security.saml2;\n \n+import java.net.URI;\n import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n import org.apache.syncope.sra.security.pac4j.RedirectionActionUtils;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n+import org.apache.syncope.sra.session.SessionUtils;\n import org.pac4j.core.context.CallContext;\n-import org.pac4j.core.profile.factory.ProfileManagerFactory;\n+import org.pac4j.core.util.generator.ValueGenerator;\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -54,14 +56,23 @@ public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain\n         return MATCHER.matches(exchange).\n                 filter(MatchResult::isMatch).\n                 switchIfEmpty(chain.filter(exchange).then(Mono.empty())).\n-                flatMap(matchResult -> {\n+                flatMap(r -> exchange.getSession()).\n+                flatMap(session -> {\n                     LOG.debug(\"Creating SAML2 SP Authentication Request for IDP[{}]\",\n                             saml2Client.getIdentityProviderResolvedEntityId());\n \n+                    saml2Client.setStateGenerator(new ValueGenerator() {\n+\n+                        @Override\n+                        public String generateValue(final CallContext ctx) {\n+                            return session.<URI>getRequiredAttribute(SessionUtils.INITIAL_REQUEST_URI).toASCIIString();\n+                        }\n+                    });\n+\n                     ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange);\n \n                     return saml2Client.getRedirectionAction(\n-                            new CallContext(swec, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT)).\n+                            new CallContext(swec, NoOpSessionStore.INSTANCE)).\n                             map(action -> RedirectionActionUtils.handle(action, swec)).\n                             orElseThrow(() -> new IllegalStateException(\"No action generated\"));\n                 }).onErrorResume(Mono::error);"},{"sha":"90f8346ccea536d4acee2afc3e7cb73905cdef61","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2WebSsoAuthenticationWebFilter.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2WebSsoAuthenticationWebFilter.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -22,11 +22,10 @@\n import org.apache.syncope.sra.security.pac4j.NoOpSessionStore;\n import org.apache.syncope.sra.security.pac4j.ServerWebExchangeContext;\n import org.apache.syncope.sra.security.web.server.DoNothingIfCommittedServerRedirectStrategy;\n-import org.apache.syncope.sra.session.SessionUtils;\n import org.pac4j.core.context.CallContext;\n-import org.pac4j.core.profile.factory.ProfileManagerFactory;\n+import org.pac4j.core.credentials.Credentials;\n import org.pac4j.saml.client.SAML2Client;\n-import org.pac4j.saml.credentials.SAML2Credentials;\n+import org.pac4j.saml.credentials.SAML2AuthenticationCredentials;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.web.server.ServerRedirectStrategy;\n@@ -71,26 +70,27 @@ public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain\n \n     private ServerWebExchangeMatcher matchSamlResponse() {\n         return exchange -> exchange.getFormData().\n-                filter(form -> form.containsKey(\"SAMLResponse\")).\n+                filter(form -> form.containsKey(\"SAMLResponse\") && form.containsKey(\"RelayState\")).\n                 flatMap(form -> ServerWebExchangeMatcher.MatchResult.match()).\n                 switchIfEmpty(ServerWebExchangeMatcher.MatchResult.notMatch());\n     }\n \n     private ServerAuthenticationConverter convertSamlResponse() {\n         return exchange -> exchange.getFormData().\n                 flatMap(form -> MATCHER.matches(exchange).\n-                flatMap(matchResult -> {\n+                flatMap(r -> {\n                     ServerWebExchangeContext swec = new ServerWebExchangeContext(exchange).setForm(form);\n+                    CallContext ctx = new CallContext(swec, NoOpSessionStore.INSTANCE);\n \n-                    SAML2Credentials credentials = (SAML2Credentials) saml2Client.getCredentialsExtractor().\n-                            extract(new CallContext(\n-                                    swec, NoOpSessionStore.INSTANCE, ProfileManagerFactory.DEFAULT)).\n-                            orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n+                    Credentials creds = saml2Client.getCredentialsExtractor().\n+                            extract(ctx).\n+                            orElseThrow(() -> new IllegalStateException(\"Could not extract credentials\"));\n \n-                    saml2Client.getAuthenticator().validate(\n-                            new CallContext(swec, NoOpSessionStore.INSTANCE), credentials);\n+                    SAML2AuthenticationCredentials authCreds = saml2Client.validateCredentials(ctx, creds).\n+                            map(SAML2AuthenticationCredentials.class::cast).\n+                            orElseThrow(() -> new IllegalArgumentException(\"Invalid SAML credentials provided\"));\n \n-                    return Mono.just(new SAML2AuthenticationToken(credentials));\n+                    return Mono.just(new SAML2AuthenticationToken(authCreds));\n                 }));\n     }\n \n@@ -103,10 +103,10 @@ private ServerAuthenticationSuccessHandler redirectToInitialRequestURI() {\n             public Mono<Void> onAuthenticationSuccess(\n                     final WebFilterExchange webFilterExchange, final Authentication authentication) {\n \n-                return webFilterExchange.getExchange().getSession().\n-                        flatMap(session -> this.redirectStrategy.sendRedirect(\n+                return webFilterExchange.getExchange().getFormData().\n+                        flatMap(form -> this.redirectStrategy.sendRedirect(\n                         webFilterExchange.getExchange(),\n-                        session.<URI>getRequiredAttribute(SessionUtils.INITIAL_REQUEST_URI)));\n+                        URI.create(form.get(\"RelayState\").get(0))));\n             }\n         };\n     }"},{"sha":"ea56675260e52facb5c8e656a6129d2689e47fd5","filename":"sra/src/main/resources/sra.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -23,6 +23,7 @@ server.port=8080\n management.endpoint.gateway.enabled=true\n management.endpoints.web.exposure.include=info,health,loggers,metrics,gateway,sraSessions\n management.endpoint.health.show-details=ALWAYS\n+management.endpoint.env.show-values=WHEN_AUTHORIZED\n spring.cloud.discovery.client.health-indicator.enabled=false\n \n service.discovery.address=http://localhost:8080/"},{"sha":"feb07430194722bb6b39f30806f5ef84fc17b57d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/WAContext.java","status":"modified","additions":49,"deletions":31,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FWAContext.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.config;\n \n+import com.github.benmanes.caffeine.cache.Cache;\n import com.github.benmanes.caffeine.cache.Caffeine;\n import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.warrenstrange.googleauth.IGoogleAuthenticator;\n@@ -60,8 +61,9 @@\n import org.apache.syncope.wa.starter.mapping.SAML2SPClientAppTOMapper;\n import org.apache.syncope.wa.starter.oidc.WAOIDCJWKSGeneratorService;\n import org.apache.syncope.wa.starter.pac4j.saml.WASAML2ClientCustomizer;\n-import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n-import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n+import org.apache.syncope.wa.starter.saml.idp.WASamlIdPCasEventListener;\n+import org.apache.syncope.wa.starter.saml.idp.metadata.WASamlIdPMetadataGenerator;\n+import org.apache.syncope.wa.starter.saml.idp.metadata.WASamlIdPMetadataLocator;\n import org.apache.syncope.wa.starter.services.WAServiceRegistry;\n import org.apache.syncope.wa.starter.surrogate.WASurrogateAuthenticationService;\n import org.apache.syncope.wa.starter.u2f.WAU2FDeviceRepository;\n@@ -82,9 +84,11 @@\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n import org.apereo.cas.support.pac4j.authentication.clients.DelegatedClientFactoryCustomizer;\n import org.apereo.cas.support.pac4j.authentication.handler.support.DelegatedClientAuthenticationHandler;\n+import org.apereo.cas.support.saml.idp.SamlIdPCasEventListener;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n+import org.apereo.cas.support.saml.services.idp.metadata.SamlIdPMetadataDocument;\n import org.apereo.cas.util.DateTimeUtils;\n import org.apereo.cas.util.LdapUtils;\n import org.apereo.cas.util.crypto.CipherExecutor;\n@@ -98,6 +102,7 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Lazy;\n import org.springframework.context.annotation.ScopedProxyMode;\n \n @Configuration(proxyBeanMethods = false)\n@@ -221,36 +226,49 @@ public RegisteredServiceMapper registeredServiceMapper(\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n             final ConfigurableApplicationContext ctx,\n-            final WARestClient restClient,\n+            final WARestClient waRestClient,\n             final RegisteredServiceMapper registeredServiceMapper,\n             @Qualifier(\"serviceRegistryListeners\")\n             final ObjectProvider<List<ServiceRegistryListener>> serviceRegistryListeners) {\n \n         WAServiceRegistry registry = new WAServiceRegistry(\n-                restClient, registeredServiceMapper, ctx,\n+                waRestClient, registeredServiceMapper, ctx,\n                 Optional.ofNullable(serviceRegistryListeners.getIfAvailable()).orElseGet(ArrayList::new));\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n+    @Bean\n+    @RefreshScope(proxyMode = ScopedProxyMode.DEFAULT)\n+    @Lazy(false)\n+    public SamlIdPCasEventListener samlIdPCasEventListener() {\n+        return new WASamlIdPCasEventListener();\n+    }\n+\n     @Bean\n     public SamlIdPMetadataGenerator samlIdPMetadataGenerator(\n-            final WARestClient restClient,\n+            final WARestClient waRestClient,\n             final SamlIdPMetadataGeneratorConfigurationContext context) {\n \n-        return new RestfulSamlIdPMetadataGenerator(context, restClient);\n+        return new WASamlIdPMetadataGenerator(context, waRestClient);\n     }\n \n     @Bean\n-    public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClient) {\n-        return new RestfulSamlIdPMetadataLocator(\n-                CipherExecutor.noOpOfStringToString(),\n-                Caffeine.newBuilder().build(),\n-                restClient);\n+    public SamlIdPMetadataLocator samlIdPMetadataLocator(\n+            @Qualifier(\"samlIdPMetadataGeneratorCipherExecutor\")\n+            final CipherExecutor<String, String> cipherExecutor,\n+            @Qualifier(\"samlIdPMetadataCache\")\n+            final Cache<String, SamlIdPMetadataDocument> samlIdPMetadataCache,\n+            final WARestClient waRestClient) {\n+\n+        return new WASamlIdPMetadataLocator(\n+                cipherExecutor,\n+                samlIdPMetadataCache,\n+                waRestClient);\n     }\n \n     @Bean\n-    public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient restClient) {\n-        return plan -> plan.registerAuditTrailManager(new WAAuditTrailManager(restClient));\n+    public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient waRestClient) {\n+        return plan -> plan.registerAuditTrailManager(new WAAuditTrailManager(waRestClient));\n     }\n \n     @ConditionalOnMissingBean(name = \"syncopeWAEventRepositoryFilter\")\n@@ -261,25 +279,25 @@ public CasEventRepositoryFilter syncopeWAEventRepositoryFilter() {\n \n     @Bean\n     public CasEventRepository casEventRepository(\n-            final WARestClient restClient,\n+            final WARestClient waRestClient,\n             @Qualifier(\"syncopeWAEventRepositoryFilter\")\n             final CasEventRepositoryFilter syncopeWAEventRepositoryFilter) {\n \n-        return new WAEventRepository(syncopeWAEventRepositoryFilter, restClient);\n+        return new WAEventRepository(syncopeWAEventRepositoryFilter, waRestClient);\n     }\n \n     @Bean\n-    public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {\n-        return new WASAML2ClientCustomizer(restClient);\n+    public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient waRestClient) {\n+        return new WASAML2ClientCustomizer(waRestClient);\n     }\n \n     @Bean\n     public WAGoogleMfaAuthTokenRepository oneTimeTokenAuthenticatorTokenRepository(\n             final CasConfigurationProperties casProperties,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n         return new WAGoogleMfaAuthTokenRepository(\n-                restClient, casProperties.getAuthn().getMfa().getGauth().getCore().getTimeStepSize());\n+                waRestClient, casProperties.getAuthn().getMfa().getGauth().getCore().getTimeStepSize());\n     }\n \n     @ConditionalOnMissingBean(name = CUSTOM_GOOGLE_AUTHENTICATOR_ACCOUNT_REGISTRY)\n@@ -292,7 +310,7 @@ public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n             @Qualifier(\"googleAuthenticatorScratchCodesCipherExecutor\")\n             final CipherExecutor<Number, Number> googleAuthenticatorScratchCodesCipherExecutor,\n             final IGoogleAuthenticator googleAuthenticatorInstance,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n         /*\n          * Declaring the LDAP-based repository as a Spring bean that would be conditionally activated\n@@ -314,16 +332,16 @@ public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n                     connectionFactory,\n                     ldap);\n         }\n-        return new WAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n+        return new WAGoogleMfaAuthCredentialRepository(waRestClient, googleAuthenticatorInstance);\n     }\n \n     @Bean\n     public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n             final CasConfigurationProperties casProperties,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n         return new WAOIDCJWKSGeneratorService(\n-                restClient,\n+                waRestClient,\n                 casProperties.getAuthn().getOidc().getJwks().getCore().getJwksKeyId(),\n                 casProperties.getAuthn().getOidc().getJwks().getCore().getJwksType(),\n                 casProperties.getAuthn().getOidc().getJwks().getCore().getJwksKeySize());\n@@ -332,34 +350,34 @@ public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(\n     @Bean\n     public WebAuthnCredentialRepository webAuthnCredentialRepository(\n             final CasConfigurationProperties casProperties,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n-        return new WAWebAuthnCredentialRepository(casProperties, restClient);\n+        return new WAWebAuthnCredentialRepository(casProperties, waRestClient);\n     }\n \n     @Bean\n     public U2FDeviceRepository u2fDeviceRepository(\n             final CasConfigurationProperties casProperties,\n-            final WARestClient restClient) {\n+            final WARestClient waRestClient) {\n \n         U2FCoreMultifactorAuthenticationProperties u2f = casProperties.getAuthn().getMfa().getU2f().getCore();\n         OffsetDateTime expirationDate = OffsetDateTime.now().\n                 minus(u2f.getExpireDevices(), DateTimeUtils.toChronoUnit(u2f.getExpireDevicesTimeUnit()));\n         LoadingCache<String, String> requestStorage = Caffeine.newBuilder().\n                 expireAfterWrite(u2f.getExpireRegistrations(), u2f.getExpireRegistrationsTimeUnit()).\n                 build(key -> StringUtils.EMPTY);\n-        return new WAU2FDeviceRepository(casProperties, requestStorage, restClient, expirationDate);\n+        return new WAU2FDeviceRepository(casProperties, requestStorage, waRestClient, expirationDate);\n     }\n \n     @Bean\n-    public SurrogateAuthenticationService surrogateAuthenticationService(final WARestClient restClient) {\n-        return new WASurrogateAuthenticationService(restClient);\n+    public SurrogateAuthenticationService surrogateAuthenticationService(final WARestClient waRestClient) {\n+        return new WASurrogateAuthenticationService(waRestClient);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final WARestClient restClient) {\n-        return new SyncopeCoreHealthIndicator(restClient);\n+    public SyncopeCoreHealthIndicator syncopeCoreHealthIndicator(final WARestClient waRestClient) {\n+        return new SyncopeCoreHealthIndicator(waRestClient);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"da1bcaf72c80ff759a04c87088c79436e27c4294","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/WASamlIdPCasEventListener.java","status":"renamed","additions":10,"deletions":16,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2FWASamlIdPCasEventListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2FWASamlIdPCasEventListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2FWASamlIdPCasEventListener.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -16,22 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.wa.starter.saml.idp;\n \n-public enum JWSAlgorithm {\n-    HS256,\n-    HS384,\n-    HS512,\n-    RS256,\n-    RS384,\n-    RS512,\n-    ES256,\n-    ES384,\n-    ES512,\n-    PS256,\n-    PS384,\n-    PS512,\n-    EdDSA,\n-    ES256K;\n+import org.apereo.cas.support.saml.idp.SamlIdPCasEventListener;\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n \n+public class WASamlIdPCasEventListener implements SamlIdPCasEventListener {\n+\n+    @Override\n+    public void handleApplicationReadyEvent(final ApplicationReadyEvent event) {\n+        // skip generating IdP metadata at this stage, as\n+        // org.apereo.cas.support.saml.idp.DefaultSamlIdPCasEventListener is doing\n+    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/JWSAlgorithm.java"},{"sha":"07a8227ee8733382e4981e93ddf5b68f17b3e78d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/WASamlIdPMetadataGenerator.java","status":"renamed","additions":27,"deletions":15,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FWASamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FWASamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FWASamlIdPMetadataGenerator.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -33,28 +33,48 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerator {\n+public class WASamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataGenerator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASamlIdPMetadataGenerator.class);\n \n     private final WARestClient waRestClient;\n \n-    public RestfulSamlIdPMetadataGenerator(\n+    public WASamlIdPMetadataGenerator(\n             final SamlIdPMetadataGeneratorConfigurationContext samlIdPMetadataGeneratorConfigurationContext,\n             final WARestClient waRestClient) {\n \n         super(samlIdPMetadataGeneratorConfigurationContext);\n         this.waRestClient = waRestClient;\n     }\n \n+    @Override\n+    public String getAppliesToFor(final Optional<SamlRegisteredService> registeredService) {\n+        return registeredService.\n+                map(SamlRegisteredService::getName).\n+                orElse(SAML2IdPEntityService.DEFAULT_OWNER);\n+    }\n+\n+    private SyncopeClient getSyncopeClient() {\n+        if (!waRestClient.isReady()) {\n+            LOG.info(\"Syncope client is not yet ready\");\n+            throw new IllegalStateException(\"Syncope core is not yet ready to access requests\");\n+        }\n+        return waRestClient.getSyncopeClient();\n+    }\n+\n+    @Override\n+    public SamlIdPMetadataDocument generate(final Optional<SamlRegisteredService> registeredService) throws Exception {\n+        return super.generate(registeredService);\n+    }\n+\n     @Override\n     protected SamlIdPMetadataDocument finalizeMetadataDocument(\n             final SamlIdPMetadataDocument doc,\n             final Optional<SamlRegisteredService> registeredService) throws Exception {\n \n-        LOG.info(\"Generating new SAML2 IdP metadata document\");\n+        doc.setAppliesTo(getAppliesToFor(registeredService));\n \n-        doc.setAppliesTo(SAML2IdPEntityService.DEFAULT_OWNER);\n+        LOG.info(\"Setting new SAML2 IdP metadata document for {}\", doc.getAppliesTo());\n \n         SAML2IdPEntityTO entityTO = new SAML2IdPEntityTO.Builder().\n                 key(doc.getAppliesTo()).\n@@ -84,23 +104,15 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n \n     @Override\n     public Pair<String, String> buildSelfSignedEncryptionCert(final Optional<SamlRegisteredService> registeredService)\n-        throws Exception {\n+            throws Exception {\n \n         return generateCertificateAndKey();\n     }\n \n     @Override\n     public Pair<String, String> buildSelfSignedSigningCert(final Optional<SamlRegisteredService> registeredService)\n-        throws Exception {\n+            throws Exception {\n \n         return generateCertificateAndKey();\n     }\n-\n-    private SyncopeClient getSyncopeClient() {\n-        if (!waRestClient.isReady()) {\n-            LOG.info(\"Syncope client is not yet ready\");\n-            throw new IllegalStateException(\"Syncope core is not yet ready to access requests\");\n-        }\n-        return waRestClient.getSyncopeClient();\n-    }\n }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java"},{"sha":"fa490e195f2f0d47d293ba2b934e3c02158eae10","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/WASamlIdPMetadataLocator.java","status":"renamed","additions":15,"deletions":10,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FWASamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FWASamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FWASamlIdPMetadataLocator.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -35,13 +35,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocator {\n+public class WASamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocator {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(RestfulSamlIdPMetadataLocator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WASamlIdPMetadataLocator.class);\n \n     private final WARestClient waRestClient;\n \n-    public RestfulSamlIdPMetadataLocator(\n+    public WASamlIdPMetadataLocator(\n             final CipherExecutor<String, String> metadataCipherExecutor,\n             final Cache<String, SamlIdPMetadataDocument> metadataCache,\n             final WARestClient waRestClient) {\n@@ -50,6 +50,13 @@ public RestfulSamlIdPMetadataLocator(\n         this.waRestClient = waRestClient;\n     }\n \n+    @Override\n+    public String getAppliesToFor(final Optional<SamlRegisteredService> registeredService) {\n+        return registeredService.\n+                map(SamlRegisteredService::getName).\n+                orElse(SAML2IdPEntityService.DEFAULT_OWNER);\n+    }\n+\n     @Override\n     public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredService> registeredService) {\n         try {\n@@ -94,7 +101,7 @@ public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredServic\n                 if (LOG.isDebugEnabled()) {\n                     LOG.error(\"While fetching SAML2 IdP metadata\", e);\n                 } else {\n-                    LOG.error(\"While fetching SAML2 IdP metadata: \" + e.getMessage());\n+                    LOG.error(\"While fetching SAML2 IdP metadata: {}\", e.getMessage());\n                 }\n             }\n         }\n@@ -103,16 +110,14 @@ public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredServic\n     }\n \n     private SAML2IdPEntityTO fetchFromCore(final Optional<SamlRegisteredService> registeredService) {\n-        SAML2IdPEntityTO result = null;\n+        SAML2IdPEntityService idpEntityService = getSyncopeClient().getService(SAML2IdPEntityService.class);\n \n-        String appliesToFor = registeredService.map(SamlRegisteredService::getName).\n-                orElse(SAML2IdPEntityService.DEFAULT_OWNER);\n-        SAML2IdPEntityService service = getSyncopeClient().getService(SAML2IdPEntityService.class);\n+        SAML2IdPEntityTO result = null;\n         try {\n-            result = service.get(appliesToFor);\n+            result = idpEntityService.get(getAppliesToFor(registeredService));\n         } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.NotFound && registeredService.isPresent()) {\n-                result = service.get(SAML2IdPEntityService.DEFAULT_OWNER);\n+                result = idpEntityService.get(SAML2IdPEntityService.DEFAULT_OWNER);\n             } else {\n                 throw e;\n             }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java"},{"sha":"29665b7afe3aac189e512ac7f8048d882dca1c34","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/WAServiceRegistry.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FWAServiceRegistry.java?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.types.ClientAppType;\n@@ -142,14 +143,15 @@ public <T extends RegisteredService> T findServiceByExactServiceName(final Strin\n \n     @Override\n     public RegisteredService findServiceByExactServiceName(final String name) {\n-        SyncopeClient syncopeClient = waRestClient.getSyncopeClient();\n-        if (syncopeClient == null) {\n-            LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-            return null;\n-        } else {\n-            LOG.info(\"Searching for application definition by name {}\", name);\n-            return registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n-                    getService(WAClientAppService.class).read(name, null));\n-        }\n+        return Optional.ofNullable(waRestClient.getSyncopeClient()).\n+                map(syncopeClient -> {\n+                    LOG.info(\"Searching for application definition by name {}\", name);\n+                    return registeredServiceMapper.toRegisteredService(waRestClient.getSyncopeClient().\n+                            getService(WAClientAppService.class).read(name, null));\n+                }).\n+                orElseGet(() -> {\n+                    LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n+                    return null;\n+                });\n     }\n }"},{"sha":"7c8ccd378f5c92314cedd28c0c2ec6c3efbc987d","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/51cf43262f79775228a439ae336c04598269af04/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=51cf43262f79775228a439ae336c04598269af04","patch":"@@ -39,6 +39,7 @@ cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n management.endpoints.enabled-by-default=true\n management.endpoints.web.exposure.include=info,health,env,loggers,ssoSessions,registeredServices,refresh,authenticationHandlers,authenticationPolicies,resolveAttributes\n management.endpoint.health.show-details=ALWAYS\n+management.endpoint.env.show-values=WHEN_AUTHORIZED\n spring.cloud.discovery.client.health-indicator.enabled=false\n \n # Cache service definitions for 5 minutes"}]}