{"sha":"4f7ab995a744db1596e925f29dcd9c74dfe74c5e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRmN2FiOTk1YTc0NGRiMTU5NmU5MjVmMjlkY2Q5Yzc0ZGZlNzRjNWU=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-08T12:19:05Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-08T12:19:05Z"},"message":"[SYNCOPE-259]\nCleanup. Some small refactorings.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1430250 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f995a2f4a6dfd6e20a619d491d0e2ff18bb0ad7a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f995a2f4a6dfd6e20a619d491d0e2ff18bb0ad7a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4f7ab995a744db1596e925f29dcd9c74dfe74c5e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f7ab995a744db1596e925f29dcd9c74dfe74c5e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4f7ab995a744db1596e925f29dcd9c74dfe74c5e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/comments","author":null,"committer":null,"parents":[{"sha":"5d58e023a63a8e25d87225aa7547d24d733a2065","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5d58e023a63a8e25d87225aa7547d24d733a2065","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5d58e023a63a8e25d87225aa7547d24d733a2065"}],"stats":{"total":258,"additions":135,"deletions":123},"files":[{"sha":"88ec2088583d3686ab03503aa0b43e01a414efbc","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -37,32 +37,32 @@ public ConfigurationServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n \t@Override\r\n \tpublic ConfigurationTO create(ConfigurationTO configurationTO) {\r\n-\t\treturn restTemplate.postForObject(BASE_URL + \"configuration/create\",\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"configuration/create\",\r\n \t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic ConfigurationTO delete(String key) {\r\n \t\treturn restTemplate\r\n-\t\t\t\t.getForObject(BASE_URL + \"configuration/delete/{key}.json\",\r\n+\t\t\t\t.getForObject(baseUrl + \"configuration/delete/{key}.json\",\r\n \t\t\t\t\t\tConfigurationTO.class, key);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<ConfigurationTO> list() {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n \t\t\t\t+ \"configuration/list.json\", ConfigurationTO[].class));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic ConfigurationTO read(String key) {\r\n-\t\treturn restTemplate.getForObject(BASE_URL\r\n+\t\treturn restTemplate.getForObject(baseUrl\r\n \t\t\t\t+ \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n-\t\treturn restTemplate.postForObject(BASE_URL + \"configuration/update\",\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"configuration/update\",\r\n \t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n \t}\r\n \r"},{"sha":"2420ec43e1c2d1126c73c0a14b07d08b87695257","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -35,19 +35,19 @@ public ConnectorServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n     @Override\r\n     public ConnInstanceTO create(ConnInstanceTO connectorTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"connector/create.json\", connectorTO,\r\n+        return restTemplate.postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO update(Long connectorId, ConnInstanceTO connectorTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"connector/update.json\", connectorTO,\r\n+        return restTemplate.postForObject(baseUrl + \"connector/update.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO delete(Long connectorId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"connector/delete/{connectorId}.json\",\r\n+        return restTemplate.getForObject(baseUrl + \"connector/delete/{connectorId}.json\",\r\n                 ConnInstanceTO.class, connectorId);\r\n     }\r\n \r\n@@ -57,13 +57,13 @@ public List<ConnInstanceTO> list(String lang) {\n                 ? \"?lang=\" + lang\r\n                 : \"\";\r\n \r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"connector/list.json\" + param,\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"connector/list.json\" + param,\r\n                 ConnInstanceTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO read(Long connectorId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n+        return restTemplate.getForObject(baseUrl + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n                 connectorId);\r\n     }\r\n \r\n@@ -73,7 +73,7 @@ public List<ConnBundleTO> getBundles(String lang) {\n                 ? \"?lang=\" + lang\r\n                 : \"\";\r\n \r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"connector/bundle/list.json\" + param,\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"connector/bundle/list.json\" + param,\r\n                 ConnBundleTO[].class));\r\n     }\r\n \r\n@@ -83,25 +83,25 @@ public List<String> getSchemaNames(Long connectorId, ConnInstanceTO connectorTO,\n                 ? \"?showall=true\"\r\n                 : \"?showall=false\";\r\n \r\n-        return Arrays.asList(restTemplate.postForObject(BASE_URL + \"connector/schema/list\" + param, connectorTO,\r\n+        return Arrays.asList(restTemplate.postForObject(baseUrl + \"connector/schema/list\" + param, connectorTO,\r\n                 String[].class));\r\n     }\r\n \r\n     @Override\r\n     public List<ConnConfProperty> getConfigurationProperties(Long connectorId) {\r\n         return Arrays.asList(restTemplate\r\n-                .getForObject(BASE_URL + \"connector/{connectorId}/configurationProperty/list\",\r\n+                .getForObject(baseUrl + \"connector/{connectorId}/configurationProperty/list\",\r\n                         ConnConfProperty[].class, connectorId));\r\n     }\r\n \r\n     @Override\r\n     public boolean validate(ConnInstanceTO connectorTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"connector/check.json\", connectorTO, Boolean.class);\r\n+        return restTemplate.postForObject(baseUrl + \"connector/check.json\", connectorTO, Boolean.class);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO readConnectorBean(String resourceName) {\r\n-        return restTemplate.getForObject(BASE_URL + \"connector/{resourceName}/connectorBean\",\r\n+        return restTemplate.getForObject(baseUrl + \"connector/{resourceName}/connectorBean\",\r\n                 ConnInstanceTO.class, resourceName);\r\n     }\r\n \r"},{"sha":"ee3304ae9225af8fcbabf7c9cf12b687bc3bc0fb","filename":"client/src/main/java/org/apache/syncope/services/proxy/EntitlementServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -34,12 +34,12 @@ public EntitlementServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \t@Override\r\n \tpublic Set<String> getAllEntitlements() {\r\n \t\treturn new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n-                BASE_URL + \"auth/allentitlements.json\", String[].class)));\r\n+                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic Set<String> getMyEntitlements() {\r\n-\t\treturn new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+\t\treturn new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n                 + \"auth/entitlements.json\", String[].class)));\r\n \t}\r\n \r"},{"sha":"ea6e856ce9d70c7baefd712e8256e280037210ab","filename":"client/src/main/java/org/apache/syncope/services/proxy/LoggerServiceProxy.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -36,34 +36,34 @@ public LoggerServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n     @Override\r\n     public List<LoggerTO> listLogs() {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public List<AuditLoggerName> listAudits() {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\",\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"logger/audit/list\",\r\n                 AuditLoggerName[].class));\r\n     }\r\n \r\n     @Override\r\n     public LoggerTO setLogLevel(String name, Level level) {\r\n-        return restTemplate.postForObject(BASE_URL + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n+        return restTemplate.postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n                 level);\r\n     }\r\n \r\n     @Override\r\n     public LoggerTO deleteLog(String name) {\r\n-        return restTemplate.getForObject(BASE_URL + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n+        return restTemplate.getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n     }\r\n \r\n     @Override\r\n     public void enableAudit(AuditLoggerName auditLoggerName) {\r\n-        restTemplate.put(BASE_URL + \"logger/audit/enable\", auditLoggerName);\r\n+        restTemplate.put(baseUrl + \"logger/audit/enable\", auditLoggerName);\r\n     }\r\n \r\n     @Override\r\n     public void disableAudit(AuditLoggerName auditLoggerName) {\r\n-        restTemplate.put(BASE_URL + \"logger/audit/disable\", auditLoggerName);\r\n+        restTemplate.put(baseUrl + \"logger/audit/disable\", auditLoggerName);\r\n     }\r\n \r\n }\r"},{"sha":"c498b6b2331cda7cc9f85b9c7be8561458a8a140","filename":"client/src/main/java/org/apache/syncope/services/proxy/NotificationServiceProxy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -33,31 +33,31 @@ public NotificationServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n     @Override\r\n     public NotificationTO read(Long notificationId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"notification/read/{notificationId}.json\",\r\n+        return restTemplate.getForObject(baseUrl + \"notification/read/{notificationId}.json\",\r\n                 NotificationTO.class, notificationId);\r\n     }\r\n \r\n     @Override\r\n     public List<NotificationTO> list() {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"notification/list.json\",\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"notification/list.json\",\r\n                 NotificationTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO create(NotificationTO notificationTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"notification/create.json\", notificationTO,\r\n+        return restTemplate.postForObject(baseUrl + \"notification/create.json\", notificationTO,\r\n                 NotificationTO.class);\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO update(Long notificationId, NotificationTO notificationTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"notification/update.json\", notificationTO,\r\n+        return restTemplate.postForObject(baseUrl + \"notification/update.json\", notificationTO,\r\n                 NotificationTO.class);\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO delete(Long notificationId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"notification/delete/{notificationId}.json\",\r\n+        return restTemplate.getForObject(baseUrl + \"notification/delete/{notificationId}.json\",\r\n                 NotificationTO.class, notificationId);\r\n     }\r\n \r"},{"sha":"1cb784b28068ef3f4704c1c49d484cc316732355","filename":"client/src/main/java/org/apache/syncope/services/proxy/PolicyServiceProxy.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -34,7 +34,7 @@ public PolicyServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \t@Override\r\n \tpublic <T extends PolicyTO> T create(final T policyTO) {\r\n \t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tT result = (T) restTemplate.postForObject(BASE_URL\r\n+\t\tT result = (T) restTemplate.postForObject(baseUrl\r\n \t\t\t\t+ \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n \t\t\t\ttypeToUrl(policyTO.getType()));\r\n \t\treturn result;\r\n@@ -43,7 +43,7 @@ public <T extends PolicyTO> T create(final T policyTO) {\n \t@Override\r\n \tpublic <T extends PolicyTO> T update(Long policyId, T policyTO) {\r\n \t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tT result = (T) restTemplate.postForObject(BASE_URL\r\n+\t\tT result = (T) restTemplate.postForObject(baseUrl\r\n \t\t\t\t+ \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n \t\t\t\ttypeToUrl(policyTO.getType()));\r\n \t\treturn result;\r\n@@ -52,27 +52,27 @@ public <T extends PolicyTO> T update(Long policyId, T policyTO) {\n \t@Override\r\n \tpublic <T extends PolicyTO> List<T> listByType(PolicyType type) {\r\n \t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tList<T> result = restTemplate.getForObject(BASE_URL + \"policy/{kind}/list\",\r\n+\t\tList<T> result = restTemplate.getForObject(baseUrl + \"policy/{kind}/list\",\r\n \t\t\t\tList.class, typeToUrl(type));\r\n \t\treturn result;\r\n \t}\r\n \r\n \t@Override\r\n \tpublic <T extends PolicyTO> T readGlobal(PolicyType type, Class<T> policyClass) {\r\n-\t\tT result = restTemplate.getForObject(BASE_URL + \"policy/{kind}/global/read\",\r\n+\t\tT result = restTemplate.getForObject(baseUrl + \"policy/{kind}/global/read\",\r\n                 policyClass, typeToUrl(type));\r\n \t\treturn result;\r\n \t}\r\n \r\n \t@Override\r\n \tpublic <T extends PolicyTO> T read(Long policyId, Class<T> policyClass) {\r\n-\t\tT result = restTemplate.getForObject(BASE_URL + \"policy/read/{id}\", policyClass, policyId);\r\n+\t\tT result = restTemplate.getForObject(baseUrl + \"policy/read/{id}\", policyClass, policyId);\r\n \t\treturn result;\r\n \t}\r\n \r\n \t@Override\r\n \tpublic <T extends PolicyTO> T delete(Long policyId, Class<T> policyClass) {\r\n-\t\tT result = restTemplate.getForObject(BASE_URL + \"policy/delete/{id}\", policyClass, policyId);\r\n+\t\tT result = restTemplate.getForObject(baseUrl + \"policy/delete/{id}\", policyClass, policyId);\r\n \t\treturn result;\r\n \t}\r\n \r"},{"sha":"1be8c99e12b1fc91a37779c89f0f5c360223fdc4","filename":"client/src/main/java/org/apache/syncope/services/proxy/ReportServiceProxy.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -35,22 +35,22 @@ public ReportServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n     @Override\r\n     public ReportTO create(ReportTO reportTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"report/create\", reportTO, ReportTO.class);\r\n+        return restTemplate.postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ReportTO update(Long reportId, ReportTO reportTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"report/update\", reportTO, ReportTO.class);\r\n+        return restTemplate.postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n     }\r\n \r\n     @Override\r\n     public int count() {\r\n-        return restTemplate.getForObject(BASE_URL + \"report/count.json\", Integer.class);\r\n+        return restTemplate.getForObject(baseUrl + \"report/count.json\", Integer.class);\r\n     }\r\n \r\n     @Override\r\n     public List<ReportTO> list() {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/list\", ReportTO[].class));\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"report/list\", ReportTO[].class));\r\n     }\r\n \r\n     @Override\r\n@@ -61,24 +61,24 @@ public List<ReportTO> list(int page, int size) {\n \r\n     @Override\r\n     public List<ReportExecTO> listExecutions() {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/execution/list\",\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"report/execution/list\",\r\n                 ReportExecTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public List<String> getReportletConfClasses() {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"report/reportletConfClasses.json\",\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"report/reportletConfClasses.json\",\r\n                 String[].class));\r\n     }\r\n \r\n     @Override\r\n     public ReportTO read(Long reportId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n+        return restTemplate.getForObject(baseUrl + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n     public ReportExecTO readExecution(Long executionId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"report/execution/read/{reportId}\",\r\n+        return restTemplate.getForObject(baseUrl + \"report/execution/read/{reportId}\",\r\n                 ReportExecTO.class, executionId);\r\n     }\r\n \r\n@@ -90,13 +90,13 @@ public void exportExecutionResult(Long executionId, ReportExecExportFormat fmt)\n \r\n     @Override\r\n     public ReportExecTO execute(Long reportId) {\r\n-        return restTemplate.postForObject(BASE_URL + \"report/execute/{reportId}\", null,\r\n+        return restTemplate.postForObject(baseUrl + \"report/execute/{reportId}\", null,\r\n                 ReportExecTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n     public ReportTO delete(Long reportId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"report/delete/{reportId}\",\r\n+        return restTemplate.getForObject(baseUrl + \"report/delete/{reportId}\",\r\n                 ReportTO.class, reportId);\r\n     }\r\n \r"},{"sha":"fd3d92f956800d49ad76b8e966cf021752bb76d6","filename":"client/src/main/java/org/apache/syncope/services/proxy/ResourceServiceProxy.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -38,29 +38,29 @@ public ResourceServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n     @Override\r\n     public ResourceTO create(ResourceTO resourceTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"resource/create.json\", resourceTO, ResourceTO.class);\r\n+        return restTemplate.postForObject(baseUrl + \"resource/create.json\", resourceTO, ResourceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO update(String resourceName, ResourceTO resourceTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n+        return restTemplate.postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO delete(String resourceName) {\r\n-        return restTemplate.getForObject(BASE_URL + \"resource/delete/{resourceName}.json\", ResourceTO.class,\r\n+        return restTemplate.getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class,\r\n                 resourceName);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO read(String resourceName) {\r\n-        return restTemplate.getForObject(BASE_URL + \"resource/read/{resourceName}.json\", ResourceTO.class,\r\n+        return restTemplate.getForObject(baseUrl + \"resource/read/{resourceName}.json\", ResourceTO.class,\r\n                 resourceName);\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getPropagationActionsClasses() {\r\n-        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n                 + \"resource/propagationActionsClasses.json\", String[].class)));\r\n     }\r\n \r\n@@ -70,19 +70,19 @@ public List<ResourceTO> list(Long connInstanceId) {\n                 ? query = \"?connInstanceId=\" + connInstanceId.toString()\r\n                 : \"\";\r\n \r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"resource/list.json\" + query,\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"resource/list.json\" + query,\r\n                 ResourceTO[].class, connInstanceId));\r\n     }\r\n \r\n     @Override\r\n     public ConnObjectTO getConnector(String resourceName, AttributableType type, String objectId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"resource/{resourceName}/read/{type}/{objectId}.json\",\r\n+        return restTemplate.getForObject(baseUrl + \"resource/{resourceName}/read/{type}/{objectId}.json\",\r\n                 ConnObjectTO.class, resourceName, type, objectId);\r\n     }\r\n \r\n     @Override\r\n     public boolean check(ResourceTO resourceTO) {\r\n-        return restTemplate.postForObject(BASE_URL + \"resource/check.json\", resourceTO, Boolean.class)\r\n+        return restTemplate.postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class)\r\n                 .booleanValue();\r\n     }\r\n \r"},{"sha":"4462832901bced2ad59d0f83afb23509d078532d","filename":"client/src/main/java/org/apache/syncope/services/proxy/RoleServiceProxy.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -35,67 +35,67 @@ public RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n \t@Override\r\n \tpublic List<RoleTO> children(Long roleId) {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n \t\t\t\t+ \"role/children/{roleId}.json\", RoleTO[].class, roleId));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO create(RoleTO roleTO) {\r\n-\t\treturn restTemplate.postForObject(BASE_URL + \"role/create\", roleTO,\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"role/create\", roleTO,\r\n \t\t\t\tRoleTO.class);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO delete(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(BASE_URL + \"role/delete/{roleId}\",\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/delete/{roleId}\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<RoleTO> list() {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n \t\t\t\t+ \"role/list.json\", RoleTO[].class));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO parent(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(BASE_URL + \"role/parent/{roleId}.json\",\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/parent/{roleId}.json\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO read(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\",\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/read/{roleId}.json\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<RoleTO> search(NodeCond searchCondition) {\r\n \t\treturn Arrays.asList(restTemplate.postForObject(\r\n-\t\t\t\tBASE_URL + \"role/search\", searchCondition, RoleTO[].class));\r\n+\t\t\t\tbaseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic List<RoleTO> search(NodeCond searchCondition, int page, int size) {\r\n \t\treturn Arrays.asList(restTemplate.postForObject(\r\n-\t\t\t\tBASE_URL + \"role/search/{page}/{size}\", searchCondition, RoleTO[].class, page, size));\r\n+\t\t\t\tbaseUrl + \"role/search/{page}/{size}\", searchCondition, RoleTO[].class, page, size));\r\n \t}\r\n \r\n \t@Override\r\n \tpublic int searchCount(NodeCond searchCondition) {\r\n-\t\treturn restTemplate.postForObject(BASE_URL + \"role/search/count.json\",\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"role/search/count.json\",\r\n \t\t\t\tsearchCondition, Integer.class);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO selfRead(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(BASE_URL + \"role/selfRead/{roleId}\",\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/selfRead/{roleId}\",\r\n \t\t\t\tRoleTO.class, roleId);\r\n \t}\r\n \r\n \t@Override\r\n \tpublic RoleTO update(Long roleId, RoleMod roleMod) {\r\n-\t\treturn restTemplate.postForObject(BASE_URL + \"role/update\", roleMod,\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"role/update\", roleMod,\r\n \t\t\t\tRoleTO.class);\r\n \t}\r\n \r"},{"sha":"761aa12a456a05730e2095a68b3a0a32518cfc7a","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -39,36 +39,36 @@ public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\n     public <T extends AbstractSchemaTO> T create(String kind, T schemaTO) {\r\n         String schemaType = getSchemaType(schemaTO.getClass());\r\n \r\n-        return (T) restTemplate.postForObject(BASE_URL + schemaType + \"/{kind}/create\", schemaTO,\r\n+        return (T) restTemplate.postForObject(baseUrl + schemaType + \"/{kind}/create\", schemaTO,\r\n                 schemaTO.getClass(), kind);\r\n     }\r\n \r\n     @Override\r\n     public <T extends AbstractSchemaTO> T delete(String kind, String schemaName, Class<T> type) {\r\n         String schemaType = getSchemaType(type);\r\n-        return restTemplate.getForObject(BASE_URL + schemaType + \"/{kind}/delete/{name}.json\", type, kind,\r\n+        return restTemplate.getForObject(baseUrl + schemaType + \"/{kind}/delete/{name}.json\", type, kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n     public <T extends AbstractSchemaTO> List<T> list(String kind, Class<T[]> type) {\r\n         String schemaType = getSchemaTypeArray(type);\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + schemaType + \"/{kind}/list.json\", type,\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + schemaType + \"/{kind}/list.json\", type,\r\n                 kind));\r\n     }\r\n \r\n     @Override\r\n     public <T extends AbstractSchemaTO> T read(String kind, String schemaName, Class<T> type) {\r\n         String schemaType = getSchemaType(type);\r\n-        return restTemplate.getForObject(BASE_URL + schemaType + \"/{kind}/read/{name}.json\", type, kind,\r\n+        return restTemplate.getForObject(baseUrl + schemaType + \"/{kind}/read/{name}.json\", type, kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends AbstractSchemaTO> T update(String kind, String schemaName, T schemaTO) {\r\n         String schemaType = getSchemaType(schemaTO.getClass());\r\n-        return (T) restTemplate.postForObject(BASE_URL + schemaType + \"/{kind}/update\", schemaTO,\r\n+        return (T) restTemplate.postForObject(baseUrl + schemaType + \"/{kind}/update\", schemaTO,\r\n                 schemaTO.getClass(), kind);\r\n     }\r\n \r"},{"sha":"f9a2e0d111b40eb793b4b65fb0a3cd34beb3e609","filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -24,10 +24,10 @@ public abstract class SpringServiceProxy {\n \r\n \tprotected RestTemplate restTemplate;\r\n \r\n-\tprotected String BASE_URL; //TODO rename property to baseUrl to match naming conventions\r\n+\tprotected String baseUrl;\r\n \r\n \tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n \t\tthis.restTemplate = restTemplate;\r\n-\t\tthis.BASE_URL = baseUrl;\r\n+\t\tthis.baseUrl = baseUrl;\r\n \t}\r\n }\r"},{"sha":"223d050966b79133bd2055919ad4ef5cad162887","filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -39,7 +39,7 @@ public TaskServiceProxy(String baseUrl, RestTemplate restTemplate) {\n \r\n     @Override\r\n     public int count(String kind) {\r\n-        return restTemplate.getForObject(BASE_URL + \"task/{kind}/count.json\", Integer.class, kind);\r\n+        return restTemplate.getForObject(baseUrl + \"task/{kind}/count.json\", Integer.class, kind);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n@@ -51,13 +51,13 @@ public <T extends TaskTO> T create(T taskTO) {\n                         ? \"sched\"\r\n                         : \"\";\r\n \r\n-        return (T) restTemplate.postForObject(BASE_URL + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n+        return (T) restTemplate.postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n                 subTypeString);\r\n     }\r\n \r\n     @Override\r\n     public <T extends TaskTO> T delete(Long taskId, Class<T> type) {\r\n-        return restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", type, taskId);\r\n+        return restTemplate.getForObject(baseUrl + \"task/delete/{taskId}\", type, taskId);\r\n     }\r\n \r\n     @Override\r\n@@ -71,53 +71,53 @@ public TaskExecTO execute(Long taskId, boolean dryRun) {\n         String param = (dryRun)\r\n                 ? \"?dryRun=true\"\r\n                 : \"\";\r\n-        return restTemplate.postForObject(BASE_URL + \"task/execute/{taskId}\" + param, null, TaskExecTO.class,\r\n+        return restTemplate.postForObject(baseUrl + \"task/execute/{taskId}\" + param, null, TaskExecTO.class,\r\n                 taskId);\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getJobClasses() {\r\n-        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/jobClasses.json\",\r\n+        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl + \"task/jobClasses.json\",\r\n                 String[].class)));\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getSyncActionsClasses() {\r\n-        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(BASE_URL\r\n+        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n                 + \"task/syncActionsClasses.json\", String[].class)));\r\n     }\r\n \r\n     @Override\r\n     public <T extends TaskTO> List<T> list(String kind, Class<T[]> type) {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/{kind}/list\", type, kind));\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"task/{kind}/list\", type, kind));\r\n     }\r\n \r\n     @Override\r\n     public <T extends TaskTO> List<T> list(String kind, int page, int size, Class<T[]> type) {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/{kind}/list/{page}/{size}.json\",\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"task/{kind}/list/{page}/{size}.json\",\r\n                 type, kind, page, size));\r\n     }\r\n \r\n     @Override\r\n     public List<TaskExecTO> listExecutions(String kind) {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/{kind}/execution/list\",\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"task/{kind}/execution/list\",\r\n                 TaskExecTO[].class, kind));\r\n     }\r\n \r\n     @Override\r\n     public <T extends TaskTO> T read(Long taskId, Class<T> type) {\r\n-        return restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", type, taskId);\r\n+        return restTemplate.getForObject(baseUrl + \"task/read/{taskId}\", type, taskId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO readExecution(Long executionId) {\r\n-        return restTemplate.getForObject(BASE_URL + \"task/execution/read/{taskId}\", TaskExecTO.class,\r\n+        return restTemplate.getForObject(baseUrl + \"task/execution/read/{taskId}\", TaskExecTO.class,\r\n                 executionId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO report(Long executionId, PropagationTaskExecStatus status, String message) {\r\n-        return restTemplate.getForObject(BASE_URL + \"task/execution/report/{executionId}\"\r\n+        return restTemplate.getForObject(baseUrl + \"task/execution/report/{executionId}\"\r\n                 + \"?executionStatus={status}&message={message}\", TaskExecTO.class, executionId, status,\r\n                 message);\r\n     }\r\n@@ -133,7 +133,7 @@ public <T extends TaskTO> T update(Long taskId, T taskTO) {\n         if (path == null)\r\n             throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n \r\n-        return (T) restTemplate.postForObject(BASE_URL + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n+        return (T) restTemplate.postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n     }\r\n \r\n }\r"},{"sha":"8e536ed6b02f65cd775c7255d014231426f0439d","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserServiceProxy.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -38,50 +38,50 @@ public UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n     @Override\n     public Boolean verifyPassword(String username, String password) {\n         return restTemplate.getForObject(\n-                BASE_URL + \"user/verifyPassword/{username}.json?password={password}\", Boolean.class,\n+                baseUrl + \"user/verifyPassword/{username}.json?password={password}\", Boolean.class,\n                 username, password);\n     }\n \n     @Override\n     public int count() {\n-        return restTemplate.getForObject(BASE_URL + \"user/count.json\", Integer.class);\n+        return restTemplate.getForObject(baseUrl + \"user/count.json\", Integer.class);\n     }\n \n     @Override\n     public List<UserTO> list() {\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list.json\", UserTO[].class));\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n     }\n \n     @Override\n     public List<UserTO> list(int page, int size) {\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/list/{page}/{size}.json\",\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n                 UserTO[].class, page, size));\n     }\n \n     @Override\n     public UserTO read(Long userId) {\n-        return restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\", UserTO.class, userId);\n+        return restTemplate.getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n     }\n \n     @Override\n     public UserTO read(String username) {\n-        return restTemplate.getForObject(BASE_URL + \"user/readByUsername/{username}.json\", UserTO.class,\n+        return restTemplate.getForObject(baseUrl + \"user/readByUsername/{username}.json\", UserTO.class,\n                 username);\n     }\n \n     @Override\n     public UserTO create(UserTO userTO) {\n-        return restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        return restTemplate.postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Override\n     public UserTO update(Long userId, UserMod userMod) {\n-        return restTemplate.postForObject(BASE_URL + \"user/update\", userMod, UserTO.class);\n+        return restTemplate.postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n     }\n \n     @Override\n     public UserTO delete(Long userId) {\n-        return restTemplate.getForObject(BASE_URL + \"user/delete/{userId}\", UserTO.class, userId);\n+        return restTemplate.getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n@@ -91,92 +91,92 @@ public UserTO executeWorkflow(String taskId, UserTO userTO) {\n \n     @Override\n     public List<WorkflowFormTO> getForms() {\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"user/workflow/form/list\",\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"user/workflow/form/list\",\n                 WorkflowFormTO[].class));\n     }\n \n     @Override\n     public WorkflowFormTO getFormForUser(Long userId) {\n-        return restTemplate.getForObject(BASE_URL + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n+        return restTemplate.getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n                 userId);\n     }\n \n     @Override\n     public WorkflowFormTO claimForm(String taskId) {\n-        return restTemplate.getForObject(BASE_URL + \"user/workflow/form/claim/{taskId}\",\n+        return restTemplate.getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\",\n                 WorkflowFormTO.class, taskId);\n     }\n \n     @Override\n     public UserTO submitForm(WorkflowFormTO form) {\n-        return restTemplate.postForObject(BASE_URL + \"user/workflow/form/submit\", form, UserTO.class);\n+        return restTemplate.postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n     }\n \n     @Override\n     public UserTO activate(long userId, String token) {\n-        return restTemplate.getForObject(BASE_URL + \"user/activate/{userId}?token=\" + token, UserTO.class,\n+        return restTemplate.getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class,\n                 userId);\n     }\n \n     @Override\n     public UserTO activateByUsername(String username, String token) {\n-        return restTemplate.getForObject(BASE_URL + \"user/activateByUsername/{username}.json?token=\" + token,\n+        return restTemplate.getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n                 UserTO.class, username);\n     }\n \n     @Override\n     public UserTO suspend(long userId) {\n-        return restTemplate.getForObject(BASE_URL + \"user/suspend/{userId}\", UserTO.class, userId);\n+        return restTemplate.getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n     public UserTO reactivate(long userId) {\n-        return restTemplate.getForObject(BASE_URL + \"user/reactivate/{userId}\", UserTO.class, userId);\n+        return restTemplate.getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n     public UserTO reactivate(long userId, String query) {\n-        return restTemplate.getForObject(BASE_URL + \"user/reactivate/\" + userId + query, UserTO.class);\n+        return restTemplate.getForObject(baseUrl + \"user/reactivate/\" + userId + query, UserTO.class);\n     }\n \n     @Override\n     public UserTO suspendByUsername(String username) {\n-        return restTemplate.getForObject(BASE_URL + \"user/suspendByUsername/{username}.json\", UserTO.class,\n+        return restTemplate.getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class,\n                 username);\n     }\n \n     @Override\n     public UserTO reactivateByUsername(String username) {\n-        return restTemplate.getForObject(BASE_URL + \"user/reactivateByUsername/{username}.json\",\n+        return restTemplate.getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n                 UserTO.class, username);\n     }\n \n     @Override\n     public UserTO suspend(long userId, String query) {\n-        return restTemplate.getForObject(BASE_URL + \"user/suspend/\" + userId + query, UserTO.class);\n+        return restTemplate.getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n     }\n \n     @Override\n     public UserTO readSelf() {\n-        return restTemplate.getForObject(BASE_URL + \"user/read/self\", UserTO.class);\n+        return restTemplate.getForObject(baseUrl + \"user/read/self\", UserTO.class);\n     }\n \n     @Override\n     public List<UserTO> search(NodeCond searchCondition) {\n-        return Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n+        return Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search\", searchCondition,\n                 UserTO[].class));\n     }\n \n     @Override\n     public List<UserTO> search(NodeCond searchCondition, int page, int size) {\n-        return Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n+        return Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search/{page}/{size}\",\n                 searchCondition, UserTO[].class, page, size));\n     }\n \n     @Override\n     public int searchCount(NodeCond searchCondition) {\n         return restTemplate\n-                .postForObject(BASE_URL + \"user/search/count.json\", searchCondition, Integer.class);\n+                .postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n     }\n \n     @Override"},{"sha":"198b2fb6ca797453457a42f803482b4d2ef0e5f8","filename":"client/src/main/java/org/apache/syncope/services/proxy/WorkflowServiceProxy.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -34,17 +34,17 @@ public WorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\n     @Override\r\n     public WorkflowDefinitionTO getDefinition(String type) {\r\n         return restTemplate\r\n-                .getForObject(BASE_URL + \"workflow/definition/\" + type, WorkflowDefinitionTO.class);\r\n+                .getForObject(baseUrl + \"workflow/definition/\" + type, WorkflowDefinitionTO.class);\r\n     }\r\n \r\n     @Override\r\n     public void updateDefinition(String type, WorkflowDefinitionTO definition) {\r\n-        restTemplate.put(BASE_URL + \"workflow/definition/\" + type, definition);\r\n+        restTemplate.put(baseUrl + \"workflow/definition/\" + type, definition);\r\n     }\r\n \r\n     @Override\r\n     public List<String> getDefinedTasks(final String type) {\r\n-        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"workflow/tasks/\" + type, String.class));\r\n+        return Arrays.asList(restTemplate.getForObject(baseUrl + \"workflow/tasks/\" + type, String.class));\r\n     }\r\n \r\n }\r"},{"sha":"3406a9e0eb1b6780183689cfc2772577aa8815ca","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":24,"deletions":12,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f7ab995a744db1596e925f29dcd9c74dfe74c5e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=4f7ab995a744db1596e925f29dcd9c74dfe74c5e","patch":"@@ -25,6 +25,18 @@\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n+import org.apache.syncope.services.ConfigurationService;\n+import org.apache.syncope.services.ConnectorService;\n+import org.apache.syncope.services.EntitlementService;\n+import org.apache.syncope.services.LoggerService;\n+import org.apache.syncope.services.NotificationService;\n+import org.apache.syncope.services.ReportService;\n+import org.apache.syncope.services.ResourceService;\n+import org.apache.syncope.services.RoleService;\n+import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.services.TaskService;\n+import org.apache.syncope.services.UserService;\n+import org.apache.syncope.services.WorkflowService;\n import org.apache.syncope.services.proxy.ConfigurationServiceProxy;\n import org.apache.syncope.services.proxy.ConnectorServiceProxy;\n import org.apache.syncope.services.proxy.EntitlementServiceProxy;\n@@ -81,29 +93,29 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     @Autowired\n     protected RestTemplate restTemplate;\n \n-    protected UserServiceProxy userService;\n+    protected UserService userService;\n \n-    protected RoleServiceProxy roleService;\n+    protected RoleService roleService;\n \n-    protected ResourceServiceProxy resourceService;\n+    protected ResourceService resourceService;\n \n-    protected EntitlementServiceProxy entitlementService;\n+    protected EntitlementService entitlementService;\n \n-    protected ConfigurationServiceProxy configurationService;\n+    protected ConfigurationService configurationService;\n \n-    protected ConnectorServiceProxy connectorService;\n+    protected ConnectorService connectorService;\n \n-    protected LoggerServiceProxy loggerService;\n+    protected LoggerService loggerService;\n \n-    protected ReportServiceProxy reportService;\n+    protected ReportService reportService;\n \n-    protected TaskServiceProxy taskService;\n+    protected TaskService taskService;\n \n-    protected WorkflowServiceProxy workflowService;\n+    protected WorkflowService workflowService;\n \n-    protected NotificationServiceProxy notificationService;\n+    protected NotificationService notificationService;\n \n-    protected SchemaServiceProxy schemaService;\n+    protected SchemaService schemaService;\n \n     @Autowired\n     protected DataSource testDataSource;"}]}