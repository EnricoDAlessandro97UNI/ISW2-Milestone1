{"sha":"597a57f1ae4e36f93ed2fd9258d901a171f4f81a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU5N2E1N2YxYWU0ZTM2ZjkzZWQyZmQ5MjU4ZDkwMWExNzFmNGY4MWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-05T14:06:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-05T14:15:47Z"},"message":"[SYNCOPE-1244] Applying the elaborated patch","tree":{"sha":"013e834735208d04a3d0cd7ca196b337503aa53b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/013e834735208d04a3d0cd7ca196b337503aa53b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/597a57f1ae4e36f93ed2fd9258d901a171f4f81a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/597a57f1ae4e36f93ed2fd9258d901a171f4f81a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/597a57f1ae4e36f93ed2fd9258d901a171f4f81a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/597a57f1ae4e36f93ed2fd9258d901a171f4f81a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"228e10e28da14362733e9ad3901756526d0e5e5d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/228e10e28da14362733e9ad3901756526d0e5e5d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/228e10e28da14362733e9ad3901756526d0e5e5d"}],"stats":{"total":37,"additions":27,"deletions":10},"files":[{"sha":"1e49d40ad0a4d274566cf69213fab336ae5890f4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":27,"deletions":10,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/597a57f1ae4e36f93ed2fd9258d901a171f4f81a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/597a57f1ae4e36f93ed2fd9258d901a171f4f81a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=597a57f1ae4e36f93ed2fd9258d901a171f4f81a","patch":"@@ -25,6 +25,7 @@\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n@@ -146,7 +147,7 @@ private void registerJob(\n             final Map<String, Object> jobMap)\n             throws SchedulerException {\n \n-        if (isRunningHere(new JobKey(jobName, Scheduler.DEFAULT_GROUP))) {\n+        if (isRunning(new JobKey(jobName, Scheduler.DEFAULT_GROUP))) {\n             LOG.debug(\"Job {} already running, cancel\", jobName);\n             return;\n         }\n@@ -306,6 +307,8 @@ public void load() {\n             } catch (SchedulerException e) {\n                 LOG.error(\"Could not put Quartz instance {} in standby\", instanceId, e);\n             }\n+\n+            return;\n         }\n \n         final Pair<String, Long> conf = AuthContextUtils.execWithAuthContext(SyncopeConstants.MASTER_DOMAIN, () -> {\n@@ -329,22 +332,36 @@ public void load() {\n                 Set<SchedTask> tasks = new HashSet<>(taskDAO.<SchedTask>findAll(TaskType.SCHEDULED));\n                 tasks.addAll(taskDAO.<PullTask>findAll(TaskType.PULL));\n                 tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n-                tasks.forEach(task -> {\n+\n+                boolean loadException = false;\n+                for (Iterator<SchedTask> it = tasks.iterator(); it.hasNext() && !loadException;) {\n+                    SchedTask task = it.next();\n                     try {\n                         register(task, task.getStartAt(), conf.getRight());\n                     } catch (Exception e) {\n                         LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n+                        loadException = true;\n                     }\n-                });\n+                }\n \n-                // 2. jobs for Reports\n-                reportDAO.findAll().forEach(report -> {\n-                    try {\n-                        register(report, null, conf.getRight());\n-                    } catch (Exception e) {\n-                        LOG.error(\"While loading job instance for report \" + report.getName(), e);\n+                if (loadException) {\n+                    LOG.debug(\"Errors while loading job instances for tasks, aborting\");\n+                } else {\n+                    // 2. jobs for Reports\n+                    for (Iterator<Report> it = reportDAO.findAll().iterator(); it.hasNext() && !loadException;) {\n+                        Report report = it.next();\n+                        try {\n+                            register(report, null, conf.getRight());\n+                        } catch (Exception e) {\n+                            LOG.error(\"While loading job instance for report \" + report.getName(), e);\n+                            loadException = true;\n+                        }\n                     }\n-                });\n+\n+                    if (loadException) {\n+                        LOG.debug(\"Errors while loading job instances for reports, aborting\");\n+                    }\n+                }\n \n                 return null;\n             });"}]}