{"sha":"4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRjMDUzZmQyNGE0NWU3YThhOGIwMGNkNWJjMzBkOThmNmQ2OTAwYjg=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-06-17T14:03:57Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-06-17T14:05:04Z"},"message":"[SYNCOPE-845] provides membership type extensions","tree":{"sha":"ea1ac7e79ae4e0418d3e90bba67e0b7f23e3b23d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ea1ac7e79ae4e0418d3e90bba67e0b7f23e3b23d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"c0541f255789fde93646394e28531b8a9162db5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c0541f255789fde93646394e28531b8a9162db5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c0541f255789fde93646394e28531b8a9162db5f"}],"stats":{"total":915,"additions":742,"deletions":173},"files":[{"sha":"5d3453b190475faa6e871b29692514730a091acb","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":109,"deletions":42,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -22,28 +22,29 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.collections4.Transformer;\n+import org.apache.cxf.common.util.StringUtils;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.WicketRuntimeException;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n+import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardStep {\n@@ -62,8 +63,12 @@\n \n     protected final Map<String, S> schemas = new LinkedHashMap<>();\n \n+    protected final Map<String, Map<String, S>> membershipSchemas = new LinkedHashMap<>();\n+\n     protected final LoadableDetachableModel<List<AttrTO>> attrTOs;\n \n+    protected final LoadableDetachableModel<List<MembershipTO>> membershipTOs;\n+\n     public AbstractAttrs(final AnyTO anyTO, final List<String> anyTypeClasses, final List<String> whichAttrs) {\n         super();\n         this.setOutputMarkupId(true);\n@@ -77,10 +82,45 @@ public AbstractAttrs(final AnyTO anyTO, final List<String> anyTypeClasses, final\n \n             @Override\n             protected List<AttrTO> load() {\n-                setSchemas(CollectionUtils.collect(anyTypeClassRestClient.list(getAllAuxClasses()),\n+                setSchemas(CollectionUtils.collect(anyTypeClassRestClient.list(anyTO.getAuxClasses()),\n                         EntityTOUtils.<AnyTypeClassTO>keyTransformer(), new ArrayList<>(anyTypeClasses)));\n                 setAttrs();\n-                return new ArrayList<>(getAttrsFromAnyTO());\n+                return AbstractAttrs.this.getAttrsFromTO();\n+            }\n+        };\n+\n+        this.membershipTOs = new LoadableDetachableModel<List<MembershipTO>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            @SuppressWarnings(\"unchecked\")\n+            protected List<MembershipTO> load() {\n+                List<MembershipTO> memberships = new ArrayList<>();\n+                try {\n+                    membershipSchemas.clear();\n+\n+                    for (MembershipTO membership : (List<MembershipTO>) PropertyResolver.getPropertyField(\n+                            \"memberships\", anyTO).get(anyTO)) {\n+                        setSchemas(membership.getGroupKey(), CollectionUtils.collect(\n+                                anyTypeClassRestClient.list(getMembershipAuxClasses(membership, anyTO.getType())),\n+                                EntityTOUtils.<AnyTypeClassTO>keyTransformer(),\n+                                new ArrayList<String>()));\n+                        setAttrs(membership);\n+\n+                        if (AbstractAttrs.this instanceof PlainAttrs && !membership.getPlainAttrs().isEmpty()) {\n+                            memberships.add(membership);\n+                        } else if (AbstractAttrs.this instanceof DerAttrs && !membership.getDerAttrs().isEmpty()) {\n+                            memberships.add(membership);\n+                        } else if (AbstractAttrs.this instanceof VirAttrs && !membership.getVirAttrs().isEmpty()) {\n+                            memberships.add(membership);\n+                        }\n+                    }\n+                } catch (WicketRuntimeException | IllegalArgumentException | IllegalAccessException ex) {\n+                    // ignore\n+                }\n+\n+                return memberships;\n             }\n         };\n     }\n@@ -91,13 +131,31 @@ protected boolean reoderSchemas() {\n \n     protected abstract SchemaType getSchemaType();\n \n+    private void setSchemas(final String membership, final List<String> anyTypeClasses) {\n+        final Map<String, S> mscs;\n+\n+        if (membershipSchemas.containsKey(membership)) {\n+            mscs = membershipSchemas.get(membership);\n+        } else {\n+            mscs = new LinkedHashMap<>();\n+            membershipSchemas.put(membership, mscs);\n+        }\n+        setSchemas(anyTypeClasses, mscs);\n+    }\n+\n     private void setSchemas(final List<String> anyTypeClasses) {\n-        List<S> allSchemas = Collections.emptyList();\n-        if (!anyTypeClasses.isEmpty()) {\n+        setSchemas(anyTypeClasses, schemas);\n+    }\n+\n+    private void setSchemas(final List<String> anyTypeClasses, final Map<String, S> scs) {\n+        final List<S> allSchemas;\n+        if (anyTypeClasses.isEmpty()) {\n+            allSchemas = Collections.emptyList();\n+        } else {\n             allSchemas = schemaRestClient.getSchemas(getSchemaType(), anyTypeClasses.toArray(new String[] {}));\n         }\n \n-        schemas.clear();\n+        scs.clear();\n \n         if (reoderSchemas()) {\n             // 1. remove attributes not selected for display\n@@ -131,51 +189,60 @@ public int compare(final S schema1, final S schema2) {\n             });\n         }\n         for (S schemaTO : allSchemas) {\n-            schemas.put(schemaTO.getKey(), schemaTO);\n+            scs.put(schemaTO.getKey(), schemaTO);\n+        }\n+    }\n+\n+    @Override\n+    public void renderHead(final IHeaderResponse response) {\n+        super.renderHead(response);\n+        if (org.apache.cxf.common.util.CollectionUtils.isEmpty(attrTOs.getObject())\n+                && org.apache.cxf.common.util.CollectionUtils.isEmpty(membershipTOs.getObject())) {\n+            response.render(OnDomReadyHeaderItem.forScript(\n+                    String.format(\"$('#emptyPlaceholder').append(\\\"%s\\\"); $('#attributes').hide();\",\n+                            getString(\"attribute.empty.list\"))));\n         }\n     }\n \n     protected abstract void setAttrs();\n \n-    protected abstract Set<AttrTO> getAttrsFromAnyTO();\n-\n-    protected Set<String> getAllAuxClasses() {\n-        final List<MembershipTO> memberships;\n-        final List<String> dyngroups;\n-        if (anyTO instanceof UserTO) {\n-            memberships = UserTO.class.cast(anyTO).getMemberships();\n-            dyngroups = UserTO.class.cast(anyTO).getDynGroups();\n-        } else if (anyTO instanceof AnyObjectTO) {\n-            memberships = AnyObjectTO.class.cast(anyTO).getMemberships();\n-            dyngroups = AnyObjectTO.class.cast(anyTO).getDynGroups();\n-        } else {\n-            memberships = Collections.<MembershipTO>emptyList();\n-            dyngroups = Collections.<String>emptyList();\n+    protected abstract void setAttrs(final MembershipTO membershipTO);\n+\n+    protected abstract List<AttrTO> getAttrsFromTO();\n+\n+    protected abstract List<AttrTO> getAttrsFromTO(final MembershipTO membershipTO);\n+\n+    protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n+        try {\n+            final GroupTO groupTO = groupRestClient.read(membershipTO.getRightKey());\n+            return groupTO.getTypeExtension(anyType).getAuxClasses();\n+        } catch (Exception e) {\n+            return Collections.emptyList();\n         }\n+    }\n \n-        List<GroupTO> groups = new ArrayList<>();\n-        CollectionUtils.collect(memberships, new Transformer<MembershipTO, GroupTO>() {\n+    protected static class AttrComparator implements Comparator<AttrTO> {\n \n-            @Override\n-            public GroupTO transform(final MembershipTO input) {\n-                dyngroups.remove(input.getRightKey());\n-                return groupRestClient.read(input.getRightKey());\n+        @Override\n+        public int compare(final AttrTO left, final AttrTO right) {\n+            if (left == null || StringUtils.isEmpty(left.getSchema())) {\n+                return -1;\n+            }\n+            if (right == null || StringUtils.isEmpty(right.getSchema())) {\n+                return 1;\n+            } else {\n+                return left.getSchema().compareTo(right.getSchema());\n             }\n-        }, groups);\n+        }\n+    }\n \n-        CollectionUtils.collect(dyngroups, new Transformer<String, GroupTO>() {\n+    public class Schemas extends Panel {\n \n-            @Override\n-            public GroupTO transform(final String input) {\n-                return groupRestClient.read(input);\n-            }\n-        }, groups);\n+        private static final long serialVersionUID = -2447602429647965090L;\n \n-        Set<String> auxClasses = new HashSet<>(anyTO.getAuxClasses());\n-        for (GroupTO groupTO : groups) {\n-            auxClasses.addAll(groupTO.getAuxClasses());\n+        public Schemas(final String id) {\n+            super(id);\n         }\n \n-        return auxClasses;\n     }\n }"},{"sha":"d4edbf0aafcf29c628904f99d54e60d0a14c04c0","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/DerAttrs.java","status":"modified","additions":101,"deletions":34,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.java?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -19,24 +19,29 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupStream;\n-import org.apache.wicket.markup.head.IHeaderResponse;\n-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n \n public class DerAttrs extends AbstractAttrs<DerSchemaTO> {\n \n@@ -50,42 +55,37 @@ public <T extends AnyTO> DerAttrs(\n         super(anyTO, anyTypeClasses, whichDerAttrs);\n         setTitleModel(new ResourceModel(\"attributes.derived\"));\n \n-        add(new ListView<AttrTO>(\"schemas\", attrTOs) {\n+        add(new Accordion(\"derSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                new ResourceModel(\"attributes.accordion\", \"Derived Attributes\")) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n+            private static final long serialVersionUID = 1037272333056449378L;\n \n             @Override\n-            public void renderHead(final IHeaderResponse response) {\n-                super.renderHead(response);\n-                if (attrTOs.getObject().isEmpty()) {\n-                    response.render(OnDomReadyHeaderItem.forScript(\n-                            String.format(\"$('#emptyPlaceholder').append(\\\"%s\\\")\", getString(\"attribute.empty.list\"))));\n-                }\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new DerAttrs.DerSchemas(panelId, attrTOs);\n             }\n+        }), Model.of(0)).setOutputMarkupId(true));\n \n-            @Override\n-            public void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag) {\n-                super.onComponentTagBody(markupStream, openTag);\n-                openTag.put(\"class\", \"empty\");\n-            }\n+        add(new ListView<MembershipTO>(\"membershipsDerSchemas\", membershipTOs) {\n \n-            @Override\n-            protected void populateItem(final ListItem<AttrTO> item) {\n-                AttrTO attrTO = item.getModelObject();\n-\n-                IModel<String> model;\n-                List<String> values = attrTO.getValues();\n-                if (values == null || values.isEmpty()) {\n-                    model = new ResourceModel(\"derived.emptyvalue.message\", StringUtils.EMPTY);\n-                } else {\n-                    model = new Model<>(values.get(0));\n-                }\n+            private static final long serialVersionUID = 1L;\n \n-                AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\"panel\", attrTO.getSchema(), model, false);\n-                panel.setEnabled(false);\n-                panel.setRequired(true);\n-                panel.setOutputMarkupId(true);\n-                item.add(panel);\n+            @Override\n+            protected void populateItem(final ListItem<MembershipTO> item) {\n+                final MembershipTO membershipTO = item.getModelObject();\n+                item.add(new Accordion(\"membershipDerSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                DerAttrs.this,\n+                                Model.of(membershipTO))) {\n+\n+                    private static final long serialVersionUID = 1037272333056449378L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return new DerAttrs.DerSchemas(panelId, new ListModel<AttrTO>(getAttrsFromTO(membershipTO)));\n+                    }\n+                }), Model.of(-1)).setOutputMarkupId(true));\n             }\n         });\n     }\n@@ -96,8 +96,17 @@ protected SchemaType getSchemaType() {\n     }\n \n     @Override\n-    protected Set<AttrTO> getAttrsFromAnyTO() {\n-        return anyTO.getDerAttrs();\n+    protected List<AttrTO> getAttrsFromTO() {\n+        final List<AttrTO> res = new ArrayList<>(anyTO.getDerAttrs());\n+        Collections.sort(res, new AttrComparator());\n+        return res;\n+    }\n+\n+    @Override\n+    protected List<AttrTO> getAttrsFromTO(final MembershipTO membershipTO) {\n+        final List<AttrTO> res = new ArrayList<>(membershipTO.getDerAttrs());\n+        Collections.sort(res, new AttrComparator());\n+        return res;\n     }\n \n     @Override\n@@ -120,4 +129,62 @@ protected void setAttrs() {\n         anyTO.getDerAttrs().addAll(attrs);\n     }\n \n+    @Override\n+    protected void setAttrs(final MembershipTO membershipTO) {\n+        List<AttrTO> attrs = new ArrayList<>();\n+\n+        Map<String, AttrTO> attrMap = membershipTO.getDerAttrMap();\n+\n+        for (DerSchemaTO schema : membershipSchemas.get(membershipTO.getGroupKey()).values()) {\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(schema.getKey());\n+            if (attrMap.containsKey(schema.getKey())) {\n+                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+            }\n+\n+            attrs.add(attrTO);\n+        }\n+\n+        membershipTO.getDerAttrs().clear();\n+        membershipTO.getDerAttrs().addAll(attrs);\n+    }\n+\n+    public class DerSchemas extends Schemas {\n+\n+        private static final long serialVersionUID = -4730563859116024676L;\n+\n+        public DerSchemas(final String id, final IModel<List<AttrTO>> attrTOs) {\n+            super(id);\n+\n+            add(new ListView<AttrTO>(\"schemas\", attrTOs) {\n+\n+                private static final long serialVersionUID = 9101744072914090143L;\n+\n+                @Override\n+                public void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag) {\n+                    super.onComponentTagBody(markupStream, openTag);\n+                    openTag.put(\"class\", \"empty\");\n+                }\n+\n+                @Override\n+                protected void populateItem(final ListItem<AttrTO> item) {\n+                    AttrTO attrTO = item.getModelObject();\n+\n+                    IModel<String> model;\n+                    List<String> values = attrTO.getValues();\n+                    if (values == null || values.isEmpty()) {\n+                        model = new ResourceModel(\"derived.emptyvalue.message\", StringUtils.EMPTY);\n+                    } else {\n+                        model = new Model<>(values.get(0));\n+                    }\n+\n+                    AjaxTextFieldPanel panel = new AjaxTextFieldPanel(\"panel\", attrTO.getSchema(), model, false);\n+                    panel.setEnabled(false);\n+                    panel.setRequired(true);\n+                    panel.setOutputMarkupId(true);\n+                    item.add(panel);\n+                }\n+            });\n+        }\n+    }\n }"},{"sha":"c5c2f0c19caaaa9e1cc93ad3ca1839a9cd4a05c2","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":110,"deletions":33,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -19,12 +19,13 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.commons.SchemaUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n@@ -38,11 +39,13 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.wicket.markup.head.IHeaderResponse;\n-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -51,6 +54,8 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n \n public class PlainAttrs extends AbstractAttrs<PlainSchemaTO> {\n \n@@ -63,42 +68,47 @@ public <T extends AnyTO> PlainAttrs(\n             final Form<?> form,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n-            final List<String> whichPlainAttrs) {\n+            final List<String> whichPlainAttrs) throws IllegalArgumentException {\n \n         super(anyTO, anyTypeClasses, whichPlainAttrs);\n         this.mode = mode;\n \n         setTitleModel(new ResourceModel(\"attributes.plain\"));\n \n-        add(new ListView<AttrTO>(\"schemas\", attrTOs) {\n+        add(new Accordion(\"plainSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                new ResourceModel(\"attributes.accordion\", \"Plain Attributes\")) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n+            private static final long serialVersionUID = 1037272333056449378L;\n \n             @Override\n-            public void renderHead(final IHeaderResponse response) {\n-                super.renderHead(response);\n-                if (attrTOs.getObject().isEmpty()) {\n-                    response.render(OnDomReadyHeaderItem.forScript(\n-                            String.format(\"$('#emptyPlaceholder').append(\\\"%s\\\")\", getString(\"attribute.empty.list\"))));\n-                }\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new PlainSchemas(panelId, schemas, attrTOs);\n             }\n+        }), Model.of(0)).setOutputMarkupId(true));\n+\n+        add(new ListView<MembershipTO>(\"membershipsPlainSchemas\", membershipTOs) {\n+\n+            private static final long serialVersionUID = 1L;\n \n             @Override\n-            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-            protected void populateItem(final ListItem<AttrTO> item) {\n-                AttrTO attrTO = item.getModelObject();\n-\n-                FieldPanel panel = getFieldPanel(schemas.get(attrTO.getSchema()));\n-                if (mode == AjaxWizard.Mode.TEMPLATE || !schemas.get(attrTO.getSchema()).isMultivalue()) {\n-                    item.add(panel);\n-                    panel.setNewModel(attrTO.getValues());\n-                } else {\n-                    item.add(new MultiFieldPanel.Builder<>(\n-                            new PropertyModel<List<String>>(attrTO, \"values\")).build(\n-                            \"panel\",\n-                            attrTO.getSchema(),\n-                            panel));\n-                }\n+            protected void populateItem(final ListItem<MembershipTO> item) {\n+                final MembershipTO membershipTO = item.getModelObject();\n+                item.add(new Accordion(\"membershipPlainSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                PlainAttrs.this,\n+                                Model.of(membershipTO))) {\n+\n+                    private static final long serialVersionUID = 1037272333056449378L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return new PlainSchemas(\n+                                panelId,\n+                                membershipSchemas.get(membershipTO.getGroupKey()),\n+                                new ListModel<AttrTO>(getAttrsFromTO(membershipTO)));\n+                    }\n+                }), Model.of(-1)).setOutputMarkupId(true));\n             }\n         });\n     }\n@@ -114,8 +124,17 @@ protected boolean reoderSchemas() {\n     }\n \n     @Override\n-    protected Set<AttrTO> getAttrsFromAnyTO() {\n-        return anyTO.getPlainAttrs();\n+    protected List<AttrTO> getAttrsFromTO() {\n+        final List<AttrTO> res = new ArrayList<>(anyTO.getPlainAttrs());\n+        Collections.sort(res, new AttrComparator());\n+        return res;\n+    }\n+\n+    @Override\n+    protected List<AttrTO> getAttrsFromTO(final MembershipTO membershipTO) {\n+        final List<AttrTO> res = new ArrayList<>(membershipTO.getPlainAttrs());\n+        Collections.sort(res, new AttrComparator());\n+        return res;\n     }\n \n     @Override\n@@ -143,6 +162,31 @@ protected void setAttrs() {\n         anyTO.getPlainAttrs().addAll(attrs);\n     }\n \n+    @Override\n+    protected void setAttrs(final MembershipTO membershipTO) {\n+        List<AttrTO> attrs = new ArrayList<>();\n+\n+        Map<String, AttrTO> attrMap = membershipTO.getPlainAttrMap();\n+\n+        for (PlainSchemaTO schema : membershipSchemas.get(membershipTO.getGroupKey()).values()) {\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(schema.getKey());\n+\n+            if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n+                attrTO.getValues().add(\"\");\n+\n+                // is important to set readonly only after values setting\n+                attrTO.setReadonly(schema.isReadonly());\n+            } else {\n+                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+            }\n+            attrs.add(attrTO);\n+        }\n+\n+        membershipTO.getPlainAttrs().clear();\n+        membershipTO.getPlainAttrs().addAll(attrs);\n+    }\n+\n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     private FieldPanel getFieldPanel(final PlainSchemaTO schemaTO) {\n         final boolean required;\n@@ -240,10 +284,7 @@ public String getObject(\n                 break;\n \n             case Binary:\n-                panel = new BinaryFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>(),\n-                        schemas.containsKey(schemaTO.getKey())\n-                        ? schemas.get(schemaTO.getKey()).getMimeType()\n-                        : null);\n+                panel = new BinaryFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>(), schemaTO.getMimeType());\n \n                 if (required) {\n                     panel.addRequiredLabel();\n@@ -266,4 +307,40 @@ public String getObject(\n \n         return panel;\n     }\n+\n+    public class PlainSchemas extends Schemas {\n+\n+        private static final long serialVersionUID = -4730563859116024676L;\n+\n+        public PlainSchemas(\n+                final String id,\n+                final Map<String, PlainSchemaTO> availableSchemas,\n+                final IModel<List<AttrTO>> attrTOs) {\n+            super(id);\n+\n+            add(new ListView<AttrTO>(\"schemas\", attrTOs) {\n+\n+                private static final long serialVersionUID = 9101744072914090143L;\n+\n+                @Override\n+                @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+                protected void populateItem(final ListItem<AttrTO> item) {\n+                    AttrTO attrTO = item.getModelObject();\n+\n+                    FieldPanel panel = getFieldPanel(availableSchemas.get(attrTO.getSchema()));\n+                    if (mode == AjaxWizard.Mode.TEMPLATE\n+                            || !availableSchemas.get(attrTO.getSchema()).isMultivalue()) {\n+                        item.add(panel);\n+                        panel.setNewModel(attrTO.getValues());\n+                    } else {\n+                        item.add(new MultiFieldPanel.Builder<>(\n+                                new PropertyModel<List<String>>(attrTO, \"values\")).build(\n+                                \"panel\",\n+                                attrTO.getSchema(),\n+                                panel));\n+                    }\n+                }\n+            });\n+        }\n+    }\n }"},{"sha":"5b4307220c1aa25218257f748ba1d7c906a95b10","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/VirAttrs.java","status":"modified","additions":106,"deletions":31,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.java?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -19,70 +19,79 @@\n package org.apache.syncope.client.console.wizards.any;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.wicket.markup.head.IHeaderResponse;\n-import org.apache.wicket.markup.head.OnDomReadyHeaderItem;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n \n public class VirAttrs extends AbstractAttrs<VirSchemaTO> {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n+    private final AjaxWizard.Mode mode;\n+\n     public <T extends AnyTO> VirAttrs(\n             final T anyTO,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n             final List<String> whichVirAttrs) {\n \n         super(anyTO, anyTypeClasses, whichVirAttrs);\n+        this.mode = mode;\n+\n         setTitleModel(new ResourceModel(\"attributes.virtual\"));\n \n-        add(new ListView<AttrTO>(\"schemas\", attrTOs) {\n+        add(new Accordion(\"virSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                new ResourceModel(\"attributes.accordion\", \"Virtual Attributes\")) {\n \n-            private static final long serialVersionUID = 9101744072914090143L;\n+            private static final long serialVersionUID = 1037272333056449378L;\n \n             @Override\n-            public void renderHead(final IHeaderResponse response) {\n-                super.renderHead(response);\n-                if (attrTOs.getObject().isEmpty()) {\n-                    response.render(OnDomReadyHeaderItem.forScript(\n-                            String.format(\"$('#emptyPlaceholder').append(\\\"%s\\\")\", getString(\"attribute.empty.list\"))));\n-                }\n+            public WebMarkupContainer getPanel(final String panelId) {\n+                return new VirAttrs.VirSchemas(panelId, attrTOs);\n             }\n+        }), Model.of(0)).setOutputMarkupId(true));\n+\n+        add(new ListView<MembershipTO>(\"membershipsVirSchemas\", membershipTOs) {\n+\n+            private static final long serialVersionUID = 1L;\n \n             @Override\n-            @SuppressWarnings(\"unchecked\")\n-            protected void populateItem(final ListItem<AttrTO> item) {\n-                AttrTO attrTO = item.getModelObject();\n-\n-                attrTO.setReadonly(attrTO.isReadonly());\n-\n-                final AjaxTextFieldPanel panel\n-                        = new AjaxTextFieldPanel(\"panel\", attrTO.getSchema(), new Model<String>(), false);\n-\n-                if (mode == AjaxWizard.Mode.TEMPLATE) {\n-                    item.add(panel.enableJexlHelp().setEnabled(!attrTO.isReadonly()));\n-                } else {\n-                    item.add(new MultiFieldPanel.Builder<>(\n-                            new PropertyModel<List<String>>(attrTO, \"values\")).build(\n-                            \"panel\",\n-                            attrTO.getSchema(),\n-                            panel).setEnabled(!attrTO.isReadonly()));\n-                }\n+            protected void populateItem(final ListItem<MembershipTO> item) {\n+                final MembershipTO membershipTO = item.getModelObject();\n+                item.add(new Accordion(\"membershipVirSchemas\", Collections.<ITab>singletonList(new AbstractTab(\n+                        new StringResourceModel(\n+                                \"attributes.membership.accordion\",\n+                                VirAttrs.this,\n+                                Model.of(membershipTO))) {\n+\n+                    private static final long serialVersionUID = 1037272333056449378L;\n+\n+                    @Override\n+                    public WebMarkupContainer getPanel(final String panelId) {\n+                        return new VirAttrs.VirSchemas(panelId, new ListModel<AttrTO>(getAttrsFromTO(membershipTO)));\n+                    }\n+                }), Model.of(-1)).setOutputMarkupId(true));\n             }\n         });\n     }\n@@ -93,8 +102,17 @@ protected SchemaType getSchemaType() {\n     }\n \n     @Override\n-    protected Set<AttrTO> getAttrsFromAnyTO() {\n-        return anyTO.getVirAttrs();\n+    protected List<AttrTO> getAttrsFromTO() {\n+        final List<AttrTO> res = new ArrayList<>(anyTO.getVirAttrs());\n+        Collections.sort(res, new AttrComparator());\n+        return res;\n+    }\n+\n+    @Override\n+    protected List<AttrTO> getAttrsFromTO(final MembershipTO membershipTO) {\n+        final List<AttrTO> res = new ArrayList<>(membershipTO.getVirAttrs());\n+        Collections.sort(res, new AttrComparator());\n+        return res;\n     }\n \n     @Override\n@@ -118,4 +136,61 @@ protected void setAttrs() {\n         anyTO.getVirAttrs().clear();\n         anyTO.getVirAttrs().addAll(attrs);\n     }\n+\n+    @Override\n+    protected void setAttrs(final MembershipTO membershipTO) {\n+        List<AttrTO> attrs = new ArrayList<>();\n+\n+        Map<String, AttrTO> attrMap = membershipTO.getVirAttrMap();\n+\n+        for (VirSchemaTO schema : membershipSchemas.get(membershipTO.getGroupKey()).values()) {\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(schema.getKey());\n+            if (attrMap.containsKey(schema.getKey())) {\n+                attrTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+            } else {\n+                attrTO.getValues().add(StringUtils.EMPTY);\n+            }\n+\n+            attrs.add(attrTO);\n+        }\n+\n+        membershipTO.getVirAttrs().clear();\n+        membershipTO.getVirAttrs().addAll(attrs);\n+    }\n+\n+    public class VirSchemas extends Schemas {\n+\n+        private static final long serialVersionUID = -4730563859116024676L;\n+\n+        public VirSchemas(final String id, final IModel<List<AttrTO>> attrTOs) {\n+            super(id);\n+\n+            add(new ListView<AttrTO>(\"schemas\", attrTOs) {\n+\n+                private static final long serialVersionUID = 9101744072914090143L;\n+\n+                @Override\n+                @SuppressWarnings(\"unchecked\")\n+                protected void populateItem(final ListItem<AttrTO> item) {\n+                    AttrTO attrTO = item.getModelObject();\n+\n+                    attrTO.setReadonly(attrTO.isReadonly());\n+\n+                    final AjaxTextFieldPanel panel\n+                            = new AjaxTextFieldPanel(\"panel\", attrTO.getSchema(), new Model<String>(), false);\n+\n+                    if (mode == AjaxWizard.Mode.TEMPLATE) {\n+                        item.add(panel.enableJexlHelp().setEnabled(!attrTO.isReadonly()));\n+                    } else {\n+                        item.add(new MultiFieldPanel.Builder<>(\n+                                new PropertyModel<List<String>>(attrTO, \"values\")).build(\n+                                \"panel\",\n+                                attrTO.getSchema(),\n+                                panel).setEnabled(!attrTO.isReadonly()));\n+                    }\n+                }\n+            });\n+        }\n+    }\n }"},{"sha":"f62795ad8b4d70b17a4ded172f1314b8ed16d7b6","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AbstractAttrs$Schemas.html","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs%24Schemas.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs%24Schemas.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs%24Schemas.html?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -0,0 +1,29 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"schemas\">\n+      <div class=\"form-group\">\n+        <span wicket:id=\"panel\">\n+          [panel for dynamic input type markup]\n+        </span>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"d0d803fdb05b2ecab225a58d27f902d6402d43e3","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AbstractAttrs.html","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.html?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -0,0 +1,26 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div id=\"emptyPlaceholder\"/>\n+    <div id=\"attributes\">\n+      <wicket:child/>\n+    </div>\n+  </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"f6c0c024f653d3a0b434146153bce17c134a8857","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AbstractAttrs.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.properties?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+attributes.accordion=Own\n+attributes.membership.accordion=From membership with '${groupName}'"},{"sha":"9b9f1a0c0b6275e23c195e0973f730fbe49979fb","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AbstractAttrs_it.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_it.properties?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+attributes.accordion=Propri\n+attributes.membership.accordion=Dalla membership con '${groupName}'"},{"sha":"f6c0c024f653d3a0b434146153bce17c134a8857","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AbstractAttrs_pt_BR.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_pt_BR.properties?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+attributes.accordion=Own\n+attributes.membership.accordion=From membership with '${groupName}'"},{"sha":"f6c0c024f653d3a0b434146153bce17c134a8857","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/AbstractAttrs_ru.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs_ru.properties?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+attributes.accordion=Own\n+attributes.membership.accordion=From membership with '${groupName}'"},{"sha":"dfcda58379120bc1a215b34200a1c1c10bfaa73f","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/DerAttrs.html","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDerAttrs.html?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -17,14 +17,10 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <div id=\"emptyPlaceholder\"/>\n-    <div wicket:id=\"schemas\">\n-      <div class=\"form-group\">\n-        <span wicket:id=\"panel\">\n-          [panel for dynamic input type markup]\n-        </span>\n-      </div>\n-    </div>\n-  </wicket:panel>\n+  <wicket:extend>\n+    <div wicket:id=\"derSchemas\"/>\n+    <span wicket:id=\"membershipsDerSchemas\">\n+      <div wicket:id=\"membershipDerSchemas\"/>\n+    </span>\n+  </wicket:extend>\n </html>\n\\ No newline at end of file"},{"sha":"8da9bd9e74ccacfd3ac1f01144c070fa662dd923","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/PlainAttrs.html","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.html?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -17,14 +17,10 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <div id=\"emptyPlaceholder\"/>\n-    <div wicket:id=\"schemas\">\n-      <div class=\"form-group\">\n-        <span wicket:id=\"panel\">\n-          [panel for dynamic input type markup]\n-        </span>\n-      </div>\n-    </div>\n-  </wicket:panel>\n+  <wicket:extend>\n+    <div wicket:id=\"plainSchemas\"/>\n+    <span wicket:id=\"membershipsPlainSchemas\">\n+      <div wicket:id=\"membershipPlainSchemas\"/>\n+    </span>\n+  </wicket:extend>\n </html>\n\\ No newline at end of file"},{"sha":"abff807cc08431bceaaa5bf8bd9e2f138929d645","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/any/VirAttrs.html","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FVirAttrs.html?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -17,14 +17,10 @@\n under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <div id=\"emptyPlaceholder\"/>\n-    <div wicket:id=\"schemas\">\n-      <div class=\"form-group\">\n-        <span wicket:id=\"panel\">\n-          [panel for dynamic input type markup]\n-        </span>\n-      </div>\n-    </div>\n-  </wicket:panel>\n+  <wicket:extend>\n+    <div wicket:id=\"virSchemas\"/>\n+    <span wicket:id=\"membershipsVirSchemas\">\n+      <div wicket:id=\"membershipVirSchemas\"/>\n+    </span>\n+  </wicket:extend>\n </html>\n\\ No newline at end of file"},{"sha":"2d3f8f96cfe958cf09a82c7b28dd555152f268d9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":69,"deletions":3,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -74,6 +74,61 @@ private static <T, K extends AbstractReplacePatchItem<T>> K replacePatchItem(\n         return proto;\n     }\n \n+    private static void diff(\n+            final MembershipTO updated,\n+            final MembershipTO original,\n+            final MembershipPatch result,\n+            final boolean incremental) {\n+\n+        // check same key\n+        if (updated.getGroupKey() == null && original.getGroupKey() != null\n+                || (updated.getGroupKey() != null && !updated.getGroupKey().equals(original.getGroupKey()))) {\n+\n+            throw new IllegalArgumentException(\"Memberships must be the same\");\n+        }\n+        result.setGroup(updated.getGroupKey());\n+\n+        // 1. plain attributes\n+        Map<String, AttrTO> updatedAttrs = new HashMap<>(updated.getPlainAttrMap());\n+        Map<String, AttrTO> originalAttrs = new HashMap<>(original.getPlainAttrMap());\n+\n+        result.getPlainAttrs().clear();\n+\n+        if (!incremental) {\n+            IterableUtils.forEach(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n+                    new Closure<String>() {\n+\n+                @Override\n+                public void execute(final String schema) {\n+                    result.getPlainAttrs().add(new AttrPatch.Builder().\n+                            operation(PatchOperation.DELETE).\n+                            attrTO(new AttrTO.Builder().schema(schema).build()).\n+                            build());\n+                }\n+            });\n+        }\n+\n+        for (AttrTO attrTO : updatedAttrs.values()) {\n+            if (attrTO.getValues().isEmpty()) {\n+                if (!incremental) {\n+                    result.getPlainAttrs().add(new AttrPatch.Builder().\n+                            operation(PatchOperation.DELETE).\n+                            attrTO(new AttrTO.Builder().schema(attrTO.getSchema()).build()).\n+                            build());\n+                }\n+            } else {\n+                AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).build();\n+                if (!patch.isEmpty()) {\n+                    result.getPlainAttrs().add(patch);\n+                }\n+            }\n+        }\n+\n+        // 2. virtual attributes\n+        result.getVirAttrs().clear();\n+        result.getVirAttrs().addAll(updated.getVirAttrs());\n+    }\n+\n     private static void diff(\n             final AnyTO updated, final AnyTO original, final AnyPatch result, final boolean incremental) {\n \n@@ -296,10 +351,21 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         Map<String, MembershipTO> originalMembs = original.getMembershipMap();\n \n         for (Map.Entry<String, MembershipTO> entry : updatedMembs.entrySet()) {\n-            if (!originalMembs.containsKey(entry.getKey())) {\n-                result.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build());\n+            MembershipPatch membershipPatch = new MembershipPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build();\n+\n+            MembershipTO omemb;\n+            if (originalMembs.containsKey(entry.getKey())) {\n+                // get the original membership\n+                omemb = originalMembs.get(entry.getKey());\n+            } else {\n+                // create an empty one to generate the patch\n+                omemb = new MembershipTO();\n+                omemb.setGroupKey(entry.getKey());\n             }\n+\n+            diff(entry.getValue(), omemb, membershipPatch, incremental);\n+            result.getMemberships().add(membershipPatch);\n         }\n \n         if (!incremental) {"},{"sha":"cc1179a1241ff749e7c0bee962adbbeb8386f19d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/UsersITCase.java","status":"modified","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FUsersITCase.java?ref=4c053fd24a45e7a8a8b00cd5bc30d98f6d6900b8","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.fit.console;\n \n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -30,6 +31,7 @@\n import org.junit.runners.MethodSorters;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n+import org.apache.wicket.markup.html.form.FormComponent;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UsersITCase extends AbstractConsoleITCase {\n@@ -155,6 +157,106 @@ public void editUser() {\n         assertNotNull(component);\n     }\n \n+    @Test\n+    public void editUserMembership() {\n+        wicketTester.clickLink(\"body:realmsLI:realms\");\n+        wicketTester.executeAjaxEvent(\"body:content:realmChoicePanel:container:realms:btn\", Constants.ON_CLICK);\n+        wicketTester.executeAjaxEvent(\"body:content:realmChoicePanel:container:realms:dropdown-menu:buttons:1:button\",\n+                Constants.ON_CLICK);\n+\n+        wicketTester.clickLink(\"body:content:body:tabbedPanel:tabs-container:tabs:1:link\");\n+\n+        Component component = findComponentByProp(\"username\", searchResultContainer\n+                + \":searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", \"puccini\");\n+        assertNull(component);\n+\n+        component = findComponentByProp(\"username\", searchResultContainer\n+                + \":searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", \"rossini\");\n+        assertNotNull(component);\n+\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\");\n+\n+        FormTester formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+        formTester.submit(\"buttons:next\");\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+        formTester.submit(\"buttons:next\");\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+\n+        System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \" + wicketTester.getComponentFromLastRenderedPage(\n+                tabPanel + \"outerObjectsRepeater:0:outer:form:content:form:view:groups:paletteField:recorder\").\n+                getDefaultModelObject());\n+//        Component recorder = wicketTester.getComponentFromLastRenderedPage(tabPanel\n+//                + \"outerObjectsRepeater:0:outer:form:content:form:view:groups:paletteField:selection\");\n+//\n+//        assertNotNull(recorder);\n+//\n+//        if (recorder instanceof FormComponent) {\n+//            wicketTester.getRequest().getPostParameters().setParameterValue(((FormComponent) recorder).getInputName(),\n+//                    \"additional\");\n+//            wicketTester.getRequest().getPostParameters().setParameterValue(((FormComponent) recorder).getInputName(),\n+//                    \"otherchild\");\n+//            wicketTester.getRequest().getPostParameters().setParameterValue(((FormComponent) recorder).getInputName(),\n+//                    \"root\");\n+//        }\n+\n+        formTester.setValue(\"view:groups:paletteField:recorder\", \"additional,root,otherchild\");\n+        wicketTester.executeAjaxEvent(\n+                tabPanel + \"outerObjectsRepeater:0:outer:form:content:form:buttons:next\", Constants.ON_CLICK);\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+\n+        wicketTester.executeAjaxEvent(\"body:content:body:tabbedPanel:panel:searchResult:outerObjectsRepeater:0:\"\n+                + \"outer:form:content:form:view:membershipsPlainSchemas:0:membershipPlainSchemas:tabs:0:title\",\n+                Constants.ON_CLICK);\n+\n+        formTester.setValue(\"view:membershipsPlainSchemas:0:membershipPlainSchemas:tabs:0:body:content:\"\n+                + \"schemas:0:panel:spinner\", \"1\");\n+        formTester.submit(\"buttons:next\");\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+        formTester.submit(\"buttons:finish\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+\n+        wicketTester.assertComponent(tabPanel\n+                + \"outerObjectsRepeater:0:outer:form:content:customResultBody:resources:firstLevelContainer:first:\"\n+                + \"container:content:group:beans:0:fields:1:field\", Label.class);\n+\n+        wicketTester.clickLink(tabPanel + \"outerObjectsRepeater:0:outer:form:content:action:panelClose:closeLink\");\n+\n+        component = findComponentByProp(\"username\", searchResultContainer\n+                + \":searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\", \"rossini\");\n+        assertNotNull(component);\n+\n+        // reset ....\n+        wicketTester.clickLink(component.getPageRelativePath() + \":cells:6:cell:panelEdit:editLink\");\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+        formTester.submit(\"buttons:next\");\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+        formTester.submit(\"buttons:next\");\n+\n+        formTester = wicketTester.newFormTester(tabPanel + \"outerObjectsRepeater:0:outer:form:content:form\");\n+        assertNotNull(formTester);\n+        formTester.setValue(\"view:groups:paletteField:recorder\", \"root,otherchild\");\n+        wicketTester.executeAjaxEvent(\n+                tabPanel + \"outerObjectsRepeater:0:outer:form:content:form:buttons:finish\", Constants.ON_CLICK);\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+        wicketTester.cleanupFeedbackMessages();\n+    }\n+\n     @Test\n     public void checkDeleteUsrLink() {\n         wicketTester.clickLink(\"body:realmsLI:realms\");"}]}