{"sha":"0dc788725aff2651a4abd9471d7049db476a5a89","node_id":"C_kwDOJfYA1toAKDBkYzc4ODcyNWFmZjI2NTFhNGFiZDk0NzFkNzA0OWRiNDc2YTVhODk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-06-28T14:08:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-06-28T14:10:39Z"},"message":"[SYNCOPE-1685] Better polymorphic value management","tree":{"sha":"b1da86e22d463c89d1e74a622b6cbb6a4f484479","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b1da86e22d463c89d1e74a622b6cbb6a4f484479"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0dc788725aff2651a4abd9471d7049db476a5a89","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0dc788725aff2651a4abd9471d7049db476a5a89","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0dc788725aff2651a4abd9471d7049db476a5a89","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0dc788725aff2651a4abd9471d7049db476a5a89/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"637d752a1269ebf06edac6aa1e7892fa75103643","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/637d752a1269ebf06edac6aa1e7892fa75103643","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/637d752a1269ebf06edac6aa1e7892fa75103643"}],"stats":{"total":41,"additions":37,"deletions":4},"files":[{"sha":"cb4c2b131eb90c96d138a386f7bf07ba2c938add","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"modified","additions":37,"deletions":4,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0dc788725aff2651a4abd9471d7049db476a5a89/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0dc788725aff2651a4abd9471d7049db476a5a89/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=0dc788725aff2651a4abd9471d7049db476a5a89","patch":"@@ -60,14 +60,47 @@ public void setPullJEXL(final String pullJEXL) {\n         this.pullJEXL = pullJEXL;\n     }\n \n-    protected AttrSchemaType beforePropagation(final PlainAttrValue value, final Any<?> any) {\n+    protected AttrSchemaType beforePropagation(\n+            final Any<?> any,\n+            final AttrSchemaType schemaType,\n+            final PlainAttrValue value) {\n+\n         JexlContext jexlContext = new MapContext();\n         if (any != null) {\n             JexlUtils.addFieldsToContext(any, jexlContext);\n             JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n             JexlUtils.addDerAttrsToContext(any, derAttrHandler, jexlContext);\n         }\n-        jexlContext.set(\"value\", value.getValue());\n+\n+        Object oValue;\n+        switch (schemaType) {\n+            case Binary:\n+            case Encrypted:\n+                oValue = value.getBinaryValue();\n+                break;\n+\n+            case Boolean:\n+                oValue = value.getBooleanValue();\n+                break;\n+\n+            case Date:\n+                oValue = value.getDateValue();\n+                break;\n+\n+            case Double:\n+                oValue = value.getDoubleValue();\n+                break;\n+\n+            case Long:\n+                oValue = value.getLongValue();\n+                break;\n+\n+            case Enum:\n+            case String:\n+            default:\n+                oValue = value.getStringValue();\n+        }\n+        jexlContext.set(\"value\", oValue);\n \n         Object tValue = JexlUtils.evaluate(propagationJEXL, jexlContext);\n \n@@ -123,10 +156,10 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n         AtomicReference<AttrSchemaType> tType = new AtomicReference<>();\n         if (values.isEmpty()) {\n             PlainAttrValue value = anyUtilsFactory.getInstance(any).newPlainAttrValue();\n-            tType.set(beforePropagation(value, any));\n+            tType.set(beforePropagation(any, schemaType, value));\n             values.add(value);\n         } else {\n-            values.forEach(value -> tType.set(beforePropagation(value, any)));\n+            values.forEach(value -> tType.set(beforePropagation(any, schemaType, value)));\n         }\n \n         return Pair.of(tType.get(), values);"}]}