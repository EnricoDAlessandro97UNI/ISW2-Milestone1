{"sha":"2074615ba09bf06b7143ff77e19ab10e76132499","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIwNzQ2MTViYTA5YmYwNmI3MTQzZmY3N2UxOWFiMTBlNzYxMzI0OTk=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-24T16:19:11Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-24T16:19:11Z"},"message":"[SYNCOPE-231]\n* Adding LoggerService\n* Adding Response Header resource ID for CXF services\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1438058 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"51d5d1fa4b0aa0a6fd43133ee90e3ff30a2744d4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/51d5d1fa4b0aa0a6fd43133ee90e3ff30a2744d4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2074615ba09bf06b7143ff77e19ab10e76132499","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2074615ba09bf06b7143ff77e19ab10e76132499","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2074615ba09bf06b7143ff77e19ab10e76132499","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2074615ba09bf06b7143ff77e19ab10e76132499/comments","author":null,"committer":null,"parents":[{"sha":"3b04f9c90bc24e5e3c8c2f21b1f38e61d9f2c211","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3b04f9c90bc24e5e3c8c2f21b1f38e61d9f2c211","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3b04f9c90bc24e5e3c8c2f21b1f38e61d9f2c211"}],"stats":{"total":187,"additions":123,"deletions":64},"files":[{"sha":"af57998ab56977962eae635b014b8c84db9d8f79","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/LoggerServiceProxy.java","status":"modified","additions":60,"deletions":18,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -18,12 +18,17 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n-import ch.qos.logback.classic.Level;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.NotFoundException;\r\n+\r\n import org.apache.syncope.common.services.LoggerService;\r\n import org.apache.syncope.common.to.LoggerTO;\r\n import org.apache.syncope.common.types.AuditLoggerName;\r\n+import org.apache.syncope.common.types.LoggerType;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n@@ -33,33 +38,70 @@ public LoggerServiceProxy(final String baseUrl, final RestTemplate restTemplate)\n     }\r\n \r\n     @Override\r\n-    public List<LoggerTO> listLogs() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n-    }\r\n+    public List<LoggerTO> list(final LoggerType type) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n \r\n-    @Override\r\n-    public List<AuditLoggerName> listAudits() {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/audit/list\", AuditLoggerName[].class));\r\n-    }\r\n+            case AUDIT:\r\n+                List<AuditLoggerName> auditNames = Arrays.asList(getRestTemplate().getForObject(\r\n+                        baseUrl + \"logger/audit/list\", AuditLoggerName[].class));\r\n+                return CollectionWrapper.unwrapLogger(auditNames);\r\n \r\n-    @Override\r\n-    public LoggerTO update(final String name, final Level level) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n-                level);\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n     }\r\n \r\n     @Override\r\n-    public LoggerTO delete(final String name) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n+    public LoggerTO read(final LoggerType type, final String name) {\r\n+        List<LoggerTO> logger = list(type);\r\n+        for (LoggerTO l : logger) {\r\n+            if (l.getName().equals(name)) {\r\n+                return l;\r\n+            }\r\n+        }\r\n+        throw new NotFoundException();\r\n     }\r\n \r\n     @Override\r\n-    public void enableAudit(final AuditLoggerName auditLoggerName) {\r\n-        getRestTemplate().put(baseUrl + \"logger/audit/enable\", auditLoggerName);\r\n+    public void update(final LoggerType type, final String name, final LoggerTO logger) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                getRestTemplate().postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n+                        logger.getLevel());\r\n+                break;\r\n+\r\n+            case AUDIT:\r\n+                try {\r\n+                    getRestTemplate().put(baseUrl + \"logger/audit/enable\", AuditLoggerName.fromLoggerName(name));\r\n+                } catch (Exception e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n     }\r\n \r\n     @Override\r\n-    public void disableAudit(final AuditLoggerName auditLoggerName) {\r\n-        getRestTemplate().put(baseUrl + \"logger/audit/disable\", auditLoggerName);\r\n+    public void delete(final LoggerType type, final String name) {\r\n+        switch (type) {\r\n+            case NORMAL:\r\n+                getRestTemplate().getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n+                break;\r\n+            case AUDIT:\r\n+                try {\r\n+                    getRestTemplate().put(baseUrl + \"logger/audit/disable\", AuditLoggerName.fromLoggerName(name));\r\n+                } catch (Exception e) {\r\n+                    throw new BadRequestException(e);\r\n+                }\r\n+                break;\r\n+\r\n+            default:\r\n+                throw new BadRequestException();\r\n+        }\r\n+\r\n     }\r\n }\r"},{"sha":"c9f59221bbc923c587b99e8389d462328c27cf0d","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -27,32 +27,24 @@\n import javax.ws.rs.PathParam;\r\n \r\n import org.apache.syncope.common.to.LoggerTO;\r\n-import org.apache.syncope.common.types.AuditLoggerName;\r\n+import org.apache.syncope.common.types.LoggerType;\r\n \r\n-import ch.qos.logback.classic.Level;\r\n-\r\n-@Path(\"logger\")\r\n+@Path(\"logger/{type}\")\r\n public interface LoggerService {\r\n \r\n-    //TODO use list(LoggerType) signature for both normal logger and audit logger instead of two different methods\r\n     @GET\r\n-    List<LoggerTO> listLogs();\r\n+    @Path(\"{name}\")\r\n+    LoggerTO read(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") final String name);\r\n \r\n     @GET\r\n-    @Path(\"audit\")\r\n-    List<AuditLoggerName> listAudits();\r\n+    List<LoggerTO> list(@PathParam(\"type\") LoggerType type);\r\n \r\n     @PUT\r\n     @Path(\"{name}/level\")\r\n-    LoggerTO update(@PathParam(\"name\") String name, Level level);\r\n+    void update(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name, LoggerTO logger);\r\n \r\n     @DELETE\r\n     @Path(\"{name}\")\r\n-    LoggerTO delete(@PathParam(\"name\") String name);\r\n-\r\n-    // TODO refactor this method to use update()\r\n-    void enableAudit(AuditLoggerName auditLoggerName);\r\n+    void delete(@PathParam(\"type\") LoggerType type, @PathParam(\"name\") String name);\r\n \r\n-    // TODO refactor this method to use delete()\r\n-    void disableAudit(AuditLoggerName auditLoggerName);\r\n }\r"},{"sha":"51a1488dcb048614adfbc6d11a9bead6ce695684","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -29,7 +29,9 @@\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.types.LoggerType;\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\n+import org.apache.syncope.common.util.CollectionWrapper;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -38,11 +40,13 @@ public class LoggerRestClient extends BaseRestClient {\n     private static final long serialVersionUID = 4579786978763032240L;\n \n     public List<LoggerTO> listLogs() {\n-        return getService(LoggerService.class).listLogs();\n+        return getService(LoggerService.class).list(LoggerType.NORMAL);\n     }\n \n     public List<AuditLoggerName> listAudits() {\n-        return getService(LoggerService.class).listAudits();\n+        List<LoggerTO> logger =  getService(LoggerService.class).list(LoggerType.AUDIT);\n+\n+        return CollectionWrapper.wrapLogger(logger);\n     }\n \n     public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory() {\n@@ -59,18 +63,25 @@ public Map<AuditElements.Category, Set<AuditLoggerName>> listAuditsByCategory()\n     }\n \n     public void setLogLevel(final String name, final SyncopeLoggerLevel level) {\n-        getService(LoggerService.class).update(name, level.getLevel());\n+        LoggerTO loggerTO = new LoggerTO();\n+        loggerTO.setName(name);\n+        loggerTO.setLevel(level);\n+        getService(LoggerService.class).update(LoggerType.NORMAL, name, loggerTO);\n     }\n \n     public void enableAudit(final AuditLoggerName auditLoggerName) {\n-        getService(LoggerService.class).enableAudit(auditLoggerName);\n+        String name = auditLoggerName.toLoggerName();\n+        LoggerTO loggerTO = new LoggerTO();\n+        loggerTO.setName(name);\n+        loggerTO.setLevel(SyncopeLoggerLevel.DEBUG);\n+        getService(LoggerService.class).update(LoggerType.AUDIT, name, loggerTO);\n     }\n \n-    public LoggerTO deleteLog(final String name) {\n-        return getService(LoggerService.class).delete(name);\n+    public void deleteLog(final String name) {\n+        getService(LoggerService.class).delete(LoggerType.NORMAL, name);\n     }\n \n     public void disableAudit(final AuditLoggerName auditLoggerName) {\n-        getService(LoggerService.class).disableAudit(auditLoggerName);\n+        getService(LoggerService.class).delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n     }\n }"},{"sha":"0c555128b2433f33a84380c0d9241918b6bce50c","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -29,6 +29,7 @@\n import javax.ws.rs.core.StreamingOutput;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ConfigurationService;\r\n import org.apache.syncope.common.to.ConfigurationTO;\r\n import org.apache.syncope.common.to.MailTemplateTO;\r\n@@ -51,7 +52,7 @@ public class ConfigurationServiceImpl implements ConfigurationService, ContextAw\n     public Response create(final ConfigurationTO configurationTO) {\r\n         ConfigurationTO created = configurationController.create(new DummyHTTPServletResponse(), configurationTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\r\n-        return Response.created(location).build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getKey()).build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"2dc501de12ffa89c0dc1d7f53011a2edeb7a68c5","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -26,6 +26,7 @@\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ConnectorService;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n@@ -51,7 +52,7 @@ public Response create(final ConnInstanceTO connectorTO) {\n         try {\r\n             ConnInstanceTO connector = connectorController.create(new DummyHTTPServletResponse(), connectorTO);\r\n             URI location = uriInfo.getAbsolutePathBuilder().path(connector.getId() + \"\").build();\r\n-            return Response.created(location).build();\r\n+            return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connector.getId()).build();\r\n         } catch (SyncopeClientCompositeErrorException e) {\r\n             throw new BadRequestException(e);\r\n         } catch (NotFoundException e) {\r"},{"sha":"7d2557185286c0ecf71ff590c4f9ae37c14ffe6d","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -25,6 +25,7 @@\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n \r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.PolicyService;\r\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n@@ -64,7 +65,7 @@ public <T extends PolicyTO> Response create(final PolicyType type, final T polic\n                 throw new BadRequestException();\r\n         }\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n-        return Response.created(location).build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, policy.getId()).build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"73b71b10aebce6f123b3f9eaedc26d8beeed4326","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -23,6 +23,8 @@\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.SchemaService;\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n import org.apache.syncope.common.to.DerivedSchemaTO;\r\n@@ -74,7 +76,7 @@ public <T extends AbstractSchemaTO> Response create(final AttributableType kind,\n                 throw new BadRequestException();\r\n         }\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(response.getName()).build();\r\n-        return Response.created(location).build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, response.getName()).build();\r\n     }\r\n \r\n     @Override\r\n@@ -106,13 +108,13 @@ public void delete(final AttributableType kind, final SchemaType type, final Str\n     public List<? extends AbstractSchemaTO> list(final AttributableType kind, final SchemaType type) {\r\n         switch (type) {\r\n             case NORMAL:\r\n-                return (List<? extends AbstractSchemaTO>) normalSchemaController.list(kind.toString());\r\n+                return normalSchemaController.list(kind.toString());\r\n \r\n             case DERIVED:\r\n-                return (List<? extends AbstractSchemaTO>) derivedSchemaController.list(kind.toString());\r\n+                return derivedSchemaController.list(kind.toString());\r\n \r\n             case VIRTUAL:\r\n-                return (List<? extends AbstractSchemaTO>) virtualSchemaController.list(kind.toString());\r\n+                return virtualSchemaController.list(kind.toString());\r\n \r\n             default:\r\n                 throw new BadRequestException();\r"},{"sha":"499e743bce896fbc7a7a005c0d21526dcb35a40a","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":26,"deletions":17,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2074615ba09bf06b7143ff77e19ab10e76132499/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=2074615ba09bf06b7143ff77e19ab10e76132499","patch":"@@ -23,18 +23,19 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.text.ParseException;\n import java.util.List;\n \n import org.apache.syncope.common.to.LoggerTO;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.types.LoggerType;\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\n+import org.apache.syncope.common.util.CollectionWrapper;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n \n-import ch.qos.logback.classic.Level;\n-\n @FixMethodOrder(MethodSorters.JVM)\n public class LoggerTestITCase extends AbstractTest {\n \n@@ -45,7 +46,7 @@ public LoggerTestITCase(String contentType) {\n \n     @Test\n     public void listLogs() {\n-        List<LoggerTO> loggers = loggerService.listLogs();\n+        List<LoggerTO> loggers = loggerService.list(LoggerType.NORMAL);\n         assertNotNull(loggers);\n         assertFalse(loggers.isEmpty());\n         for (LoggerTO logger : loggers) {\n@@ -54,33 +55,37 @@ public void listLogs() {\n     }\n \n     @Test\n-    public void listAudits() {\n-        List<AuditLoggerName> audits = loggerService.listAudits();\n+    public void listAudits() throws ParseException {\n+        List<LoggerTO> audits = loggerService.list(LoggerType.AUDIT);\n \n         assertNotNull(audits);\n         assertFalse(audits.isEmpty());\n-        for (AuditLoggerName audit : audits) {\n-            assertNotNull(audit);\n+        for (LoggerTO audit : audits) {\n+            assertNotNull(AuditLoggerName.fromLoggerName(audit.getName()));\n         }\n     }\n \n     @Test\n     public void setLevel() {\n-        List<LoggerTO> loggers = loggerService.listLogs();\n+        List<LoggerTO> loggers = loggerService.list(LoggerType.NORMAL);\n         assertNotNull(loggers);\n         int startSize = loggers.size();\n \n-        LoggerTO logger = loggerService.update(\"TEST\", Level.INFO);\n+        LoggerTO logger = new LoggerTO();\n+        logger.setName(\"TEST\");\n+        logger.setLevel(SyncopeLoggerLevel.INFO);\n+        loggerService.update(LoggerType.NORMAL, logger.getName(), logger);\n+        logger = loggerService.read(LoggerType.NORMAL, logger.getName());\n         assertNotNull(logger);\n         assertEquals(SyncopeLoggerLevel.INFO, logger.getLevel());\n \n-        loggers = loggerService.listLogs();\n+        loggers = loggerService.list(LoggerType.NORMAL);\n         assertNotNull(loggers);\n         assertEquals(startSize + 1, loggers.size());\n \n         // TEST Delete\n-        loggerService.delete(\"TEST\");\n-        loggers = loggerService.listLogs();\n+        loggerService.delete(LoggerType.NORMAL, \"TEST\");\n+        loggers = loggerService.list(LoggerType.NORMAL);\n         assertNotNull(loggers);\n         assertEquals(startSize, loggers.size());\n     }\n@@ -90,19 +95,23 @@ public void enableDisableAudit() {\n         AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n                 AuditElements.ReportSubCategory.listExecutions, AuditElements.Result.failure);\n \n-        List<AuditLoggerName> audits = loggerService.listAudits();\n+        List<AuditLoggerName> audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n \n-        loggerService.enableAudit(auditLoggerName);\n+        LoggerTO loggerTO = new LoggerTO();\n+        String name = auditLoggerName.toLoggerName();\n+        loggerTO.setName(name);\n+        loggerTO.setLevel(SyncopeLoggerLevel.DEBUG);\n+        loggerService.update(LoggerType.AUDIT, name, loggerTO);\n \n-        audits = loggerService.listAudits();\n+        audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n         assertTrue(audits.contains(auditLoggerName));\n \n-        loggerService.disableAudit(auditLoggerName);\n+        loggerService.delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n \n-        audits = loggerService.listAudits();\n+        audits = CollectionWrapper.wrapLogger(loggerService.list(LoggerType.AUDIT));\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n     }"}]}