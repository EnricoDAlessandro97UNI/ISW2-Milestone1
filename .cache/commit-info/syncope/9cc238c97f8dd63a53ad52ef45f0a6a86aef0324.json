{"sha":"9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjljYzIzOGM5N2Y4ZGQ2M2E1M2FkNTJlZjQ1ZjBhNmE4NmFlZjAzMjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-14T12:12:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-04-14T12:12:50Z"},"message":"Some cleanings","tree":{"sha":"d67dbb76a153efc949449f496176cd2dc783d047","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d67dbb76a153efc949449f496176cd2dc783d047"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd5920864513c3b8ff13e3801f47c6db4a1d482a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd5920864513c3b8ff13e3801f47c6db4a1d482a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bd5920864513c3b8ff13e3801f47c6db4a1d482a"}],"stats":{"total":431,"additions":281,"deletions":150},"files":[{"sha":"9d575241eee4851ee38a2eee34fd7bd1b9f43707","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -51,8 +51,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n-public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch>\n-        extends AbstractResourceAssociator<TO> {\n+public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> extends AbstractResourceAssociator<TO> {\n \n     @Autowired\n     private RealmDAO realmDAO;"},{"sha":"efd263d6ca4cfed75a8e1ccf38e914d4f36b37b3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -31,23 +31,22 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -59,9 +58,6 @@\n @Component\n public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> {\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n     @Autowired\n     protected AnySearchDAO searchDAO;\n "},{"sha":"a460d0c60a9a667c8f334b5a62c40c5251fc74b4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -37,8 +37,8 @@\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -47,28 +47,28 @@\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.quartz.JobDataMap;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;"},{"sha":"22e8ccff8db54d22d001273d9522b89bd350a248","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -43,19 +43,19 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;"},{"sha":"25bfe502c7a880a853b9c88cae64fa58ebb6cc4a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":47,"deletions":24,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -63,26 +63,50 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> implements AnyDAO<A> {\n \n-    @Autowired\n-    protected PlainSchemaDAO plainSchemaDAO;\n+    private PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    protected DerSchemaDAO derSchemaDAO;\n+    private DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    protected AnySearchDAO searchDAO;\n+    private AnySearchDAO searchDAO;\n \n-    protected AnyUtils anyUtils;\n+    private AnyUtils anyUtils;\n+\n+    private PlainSchemaDAO plainSchemaDAO() {\n+        synchronized (this) {\n+            if (plainSchemaDAO == null) {\n+                plainSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(PlainSchemaDAO.class);\n+            }\n+        }\n+        return plainSchemaDAO;\n+    }\n+\n+    private DerSchemaDAO derSchemaDAO() {\n+        synchronized (this) {\n+            if (derSchemaDAO == null) {\n+                derSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(DerSchemaDAO.class);\n+            }\n+        }\n+        return derSchemaDAO;\n+    }\n+\n+    protected AnySearchDAO searchDAO() {\n+        synchronized (this) {\n+            if (searchDAO == null) {\n+                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n+            }\n+        }\n+        return searchDAO;\n+    }\n \n     protected abstract AnyUtils init();\n \n-    protected AnyUtils getAnyUtils() {\n+    protected AnyUtils anyUtils() {\n         synchronized (this) {\n             if (anyUtils == null) {\n                 anyUtils = init();\n@@ -115,13 +139,13 @@ public A authFind(final String key) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public A find(final String key) {\n-        return (A) entityManager().find(getAnyUtils().anyClass(), key);\n+        return (A) entityManager().find(anyUtils().anyClass(), key);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public A findByWorkflowId(final String workflowId) {\n-        Query query = entityManager().createQuery(\"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName()\n+        Query query = entityManager().createQuery(\"SELECT e FROM \" + anyUtils().anyClass().getSimpleName()\n                 + \" e WHERE e.workflowId = :workflowId\", User.class);\n         query.setParameter(\"workflowId\", workflowId);\n \n@@ -148,15 +172,15 @@ private Query findByAttrValueQuery(final String entityName) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<A> findByAttrValue(final String schemaKey, final PlainAttrValue attrValue) {\n-        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n+        PlainSchema schema = plainSchemaDAO().find(schemaKey);\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaKey);\n             return Collections.<A>emptyList();\n         }\n \n         String entityName = schema.isUniqueConstraint()\n-                ? getAnyUtils().plainAttrUniqueValueClass().getName()\n-                : getAnyUtils().plainAttrValueClass().getName();\n+                ? anyUtils().plainAttrUniqueValueClass().getName()\n+                : anyUtils().plainAttrValueClass().getName();\n         Query query = findByAttrValueQuery(entityName);\n         query.setParameter(\"schemaKey\", schemaKey);\n         query.setParameter(\"stringValue\", attrValue.getStringValue());\n@@ -184,7 +208,7 @@ public List<A> findByAttrValue(final String schemaKey, final PlainAttrValue attr\n \n     @Override\n     public A findByAttrUniqueValue(final String schemaKey, final PlainAttrValue attrUniqueValue) {\n-        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n+        PlainSchema schema = plainSchemaDAO().find(schemaKey);\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaKey);\n             return null;\n@@ -296,7 +320,7 @@ public int compare(final String t, final String t1) {\n             if (!used.contains(identifiers.get(i))) {\n \n                 // verify schema existence and get schema type\n-                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));\n+                PlainSchema schema = plainSchemaDAO().find(identifiers.get(i));\n                 if (schema == null) {\n                     LOG.error(\"Invalid schema id '{}'\", identifiers.get(i));\n                     throw new IllegalArgumentException(\"Invalid schema id \" + identifiers.get(i));\n@@ -351,7 +375,7 @@ public int compare(final String t, final String t1) {\n \n     @Override\n     public List<A> findByDerAttrValue(final String schemaKey, final String value) {\n-        DerSchema schema = derSchemaDAO.find(schemaKey);\n+        DerSchema schema = derSchemaDAO().find(schemaKey);\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaKey);\n             return Collections.<A>emptyList();\n@@ -368,8 +392,8 @@ public List<A> findByDerAttrValue(final String schemaKey, final String value) {\n             }\n \n             querystring.append(\"SELECT a.owner_id \").\n-                    append(\"FROM \").append(getAnyUtils().plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n-                    append(getAnyUtils().plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n+                    append(\"FROM \").append(anyUtils().plainAttrClass().getSimpleName().substring(3)).append(\" a, \").\n+                    append(anyUtils().plainAttrValueClass().getSimpleName().substring(3)).append(\" v, \").\n                     append(PlainSchema.class.getSimpleName()).append(\" s \").\n                     append(\"WHERE \").append(clause);\n \n@@ -394,8 +418,7 @@ public List<A> findByDerAttrValue(final String schemaKey, final String value) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public List<A> findByResource(final ExternalResource resource) {\n-        Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getAnyUtils().anyClass().getSimpleName() + \" e \"\n+        Query query = entityManager().createQuery(\"SELECT e FROM \" + anyUtils().anyClass().getSimpleName() + \" e \"\n                 + \"WHERE :resource MEMBER OF e.resources\");\n         query.setParameter(\"resource\", resource);\n \n@@ -417,8 +440,8 @@ private SearchCond getAllMatchingCond() {\n     public List<A> findAll(final Set<String> adminRealms,\n             final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n \n-        return searchDAO.search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy,\n-                getAnyUtils().getAnyTypeKind());\n+        return searchDAO().search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy,\n+                anyUtils().getAnyTypeKind());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -481,7 +504,7 @@ public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, fina\n \n     @Override\n     public final int count(final Set<String> adminRealms) {\n-        return searchDAO.count(adminRealms, getAllMatchingCond(), getAnyUtils().getAnyTypeKind());\n+        return searchDAO().count(adminRealms, getAllMatchingCond(), anyUtils().getAnyTypeKind());\n     }\n \n     @Override"},{"sha":"164f9a39b498c8994d43bbb9ac240dd9505015a6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -58,20 +58,36 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n \n-    @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n     private GroupDAO groupDAO;\n \n+    private UserDAO userDAO() {\n+        synchronized (this) {\n+            if (userDAO == null) {\n+                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n+            }\n+        }\n+        return userDAO;\n+    }\n+\n+    private GroupDAO groupDAO() {\n+        synchronized (this) {\n+            if (groupDAO == null) {\n+                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n+            }\n+        }\n+        return groupDAO;\n+    }\n+\n     @Override\n     public Map<AnyType, Integer> countByType() {\n         Query query = entityManager().createQuery(\n@@ -182,7 +198,7 @@ public List<URelationship> findURelationships(final AnyObject anyObject) {\n     public AnyObject save(final AnyObject anyObject) {\n         AnyObject merged = super.save(anyObject);\n \n-        groupDAO.refreshDynMemberships(merged);\n+        groupDAO().refreshDynMemberships(merged);\n \n         return merged;\n     }\n@@ -201,7 +217,7 @@ public void delete(final AnyObject any) {\n         }\n         for (URelationship relationship : findURelationships(any)) {\n             relationship.getLeftEnd().getRelationships().remove(relationship);\n-            userDAO.save(relationship.getLeftEnd());\n+            userDAO().save(relationship.getLeftEnd());\n \n             entityManager().remove(relationship);\n         }\n@@ -227,7 +243,7 @@ public List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n                     ? (String) ((Object[]) key)[0]\n                     : ((String) key);\n \n-            Group group = groupDAO.find(actualKey);\n+            Group group = groupDAO().find(actualKey);\n             if (group == null) {\n                 LOG.error(\"Could not find group with id {}, even though returned by the native query\", actualKey);\n             } else if (!result.contains(group)) {"},{"sha":"3e4ea2c594af54ef84dced9ffc49e8f8415ab5d5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -38,9 +38,17 @@ public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {\n \n     private static final String KEY = \"cd64d66f-6fff-4008-b966-a06b1cc1436d\";\n \n-    @Autowired\n     private PlainSchemaDAO schemaDAO;\n \n+    private PlainSchemaDAO schemaDAO() {\n+        synchronized (this) {\n+            if (schemaDAO == null) {\n+                schemaDAO = ApplicationContextProvider.getApplicationContext().getBean(PlainSchemaDAO.class);\n+            }\n+        }\n+        return schemaDAO;\n+    }\n+\n     @Override\n     public Conf get() {\n         Conf instance = entityManager().find(JPAConf.class, KEY);\n@@ -65,10 +73,10 @@ public CPlainAttr find(final String key) {\n     public CPlainAttr find(final String key, final String defaultValue) {\n         CPlainAttr result = find(key);\n         if (result == null) {\n-            PlainSchema schema = schemaDAO.find(key);\n+            PlainSchema schema = schemaDAO().find(key);\n             if (schema != null) {\n                 JPACPlainAttr newAttr = new JPACPlainAttr();\n-                newAttr.setSchema(schemaDAO.find(key));\n+                newAttr.setSchema(schema);\n \n                 PlainAttrValue attrValue;\n                 if (newAttr.getSchema().isUniqueConstraint()) {"},{"sha":"222e645a9647ff272e14d9ae6c9d4ecbf825f9d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":65,"deletions":16,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -57,25 +58,73 @@\n public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implements ExternalResourceDAO {\n \n     @Autowired\n+    private ConnectorRegistry connRegistry;\n+\n     private TaskDAO taskDAO;\n \n-    @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n     private GroupDAO groupDAO;\n \n-    @Autowired\n     private PolicyDAO policyDAO;\n \n-    @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private ConnectorRegistry connRegistry;\n+    private TaskDAO taskDAO() {\n+        synchronized (this) {\n+            if (taskDAO == null) {\n+                taskDAO = ApplicationContextProvider.getApplicationContext().getBean(TaskDAO.class);\n+            }\n+        }\n+        return taskDAO;\n+    }\n+\n+    private AnyObjectDAO anyObjectDAO() {\n+        synchronized (this) {\n+            if (anyObjectDAO == null) {\n+                anyObjectDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyObjectDAO.class);\n+            }\n+        }\n+        return anyObjectDAO;\n+    }\n+\n+    private UserDAO userDAO() {\n+        synchronized (this) {\n+            if (userDAO == null) {\n+                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n+            }\n+        }\n+        return userDAO;\n+    }\n+\n+    private GroupDAO groupDAO() {\n+        synchronized (this) {\n+            if (groupDAO == null) {\n+                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n+            }\n+        }\n+        return groupDAO;\n+    }\n+\n+    private PolicyDAO policyDAO() {\n+        synchronized (this) {\n+            if (policyDAO == null) {\n+                policyDAO = ApplicationContextProvider.getApplicationContext().getBean(PolicyDAO.class);\n+            }\n+        }\n+        return policyDAO;\n+    }\n+\n+    private VirSchemaDAO virSchemaDAO() {\n+        synchronized (this) {\n+            if (virSchemaDAO == null) {\n+                virSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(VirSchemaDAO.class);\n+            }\n+        }\n+        return virSchemaDAO;\n+    }\n \n     @Override\n     public int count() {\n@@ -191,20 +240,20 @@ public void delete(final String name) {\n             return;\n         }\n \n-        taskDAO.deleteAll(resource, TaskType.PROPAGATION);\n-        taskDAO.deleteAll(resource, TaskType.PULL);\n-        taskDAO.deleteAll(resource, TaskType.PUSH);\n+        taskDAO().deleteAll(resource, TaskType.PROPAGATION);\n+        taskDAO().deleteAll(resource, TaskType.PULL);\n+        taskDAO().deleteAll(resource, TaskType.PUSH);\n \n-        for (AnyObject anyObject : anyObjectDAO.findByResource(resource)) {\n+        for (AnyObject anyObject : anyObjectDAO().findByResource(resource)) {\n             anyObject.getResources().remove(resource);\n         }\n-        for (User user : userDAO.findByResource(resource)) {\n+        for (User user : userDAO().findByResource(resource)) {\n             user.getResources().remove(resource);\n         }\n-        for (Group group : groupDAO.findByResource(resource)) {\n+        for (Group group : groupDAO().findByResource(resource)) {\n             group.getResources().remove(resource);\n         }\n-        for (AccountPolicy policy : policyDAO.findByResource(resource)) {\n+        for (AccountPolicy policy : policyDAO().findByResource(resource)) {\n             policy.getResources().remove(resource);\n         }\n \n@@ -216,8 +265,8 @@ public void delete(final String name) {\n             provision.setMapping(null);\n             provision.setResource(null);\n \n-            for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n-                virSchemaDAO.delete(schema.getKey());\n+            for (VirSchema schema : virSchemaDAO().findByProvision(provision)) {\n+                virSchemaDAO().delete(schema.getKey());\n             }\n         }\n "},{"sha":"15a9d3f3bc360e61f371e0948c3916b6f698e5d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":28,"deletions":11,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -66,13 +67,29 @@\n public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n     @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n     private AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n+    private UserDAO userDAO() {\n+        synchronized (this) {\n+            if (userDAO == null) {\n+                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n+            }\n+        }\n+        return userDAO;\n+    }\n+\n+    private AnyObjectDAO anyObjectDAO() {\n+        synchronized (this) {\n+            if (anyObjectDAO == null) {\n+                anyObjectDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyObjectDAO.class);\n+            }\n+        }\n+        return anyObjectDAO;\n+    }\n \n     @Override\n     protected AnyUtils init() {\n@@ -152,14 +169,14 @@ public Group authFindByName(final String name) {\n     @Transactional(readOnly = true)\n     @Override\n     public List<Group> findOwnedByUser(final String userKey) {\n-        User owner = userDAO.find(userKey);\n+        User owner = userDAO().find(userKey);\n         if (owner == null) {\n             return Collections.<Group>emptyList();\n         }\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).\n                 append(\" e WHERE e.userOwner=:owner \");\n-        for (String groupKey : userDAO.findAllGroupKeys(owner)) {\n+        for (String groupKey : userDAO().findAllGroupKeys(owner)) {\n             queryString.append(\"OR e.groupOwner.id='\").append(groupKey).append(\"' \");\n         }\n \n@@ -218,7 +235,7 @@ public Group save(final Group group) {\n \n         // refresh dynaminc memberships\n         if (merged.getUDynMembership() != null) {\n-            List<User> matching = searchDAO.search(\n+            List<User> matching = searchDAO().search(\n                     buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),\n                     AnyTypeKind.USER);\n \n@@ -228,7 +245,7 @@ public Group save(final Group group) {\n             }\n         }\n         for (ADynGroupMembership memb : merged.getADynMemberships()) {\n-            List<AnyObject> matching = searchDAO.search(\n+            List<AnyObject> matching = searchDAO().search(\n                     buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n                     AnyTypeKind.ANY_OBJECT);\n \n@@ -254,7 +271,7 @@ public void delete(final Group group) {\n                 plainAttrDAO.delete(attr);\n             }\n \n-            anyObjectDAO.save(leftEnd);\n+            anyObjectDAO().save(leftEnd);\n         }\n         for (UMembership membership : findUMemberships(group)) {\n             User leftEnd = membership.getLeftEnd();\n@@ -267,7 +284,7 @@ public void delete(final Group group) {\n                 plainAttrDAO.delete(attr);\n             }\n \n-            userDAO.save(leftEnd);\n+            userDAO().save(leftEnd);\n         }\n \n         entityManager().remove(group);\n@@ -288,7 +305,7 @@ public List<TypeExtension> findTypeExtensions(final AnyTypeClass anyTypeClass) {\n     public void refreshDynMemberships(final AnyObject anyObject) {\n         for (Group group : findAll()) {\n             for (ADynGroupMembership memb : group.getADynMemberships()) {\n-                if (searchDAO.matches(\n+                if (searchDAO().matches(\n                         anyObject,\n                         buildDynMembershipCond(memb.getFIQLCond(), group.getRealm()))) {\n \n@@ -305,7 +322,7 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n     public void refreshDynMemberships(final User user) {\n         for (Group group : findAll()) {\n             if (group.getUDynMembership() != null) {\n-                if (searchDAO.matches(\n+                if (searchDAO().matches(\n                         user,\n                         buildDynMembershipCond(group.getUDynMembership().getFIQLCond(), group.getRealm()))) {\n "},{"sha":"dfc3840a252704c24dd404e637184fe978bb3759","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -41,9 +42,17 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    private ExternalResourceDAO resourceDAO() {\n+        synchronized (this) {\n+            if (resourceDAO == null) {\n+                resourceDAO = ApplicationContextProvider.getApplicationContext().getBean(ExternalResourceDAO.class);\n+            }\n+        }\n+        return resourceDAO;\n+    }\n+\n     @Override\n     public PlainSchema find(final String key) {\n         return entityManager().find(JPAPlainSchema.class, key);\n@@ -101,7 +110,7 @@ public void delete(final String key) {\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n             }\n \n-            resourceDAO.deleteMapping(key);\n+            resourceDAO().deleteMapping(key);\n         }\n \n         if (schema.getAnyTypeClass() != null) {"},{"sha":"dbf4f66518215688010d9da186091daeea1c47bb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -30,16 +30,24 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {\n \n-    @Autowired\n     private AnySearchDAO searchDAO;\n \n+    private AnySearchDAO searchDAO() {\n+        synchronized (this) {\n+            if (searchDAO == null) {\n+                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n+            }\n+        }\n+        return searchDAO;\n+    }\n+\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n@@ -71,7 +79,7 @@ public List<Role> findAll() {\n     public Role save(final Role role) {\n         // refresh dynaminc memberships\n         if (role.getDynMembership() != null) {\n-            List<User> matchingUsers = searchDAO.search(\n+            List<User> matchingUsers = searchDAO().search(\n                     SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n \n             role.getDynMembership().getMembers().clear();\n@@ -111,7 +119,7 @@ public void delete(final String key) {\n     public void refreshDynMemberships(final User user) {\n         for (Role role : findAll()) {\n             if (role.getDynMembership() != null) {\n-                if (searchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n+                if (searchDAO().matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n                     role.getDynMembership().add(user);\n                 } else {\n                     role.getDynMembership().getMembers().remove(user);"},{"sha":"3dff7833651c5aa0d4d928a3dd8408d548859ff8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":26,"deletions":10,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -88,12 +88,6 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     private static final Pattern USERNAME_PATTERN =\n             Pattern.compile(\"^\" + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -109,6 +103,28 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n+    private RealmDAO realmDAO;\n+\n+    private GroupDAO groupDAO;\n+\n+    private RealmDAO realmDAO() {\n+        synchronized (this) {\n+            if (realmDAO == null) {\n+                realmDAO = ApplicationContextProvider.getApplicationContext().getBean(RealmDAO.class);\n+            }\n+        }\n+        return realmDAO;\n+    }\n+\n+    private GroupDAO groupDAO() {\n+        synchronized (this) {\n+            if (groupDAO == null) {\n+                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n+            }\n+        }\n+        return groupDAO;\n+    }\n+\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n@@ -244,7 +260,7 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n         }\n \n         // add realm policies\n-        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+        for (Realm realm : realmDAO().findAncestors(user.getRealm())) {\n             policy = realm.getPasswordPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n@@ -266,7 +282,7 @@ private List<AccountPolicy> getAccountPolicies(final User user) {\n         }\n \n         // add realm policies\n-        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+        for (Realm realm : realmDAO().findAncestors(user.getRealm())) {\n             AccountPolicy policy = realm.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n@@ -415,7 +431,7 @@ public User save(final User user) {\n         }\n \n         roleDAO.refreshDynMemberships(merged);\n-        groupDAO.refreshDynMemberships(merged);\n+        groupDAO().refreshDynMemberships(merged);\n \n         return merged;\n     }\n@@ -483,7 +499,7 @@ public List<Group> findDynGroupMemberships(final User user) {\n                     ? (String) ((Object[]) key)[0]\n                     : ((String) key);\n \n-            Group group = groupDAO.find(actualKey);\n+            Group group = groupDAO().find(actualKey);\n             if (group == null) {\n                 LOG.error(\"Could not find group with id {}, even though returned by the native query\", actualKey);\n             } else if (!result.contains(group)) {"},{"sha":"4dfc8dbb473804146908e7c56b6d6fcd2b2dddd5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -38,15 +38,23 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchemaDAO {\n \n-    @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    private ExternalResourceDAO resourceDAO() {\n+        synchronized (this) {\n+            if (resourceDAO == null) {\n+                resourceDAO = ApplicationContextProvider.getApplicationContext().getBean(ExternalResourceDAO.class);\n+            }\n+        }\n+        return resourceDAO;\n+    }\n+\n     @Override\n     public VirSchema find(final String key) {\n         return entityManager().find(JPAVirSchema.class, key);\n@@ -118,7 +126,7 @@ public void delete(final String key) {\n             return;\n         }\n \n-        resourceDAO.deleteMapping(key);\n+        resourceDAO().deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {\n             schema.getAnyTypeClass().getVirSchemas().remove(schema);"},{"sha":"b5363e433342392216eca94fc79ac081c781d009","filename":"core/persistence-jpa/src/main/resources/domains/MasterDomain.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterDomain.xml?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -43,7 +43,7 @@ under the License.\n   <!-- Use JNDI datasource as default but, when not available, revert to\n   local datasource, with different properties for execution and testing. \n   In any case, get all JDBC connections with a determined isolation level. -->\n-  <bean id=\"MasterDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+  <bean id=\"MasterDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\" primary=\"true\">\n     <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeMasterDataSource\"/>\n     <property name=\"defaultObject\" ref=\"localMasterDataSource\"/>\n   </bean>"},{"sha":"46e1c79fdf3b53f96f9314e61fe72bd7430335a6","filename":"core/persistence-jpa/src/test/resources/domains/TwoDomain.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoDomain.xml?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -43,7 +43,7 @@ under the License.\n   <!-- Use JNDI datasource as default but, when not available, revert to\n   local datasource, with different properties for execution and testing. \n   In any case, get all JDBC connections with a determined isolation level. -->\n-  <bean id=\"TwoDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+  <bean id=\"TwoDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\" primary=\"true\">\n     <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeTwoDataSource\"/>\n     <property name=\"defaultObject\" ref=\"localTwoDataSource\"/>\n   </bean>\n@@ -122,4 +122,4 @@ under the License.\n   \n   <tx:annotation-driven transaction-manager=\"TwoTransactionManager\"/>\n \n-</beans>\n\\ No newline at end of file\n+</beans>"},{"sha":"160c70276e7dd2713ab46ab1948216f302a92ca5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":21,"deletions":33,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -40,57 +40,54 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n-import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.api.IntAttrName;\n-import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n-import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n \n abstract class AbstractAnyDataBinder {\n \n@@ -117,12 +114,6 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    protected DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    protected VirSchemaDAO virSchemaDAO;\n-\n     @Autowired\n     protected PlainAttrDAO plainAttrDAO;\n \n@@ -153,9 +144,6 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    protected ConnObjectUtils connObjectUtils;\n-\n     @Autowired\n     protected MappingManager mappingManager;\n "},{"sha":"470165287db24d61465a47219d86b33ee7f00415","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -21,15 +21,12 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\n-                           http://www.springframework.org/schema/aop \n-                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>"},{"sha":"dd6c88c09687b91d735cf2c10e83c83b44bb430f","filename":"fit/core-reference/src/main/resources/jboss/restCXFContext.xml","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9cc238c97f8dd63a53ad52ef45f0a6a86aef0324/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml?ref=9cc238c97f8dd63a53ad52ef45f0a6a86aef0324","patch":"@@ -21,15 +21,12 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://cxf.apache.org/jaxrs\n                            http://cxf.apache.org/schemas/jaxrs.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\n-                           http://www.springframework.org/schema/aop \n-                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n \n   <import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\"/>"}]}