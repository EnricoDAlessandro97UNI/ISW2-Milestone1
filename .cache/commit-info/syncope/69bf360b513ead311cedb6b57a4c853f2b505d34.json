{"sha":"69bf360b513ead311cedb6b57a4c853f2b505d34","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY5YmYzNjBiNTEzZWFkMzExY2VkYjZiNTdhNGM4NTNmMmI1MDVkMzQ=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-05T14:29:31Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-03-05T14:29:31Z"},"message":"Connector configuration properties setting used to fail with character property type\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1297069 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd0a99a6e5254e790de79bc3a6f170f802ec0c6e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cd0a99a6e5254e790de79bc3a6f170f802ec0c6e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/69bf360b513ead311cedb6b57a4c853f2b505d34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/69bf360b513ead311cedb6b57a4c853f2b505d34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/69bf360b513ead311cedb6b57a4c853f2b505d34","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/69bf360b513ead311cedb6b57a4c853f2b505d34/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d40c0df5751f8b9aa82c97fe89a5e826557106c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d40c0df5751f8b9aa82c97fe89a5e826557106c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d40c0df5751f8b9aa82c97fe89a5e826557106c"}],"stats":{"total":200,"additions":72,"deletions":128},"files":[{"sha":"ee90f9fea407fc3942631c97a725c2c3364c5dfb","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":52,"deletions":86,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69bf360b513ead311cedb6b57a4c853f2b505d34/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69bf360b513ead311cedb6b57a4c853f2b505d34/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=69bf360b513ead311cedb6b57a4c853f2b505d34","patch":"@@ -127,8 +127,7 @@ public ConnectorFacadeProxy(\n         // get the specified connector.\n         ConnectorInfo info;\n         try {\n-            info = connBundleManager.getConnectorManager().\n-                    findConnectorInfo(key);\n+            info = connBundleManager.getConnectorManager().findConnectorInfo(key);\n             if (info == null) {\n                 throw new NotFoundException(\"Connector Info for key \" + key);\n             }\n@@ -144,8 +143,7 @@ public ConnectorFacadeProxy(\n         }\n \n         // retrieve the ConfigurationProperties.\n-        ConfigurationProperties properties =\n-                apiConfig.getConfigurationProperties();\n+        final ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n \n         if (properties == null) {\n             throw new NotFoundException(\"Configuration properties\");\n@@ -154,99 +152,24 @@ public ConnectorFacadeProxy(\n         // Print out what the properties are (not necessary)\n         if (LOG.isDebugEnabled()) {\n             for (String propName : properties.getPropertyNames()) {\n-                LOG.debug(\"\\nProperty Name: \"\n-                        + properties.getProperty(propName).getName()\n-                        + \"\\nProperty Type: \"\n-                        + properties.getProperty(propName).getType());\n+                LOG.debug(\"\\nProperty Name: {}\\nProperty Type: {}\",\n+                        properties.getProperty(propName).getName(),\n+                        properties.getProperty(propName).getType());\n             }\n         }\n \n         // Set all of the ConfigurationProperties needed by the connector.\n-        Class propertySchemaClass;\n-        Object propertyValue;\n         for (ConnConfProperty property : connInstance.getConfiguration()) {\n-            if (property.getValues() != null\n-                    && !property.getValues().isEmpty()) {\n-                try {\n-                    propertySchemaClass = ClassUtils.forName(\n-                            property.getSchema().getType(),\n-                            ClassUtils.getDefaultClassLoader());\n-\n-                    if (GuardedString.class.equals(propertySchemaClass)) {\n-                        propertyValue = new GuardedString(\n-                                ((String) property.getValues().iterator().next()).toCharArray());\n-                    } else if (GuardedByteArray.class.equals(\n-                            propertySchemaClass)) {\n-\n-                        propertyValue = new GuardedByteArray(\n-                                (byte[]) property.getValues().iterator().next());\n-                    } else if (Character.class.equals(propertySchemaClass)\n-                            || char.class.equals(propertySchemaClass)) {\n-\n-                        propertyValue =\n-                                (Character) property.getValues().iterator().next();\n-                    } else if (Integer.class.equals(propertySchemaClass)\n-                            || int.class.equals(propertySchemaClass)) {\n-\n-                        propertyValue =\n-                                Integer.parseInt(\n-                                property.getValues().iterator().next().toString());\n-\n-                    } else if (Long.class.equals(propertySchemaClass)\n-                            || long.class.equals(propertySchemaClass)) {\n-\n-                        propertyValue =\n-                                Long.parseLong(\n-                                property.getValues().iterator().next().toString());\n-\n-                    } else if (Float.class.equals(propertySchemaClass)\n-                            || float.class.equals(propertySchemaClass)) {\n-\n-                        propertyValue =\n-                                Float.parseFloat(\n-                                property.getValues().iterator().next().toString());\n-\n-                    } else if (Double.class.equals(propertySchemaClass)\n-                            || double.class.equals(propertySchemaClass)) {\n-\n-                        propertyValue =\n-                                Double.parseDouble(\n-                                property.getValues().iterator().next().toString());\n-\n-                    } else if (Boolean.class.equals(propertySchemaClass)\n-                            || boolean.class.equals(propertySchemaClass)) {\n-\n-                        propertyValue =\n-                                Boolean.parseBoolean(\n-                                property.getValues().iterator().next().toString());\n-\n-                    } else if (URI.class.equals(propertySchemaClass)) {\n-                        propertyValue = URI.create(\n-                                (String) property.getValues().iterator().next());\n-                    } else if (File.class.equals(propertySchemaClass)) {\n-                        propertyValue = new File(\n-                                (String) property.getValues().iterator().next());\n-                    } else if (String[].class.equals(propertySchemaClass)) {\n-                        propertyValue =\n-                                ((List<String>) property.getValues()).toArray(\n-                                new String[]{});\n-                    } else {\n-                        propertyValue =\n-                                (String) property.getValues().iterator().next();\n-                    }\n-\n-                    properties.setPropertyValue(\n-                            property.getSchema().getName(), propertyValue);\n-                } catch (Throwable t) {\n-                    LOG.error(\"Invalid ConnConfProperty specified: {}\",\n-                            property, t);\n-                }\n+            final Object propertyValue = getPropertyValue(property);\n+            if (propertyValue != null) {\n+                properties.setPropertyValue(property.getSchema().getName(), propertyValue);\n             }\n         }\n \n         // Use the ConnectorFacadeFactory's newInstance() method to get\n         // a new connector.\n         connector = ConnectorFacadeFactory.getInstance().newInstance(apiConfig);\n+\n         if (connector == null) {\n             throw new NotFoundException(\"Connector\");\n         }\n@@ -665,4 +588,47 @@ public OperationOptions getOperationOptions(\n \n         return oob.build();\n     }\n+\n+    private Object getPropertyValue(final ConnConfProperty property) {\n+        Object value = null;\n+\n+        final List<Object> values = property.getValues();\n+\n+        if (values != null && !values.isEmpty()) {\n+            try {\n+                final Class propertySchemaClass =\n+                        ClassUtils.forName(property.getSchema().getType(), ClassUtils.getDefaultClassLoader());\n+\n+                if (GuardedString.class.equals(propertySchemaClass)) {\n+                    value = new GuardedString((values.get(0).toString()).toCharArray());\n+                } else if (GuardedByteArray.class.equals(propertySchemaClass)) {\n+                    value = new GuardedByteArray((byte[]) values.get(0));\n+                } else if (Character.class.equals(propertySchemaClass) || char.class.equals(propertySchemaClass)) {\n+                    value = StringUtils.hasText((String) values.get(0)) ? values.get(0).toString().charAt(0) : null;\n+                } else if (Integer.class.equals(propertySchemaClass) || int.class.equals(propertySchemaClass)) {\n+                    value = Integer.parseInt(values.get(0).toString());\n+                } else if (Long.class.equals(propertySchemaClass) || long.class.equals(propertySchemaClass)) {\n+                    value = Long.parseLong(values.get(0).toString());\n+                } else if (Float.class.equals(propertySchemaClass) || float.class.equals(propertySchemaClass)) {\n+                    value = Float.parseFloat(values.get(0).toString());\n+                } else if (Double.class.equals(propertySchemaClass) || double.class.equals(propertySchemaClass)) {\n+                    value = Double.parseDouble(values.get(0).toString());\n+                } else if (Boolean.class.equals(propertySchemaClass) || boolean.class.equals(propertySchemaClass)) {\n+                    value = Boolean.parseBoolean(values.get(0).toString());\n+                } else if (URI.class.equals(propertySchemaClass)) {\n+                    value = URI.create(values.get(0).toString());\n+                } else if (File.class.equals(propertySchemaClass)) {\n+                    value = new File(values.get(0).toString());\n+                } else if (String[].class.equals(propertySchemaClass)) {\n+                    value = values.toArray(new String[]{});\n+                } else {\n+                    value = values.get(0).toString();\n+                }\n+            } catch (Throwable t) {\n+                LOG.error(\"Invalid ConnConfProperty specified: {}\", property, t);\n+            }\n+        }\n+\n+        return value;\n+    }\n }"},{"sha":"f09652cb170d15cd7803c116970ae0ca51713b95","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":11,"deletions":24,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69bf360b513ead311cedb6b57a4c853f2b505d34/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69bf360b513ead311cedb6b57a4c853f2b505d34/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=69bf360b513ead311cedb6b57a4c853f2b505d34","patch":"@@ -227,8 +227,7 @@ public ConnInstanceTO read(\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/bundle/list\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/bundle/list\")\n     @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n@@ -240,8 +239,7 @@ public List<ConnBundleTO> getBundles(\n             CurrentLocale.set(new Locale(lang));\n         }\n \n-        ConnectorInfoManager manager =\n-                bundleManager.getConnectorManager();\n+        ConnectorInfoManager manager = bundleManager.getConnectorManager();\n \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n \n@@ -261,18 +259,14 @@ public List<ConnBundleTO> getBundles(\n         if (bundles != null) {\n             for (ConnectorInfo bundle : bundles) {\n                 connectorBundleTO = new ConnBundleTO();\n-                connectorBundleTO.setDisplayName(\n-                        bundle.getConnectorDisplayName());\n+                connectorBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n \n                 key = bundle.getConnectorKey();\n \n                 LOG.debug(\"\\nBundle name: {}\"\n                         + \"\\nBundle version: {}\"\n                         + \"\\nBundle class: {}\",\n-                        new Object[]{\n-                            key.getBundleName(),\n-                            key.getBundleVersion(),\n-                            key.getConnectorName()});\n+                        new Object[]{key.getBundleName(), key.getBundleVersion(), key.getConnectorName()});\n \n                 connectorBundleTO.setBundleName(key.getBundleName());\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n@@ -289,30 +283,24 @@ public List<ConnBundleTO> getBundles(\n                     configurationProperty = properties.getProperty(propName);\n \n                     // set name\n-                    connConfPropSchema.setName(\n-                            configurationProperty.getName());\n+                    connConfPropSchema.setName(configurationProperty.getName());\n \n                     // set display name\n-                    connConfPropSchema.setDisplayName(\n-                            configurationProperty.getDisplayName(propName));\n+                    connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n \n                     // set help message\n-                    connConfPropSchema.setHelpMessage(\n-                            configurationProperty.getHelpMessage(propName));\n+                    connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n \n                     // set if mandatory\n-                    connConfPropSchema.setRequired(\n-                            configurationProperty.isRequired());\n+                    connConfPropSchema.setRequired(configurationProperty.isRequired());\n \n                     // set type\n-                    connConfPropSchema.setType(\n-                            configurationProperty.getType().getName());\n+                    connConfPropSchema.setType(configurationProperty.getType().getName());\n \n                     connectorBundleTO.addProperty(connConfPropSchema);\n                 }\n \n-                LOG.debug(\"Bundle properties: {}\",\n-                        connectorBundleTO.getProperties());\n+                LOG.debug(\"Bundle properties: {}\", connectorBundleTO.getProperties());\n \n                 connectorBundleTOs.add(connectorBundleTO);\n             }\n@@ -397,8 +385,7 @@ public ModelAndView check(final HttpServletResponse response,\n     }\n \n     /**\n-     * Merge connector configuration properties avoiding repetition but giving\n-     * priority to primary set.\n+     * Merge connector configuration properties avoiding repetition but giving priority to primary set.\n      *\n      * @param primary primary set.\n      * @param secondary secondary set."},{"sha":"20303f963c391321d6fdef67a208ff47aa9a0f8e","filename":"core/src/main/java/org/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":9,"deletions":18,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/69bf360b513ead311cedb6b57a4c853f2b505d34/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/69bf360b513ead311cedb6b57a4c853f2b505d34/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=69bf360b513ead311cedb6b57a4c853f2b505d34","patch":"@@ -156,8 +156,7 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n             throws NotFoundException {\n \n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-        connInstanceTO.setId(connInstance.getId() != null\n-                ? connInstance.getId().longValue() : 0L);\n+        connInstanceTO.setId(connInstance.getId() != null ? connInstance.getId().longValue() : 0L);\n \n         // retrieve the ConfigurationProperties.\n         ConfigurationProperties properties =\n@@ -166,37 +165,29 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n                 connInstance.getVersion(),\n                 connInstance.getConnectorName());\n \n-        BeanUtils.copyProperties(\n-                connInstance, connInstanceTO, IGNORE_PROPERTIES);\n+        BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n \n         ConnConfPropSchema connConfPropSchema;\n         ConfigurationProperty configurationProperty;\n \n-        Map<String, ConnConfProperty> connInstanceToConfMap =\n-                connInstanceTO.getConfigurationMap();\n+        Map<String, ConnConfProperty> connInstanceToConfMap = connInstanceTO.getConfigurationMap();\n         for (String propName : properties.getPropertyNames()) {\n             configurationProperty = properties.getProperty(propName);\n \n             if (!connInstanceToConfMap.containsKey(propName)) {\n                 connConfPropSchema = new ConnConfPropSchema();\n-                connConfPropSchema.setName(\n-                        configurationProperty.getName());\n-                connConfPropSchema.setDisplayName(\n-                        configurationProperty.getDisplayName(propName));\n-                connConfPropSchema.setHelpMessage(\n-                        configurationProperty.getHelpMessage(propName));\n-                connConfPropSchema.setRequired(\n-                        configurationProperty.isRequired());\n-                connConfPropSchema.setType(\n-                        configurationProperty.getType().getName());\n+                connConfPropSchema.setName(configurationProperty.getName());\n+                connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n+                connConfPropSchema.setHelpMessage(configurationProperty.getHelpMessage(propName));\n+                connConfPropSchema.setRequired(configurationProperty.isRequired());\n+                connConfPropSchema.setType(configurationProperty.getType().getName());\n \n                 ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(connConfPropSchema);\n                 connInstanceTO.addConfiguration(property);\n             } else {\n                 connInstanceToConfMap.get(propName).getSchema().\n-                        setDisplayName(\n-                        configurationProperty.getDisplayName(propName));\n+                        setDisplayName(configurationProperty.getDisplayName(propName));\n             }\n         }\n         return connInstanceTO;"}]}