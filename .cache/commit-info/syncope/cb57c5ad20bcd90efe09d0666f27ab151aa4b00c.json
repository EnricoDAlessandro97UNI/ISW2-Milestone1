{"sha":"cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiNTdjNWFkMjBiY2Q5MGVmZTA5ZDA2NjZmMjdhYjE1MWFhNGIwMGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-13T14:07:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-13T14:07:53Z"},"message":"[SYNCOPE-1144] Minor changes and cleanup","tree":{"sha":"4c078a871a820e517027cfd131572655e0cbb340","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4c078a871a820e517027cfd131572655e0cbb340"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d7fbfe4862851bc5d7833dbb293c6b3f4b5185d5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d7fbfe4862851bc5d7833dbb293c6b3f4b5185d5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d7fbfe4862851bc5d7833dbb293c6b3f4b5185d5"}],"stats":{"total":377,"additions":184,"deletions":193},"files":[{"sha":"6fc1ab0260e7c053e79e4880b1b76928f7d9e395","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -34,6 +34,14 @@ public class AuditLoggerName extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -647989486671786839L;\n \n+    public static String getAuditLoggerName(final String domain) {\n+        return LoggerType.AUDIT.getPrefix() + \".\" + domain;\n+    }\n+\n+    public static String getAuditEventLoggerName(final String domain, final String loggerName) {\n+        return domain + \".\" + loggerName;\n+    }\n+\n     private final AuditElements.EventCategoryType type;\n \n     private final String category;\n@@ -105,7 +113,7 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n                 eventCategory.getKey().getCategory(),\n                 eventCategory.getKey().getSubcategory(),\n                 eventCategory.getKey().getEvents().isEmpty()\n-                        ? StringUtils.EMPTY : eventCategory.getKey().getEvents().iterator().next(),\n+                ? StringUtils.EMPTY : eventCategory.getKey().getEvents().iterator().next(),\n                 eventCategory.getValue());\n     }\n "},{"sha":"0065543ddfc93745adaf3371851af97d2ddb23e2","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAuditAppender.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;"},{"sha":"5429c24916587b4e662623cc74287b4a6b6c5b2c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -53,6 +53,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.init.LoggerLoader;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n@@ -62,7 +63,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n-import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n@@ -220,41 +220,41 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         syncopeLogger.setLevel(LoggerLevel.fromLevel(level));\n         syncopeLogger = loggerDAO.save(syncopeLogger);\n \n-        boolean isAudit = LoggerType.AUDIT.equals(syncopeLogger.getType());\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-        String domainAuditLoggerName =\n-                AuditManagerImpl.getDomainAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.\n-                        getKey());\n-        LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n-                ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n-                : isAudit\n-                        ? ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName)\n-                        : ctx.getConfiguration().getLoggerConfig(name);\n-\n-        if (isAudit) {\n+        LoggerConfig logConf;\n+\n+        if (LoggerType.AUDIT.equals(syncopeLogger.getType())) {\n+            String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(\n+                    AuthContextUtils.getDomain(), syncopeLogger.getKey());\n+\n+            logConf = ctx.getConfiguration().getLoggerConfig(auditLoggerName);\n+\n             // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-            List<AuditAppender> auditAppenders = loggerLoader.auditAppenders(AuthContextUtils.getDomain());\n             boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(logConf.getName());\n-            final String loggerKey = syncopeLogger.getKey();\n             if (isRootLogConf) {\n-                logConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+                logConf = new LoggerConfig(auditLoggerName, null, false);\n             }\n-            for (AuditAppender auditAppender : auditAppenders) {\n-\n+            for (AuditAppender auditAppender : loggerLoader.auditAppenders(AuthContextUtils.getDomain())) {\n                 if (IterableUtils.matchesAny(auditAppender.getEvents(), new Predicate<AuditLoggerName>() {\n \n                     @Override\n                     public boolean evaluate(final AuditLoggerName auditLoggerName) {\n-                        return loggerKey.equalsIgnoreCase(auditLoggerName.toLoggerName());\n+                        return name.equalsIgnoreCase(auditLoggerName.toLoggerName());\n                     }\n                 })) {\n+\n                     loggerLoader.addAppenderToContext(ctx, auditAppender, logConf);\n                 }\n             }\n             if (isRootLogConf) {\n-                ctx.getConfiguration().addLogger(domainAuditLoggerName, logConf);\n+                ctx.getConfiguration().addLogger(auditLoggerName, logConf);\n             }\n+        } else {\n+            logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n+                    ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n+                    : ctx.getConfiguration().getLoggerConfig(name);\n         }\n+\n         logConf.setLevel(level);\n         ctx.updateLoggers();\n \n@@ -289,7 +289,6 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n         if (expectedType != syncopeLogger.getType()) {\n             throwInvalidLogger(expectedType);\n         }\n-        boolean isAudit = LoggerType.AUDIT.equals(syncopeLogger.getType());\n \n         LoggerTO loggerToDelete = new LoggerTO();\n         BeanUtils.copyProperties(syncopeLogger, loggerToDelete);\n@@ -299,14 +298,15 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n \n         // set log level to OFF in order to disable configured logger until next reboot\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-        String domainAuditLoggerName =\n-                AuditManagerImpl.getDomainAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.\n-                        getKey());\n+\n+        String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(\n+                AuthContextUtils.getDomain(), syncopeLogger.getKey());\n         org.apache.logging.log4j.core.Logger logger = SyncopeConstants.ROOT_LOGGER.equals(name)\n                 ? ctx.getLogger(LogManager.ROOT_LOGGER_NAME)\n-                : isAudit\n-                        ? ctx.getLogger(domainAuditLoggerName)\n-                        : ctx.getLogger(name);\n+                : LoggerType.AUDIT.equals(syncopeLogger.getType())\n+                ? ctx.getLogger(auditLoggerName)\n+                : ctx.getLogger(name);\n+\n         logger.setLevel(Level.OFF);\n         ctx.updateLoggers();\n "},{"sha":"f6a07169f6299f0ad2e84dd520538fc884999661","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/audit/AuditAppender.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.logic.audit;\n \n import java.util.Set;\n import org.apache.logging.log4j.core.Appender;\n@@ -27,7 +27,8 @@\n /**\n  * Basic interface to implement to define a custom audit appender\n  *\n- * @see org.apache.syncope.core.logic.DefaultRewriteAuditAppender or org.apache.syncope.core.logic.DefaultAuditAppender\n+ * @see DefaultAuditAppender\n+ * @see DefaultRewriteAuditAppender\n  */\n public interface AuditAppender {\n \n@@ -40,7 +41,7 @@ public interface AuditAppender {\n     RewritePolicy getRewritePolicy();\n \n     String getTargetAppenderName();\n-    \n+\n     void setDomainName(String name);\n \n     String getDomainName();","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AuditAppender.java"},{"sha":"0fdd0b5bfeb80715286050fce68c97e38f455878","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultAuditAppender.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -16,19 +16,19 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.logic.audit;\n \n import java.util.Collections;\n import java.util.Set;\n import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.AbstractAuditAppender;\n \n /**\n  * Default (abstract) implementation of custom audit appender.\n  * It is bound to an empty collection of events, i.e. it does not create any logger.\n- * This class has to be extended by non-rewrite appenders\n- *\n- * @see org.apache.syncope.fit.core.reference.TestFileAuditAppender\n+ * This class shall be extended by non-rewriting appenders; for rewriting, extend\n+ * {@link DefaultRewriteAuditAppender} instead.\n  */\n public abstract class DefaultAuditAppender extends AbstractAuditAppender {\n ","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DefaultAuditAppender.java"},{"sha":"a937cc9c2edf18aa55f05d8d7b1e7d38f06cd16c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultRewriteAuditAppender.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FDefaultRewriteAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.logic.audit;\n \n import java.util.Collections;\n import java.util.Set;\n@@ -27,13 +27,13 @@\n import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n import org.apache.logging.log4j.core.config.AppenderRef;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.logic.AbstractAuditAppender;\n \n /**\n- * Default (abstract) implementation of custom rewriting audit appender; it provides rewrite appender definition and \n- * a default \"pass-through\" policy. It is bound to an empty collection of events, i.e. it does not create any logger.\n- * This class has to be extended by rewrite appenders.\n- *\n- * @see org.apache.syncope.fit.core.reference.TestFileRewriteAuditAppender\n+ * Default (abstract) implementation of custom rewriting audit appender; it provides rewrite appender definition and\n+ * a default \"pass-through\" policy.\n+ * It is bound to an empty collection of events, i.e. it does not create any logger.\n+ * This class shall be extended by rewriting appenders; for non-rewriting, extend {@link DefaultAuditAppender} instead.\n  */\n public abstract class DefaultRewriteAuditAppender extends AbstractAuditAppender {\n \n@@ -58,7 +58,7 @@ public Set<AuditLoggerName> getEvents() {\n \n     @Override\n     public RewritePolicy getRewritePolicy() {\n-        return PassThroughRewritePolicy.createPolicy();\n+        return PassThroughAuditRewritePolicy.createPolicy();\n     }\n \n }","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DefaultRewriteAuditAppender.java"},{"sha":"b3ee96829238585b040ac3dc08a039919582e93e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/audit/PassThroughAuditRewritePolicy.java","status":"renamed","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FPassThroughAuditRewritePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FPassThroughAuditRewritePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FPassThroughAuditRewritePolicy.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -16,26 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic;\n+package org.apache.syncope.core.logic.audit;\n \n import org.apache.logging.log4j.core.Core;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;\n import org.apache.logging.log4j.core.config.plugins.Plugin;\n import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n \n-@Plugin(name = \"PassThroughRewritePolicy\", category = Core.CATEGORY_NAME, elementType = \"rewritePolicy\",\n+@Plugin(name = \"PassThroughRewritePolicy\",\n+        category = Core.CATEGORY_NAME,\n+        elementType = \"rewritePolicy\",\n         printObject = true)\n-public class PassThroughRewritePolicy implements RewritePolicy {\n+public class PassThroughAuditRewritePolicy implements RewritePolicy {\n \n     @Override\n     public LogEvent rewrite(final LogEvent event) {\n         return event;\n     }\n \n     @PluginFactory\n-    public static PassThroughRewritePolicy createPolicy() {\n-        return new PassThroughRewritePolicy();\n+    public static PassThroughAuditRewritePolicy createPolicy() {\n+        return new PassThroughAuditRewritePolicy();\n     }\n \n }","previous_filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PassThroughRewritePolicy.java"},{"sha":"1b9bc72daa7fc1352d31cc4aee8f8f0fcdb5b982","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.core.logic.AuditAppender;\n+import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;"},{"sha":"4f71ae69e96c00300dbc92089860134f3278fb17","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerAccessor.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -24,13 +24,13 @@\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n-import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -58,8 +58,8 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n             }\n         }\n         for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.AUDIT)) {\n-            syncopeLoggers.put(AuditManagerImpl.getDomainAuditEventLoggerName(AuthContextUtils.getDomain(),\n-                    syncopeLogger.getKey()), syncopeLogger);\n+            syncopeLoggers.put(AuditLoggerName.getAuditEventLoggerName(\n+                    AuthContextUtils.getDomain(), syncopeLogger.getKey()), syncopeLogger);\n         }\n \n         /*\n@@ -73,8 +73,9 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n                 if (syncopeLoggers.containsKey(loggerName)) {\n                     logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n                     syncopeLoggers.remove(loggerName);\n-                } else if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix()) || !loggerName.startsWith(\n-                        AuthContextUtils.getDomain() + \".\" + LoggerType.AUDIT.getPrefix())) {\n+                } else if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix())\n+                        || !loggerName.startsWith(AuthContextUtils.getDomain() + \".\" + LoggerType.AUDIT.getPrefix())) {\n+\n                     Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n                     syncopeLogger.setKey(loggerName);\n                     syncopeLogger.setLevel(LoggerLevel.fromLevel(logConf.getLevel()));\n@@ -88,9 +89,8 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n          * Foreach SyncopeLogger not found in log4j create a new log4j logger with given name and level.\n          */\n         for (Map.Entry<String, Logger> entry : syncopeLoggers.entrySet()) {\n-            Logger syncopeLogger = entry.getValue();\n             LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(entry.getKey());\n-            logConf.setLevel(syncopeLogger.getLevel().getLevel());\n+            logConf.setLevel(entry.getValue().getLevel().getLevel());\n         }\n \n         ctx.updateLoggers();"},{"sha":"e4a4bc53419a1c9d75a923196fe8dbdaaa2961e7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":22,"deletions":28,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -36,9 +36,8 @@\n import org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.logic.AuditAppender;\n+import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.MemoryAppender;\n-import org.apache.syncope.core.provisioning.java.AuditManagerImpl;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n@@ -111,13 +110,28 @@ public void load() {\n             }\n \n             LoggerConfig logConf = new LoggerConfig(\n-                    AuditManagerImpl.getDomainAuditLoggerName(entry.getKey()), null, false);\n+                    AuditLoggerName.getAuditLoggerName(entry.getKey()), null, false);\n             logConf.addAppender(appender, Level.DEBUG, null);\n             logConf.setLevel(Level.DEBUG);\n-            ctx.getConfiguration().addLogger(AuditManagerImpl.getDomainAuditLoggerName(entry.getKey()), logConf);\n+            ctx.getConfiguration().addLogger(AuditLoggerName.getAuditLoggerName(entry.getKey()), logConf);\n \n             // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-            configureCustomAppenders(entry.getKey(), ctx);\n+            for (AuditAppender auditAppender : auditAppenders(entry.getKey())) {\n+                for (AuditLoggerName event : auditAppender.getEvents()) {\n+                    String domainAuditLoggerName =\n+                            AuditLoggerName.getAuditEventLoggerName(entry.getKey(), event.toLoggerName());\n+                    LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n+\n+                    if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {\n+                        eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+                    }\n+                    addAppenderToContext(ctx, auditAppender, eventLogConf);\n+                    eventLogConf.setLevel(Level.DEBUG);\n+                    if (LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName())) {\n+                        ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n+                    }\n+                }\n+            }\n \n             AuthContextUtils.execWithAuthContext(entry.getKey(), new AuthContextUtils.Executable<Void>() {\n \n@@ -136,28 +150,7 @@ public Map<String, MemoryAppender> getMemoryAppenders() {\n         return memoryAppenders;\n     }\n \n-    public void configureCustomAppenders(final String domainName, final LoggerContext ctx) {\n-        List<AuditAppender> auditAppenders = auditAppenders(domainName);\n-        for (AuditAppender auditAppender : auditAppenders) {\n-            for (AuditLoggerName event : auditAppender.getEvents()) {\n-                String domainAuditLoggerName =\n-                        AuditManagerImpl.getDomainAuditEventLoggerName(domainName, event.toLoggerName());\n-                LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n-                boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n-\n-                if (isRootLogConf) {\n-                    eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n-                }\n-                addAppenderToContext(ctx, auditAppender, eventLogConf);\n-                eventLogConf.setLevel(Level.DEBUG);\n-                if (isRootLogConf) {\n-                    ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n-                }\n-            }\n-        }\n-    }\n-\n-    public List<AuditAppender> auditAppenders(final String domainName) throws BeansException {\n+    public List<AuditAppender> auditAppenders(final String domain) throws BeansException {\n         List<AuditAppender> auditAppenders = new ArrayList<>();\n         for (Class<?> clazz : implementationLookup.getAuditAppenderClasses()) {\n             AuditAppender auditAppender;\n@@ -167,7 +160,7 @@ public List<AuditAppender> auditAppenders(final String domainName) throws BeansE\n             } else {\n                 auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n                         createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-                auditAppender.setDomainName(domainName);\n+                auditAppender.setDomainName(domain);\n                 auditAppender.init();\n             }\n             auditAppenders.add(auditAppender);\n@@ -179,6 +172,7 @@ public void addAppenderToContext(\n             final LoggerContext ctx,\n             final AuditAppender auditAppender,\n             final LoggerConfig eventLogConf) {\n+\n         Appender targetAppender = ctx.getConfiguration().getAppender(auditAppender.getTargetAppenderName());\n         if (targetAppender == null) {\n             targetAppender = auditAppender.getTargetAppender();"},{"sha":"6b32cbbf9d7989749d428ca84302fbcc7f5b4ca7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditManagerImpl.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditManagerImpl.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n@@ -41,14 +40,6 @@ public class AuditManagerImpl implements AuditManager {\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n-    public static String getDomainAuditLoggerName(final String domain) {\n-        return LoggerType.AUDIT.getPrefix() + \".\" + domain;\n-    }\n-\n-    public static String getDomainAuditEventLoggerName(final String domain, final String loggerName) {\n-        return domain + \".\" + loggerName;\n-    }\n-\n     @Override\n     public boolean auditRequested(\n             final AuditElements.EventCategoryType type,\n@@ -121,9 +112,10 @@ public void audit(\n         org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n                 loggerDAO.find(auditEntry.getLogger().toLoggerName());\n         if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n-            Logger logger = LoggerFactory.getLogger(getDomainAuditLoggerName(AuthContextUtils.getDomain()));\n-            Logger eventLogger = LoggerFactory.getLogger(getDomainAuditEventLoggerName(AuthContextUtils.getDomain(),\n-                    syncopeLogger.getKey()));\n+            Logger logger = LoggerFactory.getLogger(\n+                    AuditLoggerName.getAuditLoggerName(AuthContextUtils.getDomain()));\n+            Logger eventLogger = LoggerFactory.getLogger(\n+                    AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.getKey()));\n             String serializedAuditEntry = POJOHelper.serialize(auditEntry);\n             if (throwable == null) {\n                 logger.debug(serializedAuditEntry);"},{"sha":"0efc767a8a89956a7dd37982f0fc9613bf5815c0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/SyslogRewriteAuditAppender.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyslogRewriteAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.logic.ConnectorLogic;\n-import org.apache.syncope.core.logic.DefaultRewriteAuditAppender;\n+import org.apache.syncope.core.logic.audit.DefaultRewriteAuditAppender;\n import org.apache.syncope.core.logic.ResourceLogic;\n \n public class SyslogRewriteAuditAppender extends DefaultRewriteAuditAppender {"},{"sha":"8942a5ca709d2d2dbee2e6099b5dd02b379bc300","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.logic.ConnectorLogic;\n-import org.apache.syncope.core.logic.DefaultAuditAppender;\n+import org.apache.syncope.core.logic.audit.DefaultAuditAppender;\n import org.apache.syncope.core.logic.ResourceLogic;\n \n public class TestFileAuditAppender extends DefaultAuditAppender {"},{"sha":"83af7121cec294783228a4f98037ade4cc5758aa","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import java.io.File;\n import java.util.HashSet;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n@@ -30,7 +29,7 @@\n import org.apache.logging.log4j.core.layout.PatternLayout;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.logic.DefaultRewriteAuditAppender;\n+import org.apache.syncope.core.logic.audit.DefaultRewriteAuditAppender;\n import org.apache.syncope.core.logic.ResourceLogic;\n \n public class TestFileRewriteAuditAppender extends DefaultRewriteAuditAppender {\n@@ -51,20 +50,17 @@ public Set<AuditLoggerName> getEvents() {\n     @Override\n     public void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+\n         // get log file path from existing file appender\n         RollingRandomAccessFileAppender mainFile =\n                 (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"mainFile\");\n+        String pathPrefix = StringUtils.replace(mainFile.getFileName(), \"core.log\", StringUtils.EMPTY);\n \n-        String pathPrefix = mainFile == null\n-                ? System.getProperty(\"user.dir\") + StringUtils.replace(\"/target/log\", \"/\", File.separator)\n-                + File.separator\n-                : StringUtils.replace(mainFile.getFileName(), \"core.log\", StringUtils.EMPTY);\n-\n-        targetAppender = FileAppender.newBuilder()\n-                .withName(getTargetAppenderName())\n-                .withAppend(true)\n-                .withFileName(pathPrefix + getTargetAppenderName() + \".log\")\n-                .withLayout(\n+        targetAppender = FileAppender.newBuilder().\n+                withName(getTargetAppenderName()).\n+                withAppend(true).\n+                withFileName(pathPrefix + getTargetAppenderName() + \".log\").\n+                withLayout(\n                         PatternLayout.newBuilder()\n                                 .withPattern(\"%d{HH:mm:ss.SSS} %-5level %logger - %msg%n\")\n                                 .build())"},{"sha":"0f7253e961f6d61224d7150a94c9abb647feba8b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":41,"deletions":40,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -27,6 +27,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.charset.Charset;\n import java.text.ParseException;\n import java.util.List;\n import java.util.Properties;\n@@ -59,7 +60,6 @@\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.Assert;\n import org.junit.Test;\n \n public class LoggerITCase extends AbstractITCase {\n@@ -256,45 +256,17 @@ public void listAuditEvents() {\n     }\n \n     @Test\n-    public void issueSYNCOPE708() {\n-        try {\n-            loggerService.read(LoggerType.LOG, \"notExists\");\n-            fail(\"Reading non-existing logger, it should go in exception\");\n-        } catch (final WebServiceException ex) {\n-            fail(\"Exception is WebServiceException but it should be SyncopeClientException\");\n-        } catch (final SyncopeClientException ex) {\n-            assertEquals(Response.Status.NOT_FOUND, ex.getType().getResponseStatus());\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE976() {\n-        List<EventCategoryTO> events = loggerService.events();\n-        assertNotNull(events);\n-\n-        EventCategoryTO userLogic = IterableUtils.find(events, new Predicate<EventCategoryTO>() {\n-\n-            @Override\n-            public boolean evaluate(final EventCategoryTO object) {\n-                return \"UserLogic\".equals(object.getCategory());\n-            }\n-        });\n-        assertNotNull(userLogic);\n-        assertEquals(1, IterableUtils.frequency(userLogic.getEvents(), \"create\"));\n-    }\n-\n-    @Test\n-    public void testCustomAuditAppender() throws IOException, InterruptedException {\n+    public void customAuditAppender() throws IOException, InterruptedException {\n         InputStream propStream = null;\n         try {\n             Properties props = new Properties();\n             propStream = getClass().getResourceAsStream(\"/core-test.properties\");\n             props.load(propStream);\n \n-            final String auditFilePath = props.getProperty(\"test.log.dir\") + File.separator\n-                    + \"audit_for_Master_file.log\";\n-            final String auditNoRewriteFilePath = props.getProperty(\"test.log.dir\") + File.separator\n-                    + \"audit_for_Master_norewrite_file.log\";\n+            String auditFilePath = props.getProperty(\"test.log.dir\")\n+                    + File.separator + \"audit_for_Master_file.log\";\n+            String auditNoRewriteFilePath = props.getProperty(\"test.log.dir\")\n+                    + File.separator + \"audit_for_Master_norewrite_file.log\";\n             // 1. Enable audit for resource update -> catched by FileRewriteAuditAppender\n             AuditLoggerName auditLoggerResUpd = new AuditLoggerName(\n                     EventCategoryType.LOGIC,\n@@ -307,6 +279,7 @@ public void testCustomAuditAppender() throws IOException, InterruptedException {\n             loggerTOUpd.setKey(auditLoggerResUpd.toLoggerName());\n             loggerTOUpd.setLevel(LoggerLevel.DEBUG);\n             loggerService.update(LoggerType.AUDIT, loggerTOUpd);\n+\n             // 2. Enable audit for connector update -> NOT catched by FileRewriteAuditAppender\n             AuditLoggerName auditLoggerConnUpd = new AuditLoggerName(\n                     EventCategoryType.LOGIC,\n@@ -333,21 +306,21 @@ public void testCustomAuditAppender() throws IOException, InterruptedException {\n \n             File auditTempFile = new File(auditFilePath);\n             // check audit_for_Master_file.log, it should contain only a static message\n-            String auditLog = FileUtils.readFileToString(auditTempFile, \"UTF-8\");\n+            String auditLog = FileUtils.readFileToString(auditTempFile, Charset.defaultCharset());\n \n-            Assert.assertTrue(StringUtils.contains(auditLog,\n+            assertTrue(StringUtils.contains(auditLog,\n                     \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n                     + \" - This is a static test message\"));\n             File auditNoRewriteTempFile = new File(auditNoRewriteFilePath);\n             // check audit_for_Master_file.log, it should contain only a static message\n-            String auditLogNoRewrite = FileUtils.readFileToString(auditNoRewriteTempFile, \"UTF-8\");\n+            String auditLogNoRewrite = FileUtils.readFileToString(auditNoRewriteTempFile, Charset.defaultCharset());\n \n-            Assert.assertFalse(StringUtils.contains(auditLogNoRewrite,\n+            assertFalse(StringUtils.contains(auditLogNoRewrite,\n                     \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n                     + \" - This is a static test message\"));\n \n             // clean audit_for_Master_file.log\n-            FileUtils.writeStringToFile(auditTempFile, StringUtils.EMPTY, \"UTF-8\");\n+            FileUtils.writeStringToFile(auditTempFile, StringUtils.EMPTY, Charset.defaultCharset());\n             loggerService.delete(LoggerType.AUDIT, \"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\");\n \n             resource = resourceService.read(RESOURCE_NAME_CSV);\n@@ -356,11 +329,39 @@ public void testCustomAuditAppender() throws IOException, InterruptedException {\n             resourceService.update(resource);\n \n             // check that nothing has been written to audit_for_Master_file.log\n-            assertTrue(StringUtils.isEmpty(FileUtils.readFileToString(auditTempFile, \"UTF-8\")));\n+            assertTrue(StringUtils.isEmpty(FileUtils.readFileToString(auditTempFile, Charset.defaultCharset())));\n         } catch (IOException e) {\n             fail(\"Unable to read/write log files\" + e.getMessage());\n         } finally {\n             IOUtils.closeQuietly(propStream);\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE708() {\n+        try {\n+            loggerService.read(LoggerType.LOG, \"notExists\");\n+            fail(\"Reading non-existing logger, it should go in exception\");\n+        } catch (final WebServiceException ex) {\n+            fail(\"Exception is WebServiceException but it should be SyncopeClientException\");\n+        } catch (final SyncopeClientException ex) {\n+            assertEquals(Response.Status.NOT_FOUND, ex.getType().getResponseStatus());\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE976() {\n+        List<EventCategoryTO> events = loggerService.events();\n+        assertNotNull(events);\n+\n+        EventCategoryTO userLogic = IterableUtils.find(events, new Predicate<EventCategoryTO>() {\n+\n+            @Override\n+            public boolean evaluate(final EventCategoryTO object) {\n+                return \"UserLogic\".equals(object.getCategory());\n+            }\n+        });\n+        assertNotNull(userLogic);\n+        assertEquals(1, IterableUtils.frequency(userLogic.getEvents(), \"create\"));\n+    }\n }"},{"sha":"d774594bf0207a74bd5f27bc0f3abd02d20f2f70","filename":"src/main/asciidoc/reference-guide/concepts/audit.adoc","status":"modified","additions":40,"deletions":39,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -19,8 +19,8 @@\n === Audit\n \n The audit feature allows to capture <<audit-events,events>> occurring within the <<core>> and to log relevant information\n-about them. By default events are logged as entries into the `SYNCOPEAUDIT` table of the internal storage,\n-but can also be logged on some additional Log4j2 appenders defined through simple customization mechanisms.\n+about them. +\n+By default, events are logged as entries into the `SYNCOPEAUDIT` table of the internal storage.\n \n Once events are reported, they can be used as input for external tools.\n \n@@ -34,47 +34,48 @@ An example of how audit entries can be extracted for reporting is shown by the <\n The information provided for <<notification-events,notification events>> is also valid for audit events, including examples -\n except for the admin console <<console-configuration-audit,tooling>>, which is naturally distinct.\n \n-==== Audit Customization\n+==== Audit Appenders\n \n-As mentioned above, events are, basically, logged in a database table, but this behavior can be extended through \n-`AuditAppender` interface implementation which allows an user to define additional logging supports that we address \n-as appenders.\n+In addition to insertions into the `SYNCOPEAUDIT` table, events are also available for custom handling via Audit\n+Appenders, based on https://logging.apache.org/log4j/2.x/manual/appenders.html[Apache Log4j 2 Appenders^]. +\n+This allows to empower the available implementations or to write new ones in order to route audit messages, with optional\n+transformation (rewrite), to files, queues, sockets, syslog, etc.\n \n-Appender is a Log4j entity that allows to write whatever log message on different destinations (file, queues, syslog, \n-other appenders, etc.). Moreover it provides the ability to edit (rewrite) the message, that is flowing through appenders,\n-in order to customize information.\n-Audit customization relies on Log4j appenders. To implement a custom audit appender an user just needs to extend to basic \n-classes:\n+Custom implementations must follow the\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/logic/src/main/java/org/apache/syncope/core/logic/audit/AuditAppender.java[AuditAppender^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/2_0_X/core/logic/src/main/java/org/apache/syncope/core/logic/audit/AuditAppender.java[AuditAppender^]\n+endif::[]\n+interface.\n \n-. DefaultAuditAppender\n-. DefaultRewriteAuditAppender\n+Some convenience implementations are provided, meant to serve as reference - see table below.\n \n-The first is intended to add custom appender without any rewrtining of the message, the second allows message rewriting.\n+[cols=\"1,2\"]\n+|===\n \n-What is needed to implement a well formed appender:\n- \n-. Events: a set of events to which the appender is bound. Appender will log only if one of those events occurs.\n-. Target Appender: the Log4j appender that writes message somewhere. See \n-  https://github.com/andrea-patricelli/syncope/blob/2_0_X/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java[TestFileRewriteAuditAppender^] or \n-  https://github.com/andrea-patricelli/syncope/blob/2_0_X/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java[TestFileAuditAppender^].\n-. Rewrite policy (if needed): in case of rewrite enabled a rewrite policy should be defined, by implementing Log4j \n-  `RewritePolicy` interface. Some examples are \n-  https://github.com/andrea-patricelli/syncope/blob/2_0_X/core/logic/src/main/java/org/apache/syncope/core/logic/PassThroughRewritePolicy.java[PassThroughRewritePolicy^] \n-  and https://github.com/andrea-patricelli/syncope/blob/2_0_X/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestRewritePolicy.java[TestRewritePolicy^].\n-  If no rewrite policy is specified `PassThroughRewritePolicy` will be used.\n+| \n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultAuditAppender.java[DefaultAuditAppender^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/2_0_X/core/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultAuditAppender.java[DefaultAuditAppender^]\n+endif::[]\n+| This requires to specify (a) a set of events to which the appender is bound (log only if one of such events occurs)\n+and (b) a target appender, e.g. one of https://logging.apache.org/log4j/2.x/manual/appenders.html[Apache Log4j 2 Appenders^]\n+or a custom implementation.\n \n-[TIP]\n-====\n-Be careful while assigning names to the appenders. The name of the target appender should be unique and should depend on\n-the domain. \n-A best practice is to assign different names to the appenders in order to avoid names collisions and strange behavior of\n-the logging framework.\n-====\n-\n-===== How custom appenders work\n+| \n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultRewriteAuditAppender.java[DefaultRewriteAuditAppender^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/2_0_X/core/logic/src/main/java/org/apache/syncope/core/logic/audit/DefaultRewriteAuditAppender.java[DefaultRewriteAuditAppender^]\n+endif::[]\n+| In addition, this requires to provide a\n+https://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/appender/rewrite/RewritePolicy.html[RewritePolicy^] \n+implementation, which allows to rewrite the original audit message into something more suitable to the target\n+destination.\n \n-An appender is bound to specific events. While enabling audit on some event, if that event is \"catched\" also by the custom\n-appender, it automatically activates. Once the audit is enabled the same audit message will be logged by the \n-default audit appender and all the extensions bound to those events. While disabling audit all audit extensions are \n-disabled.\n-To enable an audit extension an user just needs to implement his custom `AuditAppender` in the sources, build application and deploy.\n\\ No newline at end of file\n+|==="},{"sha":"5a115e4bd321065ef977c774a8be9bf956829a8c","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/customization.adoc","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb57c5ad20bcd90efe09d0666f27ab151aa4b00c/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fcustomization.adoc?ref=cb57c5ad20bcd90efe09d0666f27ab151aa4b00c","patch":"@@ -193,6 +193,7 @@ Besides replacing existing classes as explained <<override-behavior,above>>, new\n * <<provisioning-managers,provisioning managers>>\n * <<notifications,notification recipient providers>>\n * <<jwtssoprovider,JWT SSO providers>>\n+* <<audit-appenders, audit appenders>>\n \n [[new-rest-endpoints]]\n [TIP]\n@@ -691,9 +692,3 @@ Moreover, `defaultValues` do not overwrite any existing value.\n For example, the http://www.chorevolution.eu/[CHOReVOLUTION^] IdM - based on Apache Syncope - provides\n https://gitlab.ow2.org/chorevolution/syncope/tree/master/ext/choreography[an extension^]\n for managing via the <<core>> and visualizing via the <<admin-console-component>> the running choreography instances.\n-\n-[[audit-customization]]\n-==== Audit Extensions\n-\n-<<audit>> by default, if enabled, logs on a specific database table, though this functionality could be extended to log \n-also on different supports (file, queue, syslog, etc.)."}]}