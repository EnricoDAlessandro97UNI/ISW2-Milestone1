{"sha":"8a2690568f7e3653a7112c0bdf795654efb236c5","node_id":"C_kwDOJfYA1toAKDhhMjY5MDU2OGY3ZTM2NTNhNzExMmMwYmRmNzk1NjU0ZWZiMjM2YzU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-05-23T12:13:33Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-05-23T12:13:33Z"},"message":"[SYNCOPE-1678] Adding recursive boolean parameter to AnyQuery, true b… (#346)","tree":{"sha":"8e5c4c93b03b700707ce83a909a33c3c09bce8e2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8e5c4c93b03b700707ce83a909a33c3c09bce8e2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8a2690568f7e3653a7112c0bdf795654efb236c5","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJii3ptCRBK7hj4Ov3rIwAAnf8IACDbCStiC/ZXm3fLMv8YYP6i\nDWsB4qI0l/5obzWCFExjBmcvI583dNi65OryIWLB9sn+4XVgXgTWOZ65Dx+CEO+z\nOm5Gizua3IRbqZt8XU6VFb0CbmU+PMdsCqAVSU5W0Z9O0VGS/AaAck1kV/UJQYCH\nVz2GgqA5Ht3q9dWHdquk2KlQHgvZUjJIyHV+fBitQUr0/+ySgZnYYSmTADFoHpIk\nbm/0R+9awHIxjMlCEB/5TxLs5qcIoRGaNZw8K66CI3eyHfImzTUlxR4obMZ8BeCu\nYkbTqhc/7wL5hO13LvgjoQiPYLqYXmCzqZBHBBJTxJkZ9Z/A11rgvNrBafHbXmk=\n=wdIX\n-----END PGP SIGNATURE-----\n","payload":"tree 8e5c4c93b03b700707ce83a909a33c3c09bce8e2\nparent 4919fcab3298bb3dd5c1a2c30aefcf94ca99df1f\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1653308013 +0200\ncommitter GitHub <noreply@github.com> 1653308013 +0200\n\n[SYNCOPE-1678] Adding recursive boolean parameter to AnyQuery, true b… (#346)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a2690568f7e3653a7112c0bdf795654efb236c5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a2690568f7e3653a7112c0bdf795654efb236c5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a2690568f7e3653a7112c0bdf795654efb236c5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"4919fcab3298bb3dd5c1a2c30aefcf94ca99df1f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4919fcab3298bb3dd5c1a2c30aefcf94ca99df1f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4919fcab3298bb3dd5c1a2c30aefcf94ca99df1f"}],"stats":{"total":581,"additions":411,"deletions":170},"files":[{"sha":"b9583785b0dc65941fa0bb4ed0bab506f66c8f54","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -21,15 +21,14 @@\n import io.swagger.v3.oas.annotations.ExternalDocumentation;\n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.Optional;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-import java.util.Optional;\n-\n public class AnyQuery extends AbstractQuery {\n \n     private static final long serialVersionUID = -6736562952418964707L;\n@@ -41,6 +40,11 @@ protected AnyQuery newInstance() {\n             return new AnyQuery();\n         }\n \n+        public Builder recursive(final boolean recursive) {\n+            getInstance().setRecursive(recursive);\n+            return this;\n+        }\n+\n         public Builder details(final boolean details) {\n             getInstance().setDetails(details);\n             return this;\n@@ -60,6 +64,8 @@ public Builder fiql(final String fiql) {\n \n     private String realm;\n \n+    private Boolean recursive;\n+\n     private Boolean details;\n \n     private String fiql;\n@@ -79,6 +85,19 @@ public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n+    @Parameter(name = JAXRSService.PARAM_RECURSIVE, description = \"whether search results shall be returned from \"\n+            + \"given realm and all children realms, or just the given realm\", schema =\n+            @Schema(implementation = Boolean.class))\n+    public Boolean getRecursive() {\n+        return Optional.ofNullable(recursive).orElse(Boolean.TRUE);\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_RECURSIVE)\n+    @DefaultValue(\"true\")\n+    public void setRecursive(final Boolean recursive) {\n+        this.recursive = recursive;\n+    }\n+\n     @Parameter(name = JAXRSService.PARAM_DETAILS, description = \"whether detailed information is to be included, \"\n             + \"if applicable, about virtual attributes, (dynamic) roles, privileges, relationships, \"\n             + \"(dynamic) memberships or linked accounts\", schema ="},{"sha":"51a59cc576675a899b654045ea1b3c3bf1c7a99b","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -40,6 +40,8 @@ public interface JAXRSService {\n \n     String PARAM_REALM = \"realm\";\n \n+    String PARAM_RECURSIVE = \"recursive\";\n+\n     String PARAM_DETAILS = \"details\";\n \n     String PARAM_CONNID_PAGED_RESULTS_COOKIE = \"connIdPagedResultsCookie\";"},{"sha":"a7532c43632df96756785b5005614905f3598e8c","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -68,6 +68,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.pushpull.ConstantReconFilterBuilder;\n@@ -568,22 +569,26 @@ public List<ProvisioningReport> push(\n                 entitlement = IdRepoEntitlement.USER_SEARCH;\n         }\n \n+        Realm base = Optional.ofNullable(realmDAO.findByFullPath(realm)).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + realm));\n+\n         Set<String> adminRealms = RealmUtils.getEffective(AuthContextUtils.getAuthorizations().get(entitlement), realm);\n         SearchCond effectiveCond = searchCond == null ? anyUtils.dao().getAllMatchingCond() : searchCond;\n \n         List<Any<?>> matching;\n         if (spec.getIgnorePaging()) {\n             matching = new ArrayList<>();\n \n-            int count = anySearchDAO.count(adminRealms, effectiveCond, anyType.getKind());\n+            int count = anySearchDAO.count(base, true, adminRealms, effectiveCond, anyType.getKind());\n             int pages = (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n             for (int p = 1; p <= pages; p++) {\n-                matching.addAll(anySearchDAO.search(adminRealms, effectiveCond,\n+                matching.addAll(anySearchDAO.search(base, true, adminRealms, effectiveCond,\n                         p, AnyDAO.DEFAULT_PAGE_SIZE, orderBy, anyType.getKind()));\n             }\n         } else {\n-            matching = anySearchDAO.search(adminRealms, effectiveCond, page, size, orderBy, anyType.getKind());\n+            matching = anySearchDAO.search(\n+                    base, true, adminRealms, effectiveCond, page, size, orderBy, anyType.getKind());\n         }\n \n         List<String> columns = new ArrayList<>();"},{"sha":"174d347cbda22a21bfc3b43e73ceaff1220826a3","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/ReconciliationLogicTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -89,7 +89,7 @@ public void pullFromCSV() {\n     @Test\n     public void pushToCSV() throws IOException {\n         Pair<Integer, List<UserTO>> search = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN,\n-                () -> userLogic.search(null, 1, 100, List.of(), SyncopeConstants.ROOT_REALM, false));\n+                () -> userLogic.search(null, 1, 100, List.of(), SyncopeConstants.ROOT_REALM, true, false));\n         assertNotNull(search);\n \n         CSVPushSpec spec = new CSVPushSpec.Builder(AnyTypeKind.USER.name()).ignorePaging(true)."},{"sha":"7469722d5dffd0b4cceaa235294fdac60d3b6e91","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -212,6 +212,7 @@ public abstract Pair<Integer, List<TO>> search(\n             SearchCond searchCond,\n             int page, int size, List<OrderByClause> orderBy,\n             String realm,\n+            boolean recursive,\n             boolean details);\n \n     public abstract ProvisioningResult<TO> update(U updateReq, boolean nullPriorityAsync);"},{"sha":"d26222b4691b789b32f6c4b0dade58f5463474ba","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -22,6 +22,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -42,10 +43,12 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n@@ -98,20 +101,24 @@ public Pair<Integer, List<AnyObjectTO>> search(\n             final SearchCond searchCond,\n             final int page, final int size, final List<OrderByClause> orderBy,\n             final String realm,\n+            final boolean recursive,\n             final boolean details) {\n \n         if (searchCond.hasAnyTypeCond() == null) {\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n \n+        Realm base = Optional.ofNullable(realmDAO.findByFullPath(realm)).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + realm));\n+\n         Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n                 realm);\n \n-        int count = searchDAO.count(authRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n+        int count = searchDAO.count(base, recursive, authRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n \n         List<AnyObject> matching = searchDAO.search(\n-                authRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n+                base, recursive, authRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n         List<AnyObjectTO> result = matching.stream().\n                 map(anyObject -> binder.getAnyObjectTO(anyObject, details)).\n                 collect(Collectors.toList());"},{"sha":"df16b30c9dfd18250491c96648583ddc044ef9f8","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -23,6 +23,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -56,6 +57,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n@@ -167,17 +169,21 @@ public Pair<Integer, List<GroupTO>> search(\n             final SearchCond searchCond,\n             final int page, final int size, final List<OrderByClause> orderBy,\n             final String realm,\n+            final boolean recursive,\n             final boolean details) {\n \n+        Realm base = Optional.ofNullable(realmDAO.findByFullPath(realm)).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + realm));\n+\n         Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_SEARCH), realm);\n \n         SearchCond effectiveCond = searchCond == null ? groupDAO.getAllMatchingCond() : searchCond;\n \n-        int count = searchDAO.count(authRealms, effectiveCond, AnyTypeKind.GROUP);\n+        int count = searchDAO.count(base, recursive, authRealms, effectiveCond, AnyTypeKind.GROUP);\n \n         List<Group> matching = searchDAO.search(\n-                authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.GROUP);\n+                base, recursive, authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n                 map(group -> binder.getGroupTO(group, details)).\n                 collect(Collectors.toList());"},{"sha":"a6cbdfcf17ce5ced81fe6acd1b543119abb25187","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -426,6 +426,7 @@ public SecurityQuestionLogic securityQuestionLogic(\n     public SyncopeLogic syncopeLogic(\n             final ContentExporter exporter,\n             final UserWorkflowAdapter uwfAdapter,\n+            final RealmDAO realmDAO,\n             final AnyTypeDAO anyTypeDAO,\n             final GroupDAO groupDAO,\n             final ConfParamOps confParamOps,\n@@ -435,6 +436,7 @@ public SyncopeLogic syncopeLogic(\n             final AnyObjectWorkflowAdapter awfAdapter) {\n \n         return new SyncopeLogic(\n+                realmDAO,\n                 anyTypeDAO,\n                 groupDAO,\n                 anySearchDAO,"},{"sha":"1f49db7b45ed0488dd16d6c2f46f0348a33e4cf2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Method;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -189,12 +190,8 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_DELETE + \"')\")\n     public ProvisioningResult<RealmTO> delete(final String fullPath) {\n-        Realm realm = realmDAO.findByFullPath(fullPath);\n-        if (realm == null) {\n-            LOG.error(\"Could not find realm '\" + fullPath + '\\'');\n-\n-            throw new NotFoundException(fullPath);\n-        }\n+        Realm realm = Optional.ofNullable(realmDAO.findByFullPath(fullPath)).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + fullPath));\n \n         if (!realmDAO.findChildren(realm).isEmpty()) {\n             throw SyncopeClientException.build(ClientExceptionType.HasChildren);\n@@ -204,9 +201,9 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         AnyCond keyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n         keyCond.setSchema(\"key\");\n         SearchCond allMatchingCond = SearchCond.getLeaf(keyCond);\n-        int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n-        int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n-        int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n+        int users = searchDAO.count(realm, true, adminRealms, allMatchingCond, AnyTypeKind.USER);\n+        int groups = searchDAO.count(realm, true, adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n+        int anyObjects = searchDAO.count(realm, true, adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n \n         if (users + groups + anyObjects > 0) {\n             SyncopeClientException containedAnys = SyncopeClientException.build(ClientExceptionType.AssociatedAnys);"},{"sha":"167840cadf40b6048d9fc78c765bd160a921558d","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -37,11 +37,13 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n@@ -55,6 +57,8 @@\n @Transactional(readOnly = true)\n public class SyncopeLogic extends AbstractLogic<EntityTO> {\n \n+    protected final RealmDAO realmDAO;\n+\n     protected final AnyTypeDAO anyTypeDAO;\n \n     protected final GroupDAO groupDAO;\n@@ -74,6 +78,7 @@ public class SyncopeLogic extends AbstractLogic<EntityTO> {\n     protected final AnyObjectWorkflowAdapter awfAdapter;\n \n     public SyncopeLogic(\n+            final RealmDAO realmDAO,\n             final AnyTypeDAO anyTypeDAO,\n             final GroupDAO groupDAO,\n             final AnySearchDAO searchDAO,\n@@ -84,6 +89,7 @@ public SyncopeLogic(\n             final GroupWorkflowAdapter gwfAdapter,\n             final AnyObjectWorkflowAdapter awfAdapter) {\n \n+        this.realmDAO = realmDAO;\n         this.anyTypeDAO = anyTypeDAO;\n         this.groupDAO = groupDAO;\n         this.searchDAO = searchDAO;\n@@ -114,6 +120,9 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n             final int page,\n             final int size) {\n \n+        Realm base = Optional.ofNullable(realmDAO.findByFullPath(realm)).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + realm));\n+\n         AssignableCond assignableCond = new AssignableCond();\n         assignableCond.setRealmFullPath(realm);\n \n@@ -137,16 +146,20 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n             searchCond = SearchCond.getLeaf(assignableCond);\n         }\n \n-        int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.GROUP);\n+        int count = searchDAO.count(base, true, SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.GROUP);\n \n         OrderByClause orderByClause = new OrderByClause();\n         orderByClause.setField(\"name\");\n         orderByClause.setDirection(OrderByClause.Direction.ASC);\n         List<Group> matching = searchDAO.search(\n+                base,\n+                true,\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCond,\n-                page, size,\n-                List.of(orderByClause), AnyTypeKind.GROUP);\n+                page,\n+                size,\n+                List.of(orderByClause),\n+                AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n                 map(group -> groupDataBinder.getGroupTO(group, false)).collect(Collectors.toList());\n "},{"sha":"0e7db7416bf2508f5d374b9913750c03805c0a4f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n@@ -144,16 +145,21 @@ public Pair<Integer, List<UserTO>> search(\n             final SearchCond searchCond,\n             final int page, final int size, final List<OrderByClause> orderBy,\n             final String realm,\n+            final boolean recursive,\n             final boolean details) {\n \n+        Realm base = Optional.ofNullable(realmDAO.findByFullPath(realm)).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + realm));\n+\n         Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm);\n \n         SearchCond effectiveCond = searchCond == null ? userDAO.getAllMatchingCond() : searchCond;\n \n-        int count = searchDAO.count(authRealms, effectiveCond, AnyTypeKind.USER);\n+        int count = searchDAO.count(base, recursive, authRealms, effectiveCond, AnyTypeKind.USER);\n \n-        List<User> matching = searchDAO.search(authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.USER);\n+        List<User> matching = searchDAO.search(\n+                base, recursive, authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.USER);\n         List<UserTO> result = matching.stream().\n                 map(user -> binder.getUserTO(user, details)).\n                 collect(Collectors.toList());"},{"sha":"d37ab656040125aa3582effa1f0e870f849141a4","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -144,6 +144,7 @@ public PagedResult<TO> search(final AnyQuery anyQuery) {\n                     anyQuery.getSize(),\n                     getOrderByClauses(anyQuery.getOrderBy()),\n                     isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n+                    anyQuery.getRecursive(),\n                     anyQuery.getDetails());\n \n             return buildPagedResult(result.getRight(), anyQuery.getPage(), anyQuery.getSize(), result.getLeft());"},{"sha":"5078c55fa8552fd55675fe6ba1d35a30cd76cf75","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -78,6 +78,7 @@\n import org.apache.syncope.common.lib.jackson.SyncopeJsonMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -129,7 +130,8 @@ public void setup() {\n             AnyObjectDAO anyObjectDAO = mock(AnyObjectDAO.class);\n \n             AnyObjectLogic logic = mock(AnyObjectLogic.class);\n-            when(logic.search(any(SearchCond.class), anyInt(), anyInt(), anyList(), anyString(), anyBoolean())).\n+            when(logic.search(\n+                    any(SearchCond.class), anyInt(), anyInt(), anyList(), anyString(), anyBoolean(), anyBoolean())).\n                     thenAnswer(ic -> {\n                         AnyObjectTO printer1 = new AnyObjectTO();\n                         printer1.setKey(UUID.randomUUID().toString());"},{"sha":"107932c33e032fe5f98f7200ca851b4b06d358ea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":19,"deletions":3,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -24,16 +24,24 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface AnySearchDAO extends DAO<Any<?>> {\n \n     /**\n+     * @param base Realm to start searching from\n+     * @param recursive whether search should recursively include results from child Realms\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param kind any object\n      * @return size of search result\n      */\n-    int count(Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n+    int count(\n+            Realm base,\n+            boolean recursive,\n+            Set<String> adminRealms,\n+            SearchCond searchCondition,\n+            AnyTypeKind kind);\n \n     /**\n      * @param searchCondition the search condition\n@@ -53,6 +61,8 @@ public interface AnySearchDAO extends DAO<Any<?>> {\n     <T extends Any<?>> List<T> search(SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n+     * @param base Realm to start searching from\n+     * @param recursive whether search should recursively include results from child Realms\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param page position of the first result, start from 1\n@@ -63,6 +73,12 @@ public interface AnySearchDAO extends DAO<Any<?>> {\n      * @return the list of any objects matching the given search condition (in the given page)\n      */\n     <T extends Any<?>> List<T> search(\n-            Set<String> adminRealms, SearchCond searchCondition, int page, int itemsPerPage,\n-            List<OrderByClause> orderBy, AnyTypeKind kind);\n+            Realm base,\n+            boolean recursive,\n+            Set<String> adminRealms,\n+            SearchCond searchCondition,\n+            int page,\n+            int itemsPerPage,\n+            List<OrderByClause> orderBy,\n+            AnyTypeKind kind);\n }"},{"sha":"3a4191d766bc7a76e70cea7ca972d326d6a0645e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -633,12 +633,19 @@ protected String buildAdminRealmsFilter(\n     }\n \n     @Override\n-    protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n+    protected int doCount(\n+            final Realm base,\n+            final boolean recursive,\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final AnyTypeKind kind) {\n+\n         List<Object> parameters = new ArrayList<>();\n \n         SearchSupport svs = buildSearchSupport(kind);\n \n-        Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+        Triple<String, Set<String>, Set<String>> filter =\n+                getAdminRealmsFilter(base, recursive, adminRealms, svs, parameters);\n \n         Pair<StringBuilder, Set<String>> queryInfo =\n                 getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), parameters, svs);\n@@ -657,6 +664,8 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends Any<?>> List<T> doSearch(\n+            final Realm base,\n+            final boolean recursive,\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final int page,\n@@ -669,7 +678,8 @@ protected <T extends Any<?>> List<T> doSearch(\n \n             SearchSupport svs = buildSearchSupport(kind);\n \n-            Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+            Triple<String, Set<String>, Set<String>> filter =\n+                    getAdminRealmsFilter(base, recursive, adminRealms, svs, parameters);\n \n             SearchCond effectiveCond = buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind);\n "},{"sha":"b6679d56ba9086da0306960dc41db4e2a8c78cd5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -62,6 +62,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.springframework.util.CollectionUtils;\n \n public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n \n@@ -146,11 +147,18 @@ public AbstractAnySearchDAO(\n         this.anyUtilsFactory = anyUtilsFactory;\n     }\n \n-    protected abstract int doCount(Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);\n+    protected abstract int doCount(\n+            Realm base, boolean recursive, Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);\n \n     @Override\n-    public int count(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n-        if (adminRealms == null || adminRealms.isEmpty()) {\n+    public int count(\n+            final Realm base,\n+            final boolean recursive,\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final AnyTypeKind kind) {\n+\n+        if (CollectionUtils.isEmpty(adminRealms)) {\n             LOG.error(\"No realms provided\");\n             return 0;\n         }\n@@ -161,7 +169,7 @@ public int count(final Set<String> adminRealms, final SearchCond cond, final Any\n             return 0;\n         }\n \n-        return doCount(adminRealms, cond, kind);\n+        return doCount(base, recursive, adminRealms, cond, kind);\n     }\n \n     @Override\n@@ -173,10 +181,12 @@ public <T extends Any<?>> List<T> search(final SearchCond cond, final AnyTypeKin\n     public <T extends Any<?>> List<T> search(\n             final SearchCond cond, final List<OrderByClause> orderBy, final AnyTypeKind kind) {\n \n-        return search(SyncopeConstants.FULL_ADMIN_REALMS, cond, -1, -1, orderBy, kind);\n+        return search(realmDAO.getRoot(), true, SyncopeConstants.FULL_ADMIN_REALMS, cond, -1, -1, orderBy, kind);\n     }\n \n     protected abstract <T extends Any<?>> List<T> doSearch(\n+            Realm base,\n+            boolean recursive,\n             Set<String> adminRealms,\n             SearchCond searchCondition,\n             int page,\n@@ -347,14 +357,16 @@ protected <T extends Any<?>> List<T> buildResult(final List<Object> raw, final A\n \n     @Override\n     public <T extends Any<?>> List<T> search(\n+            final Realm base,\n+            final boolean recursive,\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final int page,\n             final int itemsPerPage,\n             final List<OrderByClause> orderBy,\n             final AnyTypeKind kind) {\n \n-        if (adminRealms == null || adminRealms.isEmpty()) {\n+        if (CollectionUtils.isEmpty(adminRealms)) {\n             LOG.error(\"No realms provided\");\n             return List.of();\n         }\n@@ -377,6 +389,6 @@ public <T extends Any<?>> List<T> search(\n                     collect(Collectors.toList());\n         }\n \n-        return doSearch(adminRealms, cond, page, itemsPerPage, effectiveOrderBy, kind);\n+        return doSearch(base, recursive, adminRealms, cond, page, itemsPerPage, effectiveOrderBy, kind);\n     }\n }"},{"sha":"08374986bfc4680b98aba9b37ab4a05792c8a56a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":44,"deletions":26,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -100,6 +100,8 @@ protected String buildAdminRealmsFilter(\n     }\n \n     protected Triple<String, Set<String>, Set<String>> getAdminRealmsFilter(\n+            final Realm base,\n+            final boolean recursive,\n             final Set<String> adminRealms,\n             final SearchSupport svs,\n             final List<Object> parameters) {\n@@ -108,31 +110,37 @@ protected Triple<String, Set<String>, Set<String>> getAdminRealmsFilter(\n         Set<String> dynRealmKeys = new HashSet<>();\n         Set<String> groupOwners = new HashSet<>();\n \n-        adminRealms.forEach(realmPath -> {\n-            Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n-            if (goRealm.isPresent()) {\n-                groupOwners.add(goRealm.get().getRight());\n-            } else if (realmPath.startsWith(\"/\")) {\n-                Realm realm = realmDAO.findByFullPath(realmPath);\n-                if (realm == null) {\n-                    SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-                    noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n-                    throw noRealm;\n-                } else {\n-                    realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n-                            map(Realm::getKey).collect(Collectors.toSet()));\n-                }\n-            } else {\n-                DynRealm dynRealm = dynRealmDAO.find(realmPath);\n-                if (dynRealm == null) {\n-                    LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+        if (recursive) {\n+            adminRealms.forEach(realmPath -> {\n+                Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n+                if (goRealm.isPresent()) {\n+                    groupOwners.add(goRealm.get().getRight());\n+                } else if (realmPath.startsWith(\"/\")) {\n+                    Realm realm = realmDAO.findByFullPath(realmPath);\n+                    if (realm == null) {\n+                        SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+                        noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n+                        throw noRealm;\n+                    } else {\n+                        realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n+                                map(Realm::getKey).collect(Collectors.toSet()));\n+                    }\n                 } else {\n-                    dynRealmKeys.add(dynRealm.getKey());\n+                    DynRealm dynRealm = dynRealmDAO.find(realmPath);\n+                    if (dynRealm == null) {\n+                        LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+                    } else {\n+                        dynRealmKeys.add(dynRealm.getKey());\n+                    }\n                 }\n+            });\n+            if (!dynRealmKeys.isEmpty()) {\n+                realmKeys.clear();\n+            }\n+        } else {\n+            if (adminRealms.stream().anyMatch(r -> base.getFullPath().startsWith(r))) {\n+                realmKeys.add(base.getKey());\n             }\n-        });\n-        if (!dynRealmKeys.isEmpty()) {\n-            realmKeys.clear();\n         }\n \n         return Triple.of(buildAdminRealmsFilter(realmKeys, svs, parameters), dynRealmKeys, groupOwners);\n@@ -143,20 +151,27 @@ SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n     }\n \n     @Override\n-    protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n+    protected int doCount(\n+            final Realm base,\n+            final boolean recursive,\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final AnyTypeKind kind) {\n+\n         List<Object> parameters = new ArrayList<>();\n \n         SearchSupport svs = buildSearchSupport(kind);\n \n-        Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+        Triple<String, Set<String>, Set<String>> filter =\n+                getAdminRealmsFilter(base, recursive, adminRealms, svs, parameters);\n \n         // 1. get the query string from the search condition\n         Pair<StringBuilder, Set<String>> queryInfo =\n                 getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), parameters, svs);\n \n         StringBuilder queryString = queryInfo.getLeft();\n \n-        // 2. take into account administrative realms\n+        // 2. take realms into account\n         queryString.insert(0, \"SELECT u.any_id FROM (\");\n         queryString.append(\") u WHERE \").append(filter.getLeft());\n \n@@ -173,6 +188,8 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends Any<?>> List<T> doSearch(\n+            final Realm base,\n+            final boolean recursive,\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final int page,\n@@ -185,7 +202,8 @@ protected <T extends Any<?>> List<T> doSearch(\n \n             SearchSupport svs = buildSearchSupport(kind);\n \n-            Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+            Triple<String, Set<String>, Set<String>> filter =\n+                    getAdminRealmsFilter(base, recursive, adminRealms, svs, parameters);\n \n             // 1. get the query string from the search condition\n             Pair<StringBuilder, Set<String>> queryInfo ="},{"sha":"45c13aa9580b3f2590199dc1ea6b4a1bab878975","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -297,9 +297,12 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearUDynMembers(merged);\n         if (merged.getUDynMembership() != null) {\n             SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());\n-            int count = anySearchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n+            int count = anySearchDAO.count(\n+                    merged.getRealm(), true, Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<User> matching = anySearchDAO.search(\n+                        merged.getRealm(),\n+                        true,\n                         Set.of(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n@@ -321,9 +324,12 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearADynMembers(merged);\n         merged.getADynMemberships().forEach(memb -> {\n             SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n-            int count = anySearchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n+            int count = anySearchDAO.count(\n+                    merged.getRealm(), true, Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<AnyObject> matching = anySearchDAO.search(\n+                        merged.getRealm(),\n+                        true,\n                         Set.of(merged.getRealm().getFullPath()),\n                         cond,\n                         page,"},{"sha":"e4dad5d2f4ed677bb9d3b21402369cf1f296acf4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":42,"deletions":26,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -274,16 +274,17 @@ public void searchByPageAndSize() {\n \n         assertTrue(cond.isValid());\n \n-        int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+        int count = searchDAO.count(\n+                realmDAO.getRoot(), true, SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n         assertEquals(1, count);\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                cond, 1, 2, List.of(), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(\n+                realmDAO.getRoot(), true, SyncopeConstants.FULL_ADMIN_REALMS, cond, 1, 2, List.of(), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                cond, 2, 2, List.of(), AnyTypeKind.USER);\n+        users = searchDAO.search(\n+                realmDAO.getRoot(), true, SyncopeConstants.FULL_ADMIN_REALMS, cond, 2, 2, List.of(), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n@@ -315,6 +316,12 @@ public void searchByGroup() {\n         assertTrue(matchingStar.stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n         assertTrue(matchingStar.stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n         assertEquals(union, matchingStar.stream().map(User::getUsername).collect(Collectors.toSet()));\n+\n+        matchingStar = searchDAO.search(realmDAO.getRoot(), false, SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeaf(groupCond), -1, -1, List.of(), AnyTypeKind.USER);\n+        assertNotNull(matchingStar);\n+        assertTrue(matchingStar.stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n+        assertTrue(matchingStar.stream().noneMatch(user -> \"rossini\".equals(user.getUsername())));\n     }\n \n     @Test\n@@ -439,8 +446,7 @@ public void searchByUsernameAndFullname() {\n                 SearchCond.getLeaf(usernameLeafCond),\n                 SearchCond.getLeaf(idRightCond));\n \n-        List<User> matchingUsers = searchDAO.search(\n-                searchCondition, AnyTypeKind.USER);\n+        List<User> matchingUsers = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(matchingUsers);\n         assertEquals(2, matchingUsers.size());\n     }\n@@ -459,8 +465,7 @@ public void searchByUsernameAndFullnameIgnoreCase() {\n                 SearchCond.getLeaf(usernameLeafCond),\n                 SearchCond.getLeaf(idRightCond));\n \n-        List<User> matchingUsers = searchDAO.search(\n-                searchCondition, AnyTypeKind.USER);\n+        List<User> matchingUsers = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(matchingUsers);\n         assertEquals(2, matchingUsers.size());\n     }\n@@ -578,7 +583,9 @@ public void userOrderBy() {\n \n         List<User> users = searchDAO.search(searchCondition, orderByClauses, AnyTypeKind.USER);\n         assertEquals(\n-                searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n+                searchDAO.count(\n+                        realmDAO.getRoot(), true,\n+                        SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n                 users.size());\n     }\n \n@@ -596,7 +603,9 @@ public void groupOrderBy() {\n         List<Group> groups = searchDAO.search(\n                 searchCondition, List.of(orderByClause), AnyTypeKind.GROUP);\n         assertEquals(\n-                searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.GROUP),\n+                searchDAO.count(\n+                        realmDAO.getRoot(), true,\n+                        SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.GROUP),\n                 groups.size());\n     }\n \n@@ -668,10 +677,20 @@ public void asGroupOwner() {\n                     AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_SEARCH),\n                     SyncopeConstants.ROOT_REALM);\n \n-            assertEquals(1, searchDAO.count(authRealms, groupDAO.getAllMatchingCond(), AnyTypeKind.GROUP));\n+            assertEquals(\n+                    1,\n+                    searchDAO.count(\n+                            realmDAO.getRoot(), true, authRealms, groupDAO.getAllMatchingCond(), AnyTypeKind.GROUP));\n \n             List<Group> groups = searchDAO.search(\n-                    authRealms, groupDAO.getAllMatchingCond(), 1, 10, List.of(), AnyTypeKind.GROUP);\n+                    realmDAO.getRoot(),\n+                    true,\n+                    authRealms,\n+                    groupDAO.getAllMatchingCond(),\n+                    1,\n+                    10,\n+                    List.of(),\n+                    AnyTypeKind.GROUP);\n             assertEquals(1, groups.size());\n             assertEquals(\"37d15e4c-cdc1-460b-a591-8505c8133806\", groups.get(0).getKey());\n         } finally {\n@@ -737,8 +756,8 @@ public void issueSYNCOPE433() {\n         SearchCond searchCond = SearchCond.getOr(\n                 SearchCond.getLeaf(isNullCond), SearchCond.getLeaf(likeCond));\n \n-        Integer count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.USER);\n-        assertNotNull(count);\n+        int count = searchDAO.count(\n+                realmDAO.getRoot(), true, SyncopeConstants.FULL_ADMIN_REALMS, searchCond, AnyTypeKind.USER);\n         assertTrue(count > 0);\n     }\n \n@@ -752,16 +771,13 @@ public void issueSYNCOPE929() {\n         genderCond.setSchema(\"gender\");\n         genderCond.setExpression(\"M\");\n \n-        SearchCond orCond =\n-                SearchCond.getOr(SearchCond.getLeaf(rossiniCond),\n-                        SearchCond.getLeaf(genderCond));\n+        SearchCond orCond = SearchCond.getOr(SearchCond.getLeaf(rossiniCond), SearchCond.getLeaf(genderCond));\n \n         AttrCond belliniCond = new AttrCond(AttrCond.Type.EQ);\n         belliniCond.setSchema(\"surname\");\n         belliniCond.setExpression(\"Bellini\");\n \n-        SearchCond searchCond =\n-                SearchCond.getAnd(orCond, SearchCond.getLeaf(belliniCond));\n+        SearchCond searchCond = SearchCond.getAnd(orCond, SearchCond.getLeaf(belliniCond));\n \n         List<User> users = searchDAO.search(searchCond, AnyTypeKind.USER);\n         assertNotNull(users);\n@@ -810,8 +826,7 @@ public void issueSYNCOPE980() {\n         AnyTypeCond anyTypeCond = new AnyTypeCond();\n         anyTypeCond.setAnyTypeKey(service.getKey());\n \n-        searchCondition = SearchCond.getAnd(\n-                SearchCond.getLeaf(groupCond), SearchCond.getLeaf(anyTypeCond));\n+        searchCondition = SearchCond.getAnd(SearchCond.getLeaf(groupCond), SearchCond.getLeaf(anyTypeCond));\n \n         matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertEquals(1, matching.size());\n@@ -834,6 +849,8 @@ public void issueSYNCOPE983() {\n         orderByClauses.add(orderByClause);\n \n         List<User> users = searchDAO.search(\n+                realmDAO.getRoot(),\n+                true,\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n                 SearchCond.getLeaf(fullnameLeafCond),\n                 -1,\n@@ -851,8 +868,7 @@ public void issueSYNCOPE1416() {\n         AttrCond idRightCond = new AttrCond(AttrCond.Type.ISNOTNULL);\n         idRightCond.setSchema(\"firstname\");\n \n-        SearchCond searchCondition = SearchCond.getAnd(\n-                SearchCond.getLeaf(idLeftCond), SearchCond.getLeaf(idRightCond));\n+        SearchCond searchCondition = SearchCond.getAnd(SearchCond.getLeaf(idLeftCond), SearchCond.getLeaf(idRightCond));\n \n         List<OrderByClause> orderByClauses = new ArrayList<>();\n         OrderByClause orderByClause = new OrderByClause();\n@@ -861,8 +877,8 @@ public void issueSYNCOPE1416() {\n         orderByClauses.add(orderByClause);\n \n         List<User> users = searchDAO.search(searchCondition, orderByClauses, AnyTypeKind.USER);\n-        assertEquals(\n-                searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n+        assertEquals(searchDAO.count(\n+                realmDAO.getRoot(), true, SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n                 users.size());\n \n         // search by attribute with unique constraint"},{"sha":"051ba5588bf2c1eaf51ab42aa8005b8069cc6a8f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -26,6 +26,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -130,14 +131,16 @@ public void searchAsGroupOwner() {\n         anyCond.setSchema(\"id\");\n \n         List<User> users = searchDAO.search(\n-                Collections.singleton(SyncopeConstants.ROOT_REALM),\n+                realmDAO.getRoot(), true,\n+                Set.of(SyncopeConstants.ROOT_REALM),\n                 SearchCond.getLeaf(anyCond), 1, 100, Collections.emptyList(), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertTrue(users.stream().anyMatch(user -> rossini.getKey().equals(user.getKey())));\n \n         // 3. search all users with director owner's entitlements: only rossini is returned\n         users = searchDAO.search(\n-                Collections.singleton(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())),\n+                group.getRealm(), true,\n+                Set.of(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())),\n                 SearchCond.getLeaf(anyCond), 1, 100, Collections.emptyList(), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());"},{"sha":"29fb7347ca931339cc2c40b264db7f2d65e12d88","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/GroupReportlet.java","status":"modified","additions":27,"deletions":14,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n@@ -50,20 +51,23 @@\n public class GroupReportlet extends AbstractReportlet {\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    protected RealmDAO realmDAO;\n \n     @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected GroupDAO groupDAO;\n \n     @Autowired\n-    private GroupDataBinder groupDataBinder;\n+    protected AnySearchDAO searchDAO;\n \n     @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected GroupDataBinder groupDataBinder;\n \n-    private GroupReportletConf conf;\n+    @Autowired\n+    protected SearchCondVisitor searchCondVisitor;\n+\n+    protected GroupReportletConf conf;\n \n-    private static void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n+    protected void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n             throws SAXException {\n \n         if (anyTO.getResources().isEmpty()) {\n@@ -84,9 +88,12 @@ private static void doExtractResources(final ContentHandler handler, final AnyTO\n         }\n     }\n \n-    private static void doExtractAttributes(final ContentHandler handler, final AnyTO anyTO,\n-                                            final Collection<String> attrs, final Collection<String> derAttrs,\n-                                            final Collection<String> virAttrs)\n+    protected void doExtractAttributes(\n+            final ContentHandler handler,\n+            final AnyTO anyTO,\n+            final Collection<String> attrs,\n+            final Collection<String> derAttrs,\n+            final Collection<String> virAttrs)\n             throws SAXException {\n \n         AttributesImpl atts = new AttributesImpl();\n@@ -169,7 +176,7 @@ private static void doExtractAttributes(final ContentHandler handler, final AnyT\n         }\n     }\n \n-    private void doExtract(final ContentHandler handler, final List<Group> groups) throws SAXException {\n+    protected void doExtract(final ContentHandler handler, final List<Group> groups) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         for (Group group : groups) {\n             atts.clear();\n@@ -241,7 +248,7 @@ private void doExtract(final ContentHandler handler, final List<Group> groups) t\n         }\n     }\n \n-    private void doExtractConf(final ContentHandler handler) throws SAXException {\n+    protected void doExtractConf(final ContentHandler handler) throws SAXException {\n         if (conf == null) {\n             LOG.debug(\"Report configuration is not present\");\n         }\n@@ -284,11 +291,15 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n         handler.endElement(\"\", \"\", \"configurations\");\n     }\n \n-    private int count() {\n+    protected int count() {\n         return StringUtils.isBlank(conf.getMatchingCond())\n                 ? groupDAO.count()\n-                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(searchCondVisitor, conf.getMatchingCond()), AnyTypeKind.GROUP);\n+                : searchDAO.count(\n+                        realmDAO.getRoot(),\n+                        true,\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(searchCondVisitor, conf.getMatchingCond()),\n+                        AnyTypeKind.GROUP);\n     }\n \n     @Override\n@@ -319,6 +330,8 @@ protected void doExtract(\n                 groups = groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);\n             } else {\n                 groups = searchDAO.search(\n+                        realmDAO.getRoot(),\n+                        true,\n                         SyncopeConstants.FULL_ADMIN_REALMS,\n                         SearchCondConverter.convert(searchCondVisitor, this.conf.getMatchingCond()),\n                         page,"},{"sha":"026cfbf1deaa1ea611c3ef9c01cc0c05e4dd4500","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":28,"deletions":3,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n@@ -76,6 +77,9 @@ public class ReconciliationReportlet extends AbstractReportlet {\n \n     private static final int PAGE_SIZE = 10;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -388,7 +392,12 @@ protected void doExtract(\n         } else {\n             SearchCond cond = SearchCondConverter.convert(searchCondVisitor, this.conf.getUserMatchingCond());\n \n-            int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+            int total = searchDAO.count(\n+                    realmDAO.getRoot(),\n+                    true,\n+                    SyncopeConstants.FULL_ADMIN_REALMS,\n+                    cond,\n+                    AnyTypeKind.USER);\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n             status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n@@ -400,6 +409,8 @@ protected void doExtract(\n                 status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n \n                 doExtract(handler, searchDAO.search(\n+                        realmDAO.getRoot(),\n+                        true,\n                         SyncopeConstants.FULL_ADMIN_REALMS,\n                         cond,\n                         page,\n@@ -428,7 +439,12 @@ protected void doExtract(\n         } else {\n             SearchCond cond = SearchCondConverter.convert(searchCondVisitor, this.conf.getUserMatchingCond());\n \n-            int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.GROUP);\n+            int total = searchDAO.count(\n+                    realmDAO.getRoot(),\n+                    true,\n+                    SyncopeConstants.FULL_ADMIN_REALMS,\n+                    cond,\n+                    AnyTypeKind.GROUP);\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n             status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n@@ -440,6 +456,8 @@ protected void doExtract(\n                 status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n \n                 doExtract(handler, searchDAO.search(\n+                        realmDAO.getRoot(),\n+                        true,\n                         SyncopeConstants.FULL_ADMIN_REALMS,\n                         cond,\n                         page,\n@@ -460,7 +478,12 @@ protected void doExtract(\n                                 SearchCond.getLeaf(anyTypeCond),\n                                 SearchCondConverter.convert(searchCondVisitor, this.conf.getAnyObjectMatchingCond()));\n \n-                int total = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.ANY_OBJECT);\n+                int total = searchDAO.count(\n+                        realmDAO.getRoot(),\n+                        true,\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n+                        cond,\n+                        AnyTypeKind.ANY_OBJECT);\n                 int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n                 status.set(\"Processing \" + total + \" any objects \" + anyType.getKey() + \" in \" + pages + \" pages\");\n@@ -475,6 +498,8 @@ protected void doExtract(\n                             + \": page \" + page + \" of \" + pages);\n \n                     doExtract(handler, searchDAO.search(\n+                            realmDAO.getRoot(),\n+                            true,\n                             SyncopeConstants.FULL_ADMIN_REALMS,\n                             cond,\n                             page,"},{"sha":"e4f24b5ac0f884e264c850deb0325545b0debd6e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java","status":"modified","additions":29,"deletions":16,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n@@ -56,26 +57,29 @@\n public class UserReportlet extends AbstractReportlet {\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected RealmDAO realmDAO;\n \n     @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected UserDAO userDAO;\n \n     @Autowired\n-    private UserDataBinder userDataBinder;\n+    protected AnySearchDAO searchDAO;\n \n     @Autowired\n-    private GroupDataBinder groupDataBinder;\n+    protected UserDataBinder userDataBinder;\n \n     @Autowired\n-    private AnyObjectDataBinder anyObjectDataBinder;\n+    protected GroupDataBinder groupDataBinder;\n \n     @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected AnyObjectDataBinder anyObjectDataBinder;\n \n-    private UserReportletConf conf;\n+    @Autowired\n+    protected SearchCondVisitor searchCondVisitor;\n+\n+    protected UserReportletConf conf;\n \n-    private static void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n+    protected void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n             throws SAXException {\n \n         if (anyTO.getResources().isEmpty()) {\n@@ -96,9 +100,12 @@ private static void doExtractResources(final ContentHandler handler, final AnyTO\n         }\n     }\n \n-    private static void doExtractAttributes(final ContentHandler handler, final AnyTO anyTO,\n-                                            final Collection<String> attrs, final Collection<String> derAttrs,\n-                                            final Collection<String> virAttrs) throws SAXException {\n+    protected void doExtractAttributes(\n+            final ContentHandler handler,\n+            final AnyTO anyTO,\n+            final Collection<String> attrs,\n+            final Collection<String> derAttrs,\n+            final Collection<String> virAttrs) throws SAXException {\n \n         AttributesImpl atts = new AttributesImpl();\n         if (!attrs.isEmpty()) {\n@@ -180,7 +187,7 @@ private static void doExtractAttributes(final ContentHandler handler, final AnyT\n         }\n     }\n \n-    private void doExtract(final ContentHandler handler, final List<User> users) throws SAXException {\n+    protected void doExtract(final ContentHandler handler, final List<User> users) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         for (User user : users) {\n             atts.clear();\n@@ -308,7 +315,7 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n         }\n     }\n \n-    private void doExtractConf(final ContentHandler handler) throws SAXException {\n+    protected void doExtractConf(final ContentHandler handler) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         handler.startElement(\"\", \"\", \"configurations\", null);\n         handler.startElement(\"\", \"\", \"userAttributes\", atts);\n@@ -345,11 +352,15 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n         handler.endElement(\"\", \"\", \"configurations\");\n     }\n \n-    private int count() {\n+    protected int count() {\n         return StringUtils.isBlank(conf.getMatchingCond())\n                 ? userDAO.count()\n-                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(searchCondVisitor, this.conf.getMatchingCond()), AnyTypeKind.USER);\n+                : searchDAO.count(\n+                        realmDAO.getRoot(),\n+                        true,\n+                        SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(searchCondVisitor, conf.getMatchingCond()),\n+                        AnyTypeKind.USER);\n     }\n \n     @Override\n@@ -380,6 +391,8 @@ protected void doExtract(\n                 users = userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);\n             } else {\n                 users = searchDAO.search(\n+                        realmDAO.getRoot(),\n+                        true,\n                         SyncopeConstants.FULL_ADMIN_REALMS,\n                         SearchCondConverter.convert(searchCondVisitor, this.conf.getMatchingCond()),\n                         page,"},{"sha":"c2d0931f63bc6522c8e870a5908a6581b52f202c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -558,9 +558,12 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<Realm>\n                         AnyCond keyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n                         keyCond.setSchema(\"key\");\n                         SearchCond allMatchingCond = SearchCond.getLeaf(keyCond);\n-                        int users = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.USER);\n-                        int groups = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n-                        int anyObjects = searchDAO.count(adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n+                        int users = searchDAO.count(\n+                                realmDAO.getRoot(), true, adminRealms, allMatchingCond, AnyTypeKind.USER);\n+                        int groups = searchDAO.count(\n+                                realmDAO.getRoot(), true, adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n+                        int anyObjects = searchDAO.count(\n+                                realmDAO.getRoot(), true, adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n \n                         if (users + groups + anyObjects > 0) {\n                             SyncopeClientException containedAnys = SyncopeClientException.build("},{"sha":"333c482381c818193546d74d841ec79ebbb70798","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -246,11 +246,15 @@ protected String doExecuteProvisioning(\n                     ? anyDAO.getAllMatchingCond()\n                     : SearchCondConverter.convert(searchCondVisitor, filter);\n             int count = searchDAO.count(\n+                    profile.getTask().getSourceRealm(),\n+                    true,\n                     Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                     cond,\n                     provision.getAnyType().getKind());\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1 && !interrupt; page++) {\n                 List<? extends Any<?>> anys = searchDAO.search(\n+                        profile.getTask().getSourceRealm(),\n+                        true,\n                         Set.of(profile.getTask().getSourceRealm().getFullPath()),\n                         cond,\n                         page,"},{"sha":"ad7dd141b366c7b9de048b93f3a1833ae8527687","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":62,"deletions":30,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -124,40 +124,51 @@ public ElasticsearchAnySearchDAO(\n     }\n \n     protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter(\n-            final AnyTypeKind kind, final Set<String> adminRealms) {\n+            final Realm base,\n+            final boolean recursive,\n+            final Set<String> adminRealms,\n+            final AnyTypeKind kind) {\n \n         Set<String> dynRealmKeys = new HashSet<>();\n         Set<String> groupOwners = new HashSet<>();\n         List<Query> queries = new ArrayList<>();\n \n-        adminRealms.forEach(realmPath -> {\n-            Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n-            if (goRealm.isPresent()) {\n-                groupOwners.add(goRealm.get().getRight());\n-            } else if (realmPath.startsWith(\"/\")) {\n-                Realm realm = realmDAO.findByFullPath(realmPath);\n-                if (realm == null) {\n-                    SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-                    noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n-                    throw noRealm;\n-                } else {\n-                    realmDAO.findDescendants(realm).forEach(descendant -> queries.add(\n-                            new Query.Builder().term(QueryBuilders.term().\n-                                    field(\"realm\").value(FieldValue.of(descendant.getFullPath())).build()).\n-                                    build()));\n-                }\n-            } else {\n-                DynRealm dynRealm = dynRealmDAO.find(realmPath);\n-                if (dynRealm == null) {\n-                    LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+        if (recursive) {\n+            adminRealms.forEach(realmPath -> {\n+                Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n+                if (goRealm.isPresent()) {\n+                    groupOwners.add(goRealm.get().getRight());\n+                } else if (realmPath.startsWith(\"/\")) {\n+                    Realm realm = realmDAO.findByFullPath(realmPath);\n+                    if (realm == null) {\n+                        SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+                        noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n+                        throw noRealm;\n+                    } else {\n+                        realmDAO.findDescendants(realm).forEach(descendant -> queries.add(\n+                                new Query.Builder().term(QueryBuilders.term().\n+                                        field(\"realm\").value(FieldValue.of(descendant.getFullPath())).build()).\n+                                        build()));\n+                    }\n                 } else {\n-                    dynRealmKeys.add(dynRealm.getKey());\n-                    queries.add(new Query.Builder().term(QueryBuilders.term().\n-                            field(\"dynRealm\").value(FieldValue.of(dynRealm.getKey())).build()).\n-                            build());\n+                    DynRealm dynRealm = dynRealmDAO.find(realmPath);\n+                    if (dynRealm == null) {\n+                        LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n+                    } else {\n+                        dynRealmKeys.add(dynRealm.getKey());\n+                        queries.add(new Query.Builder().term(QueryBuilders.term().\n+                                field(\"dynRealm\").value(FieldValue.of(dynRealm.getKey())).build()).\n+                                build());\n+                    }\n                 }\n+            });\n+        } else {\n+            if (adminRealms.stream().anyMatch(r -> base.getFullPath().startsWith(r))) {\n+                queries.add(new Query.Builder().term(QueryBuilders.term().\n+                        field(\"realm\").value(FieldValue.of(base.getFullPath())).build()).\n+                        build());\n             }\n-        });\n+        }\n \n         return Triple.of(\n                 dynRealmKeys.isEmpty() && groupOwners.isEmpty()\n@@ -168,15 +179,28 @@ protected Triple<Optional<Query>, Set<String>, Set<String>> getAdminRealmsFilter\n     }\n \n     protected Query getQuery(\n+            final Realm base,\n+            final boolean recursive,\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final AnyTypeKind kind) {\n \n-        Triple<Optional<Query>, Set<String>, Set<String>> filter = getAdminRealmsFilter(kind, adminRealms);\n         Query query;\n         if (SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)) {\n             query = getQuery(cond, kind);\n+\n+            if (!recursive) {\n+                query = new Query.Builder().bool(\n+                        QueryBuilders.bool().\n+                                must(new Query.Builder().term(QueryBuilders.term().\n+                                        field(\"realm\").value(FieldValue.of(base.getFullPath())).build()).\n+                                        build()).\n+                                must(query).build()).\n+                        build();\n+            }\n         } else {\n+            Triple<Optional<Query>, Set<String>, Set<String>> filter =\n+                    getAdminRealmsFilter(base, recursive, adminRealms, kind);\n             query = getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), kind);\n \n             if (filter.getLeft().isPresent()) {\n@@ -192,10 +216,16 @@ protected Query getQuery(\n     }\n \n     @Override\n-    protected int doCount(final Set<String> adminRealms, final SearchCond cond, final AnyTypeKind kind) {\n+    protected int doCount(\n+            final Realm base,\n+            final boolean recursive,\n+            final Set<String> adminRealms,\n+            final SearchCond cond,\n+            final AnyTypeKind kind) {\n+\n         CountRequest request = new CountRequest.Builder().\n                 index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n-                query(getQuery(adminRealms, cond, kind)).\n+                query(getQuery(base, recursive, adminRealms, cond, kind)).\n                 build();\n         try {\n             return (int) client.count(request).count();\n@@ -245,6 +275,8 @@ protected List<SortOptions> sortBuilders(\n \n     @Override\n     protected <T extends Any<?>> List<T> doSearch(\n+            final Realm base,\n+            final boolean recursive,\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final int page,\n@@ -255,7 +287,7 @@ protected <T extends Any<?>> List<T> doSearch(\n         SearchRequest request = new SearchRequest.Builder().\n                 index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n                 searchType(SearchType.QueryThenFetch).\n-                query(getQuery(adminRealms, cond, kind)).\n+                query(getQuery(base, recursive, adminRealms, cond, kind)).\n                 from(itemsPerPage * (page <= 0 ? 0 : page - 1)).\n                 size(itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage).\n                 sort(sortBuilders(kind, orderBy))."},{"sha":"e08aed88545d9b6f0df8d52c05c10918ec0e2afb","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -99,7 +99,7 @@ public void getAdminRealmsFilter_realm() throws IOException {\n         // 2. test\n         Set<String> adminRealms = Set.of(SyncopeConstants.ROOT_REALM);\n         Triple<Optional<Query>, Set<String>, Set<String>> filter =\n-                searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n+                searchDAO.getAdminRealmsFilter(realmDAO.getRoot(), true, adminRealms, AnyTypeKind.USER);\n \n         assertThat(\n                 new Query.Builder().disMax(QueryBuilders.disMax().queries(\n@@ -122,7 +122,7 @@ public void getAdminRealmsFilter_dynRealm() {\n         // 2. test\n         Set<String> adminRealms = Set.of(\"dyn\");\n         Triple<Optional<Query>, Set<String>, Set<String>> filter =\n-                searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n+                searchDAO.getAdminRealmsFilter(realmDAO.getRoot(), true, adminRealms, AnyTypeKind.USER);\n         assertFalse(filter.getLeft().isPresent());\n         assertEquals(Set.of(\"dyn\"), filter.getMiddle());\n         assertEquals(Set.of(), filter.getRight());\n@@ -132,7 +132,7 @@ public void getAdminRealmsFilter_dynRealm() {\n     public void getAdminRealmsFilter_groupOwner() {\n         Set<String> adminRealms = Set.of(RealmUtils.getGroupOwnerRealm(\"/any\", \"groupKey\"));\n         Triple<Optional<Query>, Set<String>, Set<String>> filter =\n-                searchDAO.getAdminRealmsFilter(AnyTypeKind.USER, adminRealms);\n+                searchDAO.getAdminRealmsFilter(realmDAO.getRoot(), true, adminRealms, AnyTypeKind.USER);\n         assertFalse(filter.getLeft().isPresent());\n         assertEquals(Set.of(), filter.getMiddle());\n         assertEquals(Set.of(\"groupKey\"), filter.getRight());\n@@ -164,7 +164,8 @@ public void searchRequest_groupOwner() throws IOException {\n             SearchRequest request = new SearchRequest.Builder().\n                     index(ElasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n                     searchType(SearchType.QueryThenFetch).\n-                    query(searchDAO.getQuery(adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER)).\n+                    query(searchDAO.getQuery(realmDAO.findByFullPath(\"/any\"), true,\n+                            adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER)).\n                     from(1).\n                     size(10).\n                     build();"},{"sha":"65943b14c159eaa336696fb6e69852c9eea7882d","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -635,8 +635,7 @@ public SCIMGroup toSCIMGroup(\n \n         if (output(attributes, excludedAttributes, \"members\")) {\n             int count = userLogic.search(searchCond,\n-                    1, 1, List.of(),\n-                    SyncopeConstants.ROOT_REALM, false).getLeft();\n+                    1, 1, List.of(), SyncopeConstants.ROOT_REALM, true, false).getLeft();\n \n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<UserTO> users = userLogic.search(\n@@ -645,6 +644,7 @@ public SCIMGroup toSCIMGroup(\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n                         List.of(),\n                         SyncopeConstants.ROOT_REALM,\n+                        true,\n                         false).\n                         getRight();\n                 users.forEach(userTO -> group.getMembers().add(new Member("},{"sha":"51e30dfeea993833cbef526080d61bc15a116afa","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -181,6 +181,7 @@ protected ListResponse<R> doSearch(\n                 itemsPerPage,\n                 sort,\n                 SyncopeConstants.ROOT_REALM,\n+                true,\n                 false);\n \n         if (result.getLeft() > confManager.get().getGeneralConf().getFilterMaxResults()) {"},{"sha":"37b038f00406e7aa47ccd81250bd9e7cedc20b46","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -127,15 +127,15 @@ public Response replace(final String id, final SCIMGroup group) {\n         membCond.setGroup(id);\n         SearchCond searchCond = SearchCond.getLeaf(membCond);\n         int count = userLogic.search(searchCond,\n-                1, 1, List.of(),\n-                SyncopeConstants.ROOT_REALM, false).getLeft();\n+                1, 1, List.of(), SyncopeConstants.ROOT_REALM, true, false).getLeft();\n         for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n             beforeMembers.addAll(userLogic.search(\n                     searchCond,\n                     page,\n                     AnyDAO.DEFAULT_PAGE_SIZE,\n                     List.of(),\n                     SyncopeConstants.ROOT_REALM,\n+                    true,\n                     false).\n                     getRight().stream().map(EntityTO::getKey).collect(Collectors.toSet()));\n         }"},{"sha":"6ccc7a7f681fc9580694acdfe6947a7919569f9d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -162,6 +162,13 @@ public void searchByGroup() {\n         assertTrue(matchingStar.getResult().stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n         assertTrue(matchingStar.getResult().stream().anyMatch(user -> \"rossini\".equals(user.getUsername())));\n         assertEquals(union, matchingStar.getResult().stream().map(UserTO::getUsername).collect(Collectors.toSet()));\n+\n+        matchingStar = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).recursive(false).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"*child\").query()).\n+                        build());\n+        assertTrue(matchingStar.getResult().stream().anyMatch(user -> \"verdi\".equals(user.getUsername())));\n+        assertTrue(matchingStar.getResult().stream().noneMatch(user -> \"rossini\".equals(user.getUsername())));\n     }\n \n     @Test"},{"sha":"f7f8903c4409cbf72fb90b47b95be2e0cc993a58","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a2690568f7e3653a7112c0bdf795654efb236c5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a2690568f7e3653a7112c0bdf795654efb236c5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=8a2690568f7e3653a7112c0bdf795654efb236c5","patch":"@@ -510,10 +510,10 @@ under the License.\n     <docker.mysql.version>8.0</docker.mysql.version>\n     <docker.mariadb.version>10</docker.mariadb.version>\n \n-    <jdbc.postgresql.version>42.3.4</jdbc.postgresql.version>\n+    <jdbc.postgresql.version>42.3.5</jdbc.postgresql.version>\n     <jdbc.mysql.version>8.0.28</jdbc.mysql.version>\n     <jdbc.mariadb.version>2.7.5</jdbc.mariadb.version>\n-    <jdbc.mssql.version>10.2.0.jre</jdbc.mssql.version>\n+    <jdbc.mssql.version>10.2.1.jre</jdbc.mssql.version>\n     <jdbc.oracle.version>21.5.0.0</jdbc.oracle.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>"}]}