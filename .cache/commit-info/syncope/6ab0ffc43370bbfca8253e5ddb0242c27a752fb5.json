{"sha":"6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZhYjBmZmM0MzM3MGJiZmNhODI1M2U1ZGRiMDI0MmMyN2E3NTJmYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-09-18T16:26:16Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-09-18T16:26:16Z"},"message":"[SYNCOPE-1618] Use Constructor-level dependency injections (#287)","tree":{"sha":"0b37a6e9eb8a2979cef4eb637bfebbf93d7f58f1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b37a6e9eb8a2979cef4eb637bfebbf93d7f58f1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRhMoCRBK7hj4Ov3rIwAAPZMIAEVyXlgu7OCn7Km9+tWialdt\nWSGyzGP/XWUzD5H6WgLT3DwRCpnl0wiLi+gMT8Cr7T1TSSXdHDL4U7h5q3ikjQVw\nwZzBf90/7+eWCQgaE/G/gco/wJEUwn+r+yb4/7fOhrKja2ckE7i0GTyRdwSv63ZE\nZcLzRI0C87zXRJVeayyUBhy37FwN111xOvQnXQa946N+USige7gvKWjK5FudpcKp\nFZekHd7mui3AdLkADUTkOtW+Boh2hjF6x1I4YjM1JM/YJhk5rVVwjTjlceiKeABW\nzpd9P6IHLLDlPIAn6dYYD7kxEm0Yx/JZ+Sso+mxMnC4F5lBUhUPKAkweNHwquDE=\n=t+U7\n-----END PGP SIGNATURE-----\n","payload":"tree 0b37a6e9eb8a2979cef4eb637bfebbf93d7f58f1\nparent 8a15b7929069950e553db35487c96a4e5ec60d8f\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1631982376 +0200\ncommitter GitHub <noreply@github.com> 1631982376 +0200\n\n[SYNCOPE-1618] Use Constructor-level dependency injections (#287)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a15b7929069950e553db35487c96a4e5ec60d8f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a15b7929069950e553db35487c96a4e5ec60d8f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a15b7929069950e553db35487c96a4e5ec60d8f"}],"stats":{"total":14510,"additions":10216,"deletions":4294},"files":[{"sha":"0fa8c5bfc8b3faa24db6dc352f2dc32337b05f35","filename":".github/workflows/crosschecks.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/.github%2Fworkflows%2Fcrosschecks.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/.github%2Fworkflows%2Fcrosschecks.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.github%2Fworkflows%2Fcrosschecks.yml?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,7 +33,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         language: ['java']\n-        java: [ '11', '14', '17-ea' ]\n+        java: [ '11', '14', '17' ]\n         os: [ubuntu-latest, windows-latest, macos-latest]\n \n     steps:"},{"sha":"cf6e35771aa187ddb7472b12d04e8f99f8381c67","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AMLogicContext.java","status":"added","additions":210,"deletions":0,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAMLogicContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.core.logic.init.AMEntitlementLoader;\n+import org.apache.syncope.core.logic.wa.GoogleMfaAuthAccountLogic;\n+import org.apache.syncope.core.logic.wa.GoogleMfaAuthTokenLogic;\n+import org.apache.syncope.core.logic.wa.ImpersonationLogic;\n+import org.apache.syncope.core.logic.wa.U2FRegistrationLogic;\n+import org.apache.syncope.core.logic.wa.WAClientAppLogic;\n+import org.apache.syncope.core.logic.wa.WAConfigLogic;\n+import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n+import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SRARouteDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class AMLogicContext {\n+\n+    @Autowired\n+    private SecurityProperties securityProperties;\n+\n+    @Autowired\n+    private ServiceOps serviceOps;\n+\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private AuthProfileDataBinder authProfileDataBinder;\n+\n+    @Autowired\n+    private CASSPDAO casspDAO;\n+\n+    @Autowired\n+    private OIDCRPDAO oidcrpDAO;\n+\n+    @Autowired\n+    private SAML2SPDAO saml2spDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AMEntitlementLoader amEntitlementLoader() {\n+        return new AMEntitlementLoader();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuthModuleLogic authModuleLogic(\n+            final AuthModuleDataBinder binder,\n+            final AuthModuleDAO authModuleDAO) {\n+\n+        return new AuthModuleLogic(binder, authModuleDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuthProfileLogic authProfileLogic() {\n+        return new AuthProfileLogic(authProfileDAO, authProfileDataBinder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ClientAppLogic clientAppLogic(\n+            final ClientAppUtilsFactory clientAppUtilsFactory,\n+            final ClientAppDataBinder binder) {\n+\n+        return new ClientAppLogic(\n+                serviceOps,\n+                clientAppUtilsFactory,\n+                binder,\n+                saml2spDAO,\n+                oidcrpDAO,\n+                casspDAO,\n+                securityProperties);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public OIDCJWKSLogic oidcJWKSLogic(\n+            final OIDCJWKSDataBinder binder,\n+            final OIDCJWKSDAO dao) {\n+\n+        return new OIDCJWKSLogic(binder, dao);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SAML2IdPEntityLogic saml2IdPEntityLogic(\n+            final SAML2IdPEntityDataBinder binder,\n+            final SAML2IdPEntityDAO entityDAO) {\n+\n+        return new SAML2IdPEntityLogic(binder, entityDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SAML2SPEntityLogic saml2SPEntityLogic(\n+            final SAML2SPEntityDataBinder binder,\n+            final SAML2SPEntityDAO entityDAO) {\n+\n+        return new SAML2SPEntityLogic(binder, entityDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SRARouteLogic sraRouteLogic(\n+            final SRARouteDAO routeDAO,\n+            final SRARouteDataBinder binder) {\n+\n+        return new SRARouteLogic(routeDAO, binder, entityFactory, serviceOps, securityProperties);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic() {\n+        return new GoogleMfaAuthAccountLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic() {\n+        return new GoogleMfaAuthTokenLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ImpersonationLogic impersonationLogic() {\n+        return new ImpersonationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public U2FRegistrationLogic u2fRegistrationLogic() {\n+        return new U2FRegistrationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WAClientAppLogic waClientAppLogic(final WAClientAppDataBinder binder) {\n+        return new WAClientAppLogic(binder, saml2spDAO, oidcrpDAO, casspDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WAConfigLogic waConfigLogic(\n+            final WAConfigDataBinder binder,\n+            final WAConfigDAO waConfigDAO) {\n+\n+        return new WAConfigLogic(serviceOps, binder, waConfigDAO, securityProperties);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public WebAuthnRegistrationLogic webAuthnRegistrationLogic() {\n+        return new WebAuthnRegistrationLogic(entityFactory, authProfileDAO, authProfileDataBinder);\n+    }\n+}"},{"sha":"c81ddc7c78c9f26b2a8c9dddd4df467f064c5714","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AbstractAuthProfileLogic.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAuthProfileLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,15 +23,17 @@\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n public abstract class AbstractAuthProfileLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n \n-    @Autowired\n-    protected AuthProfileDAO authProfileDAO;\n+    protected final AuthProfileDAO authProfileDAO;\n \n-    @Autowired\n-    protected AuthProfileDataBinder binder;\n+    protected final AuthProfileDataBinder binder;\n+\n+    public AbstractAuthProfileLogic(final AuthProfileDAO authProfileDAO, final AuthProfileDataBinder binder) {\n+        this.authProfileDAO = authProfileDAO;\n+        this.binder = binder;\n+    }\n \n     @Override\n     protected AuthProfileTO resolveReference(final Method method, final Object... args)"},{"sha":"3bc5b6c2b67c803d0852fb094cb41f1b2685cbc4","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthModuleLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -29,19 +29,19 @@\n import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class AuthModuleLogic extends AbstractTransactionalLogic<AuthModuleTO> {\n \n-    @Autowired\n-    private AuthModuleDataBinder binder;\n+    protected final AuthModuleDataBinder binder;\n \n-    @Autowired\n-    private AuthModuleDAO authModuleDAO;\n+    protected final AuthModuleDAO authModuleDAO;\n+\n+    public AuthModuleLogic(final AuthModuleDataBinder binder, final AuthModuleDAO authModuleDAO) {\n+        this.binder = binder;\n+        this.authModuleDAO = authModuleDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_CREATE + \"')\")\n     public AuthModuleTO create(final AuthModuleTO authModuleTO) {"},{"sha":"e572c16ac5ce0401c327b665b714b509bba0aa91","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthProfileLogic.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,18 @@\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class AuthProfileLogic extends AbstractAuthProfileLogic {\n \n+    public AuthProfileLogic(final AuthProfileDAO authProfileDAO, final AuthProfileDataBinder binder) {\n+        super(authProfileDAO, binder);\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_PROFILE_DELETE + \"') \")\n     public void delete(final String key) {\n         authProfileDAO.delete(key);"},{"sha":"6629fc08d301a32233e716ae14a0cb111c987d4a","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"modified","additions":26,"deletions":18,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,38 +48,46 @@\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n \n-@Component\n public class ClientAppLogic extends AbstractTransactionalLogic<ClientAppTO> {\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n+    protected final ServiceOps serviceOps;\n \n-    @Autowired\n-    private ClientAppUtilsFactory clientAppUtilsFactory;\n+    protected final ClientAppUtilsFactory clientAppUtilsFactory;\n \n-    @Autowired\n-    private ClientAppDataBinder binder;\n+    protected final ClientAppDataBinder binder;\n \n-    @Autowired\n-    private SAML2SPDAO saml2spDAO;\n+    protected final SAML2SPDAO saml2spDAO;\n \n-    @Autowired\n-    private OIDCRPDAO oidcrpDAO;\n+    protected final OIDCRPDAO oidcrpDAO;\n \n-    @Autowired\n-    private CASSPDAO casspDAO;\n+    protected final CASSPDAO casspDAO;\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n+\n+    public ClientAppLogic(\n+            final ServiceOps serviceOps,\n+            final ClientAppUtilsFactory clientAppUtilsFactory,\n+            final ClientAppDataBinder binder,\n+            final SAML2SPDAO saml2spDAO,\n+            final OIDCRPDAO oidcrpDAO,\n+            final CASSPDAO casspDAO,\n+            final SecurityProperties securityProperties) {\n+\n+        this.serviceOps = serviceOps;\n+        this.clientAppUtilsFactory = clientAppUtilsFactory;\n+        this.binder = binder;\n+        this.saml2spDAO = saml2spDAO;\n+        this.oidcrpDAO = oidcrpDAO;\n+        this.casspDAO = casspDAO;\n+        this.securityProperties = securityProperties;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_LIST + \"')\")\n     public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n@@ -100,7 +108,7 @@ public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n         return stream.collect(Collectors.toList());\n     }\n \n-    private static void checkType(final ClientAppType type, final ClientAppUtils clientAppUtils) {\n+    protected void checkType(final ClientAppType type, final ClientAppUtils clientAppUtils) {\n         if (clientAppUtils.getType() != type) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n             sce.getElements().add(\"Found \" + type + \", expected \" + clientAppUtils.getType());"},{"sha":"0e0370023c0ae4de3bcda951f739c6ddcf1c3395","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/OIDCJWKSLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -29,19 +29,19 @@\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class OIDCJWKSLogic extends AbstractTransactionalLogic<OIDCJWKSTO> {\n \n-    @Autowired\n-    private OIDCJWKSDataBinder binder;\n+    protected final OIDCJWKSDataBinder binder;\n \n-    @Autowired\n-    private OIDCJWKSDAO dao;\n+    protected final OIDCJWKSDAO dao;\n+\n+    public OIDCJWKSLogic(final OIDCJWKSDataBinder binder, final OIDCJWKSDAO dao) {\n+        this.binder = binder;\n+        this.dao = dao;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")"},{"sha":"c8e7fe8f58265409c94a7eacabcff7345798f996","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPEntityLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPEntityLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,22 +27,22 @@\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n \n-@Component\n public class SAML2IdPEntityLogic extends AbstractTransactionalLogic<SAML2IdPEntityTO> {\n \n-    @Autowired\n-    private SAML2IdPEntityDataBinder binder;\n+    protected final SAML2IdPEntityDataBinder binder;\n \n-    @Autowired\n-    private SAML2IdPEntityDAO entityDAO;\n+    protected final SAML2IdPEntityDAO entityDAO;\n+\n+    public SAML2IdPEntityLogic(final SAML2IdPEntityDataBinder binder, final SAML2IdPEntityDAO entityDAO) {\n+        this.binder = binder;\n+        this.entityDAO = entityDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_IDP_ENTITY_LIST + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"2b8b8988106fdd14c53a0bc83f6b1bdb43941fc9","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPEntityLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPEntityLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,19 +30,19 @@\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class SAML2SPEntityLogic extends AbstractTransactionalLogic<SAML2SPEntityTO> {\n \n-    @Autowired\n-    private SAML2SPEntityDataBinder binder;\n+    protected final SAML2SPEntityDataBinder binder;\n \n-    @Autowired\n-    private SAML2SPEntityDAO entityDAO;\n+    protected final SAML2SPEntityDAO entityDAO;\n+\n+    public SAML2SPEntityLogic(final SAML2SPEntityDataBinder binder, final SAML2SPEntityDAO entityDAO) {\n+        this.binder = binder;\n+        this.entityDAO = entityDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.SAML2_SP_ENTITY_LIST + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"5b1b23d714a206b1210f814aae78f28cf38e0d03","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SRARouteLogic.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -42,27 +42,33 @@\n import org.apache.syncope.core.persistence.api.entity.SRARoute;\n import org.apache.syncope.core.provisioning.api.data.SRARouteDataBinder;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class SRARouteLogic extends AbstractTransactionalLogic<SRARouteTO> {\n \n-    @Autowired\n-    private SRARouteDAO routeDAO;\n+    protected final SRARouteDAO routeDAO;\n \n-    @Autowired\n-    private SRARouteDataBinder binder;\n+    protected final SRARouteDataBinder binder;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n+    protected final ServiceOps serviceOps;\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n+\n+    public SRARouteLogic(\n+            final SRARouteDAO routeDAO,\n+            final SRARouteDataBinder binder,\n+            final EntityFactory entityFactory,\n+            final ServiceOps serviceOps,\n+            final SecurityProperties securityProperties) {\n+\n+        this.routeDAO = routeDAO;\n+        this.binder = binder;\n+        this.entityFactory = entityFactory;\n+        this.serviceOps = serviceOps;\n+        this.securityProperties = securityProperties;\n+    }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     public List<SRARouteTO> list() {"},{"sha":"cef967daff2415515364da436f0b617a58e035e4","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/init/AMEntitlementLoader.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAMEntitlementLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,9 +21,7 @@\n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AMEntitlementLoader implements SyncopeCoreLoader {\n \n     @Override"},{"sha":"efcca61678f0925948ae34d45074ce5409ee6f50","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthAccountLogic.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthAccountLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,18 +25,25 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class GoogleMfaAuthAccountLogic extends AbstractAuthProfileLogic {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public GoogleMfaAuthAccountLogic(\n+            final EntityFactory entityFactory,\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder binder) {\n+\n+        super(authProfileDAO, binder);\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n@@ -60,21 +67,21 @@ public void delete(final String owner) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void delete(final long id) {\n         authProfileDAO.findAll(-1, -1).\n-            stream().\n-            filter(Objects::nonNull).\n-            filter(profile -> profile.\n+                stream().\n+                filter(Objects::nonNull).\n+                filter(profile -> profile.\n                 getGoogleMfaAuthAccounts().\n                 stream().\n                 allMatch(acct -> acct.getId() == id)).\n-            findFirst().\n-            ifPresentOrElse(profile -> {\n-                if (profile.getGoogleMfaAuthAccounts().removeIf(acct -> acct.getId() == id)) {\n-                    authProfileDAO.save(profile);\n-                }\n-            },\n-            () -> {\n-                throw new NotFoundException(\"Could not find account for id \" + id);\n-            });\n+                findFirst().\n+                ifPresentOrElse(profile -> {\n+                    if (profile.getGoogleMfaAuthAccounts().removeIf(acct -> acct.getId() == id)) {\n+                        authProfileDAO.save(profile);\n+                    }\n+                },\n+                        () -> {\n+                            throw new NotFoundException(\"Could not find account for id \" + id);\n+                        });\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")"},{"sha":"e83d1bcfe47b78b9b88be443e0c0412b23b92868","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/GoogleMfaAuthTokenLogic.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FGoogleMfaAuthTokenLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,18 +26,25 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class GoogleMfaAuthTokenLogic extends AbstractAuthProfileLogic {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public GoogleMfaAuthTokenLogic(\n+            final EntityFactory entityFactory,\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder binder) {\n+\n+        super(authProfileDAO, binder);\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void delete(final Date expirationDate) {"},{"sha":"a9675b62162b612923392e6e33d6504823caf703","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/ImpersonationLogic.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,18 +23,25 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ImpersonationLogic extends AbstractAuthProfileLogic {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public ImpersonationLogic(\n+            final EntityFactory entityFactory,\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder binder) {\n+\n+        super(authProfileDAO, binder);\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"c32787a40771ee5d9fa89dd577852a03d48a6d39","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/U2FRegistrationLogic.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FU2FRegistrationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -29,18 +29,25 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class U2FRegistrationLogic extends AbstractAuthProfileLogic {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public U2FRegistrationLogic(\n+            final EntityFactory entityFactory,\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder binder) {\n+\n+        super(authProfileDAO, binder);\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     public void create(final String owner, final U2FDevice device) {"},{"sha":"3fc07d0626ef50e01bd00679bb5119b00e645f5c","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"modified","additions":18,"deletions":13,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -29,29 +29,34 @@\n import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n-@Component\n public class WAClientAppLogic {\n \n-    @Autowired\n-    private WAClientAppDataBinder binder;\n+    protected final WAClientAppDataBinder binder;\n \n-    @Autowired\n-    private SAML2SPDAO saml2spDAO;\n+    protected final SAML2SPDAO saml2spDAO;\n \n-    @Autowired\n-    private OIDCRPDAO oidcrpDAO;\n+    protected final OIDCRPDAO oidcrpDAO;\n \n-    @Autowired\n-    private CASSPDAO casspDAO;\n+    protected final CASSPDAO casspDAO;\n+\n+    public WAClientAppLogic(\n+            final WAClientAppDataBinder binder,\n+            final SAML2SPDAO saml2spDAO,\n+            final OIDCRPDAO oidcrpDAO,\n+            final CASSPDAO casspDAO) {\n+\n+        this.binder = binder;\n+        this.saml2spDAO = saml2spDAO;\n+        this.oidcrpDAO = oidcrpDAO;\n+        this.casspDAO = casspDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n@@ -80,7 +85,7 @@ public List<WAClientApp> list() {\n         return clientApps;\n     }\n \n-    private WAClientApp doRead(final Long clientAppId, final ClientAppType type) {\n+    protected WAClientApp doRead(final Long clientAppId, final ClientAppType type) {\n         WAClientApp clientApp = null;\n \n         switch (type) {\n@@ -130,7 +135,7 @@ public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n         return clientApp;\n     }\n \n-    private WAClientApp doRead(final String name, final ClientAppType type) {\n+    protected WAClientApp doRead(final String name, final ClientAppType type) {\n         WAClientApp clientApp = null;\n \n         switch (type) {"},{"sha":"cb103f3096a01b9ce644dbf8ce425d36f914455a","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAConfigLogic.java","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAConfigLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -44,25 +44,30 @@\n import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class WAConfigLogic extends AbstractTransactionalLogic<EntityTO> {\n \n-    @Autowired\n-    private ServiceOps serviceOps;\n+    protected final ServiceOps serviceOps;\n \n-    @Autowired\n-    private WAConfigDataBinder binder;\n+    protected final WAConfigDataBinder binder;\n \n-    @Autowired\n-    private WAConfigDAO waConfigDAO;\n+    protected final WAConfigDAO waConfigDAO;\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n+\n+    public WAConfigLogic(\n+            final ServiceOps serviceOps,\n+            final WAConfigDataBinder binder,\n+            final WAConfigDAO waConfigDAO,\n+            final SecurityProperties securityProperties) {\n+\n+        this.serviceOps = serviceOps;\n+        this.binder = binder;\n+        this.waConfigDAO = waConfigDAO;\n+        this.securityProperties = securityProperties;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.WA_CONFIG_LIST + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"e9cb9c6fc3682f86438717ca12a30290a08be6c6","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WebAuthnRegistrationLogic.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWebAuthnRegistrationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,18 +25,25 @@\n import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class WebAuthnRegistrationLogic extends AbstractAuthProfileLogic {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public WebAuthnRegistrationLogic(\n+            final EntityFactory entityFactory,\n+            final AuthProfileDAO authProfileDAO,\n+            final AuthProfileDataBinder binder) {\n+\n+        super(authProfileDAO, binder);\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"e014d8cfc85d821edfbc62d1e9f0d9f19cd0b91b","filename":"core/am/logic/src/main/resources/META-INF/spring.factories","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -15,4 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-persistence.anySearchDao=org.apache.syncope.core.persistence.jpa.dao.ElasticsearchAnySearchDAO\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n+  org.apache.syncope.core.logic.AMLogicContext","previous_filename":"ext/elasticsearch/persistence-jpa/src/main/resources/core-elasticsearch.properties"},{"sha":"913865cf6b9651a3c35dba17e48683661e6e7357","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AMRESTCXFContext.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAMRESTCXFContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n+import org.apache.syncope.common.rest.api.service.AuthProfileService;\n+import org.apache.syncope.common.rest.api.service.ClientAppService;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n+import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n+import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n+import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n+import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n+import org.apache.syncope.core.logic.AuthModuleLogic;\n+import org.apache.syncope.core.logic.AuthProfileLogic;\n+import org.apache.syncope.core.logic.ClientAppLogic;\n+import org.apache.syncope.core.logic.OIDCJWKSLogic;\n+import org.apache.syncope.core.logic.SAML2IdPEntityLogic;\n+import org.apache.syncope.core.logic.SAML2SPEntityLogic;\n+import org.apache.syncope.core.logic.SRARouteLogic;\n+import org.apache.syncope.core.logic.wa.GoogleMfaAuthAccountLogic;\n+import org.apache.syncope.core.logic.wa.GoogleMfaAuthTokenLogic;\n+import org.apache.syncope.core.logic.wa.ImpersonationLogic;\n+import org.apache.syncope.core.logic.wa.U2FRegistrationLogic;\n+import org.apache.syncope.core.logic.wa.WAClientAppLogic;\n+import org.apache.syncope.core.logic.wa.WAConfigLogic;\n+import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n+import org.apache.syncope.core.rest.cxf.service.AuthModuleServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.AuthProfileServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ClientAppServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.OIDCJWKSServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.SAML2IdPEntityServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.SAML2SPEntityServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.SRARouteServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.GoogleMfaAuthAccountServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.GoogleMfaAuthTokenServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.ImpersonationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.U2FRegistrationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.WAClientAppServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.WAConfigServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.wa.WebAuthnRegistrationServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class AMRESTCXFContext {\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuthModuleService authModuleService(final AuthModuleLogic authModuleLogic) {\n+        return new AuthModuleServiceImpl(authModuleLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuthProfileService authProfileService(final AuthProfileLogic authProfileLogic) {\n+        return new AuthProfileServiceImpl(authProfileLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ClientAppService clientAppService(final ClientAppLogic clientAppLogic) {\n+        return new ClientAppServiceImpl(clientAppLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GoogleMfaAuthAccountService googleMfaAuthAccountService(\n+            final GoogleMfaAuthAccountLogic googleMfaAuthAccountLogic) {\n+\n+        return new GoogleMfaAuthAccountServiceImpl(googleMfaAuthAccountLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GoogleMfaAuthTokenService googleMfaAuthTokenService(\n+            final GoogleMfaAuthTokenLogic googleMfaAuthTokenLogic) {\n+\n+        return new GoogleMfaAuthTokenServiceImpl(googleMfaAuthTokenLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ImpersonationService impersonationService(final ImpersonationLogic impersonationLogic) {\n+        return new ImpersonationServiceImpl(impersonationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public OIDCJWKSService oidcJWKSService(final OIDCJWKSLogic oidcJWKSLogic) {\n+        return new OIDCJWKSServiceImpl(oidcJWKSLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SAML2IdPEntityService saml2IdPEntityService(final SAML2IdPEntityLogic saml2IdPEntityLogic) {\n+        return new SAML2IdPEntityServiceImpl(saml2IdPEntityLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SAML2SPEntityService saml2SPEntityService(final SAML2SPEntityLogic saml2SPEntityLogic) {\n+        return new SAML2SPEntityServiceImpl(saml2SPEntityLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SRARouteService sraRouteService(final SRARouteLogic sraRouteLogic) {\n+        return new SRARouteServiceImpl(sraRouteLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public U2FRegistrationService u2fRegistrationService(final U2FRegistrationLogic u2fRegistrationLogic) {\n+        return new U2FRegistrationServiceImpl(u2fRegistrationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WAClientAppService waClientAppService(final WAClientAppLogic waClientAppLogic) {\n+        return new WAClientAppServiceImpl(waClientAppLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WAConfigService waConfigService(final WAConfigLogic waConfigLogic) {\n+        return new WAConfigServiceImpl(waConfigLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WebAuthnRegistrationService webAuthnRegistrationService(\n+            final WebAuthnRegistrationLogic webAuthnRegistrationLogic) {\n+\n+        return new WebAuthnRegistrationServiceImpl(webAuthnRegistrationLogic);\n+    }\n+}"},{"sha":"f5ba667fe31776d460bcbe8d04f1c2b4ae8a5596","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuthModuleServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthModuleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthModuleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthModuleServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AuthModuleService;\n import org.apache.syncope.core.logic.AuthModuleLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AuthModuleServiceImpl extends AbstractServiceImpl implements AuthModuleService {\n+public class AuthModuleServiceImpl extends AbstractService implements AuthModuleService {\n \n-    @Autowired\n-    private AuthModuleLogic logic;\n+    protected final AuthModuleLogic logic;\n+\n+    public AuthModuleServiceImpl(final AuthModuleLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final AuthModuleTO authModuleTO) {"},{"sha":"48efd31f5f1b0bf8bd95bb41400cfcaffb54385e","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuthProfileServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuthProfileServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n import org.apache.syncope.common.rest.api.service.AuthProfileService;\n import org.apache.syncope.core.logic.AuthProfileLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n import java.util.List;\n@@ -32,10 +31,13 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n @Service\n-public class AuthProfileServiceImpl extends AbstractServiceImpl implements AuthProfileService {\n+public class AuthProfileServiceImpl extends AbstractService implements AuthProfileService {\n \n-    @Autowired\n-    private AuthProfileLogic logic;\n+    protected final AuthProfileLogic logic;\n+\n+    public AuthProfileServiceImpl(final AuthProfileLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public void delete(final String key) {"},{"sha":"da1e1e0e15d919c7d39693e1ae9c6306fbe54f64","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ClientAppServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,14 +26,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.core.logic.ClientAppLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ClientAppServiceImpl extends AbstractServiceImpl implements ClientAppService {\n+public class ClientAppServiceImpl extends AbstractService implements ClientAppService {\n \n-    @Autowired\n-    private ClientAppLogic logic;\n+    protected final ClientAppLogic logic;\n+\n+    public ClientAppServiceImpl(final ClientAppLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final ClientAppType type, final ClientAppTO clientAppTO) {"},{"sha":"a4fcb715e45489e9f3af9df4926dc644f7fe5668","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCJWKSServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,15 +23,17 @@\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.core.logic.OIDCJWKSLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n \n @Service\n-public class OIDCJWKSServiceImpl extends AbstractServiceImpl implements OIDCJWKSService {\n+public class OIDCJWKSServiceImpl extends AbstractService implements OIDCJWKSService {\n \n-    @Autowired\n-    private OIDCJWKSLogic logic;\n+    protected final OIDCJWKSLogic logic;\n+\n+    public OIDCJWKSServiceImpl(final OIDCJWKSLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public OIDCJWKSTO get() {"},{"sha":"8edc01d0a7cc271bce8e06be35de106dd6e6e33d","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPEntityServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPEntityServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPEntityServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPEntityServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,15 +21,17 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.core.logic.SAML2IdPEntityLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.apache.syncope.common.rest.api.service.SAML2IdPEntityService;\n \n @Service\n-public class SAML2IdPEntityServiceImpl extends AbstractServiceImpl implements SAML2IdPEntityService {\n+public class SAML2IdPEntityServiceImpl extends AbstractService implements SAML2IdPEntityService {\n \n-    @Autowired\n-    private SAML2IdPEntityLogic logic;\n+    protected final SAML2IdPEntityLogic logic;\n+\n+    public SAML2IdPEntityServiceImpl(final SAML2IdPEntityLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<SAML2IdPEntityTO> list() {"},{"sha":"53f01aee9cebb3a0199c65d46f7ecb41ebfbb4f9","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPEntityServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPEntityServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPEntityServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPEntityServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,15 +21,17 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.core.logic.SAML2SPEntityLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.apache.syncope.common.rest.api.service.SAML2SPEntityService;\n \n @Service\n-public class SAML2SPEntityServiceImpl extends AbstractServiceImpl implements SAML2SPEntityService {\n+public class SAML2SPEntityServiceImpl extends AbstractService implements SAML2SPEntityService {\n \n-    @Autowired\n-    private SAML2SPEntityLogic logic;\n+    protected final SAML2SPEntityLogic logic;\n+\n+    public SAML2SPEntityServiceImpl(final SAML2SPEntityLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<SAML2SPEntityTO> list() {"},{"sha":"8eb26c3a4cafa2c7cca9dfde34c5c1fb458c92e9","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SRARouteServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSRARouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSRARouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSRARouteServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n import org.apache.syncope.core.logic.SRARouteLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class SRARouteServiceImpl extends AbstractServiceImpl implements SRARouteService {\n+public class SRARouteServiceImpl extends AbstractService implements SRARouteService {\n \n-    @Autowired\n-    private SRARouteLogic logic;\n+    protected final SRARouteLogic logic;\n+\n+    public SRARouteServiceImpl(final SRARouteLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<SRARouteTO> list() {"},{"sha":"2c8d95b981a29e117db338172e006892d61e64d3","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthAccountServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,15 +23,17 @@\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.core.logic.wa.GoogleMfaAuthAccountLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class GoogleMfaAuthAccountServiceImpl extends AbstractServiceImpl implements GoogleMfaAuthAccountService {\n+public class GoogleMfaAuthAccountServiceImpl extends AbstractService implements GoogleMfaAuthAccountService {\n \n-    @Autowired\n-    private GoogleMfaAuthAccountLogic logic;\n+    protected final GoogleMfaAuthAccountLogic logic;\n+\n+    public GoogleMfaAuthAccountServiceImpl(final GoogleMfaAuthAccountLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public void delete(final String owner) {"},{"sha":"b3b328d55a19bbd10fdc0787d26ffc4f733bca77","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,15 +24,17 @@\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.core.logic.wa.GoogleMfaAuthTokenLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class GoogleMfaAuthTokenServiceImpl extends AbstractServiceImpl implements GoogleMfaAuthTokenService {\n+public class GoogleMfaAuthTokenServiceImpl extends AbstractService implements GoogleMfaAuthTokenService {\n \n-    @Autowired\n-    private GoogleMfaAuthTokenLogic logic;\n+    protected final GoogleMfaAuthTokenLogic logic;\n+\n+    public GoogleMfaAuthTokenServiceImpl(final GoogleMfaAuthTokenLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public void delete(final Date expirationDate) {"},{"sha":"94b648e5b76e799b971e2b99b398eb8ffb01fcd9","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/ImpersonationServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,15 +22,17 @@\n import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.core.logic.wa.ImpersonationLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ImpersonationServiceImpl extends AbstractServiceImpl implements ImpersonationService {\n+public class ImpersonationServiceImpl extends AbstractService implements ImpersonationService {\n \n-    @Autowired\n-    private ImpersonationLogic logic;\n+    protected final ImpersonationLogic logic;\n+\n+    public ImpersonationServiceImpl(final ImpersonationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<ImpersonationAccount> read(final String owner) {"},{"sha":"7e836e085b1b84f80d36054a5ce04f495948c86e","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/U2FRegistrationServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FU2FRegistrationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,15 +25,17 @@\n import org.apache.syncope.common.rest.api.beans.U2FDeviceQuery;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n import org.apache.syncope.core.logic.wa.U2FRegistrationLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class U2FRegistrationServiceImpl extends AbstractServiceImpl implements U2FRegistrationService {\n+public class U2FRegistrationServiceImpl extends AbstractService implements U2FRegistrationService {\n \n-    @Autowired\n-    private U2FRegistrationLogic logic;\n+    protected final U2FRegistrationLogic logic;\n+\n+    public U2FRegistrationServiceImpl(final U2FRegistrationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public void delete(final U2FDeviceQuery query) {"},{"sha":"34dc4d869c0f15a9c96285dd78a1c8e282de6eea","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAClientAppServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAClientAppServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,15 +23,17 @@\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.apache.syncope.core.logic.wa.WAClientAppLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class WAClientAppServiceImpl extends AbstractServiceImpl implements WAClientAppService {\n+public class WAClientAppServiceImpl extends AbstractService implements WAClientAppService {\n \n-    @Autowired\n-    private WAClientAppLogic logic;\n+    protected final WAClientAppLogic logic;\n+\n+    public WAClientAppServiceImpl(final WAClientAppLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<WAClientApp> list() {"},{"sha":"89403770288e31315d7af1d702dc9d90ce74c60b","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAConfigServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAConfigServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,16 +21,18 @@\n import java.util.List;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.apache.syncope.core.logic.wa.WAConfigLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n \n @Service\n-public class WAConfigServiceImpl extends AbstractServiceImpl implements WAConfigService {\n+public class WAConfigServiceImpl extends AbstractService implements WAConfigService {\n \n-    @Autowired\n-    private WAConfigLogic logic;\n+    protected final WAConfigLogic logic;\n+\n+    public WAConfigServiceImpl(final WAConfigLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<Attr> list() {"},{"sha":"aa31b0d792836c433974f14d934699125018526a","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WebAuthnRegistrationServiceImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWebAuthnRegistrationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,15 +22,17 @@\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n import org.apache.syncope.core.logic.wa.WebAuthnRegistrationLogic;\n-import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.rest.cxf.service.AbstractService;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class WebAuthnRegistrationServiceImpl extends AbstractServiceImpl implements WebAuthnRegistrationService {\n+public class WebAuthnRegistrationServiceImpl extends AbstractService implements WebAuthnRegistrationService {\n \n-    @Autowired\n-    private WebAuthnRegistrationLogic logic;\n+    protected final WebAuthnRegistrationLogic logic;\n+\n+    public WebAuthnRegistrationServiceImpl(final WebAuthnRegistrationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<WebAuthnAccount> list() {"},{"sha":"190e5316c074eb990fa7dfc56c2f128dec68ec3a","filename":"core/am/rest-cxf/src/main/resources/META-INF/spring.factories","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -15,6 +15,5 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-provisioning.userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n-provisioning.groupProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelGroupProvisioningManager\n-provisioning.anyObjectProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelAnyObjectProvisioningManager\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n+  org.apache.syncope.core.rest.cxf.AMRESTCXFContext","previous_filename":"ext/camel/provisioning-camel/src/main/resources/core-camel.properties"},{"sha":"a4606fbe74111423f35e0f15999683b1a832f411","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":43,"deletions":23,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -52,36 +52,54 @@\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n \n-    @Autowired\n-    private ConnIdBundleManager connIdBundleManager;\n+    protected final ConnIdBundleManager connIdBundleManager;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ConnectorManager connectorManager;\n \n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private ConnInstanceDataBinder binder;\n+    protected final ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private ConnectorFactory connFactory;\n+    protected final ConnInstanceDataBinder binder;\n \n-    protected static void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+    public ConnectorLogic(\n+            final ConnIdBundleManager connIdBundleManager,\n+            final ConnectorManager connectorManager,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConnInstanceDAO connInstanceDAO,\n+            final ConnInstanceDataBinder binder) {\n+\n+        this.connIdBundleManager = connIdBundleManager;\n+        this.connectorManager = connectorManager;\n+        this.resourceDAO = resourceDAO;\n+        this.connInstanceDAO = connInstanceDAO;\n+        this.binder = binder;\n+    }\n+\n+    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ConnInstance.class.getSimpleName(), key);\n         }\n     }\n \n+    protected ConnInstance doSave(final ConnInstance connInstance) {\n+        ConnInstance merged = connInstanceDAO.save(connInstance);\n+        merged.getResources().forEach(resource -> {\n+            try {\n+                connectorManager.registerConnector(resource);\n+            } catch (NotFoundException e) {\n+                LOG.error(\"While registering connector {} for resource {}\", merged, resource, e);\n+            }\n+        });\n+        return merged;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_CREATE + \"')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n         if (connInstanceTO.getAdminRealm() == null) {\n@@ -93,7 +111,7 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n                 connInstanceTO.getAdminRealm());\n         securityChecks(effectiveRealms, connInstanceTO.getAdminRealm(), null);\n \n-        return binder.getConnInstanceTO(connInstanceDAO.save(binder.getConnInstance(connInstanceTO)));\n+        return binder.getConnInstanceTO(doSave(binder.getConnInstance(connInstanceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_UPDATE + \"')\")\n@@ -109,7 +127,7 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n                 connInstanceTO.getAdminRealm());\n         securityChecks(effectiveRealms, connInstanceTO.getAdminRealm(), connInstanceTO.getKey());\n \n-        return binder.getConnInstanceTO(binder.update(connInstanceTO));\n+        return binder.getConnInstanceTO(doSave(binder.update(connInstanceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_DELETE + \"')\")\n@@ -133,6 +151,7 @@ public ConnInstanceTO delete(final String key) {\n \n         ConnInstanceTO deleted = binder.getConnInstanceTO(connInstance);\n         connInstanceDAO.delete(key);\n+        connectorManager.unregisterConnector(key);\n         return deleted;\n     }\n \n@@ -201,8 +220,8 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             actual = binder.getConnInstanceTO(existing);\n         }\n \n-        Set<ObjectClassInfo> objectClassInfo = connFactory.createConnector(\n-                connFactory.buildConnInstanceOverride(actual, connInstanceTO.getConf(), Optional.empty())).\n+        Set<ObjectClassInfo> objectClassInfo = connectorManager.createConnector(\n+                connectorManager.buildConnInstanceOverride(actual, connInstanceTO.getConf(), Optional.empty())).\n                 getObjectClassInfo();\n \n         return objectClassInfo.stream().map(info -> {\n@@ -234,7 +253,7 @@ public void check(final ConnInstanceTO connInstanceTO) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n \n-        connFactory.createConnector(binder.getConnInstance(connInstanceTO)).test();\n+        connectorManager.createConnector(binder.getConnInstance(connInstanceTO)).test();\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_READ + \"')\")\n@@ -246,16 +265,17 @@ public ConnInstanceTO readByResource(final String resourceName, final String lan\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + '\\'');\n         }\n-        ConnInstanceTO connInstance = binder.getConnInstanceTO(connFactory.getConnector(resource).getConnInstance());\n+        ConnInstanceTO connInstance = binder.\n+                getConnInstanceTO(connectorManager.getConnector(resource).getConnInstance());\n         connInstance.setKey(resource.getConnector().getKey());\n         return connInstance;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.CONNECTOR_RELOAD + \"')\")\n     @Transactional(readOnly = true)\n     public void reload() {\n-        connFactory.unload();\n-        connFactory.load();\n+        connectorManager.unload();\n+        connectorManager.load();\n     }\n \n     @Override"},{"sha":"b29e181ece2f19a333b81d859504a61f5a198565","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/IdMLogicContext.java","status":"added","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.core.logic.init.IdMEntitlementLoader;\n+import org.apache.syncope.core.logic.init.IdMImplementationTypeLoader;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class IdMLogicContext {\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private VirAttrHandler virAttrHandler;\n+\n+    @Autowired\n+    private ConnInstanceDataBinder connInstanceDataBinder;\n+\n+    @Autowired\n+    private ConnectorManager connectorManager;\n+\n+    @Autowired\n+    private InboundMatcher inboundMatcher;\n+\n+    @Autowired\n+    private OutboundMatcher outboundMatcher;\n+\n+    @Autowired\n+    private MappingManager mappingManager;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public IdMEntitlementLoader idmEntitlementLoader() {\n+        return new IdMEntitlementLoader();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public IdMImplementationTypeLoader idmImplementationTypeLoader() {\n+        return new IdMImplementationTypeLoader();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ConnectorLogic connectorLogic(final ConnIdBundleManager connIdBundleManager) {\n+        return new ConnectorLogic(\n+                connIdBundleManager,\n+                connectorManager,\n+                resourceDAO,\n+                connInstanceDAO,\n+                connInstanceDataBinder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReconciliationLogic reconciliationLogic(\n+            final RealmDAO realmDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final AnySearchDAO anySearchDAO) {\n+\n+        return new ReconciliationLogic(\n+                anyUtilsFactory,\n+                anyTypeDAO,\n+                resourceDAO,\n+                realmDAO,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                virSchemaDAO,\n+                anySearchDAO,\n+                virAttrHandler,\n+                mappingManager,\n+                inboundMatcher,\n+                outboundMatcher,\n+                connectorManager);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RemediationLogic remediationLogic(\n+            final UserLogic userLogic,\n+            final GroupLogic groupLogic,\n+            final AnyObjectLogic anyObjectLogic,\n+            final RemediationDataBinder binder,\n+            final RemediationDAO remediationDAO) {\n+\n+        return new RemediationLogic(userLogic, groupLogic, anyObjectLogic, binder, remediationDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ResourceLogic resourceLogic(final ResourceDataBinder resourceDataBinder) {\n+        return new ResourceLogic(\n+                resourceDAO,\n+                anyTypeDAO,\n+                connInstanceDAO,\n+                virSchemaDAO,\n+                virAttrHandler,\n+                resourceDataBinder,\n+                connInstanceDataBinder,\n+                outboundMatcher,\n+                mappingManager,\n+                connectorManager,\n+                anyUtilsFactory);\n+    }\n+}"},{"sha":"8fe2fe4cec752ca0db2e1bc75f6ecdad87a7aeef","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":68,"deletions":51,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -53,7 +53,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n@@ -70,6 +69,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.pushpull.ConstantReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.pushpull.KeyValueReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n@@ -100,55 +100,69 @@\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.quartz.JobExecutionException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ReconciliationLogic extends AbstractTransactionalLogic<EntityTO> {\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO anySearchDAO;\n \n-    @Autowired\n-    private VirAttrHandler virAttrHandler;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    private MappingManager mappingManager;\n+    protected final MappingManager mappingManager;\n \n-    @Autowired\n-    private InboundMatcher inboundMatcher;\n+    protected final InboundMatcher inboundMatcher;\n \n-    @Autowired\n-    private OutboundMatcher outboundMatcher;\n+    protected final OutboundMatcher outboundMatcher;\n \n-    @Autowired\n-    private ConnectorFactory connFactory;\n+    protected final ConnectorManager connectorManager;\n \n-    private Provision getProvision(final String anyTypeKey, final String resourceKey) {\n+    public ReconciliationLogic(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RealmDAO realmDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final InboundMatcher inboundMatcher,\n+            final OutboundMatcher outboundMatcher,\n+            final ConnectorManager connectorManager) {\n+\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.realmDAO = realmDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.anySearchDAO = anySearchDAO;\n+        this.virAttrHandler = virAttrHandler;\n+        this.mappingManager = mappingManager;\n+        this.inboundMatcher = inboundMatcher;\n+        this.outboundMatcher = outboundMatcher;\n+        this.connectorManager = connectorManager;\n+    }\n+\n+    protected Provision getProvision(final String anyTypeKey, final String resourceKey) {\n         AnyType anyType = anyTypeDAO.find(anyTypeKey);\n         if (anyType == null) {\n             throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n@@ -168,7 +182,7 @@ private Provision getProvision(final String anyTypeKey, final String resourceKey\n         return provision;\n     }\n \n-    private ConnObjectTO getOnSyncope(\n+    protected ConnObjectTO getOnSyncope(\n             final MappingItem connObjectKeyItem,\n             final String connObjectKeyValue,\n             final Set<Attribute> attrs) {\n@@ -182,7 +196,7 @@ private ConnObjectTO getOnSyncope(\n         return connObjectTO;\n     }\n \n-    private ConnObjectTO getOnSyncope(\n+    protected ConnObjectTO getOnSyncope(\n             final Any<?> any,\n             final MappingItem connObjectKeyItem,\n             final Provision provision) {\n@@ -192,7 +206,7 @@ private ConnObjectTO getOnSyncope(\n         return getOnSyncope(connObjectKeyItem, prepared.getLeft(), prepared.getRight());\n     }\n \n-    private ConnObjectTO getOnSyncope(\n+    protected ConnObjectTO getOnSyncope(\n             final LinkedAccount account,\n             final MappingItem connObjectKeyItem,\n             final Provision provision) {\n@@ -202,7 +216,7 @@ private ConnObjectTO getOnSyncope(\n         return getOnSyncope(connObjectKeyItem, account.getConnObjectKeyValue(), attrs);\n     }\n \n-    private Any<?> getAny(final Provision provision, final String anyKey) {\n+    protected Any<?> getAny(final Provision provision, final String anyKey) {\n         AnyDAO<Any<?>> dao = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).dao();\n         Any<?> any = SyncopeConstants.UUID_PATTERN.matcher(anyKey).matches()\n                 ? dao.authFind(anyKey)\n@@ -236,7 +250,7 @@ public ReconStatus status(\n         status.setRealm(any.getRealm().getFullPath());\n         status.setOnSyncope(getOnSyncope(any, connObjectKeyItem, provision));\n \n-        List<ConnectorObject> connObjs = outboundMatcher.match(connFactory.getConnector(\n+        List<ConnectorObject> connObjs = outboundMatcher.match(connectorManager.getConnector(\n                 provision.getResource()), any, provision, Optional.of(moreAttrsToGet.toArray(new String[] {})));\n         if (!connObjs.isEmpty()) {\n             status.setOnResource(ConnObjectUtils.getConnObjectTO(\n@@ -252,7 +266,7 @@ public ReconStatus status(\n         return status;\n     }\n \n-    private SyncDeltaBuilder syncDeltaBuilder(\n+    protected SyncDeltaBuilder syncDeltaBuilder(\n             final Provision provision,\n             final Filter filter,\n             final Set<String> moreAttrsToGet) {\n@@ -266,7 +280,7 @@ private SyncDeltaBuilder syncDeltaBuilder(\n                 setToken(new SyncToken(\"\")).\n                 setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n                 setObjectClass(provision.getObjectClass());\n-        connFactory.getConnector(provision.getResource()).\n+        connectorManager.getConnector(provision.getResource()).\n                 search(provision.getObjectClass(), filter, new SearchResultsHandler() {\n \n                     @Override\n@@ -330,7 +344,7 @@ public ReconStatus status(\n         return status;\n     }\n \n-    private SyncopeSinglePushExecutor singlePushExecutor() {\n+    protected SyncopeSinglePushExecutor singlePushExecutor() {\n         return (SyncopeSinglePushExecutor) ApplicationContextProvider.getBeanFactory().\n                 createBean(SinglePushJobDelegate.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n@@ -349,9 +363,10 @@ public List<ProvisioningReport> push(\n         try {\n             results.addAll(singlePushExecutor().push(\n                     provision,\n-                    connFactory.getConnector(provision.getResource()),\n+                    connectorManager.getConnector(provision.getResource()),\n                     getAny(provision, anyKey),\n-                    pushTask));\n+                    pushTask,\n+                    AuthContextUtils.getUsername()));\n             if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n                 sce.getElements().add(results.get(0).getMessage());\n             }\n@@ -387,18 +402,20 @@ public List<ProvisioningReport> push(\n                     if (match.getMatchTarget() == MatchType.ANY) {\n                         results.addAll(singlePushExecutor().push(\n                                 provision,\n-                                connFactory.getConnector(provision.getResource()),\n+                                connectorManager.getConnector(provision.getResource()),\n                                 match.getAny(),\n-                                pushTask));\n+                                pushTask,\n+                                AuthContextUtils.getUsername()));\n                         if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n                             sce.getElements().add(results.get(0).getMessage());\n                         }\n                     } else {\n                         ProvisioningReport result = singlePushExecutor().push(\n                                 provision,\n-                                connFactory.getConnector(provision.getResource()),\n+                                connectorManager.getConnector(provision.getResource()),\n                                 match.getLinkedAccount(),\n-                                pushTask);\n+                                pushTask,\n+                                AuthContextUtils.getUsername());\n                         if (result.getStatus() == ProvisioningReport.Status.FAILURE) {\n                             sce.getElements().add(result.getMessage());\n                         } else {\n@@ -418,7 +435,7 @@ public List<ProvisioningReport> push(\n         return results;\n     }\n \n-    private List<ProvisioningReport> pull(\n+    protected List<ProvisioningReport> pull(\n             final Provision provision,\n             final ReconFilterBuilder reconFilterBuilder,\n             final Set<String> moreAttrsToGet,\n@@ -437,7 +454,7 @@ private List<ProvisioningReport> pull(\n \n             results.addAll(executor.pull(\n                     provision,\n-                    connFactory.getConnector(provision.getResource()),\n+                    connectorManager.getConnector(provision.getResource()),\n                     reconFilterBuilder,\n                     moreAttrsToGet,\n                     pullTask));\n@@ -504,7 +521,7 @@ public List<ProvisioningReport> pull(\n                 pullTask);\n     }\n \n-    private CsvSchema.Builder csvSchema(final AbstractCSVSpec spec) {\n+    protected CsvSchema.Builder csvSchema(final AbstractCSVSpec spec) {\n         CsvSchema.Builder schemaBuilder = new CsvSchema.Builder().setUseHeader(true).\n                 setColumnSeparator(spec.getColumnSeparator()).\n                 setArrayElementSeparator(spec.getArrayElementSeparator()).\n@@ -557,15 +574,15 @@ public List<ProvisioningReport> push(\n         if (spec.getIgnorePaging()) {\n             matching = new ArrayList<>();\n \n-            int count = searchDAO.count(adminRealms, effectiveCond, anyType.getKind());\n+            int count = anySearchDAO.count(adminRealms, effectiveCond, anyType.getKind());\n             int pages = (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n             for (int p = 1; p <= pages; p++) {\n-                matching.addAll(searchDAO.search(adminRealms, effectiveCond,\n+                matching.addAll(anySearchDAO.search(adminRealms, effectiveCond,\n                         p, AnyDAO.DEFAULT_PAGE_SIZE, orderBy, anyType.getKind()));\n             }\n         } else {\n-            matching = searchDAO.search(adminRealms, effectiveCond, page, size, orderBy, anyType.getKind());\n+            matching = anySearchDAO.search(adminRealms, effectiveCond, page, size, orderBy, anyType.getKind());\n         }\n \n         List<String> columns = new ArrayList<>();"},{"sha":"274a90e67007a31b1b2009eee2357a337e2a6cfc","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -41,28 +41,34 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class RemediationLogic extends AbstractLogic<RemediationTO> {\n \n-    @Autowired\n-    private UserLogic userLogic;\n+    protected final UserLogic userLogic;\n \n-    @Autowired\n-    private GroupLogic groupLogic;\n+    protected final GroupLogic groupLogic;\n \n-    @Autowired\n-    private AnyObjectLogic anyObjectLogic;\n+    protected final AnyObjectLogic anyObjectLogic;\n \n-    @Autowired\n-    private RemediationDataBinder binder;\n+    protected final RemediationDataBinder binder;\n \n-    @Autowired\n-    private RemediationDAO remediationDAO;\n+    protected final RemediationDAO remediationDAO;\n+\n+    public RemediationLogic(\n+            final UserLogic userLogic,\n+            final GroupLogic groupLogic,\n+            final AnyObjectLogic anyObjectLogic,\n+            final RemediationDataBinder binder,\n+            final RemediationDAO remediationDAO) {\n+\n+        this.userLogic = userLogic;\n+        this.groupLogic = groupLogic;\n+        this.anyObjectLogic = anyObjectLogic;\n+        this.binder = binder;\n+        this.remediationDAO = remediationDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.REMEDIATION_LIST + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"6f7dcb09c0a51ec98a3cd19634adef914f23d56a","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":60,"deletions":38,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,7 +40,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -53,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n@@ -67,54 +67,76 @@\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n+    protected final ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private VirAttrHandler virAttrHandler;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    private ResourceDataBinder binder;\n+    protected final ResourceDataBinder binder;\n \n-    @Autowired\n-    private ConnInstanceDataBinder connInstanceDataBinder;\n+    protected final ConnInstanceDataBinder connInstanceDataBinder;\n \n-    @Autowired\n-    private OutboundMatcher outboundMatcher;\n+    protected final OutboundMatcher outboundMatcher;\n \n-    @Autowired\n-    private MappingManager mappingManager;\n+    protected final MappingManager mappingManager;\n \n-    @Autowired\n-    private ConnectorFactory connFactory;\n+    protected final ConnectorManager connectorManager;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    protected static void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+    public ResourceLogic(\n+            final ExternalResourceDAO resourceDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ConnInstanceDAO connInstanceDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final VirAttrHandler virAttrHandler,\n+            final ResourceDataBinder binder,\n+            final ConnInstanceDataBinder connInstanceDataBinder,\n+            final OutboundMatcher outboundMatcher,\n+            final MappingManager mappingManager,\n+            final ConnectorManager connectorManager,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.resourceDAO = resourceDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.connInstanceDAO = connInstanceDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.virAttrHandler = virAttrHandler;\n+        this.binder = binder;\n+        this.connInstanceDataBinder = connInstanceDataBinder;\n+        this.outboundMatcher = outboundMatcher;\n+        this.mappingManager = mappingManager;\n+        this.connectorManager = connectorManager;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n+\n+    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ExternalResource.class.getSimpleName(), key);\n         }\n     }\n \n+    protected ExternalResource doSave(final ExternalResource resource) {\n+        ExternalResource merged = resourceDAO.save(resource);\n+        try {\n+            connectorManager.registerConnector(merged);\n+        } catch (NotFoundException e) {\n+            LOG.error(\"While registering connector for resource\", e);\n+        }\n+        return merged;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n         if (StringUtils.isBlank(resourceTO.getKey())) {\n@@ -139,7 +161,7 @@ public ResourceTO create(final ResourceTO resourceTO) {\n             throw new DuplicateException(resourceTO.getKey());\n         }\n \n-        return binder.getResourceTO(resourceDAO.save(binder.create(resourceTO)));\n+        return binder.getResourceTO(doSave(binder.create(resourceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n@@ -154,7 +176,7 @@ public ResourceTO update(final ResourceTO resourceTO) {\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n-        return binder.getResourceTO(resourceDAO.save(binder.update(resource, resourceTO)));\n+        return binder.getResourceTO(doSave(binder.update(resource, resourceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n@@ -166,7 +188,7 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n \n         Connector connector;\n         try {\n-            connector = connFactory.getConnector(resource);\n+            connector = connectorManager.getConnector(resource);\n         } catch (Exception e) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n             sce.getElements().add(e.getMessage());\n@@ -197,7 +219,7 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n-        resourceDAO.save(resource);\n+        doSave(resource);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_UPDATE + \"')\")\n@@ -230,7 +252,7 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n                 resource.getConnector().getAdminRealm().getFullPath());\n         securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n \n-        resourceDAO.save(resource);\n+        doSave(resource);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdMEntitlement.RESOURCE_DELETE + \"')\")\n@@ -269,7 +291,7 @@ public List<ResourceTO> list() {\n         return resourceDAO.findAll().stream().map(binder::getResourceTO).collect(Collectors.toList());\n     }\n \n-    private Provision getProvision(final String resourceKey, final String anyTypeKey) {\n+    protected Provision getProvision(final String resourceKey, final String anyTypeKey) {\n         ExternalResource resource = resourceDAO.find(resourceKey);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + '\\'');\n@@ -323,7 +345,7 @@ public ConnObjectTO readConnObjectByAnyKey(\n \n         // 2. find on resource\n         List<ConnectorObject> connObjs = outboundMatcher.match(\n-                connFactory.getConnector(provision.getResource()), any, provision, Optional.empty());\n+                connectorManager.getConnector(provision.getResource()), any, provision, Optional.empty());\n         if (connObjs.isEmpty()) {\n             throw new NotFoundException(\n                     \"Object \" + any + \" with class \" + provision.getObjectClass()\n@@ -355,7 +377,7 @@ public ConnObjectTO readConnObjectByConnObjectKeyValue(\n                 + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n \n         return outboundMatcher.matchByConnObjectKeyValue(\n-                connFactory.getConnector(provision.getResource()),\n+                connectorManager.getConnector(provision.getResource()),\n                 connObjectKeyItem,\n                 connObjectKeyValue,\n                 provision,\n@@ -408,7 +430,7 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n         }\n \n         List<ConnObjectTO> connObjects = new ArrayList<>();\n-        SearchResult searchResult = connFactory.getConnector(resource).\n+        SearchResult searchResult = connectorManager.getConnector(resource).\n                 search(objectClass, filter, new SearchResultsHandler() {\n \n                     private int count;\n@@ -440,8 +462,8 @@ public void check(final ResourceTO resourceTO) {\n             throw new NotFoundException(\"Connector '\" + resourceTO.getConnector() + '\\'');\n         }\n \n-        connFactory.createConnector(\n-                connFactory.buildConnInstanceOverride(\n+        connectorManager.createConnector(\n+                connectorManager.buildConnInstanceOverride(\n                         connInstanceDataBinder.getConnInstanceTO(connInstance),\n                         resourceTO.getConfOverride(),\n                         resourceTO.isOverrideCapabilities()"},{"sha":"e483977588e2f4bb9df0c538ae4198cf77a45cc2","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/init/IdMEntitlementLoader.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMEntitlementLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,9 +21,7 @@\n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class IdMEntitlementLoader implements SyncopeCoreLoader {\n \n     @Override"},{"sha":"db35452633c3d294f8402ef1e23e0f867973b40f","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/init/IdMImplementationTypeLoader.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,9 +22,7 @@\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.springframework.core.Ordered;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class IdMImplementationTypeLoader implements SyncopeCoreLoader {\n \n     @Override"},{"sha":"44f2c441fe1d3a07d57f1985b14af3d73b8e87e1","filename":"core/idm/logic/src/main/resources/META-INF/spring.factories","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n+  org.apache.syncope.core.logic.IdMLogicContext"},{"sha":"7ebb0b17402a3260ea8af173ba610b8d44a22b72","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyConfParamOps.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,9 +20,7 @@\n \n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyConfParamOps implements ConfParamOps {\n \n     @Override"},{"sha":"840c11edb85757b547b7f489b1b9dd3a260210e5","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyDomainOps.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,14 +23,14 @@\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.DomainRegistry;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyDomainOps implements DomainOps {\n \n-    @Autowired\n-    private DomainRegistry domainRegistry;\n+    private final DomainRegistry domainRegistry;\n+\n+    public DummyDomainOps(final DomainRegistry domainRegistry) {\n+        this.domainRegistry = domainRegistry;\n+    }\n \n     @Override\n     public List<Domain> list() {"},{"sha":"efdedf03b997c481297c23525177ebb0e38ec8b5","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyServiceOps.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,9 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyServiceOps implements ServiceOps {\n \n     @Override"},{"sha":"92b98d9ca5a30d73b9a6600a32f7825745b74582","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/IdMLogicTestContext.java","status":"modified","additions":39,"deletions":5,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -18,27 +18,61 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.jpa.MasterDomain;\n import org.apache.syncope.core.persistence.jpa.PersistenceContext;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n import org.apache.syncope.core.provisioning.java.ProvisioningContext;\n import org.apache.syncope.core.spring.security.SecurityContext;\n import org.apache.syncope.core.workflow.java.WorkflowContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Primary;\n import org.springframework.context.annotation.PropertySource;\n \n @PropertySource(\"classpath:core-test.properties\")\n-@Import({ SecurityContext.class, PersistenceContext.class, ProvisioningContext.class, WorkflowContext.class })\n-@ComponentScan(\"org.apache.syncope.core.logic\")\n+@Import({ IdRepoLogicContext.class, IdMLogicContext.class, SecurityContext.class,\n+    PersistenceContext.class, MasterDomain.class, ProvisioningContext.class, WorkflowContext.class })\n @Configuration\n public class IdMLogicTestContext {\n \n-    @Primary\n+    @Bean\n+    @Autowired\n+    public TestInitializer testInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n+    }\n+\n     @Bean\n     public ImplementationLookup implementationLookup() {\n         return new DummyImplementationLookup();\n     }\n+\n+    @Bean\n+    public ConfParamOps confParamOps() {\n+        return new DummyConfParamOps();\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public DomainOps domainOps(final DomainRegistry domainRegistry) {\n+        return new DummyDomainOps(domainRegistry);\n+    }\n+\n+    @Bean\n+    public ServiceOps serviceOps() {\n+        return new DummyServiceOps();\n+    }\n }"},{"sha":"05ad8941d2458e9a7b6f9dadc57a97b76c24af36","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/TestInitializer.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,33 +23,31 @@\n import org.apache.syncope.core.persistence.api.content.ContentLoader;\n import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.support.TransactionSynchronizationManager;\n \n-@Component\n-public class TestInitializer implements InitializingBean, ApplicationContextAware {\n+public class TestInitializer implements InitializingBean {\n \n-    private ConfigurableApplicationContext ctx;\n+    private final StartupDomainLoader domainLoader;\n \n-    @Autowired\n-    private StartupDomainLoader domainLoader;\n+    private final DomainHolder domainHolder;\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    private final ContentLoader contentLoader;\n \n-    @Autowired\n-    private ContentLoader contentLoader;\n+    private final ConfigurableApplicationContext ctx;\n \n-    @Override\n-    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n-        this.ctx = (ConfigurableApplicationContext) ctx;\n+    public TestInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        this.domainLoader = domainLoader;\n+        this.domainHolder = domainHolder;\n+        this.contentLoader = contentLoader;\n+        this.ctx = ctx;\n     }\n \n     @Override"},{"sha":"3a0ce14139ff436f23fb3120cf1867370b110332","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdMRESTCXFContext.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdMRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdMRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdMRESTCXFContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import org.apache.syncope.common.rest.api.service.ConnectorService;\n+import org.apache.syncope.common.rest.api.service.ReconciliationService;\n+import org.apache.syncope.common.rest.api.service.RemediationService;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+import org.apache.syncope.core.logic.ConnectorLogic;\n+import org.apache.syncope.core.logic.ReconciliationLogic;\n+import org.apache.syncope.core.logic.RemediationLogic;\n+import org.apache.syncope.core.logic.ResourceLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.rest.cxf.service.ConnectorServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ReconciliationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.RemediationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ResourceServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class IdMRESTCXFContext {\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ConnectorService connectorService(final ConnectorLogic connectorLogic) {\n+        return new ConnectorServiceImpl(connectorLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReconciliationService reconciliationService(\n+            final SearchCondVisitor searchCondVisitor,\n+            final ReconciliationLogic reconciliationLogic) {\n+\n+        return new ReconciliationServiceImpl(searchCondVisitor, reconciliationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RemediationService remediationService(\n+            final RemediationLogic remediationLogic,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n+        return new RemediationServiceImpl(remediationLogic, userDAO, groupDAO, anyObjectDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ResourceService resourceService(final ResourceLogic resourceLogic) {\n+        return new ResourceServiceImpl(resourceLogic);\n+    }\n+}"},{"sha":"b9f092d3276da1f0909451e31ef16daab0b46431","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,14 +27,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.core.logic.ConnectorLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ConnectorServiceImpl extends AbstractServiceImpl implements ConnectorService {\n+public class ConnectorServiceImpl extends AbstractService implements ConnectorService {\n \n-    @Autowired\n-    private ConnectorLogic logic;\n+    protected final ConnectorLogic logic;\n+\n+    public ConnectorServiceImpl(final ConnectorLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final ConnInstanceTO connInstanceTO) {"},{"sha":"5b4061061fef8ad77bb4a1b3e5c2ad982129ac55","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReconciliationServiceImpl.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,16 +48,20 @@\n import org.apache.syncope.core.logic.ReconciliationLogic;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.search.FilterVisitor;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ReconciliationServiceImpl extends AbstractServiceImpl implements ReconciliationService {\n+public class ReconciliationServiceImpl extends AbstractSearchService implements ReconciliationService {\n \n-    @Autowired\n-    private ReconciliationLogic logic;\n+    protected final ReconciliationLogic logic;\n+\n+    public ReconciliationServiceImpl(final SearchCondVisitor searchCondVisitor, final ReconciliationLogic logic) {\n+        super(searchCondVisitor);\n+        this.logic = logic;\n+    }\n \n     private void validate(final ReconQuery reconQuery) {\n         if ((reconQuery.getAnyKey() == null && reconQuery.getFiql() == null)"},{"sha":"f60eaec35988250c4756dfed0bf67a36bb84b57f","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,23 +35,30 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class RemediationServiceImpl extends AbstractServiceImpl implements RemediationService {\n+public class RemediationServiceImpl extends AbstractService implements RemediationService {\n \n-    @Autowired\n-    private RemediationLogic logic;\n+    protected final RemediationLogic logic;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n+\n+    public RemediationServiceImpl(\n+            final RemediationLogic logic,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n+        this.logic = logic;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+    }\n \n     @Override\n     public PagedResult<RemediationTO> list(final RemediationQuery query) {"},{"sha":"1acbf883271d8672556eaf4b2eaa8ab2752b8d0b","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -44,14 +44,16 @@\n import org.apache.syncope.core.persistence.api.search.FilterVisitor;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ResourceServiceImpl extends AbstractServiceImpl implements ResourceService {\n+public class ResourceServiceImpl extends AbstractService implements ResourceService {\n \n-    @Autowired\n-    private ResourceLogic logic;\n+    protected final ResourceLogic logic;\n+\n+    public ResourceServiceImpl(final ResourceLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final ResourceTO resourceTO) {"},{"sha":"a25165f2ef28347e05da3a6d2d204786ae1c95af","filename":"core/idm/rest-cxf/src/main/resources/META-INF/spring.factories","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n+  org.apache.syncope.core.rest.cxf.IdMRESTCXFContext"},{"sha":"47b393ec8261d67546d12ded202d24cf1fc72faf","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,23 +40,29 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.spring.ImplementationManager;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n public abstract class AbstractAnyLogic<TO extends AnyTO, C extends AnyCR, U extends AnyUR>\n         extends AbstractResourceAssociator<TO> {\n \n     protected static final String REST_CONTEXT = \"REST\";\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private TemplateUtils templateUtils;\n+    protected final TemplateUtils templateUtils;\n \n-    private static List<LogicActions> getActions(final Realm realm) {\n+    public AbstractAnyLogic(\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final TemplateUtils templateUtils) {\n+\n+        this.realmDAO = realmDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.templateUtils = templateUtils;\n+    }\n+\n+    protected List<LogicActions> getActions(final Realm realm) {\n         List<LogicActions> actions = new ArrayList<>();\n \n         realm.getActions().forEach(impl -> {"},{"sha":"36f76ba30c889be48d36d24e833d3d03082d9144","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,9 +27,15 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n public abstract class AbstractExecutableLogic<T extends EntityTO> extends AbstractJobLogic<T> {\n \n+    public AbstractExecutableLogic(final JobManager jobManager, final SchedulerFactoryBean scheduler) {\n+        super(jobManager, scheduler);\n+    }\n+\n     public abstract ExecTO execute(String key, Date startAt, boolean dryRun);\n \n     public abstract Pair<Integer, List<ExecTO>> listExecutions("},{"sha":"2adb824e08afdb70f0c5e6dd6e5b9880b3618c17","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,16 +39,18 @@\n import org.quartz.Trigger;\n import org.quartz.impl.matchers.GroupMatcher;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n abstract class AbstractJobLogic<T extends EntityTO> extends AbstractTransactionalLogic<T> {\n \n-    @Autowired\n-    protected JobManager jobManager;\n+    protected final JobManager jobManager;\n \n-    @Autowired\n-    protected SchedulerFactoryBean scheduler;\n+    protected final SchedulerFactoryBean scheduler;\n+\n+    protected AbstractJobLogic(final JobManager jobManager, final SchedulerFactoryBean scheduler) {\n+        this.jobManager = jobManager;\n+        this.scheduler = scheduler;\n+    }\n \n     protected abstract Triple<JobType, String, String> getReference(JobKey jobKey);\n "},{"sha":"5b978e27293d8612aaeca9dffc68f32a00fcf255","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":18,"deletions":14,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -38,25 +38,13 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO> {\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n-\n-    @Autowired\n-    private AccessTokenDataBinder binder;\n-\n-    @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n-\n-    private static byte[] getAuthorities() {\n+    protected static byte[] getAuthorities() {\n         byte[] authorities = null;\n         try {\n             authorities = ENCRYPTOR.encode(POJOHelper.serialize(\n@@ -69,6 +57,22 @@ private static byte[] getAuthorities() {\n         return authorities;\n     }\n \n+    protected final SecurityProperties securityProperties;\n+\n+    protected final AccessTokenDataBinder binder;\n+\n+    protected final AccessTokenDAO accessTokenDAO;\n+\n+    public AccessTokenLogic(\n+            final SecurityProperties securityProperties,\n+            final AccessTokenDataBinder binder,\n+            final AccessTokenDAO accessTokenDAO) {\n+\n+        this.securityProperties = securityProperties;\n+        this.binder = binder;\n+        this.accessTokenDAO = accessTokenDAO;\n+    }\n+\n     @PreAuthorize(\"isAuthenticated()\")\n     public Pair<String, Date> login() {\n         if (securityProperties.getAnonymousUser().equals(AuthContextUtils.getUsername())) {"},{"sha":"54b40a1e2cff5363aaff89b27d57956abde4c583","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -41,6 +41,8 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -49,29 +51,40 @@\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n  * Spring's Transactional logic at class level.\n  */\n-@Component\n public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectCR, AnyObjectUR> {\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    protected AnySearchDAO searchDAO;\n+    protected final AnySearchDAO searchDAO;\n \n-    @Autowired\n-    protected AnyObjectDataBinder binder;\n+    protected final AnyObjectDataBinder binder;\n \n-    @Autowired\n-    protected AnyObjectProvisioningManager provisioningManager;\n+    protected final AnyObjectProvisioningManager provisioningManager;\n+\n+    public AnyObjectLogic(\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final TemplateUtils templateUtils,\n+            final AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO searchDAO,\n+            final AnyObjectDataBinder binder,\n+            final AnyObjectProvisioningManager provisioningManager) {\n+\n+        super(realmDAO, anyTypeDAO, templateUtils);\n+\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.searchDAO = searchDAO;\n+        this.binder = binder;\n+        this.provisioningManager = provisioningManager;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"6cd59ca1359e5a42509c09a60767c464568851ff","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,19 +32,19 @@\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO> {\n \n-    @Autowired\n-    private AnyTypeClassDataBinder binder;\n+    protected final AnyTypeClassDataBinder binder;\n \n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n+\n+    public AnyTypeClassLogic(final AnyTypeClassDataBinder binder, final AnyTypeClassDAO anyTypeClassDAO) {\n+        this.binder = binder;\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPECLASS_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"c414ce9cf631a8111518454f8b8038ee0bed2025","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,23 +33,27 @@\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.InvalidDataAccessApiUsageException;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {\n \n-    @Autowired\n-    private AnyTypeDataBinder binder;\n+    protected final AnyTypeDataBinder binder;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n+\n+    public AnyTypeLogic(\n+            final AnyTypeDataBinder binder,\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n+        this.binder = binder;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"1c6ef4a52a1bf373aca6410d5d85c64b03a0977a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ApplicationLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,19 +30,19 @@\n import org.apache.syncope.core.persistence.api.entity.Application;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ApplicationLogic extends AbstractTransactionalLogic<ApplicationTO> {\n \n-    @Autowired\n-    private ApplicationDataBinder binder;\n+    protected final ApplicationDataBinder binder;\n \n-    @Autowired\n-    private ApplicationDAO applicationDAO;\n+    protected final ApplicationDAO applicationDAO;\n+\n+    public ApplicationLogic(final ApplicationDataBinder binder, final ApplicationDAO applicationDAO) {\n+        this.binder = binder;\n+        this.applicationDAO = applicationDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.APPLICATION_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"8f06029da62e39b9a7c350b28e0ed1ceb6924694","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"modified","additions":46,"deletions":30,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -54,53 +54,62 @@\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.core.type.classreading.MetadataReader;\n import org.springframework.core.type.classreading.MetadataReaderFactory;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.SystemPropertyUtils;\n import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n import org.apache.syncope.core.persistence.api.entity.AuditConf;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n-@Component\n public class AuditLogic extends AbstractTransactionalLogic<AuditConfTO> {\n \n-    @Autowired\n-    private AuditLoader auditLoader;\n+    protected static final List<EventCategory> EVENTS = new ArrayList<>();\n \n-    @Autowired\n-    private AuditConfDAO auditDAO;\n+    protected final AuditLoader auditLoader;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final AuditConfDAO auditConfDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private AuditDataBinder binder;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private AuditManager auditManager;\n+    protected final AuditDataBinder binder;\n+\n+    protected final AuditManager auditManager;\n+\n+    public AuditLogic(\n+            final AuditLoader auditLoader,\n+            final AuditConfDAO auditConfDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final EntityFactory entityFactory,\n+            final AuditDataBinder binder,\n+            final AuditManager auditManager) {\n+\n+        this.auditLoader = auditLoader;\n+        this.auditConfDAO = auditConfDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.entityFactory = entityFactory;\n+        this.binder = binder;\n+        this.auditManager = auditManager;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuditConfTO> list() {\n-        return auditDAO.findAll().stream().map(binder::getAuditTO).collect(Collectors.toList());\n+        return auditConfDAO.findAll().stream().map(binder::getAuditTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_READ + \"')\")\n     @Transactional(readOnly = true)\n     public AuditConfTO read(final String key) {\n-        return Optional.ofNullable(auditDAO.find(key)).map(binder::getAuditTO).\n+        return Optional.ofNullable(auditConfDAO.find(key)).map(binder::getAuditTO).\n                 orElseThrow(() -> new NotFoundException(\"Audit \" + key));\n     }\n \n@@ -109,7 +118,7 @@ public void create(final AuditConfTO auditTO) {\n         AuditConf audit = entityFactory.newEntity(AuditConf.class);\n         audit.setKey(auditTO.getKey());\n         audit.setActive(auditTO.isActive());\n-        audit = auditDAO.save(audit);\n+        audit = auditConfDAO.save(audit);\n \n         if (audit.isActive()) {\n             setLevel(audit.getKey(), Level.DEBUG);\n@@ -118,10 +127,10 @@ public void create(final AuditConfTO auditTO) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_UPDATE + \"')\")\n     public void update(final AuditConfTO auditTO) {\n-        AuditConf audit = Optional.ofNullable(auditDAO.find(auditTO.getKey())).\n+        AuditConf audit = Optional.ofNullable(auditConfDAO.find(auditTO.getKey())).\n                 orElseThrow(() -> new NotFoundException(\"Audit \" + auditTO.getKey()));\n         audit.setActive(auditTO.isActive());\n-        audit = auditDAO.save(audit);\n+        audit = auditConfDAO.save(audit);\n \n         if (audit.isActive()) {\n             setLevel(audit.getKey(), Level.OFF);\n@@ -130,14 +139,14 @@ public void update(final AuditConfTO auditTO) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_DELETE + \"')\")\n     public void delete(final String key) {\n-        AuditConf audit = Optional.ofNullable(auditDAO.find(key)).\n+        AuditConf audit = Optional.ofNullable(auditConfDAO.find(key)).\n                 orElseThrow(() -> new NotFoundException(\"Audit \" + key));\n-        auditDAO.delete(audit);\n+        auditConfDAO.delete(audit);\n \n         setLevel(audit.getKey(), Level.OFF);\n     }\n \n-    private void setLevel(final String key, final Level level) {\n+    protected void setLevel(final String key, final Level level) {\n         String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), key);\n \n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n@@ -156,6 +165,12 @@ private void setLevel(final String key, final Level level) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.NOTIFICATION_LIST + \"')\")\n     public List<EventCategory> events() {\n+        synchronized (EVENTS) {\n+            if (!EVENTS.isEmpty()) {\n+                return EVENTS;\n+            }\n+        }\n+\n         // use set to avoid duplications or null elements\n         Set<EventCategory> events = new HashSet<>();\n \n@@ -171,10 +186,10 @@ public List<EventCategory> events() {\n             Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);\n             for (Resource resource : resources) {\n                 if (resource.isReadable()) {\n-                    final MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);\n-                    final Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n+                    MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);\n+                    Class<?> clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n \n-                    if (clazz.isAnnotationPresent(Component.class) && AbstractLogic.class.isAssignableFrom(clazz)) {\n+                    if (AbstractLogic.class.isAssignableFrom(clazz)) {\n                         EventCategory eventCategory = new EventCategory();\n                         eventCategory.setCategory(clazz.getSimpleName());\n                         for (Method method : clazz.getDeclaredMethods()) {\n@@ -248,7 +263,8 @@ public List<EventCategory> events() {\n             LOG.error(\"Failure retrieving audit/notification events\", e);\n         }\n \n-        return new ArrayList<>(events);\n+        EVENTS.addAll(events);\n+        return EVENTS;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_SEARCH + \"')\")\n@@ -264,8 +280,8 @@ public Pair<Integer, List<AuditEntry>> search(\n             final AuditElements.Result result,\n             final List<OrderByClause> orderByClauses) {\n \n-        int count = auditDAO.countEntries(entityKey, type, category, subcategory, events, result);\n-        List<AuditEntry> matching = auditDAO.searchEntries(\n+        int count = auditConfDAO.countEntries(entityKey, type, category, subcategory, events, result);\n+        List<AuditEntry> matching = auditConfDAO.searchEntries(\n                 entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n         return Pair.of(count, matching);\n     }\n@@ -312,7 +328,7 @@ protected AuditConfTO resolveReference(final Method method, final Object... args\n \n         if (key != null) {\n             try {\n-                return binder.getAuditTO(auditDAO.find(key));\n+                return binder.getAuditTO(auditConfDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"f53e85ca0960b93655f7ea0ba3d7c55655191697","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DelegationLogic.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDelegationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDelegationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDelegationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,24 +34,28 @@\n import org.apache.syncope.core.provisioning.api.data.DelegationDataBinder;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class DelegationLogic extends AbstractTransactionalLogic<DelegationTO> {\n \n-    @Autowired\n-    private DelegationDataBinder binder;\n+    protected final DelegationDataBinder binder;\n \n-    @Autowired\n-    private DelegationDAO delegationDAO;\n+    protected final DelegationDAO delegationDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    private void securityChecks(final String delegating, final String entitlement) {\n+    public DelegationLogic(\n+            final DelegationDataBinder binder,\n+            final DelegationDAO delegationDAO,\n+            final UserDAO userDAO) {\n+\n+        this.binder = binder;\n+        this.delegationDAO = delegationDAO;\n+        this.userDAO = userDAO;\n+    }\n+\n+    protected void securityChecks(final String delegating, final String entitlement) {\n         if (!AuthContextUtils.getAuthorizations().keySet().contains(entitlement)\n                 && (delegating == null || !delegating.equals(userDAO.findKey(AuthContextUtils.getUsername())))) {\n "},{"sha":"f67023b651b0aab5d459f5cfee2a4f354ef0f028","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DynRealmLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,19 +28,19 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class DynRealmLogic extends AbstractTransactionalLogic<DynRealmTO> {\n \n-    @Autowired\n-    private DynRealmDataBinder binder;\n+    protected final DynRealmDataBinder binder;\n \n-    @Autowired\n-    private DynRealmDAO dynRealmDAO;\n+    protected final DynRealmDAO dynRealmDAO;\n+\n+    public DynRealmLogic(final DynRealmDataBinder binder, final DynRealmDAO dynRealmDAO) {\n+        this.binder = binder;\n+        this.dynRealmDAO = dynRealmDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.DYNREALM_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"098b4d2edc8fc3795ee0b8390dbd4a6d6e302758","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":51,"deletions":29,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -45,9 +45,11 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -65,60 +67,80 @@\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.quartz.JobDataMap;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n  * Spring's Transactional logic at class level.\n  */\n-@Component\n public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupCR, GroupUR> {\n \n-    @Autowired\n-    protected UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    protected SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n \n-    @Autowired\n-    protected AnySearchDAO searchDAO;\n+    protected final AnySearchDAO searchDAO;\n \n-    @Autowired\n-    protected ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    protected TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    protected GroupDataBinder binder;\n+    protected final GroupDataBinder binder;\n \n-    @Autowired\n-    protected GroupProvisioningManager provisioningManager;\n+    protected final GroupProvisioningManager provisioningManager;\n \n-    @Autowired\n-    protected TaskDataBinder taskDataBinder;\n+    protected final TaskDataBinder taskDataBinder;\n \n-    @Autowired\n-    protected ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    protected JobManager jobManager;\n+    protected final JobManager jobManager;\n \n-    @Autowired\n-    protected SchedulerFactoryBean scheduler;\n+    protected final SchedulerFactoryBean scheduler;\n \n-    @Autowired\n-    protected EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public GroupLogic(\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final TemplateUtils templateUtils,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final SecurityProperties securityProperties,\n+            final AnySearchDAO searchDAO,\n+            final ImplementationDAO implementationDAO,\n+            final TaskDAO taskDAO,\n+            final GroupDataBinder binder,\n+            final GroupProvisioningManager provisioningManager,\n+            final TaskDataBinder taskDataBinder,\n+            final ConfParamOps confParamOps,\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final EntityFactory entityFactory) {\n+\n+        super(realmDAO, anyTypeDAO, templateUtils);\n+\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.securityProperties = securityProperties;\n+        this.searchDAO = searchDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.taskDAO = taskDAO;\n+        this.binder = binder;\n+        this.provisioningManager = provisioningManager;\n+        this.taskDataBinder = taskDataBinder;\n+        this.confParamOps = confParamOps;\n+        this.jobManager = jobManager;\n+        this.scheduler = scheduler;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"0b2ac0723416e52d79feb78b889070b6adc11213","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"added","additions":515,"deletions":0,"changes":515,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,515 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.core.logic.init.AuditAccessor;\n+import org.apache.syncope.core.logic.init.AuditLoader;\n+import org.apache.syncope.core.logic.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.core.logic.init.EntitlementAccessor;\n+import org.apache.syncope.core.logic.init.IdRepoEntitlementLoader;\n+import org.apache.syncope.core.logic.init.IdRepoImplementationTypeLoader;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.content.ContentExporter;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.DelegationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RelationshipTypeDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SecurityQuestionDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.EnableAspectJAutoProxy;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+\n+@EnableAspectJAutoProxy\n+@EnableConfigurationProperties(LogicProperties.class)\n+@Configuration\n+public class IdRepoLogicContext {\n+\n+    @Autowired\n+    private LogicProperties logicProperties;\n+\n+    @Autowired\n+    private SecurityProperties securityProperties;\n+\n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n+    @Autowired\n+    private AnySearchDAO anySearchDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AuditConfDAO auditConfDAO;\n+\n+    @Autowired\n+    private DelegationDAO delegationDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO externalResourceDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @Autowired\n+    private NotificationDAO notificationDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private AuditManager auditManager;\n+\n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private GroupDataBinder groupDataBinder;\n+\n+    @Autowired\n+    private TaskDataBinder taskDataBinder;\n+\n+    @Autowired\n+    private ConfParamOps confParamOps;\n+\n+    @Autowired\n+    private JobManager jobManager;\n+\n+    @Autowired\n+    private SchedulerFactoryBean scheduler;\n+\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Autowired\n+    private PropagationTaskExecutor taskExecutor;\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public LogicInvocationHandler logicInvocationHandler(final NotificationManager notificationManager) {\n+        return new LogicInvocationHandler(notificationManager, auditManager);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ImplementationLookup implementationLookup() {\n+        return new ClassPathScanImplementationLookup();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AuditAccessor auditAccessor() {\n+        return new AuditAccessor(auditConfDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuditLoader auditLoader(final AuditAccessor auditAccessor, final ImplementationLookup implementationLookup) {\n+        return new AuditLoader(auditAccessor, implementationLookup, logicProperties);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public EntitlementAccessor entitlementAccessor() {\n+        return new EntitlementAccessor(anyTypeDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public IdRepoEntitlementLoader idRepoEntitlementLoader() {\n+        return new IdRepoEntitlementLoader(entitlementAccessor());\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public IdRepoImplementationTypeLoader idRepoImplementationTypeLoader() {\n+        return new IdRepoImplementationTypeLoader();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AccessTokenLogic accessTokenLogic(final AccessTokenDataBinder binder) {\n+        return new AccessTokenLogic(securityProperties, binder, accessTokenDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyObjectLogic anyObjectLogic(\n+            final AnyObjectDataBinder binder,\n+            final AnyObjectProvisioningManager provisioningManager) {\n+\n+        return new AnyObjectLogic(\n+                realmDAO,\n+                anyTypeDAO,\n+                templateUtils,\n+                anyObjectDAO,\n+                anySearchDAO,\n+                binder,\n+                provisioningManager);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeClassLogic anyTypeClassLogic(final AnyTypeClassDataBinder binder) {\n+        return new AnyTypeClassLogic(binder, anyTypeClassDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeLogic anyTypeLogic(final AnyTypeDataBinder binder) {\n+        return new AnyTypeLogic(binder, anyTypeDAO, anyObjectDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ApplicationLogic applicationLogic(\n+            final ApplicationDataBinder binder,\n+            final ApplicationDAO applicationDAO) {\n+\n+        return new ApplicationLogic(binder, applicationDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuditLogic auditLogic(\n+            final AuditLoader auditLoader,\n+            final AuditDataBinder binder) {\n+\n+        return new AuditLogic(\n+                auditLoader,\n+                auditConfDAO,\n+                externalResourceDAO,\n+                entityFactory,\n+                binder,\n+                auditManager);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DelegationLogic delegationLogic(final DelegationDataBinder binder) {\n+        return new DelegationLogic(binder, delegationDAO, userDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DynRealmLogic dynRealmLogic(\n+            final DynRealmDataBinder binder,\n+            final DynRealmDAO dynRealmDAO) {\n+\n+        return new DynRealmLogic(binder, dynRealmDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GroupLogic groupLogic(final GroupProvisioningManager provisioningManager) {\n+        return new GroupLogic(\n+                realmDAO,\n+                anyTypeDAO,\n+                templateUtils,\n+                userDAO,\n+                groupDAO,\n+                securityProperties,\n+                anySearchDAO,\n+                implementationDAO,\n+                taskDAO,\n+                groupDataBinder,\n+                provisioningManager,\n+                taskDataBinder,\n+                confParamOps,\n+                jobManager,\n+                scheduler,\n+                entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ImplementationLogic implementationLogic(final ImplementationDataBinder binder) {\n+        return new ImplementationLogic(\n+                binder,\n+                implementationDAO,\n+                reportDAO,\n+                policyDAO,\n+                externalResourceDAO,\n+                taskDAO,\n+                realmDAO,\n+                plainSchemaDAO,\n+                notificationDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public MailTemplateLogic mailTemplateLogic(final MailTemplateDAO mailTemplateDAO) {\n+        return new MailTemplateLogic(mailTemplateDAO, notificationDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationLogic notificationLogic(final NotificationDataBinder binder) {\n+        return new NotificationLogic(jobManager, scheduler, notificationDAO, binder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public PolicyLogic policyLogic(\n+            final PolicyDataBinder binder,\n+            final PolicyUtilsFactory policyUtilsFactory) {\n+\n+        return new PolicyLogic(policyDAO, binder, policyUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RealmLogic realmLogic(final RealmDataBinder binder) {\n+        return new RealmLogic(realmDAO, anySearchDAO, binder, propagationManager, taskExecutor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RelationshipTypeLogic relationshipTypeLogic(\n+            final RelationshipTypeDataBinder binder,\n+            final RelationshipTypeDAO relationshipTypeDAO) {\n+\n+        return new RelationshipTypeLogic(binder, relationshipTypeDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReportLogic reportLogic(\n+            final ReportDataBinder binder,\n+            final ReportExecDAO reportExecDAO) {\n+\n+        return new ReportLogic(jobManager, scheduler, reportDAO, reportExecDAO, confParamOps, binder, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReportTemplateLogic reportTemplateLogic(final ReportTemplateDAO reportTemplateDAO) {\n+        return new ReportTemplateLogic(reportTemplateDAO, reportDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RoleLogic roleLogic(\n+            final RoleDataBinder binder,\n+            final RoleDAO roleDAO) {\n+\n+        return new RoleLogic(binder, roleDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SchemaLogic schemaLogic(final SchemaDataBinder binder) {\n+        return new SchemaLogic(plainSchemaDAO, derSchemaDAO, virSchemaDAO, anyTypeClassDAO, binder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SecurityQuestionLogic securityQuestionLogic(\n+            final SecurityQuestionDataBinder binder,\n+            final SecurityQuestionDAO securityQuestionDAO) {\n+\n+        return new SecurityQuestionLogic(securityQuestionDAO, userDAO, binder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SyncopeLogic syncopeLogic(\n+            final ContentExporter exporter,\n+            final UserWorkflowAdapter uwfAdapter,\n+            final GroupWorkflowAdapter gwfAdapter,\n+            final AnyObjectWorkflowAdapter awfAdapter) {\n+\n+        return new SyncopeLogic(\n+                anyTypeDAO,\n+                groupDAO,\n+                anySearchDAO,\n+                groupDataBinder,\n+                confParamOps,\n+                exporter,\n+                uwfAdapter,\n+                gwfAdapter,\n+                awfAdapter);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public TaskLogic taskLogic(\n+            final TaskExecDAO taskExecDAO,\n+            final NotificationJobDelegate notificationJobDelegate,\n+            final TaskUtilsFactory taskUtilsFactory) {\n+\n+        return new TaskLogic(\n+                jobManager,\n+                scheduler,\n+                taskDAO,\n+                taskExecDAO,\n+                externalResourceDAO,\n+                notificationDAO,\n+                confParamOps,\n+                taskDataBinder,\n+                taskExecutor,\n+                notificationJobDelegate,\n+                taskUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public UserLogic userLogic(\n+            final UserDataBinder binder,\n+            final UserProvisioningManager provisioningManager,\n+            final SyncopeLogic syncopeLogic) {\n+\n+        return new UserLogic(\n+                realmDAO,\n+                anyTypeDAO,\n+                templateUtils,\n+                userDAO,\n+                groupDAO,\n+                anySearchDAO,\n+                accessTokenDAO,\n+                delegationDAO,\n+                confParamOps,\n+                binder,\n+                provisioningManager,\n+                syncopeLogic);\n+    }\n+}"},{"sha":"829bea4ec534617926c8b8992c1caa8cc35037a0","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":32,"deletions":22,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -42,42 +42,52 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ImplementationLogic extends AbstractTransactionalLogic<ImplementationTO> {\n \n-    @Autowired\n-    private ImplementationDataBinder binder;\n+    protected final ImplementationDataBinder binder;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private ReportDAO reportDAO;\n+    protected final ReportDAO reportDAO;\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private NotificationDAO notificationDAO;\n+    protected final NotificationDAO notificationDAO;\n \n-    private static void checkType(final String type) {\n+    public ImplementationLogic(\n+            final ImplementationDataBinder binder,\n+            final ImplementationDAO implementationDAO,\n+            final ReportDAO reportDAO,\n+            final PolicyDAO policyDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final TaskDAO taskDAO,\n+            final RealmDAO realmDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final NotificationDAO notificationDAO) {\n+\n+        this.binder = binder;\n+        this.implementationDAO = implementationDAO;\n+        this.reportDAO = reportDAO;\n+        this.policyDAO = policyDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.taskDAO = taskDAO;\n+        this.realmDAO = realmDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.notificationDAO = notificationDAO;\n+    }\n+\n+    protected void checkType(final String type) {\n         if (!ImplementationTypesHolder.getInstance().getValues().containsKey(type)) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementationType);\n             sce.getElements().add(\"Implementation type not found: \");"},{"sha":"77d3c841cb2ab138bbe21cad960b77f966ea8b6c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LogicInvocationHandler.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicInvocationHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,18 +31,20 @@\n import org.aspectj.lang.reflect.MethodSignature;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n @Aspect\n public class LogicInvocationHandler {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(LogicInvocationHandler.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(LogicInvocationHandler.class);\n \n-    @Autowired\n-    private NotificationManager notificationManager;\n+    protected final NotificationManager notificationManager;\n \n-    @Autowired\n-    private AuditManager auditManager;\n+    protected final AuditManager auditManager;\n+\n+    public LogicInvocationHandler(final NotificationManager notificationManager, final AuditManager auditManager) {\n+        this.notificationManager = notificationManager;\n+        this.auditManager = auditManager;\n+    }\n \n     @Around(\"execution(* org.apache.syncope.core.logic.AbstractLogic+.*(..))\")\n     public Object around(final ProceedingJoinPoint joinPoint) throws Throwable {"},{"sha":"0b6991077763611928cb5934ce216e14ae1630b2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LogicProperties.java","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLogicProperties.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -18,35 +18,13 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import org.apache.syncope.core.logic.init.ClassPathScanImplementationLookup;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n @ConfigurationProperties(\"logic\")\n public class LogicProperties {\n \n-    private Class<? extends LogicInvocationHandler> invocationHandler = LogicInvocationHandler.class;\n-\n-    private Class<? extends ImplementationLookup> implementationLookup = ClassPathScanImplementationLookup.class;\n-\n     private boolean enableJDBCAuditAppender = true;\n \n-    public Class<? extends LogicInvocationHandler> getInvocationHandler() {\n-        return invocationHandler;\n-    }\n-\n-    public void setInvocationHandler(final Class<? extends LogicInvocationHandler> invocationHandler) {\n-        this.invocationHandler = invocationHandler;\n-    }\n-\n-    public Class<? extends ImplementationLookup> getImplementationLookup() {\n-        return implementationLookup;\n-    }\n-\n-    public void setImplementationLookup(final Class<? extends ImplementationLookup> implementationLookup) {\n-        this.implementationLookup = implementationLookup;\n-    }\n-\n     public boolean isEnableJDBCAuditAppender() {\n         return enableJDBCAuditAppender;\n     }"},{"sha":"d53c5390c4c213cdc2045f8d8987b6a06bb034e6","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,24 +36,28 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class MailTemplateLogic extends AbstractTransactionalLogic<MailTemplateTO> {\n \n-    @Autowired\n-    private MailTemplateDAO mailTemplateDAO;\n+    protected final MailTemplateDAO mailTemplateDAO;\n \n-    @Autowired\n-    private NotificationDAO notificationDAO;\n+    protected final NotificationDAO notificationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    private static MailTemplateTO getMailTemplateTO(final String key) {\n+    public MailTemplateLogic(\n+            final MailTemplateDAO mailTemplateDAO,\n+            final NotificationDAO notificationDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.mailTemplateDAO = mailTemplateDAO;\n+        this.notificationDAO = notificationDAO;\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    protected MailTemplateTO getMailTemplateTO(final String key) {\n         MailTemplateTO mailTemplateTO = new MailTemplateTO();\n         mailTemplateTO.setKey(key);\n         return mailTemplateTO;"},{"sha":"f43758e90c595f1ba8ec622e1609bf2950e5b5d3","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,19 +35,27 @@\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n import org.quartz.JobKey;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n \n-    @Autowired\n-    private NotificationDAO notificationDAO;\n+    protected final NotificationDAO notificationDAO;\n \n-    @Autowired\n-    private NotificationDataBinder binder;\n+    protected final NotificationDataBinder binder;\n+\n+    public NotificationLogic(\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final NotificationDAO notificationDAO,\n+            final NotificationDataBinder binder) {\n+\n+        super(jobManager, scheduler);\n+\n+        this.notificationDAO = notificationDAO;\n+        this.binder = binder;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.NOTIFICATION_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"681b58edba356636ff6e9c3711f145f8d7f17ca1","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,22 +33,26 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtils;\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class PolicyLogic extends AbstractTransactionalLogic<PolicyTO> {\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    @Autowired\n-    private PolicyDataBinder binder;\n+    protected final PolicyDataBinder binder;\n \n-    @Autowired\n-    private PolicyUtilsFactory policyUtilsFactory;\n+    protected final PolicyUtilsFactory policyUtilsFactory;\n+\n+    public PolicyLogic(\n+            final PolicyDAO policyDAO,\n+            final PolicyDataBinder binder,\n+            final PolicyUtilsFactory policyUtilsFactory) {\n+\n+        this.policyDAO = policyDAO;\n+        this.binder = binder;\n+        this.policyUtilsFactory = policyUtilsFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.POLICY_CREATE + \"')\")\n     public <T extends PolicyTO> T create(final PolicyType type, final T policyTO) {"},{"sha":"bd1a0a96f62c6ab0c4da3ede741cde03619a8674","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":19,"deletions":13,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,28 +48,34 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO searchDAO;\n \n-    @Autowired\n-    private RealmDataBinder binder;\n+    protected final RealmDataBinder binder;\n \n-    @Autowired\n-    private PropagationManager propagationManager;\n+    protected final PropagationManager propagationManager;\n \n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected final PropagationTaskExecutor taskExecutor;\n+\n+    public RealmLogic(\n+            final RealmDAO realmDAO,\n+            final AnySearchDAO searchDAO,\n+            final RealmDataBinder binder,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor) {\n+\n+        this.realmDAO = realmDAO;\n+        this.searchDAO = searchDAO;\n+        this.binder = binder;\n+        this.propagationManager = propagationManager;\n+        this.taskExecutor = taskExecutor;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_LIST + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"998bfe7a24e626a95f313fddf077a5ec1e77cc90","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -29,19 +29,22 @@\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.provisioning.api.data.RelationshipTypeDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class RelationshipTypeLogic extends AbstractTransactionalLogic<RelationshipTypeTO> {\n \n-    @Autowired\n-    private RelationshipTypeDataBinder binder;\n+    protected final RelationshipTypeDataBinder binder;\n \n-    @Autowired\n-    private RelationshipTypeDAO relationshipTypeDAO;\n+    protected final RelationshipTypeDAO relationshipTypeDAO;\n+\n+    public RelationshipTypeLogic(\n+            final RelationshipTypeDataBinder binder,\n+            final RelationshipTypeDAO relationshipTypeDAO) {\n+\n+        this.binder = binder;\n+        this.relationshipTypeDAO = relationshipTypeDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.RELATIONSHIPTYPE_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"75aa53cf3bea439b88897433429c0aa20da58fb7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":25,"deletions":13,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -65,34 +65,46 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.SchedulerException;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n \n-    @Autowired\n-    private ReportDAO reportDAO;\n+    protected final ReportDAO reportDAO;\n \n-    @Autowired\n-    private ReportExecDAO reportExecDAO;\n+    protected final ReportExecDAO reportExecDAO;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    private ReportDataBinder binder;\n+    protected final ReportDataBinder binder;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public ReportLogic(\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final ReportDAO reportDAO,\n+            final ReportExecDAO reportExecDAO,\n+            final ConfParamOps confParamOps,\n+            final ReportDataBinder binder,\n+            final EntityFactory entityFactory) {\n+\n+        super(jobManager, scheduler);\n+\n+        this.reportDAO = reportDAO;\n+        this.reportExecDAO = reportExecDAO;\n+        this.confParamOps = confParamOps;\n+        this.binder = binder;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_CREATE + \"')\")\n     public ReportTO create(final ReportTO reportTO) {"},{"sha":"4735c037b80f746680d54ab6d8733b255e845f4a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,24 +36,28 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.api.entity.Report;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class ReportTemplateLogic extends AbstractTransactionalLogic<ReportTemplateTO> {\n \n-    @Autowired\n-    private ReportTemplateDAO reportTemplateDAO;\n+    protected final ReportTemplateDAO reportTemplateDAO;\n \n-    @Autowired\n-    private ReportDAO reportDAO;\n+    protected final ReportDAO reportDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    private static ReportTemplateTO getReportTemplateTO(final String key) {\n+    public ReportTemplateLogic(\n+            final ReportTemplateDAO reportTemplateDAO,\n+            final ReportDAO reportDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.reportTemplateDAO = reportTemplateDAO;\n+        this.reportDAO = reportDAO;\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    protected ReportTemplateTO getReportTemplateTO(final String key) {\n         ReportTemplateTO reportTemplateTO = new ReportTemplateTO();\n         reportTemplateTO.setKey(key);\n         return reportTemplateTO;"},{"sha":"e6e788c7663163c832f0ab6a211f7ccaec93c252","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,19 +32,19 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n \n-    @Autowired\n-    private RoleDataBinder binder;\n+    protected final RoleDataBinder binder;\n \n-    @Autowired\n-    private RoleDAO roleDAO;\n+    protected final RoleDAO roleDAO;\n+\n+    public RoleLogic(final RoleDataBinder binder, final RoleDAO roleDAO) {\n+        this.binder = binder;\n+        this.roleDAO = roleDAO;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_READ + \"')\")\n     @Transactional(readOnly = true)"},{"sha":"3c110bd5515e563c74b75b94ea499cbd3fb815e7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -45,30 +45,36 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    private SchemaDataBinder binder;\n+    protected final SchemaDataBinder binder;\n \n-    private boolean doesSchemaExist(final SchemaType schemaType, final String name) {\n+    public SchemaLogic(\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final SchemaDataBinder binder) {\n+\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.binder = binder;\n+    }\n+\n+    protected boolean doesSchemaExist(final SchemaType schemaType, final String name) {\n         boolean found;\n \n         switch (schemaType) {"},{"sha":"cf1c20bf8f448ad6118a8be9b9558417bdbdf173","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,22 +30,26 @@\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.SecurityQuestionDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class SecurityQuestionLogic extends AbstractTransactionalLogic<SecurityQuestionTO> {\n \n-    @Autowired\n-    private SecurityQuestionDAO securityQuestionDAO;\n+    protected final SecurityQuestionDAO securityQuestionDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private SecurityQuestionDataBinder binder;\n+    protected final SecurityQuestionDataBinder binder;\n+\n+    public SecurityQuestionLogic(\n+            final SecurityQuestionDAO securityQuestionDAO,\n+            final UserDAO userDAO,\n+            final SecurityQuestionDataBinder binder) {\n+\n+        this.securityQuestionDAO = securityQuestionDAO;\n+        this.userDAO = userDAO;\n+        this.binder = binder;\n+    }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)"},{"sha":"b90aefd5d8d32ea3a8ed407f3fa236ab583bedaa","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -49,41 +49,51 @@\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(readOnly = true)\n-@Component\n public class SyncopeLogic extends AbstractLogic<EntityTO> {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO searchDAO;\n \n-    @Autowired\n-    private GroupDataBinder groupDataBinder;\n+    protected final GroupDataBinder groupDataBinder;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    private AnyObjectWorkflowAdapter awfAdapter;\n+    protected final ContentExporter exporter;\n \n-    @Autowired\n-    private ContentExporter exporter;\n+    protected final UserWorkflowAdapter uwfAdapter;\n \n-    @Autowired\n-    private UserWorkflowAdapter uwfAdapter;\n+    protected final GroupWorkflowAdapter gwfAdapter;\n \n-    @Autowired\n-    private GroupWorkflowAdapter gwfAdapter;\n+    protected final AnyObjectWorkflowAdapter awfAdapter;\n+\n+    public SyncopeLogic(\n+            final AnyTypeDAO anyTypeDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO searchDAO,\n+            final GroupDataBinder groupDataBinder,\n+            final ConfParamOps confParamOps,\n+            final ContentExporter exporter,\n+            final UserWorkflowAdapter uwfAdapter,\n+            final GroupWorkflowAdapter gwfAdapter,\n+            final AnyObjectWorkflowAdapter awfAdapter) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.groupDAO = groupDAO;\n+        this.searchDAO = searchDAO;\n+        this.groupDataBinder = groupDataBinder;\n+        this.confParamOps = confParamOps;\n+        this.exporter = exporter;\n+        this.uwfAdapter = uwfAdapter;\n+        this.gwfAdapter = gwfAdapter;\n+        this.awfAdapter = awfAdapter;\n+    }\n \n     public boolean isSelfRegAllowed() {\n         return confParamOps.get(AuthContextUtils.getDomain(), \"selfRegistration.allowed\", false, Boolean.class);"},{"sha":"afcb042e5d9f410985f2d4a69fdf989b01b4d751","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":37,"deletions":21,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -58,6 +58,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n@@ -69,41 +70,56 @@\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n import org.quartz.SchedulerException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.dao.InvalidDataAccessApiUsageException;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class TaskLogic extends AbstractExecutableLogic<TaskTO> {\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    private TaskExecDAO taskExecDAO;\n+    protected final TaskExecDAO taskExecDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private NotificationDAO notificationDAO;\n+    protected final NotificationDAO notificationDAO;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    private TaskDataBinder binder;\n+    protected final TaskDataBinder binder;\n \n-    @Autowired\n-    private PropagationTaskExecutor taskExecutor;\n+    protected final PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    private NotificationJobDelegate notificationJobDelegate;\n+    protected final NotificationJobDelegate notificationJobDelegate;\n \n-    @Autowired\n-    private TaskUtilsFactory taskUtilsFactory;\n+    protected final TaskUtilsFactory taskUtilsFactory;\n+\n+    public TaskLogic(\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final TaskDAO taskDAO,\n+            final TaskExecDAO taskExecDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final NotificationDAO notificationDAO,\n+            final ConfParamOps confParamOps,\n+            final TaskDataBinder binder,\n+            final PropagationTaskExecutor taskExecutor,\n+            final NotificationJobDelegate notificationJobDelegate,\n+            final TaskUtilsFactory taskUtilsFactory) {\n+\n+        super(jobManager, scheduler);\n+\n+        this.taskDAO = taskDAO;\n+        this.taskExecDAO = taskExecDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.notificationDAO = notificationDAO;\n+        this.confParamOps = confParamOps;\n+        this.binder = binder;\n+        this.taskExecutor = taskExecutor;\n+        this.notificationJobDelegate = notificationJobDelegate;\n+        this.taskUtilsFactory = taskUtilsFactory;\n+    }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_CREATE + \"')\")\n     public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T taskTO) {"},{"sha":"29e475d558398aaa197431749282e3611a338212","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":39,"deletions":21,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -46,9 +46,11 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -59,45 +61,61 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Note that this controller does not extend {@link AbstractTransactionalLogic}, hence does not provide any\n  * Spring's Transactional logic at class level.\n  */\n-@Component\n public class UserLogic extends AbstractAnyLogic<UserTO, UserCR, UserUR> {\n \n-    @Autowired\n-    protected UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    protected AnySearchDAO searchDAO;\n+    protected final AnySearchDAO searchDAO;\n \n-    @Autowired\n-    protected AccessTokenDAO accessTokenDAO;\n+    protected final AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    protected DelegationDAO delegationDAO;\n+    protected final DelegationDAO delegationDAO;\n \n-    @Autowired\n-    protected ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    protected UserDataBinder binder;\n+    protected final UserDataBinder binder;\n \n-    @Autowired\n-    protected UserProvisioningManager provisioningManager;\n+    protected final UserProvisioningManager provisioningManager;\n \n-    @Autowired\n-    protected SyncopeLogic syncopeLogic;\n+    protected final SyncopeLogic syncopeLogic;\n+\n+    public UserLogic(\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final TemplateUtils templateUtils,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO searchDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final DelegationDAO delegationDAO,\n+            final ConfParamOps confParamOps,\n+            final UserDataBinder binder,\n+            final UserProvisioningManager provisioningManager,\n+            final SyncopeLogic syncopeLogic) {\n+\n+        super(realmDAO, anyTypeDAO, templateUtils);\n+\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.searchDAO = searchDAO;\n+        this.accessTokenDAO = accessTokenDAO;\n+        this.delegationDAO = delegationDAO;\n+        this.confParamOps = confParamOps;\n+        this.binder = binder;\n+        this.provisioningManager = provisioningManager;\n+        this.syncopeLogic = syncopeLogic;\n+    }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n     @Transactional(readOnly = true)"},{"sha":"0e67a95c104300656ebaf3b70526cd30669203b5","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/AuditAccessor.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditAccessor.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,8 +26,6 @@\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.AuditConf;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n@@ -37,15 +35,17 @@\n  *\n  * @see AuditLoader\n  */\n-@Component\n public class AuditAccessor {\n \n-    @Autowired\n-    private AuditConfDAO auditDAO;\n+    protected final AuditConfDAO auditConfDAO;\n+\n+    public AuditAccessor(final AuditConfDAO auditConfDAO) {\n+        this.auditConfDAO = auditConfDAO;\n+    }\n \n     @Transactional\n     public void synchronizeLoggingWithAudit(final LoggerContext ctx) {\n-        Map<String, AuditConf> audits = auditDAO.findAll().stream().\n+        Map<String, AuditConf> audits = auditConfDAO.findAll().stream().\n                 collect(Collectors.toMap(\n                         audit -> AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), audit.getKey()),\n                         Function.identity()));"},{"sha":"2456dc50415a0211037106bfbfc504472375bae3","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/AuditLoader.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -37,21 +37,25 @@\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.BeansException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AuditLoader implements SyncopeCoreLoader {\n \n-    @Autowired\n-    private AuditAccessor auditAccessor;\n+    protected final AuditAccessor auditAccessor;\n \n-    @Autowired\n-    private ImplementationLookup implementationLookup;\n+    protected final ImplementationLookup implementationLookup;\n \n-    @Autowired\n-    private LogicProperties props;\n+    protected final LogicProperties props;\n+\n+    public AuditLoader(\n+            final AuditAccessor auditAccessor,\n+            final ImplementationLookup implementationLookup,\n+            final LogicProperties props) {\n+\n+        this.auditAccessor = auditAccessor;\n+        this.implementationLookup = implementationLookup;\n+        this.props = props;\n+    }\n \n     @Override\n     public int getOrder() {"},{"sha":"6243c100d674455b104f3cfc9ef97c4cbc11ce5b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/EntitlementAccessor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FEntitlementAccessor.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,20 +20,20 @@\n \n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n  * Domain-sensible (via {@code @Transactional} access to any type data for entitlement init.\n  *\n  * @see IdRepoEntitlementLoader\n  */\n-@Component\n public class EntitlementAccessor {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n+\n+    public EntitlementAccessor(final AnyTypeDAO anyTypeDAO) {\n+        this.anyTypeDAO = anyTypeDAO;\n+    }\n \n     @Transactional(readOnly = true)\n     public void addEntitlementsForAnyTypes() {"},{"sha":"c40687a868008869ba13a5962475f39c4badbdfb","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/IdRepoEntitlementLoader.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoEntitlementLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoEntitlementLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoEntitlementLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,14 +23,14 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class IdRepoEntitlementLoader implements SyncopeCoreLoader {\n \n-    @Autowired\n-    private EntitlementAccessor entitlementAccessor;\n+    protected final EntitlementAccessor entitlementAccessor;\n+\n+    public IdRepoEntitlementLoader(final EntitlementAccessor entitlementAccessor) {\n+        this.entitlementAccessor = entitlementAccessor;\n+    }\n \n     @Override\n     public int getOrder() {"},{"sha":"cf2fc3cecf8830e352faf27a799e918e522cc4cf","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/IdRepoImplementationTypeLoader.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,9 +22,7 @@\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.springframework.core.Ordered;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class IdRepoImplementationTypeLoader implements SyncopeCoreLoader {\n \n     @Override"},{"sha":"0367f7d6a490f378a32c2c921953b060bafbf8d6","filename":"core/idrepo/logic/src/main/resources/META-INF/spring.factories","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -16,4 +16,4 @@\n # under the License.\n \n org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.core.logic.LogicContext\n+  org.apache.syncope.core.logic.IdRepoLogicContext"},{"sha":"17a13361d985859b5f8f6c27455ef45676224147","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/CheckDomainFilter.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FCheckDomainFilter.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Checks that requested Domain exists.\n@@ -40,8 +39,11 @@\n @PreMatching\n public class CheckDomainFilter implements ContainerRequestFilter {\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    protected final DomainHolder domainHolder;\n+\n+    public CheckDomainFilter(final DomainHolder domainHolder) {\n+        this.domainHolder = domainHolder;\n+    }\n \n     @Override\n     public void filter(final ContainerRequestContext reqContext) throws IOException {"},{"sha":"cecbac370fafe228f06e9ce4e4179ed9783a6416","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"added","additions":509,"deletions":0,"changes":509,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,509 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;\n+import com.fasterxml.jackson.jaxrs.yaml.JacksonYAMLProvider;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.servlet.ServletRequestListener;\n+import org.apache.cxf.Bus;\n+import org.apache.cxf.endpoint.Server;\n+import org.apache.cxf.jaxrs.ext.search.SearchContextImpl;\n+import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n+import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n+import org.apache.cxf.jaxrs.openapi.OpenApiFeature;\n+import org.apache.cxf.jaxrs.spring.JAXRSServerFactoryBeanDefinitionParser.SpringJAXRSServerFactoryBean;\n+import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+import org.apache.cxf.validation.BeanValidationProvider;\n+import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n+import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n+import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n+import org.apache.syncope.common.rest.api.service.AccessTokenService;\n+import org.apache.syncope.common.rest.api.service.AnyObjectService;\n+import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n+import org.apache.syncope.common.rest.api.service.AnyTypeService;\n+import org.apache.syncope.common.rest.api.service.ApplicationService;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n+import org.apache.syncope.common.rest.api.service.DelegationService;\n+import org.apache.syncope.common.rest.api.service.DynRealmService;\n+import org.apache.syncope.common.rest.api.service.GroupService;\n+import org.apache.syncope.common.rest.api.service.ImplementationService;\n+import org.apache.syncope.common.rest.api.service.MailTemplateService;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.common.rest.api.service.RealmService;\n+import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.common.rest.api.service.UserService;\n+import org.apache.syncope.core.logic.AccessTokenLogic;\n+import org.apache.syncope.core.logic.AnyObjectLogic;\n+import org.apache.syncope.core.logic.AnyTypeClassLogic;\n+import org.apache.syncope.core.logic.AnyTypeLogic;\n+import org.apache.syncope.core.logic.ApplicationLogic;\n+import org.apache.syncope.core.logic.AuditLogic;\n+import org.apache.syncope.core.logic.DelegationLogic;\n+import org.apache.syncope.core.logic.DynRealmLogic;\n+import org.apache.syncope.core.logic.GroupLogic;\n+import org.apache.syncope.core.logic.ImplementationLogic;\n+import org.apache.syncope.core.logic.MailTemplateLogic;\n+import org.apache.syncope.core.logic.NotificationLogic;\n+import org.apache.syncope.core.logic.PolicyLogic;\n+import org.apache.syncope.core.logic.RealmLogic;\n+import org.apache.syncope.core.logic.RelationshipTypeLogic;\n+import org.apache.syncope.core.logic.ReportLogic;\n+import org.apache.syncope.core.logic.ReportTemplateLogic;\n+import org.apache.syncope.core.logic.RoleLogic;\n+import org.apache.syncope.core.logic.SchemaLogic;\n+import org.apache.syncope.core.logic.SecurityQuestionLogic;\n+import org.apache.syncope.core.logic.SyncopeLogic;\n+import org.apache.syncope.core.logic.TaskLogic;\n+import org.apache.syncope.core.logic.UserLogic;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.rest.cxf.service.AccessTokenServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.AnyObjectServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.AnyTypeClassServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.AnyTypeServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ApplicationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.AuditServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.DelegationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.DynRealmServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.GroupServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ImplementationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.MailTemplateServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.NotificationServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.PolicyServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.RealmServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.RelationshipTypeServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ReportServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.ReportTemplateServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.RoleServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.SchemaServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.SecurityQuestionServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.SyncopeServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.TaskServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.UserSelfServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.UserServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.env.Environment;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+\n+@PropertySource(\"classpath:errorMessages.properties\")\n+@Configuration\n+public class IdRepoRESTCXFContext {\n+\n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n+    @Autowired\n+    private Bus bus;\n+\n+    @Autowired\n+    private ApplicationContext ctx;\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ThreadPoolTaskExecutor batchExecutor() {\n+        ThreadPoolTaskExecutor batchExecutor = new ThreadPoolTaskExecutor();\n+        batchExecutor.setCorePoolSize(10);\n+        batchExecutor.setThreadNamePrefix(\"Batch-\");\n+        batchExecutor.initialize();\n+        return batchExecutor;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public DateParamConverterProvider dateParamConverterProvider() {\n+        return new DateParamConverterProvider();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public JacksonJsonProvider jsonProvider() {\n+        JacksonJsonProvider jsonProvider = new JacksonJsonProvider();\n+        jsonProvider.setMapper(new SyncopeObjectMapper());\n+        return jsonProvider;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public JacksonXMLProvider xmlProvider() {\n+        JacksonXMLProvider xmlProvider = new JacksonXMLProvider();\n+        xmlProvider.setMapper(new SyncopeXmlMapper());\n+        return xmlProvider;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public JacksonYAMLProvider yamlProvider() {\n+        JacksonYAMLProvider yamlProvider = new JacksonYAMLProvider();\n+        yamlProvider.setMapper(new SyncopeYAMLMapper());\n+        return yamlProvider;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public BeanValidationProvider validationProvider() {\n+        return new BeanValidationProvider();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public JAXRSBeanValidationInInterceptor validationInInterceptor() {\n+        JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n+        validationInInterceptor.setProvider(validationProvider());\n+        return validationInInterceptor;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public GZIPInInterceptor gzipInInterceptor() {\n+        return new GZIPInInterceptor();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public GZIPOutInterceptor gzipOutInterceptor() {\n+        GZIPOutInterceptor gzipOutInterceptor = new GZIPOutInterceptor();\n+        gzipOutInterceptor.setThreshold(0);\n+        gzipOutInterceptor.setForce(true);\n+        return gzipOutInterceptor;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RestServiceExceptionMapper restServiceExceptionMapper(final Environment env) {\n+        return new RestServiceExceptionMapper(env);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SearchContextProvider searchContextProvider() {\n+        return new SearchContextProvider();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public CheckDomainFilter checkDomainFilter(final DomainHolder domainHolder) {\n+        return new CheckDomainFilter(domainHolder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AddDomainFilter addDomainFilter() {\n+        return new AddDomainFilter();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AddETagFilter addETagFilter() {\n+        return new AddETagFilter();\n+    }\n+\n+    private String version() {\n+        return ctx.getEnvironment().getProperty(\"version\");\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public OpenApiFeature openapiFeature() {\n+        OpenApiFeature openapiFeature = new OpenApiFeature();\n+        openapiFeature.setTitle(\"Apache Syncope\");\n+        openapiFeature.setVersion(version());\n+        openapiFeature.setDescription(\"Apache Syncope \" + version());\n+        openapiFeature.setContactName(\"The Apache Syncope community\");\n+        openapiFeature.setContactEmail(\"dev@syncope.apache.org\");\n+        openapiFeature.setContactUrl(\"http://syncope.apache.org\");\n+        openapiFeature.setScan(false);\n+        openapiFeature.setResourcePackages(Set.of(\"org.apache.syncope.common.rest.api.service\"));\n+\n+        SyncopeOpenApiCustomizer openApiCustomizer = new SyncopeOpenApiCustomizer(ctx.getEnvironment());\n+        openApiCustomizer.setDynamicBasePath(false);\n+        openApiCustomizer.setReplaceTags(false);\n+        openapiFeature.setCustomizer(openApiCustomizer);\n+\n+        Map<String, SecurityScheme> securityDefinitions = new HashMap<>();\n+        SecurityScheme basicAuth = new SecurityScheme();\n+        basicAuth.setType(SecurityScheme.Type.HTTP);\n+        basicAuth.setScheme(\"basic\");\n+        securityDefinitions.put(\"BasicAuthentication\", basicAuth);\n+        SecurityScheme bearer = new SecurityScheme();\n+        bearer.setType(SecurityScheme.Type.HTTP);\n+        bearer.setScheme(\"bearer\");\n+        bearer.setBearerFormat(\"JWT\");\n+        securityDefinitions.put(\"Bearer\", bearer);\n+        openapiFeature.setSecurityDefinitions(securityDefinitions);\n+\n+        return openapiFeature;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public Server restContainer(\n+            final CheckDomainFilter checkDomainFilter,\n+            final RestServiceExceptionMapper restServiceExceptionMapper) {\n+\n+        SpringJAXRSServerFactoryBean restContainer = new SpringJAXRSServerFactoryBean();\n+        restContainer.setBus(bus);\n+        restContainer.setAddress(\"/\");\n+        restContainer.setStaticSubresourceResolution(true);\n+        restContainer.setBasePackages(List.of(\n+                \"org.apache.syncope.common.rest.api.service\",\n+                \"org.apache.syncope.core.rest.cxf.service\"));\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(SearchContextImpl.CUSTOM_SEARCH_PARSER_CLASS_PROPERTY, SyncopeFiqlParser.class.getName());\n+        properties.put(SearchUtils.LAX_PROPERTY_MATCH, \"true\");\n+        properties.put(\"convert.wadl.resources.to.dom\", \"false\");\n+        restContainer.setProperties(properties);\n+\n+        restContainer.setProviders(List.of(\n+                dateParamConverterProvider(),\n+                jsonProvider(),\n+                xmlProvider(),\n+                yamlProvider(),\n+                restServiceExceptionMapper,\n+                searchContextProvider(),\n+                checkDomainFilter,\n+                addDomainFilter(),\n+                addETagFilter()));\n+\n+        restContainer.setInInterceptors(List.of(\n+                gzipInInterceptor(),\n+                validationInInterceptor()));\n+\n+        restContainer.setOutInterceptors(List.of(gzipOutInterceptor()));\n+\n+        restContainer.setFeatures(List.of(openapiFeature()));\n+\n+        restContainer.setApplicationContext(ctx);\n+        return restContainer.create();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ServletListenerRegistrationBean<ServletRequestListener> listenerRegistrationBean() {\n+        ServletListenerRegistrationBean<ServletRequestListener> bean = new ServletListenerRegistrationBean<>();\n+        bean.setListener(new ThreadLocalCleanupListener());\n+        return bean;\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AccessTokenService accessTokenService(final AccessTokenLogic accessTokenLogic) {\n+        return new AccessTokenServiceImpl(accessTokenLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyObjectService anyObjectService(final AnyObjectDAO anyObjectDAO, final AnyObjectLogic anyObjectLogic) {\n+        return new AnyObjectServiceImpl(searchCondVisitor, anyObjectDAO, anyObjectLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeClassService anyTypeClassService(final AnyTypeClassLogic anyTypeClassLogic) {\n+        return new AnyTypeClassServiceImpl(anyTypeClassLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeService anyTypeService(final AnyTypeLogic anyTypeLogic) {\n+        return new AnyTypeServiceImpl(anyTypeLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ApplicationService applicationService(final ApplicationLogic applicationLogic) {\n+        return new ApplicationServiceImpl(applicationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuditService auditService(final AuditLogic auditLogic) {\n+        return new AuditServiceImpl(auditLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DelegationService delegationService(final DelegationLogic delegationLogic) {\n+        return new DelegationServiceImpl(delegationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DynRealmService dynRealmService(final DynRealmLogic dynRealmLogic) {\n+        return new DynRealmServiceImpl(dynRealmLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GroupService groupService(final GroupDAO groupDAO, final GroupLogic groupLogic) {\n+        return new GroupServiceImpl(searchCondVisitor, groupDAO, groupLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ImplementationService implementationService(final ImplementationLogic implementationLogic) {\n+        return new ImplementationServiceImpl(implementationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public MailTemplateService mailTemplateService(final MailTemplateLogic mailTemplateLogic) {\n+        return new MailTemplateServiceImpl(mailTemplateLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationService notificationService(final NotificationLogic notificationLogic) {\n+        return new NotificationServiceImpl(notificationLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public PolicyService policyService(final PolicyLogic policyLogic) {\n+        return new PolicyServiceImpl(policyLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RealmService realmService(final RealmLogic realmLogic) {\n+        return new RealmServiceImpl(realmLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RelationshipTypeService relationshipTypeService(final RelationshipTypeLogic relationshipTypeLogic) {\n+        return new RelationshipTypeServiceImpl(relationshipTypeLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReportService reportService(final ReportLogic reportLogic) {\n+        return new ReportServiceImpl(reportLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReportTemplateService reportTemplateService(final ReportTemplateLogic reportTemplateLogic) {\n+        return new ReportTemplateServiceImpl(reportTemplateLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RoleService roleService(final RoleLogic roleLogic) {\n+        return new RoleServiceImpl(roleLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SchemaService schemaService(final SchemaLogic schemaLogic) {\n+        return new SchemaServiceImpl(schemaLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SecurityQuestionService securityQuestionService(final SecurityQuestionLogic securityQuestionLogic) {\n+        return new SecurityQuestionServiceImpl(securityQuestionLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SyncopeService syncopeService(\n+            final SyncopeLogic syncopeLogic,\n+            final ThreadPoolTaskExecutor batchExecutor,\n+            final BatchDAO batchDAO,\n+            final EntityFactory entityFactory) {\n+\n+        return new SyncopeServiceImpl(syncopeLogic, batchExecutor, bus, batchDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public TaskService taskService(final TaskLogic taskLogic) {\n+        return new TaskServiceImpl(taskLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public UserSelfService userSelfService(final UserLogic userLogic, final SyncopeLogic syncopeLogic) {\n+        return new UserSelfServiceImpl(userLogic, syncopeLogic);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public UserService userService(final UserDAO userDAO, final UserLogic userLogic) {\n+        return new UserServiceImpl(searchCondVisitor, userDAO, userLogic);\n+    }\n+}"},{"sha":"d836bcf8760c3582c64edd381ca6f5a02a4d5d79","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RESTCXFContext.java","status":"removed","additions":0,"deletions":233,"changes":233,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a15b7929069950e553db35487c96a4e5ec60d8f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a15b7929069950e553db35487c96a4e5ec60d8f/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTCXFContext.java?ref=8a15b7929069950e553db35487c96a4e5ec60d8f","patch":"@@ -1,233 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf;\n-\n-import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;\n-import com.fasterxml.jackson.jaxrs.yaml.JacksonYAMLProvider;\n-import io.swagger.v3.oas.models.security.SecurityScheme;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.Executor;\n-import javax.servlet.ServletRequestListener;\n-import org.apache.cxf.Bus;\n-import org.apache.cxf.endpoint.Server;\n-import org.apache.cxf.jaxrs.ext.search.SearchContextImpl;\n-import org.apache.cxf.jaxrs.ext.search.SearchContextProvider;\n-import org.apache.cxf.jaxrs.ext.search.SearchUtils;\n-import org.apache.cxf.jaxrs.openapi.OpenApiFeature;\n-import org.apache.cxf.jaxrs.spring.JAXRSServerFactoryBeanDefinitionParser.SpringJAXRSServerFactoryBean;\n-import org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor;\n-import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n-import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n-import org.apache.cxf.validation.BeanValidationProvider;\n-import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n-import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n-import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n-import org.apache.syncope.common.lib.search.SyncopeFiqlParser;\n-import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.PropertySource;\n-import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n-\n-@ComponentScan(\"org.apache.syncope.core.rest.cxf.service\")\n-@PropertySource(\"classpath:errorMessages.properties\")\n-@Configuration\n-public class RESTCXFContext {\n-\n-    @Autowired\n-    private Bus bus;\n-\n-    @Autowired\n-    private ApplicationContext ctx;\n-\n-    @Bean\n-    public Executor batchExecutor() {\n-        ThreadPoolTaskExecutor batchExecutor = new ThreadPoolTaskExecutor();\n-        batchExecutor.setCorePoolSize(10);\n-        batchExecutor.setThreadNamePrefix(\"Batch-\");\n-        batchExecutor.initialize();\n-        return batchExecutor;\n-    }\n-\n-    @Bean\n-    public DateParamConverterProvider dateParamConverterProvider() {\n-        return new DateParamConverterProvider();\n-    }\n-\n-    @Bean\n-    public JacksonJsonProvider jsonProvider() {\n-        JacksonJsonProvider jsonProvider = new JacksonJsonProvider();\n-        jsonProvider.setMapper(new SyncopeObjectMapper());\n-        return jsonProvider;\n-    }\n-\n-    @Bean\n-    public JacksonXMLProvider xmlProvider() {\n-        JacksonXMLProvider xmlProvider = new JacksonXMLProvider();\n-        xmlProvider.setMapper(new SyncopeXmlMapper());\n-        return xmlProvider;\n-    }\n-\n-    @Bean\n-    public JacksonYAMLProvider yamlProvider() {\n-        JacksonYAMLProvider yamlProvider = new JacksonYAMLProvider();\n-        yamlProvider.setMapper(new SyncopeYAMLMapper());\n-        return yamlProvider;\n-    }\n-\n-    @Bean\n-    public BeanValidationProvider validationProvider() {\n-        return new BeanValidationProvider();\n-    }\n-\n-    @Bean\n-    public JAXRSBeanValidationInInterceptor validationInInterceptor() {\n-        JAXRSBeanValidationInInterceptor validationInInterceptor = new JAXRSBeanValidationInInterceptor();\n-        validationInInterceptor.setProvider(validationProvider());\n-        return validationInInterceptor;\n-    }\n-\n-    @Bean\n-    public GZIPInInterceptor gzipInInterceptor() {\n-        return new GZIPInInterceptor();\n-    }\n-\n-    @Bean\n-    public GZIPOutInterceptor gzipOutInterceptor() {\n-        GZIPOutInterceptor gzipOutInterceptor = new GZIPOutInterceptor();\n-        gzipOutInterceptor.setThreshold(0);\n-        gzipOutInterceptor.setForce(true);\n-        return gzipOutInterceptor;\n-    }\n-\n-    @Bean\n-    public RestServiceExceptionMapper restServiceExceptionMapper() {\n-        return new RestServiceExceptionMapper();\n-    }\n-\n-    @Bean\n-    public SearchContextProvider searchContextProvider() {\n-        return new SearchContextProvider();\n-    }\n-\n-    @Bean\n-    public CheckDomainFilter checkDomainFilter() {\n-        return new CheckDomainFilter();\n-    }\n-\n-    @Bean\n-    public AddDomainFilter addDomainFilter() {\n-        return new AddDomainFilter();\n-    }\n-\n-    @Bean\n-    public AddETagFilter addETagFilter() {\n-        return new AddETagFilter();\n-    }\n-\n-    private String version() {\n-        return ctx.getEnvironment().getProperty(\"version\");\n-    }\n-\n-    @Bean\n-    public OpenApiFeature openapiFeature() {\n-        OpenApiFeature openapiFeature = new OpenApiFeature();\n-        openapiFeature.setTitle(\"Apache Syncope\");\n-        openapiFeature.setVersion(version());\n-        openapiFeature.setDescription(\"Apache Syncope \" + version());\n-        openapiFeature.setContactName(\"The Apache Syncope community\");\n-        openapiFeature.setContactEmail(\"dev@syncope.apache.org\");\n-        openapiFeature.setContactUrl(\"http://syncope.apache.org\");\n-        openapiFeature.setScan(false);\n-        openapiFeature.setResourcePackages(Set.of(\"org.apache.syncope.common.rest.api.service\"));\n-\n-        SyncopeOpenApiCustomizer openApiCustomizer = new SyncopeOpenApiCustomizer(ctx.getEnvironment());\n-        openApiCustomizer.setDynamicBasePath(false);\n-        openApiCustomizer.setReplaceTags(false);\n-        openapiFeature.setCustomizer(openApiCustomizer);\n-\n-        Map<String, SecurityScheme> securityDefinitions = new HashMap<>();\n-        SecurityScheme basicAuth = new SecurityScheme();\n-        basicAuth.setType(SecurityScheme.Type.HTTP);\n-        basicAuth.setScheme(\"basic\");\n-        securityDefinitions.put(\"BasicAuthentication\", basicAuth);\n-        SecurityScheme bearer = new SecurityScheme();\n-        bearer.setType(SecurityScheme.Type.HTTP);\n-        bearer.setScheme(\"bearer\");\n-        bearer.setBearerFormat(\"JWT\");\n-        securityDefinitions.put(\"Bearer\", bearer);\n-        openapiFeature.setSecurityDefinitions(securityDefinitions);\n-\n-        return openapiFeature;\n-    }\n-\n-    @Bean\n-    public Server restContainer() {\n-        SpringJAXRSServerFactoryBean restContainer = new SpringJAXRSServerFactoryBean();\n-        restContainer.setBus(bus);\n-        restContainer.setAddress(\"/\");\n-        restContainer.setStaticSubresourceResolution(true);\n-        restContainer.setBasePackages(List.of(\n-                \"org.apache.syncope.common.rest.api.service\",\n-                \"org.apache.syncope.core.rest.cxf.service\"));\n-\n-        Map<String, Object> properties = new HashMap<>();\n-        properties.put(SearchContextImpl.CUSTOM_SEARCH_PARSER_CLASS_PROPERTY, SyncopeFiqlParser.class.getName());\n-        properties.put(SearchUtils.LAX_PROPERTY_MATCH, \"true\");\n-        properties.put(\"convert.wadl.resources.to.dom\", \"false\");\n-        restContainer.setProperties(properties);\n-\n-        restContainer.setProviders(List.of(\n-                dateParamConverterProvider(),\n-                jsonProvider(),\n-                xmlProvider(),\n-                yamlProvider(),\n-                restServiceExceptionMapper(),\n-                searchContextProvider(),\n-                checkDomainFilter(),\n-                addDomainFilter(),\n-                addETagFilter()));\n-\n-        restContainer.setInInterceptors(List.of(\n-                gzipInInterceptor(),\n-                validationInInterceptor()));\n-\n-        restContainer.setOutInterceptors(List.of(gzipOutInterceptor()));\n-\n-        restContainer.setFeatures(List.of(openapiFeature()));\n-\n-        restContainer.setApplicationContext(ctx);\n-        return restContainer.create();\n-    }\n-\n-    @Bean\n-    public ServletListenerRegistrationBean<ServletRequestListener> listenerRegistrationBean() {\n-        ServletListenerRegistrationBean<ServletRequestListener> bean = new ServletListenerRegistrationBean<>();\n-        bean.setListener(new ThreadLocalCleanupListener());\n-        return bean;\n-    }\n-}"},{"sha":"71243cc9552c87daa4b3cfb3c0c09878c6299c8e","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -55,7 +55,6 @@\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.env.Environment;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.dao.UncategorizedDataAccessException;\n@@ -69,9 +68,6 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {\n \n     private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n \n-    @Autowired\n-    private Environment env;\n-\n     private static final String UNIQUE_MSG_KEY = \"UniqueConstraintViolation\";\n \n     private static final Map<String, String> EXCEPTION_CODE_MAP = new HashMap<>() {\n@@ -84,6 +80,12 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception> {\n         }\n     };\n \n+    protected final Environment env;\n+\n+    public RestServiceExceptionMapper(final Environment env) {\n+        this.env = env;\n+    }\n+\n     @Override\n     public Response toResponse(final Exception ex) {\n         LOG.error(\"Exception thrown\", ex);\n@@ -170,7 +172,7 @@ private static ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeCl\n     }\n \n     private static ResponseBuilder getSyncopeClientCompositeExceptionResponse(\n-        final SyncopeClientCompositeException ex) {\n+            final SyncopeClientCompositeException ex) {\n         if (ex.getExceptions().size() == 1) {\n             return getSyncopeClientExceptionResponse(ex.getExceptions().iterator().next());\n         }\n@@ -317,6 +319,6 @@ private String getPersistenceErrorMessage(final Throwable ex) {\n         }\n \n         return Optional.ofNullable(message)\n-            .orElseGet(() -> (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage());\n+                .orElseGet(() -> (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage());\n     }\n }"},{"sha":"2eb2cda6326f06351ab30f2b5eb61f12475c6f19","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -52,12 +52,16 @@\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n public abstract class AbstractAnyService<TO extends AnyTO, CR extends AnyCR, UR extends AnyUR>\n-        extends AbstractServiceImpl\n-        implements AnyService<TO> {\n+        extends AbstractSearchService implements AnyService<TO> {\n+\n+    public AbstractAnyService(final SearchCondVisitor searchCondVisitor) {\n+        super(searchCondVisitor);\n+    }\n \n     protected abstract AnyDAO<?> getAnyDAO();\n \n@@ -158,7 +162,7 @@ protected Response doUpdate(final UR updateReq) {\n         return modificationResponse(updated);\n     }\n \n-    private void addUpdateOrReplaceAttr(\n+    protected void addUpdateOrReplaceAttr(\n             final String key, final SchemaType schemaType, final Attr attrTO, final PatchOperation operation) {\n \n         if (attrTO.getSchema() == null) {"},{"sha":"db8128b2830ae05d4885e58b05e710fd5f4006fb","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractExecutableService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractExecutableService.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.core.logic.AbstractExecutableLogic;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n-public abstract class AbstractExecutableService extends AbstractServiceImpl implements ExecutableService {\n+public abstract class AbstractExecutableService extends AbstractService implements ExecutableService {\n \n     protected abstract AbstractExecutableLogic<?> getExecutableLogic();\n "},{"sha":"28537e08273eb0ee6a4f5ec10e95679a09ab2623","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractSearchService.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractSearchService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractSearchService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractSearchService.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import static org.apache.syncope.core.rest.cxf.service.AbstractService.LOG;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+\n+public abstract class AbstractSearchService extends AbstractService {\n+\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    public AbstractSearchService(final SearchCondVisitor searchCondVisitor) {\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n+\n+    protected SearchCond getSearchCond(final String fiql, final String realm) {\n+        try {\n+            searchCondVisitor.setRealm(realm);\n+            SearchCondition<SearchBean> sc = searchContext.getCondition(fiql, SearchBean.class);\n+            sc.accept(searchCondVisitor);\n+\n+            return searchCondVisitor.getQuery();\n+        } catch (Exception e) {\n+            LOG.error(\"Invalid FIQL expression: {}\", fiql, e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(fiql);\n+            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n+            throw sce;\n+        }\n+    }\n+}"},{"sha":"ac8a766e496c12f68357a11e69328a55428dec69","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractService.java","status":"renamed","additions":2,"deletions":28,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractService.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,10 +28,7 @@\n import javax.ws.rs.core.UriInfo;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n-import org.apache.cxf.jaxrs.ext.search.SearchBean;\n-import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n import org.apache.cxf.jaxrs.ext.search.SearchContext;\n import org.apache.syncope.common.lib.BaseBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -43,16 +40,13 @@\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n-import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n-public abstract class AbstractServiceImpl implements JAXRSService {\n+public abstract class AbstractService implements JAXRSService {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractService.class);\n \n     protected static final String OPTIONS_ALLOW = \"GET,POST,OPTIONS,HEAD\";\n \n@@ -65,9 +59,6 @@ public abstract class AbstractServiceImpl implements JAXRSService {\n     @Context\n     protected SearchContext searchContext;\n \n-    @Autowired\n-    protected SearchCondVisitor searchCondVisitor;\n-\n     protected String getActualKey(final AnyDAO<?> dao, final String pretendingKey) {\n         String actualKey = pretendingKey;\n         if (!SyncopeConstants.UUID_PATTERN.matcher(pretendingKey).matches()) {\n@@ -163,23 +154,6 @@ protected void checkETag(final String etag) {\n         }\n     }\n \n-    protected SearchCond getSearchCond(final String fiql, final String realm) {\n-        try {\n-            searchCondVisitor.setRealm(realm);\n-            SearchCondition<SearchBean> sc = searchContext.getCondition(fiql, SearchBean.class);\n-            sc.accept(searchCondVisitor);\n-\n-            return searchCondVisitor.getQuery();\n-        } catch (Exception e) {\n-            LOG.error(\"Invalid FIQL expression: {}\", fiql, e);\n-\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n-            sce.getElements().add(fiql);\n-            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n-            throw sce;\n-        }\n-    }\n-\n     protected List<OrderByClause> getOrderByClauses(final String orderBy) {\n         if (StringUtils.isBlank(orderBy)) {\n             return List.of();","previous_filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java"},{"sha":"c1b80b8144f3b496f841f8ade80d2076cd78a1cb","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,13 +30,15 @@\n import org.springframework.stereotype.Service;\n import org.apache.syncope.common.rest.api.service.AccessTokenService;\n import org.apache.syncope.core.logic.AccessTokenLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n @Service\n-public class AccessTokenServiceImpl extends AbstractServiceImpl implements AccessTokenService {\n+public class AccessTokenServiceImpl extends AbstractService implements AccessTokenService {\n \n-    @Autowired\n-    private AccessTokenLogic logic;\n+    protected final AccessTokenLogic logic;\n+\n+    public AccessTokenServiceImpl(final AccessTokenLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response login() {"},{"sha":"b63643aedc326e9ceb2880f46460a1e458d68ad4","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,18 +34,26 @@\n import org.apache.syncope.core.logic.AnyObjectLogic;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.springframework.stereotype.Service;\n \n @Service\n public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectCR, AnyObjectUR>\n         implements AnyObjectService {\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private AnyObjectLogic logic;\n+    protected final AnyObjectLogic logic;\n+\n+    public AnyObjectServiceImpl(\n+            final SearchCondVisitor searchCondVisitor,\n+            final AnyObjectDAO anyObjectDAO,\n+            final AnyObjectLogic logic) {\n+\n+        super(searchCondVisitor);\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.logic = logic;\n+    }\n \n     @Override\n     protected AnyDAO<?> getAnyDAO() {"},{"sha":"34dee574986a8a57fe1d9323f15a777428a47ba7","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeClassServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeClassServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeClassServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeClassServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.core.logic.AnyTypeClassLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AnyTypeClassServiceImpl extends AbstractServiceImpl implements AnyTypeClassService {\n+public class AnyTypeClassServiceImpl extends AbstractService implements AnyTypeClassService {\n \n-    @Autowired\n-    private AnyTypeClassLogic logic;\n+    protected final AnyTypeClassLogic logic;\n+\n+    public AnyTypeClassServiceImpl(final AnyTypeClassLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<AnyTypeClassTO> list() {"},{"sha":"1423e61dc45d03c8f6f3883de78f4e75e0d55927","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyTypeServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyTypeServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.core.logic.AnyTypeLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AnyTypeServiceImpl extends AbstractServiceImpl implements AnyTypeService {\n+public class AnyTypeServiceImpl extends AbstractService implements AnyTypeService {\n \n-    @Autowired\n-    private AnyTypeLogic logic;\n+    protected final AnyTypeLogic logic;\n+\n+    public AnyTypeServiceImpl(final AnyTypeLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<AnyTypeTO> list() {"},{"sha":"e9e7bf5fcffcc6f1b7e5e3a9973a20568b76e938","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ApplicationServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FApplicationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FApplicationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FApplicationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,14 +26,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ApplicationService;\n import org.apache.syncope.core.logic.ApplicationLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ApplicationServiceImpl extends AbstractServiceImpl implements ApplicationService {\n+public class ApplicationServiceImpl extends AbstractService implements ApplicationService {\n \n-    @Autowired\n-    private ApplicationLogic logic;\n+    protected final ApplicationLogic logic;\n+\n+    public ApplicationServiceImpl(final ApplicationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<ApplicationTO> list() {"},{"sha":"d094591818fc1a8c58f9a9f3b92acce72a6133ea","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuditServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,14 +27,16 @@\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.syncope.core.logic.AuditLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AuditServiceImpl extends AbstractServiceImpl implements AuditService {\n+public class AuditServiceImpl extends AbstractService implements AuditService {\n \n-    @Autowired\n-    private AuditLogic logic;\n+    protected final AuditLogic logic;\n+\n+    public AuditServiceImpl(final AuditLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<AuditConfTO> list() {"},{"sha":"68465b103c47683797f8f845f594bc3d44e71116","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DelegationServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDelegationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDelegationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDelegationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.DelegationService;\n import org.apache.syncope.core.logic.DelegationLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class DelegationServiceImpl extends AbstractServiceImpl implements DelegationService {\n+public class DelegationServiceImpl extends AbstractService implements DelegationService {\n \n-    @Autowired\n-    private DelegationLogic logic;\n+    protected final DelegationLogic logic;\n+\n+    public DelegationServiceImpl(final DelegationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<DelegationTO> list() {"},{"sha":"af3bdfa96ca0845243229cf789ae6e4b9508cad0","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DynRealmServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDynRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDynRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDynRealmServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.core.logic.DynRealmLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class DynRealmServiceImpl extends AbstractServiceImpl implements DynRealmService {\n+public class DynRealmServiceImpl extends AbstractService implements DynRealmService {\n \n-    @Autowired\n-    private DynRealmLogic logic;\n+    protected final DynRealmLogic logic;\n+\n+    public DynRealmServiceImpl(final DynRealmLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<DynRealmTO> list() {"},{"sha":"391b2a1990d566cc0b16239053bc8d27d93d7d59","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,17 +31,25 @@\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.springframework.stereotype.Service;\n \n @Service\n public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupCR, GroupUR> implements GroupService {\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private GroupLogic logic;\n+    protected final GroupLogic logic;\n+\n+    public GroupServiceImpl(\n+            final SearchCondVisitor searchCondVisitor,\n+            final GroupDAO groupDAO,\n+            final GroupLogic logic) {\n+\n+        super(searchCondVisitor);\n+        this.groupDAO = groupDAO;\n+        this.logic = logic;\n+    }\n \n     @Override\n     protected AnyDAO<?> getAnyDAO() {"},{"sha":"fc99d125e77db5054e6b0ce6f303fb6ab3f9d242","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ImplementationServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FImplementationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.core.logic.ImplementationLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ImplementationServiceImpl extends AbstractServiceImpl implements ImplementationService {\n+public class ImplementationServiceImpl extends AbstractService implements ImplementationService {\n \n-    @Autowired\n-    private ImplementationLogic logic;\n+    protected final ImplementationLogic logic;\n+\n+    public ImplementationServiceImpl(final ImplementationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<ImplementationTO> list(final String type) {"},{"sha":"843b2ff1bddb12f3d1a1f654503a843e0bfcc5cd","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FMailTemplateServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FMailTemplateServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FMailTemplateServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,14 +32,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n import org.apache.syncope.core.logic.MailTemplateLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class MailTemplateServiceImpl extends AbstractServiceImpl implements MailTemplateService {\n+public class MailTemplateServiceImpl extends AbstractService implements MailTemplateService {\n \n-    @Autowired\n-    private MailTemplateLogic logic;\n+    protected final MailTemplateLogic logic;\n+\n+    public MailTemplateServiceImpl(final MailTemplateLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final MailTemplateTO mailTemplateTO) {"},{"sha":"33302733a78959d901b533c683a196baf931d801","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/NotificationServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FNotificationServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,14 +27,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.logic.NotificationLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class NotificationServiceImpl extends AbstractServiceImpl implements NotificationService {\n+public class NotificationServiceImpl extends AbstractService implements NotificationService {\n \n-    @Autowired\n-    private NotificationLogic logic;\n+    protected final NotificationLogic logic;\n+\n+    public NotificationServiceImpl(final NotificationLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final NotificationTO notificationTO) {"},{"sha":"7280ab48ea20a0c51f367669e6dacc8c95e69ce8","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,14 +26,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.core.logic.PolicyLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyService {\n+public class PolicyServiceImpl extends AbstractService implements PolicyService {\n \n-    @Autowired\n-    private PolicyLogic logic;\n+    protected final PolicyLogic logic;\n+\n+    public PolicyServiceImpl(final PolicyLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final PolicyType type, final PolicyTO policyTO) {"},{"sha":"5bed0d6f363503dc6557405c50a04879792f0935","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,14 +31,16 @@\n import org.apache.syncope.common.rest.api.beans.RealmQuery;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.logic.RealmLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class RealmServiceImpl extends AbstractServiceImpl implements RealmService {\n+public class RealmServiceImpl extends AbstractService implements RealmService {\n \n-    @Autowired\n-    private RealmLogic logic;\n+    protected final RealmLogic logic;\n+\n+    public RealmServiceImpl(final RealmLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public PagedResult<RealmTO> search(final RealmQuery query) {"},{"sha":"c30d8a5c88006a234bc0633492030f45adbd89ec","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RelationshipTypeServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRelationshipTypeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRelationshipTypeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRelationshipTypeServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.syncope.core.logic.RelationshipTypeLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class RelationshipTypeServiceImpl extends AbstractServiceImpl implements RelationshipTypeService {\n+public class RelationshipTypeServiceImpl extends AbstractService implements RelationshipTypeService {\n \n-    @Autowired\n-    private RelationshipTypeLogic logic;\n+    protected final RelationshipTypeLogic logic;\n+\n+    public RelationshipTypeServiceImpl(final RelationshipTypeLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<RelationshipTypeTO> list() {"},{"sha":"8f2de8be60f22f7d9dc34b1eb75d34769e2b9e18","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,14 +32,16 @@\n import org.apache.syncope.core.logic.AbstractExecutableLogic;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportServiceImpl extends AbstractExecutableService implements ReportService {\n \n-    @Autowired\n-    private ReportLogic logic;\n+    protected final ReportLogic logic;\n+\n+    public ReportServiceImpl(final ReportLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     protected AbstractExecutableLogic<?> getExecutableLogic() {"},{"sha":"a90160b4a276567f593f9c340537dfa8ecfb6eb6","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportTemplateServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportTemplateServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportTemplateServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,14 +33,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ReportTemplateService;\n import org.apache.syncope.core.logic.ReportTemplateLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class ReportTemplateServiceImpl extends AbstractServiceImpl implements ReportTemplateService {\n+public class ReportTemplateServiceImpl extends AbstractService implements ReportTemplateService {\n \n-    @Autowired\n-    private ReportTemplateLogic logic;\n+    protected final ReportTemplateLogic logic;\n+\n+    public ReportTemplateServiceImpl(final ReportTemplateLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final ReportTemplateTO reportTemplateTO) {"},{"sha":"6f610c25d857abb457870628a6f61398e8c94fec","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RoleServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRoleServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,14 +32,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.core.logic.RoleLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class RoleServiceImpl extends AbstractServiceImpl implements RoleService {\n+public class RoleServiceImpl extends AbstractService implements RoleService {\n \n-    @Autowired\n-    private RoleLogic logic;\n+    protected final RoleLogic logic;\n+\n+    public RoleServiceImpl(final RoleLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<RoleTO> list() {"},{"sha":"2a4bd881065df83376ef9bbbc7b4b30ee773a4ad","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,14 +27,16 @@\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.core.logic.SchemaLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaService {\n+public class SchemaServiceImpl extends AbstractService implements SchemaService {\n \n-    @Autowired\n-    private SchemaLogic logic;\n+    protected final SchemaLogic logic;\n+\n+    public SchemaServiceImpl(final SchemaLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public Response create(final SchemaType schemaType, final SchemaTO schemaTO) {"},{"sha":"030cd6e5134f4f5d16a114bf4c3b62befb6b47b9","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SecurityQuestionServiceImpl.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSecurityQuestionServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSecurityQuestionServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSecurityQuestionServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,14 +25,16 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.SecurityQuestionService;\n import org.apache.syncope.core.logic.SecurityQuestionLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class SecurityQuestionServiceImpl extends AbstractServiceImpl implements SecurityQuestionService {\n+public class SecurityQuestionServiceImpl extends AbstractService implements SecurityQuestionService {\n \n-    @Autowired\n-    private SecurityQuestionLogic logic;\n+    protected final SecurityQuestionLogic logic;\n+\n+    public SecurityQuestionServiceImpl(final SecurityQuestionLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     public List<SecurityQuestionTO> list() {"},{"sha":"4d7c1e22a1ab1a5ccb72f879485488effcadc16b","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,7 +22,6 @@\n import java.io.InputStream;\n import java.util.Date;\n import java.util.List;\n-import javax.annotation.Resource;\n import javax.ws.rs.InternalServerErrorException;\n import javax.ws.rs.NotFoundException;\n import javax.ws.rs.core.HttpHeaders;\n@@ -48,7 +47,6 @@\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.logic.SyncopeLogic;\n import org.apache.syncope.core.rest.cxf.batch.BatchProcess;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n import org.apache.syncope.core.persistence.api.entity.Batch;\n@@ -59,24 +57,33 @@\n import org.springframework.security.core.context.SecurityContextHolder;\n \n @Service\n-public class SyncopeServiceImpl extends AbstractServiceImpl implements SyncopeService {\n+public class SyncopeServiceImpl extends AbstractService implements SyncopeService {\n \n     private static final String CONTENT_XML = \"Content.xml\";\n \n-    @Resource(name = \"batchExecutor\")\n-    private ThreadPoolTaskExecutor batchExecutor;\n+    protected final SyncopeLogic logic;\n \n-    @Autowired\n-    private SyncopeLogic logic;\n+    protected final ThreadPoolTaskExecutor batchExecutor;\n \n-    @Autowired\n-    private Bus bus;\n+    protected final Bus bus;\n \n-    @Autowired\n-    private BatchDAO batchDAO;\n+    protected final BatchDAO batchDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public SyncopeServiceImpl(\n+            final SyncopeLogic logic,\n+            final ThreadPoolTaskExecutor batchExecutor,\n+            final Bus bus,\n+            final BatchDAO batchDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.logic = logic;\n+        this.batchExecutor = batchExecutor;\n+        this.bus = bus;\n+        this.batchDAO = batchDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public PagedResult<GroupTO> searchAssignableGroups("},{"sha":"9b32cb4746ee00f9a96466b690ce983f50dca9c5","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,15 +34,17 @@\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.logic.AbstractExecutableLogic;\n import org.apache.syncope.core.logic.TaskLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n import org.springframework.util.CollectionUtils;\n \n @Service\n public class TaskServiceImpl extends AbstractExecutableService implements TaskService {\n \n-    @Autowired\n-    private TaskLogic logic;\n+    protected final TaskLogic logic;\n+\n+    public TaskServiceImpl(final TaskLogic logic) {\n+        this.logic = logic;\n+    }\n \n     @Override\n     protected AbstractExecutableLogic<?> getExecutableLogic() {"},{"sha":"2c872760f95157f23a8ca57d751a52b9b21887b6","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,17 +32,19 @@\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.core.logic.SyncopeLogic;\n import org.apache.syncope.core.logic.UserLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelfService {\n+public class UserSelfServiceImpl extends AbstractService implements UserSelfService {\n \n-    @Autowired\n-    private UserLogic logic;\n+    protected final UserLogic logic;\n \n-    @Autowired\n-    private SyncopeLogic syncopeLogic;\n+    protected final SyncopeLogic syncopeLogic;\n+\n+    public UserSelfServiceImpl(final UserLogic logic, final SyncopeLogic syncopeLogic) {\n+        this.logic = logic;\n+        this.syncopeLogic = syncopeLogic;\n+    }\n \n     @Override\n     public Response create(final UserCR createReq) {"},{"sha":"4c51698b359ecf53641b71a0ee16849676b5b9e1","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,17 +30,25 @@\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.springframework.stereotype.Service;\n \n @Service\n public class UserServiceImpl extends AbstractAnyService<UserTO, UserCR, UserUR> implements UserService {\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private UserLogic logic;\n+    protected final UserLogic logic;\n+\n+    public UserServiceImpl(\n+            final SearchCondVisitor searchCondVisitor,\n+            final UserDAO userDAO,\n+            final UserLogic logic) {\n+\n+        super(searchCondVisitor);\n+        this.userDAO = userDAO;\n+        this.logic = logic;\n+    }\n \n     @Override\n     protected AnyDAO<?> getAnyDAO() {"},{"sha":"a9f7ef8ea51b60c839de9fc43bafac3007a28a10","filename":"core/idrepo/rest-cxf/src/main/resources/META-INF/spring.factories","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -16,4 +16,4 @@\n # under the License.\n \n org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n-  org.apache.syncope.core.rest.cxf.RESTCXFContext\n+  org.apache.syncope.core.rest.cxf.IdRepoRESTCXFContext"},{"sha":"2d30c955c5b8116787b9b29c8527e4e2bcbc3e0c","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceTest.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -86,7 +86,7 @@\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n import org.springframework.test.util.ReflectionTestUtils;\n \n-@SpringJUnitConfig(classes = { RESTCXFTestContext.class })\n+@SpringJUnitConfig(classes = { IdRepoRESTCXFTestContext.class })\n public class AnyObjectServiceTest {\n \n     private static final String LOCAL_ADDRESS = \"local://anyObjects\";\n@@ -178,10 +178,7 @@ public void setup() {\n             when(request.evaluatePreconditions(any(Date.class))).thenReturn(Response.notModified());\n             when(messageContext.getRequest()).thenReturn(request);\n \n-            AnyObjectServiceImpl service = new AnyObjectServiceImpl();\n-            ReflectionTestUtils.setField(service, \"anyObjectDAO\", anyObjectDAO);\n-            ReflectionTestUtils.setField(service, \"logic\", logic);\n-            ReflectionTestUtils.setField(service, \"searchCondVisitor\", searchCondVisitor);\n+            AnyObjectServiceImpl service = new AnyObjectServiceImpl(searchCondVisitor, anyObjectDAO, logic);\n             ReflectionTestUtils.setField(service, \"searchContext\", searchContext);\n             ReflectionTestUtils.setField(service, \"uriInfo\", uriInfo);\n             ReflectionTestUtils.setField(service, \"messageContext\", messageContext);"},{"sha":"cd30151fb892ddb0a5f880080f90b42bd33abfe9","filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/IdRepoRESTCXFTestContext.java","status":"renamed","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FIdRepoRESTCXFTestContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,11 +32,16 @@\n import org.apache.syncope.common.lib.jackson.SyncopeObjectMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeXmlMapper;\n import org.apache.syncope.common.lib.jackson.SyncopeYAMLMapper;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n \n @Configuration\n-public class RESTCXFTestContext {\n+public class IdRepoRESTCXFTestContext {\n+\n+    @Autowired\n+    private Environment env;\n \n     @Bean\n     public DateParamConverterProvider dateParamConverterProvider() {\n@@ -91,7 +96,7 @@ public GZIPOutInterceptor gzipOutInterceptor() {\n \n     @Bean\n     public RestServiceExceptionMapper restServiceExceptionMapper() {\n-        return new RestServiceExceptionMapper();\n+        return new RestServiceExceptionMapper(env);\n     }\n \n     @Bean","previous_filename":"core/idrepo/rest-cxf/src/test/java/org/apache/syncope/core/rest/cxf/service/RESTCXFTestContext.java"},{"sha":"682630b722ab5ae703c2b692f4c33e7d423f14e2","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -217,7 +217,7 @@ under the License.\n \n     <profile>\n       <id>pgjsonb</id>\n-      \n+\n       <dependencies>\n         <dependency>\n           <groupId>org.postgresql</groupId>\n@@ -266,6 +266,7 @@ under the License.\n               </includes>\n               <excludedGroups>multitenancy,plainAttrTable</excludedGroups>\n               <systemProperties>\n+                <profileId>${project.activeProfiles[0].id}</profileId>\n                 <CORE_PROPERTIES>classpath:core-pgjsonb.properties,classpath:core-pgjsonb-test.properties</CORE_PROPERTIES>\n                 <DB_CONTAINER_IP>${docker.container.postgres.ip}</DB_CONTAINER_IP>\n               </systemProperties>\n@@ -281,6 +282,7 @@ under the License.\n                   <alias>postgres</alias>\n                   <name>postgres:${docker.postgresql.version}</name>\n                   <run>\n+                    <cmd>postgres -N 200</cmd>\n                     <env>\n                       <POSTGRES_DB>syncope</POSTGRES_DB>\n                       <POSTGRES_USER>syncope</POSTGRES_USER>\n@@ -377,6 +379,7 @@ under the License.\n               </includes>\n               <excludedGroups>multitenancy,plainAttrTable</excludedGroups>\n               <systemProperties>\n+                <profileId>${project.activeProfiles[0].id}</profileId>\n                 <CORE_PROPERTIES>classpath:core-myjson.properties,classpath:core-myjson-test.properties</CORE_PROPERTIES>\n                 <DB_CONTAINER_IP>${docker.container.mysql.ip}</DB_CONTAINER_IP>\n               </systemProperties>"},{"sha":"b07658ba3101d1f238374c8a49dfcd481818a6f4","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/JPAJSONPersistenceContext.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+public abstract class JPAJSONPersistenceContext {\n+\n+    @Autowired\n+    protected ApplicationEventPublisher publisher;\n+\n+    @Autowired\n+    protected SecurityProperties securityProperties;\n+\n+    @ConditionalOnMissingBean(name = \"jpaJSONAnyObjectDAO\")\n+    @Bean\n+    @Autowired\n+    public AnyObjectDAO anyObjectDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy DerSchemaDAO derSchemaDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy JPAJSONAnyDAO anyDAO) {\n+\n+        return new JPAJSONAnyObjectDAO(\n+                anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyDAO);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"jpaJSONGroupDAO\")\n+    @Bean\n+    @Autowired\n+    public GroupDAO groupDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy DerSchemaDAO derSchemaDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy AnyMatchDAO anyMatchDAO,\n+            final @Lazy PlainAttrDAO plainAttrDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final @Lazy AnySearchDAO anySearchDAO,\n+            final SearchCondVisitor searchCondVisitor,\n+            final @Lazy JPAJSONAnyDAO anyDAO) {\n+\n+        return new JPAJSONGroupDAO(\n+                anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                anyMatchDAO,\n+                plainAttrDAO,\n+                userDAO,\n+                anyObjectDAO,\n+                anySearchDAO,\n+                searchCondVisitor,\n+                anyDAO);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"jpaJSONPlainAttrDAO\")\n+    @Bean\n+    public PlainAttrDAO plainAttrDAO() {\n+        return new JPAJSONPlainAttrDAO();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"jpaJSONPlainAttrValueDAO\")\n+    @Bean\n+    public PlainAttrValueDAO plainAttrValueDAO() {\n+        return new JPAJSONPlainAttrValueDAO();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"jpaJSONUserDAO\")\n+    @Bean\n+    @Autowired\n+    public UserDAO userDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy DerSchemaDAO derSchemaDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy RoleDAO roleDAO,\n+            final @Lazy AccessTokenDAO accessTokenDAO,\n+            final @Lazy RealmDAO realmDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy DelegationDAO delegationDAO,\n+            final @Lazy JPAJSONAnyDAO anyDAO) {\n+\n+        return new JPAJSONUserDAO(\n+                anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                roleDAO,\n+                accessTokenDAO,\n+                realmDAO,\n+                groupDAO,\n+                delegationDAO,\n+                securityProperties,\n+                anyDAO);\n+    }\n+}"},{"sha":"49e4d639d44fb3b66b2e9f70f2c8f0660e1c0f2d","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/MyJPAJSONPersistenceContext.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMyJPAJSONPersistenceContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditConfDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONPlainSchemaDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.MyJPAJSONEntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Lazy;\n+\n+@ConditionalOnExpression(\"#{!('${provisioning.quartz.delegate}' matches '.*PostgreSQLDelegate.*')}\")\n+public class MyJPAJSONPersistenceContext extends JPAJSONPersistenceContext {\n+\n+    @ConditionalOnMissingBean(name = \"myJPAJSONEntityFactory\")\n+    @Bean\n+    public EntityFactory entityFactory() {\n+        return new MyJPAJSONEntityFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"myJPAJSONAnyDAO\")\n+    @Bean\n+    @Autowired\n+    public JPAJSONAnyDAO anyDAO(final PlainSchemaDAO plainSchemaDAO) {\n+        return new MyJPAJSONAnyDAO(plainSchemaDAO);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"myJPAJSONAnySearchDAO\")\n+    @Bean\n+    @Autowired\n+    public AnySearchDAO anySearchDAO(\n+            final @Lazy RealmDAO realmDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final @Lazy PlainSchemaDAO schemaDAO,\n+            final @Lazy EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        return new MyJPAJSONAnySearchDAO(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"myJPAJSONAuditConfDAO\")\n+    @Bean\n+    public AuditConfDAO auditConfDAO() {\n+        return new MyJPAJSONAuditConfDAO();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"myJPAJSONPlainSchemaDAO\")\n+    @Bean\n+    @Autowired\n+    public PlainSchemaDAO plainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainAttrDAO plainAttrDAO,\n+            final @Lazy ExternalResourceDAO resourceDAO) {\n+\n+        return new MyJPAJSONPlainSchemaDAO(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+}"},{"sha":"be63b58e5061183a194810c219da11af1c97f0a2","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/PGJPAJSONPersistenceContext.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPGJPAJSONPersistenceContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditConfDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONPlainSchemaDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.PGJPAJSONEntityFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Lazy;\n+\n+@ConditionalOnExpression(\"#{'${provisioning.quartz.delegate}' matches '.*PostgreSQLDelegate.*'}\")\n+public class PGJPAJSONPersistenceContext extends JPAJSONPersistenceContext {\n+\n+    @ConditionalOnMissingBean(name = \"pgJPAJSONEntityFactory\")\n+    @Bean\n+    public EntityFactory entityFactory() {\n+        return new PGJPAJSONEntityFactory();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"pgJPAJSONAnyDAO\")\n+    @Bean\n+    @Autowired\n+    public JPAJSONAnyDAO anyDAO(final @Lazy PlainSchemaDAO plainSchemaDAO) {\n+        return new PGJPAJSONAnyDAO(plainSchemaDAO);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"pgJPAJSONAnySearchDAO\")\n+    @Bean\n+    @Autowired\n+    public AnySearchDAO anySearchDAO(\n+            final @Lazy RealmDAO realmDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        return new PGJPAJSONAnySearchDAO(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                plainSchemaDAO,\n+                entityFactory,\n+                anyUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"pgJPAJSONAuditConfDAO\")\n+    @Bean\n+    public AuditConfDAO auditConfDAO() {\n+        return new PGJPAJSONAuditConfDAO();\n+    }\n+\n+    @ConditionalOnMissingBean(name = \"pgJPAJSONPlainSchemaDAO\")\n+    @Bean\n+    @Autowired\n+    public PlainSchemaDAO plainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainAttrDAO plainAttrDAO,\n+            final @Lazy ExternalResourceDAO resourceDAO) {\n+\n+        return new PGJPAJSONPlainSchemaDAO(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+}"},{"sha":"b4a1e01189f8b7e7fd8e048a96802272066cf455","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,13 +48,15 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n abstract class AbstractJPAJSONAnyDAO extends AbstractDAO<AbstractEntity> implements JPAJSONAnyDAO {\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n+\n+    protected AbstractJPAJSONAnyDAO(final PlainSchemaDAO plainSchemaDAO) {\n+        this.plainSchemaDAO = plainSchemaDAO;\n+    }\n \n     protected abstract String queryBegin(String table);\n "},{"sha":"d7bededcbb1ddc096b7d50a48a5086b6b091b3cb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONPlainSchemaDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONPlainSchemaDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,13 +20,24 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n \n abstract class AbstractJPAJSONPlainSchemaDAO extends JPAPlainSchemaDAO {\n \n+    protected AbstractJPAJSONPlainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrDAO plainAttrDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        super(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+\n     @Override\n     public <T extends PlainAttr<?>> List<T> findAttrs(final PlainSchema schema, final Class<T> reference) {\n         // not possible"},{"sha":"3850731365521d29232aa8cc6953ec11340c38a4","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONAnyObjectDAO.java","status":"modified","additions":24,"deletions":11,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONAnyObjectDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,26 +22,39 @@\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAJSONAnyObject;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.context.ApplicationEventPublisher;\n \n public class JPAJSONAnyObjectDAO extends JPAAnyObjectDAO {\n \n-    private JPAJSONAnyDAO anyDAO;\n+    protected final JPAJSONAnyDAO anyDAO;\n \n-    private JPAJSONAnyDAO anyDAO() {\n-        if (anyDAO == null) {\n-            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(JPAJSONAnyDAO.class);\n-        }\n-        return anyDAO;\n+    public JPAJSONAnyObjectDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final JPAJSONAnyDAO anyDAO) {\n+\n+        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO, userDAO, groupDAO);\n+        this.anyDAO = anyDAO;\n     }\n \n     @Override\n@@ -50,7 +63,7 @@ public List<AnyObject> findByPlainAttrValue(\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(\n+        return anyDAO.findByPlainAttrValue(\n                 JPAJSONAnyObject.TABLE, anyUtils(), schema, attrValue, ignoreCaseMatch);\n     }\n \n@@ -60,7 +73,7 @@ public Optional<AnyObject> findByPlainAttrUniqueValue(\n             final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(\n+        return anyDAO.findByPlainAttrUniqueValue(\n                 JPAJSONAnyObject.TABLE, anyUtils(), schema, attrUniqueValue, ignoreCaseMatch);\n     }\n \n@@ -70,7 +83,7 @@ public List<AnyObject> findByDerAttrValue(\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(JPAJSONAnyObject.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n+        return anyDAO.findByDerAttrValue(JPAJSONAnyObject.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n     @Override\n@@ -90,7 +103,7 @@ protected Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject\n \n     @Override\n     public AnyObject save(final AnyObject anyObject) {\n-        anyDAO().checkBeforeSave(JPAJSONAnyObject.TABLE, anyUtils(), anyObject);\n+        anyDAO.checkBeforeSave(JPAJSONAnyObject.TABLE, anyUtils(), anyObject);\n         return super.save(anyObject);\n     }\n }"},{"sha":"1702103d803d39ae095c67556239d9e86155f65d","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONGroupDAO.java","status":"modified","additions":42,"deletions":11,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONGroupDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,24 +20,55 @@\n \n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.springframework.context.ApplicationEventPublisher;\n \n public class JPAJSONGroupDAO extends JPAGroupDAO {\n \n-    private JPAJSONAnyDAO anyDAO;\n+    protected final JPAJSONAnyDAO anyDAO;\n \n-    private JPAJSONAnyDAO anyDAO() {\n-        if (anyDAO == null) {\n-            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(JPAJSONAnyDAO.class);\n-        }\n-        return anyDAO;\n+    public JPAJSONGroupDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final UserDAO userDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO searchDAO,\n+            final SearchCondVisitor searchCondVisitor,\n+            final JPAJSONAnyDAO anyDAO) {\n+\n+        super(anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                anyMatchDAO,\n+                plainAttrDAO,\n+                userDAO,\n+                anyObjectDAO,\n+                searchDAO,\n+                searchCondVisitor);\n+        this.anyDAO = anyDAO;\n     }\n \n     @Override\n@@ -46,7 +77,7 @@ public List<Group> findByPlainAttrValue(\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(\n+        return anyDAO.findByPlainAttrValue(\n                 JPAGroup.TABLE, anyUtils(), schema, attrValue, ignoreCaseMatch);\n     }\n \n@@ -56,7 +87,7 @@ public Optional<Group> findByPlainAttrUniqueValue(\n             final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(\n+        return anyDAO.findByPlainAttrUniqueValue(\n                 JPAGroup.TABLE, anyUtils(), schema, attrUniqueValue, ignoreCaseMatch);\n     }\n \n@@ -66,12 +97,12 @@ public List<Group> findByDerAttrValue(\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(JPAGroup.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n+        return anyDAO.findByDerAttrValue(JPAGroup.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n     @Override\n     public Group save(final Group group) {\n-        anyDAO().checkBeforeSave(JPAGroup.TABLE, anyUtils(), group);\n+        anyDAO.checkBeforeSave(JPAGroup.TABLE, anyUtils(), group);\n         return super.save(group);\n     }\n }"},{"sha":"1347ad65b11a8043ec236d03c0b523ba76bf4546","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":44,"deletions":13,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,27 +23,58 @@\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.springframework.context.ApplicationEventPublisher;\n \n public class JPAJSONUserDAO extends JPAUserDAO {\n \n-    private JPAJSONAnyDAO anyDAO;\n-\n-    private JPAJSONAnyDAO anyDAO() {\n-        if (anyDAO == null) {\n-            anyDAO = ApplicationContextProvider.getApplicationContext().getBean(JPAJSONAnyDAO.class);\n-        }\n-        return anyDAO;\n+    protected final JPAJSONAnyDAO anyDAO;\n+\n+    public JPAJSONUserDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final RoleDAO roleDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final RealmDAO realmDAO,\n+            final GroupDAO groupDAO,\n+            final DelegationDAO delegationDAO,\n+            final SecurityProperties securityProperties,\n+            final JPAJSONAnyDAO anyDAO) {\n+\n+        super(anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                roleDAO,\n+                accessTokenDAO,\n+                realmDAO,\n+                groupDAO,\n+                delegationDAO,\n+                securityProperties);\n+        this.anyDAO = anyDAO;\n     }\n \n     @Override\n@@ -52,7 +83,7 @@ public List<User> findByPlainAttrValue(\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrValue(\n+        return anyDAO.findByPlainAttrValue(\n                 JPAJSONUser.TABLE, anyUtils(), schema, attrValue, ignoreCaseMatch);\n     }\n \n@@ -62,7 +93,7 @@ public Optional<User> findByPlainAttrUniqueValue(\n             final PlainAttrUniqueValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByPlainAttrUniqueValue(\n+        return anyDAO.findByPlainAttrUniqueValue(\n                 JPAJSONUser.TABLE, anyUtils(), schema, attrUniqueValue, ignoreCaseMatch);\n     }\n \n@@ -72,7 +103,7 @@ public List<User> findByDerAttrValue(\n             final String value,\n             final boolean ignoreCaseMatch) {\n \n-        return anyDAO().findByDerAttrValue(JPAJSONUser.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n+        return anyDAO.findByDerAttrValue(JPAJSONUser.TABLE, anyUtils(), schema, value, ignoreCaseMatch);\n     }\n \n     @Override\n@@ -108,13 +139,13 @@ protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n \n     @Override\n     public User save(final User user) {\n-        anyDAO().checkBeforeSave(JPAJSONUser.TABLE, anyUtils(), user);\n+        anyDAO.checkBeforeSave(JPAJSONUser.TABLE, anyUtils(), user);\n         return super.save(user);\n     }\n \n     @Override\n     public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final User user) {\n-        anyDAO().checkBeforeSave(JPAJSONUser.TABLE, anyUtils(), user);\n+        anyDAO.checkBeforeSave(JPAJSONUser.TABLE, anyUtils(), user);\n         return super.saveAndGetDynGroupMembs(user);\n     }\n }"},{"sha":"55558113d58c13ac31138af1ce262aeda23e3280","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnyDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,6 +22,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n@@ -32,6 +33,10 @@\n \n public class MyJPAJSONAnyDAO extends AbstractJPAJSONAnyDAO {\n \n+    public MyJPAJSONAnyDAO(final PlainSchemaDAO plainSchemaDAO) {\n+        super(plainSchemaDAO);\n+    }\n+\n     @Override\n     protected String queryBegin(final String table) {\n         String view = StringUtils.containsIgnoreCase(table, AnyTypeKind.USER.name())"},{"sha":"d3a83a983daa8bffa813fe63db9147be3da190a7","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,10 +24,18 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -37,6 +45,19 @@\n \n public class MyJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n \n+    public MyJPAJSONAnySearchDAO(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final PlainSchemaDAO schemaDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, schemaDAO, entityFactory, anyUtilsFactory);\n+    }\n+\n     @Override\n     protected void processOBS(\n             final SearchSupport svs,"},{"sha":"3e1d642f16b7e7abd004d364cf8703e126759357","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONPlainSchemaDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONPlainSchemaDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,11 +19,22 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import javax.persistence.Query;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class MyJPAJSONPlainSchemaDAO extends AbstractJPAJSONPlainSchemaDAO {\n \n+    public MyJPAJSONPlainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrDAO plainAttrDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        super(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+\n     @Override\n     public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final Class<T> reference) {\n         Query query = entityManager().createNativeQuery("},{"sha":"1a32d6a23ad0f17012a992fbb8a03c2e4d5c4f1a","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnyDAO.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n@@ -30,6 +31,10 @@\n \n public class PGJPAJSONAnyDAO extends AbstractJPAJSONAnyDAO {\n \n+    public PGJPAJSONAnyDAO(final PlainSchemaDAO plainSchemaDAO) {\n+        super(plainSchemaDAO);\n+    }\n+\n     @Override\n     protected String queryBegin(final String table) {\n         return \"SELECT DISTINCT id FROM \" + table + \" u,\""},{"sha":"59b1780f5c4cc59d9e618cb224180456d485d01e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,6 +30,12 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n@@ -46,6 +52,8 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -64,6 +72,19 @@ protected static String escapeForLikeRegex(final String input) {\n         return output;\n     }\n \n+    public PGJPAJSONAnySearchDAO(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, plainSchemaDAO, entityFactory, anyUtilsFactory);\n+    }\n+\n     @Override\n     protected void parseOrderByForPlainSchema(\n             final SearchSupport svs,\n@@ -603,7 +624,7 @@ protected String getQuery(\n \n         StringBuilder query = new StringBuilder();\n \n-        PlainSchema schema = schemaDAO.find(cond.getSchema());\n+        PlainSchema schema = plainSchemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             fillAttrQuery(query, checked.getMiddle(), checked.getLeft(), checked.getRight(), not, parameters, svs);\n         } else {\n@@ -864,7 +885,7 @@ protected void buildFromAndWhere(\n \n         schemas.forEach(schema -> {\n             // i.e jsonb_path_query(plainattrs, '$[*] ? (@.schema==\"Nome\").\"values\"') AS Nome\n-            PlainSchema pschema = schemaDAO.find(schema);\n+            PlainSchema pschema = plainSchemaDAO.find(schema);\n             if (pschema == null) {\n                 // just to be sure\n                 LOG.warn(\"Ignoring invalid schema '{}'\", schema);"},{"sha":"5f729e89b3e9fad79fdb042c84c6c8ba38f6357f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONPlainSchemaDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONPlainSchemaDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,11 +19,22 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import javax.persistence.Query;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n public class PGJPAJSONPlainSchemaDAO extends AbstractJPAJSONPlainSchemaDAO {\n \n+    public PGJPAJSONPlainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrDAO plainAttrDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        super(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+\n     @Override\n     public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final Class<T> reference) {\n         Query query = entityManager().createNativeQuery("},{"sha":"078f5abdc456ed408779be3962a96f796a4a3250","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJSONEntityFactory.java","status":"modified","additions":2,"deletions":23,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n@@ -53,18 +52,11 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUPlainAttrValue;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n-import org.springframework.beans.factory.BeanFactory;\n-import org.springframework.beans.factory.BeanFactoryAware;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n \n-public abstract class JPAJSONEntityFactory extends JPAEntityFactory implements InitializingBean, BeanFactoryAware {\n+public abstract class JPAJSONEntityFactory extends JPAEntityFactory {\n \n-    private DefaultListableBeanFactory beanFactory;\n-\n-    @Override\n     @SuppressWarnings(\"unchecked\")\n+    @Override\n     public <E extends Entity> E newEntity(final Class<E> reference) {\n         E result;\n \n@@ -125,17 +117,4 @@ public Class<? extends Group> groupClass() {\n     public Class<? extends AnyObject> anyObjectClass() {\n         return JPAJSONAnyObject.class;\n     }\n-\n-    protected abstract Class<? extends JPAJSONAnyDAO> jpaJSONAnyDAOClass();\n-\n-    @Override\n-    public void setBeanFactory(final BeanFactory beanFactory) {\n-        this.beanFactory = (DefaultListableBeanFactory) beanFactory;\n-    }\n-\n-    @Override\n-    public void afterPropertiesSet() throws Exception {\n-        beanFactory.registerSingleton(\"jpaJSONAnyDAO\",\n-                beanFactory.createBean(jpaJSONAnyDAOClass(), AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false));\n-    }\n }"},{"sha":"3429d477d658c4fa2732a3a67f04d642263265c2","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/MyJPAJSONEntityFactory.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FMyJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FMyJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FMyJPAJSONEntityFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO;\n \n public class MyJPAJSONEntityFactory extends JPAJSONEntityFactory {\n@@ -29,9 +27,4 @@ public class MyJPAJSONEntityFactory extends JPAJSONEntityFactory {\n     public Class<? extends AnySearchDAO> anySearchDAOClass() {\n         return MyJPAJSONAnySearchDAO.class;\n     }\n-\n-    @Override\n-    protected Class<? extends JPAJSONAnyDAO> jpaJSONAnyDAOClass() {\n-        return MyJPAJSONAnyDAO.class;\n-    }\n }"},{"sha":"9da2e9eb197ea47e09194c08083f2c7d60fde095","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/PGJPAJSONEntityFactory.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPGJPAJSONEntityFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,8 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO;\n \n public class PGJPAJSONEntityFactory extends JPAJSONEntityFactory {\n@@ -29,9 +27,4 @@ public class PGJPAJSONEntityFactory extends JPAJSONEntityFactory {\n     public Class<? extends AnySearchDAO> anySearchDAOClass() {\n         return PGJPAJSONAnySearchDAO.class;\n     }\n-\n-    @Override\n-    protected Class<? extends JPAJSONAnyDAO> jpaJSONAnyDAOClass() {\n-        return PGJPAJSONAnyDAO.class;\n-    }\n }"},{"sha":"c43e216ec2bef4f43bdd286c5542faae91104226","filename":"core/persistence-jpa-json/src/main/resources/META-INF/spring.factories","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n+  org.apache.syncope.core.persistence.jpa.PGJPAJSONPersistenceContext,\\\n+  org.apache.syncope.core.persistence.jpa.MyJPAJSONPersistenceContext"},{"sha":"997eaedb1687b975b7f95c937f5d5f134de8647d","filename":"core/persistence-jpa-json/src/main/resources/core-myjson.properties","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-myjson.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-myjson.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-myjson.properties?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -15,20 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n-provisioning.quartz.sql=tables_mysql_innodb.sql\n-\n-persistence.entityFactory=org.apache.syncope.core.persistence.jpa.entity.MyJPAJSONEntityFactory\n-persistence.plainSchemaDao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONPlainSchemaDAO\n-persistence.plainAttrDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n-persistence.plainAttrValueDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n-persistence.anySearchDao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n-persistence.searchCondVisitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n-persistence.userDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n-persistence.groupDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n-persistence.anyObjectDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-persistence.auditConfDao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditConfDAO\n-\n persistence.indexesXML=classpath:myjson/indexes.xml\n persistence.viewsXML=classpath:myjson/views.xml\n "},{"sha":"8a753491bf52ae320fec1e19891e288a3547450f","filename":"core/persistence-jpa-json/src/main/resources/core-pgjsonb.properties","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-pgjsonb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-pgjsonb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fcore-pgjsonb.properties?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -15,17 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-persistence.entityFactory=org.apache.syncope.core.persistence.jpa.entity.PGJPAJSONEntityFactory\n-persistence.plainSchemaDao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONPlainSchemaDAO\n-persistence.plainAttrDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrDAO\n-persistence.plainAttrValueDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONPlainAttrValueDAO\n-persistence.anySearchDao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAnySearchDAO\n-persistence.searchCondVisitor=org.apache.syncope.core.persistence.api.search.SearchCondVisitor\n-persistence.userDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n-persistence.groupDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n-persistence.anyObjectDao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-persistence.auditConfDao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditConfDAO\n-\n persistence.indexesXML=classpath:pgjsonb/indexes.xml\n persistence.viewsXML=classpath:pgjsonb/views.xml\n "},{"sha":"8700e318bc06d72a675d35ccc5aacf65d697a0c1","filename":"core/persistence-jpa-json/src/test/java/org/apache/syncope/core/persistence/jpa/JPAJSONTestContextCustomizer.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizer.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.test.context.ContextCustomizer;\n+import org.springframework.test.context.MergedContextConfiguration;\n+import org.springframework.test.context.support.TestPropertySourceUtils;\n+\n+public class JPAJSONTestContextCustomizer implements ContextCustomizer {\n+\n+    private static BeanDefinitionRegistry getBeanDefinitionRegistry(final ApplicationContext ctx) {\n+        if (ctx instanceof BeanDefinitionRegistry) {\n+            return (BeanDefinitionRegistry) ctx;\n+        }\n+        if (ctx instanceof AbstractApplicationContext) {\n+            return (BeanDefinitionRegistry) ((AbstractApplicationContext) ctx).getBeanFactory();\n+        }\n+        throw new IllegalStateException(\"Could not locate BeanDefinitionRegistry\");\n+    }\n+\n+    @Override\n+    public void customizeContext(final ConfigurableApplicationContext ctx, final MergedContextConfiguration cfg) {\n+        if (\"pgjsonb\".equals(System.getProperty(\"profileId\"))) {\n+            TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n+                    ctx,\n+                    \"provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\");\n+        } else if (\"myjson\".equals(System.getProperty(\"profileId\"))) {\n+            TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\n+                    ctx,\n+                    \"provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\");\n+        }\n+\n+        AnnotatedBeanDefinitionReader reader = new AnnotatedBeanDefinitionReader(getBeanDefinitionRegistry(ctx));\n+        reader.registerBean(PGJPAJSONPersistenceContext.class, \"PGJPAJSONPersistenceContext\");\n+        reader.registerBean(MyJPAJSONPersistenceContext.class, \"MyJPAJSONPersistenceContext\");\n+    }\n+}"},{"sha":"6738f886e0ad0c58ebd07329752517b375e9e6ff","filename":"core/persistence-jpa-json/src/test/java/org/apache/syncope/core/persistence/jpa/JPAJSONTestContextCustomizerFactory.java","status":"renamed","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizerFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizerFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONTestContextCustomizerFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -18,19 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n-import org.springframework.stereotype.Component;\n+import java.util.List;\n+import org.springframework.test.context.ContextConfigurationAttributes;\n+import org.springframework.test.context.ContextCustomizer;\n+import org.springframework.test.context.ContextCustomizerFactory;\n \n-@Component\n-public class DummyConnectorRegistry implements ConnectorRegistry {\n+public class JPAJSONTestContextCustomizerFactory implements ContextCustomizerFactory {\n \n     @Override\n-    public void registerConnector(final ExternalResource resource) throws NotFoundException {\n-    }\n+    public ContextCustomizer createContextCustomizer(\n+            final Class<?> testClass,\n+            final List<ContextConfigurationAttributes> configAttributes) {\n \n-    @Override\n-    public void unregisterConnector(final String id) {\n+        return new JPAJSONTestContextCustomizer();\n     }\n }","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConnectorRegistry.java"},{"sha":"3131eed47d03ba542d611833ae9bafc802f1c95b","filename":"core/persistence-jpa-json/src/test/resources/META-INF/spring.factories","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2FMETA-INF%2Fspring.factories?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+org.springframework.test.context.ContextCustomizerFactory=\\\n+  org.apache.syncope.core.persistence.jpa.JPAJSONTestContextCustomizerFactory"},{"sha":"698faf46d3d07b8aa731e624e07784725cf77ae9","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -143,7 +143,7 @@ under the License.\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <SchemaLabel id=\"d90f90d0-cf15-407e-bac7-d46a8eb57c05\" schema_id=\"firstname\" locale=\"en\" display=\"Firstname\"/>\n   <SchemaLabel id=\"a9465ef0-b8b4-4af4-840d-77031a6b54a0\" schema_id=\"firstname\" locale=\"it\" display=\"Nome\"/>\n-  <SchemaLabel id=\"ac8b7383-62df-490d-9364-88dbd3d301aa\" schema_id=\"firstname\" locale=\"pt_BR\" display=\"Nome próprio\"/>\n+  <SchemaLabel id=\"ac8b7383-62df-490d-9364-88dbd3d301aa\" schema_id=\"firstname\" locale=\"pt_BR\" display=\"Nome\"/>\n   <SyncopeSchema id=\"surname\"/>\n   <PlainSchema id=\"surname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"4f528c65c98164ec78641686738f553ae553d32d","filename":"core/persistence-jpa-json/src/test/resources/simplelogger.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fsimplelogger.properties?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,4 +19,3 @@\n # Possible values: \"trace\", \"debug\", \"info\", \"warn\", or \"error\"\n org.slf4j.simpleLogger.defaultLogLevel=debug\n org.slf4j.simpleLogger.log.org.springframework.jdbc.core.JdbcTemplate=error\n-"},{"sha":"bf7968393802d533c0e70c8440a654433a297a98","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainConfFactory.java","status":"modified","additions":12,"deletions":16,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -37,50 +37,46 @@\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.beans.factory.support.AutowireCandidateQualifier;\n import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n-import org.springframework.context.EnvironmentAware;\n import org.springframework.core.env.Environment;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.jdbc.datasource.init.DataSourceInitializer;\n import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n import org.springframework.jndi.JndiObjectFactoryBean;\n import org.springframework.orm.jpa.JpaTransactionManager;\n import org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class DomainConfFactory implements DomainRegistry, EnvironmentAware {\n+public class DomainConfFactory implements DomainRegistry {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DomainConfFactory.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DomainConfFactory.class);\n \n-    private Environment env;\n-\n-    @Override\n-    public void setEnvironment(final Environment env) {\n-        this.env = env;\n-    }\n-\n-    private static void unregisterSingleton(final String name) {\n+    protected static void unregisterSingleton(final String name) {\n         if (ApplicationContextProvider.getBeanFactory().containsSingleton(name)) {\n             ApplicationContextProvider.getBeanFactory().destroySingleton(name);\n         }\n     }\n \n-    private static void registerSingleton(final String name, final Object bean) {\n+    protected static void registerSingleton(final String name, final Object bean) {\n         unregisterSingleton(name);\n         ApplicationContextProvider.getBeanFactory().registerSingleton(name, bean);\n     }\n \n-    private static void unregisterBeanDefinition(final String name) {\n+    protected static void unregisterBeanDefinition(final String name) {\n         if (ApplicationContextProvider.getBeanFactory().containsBeanDefinition(name)) {\n             ApplicationContextProvider.getBeanFactory().removeBeanDefinition(name);\n         }\n     }\n \n-    private static void registerBeanDefinition(final String name, final BeanDefinition beanDefinition) {\n+    protected static void registerBeanDefinition(final String name, final BeanDefinition beanDefinition) {\n         unregisterBeanDefinition(name);\n         ApplicationContextProvider.getBeanFactory().registerBeanDefinition(name, beanDefinition);\n     }\n \n+    protected final Environment env;\n+\n+    public DomainConfFactory(final Environment env) {\n+        this.env = env;\n+    }\n+\n     @Override\n     public void register(final Domain domain) {\n         HikariConfig hikariConfig = new HikariConfig();"},{"sha":"0049087bb45e004482458b45d6a0136068c24777","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -75,24 +75,19 @@ public JndiObjectFactoryBean masterDataSource() {\n         return masterDataSource;\n     }\n \n-    @ConditionalOnMissingBean(name = \"MasterResourceDatabasePopulator\")\n-    @Bean(name = \"MasterResourceDatabasePopulator\")\n-    public ResourceDatabasePopulator masterResourceDatabasePopulator() {\n+    @ConditionalOnMissingBean(name = \"MasterDataSourceInitializer\")\n+    @Bean(name = \"MasterDataSourceInitializer\")\n+    public DataSourceInitializer masterDataSourceInitializer() {\n         ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n         databasePopulator.setContinueOnError(true);\n         databasePopulator.setIgnoreFailedDrops(true);\n         databasePopulator.setSqlScriptEncoding(\"UTF-8\");\n         databasePopulator.addScript(new ClassPathResource(\"/audit/\" + props.getDomain().get(0).getAuditSql()));\n-        return databasePopulator;\n-    }\n \n-    @ConditionalOnMissingBean(name = \"MasterDataSourceInitializer\")\n-    @Bean(name = \"MasterDataSourceInitializer\")\n-    public DataSourceInitializer masterDataSourceInitializer() {\n         DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();\n         dataSourceInitializer.setDataSource((DataSource) Objects.requireNonNull(masterDataSource().getObject()));\n         dataSourceInitializer.setEnabled(true);\n-        dataSourceInitializer.setDatabasePopulator(masterResourceDatabasePopulator());\n+        dataSourceInitializer.setDatabasePopulator(databasePopulator);\n         return dataSourceInitializer;\n     }\n "},{"sha":"21a5def3aaf4fa7e74149d18ee3b6bf3d05342f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":567,"deletions":42,"changes":609,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -18,38 +18,134 @@\n  */\n package org.apache.syncope.core.persistence.jpa;\n \n-import java.lang.reflect.InvocationTargetException;\n import java.util.HashMap;\n import java.util.Map;\n import javax.persistence.ValidationMode;\n import javax.validation.Validator;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.persistence.jpa.content.KeymasterConfParamLoader;\n+import org.apache.syncope.core.persistence.jpa.content.XMLContentExporter;\n+import org.apache.syncope.core.persistence.jpa.content.XMLContentLoader;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAccessTokenDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnyMatchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAnyTypeDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAApplicationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPABatchDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAConnInstanceDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPADelegationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPADerSchemaDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPADynRealmDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAExternalResourceDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAImplementationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAMailTemplateDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPANotificationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAPolicyDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPARealmDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPARelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPARemediationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAReportDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAReportExecDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAReportTemplateDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPARoleDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPASRARouteDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPASecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPATaskDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPATaskExecDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAVirSchemaDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPAAuthModuleDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPAAuthProfileDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPACASSPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPAOIDCJWKSDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPAOIDCRPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPASAML2IdPEntityDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPASAML2SPDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPASAML2SPEntityDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.auth.JPAWAConfigDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPolicyUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n import org.apache.syncope.core.persistence.jpa.spring.DomainTransactionInterceptorInjector;\n import org.apache.syncope.core.persistence.jpa.spring.MultiJarAwarePersistenceUnitPostProcessor;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.Resource;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n \n-@ComponentScan(\"org.apache.syncope.core.persistence.jpa\")\n @EnableConfigurationProperties(PersistenceProperties.class)\n @Configuration\n public class PersistenceContext {\n@@ -62,11 +158,31 @@ public static BeanFactoryPostProcessor domainTransactionInterceptorInjector() {\n     }\n \n     @Autowired\n-    private PersistenceProperties props;\n+    private PersistenceProperties persistenceProperties;\n+\n+    @Autowired\n+    private SecurityProperties securityProperties;\n \n     @Autowired\n     private ResourceLoader resourceLoader;\n \n+    @Autowired\n+    private ApplicationEventPublisher publisher;\n+\n+    @Autowired\n+    private Environment env;\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SearchCondVisitor searchCondVisitor() {\n+        return new SearchCondVisitor();\n+    }\n+\n+    @Bean\n+    public Validator localValidatorFactoryBean() {\n+        return new LocalValidatorFactoryBean();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public CommonEntityManagerFactoryConf commonEMFConf() {\n@@ -94,94 +210,503 @@ public CommonEntityManagerFactoryConf commonEMFConf() {\n         jpaPropertyMap.put(\"openjpa.DataCache\", \"true\");\n         jpaPropertyMap.put(\"openjpa.QueryCache\", \"true\");\n \n-        jpaPropertyMap.put(\"openjpa.RemoteCommitProvider\", props.getRemoteCommitProvider());\n+        jpaPropertyMap.put(\"openjpa.RemoteCommitProvider\", persistenceProperties.getRemoteCommitProvider());\n \n         commonEMFConf.setJpaPropertyMap(jpaPropertyMap);\n         return commonEMFConf;\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public EntityFactory entityFactory() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    public XMLContentLoader xmlContentLoader() {\n+        return new XMLContentLoader(\n+                resourceLoader.getResource(persistenceProperties.getViewsXML()),\n+                resourceLoader.getResource(persistenceProperties.getIndexesXML()),\n+                env);\n+    }\n \n-        return props.getEntityFactory().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public XMLContentExporter xmlContentExporter(final DomainHolder domainHolder, final RealmDAO realmDAO) {\n+        return new XMLContentExporter(domainHolder, realmDAO);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public PlainSchemaDAO plainSchemaDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public KeymasterConfParamLoader keymasterConfParamLoader(final ConfParamOps confParamOps) {\n+        return new KeymasterConfParamLoader(confParamOps);\n+    }\n \n-        return props.getPlainSchemaDAO().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public DomainRegistry domainRegistry() {\n+        return new DomainConfFactory(env);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public PlainAttrDAO plainAttrDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public RuntimeDomainLoader runtimeDomainLoader(\n+            final DomainHolder domainHolder,\n+            final DomainRegistry domainRegistry) {\n \n-        return props.getPlainAttrDAO().getDeclaredConstructor().newInstance();\n+        return new RuntimeDomainLoader(domainHolder, domainRegistry);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public PlainAttrValueDAO plainAttrValueDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public StartupDomainLoader startupDomainLoader(\n+            final DomainOps domainOps,\n+            final DomainHolder domainHolder,\n+            final DomainRegistry domainRegistry) {\n \n-        return props.getPlainAttrValueDAO().getDeclaredConstructor().newInstance();\n+        return new StartupDomainLoader(domainOps, domainHolder, persistenceProperties, resourceLoader, domainRegistry);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public AnySearchDAO anySearchDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    public EntityFactory entityFactory() {\n+        return new JPAEntityFactory();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyUtilsFactory anyUtilsFactory(\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final @Lazy EntityFactory entityFactory) {\n \n-        return props.getAnySearchDAO().getDeclaredConstructor().newInstance();\n+        return new JPAAnyUtilsFactory(userDAO, groupDAO, anyObjectDAO, entityFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public SearchCondVisitor searchCondVisitor() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    public ClientAppUtilsFactory clientAppUtilsFactory() {\n+        return new JPAClientAppUtilsFactory();\n+    }\n \n-        return props.getSearchCondVisitor().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public PolicyUtilsFactory policyUtilsFactory() {\n+        return new JPAPolicyUtilsFactory();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public UserDAO userDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public TaskUtilsFactory taskUtilsFactory(final @Lazy EntityFactory entityFactory) {\n+        return new JPATaskUtilsFactory(entityFactory);\n+    }\n \n-        return props.getUserDAO().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AccessTokenDAO accessTokenDAO() {\n+        return new JPAAccessTokenDAO();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public GroupDAO groupDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public ApplicationDAO applicationDAO(final RoleDAO roleDAO, final @Lazy UserDAO userDAO) {\n+        return new JPAApplicationDAO(roleDAO, userDAO);\n+    }\n \n-        return props.getGroupDAO().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyMatchDAO anyMatchDAO(\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final RealmDAO realmDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        return new JPAAnyMatchDAO(userDAO, groupDAO, anyObjectDAO, realmDAO, plainSchemaDAO, anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public AnyObjectDAO anyObjectDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public AnyObjectDAO anyObjectDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy DerSchemaDAO derSchemaDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO) {\n+\n+        return new JPAAnyObjectDAO(\n+                anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO);\n+    }\n \n-        return props.getAnyObjectDAO().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnySearchDAO anySearchDAO(\n+            final RealmDAO realmDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final PlainSchemaDAO schemaDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        return new JPAAnySearchDAO(\n+                realmDAO,\n+                dynRealmDAO,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                schemaDAO,\n+                entityFactory,\n+                anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public AuditConfDAO auditConfDAO() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public AnyTypeDAO anyTypeDAO(final RemediationDAO remediationDAO) {\n+        return new JPAAnyTypeDAO(remediationDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeClassDAO anyTypeClassDAO(\n+            final AnyTypeDAO anyTypeDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        return new JPAAnyTypeClassDAO(anyTypeDAO, plainSchemaDAO, derSchemaDAO, virSchemaDAO, groupDAO, resourceDAO);\n+    }\n \n-        return props.getAuditConfDAO().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AuditConfDAO auditConfDAO() {\n+        return new JPAAuditConfDAO();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public Validator localValidatorFactoryBean() {\n-        return new LocalValidatorFactoryBean();\n+    public AuthModuleDAO authModuleDAO() {\n+        return new JPAAuthModuleDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AuthProfileDAO authProfileDAO() {\n+        return new JPAAuthProfileDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public BatchDAO batchDAO() {\n+        return new JPABatchDAO();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public Resource viewsXML() {\n-        return resourceLoader.getResource(props.getViewsXML());\n+    public CASSPDAO casSPDAO() {\n+        return new JPACASSPDAO();\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ConnInstanceDAO connInstanceDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n+        return new JPAConnInstanceDAO(resourceDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public DelegationDAO delegationDAO() {\n+        return new JPADelegationDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DerSchemaDAO derSchemaDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n+        return new JPADerSchemaDAO(resourceDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DynRealmDAO dynRealmDAO(\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO searchDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        return new JPADynRealmDAO(\n+                publisher,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                searchDAO,\n+                anyMatchDAO,\n+                searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GroupDAO groupDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy DerSchemaDAO derSchemaDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final @Lazy UserDAO userDAO,\n+            final @Lazy AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        return new JPAGroupDAO(\n+                anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                anyMatchDAO,\n+                plainAttrDAO,\n+                userDAO,\n+                anyObjectDAO,\n+                anySearchDAO,\n+                searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ImplementationDAO implementationDAO() {\n+        return new JPAImplementationDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public MailTemplateDAO mailTemplateDAO() {\n+        return new JPAMailTemplateDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationDAO notificationDAO(final TaskDAO taskDAO) {\n+        return new JPANotificationDAO(taskDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public OIDCJWKSDAO oidcJWKSDAO() {\n+        return new JPAOIDCJWKSDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public OIDCRPDAO oidcRPDAO() {\n+        return new JPAOIDCRPDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public PlainAttrDAO plainAttrDAO() {\n+        return new JPAPlainAttrDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public PlainAttrValueDAO plainAttrValueDAO() {\n+        return new JPAPlainAttrValueDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public PlainSchemaDAO plainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrDAO plainAttrDAO,\n+            final @Lazy ExternalResourceDAO resourceDAO) {\n+\n+        return new JPAPlainSchemaDAO(anyUtilsFactory, plainAttrDAO, resourceDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public PolicyDAO policyDAO(\n+            final @Lazy RealmDAO realmDAO,\n+            final @Lazy ExternalResourceDAO resourceDAO) {\n+\n+        return new JPAPolicyDAO(realmDAO, resourceDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RealmDAO realmDAO(final @Lazy RoleDAO roleDAO) {\n+        return new JPARealmDAO(roleDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public RelationshipTypeDAO relationshipTypeDAO() {\n+        return new JPARelationshipTypeDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public RemediationDAO remediationDAO() {\n+        return new JPARemediationDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ReportTemplateDAO reportTemplateDAO() {\n+        return new JPAReportTemplateDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ReportDAO reportDAO() {\n+        return new JPAReportDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ReportExecDAO reportExecDAO() {\n+        return new JPAReportExecDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ExternalResourceDAO resourceDAO(\n+            final TaskDAO taskDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PolicyDAO policyDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final RealmDAO realmDAO) {\n+\n+        return new JPAExternalResourceDAO(taskDAO, anyObjectDAO, userDAO, groupDAO, policyDAO, virSchemaDAO, realmDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RoleDAO roleDAO(\n+            final @Lazy AnyMatchDAO anyMatchDAO,\n+            final @Lazy AnySearchDAO anySearchDAO,\n+            final DelegationDAO delegationDAO,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        return new JPARoleDAO(anyMatchDAO, publisher, anySearchDAO, delegationDAO, searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SAML2SPDAO saml2SPDAO() {\n+        return new JPASAML2SPDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SAML2IdPEntityDAO saml2IdPEntityDAO() {\n+        return new JPASAML2IdPEntityDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SAML2SPEntityDAO saml2SPEntityDAO() {\n+        return new JPASAML2SPEntityDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SecurityQuestionDAO securityQuestionDAO(final UserDAO userDAO) {\n+        return new JPASecurityQuestionDAO(userDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SRARouteDAO sraRouteDAO() {\n+        return new JPASRARouteDAO();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public TaskDAO taskDAO(final RemediationDAO remediationDAO) {\n+        return new JPATaskDAO(remediationDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public TaskExecDAO taskExecDAO(final TaskDAO taskDAO) {\n+        return new JPATaskExecDAO(taskDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public UserDAO userDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final @Lazy PlainSchemaDAO plainSchemaDAO,\n+            final @Lazy DerSchemaDAO derSchemaDAO,\n+            final @Lazy DynRealmDAO dynRealmDAO,\n+            final RoleDAO roleDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final RealmDAO realmDAO,\n+            final @Lazy GroupDAO groupDAO,\n+            final DelegationDAO delegationDAO) {\n+\n+        return new JPAUserDAO(\n+                anyUtilsFactory,\n+                publisher,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                dynRealmDAO,\n+                roleDAO,\n+                accessTokenDAO,\n+                realmDAO,\n+                groupDAO,\n+                delegationDAO,\n+                securityProperties);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public VirSchemaDAO virSchemaDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n+        return new JPAVirSchemaDAO(resourceDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n     @Bean\n-    public Resource indexesXML() {\n-        return resourceLoader.getResource(props.getIndexesXML());\n+    public WAConfigDAO waConfigDAO() {\n+        return new JPAWAConfigDAO();\n     }\n }"},{"sha":"03fd3c4e46370f4a67d552c5852bbf12f598f892","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceProperties.java","status":"modified","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceProperties.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,25 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAPlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAPlainSchemaDAO;\n-import org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAEntityFactory;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.NestedConfigurationProperty;\n \n@@ -49,26 +30,6 @@ public class PersistenceProperties {\n \n     private String metaDataFactory;\n \n-    private Class<? extends EntityFactory> entityFactory = JPAEntityFactory.class;\n-\n-    private Class<? extends PlainSchemaDAO> plainSchemaDAO = JPAPlainSchemaDAO.class;\n-\n-    private Class<? extends PlainAttrDAO> plainAttrDAO = JPAPlainAttrDAO.class;\n-\n-    private Class<? extends PlainAttrValueDAO> plainAttrValueDAO = JPAPlainAttrValueDAO.class;\n-\n-    private Class<? extends AnySearchDAO> anySearchDAO = JPAAnySearchDAO.class;\n-\n-    private Class<? extends SearchCondVisitor> searchCondVisitor = SearchCondVisitor.class;\n-\n-    private Class<? extends UserDAO> userDAO = JPAUserDAO.class;\n-\n-    private Class<? extends GroupDAO> groupDAO = JPAGroupDAO.class;\n-\n-    private Class<? extends AnyObjectDAO> anyObjectDAO = JPAAnyObjectDAO.class;\n-\n-    private Class<? extends AuditConfDAO> auditConfDAO = JPAAuditConfDAO.class;\n-\n     private String viewsXML = \"classpath:views.xml\";\n \n     private String indexesXML = \"classpath:indexes.xml\";\n@@ -92,86 +53,6 @@ public void setMetaDataFactory(final String metaDataFactory) {\n         this.metaDataFactory = metaDataFactory;\n     }\n \n-    public Class<? extends EntityFactory> getEntityFactory() {\n-        return entityFactory;\n-    }\n-\n-    public void setEntityFactory(final Class<? extends EntityFactory> entityFactory) {\n-        this.entityFactory = entityFactory;\n-    }\n-\n-    public Class<? extends PlainSchemaDAO> getPlainSchemaDAO() {\n-        return plainSchemaDAO;\n-    }\n-\n-    public void setPlainSchemaDAO(final Class<? extends PlainSchemaDAO> plainSchemaDAO) {\n-        this.plainSchemaDAO = plainSchemaDAO;\n-    }\n-\n-    public Class<? extends PlainAttrDAO> getPlainAttrDAO() {\n-        return plainAttrDAO;\n-    }\n-\n-    public void setPlainAttrDAO(final Class<? extends PlainAttrDAO> plainAttrDAO) {\n-        this.plainAttrDAO = plainAttrDAO;\n-    }\n-\n-    public Class<? extends PlainAttrValueDAO> getPlainAttrValueDAO() {\n-        return plainAttrValueDAO;\n-    }\n-\n-    public void setPlainAttrValueDAO(final Class<? extends PlainAttrValueDAO> plainAttrValueDAO) {\n-        this.plainAttrValueDAO = plainAttrValueDAO;\n-    }\n-\n-    public Class<? extends AnySearchDAO> getAnySearchDAO() {\n-        return anySearchDAO;\n-    }\n-\n-    public void setAnySearchDAO(final Class<? extends AnySearchDAO> anySearchDAO) {\n-        this.anySearchDAO = anySearchDAO;\n-    }\n-\n-    public Class<? extends SearchCondVisitor> getSearchCondVisitor() {\n-        return searchCondVisitor;\n-    }\n-\n-    public void setSearchCondVisitor(final Class<? extends SearchCondVisitor> searchCondVisitor) {\n-        this.searchCondVisitor = searchCondVisitor;\n-    }\n-\n-    public Class<? extends UserDAO> getUserDAO() {\n-        return userDAO;\n-    }\n-\n-    public void setUserDAO(final Class<? extends UserDAO> userDAO) {\n-        this.userDAO = userDAO;\n-    }\n-\n-    public Class<? extends GroupDAO> getGroupDAO() {\n-        return groupDAO;\n-    }\n-\n-    public void setGroupDAO(final Class<? extends GroupDAO> groupDAO) {\n-        this.groupDAO = groupDAO;\n-    }\n-\n-    public Class<? extends AnyObjectDAO> getAnyObjectDAO() {\n-        return anyObjectDAO;\n-    }\n-\n-    public void setAnyObjectDAO(final Class<? extends AnyObjectDAO> anyObjectDAO) {\n-        this.anyObjectDAO = anyObjectDAO;\n-    }\n-\n-    public Class<? extends AuditConfDAO> getAuditConfDAO() {\n-        return auditConfDAO;\n-    }\n-\n-    public void setAuditConfDAO(final Class<? extends AuditConfDAO> auditConfDAO) {\n-        this.auditConfDAO = auditConfDAO;\n-    }\n-\n     public String getViewsXML() {\n         return viewsXML;\n     }"},{"sha":"1269a875b4fe2b149d9d7553db0b4776b979be35","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/RuntimeDomainLoader.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,24 +23,24 @@\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.DomainRegistry;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.aop.support.AopUtils;\n \n-@Component\n public class RuntimeDomainLoader implements DomainWatcher {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(RuntimeDomainLoader.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(RuntimeDomainLoader.class);\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    protected final DomainHolder domainHolder;\n \n-    @Autowired\n-    private DomainRegistry domainRegistry;\n+    protected final DomainRegistry domainRegistry;\n+\n+    public RuntimeDomainLoader(final DomainHolder domainHolder, final DomainRegistry domainRegistry) {\n+        this.domainHolder = domainHolder;\n+        this.domainRegistry = domainRegistry;\n+    }\n \n     @Override\n     public void added(final Domain domain) {"},{"sha":"0dcdeb71c5089c6bdd7d35ea05a10416e55b7c52","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/StartupDomainLoader.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FStartupDomainLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,30 +30,36 @@\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.Ordered;\n import org.springframework.core.io.ResourceLoader;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class StartupDomainLoader implements SyncopeCoreLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(StartupDomainLoader.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(StartupDomainLoader.class);\n \n-    @Autowired\n-    private DomainOps domainOps;\n+    protected final DomainOps domainOps;\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    protected final DomainHolder domainHolder;\n \n-    @Autowired\n-    private PersistenceProperties persistenceProperties;\n+    protected final PersistenceProperties persistenceProperties;\n \n-    @Autowired\n-    private ResourceLoader resourceLoader;\n+    protected final ResourceLoader resourceLoader;\n \n-    @Autowired\n-    private DomainRegistry domainRegistry;\n+    protected final DomainRegistry domainRegistry;\n+\n+    public StartupDomainLoader(\n+            final DomainOps domainOps,\n+            final DomainHolder domainHolder,\n+            final PersistenceProperties persistenceProperties,\n+            final ResourceLoader resourceLoader,\n+            final DomainRegistry domainRegistry) {\n+\n+        this.domainOps = domainOps;\n+        this.domainHolder = domainHolder;\n+        this.persistenceProperties = persistenceProperties;\n+        this.resourceLoader = resourceLoader;\n+        this.domainRegistry = domainRegistry;\n+    }\n \n     @Override\n     public int getOrder() {"},{"sha":"0c6e1a7fb2ea3c2be1169a3741dbb58569463cad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/KeymasterConfParamLoader.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FKeymasterConfParamLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,21 +30,21 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Initialize Keymaster with default content if no data is present already.\n  */\n-@Component\n public class KeymasterConfParamLoader implements ConfParamLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(KeymasterConfParamLoader.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(KeymasterConfParamLoader.class);\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n+\n+    public KeymasterConfParamLoader(final ConfParamOps confParamOps) {\n+        this.confParamOps = confParamOps;\n+    }\n \n     @Override\n     public int getOrder() {\n@@ -76,7 +76,7 @@ public void load(final String domain, final DataSource datasource) {\n         }\n     }\n \n-    private void loadDefaultContent(final String domain, final InputStream contentJSON)\n+    protected void loadDefaultContent(final String domain, final InputStream contentJSON)\n             throws IOException {\n \n         try (contentJSON) {"},{"sha":"397bc9b35f8d083914aeda3b8a7e29bee8b1cf79","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -93,47 +93,38 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n-import org.springframework.stereotype.Component;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n \n /**\n  * Export internal storage content as XML.\n  */\n-@Component\n public class XMLContentExporter implements ContentExporter {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(XMLContentExporter.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(XMLContentExporter.class);\n \n-    private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = Stream.of(\n+    protected static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = Stream.of(\n             \"QRTZ_\", \"LOGGING\", \"NotificationTask_recipients\", AuditConfDAO.AUDIT_ENTRY_TABLE, JPAReportExec.TABLE,\n             JPATaskExec.TABLE, JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE,\n             JPAUPlainAttrUniqueValue.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE,\n             JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n             JPAARelationship.TABLE, JPAAMembership.TABLE, JPAAccessToken.TABLE\n     ).collect(Collectors.toCollection(HashSet::new));\n \n-    private static final Map<String, String> TABLES_TO_BE_FILTERED =\n+    protected static final Map<String, String> TABLES_TO_BE_FILTERED =\n             Map.of(\"TASK\", \"DTYPE <> 'PropagationTask' AND DTYPE <> 'NotificationTask'\");\n \n-    private static final Map<String, Set<String>> COLUMNS_TO_BE_NULLIFIED =\n+    protected static final Map<String, Set<String>> COLUMNS_TO_BE_NULLIFIED =\n             Map.of(\"SYNCOPEGROUP\", Set.of(\"USEROWNER_ID\"));\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    private static boolean isTableAllowed(final String tableName) {\n+    protected static boolean isTableAllowed(final String tableName) {\n         return TABLE_PREFIXES_TO_BE_EXCLUDED.stream().\n                 allMatch(prefix -> !tableName.toUpperCase().startsWith(prefix.toUpperCase()));\n     }\n \n-    private static List<String> sortByForeignKeys(final String dbSchema, final Connection conn,\n+    protected static List<String> sortByForeignKeys(final String dbSchema, final Connection conn,\n             final Set<String> tableNames)\n             throws SQLException {\n \n@@ -204,7 +195,7 @@ private static List<String> sortByForeignKeys(final String dbSchema, final Conne\n         return sortedTableNames;\n     }\n \n-    private static String getValues(final ResultSet rs, final String columnName, final Integer columnType)\n+    protected static String getValues(final ResultSet rs, final String columnName, final Integer columnType)\n             throws SQLException {\n \n         String res = null;\n@@ -251,7 +242,16 @@ private static String getValues(final ResultSet rs, final String columnName, fin\n         return res;\n     }\n \n-    private String columnName(final Supplier<Stream<Attribute<?, ?>>> attrs, final String columnName) {\n+    protected final DomainHolder domainHolder;\n+\n+    protected final RealmDAO realmDAO;\n+\n+    public XMLContentExporter(final DomainHolder domainHolder, final RealmDAO realmDAO) {\n+        this.domainHolder = domainHolder;\n+        this.realmDAO = realmDAO;\n+    }\n+\n+    protected String columnName(final Supplier<Stream<Attribute<?, ?>>> attrs, final String columnName) {\n         String name = attrs.get().map(attr -> {\n             if (attr.getName().equalsIgnoreCase(columnName)) {\n                 return attr.getName();\n@@ -276,12 +276,12 @@ private String columnName(final Supplier<Stream<Attribute<?, ?>>> attrs, final S\n         return name;\n     }\n \n-    private boolean isTask(final String tableName) {\n+    protected boolean isTask(final String tableName) {\n         return \"TASK\".equalsIgnoreCase(tableName);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private void exportTable(\n+    protected void exportTable(\n             final TransformerHandler handler,\n             final Connection conn,\n             final String tableName,\n@@ -427,11 +427,11 @@ private void exportTable(\n         }\n     }\n \n-    private Set<EntityType<?>> taskEntities(final Set<EntityType<?>> entityTypes) {\n+    protected Set<EntityType<?>> taskEntities(final Set<EntityType<?>> entityTypes) {\n         return entityTypes.stream().filter(e -> e.getName().endsWith(\"Task\")).collect(Collectors.toSet());\n     }\n \n-    private BidiMap<String, EntityType<?>> entities(final Set<EntityType<?>> entityTypes) {\n+    protected BidiMap<String, EntityType<?>> entities(final Set<EntityType<?>> entityTypes) {\n         BidiMap<String, EntityType<?>> entities = new DualHashBidiMap<>();\n         entityTypes.forEach(entity -> {\n             Table table = entity.getBindableJavaType().getAnnotation(Table.class);\n@@ -443,7 +443,7 @@ private BidiMap<String, EntityType<?>> entities(final Set<EntityType<?>> entityT\n         return entities;\n     }\n \n-    private Map<String, Pair<String, String>> relationTables(final BidiMap<String, EntityType<?>> entities) {\n+    protected Map<String, Pair<String, String>> relationTables(final BidiMap<String, EntityType<?>> entities) {\n         Map<String, Pair<String, String>> relationTables = new HashMap<>();\n         entities.values().stream().forEach(e -> e.getAttributes().stream().\n                 filter(a -> a.getPersistentAttributeType() != Attribute.PersistentAttributeType.BASIC)."},{"sha":"eda1a1af8b6ed70a1418278e2b84c83a6c339cb4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,32 +31,36 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.env.Environment;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PropertiesLoaderUtils;\n import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n-import org.springframework.stereotype.Component;\n import org.xml.sax.SAXException;\n \n /**\n  * Initialize Database with default content if no data is present already.\n  */\n-@Component\n public class XMLContentLoader implements ContentLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(XMLContentLoader.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(XMLContentLoader.class);\n \n-    @javax.annotation.Resource(name = \"viewsXML\")\n-    private Resource viewsXML;\n+    protected final Resource viewsXML;\n \n-    @javax.annotation.Resource(name = \"indexesXML\")\n-    private Resource indexesXML;\n+    protected final Resource indexesXML;\n \n-    @Autowired\n-    private Environment env;\n+    protected final Environment env;\n+\n+    public XMLContentLoader(\n+            final Resource viewsXML,\n+            final Resource indexesXML,\n+            final Environment env) {\n+\n+        this.viewsXML = viewsXML;\n+        this.indexesXML = indexesXML;\n+        this.env = env;\n+    }\n \n     @Override\n     public int getOrder() {\n@@ -105,7 +109,7 @@ public void load(final String domain, final DataSource datasource) {\n         }\n     }\n \n-    private void loadDefaultContent(\n+    protected void loadDefaultContent(\n             final String domain, final InputStream contentXML, final DataSource dataSource)\n             throws IOException, ParserConfigurationException, SAXException {\n \n@@ -119,7 +123,7 @@ private void loadDefaultContent(\n         }\n     }\n \n-    private void createViews(final String domain, final DataSource dataSource) throws IOException {\n+    protected void createViews(final String domain, final DataSource dataSource) throws IOException {\n         LOG.debug(\"[{}] Creating views\", domain);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n@@ -137,7 +141,7 @@ private void createViews(final String domain, final DataSource dataSource) throw\n         LOG.debug(\"Views created\");\n     }\n \n-    private void createIndexes(final String domain, final DataSource dataSource) throws IOException {\n+    protected void createIndexes(final String domain, final DataSource dataSource) throws IOException {\n         LOG.debug(\"[{}] Creating indexes\", domain);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);"},{"sha":"8ac8d40552fa8038619fbde10b94b5c529b33b10","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":19,"deletions":15,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -61,34 +61,38 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.context.annotation.Lazy;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A> implements AnyDAO<A> {\n \n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    protected ApplicationEventPublisher publisher;\n+    protected final ApplicationEventPublisher publisher;\n \n-    @Autowired\n-    @Lazy\n-    protected PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    @Lazy\n-    protected DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    @Lazy\n-    protected DynRealmDAO dynRealmDAO;\n+    protected final DynRealmDAO dynRealmDAO;\n \n     private AnyUtils anyUtils;\n \n+    public AbstractAnyDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO) {\n+\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.publisher = publisher;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.dynRealmDAO = dynRealmDAO;\n+    }\n+\n     protected abstract AnyUtils init();\n \n     protected AnyUtils anyUtils() {"},{"sha":"38b5d5533313bad1a91d1cd4cc558762c55afc0c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":37,"deletions":26,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -62,7 +62,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implements AnySearchDAO {\n \n@@ -72,30 +71,6 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement\n \n     protected static final String[] RELATIONSHIP_FIELDS = new String[] { \"realm\", \"userOwner\", \"groupOwner\" };\n \n-    @Autowired\n-    protected RealmDAO realmDAO;\n-\n-    @Autowired\n-    protected DynRealmDAO dynRealmDAO;\n-\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Autowired\n-    protected PlainSchemaDAO schemaDAO;\n-\n-    @Autowired\n-    protected EntityFactory entityFactory;\n-\n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n-\n     protected static SearchCond buildEffectiveCond(\n             final SearchCond cond,\n             final Set<String> dynRealmKeys,\n@@ -135,6 +110,42 @@ protected static SearchCond buildEffectiveCond(\n         return SearchCond.getAnd(result);\n     }\n \n+    protected final RealmDAO realmDAO;\n+\n+    protected final DynRealmDAO dynRealmDAO;\n+\n+    protected final UserDAO userDAO;\n+\n+    protected final GroupDAO groupDAO;\n+\n+    protected final AnyObjectDAO anyObjectDAO;\n+\n+    protected final PlainSchemaDAO plainSchemaDAO;\n+\n+    protected final EntityFactory entityFactory;\n+\n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public AbstractAnySearchDAO(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.realmDAO = realmDAO;\n+        this.dynRealmDAO = dynRealmDAO;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.entityFactory = entityFactory;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n+\n     protected abstract int doCount(Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);\n \n     @Override\n@@ -176,7 +187,7 @@ protected abstract <T extends Any<?>> List<T> doSearch(\n     protected Pair<PlainSchema, PlainAttrValue> check(final AttrCond cond, final AnyTypeKind kind) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(kind);\n \n-        PlainSchema schema = schemaDAO.find(cond.getSchema());\n+        PlainSchema schema = plainSchemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             throw new IllegalArgumentException();"},{"sha":"4ad4d9c0dd9f4faa24665557bff502bb0b172f71","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,10 +25,8 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n \n-@Configurable\n public abstract class AbstractDAO<E extends Entity> implements DAO<E> {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(DAO.class);"},{"sha":"3753b7424092d1b02887e5626ad62552d61a6ef9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAccessTokenDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,11 +28,9 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAccessToken;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n-@Repository\n public class JPAAccessTokenDAO extends AbstractDAO<AccessToken> implements AccessTokenDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"7419751be6f61c47f7c2dc160bcd374d5f34e2b8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":40,"deletions":32,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -59,8 +59,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -69,26 +67,35 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.BeanUtils;\n \n-@Component\n public class JPAAnyMatchDAO extends AbstractDAO<Any<?>> implements AnyMatchDAO {\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public JPAAnyMatchDAO(\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final RealmDAO realmDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.realmDAO = realmDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n \n     /**\n      * Verify if any matches the given search condition.\n@@ -166,8 +173,8 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n                 if (match == null) {\n                     Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n                     match = anyCond.map(value -> matches(any, value, not)).orElseGet(() -> cond.getLeaf(AttrCond.class).\n-                        map(leaf -> matches(any, leaf, not)).\n-                        orElse(null));\n+                            map(leaf -> matches(any, leaf, not)).\n+                            orElse(null));\n                 }\n \n                 if (match == null) {\n@@ -190,20 +197,20 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n         return false;\n     }\n \n-    private static boolean matches(final Any<?> any, final AnyTypeCond cond, final boolean not) {\n+    protected static boolean matches(final Any<?> any, final AnyTypeCond cond, final boolean not) {\n         boolean equals = any.getType().getKey().equals(cond.getAnyTypeKey());\n         return not ? !equals : equals;\n     }\n \n-    private static boolean matches(\n-        final GroupableRelatable<?, ?, ?, ?, ?> any, final RelationshipTypeCond cond, final boolean not) {\n+    protected static boolean matches(\n+            final GroupableRelatable<?, ?, ?, ?, ?> any, final RelationshipTypeCond cond, final boolean not) {\n \n         boolean found = any.getRelationships().stream().\n                 anyMatch(rel -> rel.getType().getKey().equals(cond.getRelationshipTypeKey()));\n         return not ? !found : found;\n     }\n \n-    private boolean matches(\n+    protected boolean matches(\n             final GroupableRelatable<?, ?, ?, ?, ?> any, final RelationshipCond cond, final boolean not) {\n \n         String anyObject = cond.getAnyObject();\n@@ -215,7 +222,7 @@ private boolean matches(\n         return not ? !found : found;\n     }\n \n-    private boolean matches(\n+    protected boolean matches(\n             final GroupableRelatable<?, ?, ?, ?, ?> any, final MembershipCond cond, final boolean not) {\n \n         final String group = SyncopeConstants.UUID_PATTERN.matcher(cond.getGroup()).matches()\n@@ -230,26 +237,27 @@ private boolean matches(\n         return not ? !found : found;\n     }\n \n-    private boolean matches(final Any<?> any, final AssignableCond cond, final boolean not) {\n+    protected boolean matches(final Any<?> any, final AssignableCond cond, final boolean not) {\n         Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n         boolean found = Optional.ofNullable(realm)\n-            .filter(realm1 -> (cond.isFromGroup() ? realmDAO.findDescendants(realm1) : realmDAO.findAncestors(realm1)).\n-            stream().anyMatch(item -> item.equals(any.getRealm()))).isPresent();\n+                .filter(realm1 -> (cond.isFromGroup() ? realmDAO.findDescendants(realm1) : realmDAO.\n+                findAncestors(realm1)).\n+                stream().anyMatch(item -> item.equals(any.getRealm()))).isPresent();\n         return not ? !found : found;\n     }\n \n-    private boolean matches(final User user, final RoleCond cond, final boolean not) {\n+    protected boolean matches(final User user, final RoleCond cond, final boolean not) {\n         boolean found = userDAO.findAllRoles(user).stream().anyMatch(role -> role.getKey().equals(cond.getRole()));\n         return not ? !found : found;\n     }\n \n-    private boolean matches(final Any<?> any, final DynRealmCond cond, final boolean not) {\n+    protected boolean matches(final Any<?> any, final DynRealmCond cond, final boolean not) {\n         boolean found = anyUtilsFactory.getInstance(any).dao().findDynRealms(any.getKey()).stream().\n                 anyMatch(dynRealm -> dynRealm.equals(cond.getDynRealm()));\n         return not ? !found : found;\n     }\n \n-    private boolean matches(final Group group, final MemberCond cond, final boolean not) {\n+    protected boolean matches(final Group group, final MemberCond cond, final boolean not) {\n         boolean found = false;\n \n         GroupableRelatable<?, ?, ?, ?, ?> any = userDAO.find(cond.getMember());\n@@ -269,14 +277,14 @@ private boolean matches(final Group group, final MemberCond cond, final boolean\n         return not ? !found : found;\n     }\n \n-    private boolean matches(final Any<?> any, final ResourceCond cond, final boolean not) {\n+    protected boolean matches(final Any<?> any, final ResourceCond cond, final boolean not) {\n         boolean found = anyUtilsFactory.getInstance(any).getAllResources(any).stream().\n                 anyMatch(resource -> resource.getKey().equals(cond.getResourceKey()));\n         return not ? !found : found;\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private static boolean matches(\n+    protected static boolean matches(\n             final List<? extends PlainAttrValue> anyAttrValues,\n             final PlainAttrValue attrValue,\n             final PlainSchema schema,\n@@ -338,7 +346,7 @@ private static boolean matches(\n         });\n     }\n \n-    private boolean matches(final Any<?> any, final AttrCond cond, final boolean not) {\n+    protected boolean matches(final Any<?> any, final AttrCond cond, final boolean not) {\n         PlainSchema schema = plainSchemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n@@ -378,7 +386,7 @@ private boolean matches(final Any<?> any, final AttrCond cond, final boolean not\n         return not ? !found : found;\n     }\n \n-    private boolean matches(final Any<?> any, final AnyCond cond, final boolean not) {\n+    protected boolean matches(final Any<?> any, final AnyCond cond, final boolean not) {\n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n         if (\"key\".equals(cond.getSchema())) {\n             cond.setSchema(\"id\");"},{"sha":"81e9a8f6bd0cc7837393b8d5b6540c95f7ea489a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,11 +39,15 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -59,17 +63,29 @@\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n \n-    @Autowired\n-    protected UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n+\n+    public JPAAnyObjectDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO) {\n+\n+        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+    }\n \n     @Override\n     protected AnyUtils init() {"},{"sha":"2ae39ae6e2a199bc4b42f779127f25bcf689bd88","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,6 +35,12 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n@@ -52,7 +58,9 @@\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -64,6 +72,19 @@ public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n     protected static final String EMPTY_QUERY = \"SELECT any_id FROM user_search WHERE 1=2\";\n \n+    public JPAAnySearchDAO(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        super(realmDAO, dynRealmDAO, userDAO, groupDAO, anyObjectDAO, plainSchemaDAO, entityFactory, anyUtilsFactory);\n+    }\n+\n     protected String buildAdminRealmsFilter(\n             final Set<String> realmKeys,\n             final SearchSupport svs,\n@@ -429,7 +450,7 @@ protected OrderBySupport parseOrderBy(\n \n             if (item.isEmpty()) {\n                 if (anyUtils.getField(clause.getField()) == null) {\n-                    PlainSchema schema = schemaDAO.find(clause.getField());\n+                    PlainSchema schema = plainSchemaDAO.find(clause.getField());\n                     if (schema != null) {\n                         if (schema.isUniqueConstraint()) {\n                             orderByUniquePlainSchemas.add(schema.getKey());"},{"sha":"5212d762c6450ae9cc6f84e6183c994883981f13","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":22,"deletions":15,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,29 +35,36 @@\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass> implements AnyTypeClassDAO {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n+\n+    public JPAAnyTypeClassDAO(\n+            final AnyTypeDAO anyTypeDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final GroupDAO groupDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.groupDAO = groupDAO;\n+        this.resourceDAO = resourceDAO;\n+    }\n \n     @Override\n     public AnyTypeClass find(final String key) {"},{"sha":"5c8a19907d0b44ae2902a795b6e95d964ce57671","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,15 +26,15 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAAnyTypeDAO extends AbstractDAO<AnyType> implements AnyTypeDAO {\n \n-    @Autowired\n-    private RemediationDAO remediationDAO;\n+    protected final RemediationDAO remediationDAO;\n+\n+    public JPAAnyTypeDAO(final RemediationDAO remediationDAO) {\n+        this.remediationDAO = remediationDAO;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"98be8b0e4563cfa77996cd500985a13cb85f4927","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAApplicationDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,17 +27,17 @@\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.jpa.entity.JPAApplication;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPrivilege;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAApplicationDAO extends AbstractDAO<Application> implements ApplicationDAO {\n \n-    @Autowired\n-    private RoleDAO roleDAO;\n+    protected final RoleDAO roleDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n+\n+    public JPAApplicationDAO(final RoleDAO roleDAO, final UserDAO userDAO) {\n+        this.roleDAO = roleDAO;\n+        this.userDAO = userDAO;\n+    }\n \n     @Override\n     public Application find(final String key) {"},{"sha":"1ea7dd66aacc3f20381d7a957b4b1042f10ae682","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,11 +23,9 @@\n import org.apache.syncope.core.persistence.api.dao.BatchDAO;\n import org.apache.syncope.core.persistence.api.entity.Batch;\n import org.apache.syncope.core.persistence.jpa.entity.JPABatch;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(rollbackFor = Throwable.class)\n-@Repository\n public class JPABatchDAO extends AbstractDAO<Batch> implements BatchDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"e0a14e30465d325be9f4fdbb04916ea360d960ee","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":5,"deletions":24,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,27 +25,20 @@\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n-import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAConnInstanceDAO extends AbstractDAO<ConnInstance> implements ConnInstanceDAO {\n \n-    @Autowired\n-    @Lazy\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private ConnectorRegistry connRegistry;\n+    public JPAConnInstanceDAO(final ExternalResourceDAO resourceDAO) {\n+        this.resourceDAO = resourceDAO;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override\n@@ -92,17 +85,7 @@ public List<ConnInstance> findAll() {\n \n     @Override\n     public ConnInstance save(final ConnInstance connector) {\n-        final ConnInstance merged = entityManager().merge(connector);\n-\n-        merged.getResources().forEach(resource -> {\n-            try {\n-                connRegistry.registerConnector(resource);\n-            } catch (NotFoundException e) {\n-                LOG.error(\"While registering connector for resource\", e);\n-            }\n-        });\n-\n-        return merged;\n+        return entityManager().merge(connector);\n     }\n \n     @Override\n@@ -117,7 +100,5 @@ public void delete(final String key) {\n                 forEach(resource -> resourceDAO.delete(resource));\n \n         entityManager().remove(connInstance);\n-\n-        connRegistry.unregisterConnector(key);\n     }\n }"},{"sha":"c3cced3234e2969671da115118568e649a5d86aa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADelegationDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,9 +28,7 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPADelegation;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPADelegationDAO extends AbstractDAO<Delegation> implements DelegationDAO {\n \n     @Override"},{"sha":"555f538b815ba6c23ea144a6257ee4e2a252d4f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,16 +26,14 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.jpa.entity.JPADerSchema;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPADerSchemaDAO extends AbstractDAO<DerSchema> implements DerSchemaDAO {\n \n-    @Autowired\n-    @Lazy\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n+\n+    public JPADerSchemaDAO(final ExternalResourceDAO resourceDAO) {\n+        this.resourceDAO = resourceDAO;\n+    }\n \n     @Override\n     public DerSchema find(final String key) {"},{"sha":"9978d520450aec09f9cdac7c8f6bd7a98d7a557e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":27,"deletions":19,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,41 +30,49 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPADynRealm;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n \n-@Repository\n public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO {\n \n     public static final String DYNMEMB_TABLE = \"DynRealmMembers\";\n \n-    @Autowired\n-    private ApplicationEventPublisher publisher;\n+    protected final ApplicationEventPublisher publisher;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO searchDAO;\n \n-    @Autowired\n-    private AnyMatchDAO anyMatchDAO;\n+    protected final AnyMatchDAO anyMatchDAO;\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    public JPADynRealmDAO(\n+            final ApplicationEventPublisher publisher,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO searchDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        this.publisher = publisher;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.searchDAO = searchDAO;\n+        this.anyMatchDAO = anyMatchDAO;\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n \n     @Override\n     public DynRealm find(final String key) {\n@@ -84,7 +92,7 @@ public DynRealm save(final DynRealm dynRealm) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private List<String> clearDynMembers(final DynRealm dynRealm) {\n+    protected List<String> clearDynMembers(final DynRealm dynRealm) {\n         Query find = entityManager().createNativeQuery(\n                 \"SELECT any_id FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=?\");\n         find.setParameter(1, dynRealm.getKey());\n@@ -102,7 +110,7 @@ private List<String> clearDynMembers(final DynRealm dynRealm) {\n         return cleared;\n     }\n \n-    private void notifyDynMembershipRemoval(final List<String> anyKeys) {\n+    protected void notifyDynMembershipRemoval(final List<String> anyKeys) {\n         anyKeys.forEach(key -> {\n             Any<?> any = userDAO.find(key);\n             if (any == null) {"},{"sha":"b304b8b47d5727dc451c95d41cee542d69db9d9a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":43,"deletions":46,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -50,39 +49,61 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implements ExternalResourceDAO {\n \n-    @Autowired\n-    private ConnectorRegistry connRegistry;\n+    protected static StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n+        StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAExternalResource.class.getSimpleName()).\n+                append(\" e WHERE e.\");\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+        if (AccountPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"accountPolicy\");\n+        } else if (PasswordPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"passwordPolicy\");\n+        } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"pullPolicy\");\n+        } else if (PushPolicy.class.isAssignableFrom(policyClass)) {\n+            query.append(\"pushPolicy\");\n+        }\n+\n+        return query;\n+    }\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n+\n+    protected final RealmDAO realmDAO;\n+\n+    public JPAExternalResourceDAO(\n+            final TaskDAO taskDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PolicyDAO policyDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final RealmDAO realmDAO) {\n+\n+        this.taskDAO = taskDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.policyDAO = policyDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.realmDAO = realmDAO;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override\n@@ -148,24 +169,6 @@ public List<ExternalResource> findByPropagationActions(final Implementation prop\n         return query.getResultList();\n     }\n \n-    private static StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n-        StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n-                append(JPAExternalResource.class.getSimpleName()).\n-                append(\" e WHERE e.\");\n-\n-        if (AccountPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"accountPolicy\");\n-        } else if (PasswordPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"passwordPolicy\");\n-        } else if (PullPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"pullPolicy\");\n-        } else if (PushPolicy.class.isAssignableFrom(policyClass)) {\n-            query.append(\"pushPolicy\");\n-        }\n-\n-        return query;\n-    }\n-\n     @Override\n     public List<ExternalResource> findByPolicy(final Policy policy) {\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n@@ -194,13 +197,7 @@ public List<ExternalResource> findAll() {\n     @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public ExternalResource save(final ExternalResource resource) {\n-        ExternalResource merged = entityManager().merge(resource);\n-        try {\n-            connRegistry.registerConnector(merged);\n-        } catch (NotFoundException e) {\n-            LOG.error(\"While registering connector for resource\", e);\n-        }\n-        return merged;\n+        return entityManager().merge(resource);\n     }\n \n     @Override"},{"sha":"dc1a86d4f3dd9c38333db18ff057a1a8dec979a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":40,"deletions":20,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,14 +36,18 @@\n import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n@@ -67,7 +71,7 @@\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n \n public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n@@ -76,23 +80,39 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n     public static final String ADYNMEMB_TABLE = \"ADynGroupMembers\";\n \n-    @Autowired\n-    private AnyMatchDAO anyMatchDAO;\n+    protected final AnyMatchDAO anyMatchDAO;\n \n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n+    protected final PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO anySearchDAO;\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    public JPAGroupDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final UserDAO userDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final AnySearchDAO searchDAO,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        this.anyMatchDAO = anyMatchDAO;\n+        this.plainAttrDAO = plainAttrDAO;\n+        this.userDAO = userDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.anySearchDAO = searchDAO;\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n \n     @Override\n     protected AnyUtils init() {\n@@ -256,7 +276,7 @@ public List<String> findAllKeys(final int page, final int itemsPerPage) {\n         return findAllKeys(JPAGroup.TABLE, page, itemsPerPage);\n     }\n \n-    private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n+    protected SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n         AssignableCond cond = new AssignableCond();\n         cond.setRealmFullPath(groupRealm.getFullPath());\n         cond.setFromGroup(true);\n@@ -275,9 +295,9 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearUDynMembers(merged);\n         if (merged.getUDynMembership() != null) {\n             SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());\n-            int count = searchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n+            int count = anySearchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                List<User> matching = searchDAO.search(\n+                List<User> matching = anySearchDAO.search(\n                         Set.of(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n@@ -298,9 +318,9 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearADynMembers(merged);\n         merged.getADynMemberships().forEach(memb -> {\n             SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n-            int count = searchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n+            int count = anySearchDAO.count(Set.of(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                List<AnyObject> matching = searchDAO.search(\n+                List<AnyObject> matching = anySearchDAO.search(\n                         Set.of(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n@@ -447,7 +467,7 @@ public void clearADynMembers(final Group group) {\n         delete.executeUpdate();\n     }\n \n-    private List<ADynGroupMembership> findWithADynMemberships(final AnyType anyType) {\n+    protected List<ADynGroupMembership> findWithADynMemberships(final AnyType anyType) {\n         TypedQuery<ADynGroupMembership> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAADynGroupMembership.class.getSimpleName() + \" e  WHERE e.anyType=:anyType\",\n                 ADynGroupMembership.class);\n@@ -546,7 +566,7 @@ public void clearUDynMembers(final Group group) {\n         delete.executeUpdate();\n     }\n \n-    private List<UDynGroupMembership> findWithUDynMemberships() {\n+    protected List<UDynGroupMembership> findWithUDynMemberships() {\n         TypedQuery<UDynGroupMembership> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAUDynGroupMembership.class.getSimpleName() + \" e\",\n                 UDynGroupMembership.class);"},{"sha":"d4d56947f17f4364fa68243ede8e208a7f114609","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,10 +24,8 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n import org.apache.syncope.core.spring.ImplementationManager;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAImplementationDAO extends AbstractDAO<Implementation> implements ImplementationDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"a63d2930da39959812a8817194c6af3626a2d3f7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAMailTemplateDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMailTemplateDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMailTemplateDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAMailTemplateDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,9 +23,7 @@\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.JPAMailTemplate;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAMailTemplateDAO extends AbstractDAO<MailTemplate> implements MailTemplateDAO {\n \n     @Override"},{"sha":"a8ae27f3cc6ca34b77293fb82755f7e3e375d904","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,15 +28,15 @@\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.jpa.entity.JPANotification;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPANotificationDAO extends AbstractDAO<Notification> implements NotificationDAO {\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n+\n+    public JPANotificationDAO(final TaskDAO taskDAO) {\n+        this.taskDAO = taskDAO;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"d832942a8cde348167cc7ae0e6c92e3b1961608f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n@@ -47,7 +47,7 @@ public static <T extends PlainAttr<?>> Class<? extends AbstractPlainAttr<?>> get\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Any<T>) plainAttr.getOwner()).remove(plainAttr);\n+            ((Attributable<T>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n         entityManager().remove(plainAttr);"},{"sha":"f84e82f928de6371aae389ffcc5adab4b74ad9c3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -37,20 +37,24 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n \n public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements PlainSchemaDAO {\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    private final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    private PlainAttrDAO plainAttrDAO;\n+    private final PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n-    @Lazy\n-    private ExternalResourceDAO resourceDAO;\n+    private final ExternalResourceDAO resourceDAO;\n+\n+    public JPAPlainSchemaDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final PlainAttrDAO plainAttrDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.plainAttrDAO = plainAttrDAO;\n+        this.resourceDAO = resourceDAO;\n+    }\n \n     @Override\n     public PlainSchema find(final String key) {"},{"sha":"fe65201b9ce6593fc119759bbbf7d5d1ef2443f6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -43,22 +43,10 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAPolicyDAO extends AbstractDAO<Policy> implements PolicyDAO {\n \n-    @Autowired\n-    @Lazy\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    @Lazy\n-    private ExternalResourceDAO resourceDAO;\n-\n-    private static <T extends Policy> Class<? extends AbstractPolicy> getEntityReference(final Class<T> reference) {\n+    protected static <T extends Policy> Class<? extends AbstractPolicy> getEntityReference(final Class<T> reference) {\n         return AccountPolicy.class.isAssignableFrom(reference)\n                 ? JPAAccountPolicy.class\n                 : PasswordPolicy.class.isAssignableFrom(reference)\n@@ -76,6 +64,15 @@ private static <T extends Policy> Class<? extends AbstractPolicy> getEntityRefer\n                 : null;\n     }\n \n+    protected final RealmDAO realmDAO;\n+\n+    protected final ExternalResourceDAO resourceDAO;\n+\n+    public JPAPolicyDAO(final RealmDAO realmDAO, final ExternalResourceDAO resourceDAO) {\n+        this.realmDAO = realmDAO;\n+        this.resourceDAO = resourceDAO;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Policy> T find(final String key) {"},{"sha":"b36b473135e7ace2702322d35eac3b1c62354995","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,18 +39,16 @@\n import org.apache.syncope.core.persistence.api.entity.policy.ProvisioningPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n-@Repository\n public class JPARealmDAO extends AbstractDAO<Realm> implements RealmDAO {\n \n-    @Autowired\n-    @Lazy\n-    private RoleDAO roleDAO;\n+    protected final RoleDAO roleDAO;\n+\n+    public JPARealmDAO(final RoleDAO roleDAO) {\n+        this.roleDAO = roleDAO;\n+    }\n \n     @Override\n     public Realm getRoot() {"},{"sha":"2a29d9b638c801753cec75be6715441ce1b27d8f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARelationshipTypeDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARelationshipTypeDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,9 +32,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPARelationshipType;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPARelationshipTypeDAO extends AbstractDAO<RelationshipType> implements RelationshipTypeDAO {\n \n     @Override"},{"sha":"9eb10f6597c2caa5d896acbb76ccd727cad4a0d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARemediationDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARemediationDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,11 +28,9 @@\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPARemediation;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n-@Repository\n public class JPARemediationDAO extends AbstractDAO<Remediation> implements RemediationDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"71cc86c0219ebb8070340b2f39fd9823c686d5dc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -25,10 +25,8 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReport;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAReportDAO extends AbstractDAO<Report> implements ReportDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"113398de0700d9c36eb5b0fb0c212c11f5276202","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,11 +27,9 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n-@Repository\n public class JPAReportExecDAO extends AbstractDAO<ReportExec> implements ReportExecDAO {\n \n     @Override"},{"sha":"4b5de9b3e1dfbfe1da20303c07e2d6efc2bad516","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportTemplateDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportTemplateDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportTemplateDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportTemplateDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,9 +23,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportTemplate;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAReportTemplateDAO extends AbstractDAO<ReportTemplate> implements ReportTemplateDAO {\n \n     @Override"},{"sha":"941929076f91f0cfa942ef89368510795fbd65d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -37,30 +37,36 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {\n \n     public static final String DYNMEMB_TABLE = \"DynRoleMembers\";\n \n-    @Autowired\n-    private AnyMatchDAO anyMatchDAO;\n+    protected final AnyMatchDAO anyMatchDAO;\n \n-    @Autowired\n-    private ApplicationEventPublisher publisher;\n+    protected final ApplicationEventPublisher publisher;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO anySearchDAO;\n \n-    @Autowired\n-    private DelegationDAO delegationDAO;\n+    protected final DelegationDAO delegationDAO;\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    public JPARoleDAO(\n+            final AnyMatchDAO anyMatchDAO,\n+            final ApplicationEventPublisher publisher,\n+            final AnySearchDAO anySearchDAO,\n+            final DelegationDAO delegationDAO,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        this.anyMatchDAO = anyMatchDAO;\n+        this.publisher = publisher;\n+        this.anySearchDAO = anySearchDAO;\n+        this.delegationDAO = delegationDAO;\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n \n     @Override\n     public int count() {\n@@ -110,7 +116,7 @@ public Role saveAndRefreshDynMemberships(final Role role) {\n         // refresh dynamic memberships\n         clearDynMembers(merged);\n         if (merged.getDynMembership() != null) {\n-            List<User> matching = searchDAO.search(\n+            List<User> matching = anySearchDAO.search(\n                     SearchCondConverter.convert(searchCondVisitor, merged.getDynMembership().getFIQLCond()),\n                     AnyTypeKind.USER);\n "},{"sha":"01d8d241b4008d433dbc018ecea226f8b1416588","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASRARouteDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASRARouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASRARouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASRARouteDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,12 +21,10 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.entity.JPASRARoute;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.SRARoute;\n import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n \n-@Repository\n public class JPASRARouteDAO extends AbstractDAO<SRARoute> implements SRARouteDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"bcc113db0558477865037c646c5fc671dd2a3090","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASecurityQuestionDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASecurityQuestionDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,14 +24,14 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPASecurityQuestion;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPASecurityQuestionDAO extends AbstractDAO<SecurityQuestion> implements SecurityQuestionDAO {\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n+\n+    public JPASecurityQuestionDAO(final UserDAO userDAO) {\n+        this.userDAO = userDAO;\n+    }\n \n     @Override\n     public SecurityQuestion find(final String key) {"},{"sha":"c28b6ff019cfbb1d481e1914dd12fea5241da5a0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -52,41 +52,34 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.ReflectionUtils;\n \n-@Repository\n public class JPATaskDAO extends AbstractDAO<Task> implements TaskDAO {\n \n-    @Autowired\n-    private RemediationDAO remediationDAO;\n-\n-    @Override\n-    public Class<? extends Task> getEntityReference(final TaskType type) {\n-        Class<? extends Task> result = null;\n+    protected static String getEntityTableName(final TaskType type) {\n+        String result = null;\n \n         switch (type) {\n             case NOTIFICATION:\n-                result = JPANotificationTask.class;\n+                result = JPANotificationTask.class.getAnnotation(DiscriminatorValue.class).value();\n                 break;\n \n             case PROPAGATION:\n-                result = JPAPropagationTask.class;\n+                result = JPAPropagationTask.class.getAnnotation(DiscriminatorValue.class).value();\n                 break;\n \n             case PUSH:\n-                result = JPAPushTask.class;\n+                result = JPAPushTask.class.getAnnotation(DiscriminatorValue.class).value();\n                 break;\n \n             case SCHEDULED:\n-                result = JPASchedTask.class;\n+                result = JPASchedTask.class.getAnnotation(DiscriminatorValue.class).value();\n                 break;\n \n             case PULL:\n-                result = JPAPullTask.class;\n+                result = JPAPullTask.class.getAnnotation(DiscriminatorValue.class).value();\n                 break;\n \n             default:\n@@ -95,28 +88,35 @@ public Class<? extends Task> getEntityReference(final TaskType type) {\n         return result;\n     }\n \n-    private static String getEntityTableName(final TaskType type) {\n-        String result = null;\n+    protected final RemediationDAO remediationDAO;\n+\n+    public JPATaskDAO(final RemediationDAO remediationDAO) {\n+        this.remediationDAO = remediationDAO;\n+    }\n+\n+    @Override\n+    public Class<? extends Task> getEntityReference(final TaskType type) {\n+        Class<? extends Task> result = null;\n \n         switch (type) {\n             case NOTIFICATION:\n-                result = JPANotificationTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                result = JPANotificationTask.class;\n                 break;\n \n             case PROPAGATION:\n-                result = JPAPropagationTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                result = JPAPropagationTask.class;\n                 break;\n \n             case PUSH:\n-                result = JPAPushTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                result = JPAPushTask.class;\n                 break;\n \n             case SCHEDULED:\n-                result = JPASchedTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                result = JPASchedTask.class;\n                 break;\n \n             case PULL:\n-                result = JPAPullTask.class.getAnnotation(DiscriminatorValue.class).value();\n+                result = JPAPullTask.class;\n                 break;\n \n             default:\n@@ -172,7 +172,7 @@ public List<PushTask> findByPushActions(final Implementation pushActions) {\n         return query.getResultList();\n     }\n \n-    private <T extends Task> StringBuilder buildFindAllQueryJPA(final TaskType type) {\n+    protected final <T extends Task> StringBuilder buildFindAllQueryJPA(final TaskType type) {\n         StringBuilder builder = new StringBuilder(\"SELECT t FROM \").\n                 append(getEntityReference(type).getSimpleName()).\n                 append(\" t WHERE \");\n@@ -211,7 +211,7 @@ public <T extends Task> List<T> findAll(final TaskType type) {\n         return findAll(type, null, null, null, null, -1, -1, List.of());\n     }\n \n-    private static StringBuilder buildFindAllQuery(\n+    protected StringBuilder buildFindAllQuery(\n             final TaskType type,\n             final ExternalResource resource,\n             final Notification notification,\n@@ -305,7 +305,7 @@ private static StringBuilder buildFindAllQuery(\n         return queryString;\n     }\n \n-    private static String toOrderByStatement(\n+    protected String toOrderByStatement(\n             final Class<? extends Task> beanClass,\n             final List<OrderByClause> orderByClauses) {\n "},{"sha":"c5863ac7914dfea20e47f299abff745c13eee6f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,16 +28,16 @@\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n-@Repository\n public class JPATaskExecDAO extends AbstractDAO<TaskExec> implements TaskExecDAO {\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n+\n+    public JPATaskExecDAO(final TaskDAO taskDAO) {\n+        this.taskDAO = taskDAO;\n+    }\n \n     @Override\n     public TaskExec find(final String key) {\n@@ -54,7 +54,7 @@ public List<TaskExec> findRecent(final int max) {\n         return query.getResultList();\n     }\n \n-    private <T extends Task> TaskExec findLatest(final T task, final String field) {\n+    protected <T extends Task> TaskExec findLatest(final T task, final String field) {\n         TypedQuery<TaskExec> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e \"\n                 + \"WHERE e.task=:task ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n@@ -125,7 +125,7 @@ public int count(final String taskKey) {\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n-    private static String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+    protected String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         StringBuilder statement = new StringBuilder();\n \n         orderByClauses.forEach(clause -> {"},{"sha":"e1c6c5faa8c9441d88ffe1a1a86b84c3e960da41","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":33,"deletions":13,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -44,12 +44,16 @@\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n@@ -74,7 +78,7 @@\n import org.apache.syncope.core.spring.policy.PasswordPolicyException;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -83,23 +87,39 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     protected static final Pattern USERNAME_PATTERN =\n             Pattern.compile('^' + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n-    @Autowired\n-    protected RoleDAO roleDAO;\n+    protected final RoleDAO roleDAO;\n \n-    @Autowired\n-    protected AccessTokenDAO accessTokenDAO;\n+    protected final AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    protected RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    protected DelegationDAO delegationDAO;\n+    protected final DelegationDAO delegationDAO;\n \n-    @Autowired\n-    protected SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n+\n+    public JPAUserDAO(\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final ApplicationEventPublisher publisher,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final RoleDAO roleDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final RealmDAO realmDAO,\n+            final GroupDAO groupDAO,\n+            final DelegationDAO delegationDAO,\n+            final SecurityProperties securityProperties) {\n+\n+        super(anyUtilsFactory, publisher, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n+        this.roleDAO = roleDAO;\n+        this.accessTokenDAO = accessTokenDAO;\n+        this.realmDAO = realmDAO;\n+        this.groupDAO = groupDAO;\n+        this.delegationDAO = delegationDAO;\n+        this.securityProperties = securityProperties;\n+    }\n \n     @Override\n     protected AnyUtils init() {"},{"sha":"d0b279d30610aa7b0eb8c142b992c2bdc9c60d5a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -38,16 +38,14 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchemaDAO {\n \n-    @Autowired\n-    @Lazy\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n+\n+    public JPAVirSchemaDAO(final ExternalResourceDAO resourceDAO) {\n+        this.resourceDAO = resourceDAO;\n+    }\n \n     @Override\n     public VirSchema find(final String key) {"},{"sha":"3254097ef5b0964730a996341904d8a4e1794c3f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthModuleDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthModuleDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,10 +24,8 @@\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Repository\n public class JPAAuthModuleDAO extends AbstractDAO<AuthModule> implements AuthModuleDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"8077fd1d58ac98e4aaaf232b63f3548ffd190042","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAAuthProfileDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAAuthProfileDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,9 +26,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthProfile;\n-import org.springframework.stereotype.Repository;\n \n-@Repository\n public class JPAAuthProfileDAO extends AbstractDAO<AuthProfile> implements AuthProfileDAO {\n \n     @Override"},{"sha":"13ec6e1bcecdf1200f72983da909ba2039e0da39","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPACASSPDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPACASSPDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.core.persistence.api.dao.auth.CASSPDAO;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPACASSPClientApp;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n import javax.persistence.NoResultException;\n@@ -30,7 +29,6 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n \n-@Repository\n public class JPACASSPDAO extends AbstractDAO<CASSPClientApp> implements CASSPDAO {\n \n     @Override"},{"sha":"a95be9aee8c44572ed6ac41b03817b7ad7edfec0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCJWKSDAO.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCJWKSDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCJWKSDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCJWKSDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,21 +22,19 @@\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCJWKS;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n \n-@Repository\n public class JPAOIDCJWKSDAO extends AbstractDAO<OIDCJWKS> implements OIDCJWKSDAO {\n \n     @Transactional(readOnly = true)\n     @Override\n     public OIDCJWKS get() {\n         try {\n             TypedQuery<OIDCJWKS> query = entityManager().\n-                createQuery(\"SELECT e FROM \" + JPAOIDCJWKS.class.getSimpleName() + \" e\", OIDCJWKS.class);\n+                    createQuery(\"SELECT e FROM \" + JPAOIDCJWKS.class.getSimpleName() + \" e\", OIDCJWKS.class);\n             return query.getSingleResult();\n         } catch (final NoResultException e) {\n             LOG.debug(e.getMessage());\n@@ -52,7 +50,7 @@ public OIDCJWKS save(final OIDCJWKS jwks) {\n     @Override\n     public void delete() {\n         entityManager().\n-            createQuery(\"DELETE FROM \" + JPAOIDCJWKS.class.getSimpleName()).\n-            executeUpdate();\n+                createQuery(\"DELETE FROM \" + JPAOIDCJWKS.class.getSimpleName()).\n+                executeUpdate();\n     }\n }"},{"sha":"a744adc918d3c520cff666304b797ef42a3b6333","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCRPDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,12 +23,10 @@\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRPClientApp;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n-@Repository\n public class JPAOIDCRPDAO extends AbstractDAO<OIDCRPClientApp> implements OIDCRPDAO {\n \n     @Override"},{"sha":"08761df1c48162f4634383370fad7037c4b434d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2IdPEntityDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2IdPEntityDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,13 +21,11 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPEntity;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2IdPEntityDAO;\n \n-@Repository\n public class JPASAML2IdPEntityDAO extends AbstractDAO<SAML2IdPEntity> implements SAML2IdPEntityDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"27b0e189009968f1b2ff6f57a9c56a96ef688241","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,15 +20,13 @@\n \n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPClientApp;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n \n-@Repository\n public class JPASAML2SPDAO extends AbstractDAO<SAML2SPClientApp> implements SAML2SPDAO {\n \n     @Override"},{"sha":"f989456c796fd7919f44c3570db0e5f4c42358b7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPEntityDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPEntityDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPEntityDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPEntityDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,12 +22,10 @@\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SPEntity;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPEntityDAO;\n \n-@Repository\n public class JPASAML2SPEntityDAO extends AbstractDAO<SAML2SPEntity> implements SAML2SPEntityDAO {\n \n     @Override"},{"sha":"a419a4c0ae9f148efa9cf699b3feb40ea4acf81c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAWAConfigDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAWAConfigDAO.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,12 +22,10 @@\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAWAConfigEntry;\n-import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import javax.persistence.TypedQuery;\n import java.util.List;\n \n-@Repository\n public class JPAWAConfigDAO extends AbstractDAO<WAConfigEntry> implements WAConfigDAO {\n \n     @Transactional(readOnly = true)"},{"sha":"95e8ff89f60b37a05baf89e1b46b83948504ef35","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -74,27 +74,26 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n public class JPAAnyUtils implements AnyUtils {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyUtils.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AnyUtils.class);\n \n-    private static final Map<String, Field> USER_FIELDS = new HashMap<>();\n+    protected static final Map<String, Field> USER_FIELDS = new HashMap<>();\n \n-    private static final Map<String, Field> GROUP_FIELDS = new HashMap<>();\n+    protected static final Map<String, Field> GROUP_FIELDS = new HashMap<>();\n \n-    private static final Map<String, Field> ANY_OBJECT_FIELDS = new HashMap<>();\n+    protected static final Map<String, Field> ANY_OBJECT_FIELDS = new HashMap<>();\n \n     static {\n         initFieldNames(JPAUser.class, USER_FIELDS);\n         initFieldNames(JPAGroup.class, GROUP_FIELDS);\n         initFieldNames(JPAAnyObject.class, ANY_OBJECT_FIELDS);\n     }\n \n-    private static void initFieldNames(final Class<?> entityClass, final Map<String, Field> fields) {\n+    protected static void initFieldNames(final Class<?> entityClass, final Map<String, Field> fields) {\n         List<Class<?>> classes = ClassUtils.getAllSuperclasses(entityClass);\n         classes.add(entityClass);\n         classes.forEach(clazz -> {\n@@ -119,27 +118,30 @@ public static boolean matchesFieldName(final String candidate) {\n                 || ANY_OBJECT_FIELDS.containsKey(candidate);\n     }\n \n-    private final AnyTypeKind anyTypeKind;\n+    protected final UserDAO userDAO;\n \n-    private final boolean linkedAccount;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyTypeKind anyTypeKind;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final boolean linkedAccount;\n \n-    protected JPAAnyUtils(final AnyTypeKind anyTypeKind) {\n-        this(anyTypeKind, false);\n-    }\n+    protected JPAAnyUtils(\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final EntityFactory entityFactory,\n+            final AnyTypeKind anyTypeKind,\n+            final boolean linkedAccount) {\n \n-    protected JPAAnyUtils(final AnyTypeKind anyTypeKind, final boolean linkedAccount) {\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.entityFactory = entityFactory;\n         this.anyTypeKind = anyTypeKind;\n         this.linkedAccount = linkedAccount;\n     }"},{"sha":"ed8294228ec86eab93f9ee7eb3285e19c35bd171","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"modified","additions":29,"deletions":7,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,29 +21,51 @@\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class JPAAnyUtilsFactory implements AnyUtilsFactory {\n \n-    private final Map<AnyTypeKind, AnyUtils> instances = new HashMap<>(3);\n+    protected final UserDAO userDAO;\n \n-    private AnyUtils linkedAccountInstance;\n+    protected final GroupDAO groupDAO;\n+\n+    protected final AnyObjectDAO anyObjectDAO;\n+\n+    protected final EntityFactory entityFactory;\n+\n+    protected final Map<AnyTypeKind, AnyUtils> instances = new HashMap<>(3);\n+\n+    protected AnyUtils linkedAccountInstance;\n+\n+    public JPAAnyUtilsFactory(\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public AnyUtils getInstance(final AnyTypeKind anyTypeKind) {\n         AnyUtils instance;\n         synchronized (instances) {\n             instance = instances.get(anyTypeKind);\n             if (instance == null) {\n-                instance = new JPAAnyUtils(anyTypeKind);\n+                instance = new JPAAnyUtils(userDAO, groupDAO, anyObjectDAO, entityFactory, anyTypeKind, false);\n                 ApplicationContextProvider.getBeanFactory().autowireBean(instance);\n                 instances.put(anyTypeKind, instance);\n             }\n@@ -74,8 +96,8 @@ public AnyUtils getInstance(final Any<?> any) {\n     public AnyUtils getLinkedAccountInstance() {\n         synchronized (this) {\n             if (linkedAccountInstance == null) {\n-                linkedAccountInstance = new JPAAnyUtils(AnyTypeKind.USER, true);\n-                ApplicationContextProvider.getBeanFactory().autowireBean(linkedAccountInstance);\n+                linkedAccountInstance = new JPAAnyUtils(\n+                        userDAO, groupDAO, anyObjectDAO, entityFactory, AnyTypeKind.USER, true);\n             }\n         }\n         return linkedAccountInstance;"},{"sha":"35f6997b1772054eea9d678d710973b116d8e03b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtilsFactory.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -26,12 +26,10 @@\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n-@Component\n public class JPAClientAppUtilsFactory implements ClientAppUtilsFactory {\n \n     @Override"},{"sha":"ec0378e43634afbbb0c6e46e219d6481de06bf1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPolicyUtilsFactory.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPolicyUtilsFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -37,9 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PolicyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class JPAPolicyUtilsFactory implements PolicyUtilsFactory {\n \n     @Override"},{"sha":"df23d08b7fce4d9c0ef45fed15ff3bf6c948f06e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,17 +33,16 @@\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n @SuppressWarnings(\"unchecked\")\n public final class JPATaskUtils implements TaskUtils {\n \n-    private final TaskType type;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final TaskType type;\n \n-    protected JPATaskUtils(final TaskType type) {\n+    protected JPATaskUtils(final EntityFactory entityFactory, final TaskType type) {\n+        this.entityFactory = entityFactory;\n         this.type = type;\n     }\n "},{"sha":"e073f765dc8523a334d6c083ddf6051f92d56f36","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,29 +27,34 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n \n-@Component\n public class JPATaskUtilsFactory implements TaskUtilsFactory {\n \n-    private final Map<TaskType, TaskUtils> instances = new HashMap<>(5);\n+    protected final EntityFactory entityFactory;\n+\n+    protected final Map<TaskType, TaskUtils> instances = new HashMap<>(5);\n+\n+    public JPATaskUtilsFactory(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public TaskUtils getInstance(final TaskType type) {\n         TaskUtils instance;\n         synchronized (instances) {\n             instance = instances.get(type);\n             if (instance == null) {\n-                instance = new JPATaskUtils(type);\n+                instance = new JPATaskUtils(entityFactory, type);\n                 ApplicationContextProvider.getBeanFactory().autowireBean(instance);\n                 instances.put(type, instance);\n             }\n@@ -102,5 +107,4 @@ public TaskUtils getInstance(final Class<? extends TaskTO> taskClass) {\n     public TaskUtils getInstance(final TaskTO taskTO) {\n         return getInstance(taskTO.getClass());\n     }\n-\n }"},{"sha":"20c593287f8b9aa9cb33fbca7be600844a2db256","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConfParamOps.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConfParamOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,9 +20,7 @@\n \n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyConfParamOps implements ConfParamOps {\n \n     @Override"},{"sha":"d7e29187a7334c658a354d090220cb26507f1524","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyConnectorManager.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyConnectorManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+\n+public class DummyConnectorManager implements ConnectorManager {\n+\n+    @Override\n+    public void registerConnector(final ExternalResource resource) throws NotFoundException {\n+    }\n+\n+    @Override\n+    public void unregisterConnector(final String id) {\n+    }\n+\n+    @Override\n+    public ConnInstance buildConnInstanceOverride(\n+            final ConnInstanceTO connInstance,\n+            final Collection<ConnConfProperty> confOverride,\n+            final Optional<Collection<ConnectorCapability>> capabilitiesOverride) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Connector createConnector(final ConnInstance connInstance) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Connector getConnector(final ExternalResource resource) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Optional<Connector> readConnector(final ExternalResource resource) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public void load() {\n+    }\n+\n+    @Override\n+    public void unload() {\n+    }\n+}"},{"sha":"567e306e5e109adf60ece92305d535b949c90e1c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyDomainOps.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyDomainOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,14 +23,14 @@\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.DomainRegistry;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyDomainOps implements DomainOps {\n \n-    @Autowired\n-    private DomainRegistry domainRegistry;\n+    private final DomainRegistry domainRegistry;\n+\n+    public DummyDomainOps(final DomainRegistry domainRegistry) {\n+        this.domainRegistry = domainRegistry;\n+    }\n \n     @Override\n     public List<Domain> list() {"},{"sha":"9ccb135da8faf8e02e828214d21d8319e9a4e67f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDummyImplementationLookup.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,9 +34,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPushCorrelationRule;\n import org.apache.syncope.core.spring.policy.DefaultAccountRule;\n import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyImplementationLookup implements ImplementationLookup {\n \n     @Override"},{"sha":"cc2f282fd020fbc14ea8cef23bf7abcfa55c7aa6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/PersistenceTestContext.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,10 +20,19 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.spring.security.DefaultPasswordGenerator;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n@@ -66,6 +75,17 @@ public String anonymousUser() {\n         return anonymousUser;\n     }\n \n+    @Bean\n+    @Autowired\n+    public TestInitializer testInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n+    }\n+\n     @Bean\n     public SecurityProperties securityProperties() {\n         return new SecurityProperties();\n@@ -75,4 +95,25 @@ public SecurityProperties securityProperties() {\n     public PasswordGenerator passwordGenerator() {\n         return new DefaultPasswordGenerator();\n     }\n+\n+    @Bean\n+    public ImplementationLookup implementationLookup() {\n+        return new DummyImplementationLookup();\n+    }\n+\n+    @Bean\n+    public ConfParamOps confParamOps() {\n+        return new DummyConfParamOps();\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public DomainOps domainOps(final DomainRegistry domainRegistry) {\n+        return new DummyDomainOps(domainRegistry);\n+    }\n+\n+    @Bean\n+    public ConnectorManager connectorManager() {\n+        return new DummyConnectorManager();\n+    }\n }"},{"sha":"e894ffa3d37270a1d7985174ec4b6aec3ac6cb6c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/TestInitializer.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FTestInitializer.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,32 +22,30 @@\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.content.ContentLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class TestInitializer implements InitializingBean, ApplicationContextAware {\n+public class TestInitializer implements InitializingBean {\n \n-    private ConfigurableApplicationContext ctx;\n+    private final StartupDomainLoader domainLoader;\n \n-    @Autowired\n-    private StartupDomainLoader domainLoader;\n+    private final DomainHolder domainHolder;\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    private final ContentLoader contentLoader;\n \n-    @Autowired\n-    private ContentLoader contentLoader;\n+    private final ConfigurableApplicationContext ctx;\n \n-    @Override\n-    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n-        this.ctx = (ConfigurableApplicationContext) ctx;\n+    public TestInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        this.domainLoader = domainLoader;\n+        this.domainHolder = domainHolder;\n+        this.contentLoader = contentLoader;\n+        this.ctx = ctx;\n     }\n \n     @Override"},{"sha":"7bfcd49f5a8731439ec404d77b756efa09846bb2","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -348,7 +348,7 @@ under the License.\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <SchemaLabel id=\"d90f90d0-cf15-407e-bac7-d46a8eb57c05\" schema_id=\"firstname\" locale=\"en\" display=\"Firstname\"/>\n   <SchemaLabel id=\"a9465ef0-b8b4-4af4-840d-77031a6b54a0\" schema_id=\"firstname\" locale=\"it\" display=\"Nome\"/>\n-  <SchemaLabel id=\"ac8b7383-62df-490d-9364-88dbd3d301aa\" schema_id=\"firstname\" locale=\"pt_BR\" display=\"Nome próprio\"/>\n+  <SchemaLabel id=\"ac8b7383-62df-490d-9364-88dbd3d301aa\" schema_id=\"firstname\" locale=\"pt_BR\" display=\"Nome\"/>\n   <SyncopeSchema id=\"surname\"/>\n   <PlainSchema id=\"surname\" type=\"String\" anyTypeClass_id=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"5a51923463fedb6e4cd9d3c07d49bcc8946aee4b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorManager.java","status":"renamed","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,7 +31,7 @@\n  *\n  * @see Connector\n  */\n-public interface ConnectorFactory {\n+public interface ConnectorManager {\n \n     /**\n      * Builds connector instance override over base connector instance, configuration and capabilities.\n@@ -83,4 +83,18 @@ ConnInstance buildConnInstanceOverride(\n      * @see ExternalResource\n      */\n     void unload();\n+\n+    /**\n+     * Create and register into Spring context a bean for the given resource.\n+     *\n+     * @param resource external resource\n+     */\n+    void registerConnector(ExternalResource resource);\n+\n+    /**\n+     * Removes the Spring bean for the given id from the context.\n+     *\n+     * @param id Spring bean id\n+     */\n+    void unregisterConnector(String id);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java"},{"sha":"c1cc547e7b252006e3e37b7628b516488fb8f6ba","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorRegistry.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8a15b7929069950e553db35487c96a4e5ec60d8f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8a15b7929069950e553db35487c96a4e5ec60d8f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorRegistry.java?ref=8a15b7929069950e553db35487c96a4e5ec60d8f","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api;\n-\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-\n-/**\n- * Manage Spring beans lifecycle for connectors.\n- */\n-public interface ConnectorRegistry {\n-\n-    /**\n-     * Create and register into Spring context a bean for the given resource.\n-     *\n-     * @param resource external resource\n-     */\n-    void registerConnector(ExternalResource resource);\n-\n-    /**\n-     * Removes the Spring bean for the given id from the context.\n-     *\n-     * @param id Spring bean id\n-     */\n-    void unregisterConnector(String id);\n-}"},{"sha":"89856da3aeecb3db7d3952cdeb5394c576e95188","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrNameParser.java","status":"modified","additions":26,"deletions":19,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,46 +30,53 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @SuppressWarnings({ \"squid:S4784\", \"squid:S3776\" })\n public class IntAttrNameParser {\n-    \n-    private static final String END_PATTERN = \")\\\\]\\\\.(.+)\";\n \n-    private static final Pattern PRIVILEGE_PATTERN = Pattern.compile(\n+    protected static final String END_PATTERN = \")\\\\]\\\\.(.+)\";\n+\n+    protected static final Pattern PRIVILEGE_PATTERN = Pattern.compile(\n             \"^privileges\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\");\n \n-    private static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\n+    protected static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\n             \"^groups\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n-    private static final Pattern RELATED_USER_PATTERN = Pattern.compile(\n+    protected static final Pattern RELATED_USER_PATTERN = Pattern.compile(\n             \"^users\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n-    private static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\n+    protected static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\n             \"^anyObjects\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n-    private static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\n+    protected static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\n             \"^memberships\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n-    private static final Pattern RELATIONSHIP_PATTERN = Pattern.compile(\n+    protected static final Pattern RELATIONSHIP_PATTERN = Pattern.compile(\n             \"^relationships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\"\n             + \"\\\\[(\" + SyncopeConstants.NAME_PATTERN + END_PATTERN);\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n+\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    public IntAttrNameParser(\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n \n-    private Pair<Schema, SchemaType> find(final String key) {\n+    protected Pair<Schema, SchemaType> find(final String key) {\n         Schema schema = plainSchemaDAO.find(key);\n         if (schema == null) {\n             schema = derSchemaDAO.find(key);\n@@ -88,7 +95,7 @@ private Pair<Schema, SchemaType> find(final String key) {\n         }\n     }\n \n-    private void setFieldOrSchemaName(\n+    protected void setFieldOrSchemaName(\n             final String fieldOrSchemaName,\n             final AnyTypeKind anyTypeKind,\n             final IntAttrName result) {"},{"sha":"5e77dd14c91aa938fb8d4f4d8cb80079a99f0a24","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePushExecutor.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,11 +33,13 @@ List<ProvisioningReport> push(\n             Provision provision,\n             Connector connector,\n             Any<?> any,\n-            PushTaskTO pushTaskTO) throws JobExecutionException;\n+            PushTaskTO pushTaskTO,\n+            String executor) throws JobExecutionException;\n \n     ProvisioningReport push(\n             Provision provision,\n             Connector connector,\n             LinkedAccount account,\n-            PushTaskTO pushTaskTO) throws JobExecutionException;\n+            PushTaskTO pushTaskTO,\n+            String executor) throws JobExecutionException;\n }"},{"sha":"4f195ec1abc91f45629b573643955281e52e6ee2","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/IntAttrNameParserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,7 +48,6 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.springframework.util.ReflectionUtils;\n \n@@ -77,7 +76,6 @@ public class IntAttrNameParserTest extends AbstractTest {\n     @Mock\n     private AnyUtils anyUtils;\n \n-    @InjectMocks\n     private IntAttrNameParser intAttrNameParser;\n \n     @BeforeEach\n@@ -131,6 +129,8 @@ public void initMocks() throws NoSuchFieldException {\n                     return null;\n             }\n         });\n+\n+        intAttrNameParser = new IntAttrNameParser(plainSchemaDAO, derSchemaDAO, virSchemaDAO, anyUtilsFactory);\n     }\n \n     @Test"},{"sha":"f2e1cdc9a01347bf1a35646528a216ac0bf51603","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,13 +36,11 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.scheduling.annotation.AsyncResult;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the corresponding connector instance has been configured to\n  * allow every single operation: if not, simply do nothing.\n  */\n-@Component\n public class AsyncConnectorFacade {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AsyncConnectorFacade.class);"},{"sha":"13f8b54b31e5b33a4b1df247392bbcdfa82921a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorLoader.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorLoader.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,16 +20,16 @@\n \n import javax.sql.DataSource;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class ConnectorLoader implements SyncopeCoreLoader {\n \n-    @Autowired\n-    private ConnectorFactory connectorFactory;\n+    protected final ConnectorManager connectorManager;\n+\n+    public ConnectorLoader(final ConnectorManager connectorManager) {\n+        this.connectorManager = connectorManager;\n+    }\n \n     @Override\n     public int getOrder() {\n@@ -39,7 +39,7 @@ public int getOrder() {\n     @Override\n     public void load(final String domain, final DataSource datasource) {\n         AuthContextUtils.callAsAdmin(domain, () -> {\n-            connectorFactory.load();\n+            connectorManager.load();\n             return null;\n         });\n     }"},{"sha":"4a6469c48cbd412edb6d79b1f2bbc2ff077a00ac","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":19,"deletions":11,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,26 +39,34 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisioningManager {\n \n-    @Autowired\n-    protected AnyObjectWorkflowAdapter awfAdapter;\n+    protected final AnyObjectWorkflowAdapter awfAdapter;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n+    protected final PropagationManager propagationManager;\n \n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n+    protected final PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected VirAttrHandler virtAttrHandler;\n+    protected final VirAttrHandler virtAttrHandler;\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n+\n+    public DefaultAnyObjectProvisioningManager(\n+            final AnyObjectWorkflowAdapter awfAdapter,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor,\n+            final VirAttrHandler virtAttrHandler,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n+        this.awfAdapter = awfAdapter;\n+        this.propagationManager = propagationManager;\n+        this.taskExecutor = taskExecutor;\n+        this.virtAttrHandler = virtAttrHandler;\n+        this.anyObjectDAO = anyObjectDAO;\n+    }\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create("},{"sha":"880f72e47ea9ee31dd00569bceeeddbe568367de","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.persistence.api.entity.AuditConf;\n@@ -45,9 +44,9 @@\n @Transactional(readOnly = true)\n public class DefaultAuditManager implements AuditManager {\n \n-    private static final String MASKED_VALUE = \"<MASKED>\";\n+    protected static final String MASKED_VALUE = \"<MASKED>\";\n \n-    private static Object maskSensitive(final Object object) {\n+    protected static Object maskSensitive(final Object object) {\n         Object masked;\n \n         if (object instanceof UserTO) {\n@@ -76,8 +75,11 @@ private static Object maskSensitive(final Object object) {\n         return masked;\n     }\n \n-    @Autowired\n-    private AuditConfDAO auditDAO;\n+    protected final AuditConfDAO auditConfDAO;\n+\n+    public DefaultAuditManager(final AuditConfDAO auditConfDAO) {\n+        this.auditConfDAO = auditConfDAO;\n+    }\n \n     @Override\n     public boolean auditRequested(\n@@ -92,17 +94,17 @@ public boolean auditRequested(\n         auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS));\n         auditEntry.setDate(new Date());\n \n-        AuditConf audit = auditDAO.find(auditEntry.getLogger().toAuditKey());\n-        boolean auditRequested = audit != null && audit.isActive();\n+        AuditConf auditConf = auditConfDAO.find(auditEntry.getLogger().toAuditKey());\n+        boolean auditRequested = auditConf != null && auditConf.isActive();\n \n         if (auditRequested) {\n             return true;\n         }\n \n         auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.FAILURE));\n \n-        audit = auditDAO.find(auditEntry.getLogger().toAuditKey());\n-        auditRequested = audit != null && audit.isActive();\n+        auditConf = auditConfDAO.find(auditEntry.getLogger().toAuditKey());\n+        auditRequested = auditConf != null && auditConf.isActive();\n \n         return auditRequested;\n     }\n@@ -137,7 +139,7 @@ public void audit(\n \n         AuditLoggerName auditLoggerName = new AuditLoggerName(type, category, subcategory, event, condition);\n \n-        AuditConf audit = auditDAO.find(auditLoggerName.toAuditKey());\n+        AuditConf audit = auditConfDAO.find(auditLoggerName.toAuditKey());\n         if (audit != null && audit.isActive()) {\n             Throwable throwable = null;\n             if (output instanceof Throwable) {"},{"sha":"3c6d875918ef6a9f96f2c266720bab155a2148ef","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultConnIdBundleManager.java","status":"renamed","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnIdBundleManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -49,21 +49,22 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ConnIdBundleManagerImpl implements ConnIdBundleManager {\n+public class DefaultConnIdBundleManager implements ConnIdBundleManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnIdBundleManager.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ConnIdBundleManager.class);\n \n     /**\n      * ConnId Locations.\n      */\n-    private final List<URI> locations;\n+    protected final List<URI> locations;\n \n     /**\n      * ConnectorInfoManager instances.\n      */\n-    private final Map<URI, ConnectorInfoManager> connInfoManagers = Collections.synchronizedMap(new LinkedHashMap<>());\n+    protected final Map<URI, ConnectorInfoManager> connInfoManagers =\n+            Collections.synchronizedMap(new LinkedHashMap<>());\n \n-    public ConnIdBundleManagerImpl(final List<String> stringLocations) {\n+    public DefaultConnIdBundleManager(final List<String> stringLocations) {\n         locations = new ArrayList<>();\n         stringLocations.forEach(location -> {\n             try {\n@@ -80,7 +81,7 @@ public List<URI> getLocations() {\n         return locations;\n     }\n \n-    private void initLocal(final URI location) {\n+    protected void initLocal(final URI location) {\n         // 1. Find bundles inside local directory\n         File bundleDirectory = new File(location);\n         String[] bundleFiles = bundleDirectory.list();\n@@ -114,7 +115,7 @@ private void initLocal(final URI location) {\n         connInfoManagers.put(location, manager);\n     }\n \n-    private void initRemote(final URI location) {\n+    protected void initRemote(final URI location) {\n         // 1. Extract conf params for remote connection from given URI\n         String host = location.getHost();\n         int port = location.getPort();","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java"},{"sha":"db0f37c37d15a64b47a523ef20d423cda8a43505","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultConnectorManager.java","status":"renamed","additions":28,"deletions":29,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnectorManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -36,46 +36,51 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.ConnPoolConfUtils;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Lazy;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n-public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n+public class DefaultConnectorManager implements ConnectorManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnectorManager.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ConnectorManager.class);\n \n-    @Autowired\n-    private ConnIdBundleManager connIdBundleManager;\n+    protected static String getBeanName(final ExternalResource resource) {\n+        return String.format(\"connInstance-%s-%S-%s\",\n+                AuthContextUtils.getDomain(), resource.getConnector().getKey(), resource.getKey());\n+    }\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final ConnIdBundleManager connIdBundleManager;\n \n-    @Autowired\n-    @Lazy\n-    private ExternalResourceDAO resourceDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private ConnInstanceDataBinder connInstanceDataBinder;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private AsyncConnectorFacade asyncFacade;\n+    protected final ConnInstanceDataBinder connInstanceDataBinder;\n \n-    private EntityFactory entityFactory;\n+    protected final AsyncConnectorFacade asyncFacade;\n \n-    private static String getBeanName(final ExternalResource resource) {\n-        return String.format(\"connInstance-%s-%S-%s\",\n-                AuthContextUtils.getDomain(), resource.getConnector().getKey(), resource.getKey());\n+    protected final EntityFactory entityFactory;\n+\n+    public DefaultConnectorManager(\n+            final ConnIdBundleManager connIdBundleManager,\n+            final RealmDAO realmDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConnInstanceDataBinder connInstanceDataBinder,\n+            final AsyncConnectorFacade asyncFacade,\n+            final EntityFactory entityFactory) {\n+\n+        this.connIdBundleManager = connIdBundleManager;\n+        this.realmDAO = realmDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.connInstanceDataBinder = connInstanceDataBinder;\n+        this.asyncFacade = asyncFacade;\n+        this.entityFactory = entityFactory;\n     }\n \n     @Override\n@@ -99,12 +104,6 @@ public ConnInstance buildConnInstanceOverride(\n             final Collection<ConnConfProperty> confOverride,\n             final Optional<Collection<ConnectorCapability>> capabilitiesOverride) {\n \n-        synchronized (this) {\n-            if (entityFactory == null) {\n-                entityFactory = ApplicationContextProvider.getApplicationContext().getBean(EntityFactory.class);\n-            }\n-        }\n-\n         ConnInstance override = entityFactory.newEntity(ConnInstance.class);\n         override.setAdminRealm(realmDAO.findByFullPath(connInstance.getAdminRealm()));\n         override.setConnectorName(connInstance.getConnectorName());","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java"},{"sha":"29717f35dfb81590582323c56656ddb9fb9a4b3f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultDerAttrHandler.java","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultDerAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultDerAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultDerAttrHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,20 +32,14 @@\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(readOnly = true)\n-@Component\n-public class DerAttrHandlerImpl implements DerAttrHandler {\n+public class DefaultDerAttrHandler implements DerAttrHandler {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DerAttrHandler.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DerAttrHandler.class);\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n-    private static Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema> schemas) {\n+    protected static Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema> schemas) {\n         Map<DerSchema, String> result = new HashMap<>(schemas.size());\n \n         schemas.forEach(schema -> {\n@@ -59,6 +53,12 @@ private static Map<DerSchema, String> getValues(final Any<?> any, final Set<DerS\n         return result;\n     }\n \n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public DefaultDerAttrHandler(final AnyUtilsFactory anyUtilsFactory) {\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n+\n     @Override\n     public String getValue(final Any<?> any, final DerSchema schema) {\n         if (!anyUtilsFactory.getInstance(any).dao().\n@@ -90,8 +90,8 @@ public Map<DerSchema, String> getValues(final Any<?> any) {\n                 anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, DerSchema.class).getForSelf());\n     }\n \n-    private static Map<DerSchema, String> getValues(\n-        final GroupableRelatable<?, ?, ?, ?, ?> any, final Membership<?> membership, final Set<DerSchema> schemas) {\n+    protected static Map<DerSchema, String> getValues(\n+            final GroupableRelatable<?, ?, ?, ?, ?> any, final Membership<?> membership, final Set<DerSchema> schemas) {\n \n         Map<DerSchema, String> result = new HashMap<>(schemas.size());\n ","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java"},{"sha":"5fbe459184220c834bf5b8dc1d5a2b43ce7c2124","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":22,"deletions":13,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,7 +24,6 @@\n import java.util.Collection;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.GroupCR;\n@@ -48,23 +47,33 @@\n \n public class DefaultGroupProvisioningManager implements GroupProvisioningManager {\n \n-    @Autowired\n-    protected GroupWorkflowAdapter gwfAdapter;\n+    protected final GroupWorkflowAdapter gwfAdapter;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n+    protected final PropagationManager propagationManager;\n \n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n+    protected final PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected GroupDataBinder groupDataBinder;\n+    protected final GroupDataBinder groupDataBinder;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    protected VirAttrHandler virtAttrHandler;\n+    protected final VirAttrHandler virtAttrHandler;\n+\n+    public DefaultGroupProvisioningManager(\n+            final GroupWorkflowAdapter gwfAdapter,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor,\n+            final GroupDataBinder groupDataBinder,\n+            final GroupDAO groupDAO,\n+            final VirAttrHandler virtAttrHandler) {\n+\n+        this.gwfAdapter = gwfAdapter;\n+        this.propagationManager = propagationManager;\n+        this.taskExecutor = taskExecutor;\n+        this.groupDataBinder = groupDataBinder;\n+        this.groupDAO = groupDAO;\n+        this.virtAttrHandler = virtAttrHandler;\n+    }\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create("},{"sha":"e489af4353e1b183097246b51d4bfcafc0666eb6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"renamed","additions":51,"deletions":37,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -101,59 +101,73 @@\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.Uid;\n \n-@Component\n-public class MappingManagerImpl implements MappingManager {\n+public class DefaultMappingManager implements MappingManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(MappingManager.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(MappingManager.class);\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private RelationshipTypeDAO relationshipTypeDAO;\n+    protected final RelationshipTypeDAO relationshipTypeDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private ApplicationDAO applicationDAO;\n+    protected final ApplicationDAO applicationDAO;\n \n-    @Autowired\n-    private DerAttrHandler derAttrHandler;\n+    protected final DerAttrHandler derAttrHandler;\n \n-    @Autowired\n-    private VirAttrHandler virAttrHandler;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    private VirAttrCache virAttrCache;\n+    protected final VirAttrCache virAttrCache;\n \n-    @Autowired\n-    private PasswordGenerator passwordGenerator;\n+    protected final PasswordGenerator passwordGenerator;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n+    protected final IntAttrNameParser intAttrNameParser;\n+\n+    public DefaultMappingManager(\n+            final AnyTypeDAO anyTypeDAO,\n+            final UserDAO userDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final GroupDAO groupDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final RealmDAO realmDAO,\n+            final ApplicationDAO applicationDAO,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final VirAttrCache virAttrCache,\n+            final PasswordGenerator passwordGenerator,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.userDAO = userDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.groupDAO = groupDAO;\n+        this.relationshipTypeDAO = relationshipTypeDAO;\n+        this.realmDAO = realmDAO;\n+        this.applicationDAO = applicationDAO;\n+        this.derAttrHandler = derAttrHandler;\n+        this.virAttrHandler = virAttrHandler;\n+        this.virAttrCache = virAttrCache;\n+        this.passwordGenerator = passwordGenerator;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.intAttrNameParser = intAttrNameParser;\n+    }\n \n     protected String processPreparedAttr(final Pair<String, Attribute> preparedAttr, final Set<Attribute> attributes) {\n         String connObjectKey = null;\n@@ -188,7 +202,7 @@ protected String processPreparedAttr(final Pair<String, Attribute> preparedAttr,\n         return connObjectKey;\n     }\n \n-    private static Name getName(final String evalConnObjectLink, final String connObjectKey) {\n+    protected static Name getName(final String evalConnObjectLink, final String connObjectKey) {\n         // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n         // otherwise evaluated connObjectLink expression is taken as Name().\n         Name name;\n@@ -217,7 +231,7 @@ private static Name getName(final String evalConnObjectLink, final String connOb\n      * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    private Name evaluateNAME(final Any<?> any, final Provision provision, final String connObjectKey) {\n+    protected Name evaluateNAME(final Any<?> any, final Provision provision, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.warn(\"Missing ConnObjectKey value for {}: \", provision.getResource());\n@@ -249,7 +263,7 @@ private Name evaluateNAME(final Any<?> any, final Provision provision, final Str\n      * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    private Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String connObjectKey) {\n+    protected Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.warn(\"Missing ConnObjectKey value for {}: \", orgUnit.getResource());\n@@ -405,7 +419,7 @@ public Set<Attribute> prepareAttrsFromLinkedAccount(\n         return attributes;\n     }\n \n-    private String getIntValue(final Realm realm, final Item orgUnitItem) {\n+    protected String getIntValue(final Realm realm, final Item orgUnitItem) {\n         String value = null;\n         switch (orgUnitItem.getIntAttrName()) {\n             case \"key\":\n@@ -854,7 +868,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n         return trans;\n     }\n \n-    private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n+    protected String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n         Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);\n \n         Pair<String, Attribute> preparedAttr = null;","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java"},{"sha":"2454aeb976055880a08a4a1fa0288213fd015dae","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":19,"deletions":11,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,28 +48,36 @@\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n public class DefaultUserProvisioningManager implements UserProvisioningManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(UserProvisioningManager.class);\n \n-    @Autowired\n-    protected UserWorkflowAdapter uwfAdapter;\n+    protected final UserWorkflowAdapter uwfAdapter;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n+    protected final PropagationManager propagationManager;\n \n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n+    protected final PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected VirAttrHandler virtAttrHandler;\n+    protected final VirAttrHandler virtAttrHandler;\n \n-    @Autowired\n-    protected UserDAO userDAO;\n+    protected final UserDAO userDAO;\n+\n+    public DefaultUserProvisioningManager(\n+            final UserWorkflowAdapter uwfAdapter,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor,\n+            final VirAttrHandler virtAttrHandler,\n+            final UserDAO userDAO) {\n+\n+        this.uwfAdapter = uwfAdapter;\n+        this.propagationManager = propagationManager;\n+        this.taskExecutor = taskExecutor;\n+        this.virtAttrHandler = virtAttrHandler;\n+        this.userDAO = userDAO;\n+    }\n \n     @Override\n     public Pair<String, List<PropagationStatus>> create("},{"sha":"84db10542fb201f2f3f557ec8f437dafdf642d30","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultVirAttrHandler.java","status":"renamed","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultVirAttrHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheKey;\n@@ -43,27 +43,32 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(readOnly = true)\n-@Component\n-public class VirAttrHandlerImpl implements VirAttrHandler {\n+public class DefaultVirAttrHandler implements VirAttrHandler {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n \n-    @Autowired\n-    private ConnectorFactory connFactory;\n+    protected final ConnectorManager connectorManager;\n \n-    @Autowired\n-    private VirAttrCache virAttrCache;\n+    protected final VirAttrCache virAttrCache;\n \n-    @Autowired\n-    private OutboundMatcher outboundMatcher;\n+    protected final OutboundMatcher outboundMatcher;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public DefaultVirAttrHandler(\n+            final ConnectorManager connectorManager,\n+            final VirAttrCache virAttrCache,\n+            final OutboundMatcher outboundMatcher,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.connectorManager = connectorManager;\n+        this.virAttrCache = virAttrCache;\n+        this.outboundMatcher = outboundMatcher;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n \n     @Override\n     public void setValues(final Any<?> any, final ConnectorObject connObj) {\n@@ -92,7 +97,7 @@ public void setValues(final Any<?> any, final ConnectorObject connObj) {\n         });\n     }\n \n-    private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSchema> schemas) {\n+    protected Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSchema> schemas) {\n         Set<ExternalResource> resources = anyUtilsFactory.getInstance(any).getAllResources(any);\n \n         Map<VirSchema, List<String>> result = new HashMap<>();\n@@ -120,7 +125,7 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n             LOG.debug(\"About to read from {}: {}\", provision, schemasToRead);\n \n             outboundMatcher.match(\n-                    connFactory.getConnector(provision.getResource()),\n+                    connectorManager.getConnector(provision.getResource()),\n                     any,\n                     provision,\n                     Optional.empty(),","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java"},{"sha":"5030ce087ae1496854cb609eca975ec3e0c4b166","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":967,"deletions":56,"changes":1023,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,7 +21,6 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import java.io.IOException;\n import java.io.PrintStream;\n-import java.lang.reflect.InvocationTargetException;\n import java.nio.charset.StandardCharsets;\n import java.util.Properties;\n import java.util.concurrent.Executor;\n@@ -33,30 +32,158 @@\n import javax.naming.NamingException;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.LogOutputStream;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyMatchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthModuleDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.WAConfigDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AuthModuleDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.DelegationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RelationshipTypeDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SRARouteDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.SecurityQuestionDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.java.cache.CaffeineVirAttrCache;\n+import org.apache.syncope.core.provisioning.java.data.AccessTokenDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AnyObjectDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AnyTypeClassDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AnyTypeDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.ApplicationDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AuditDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AuthModuleDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.AuthProfileDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.ClientAppDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.ConnInstanceDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.DelegationDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.DynRealmDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.GroupDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.ImplementationDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.NotificationDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.OIDCJWKSDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.PolicyDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.RealmDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.RelationshipTypeDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.RemediationDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.ReportDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.ResourceDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.RoleDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.SAML2IdPEntityDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.SAML2SPEntityDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.SRARouteDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.SchemaDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.SecurityQuestionDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.TaskDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.UserDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.WAConfigDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.wa.WAClientAppDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.job.AutowiringSpringBeanJobFactory;\n-import org.apache.syncope.core.provisioning.java.job.JobManagerImpl;\n+import org.apache.syncope.core.provisioning.java.job.DefaultJobManager;\n import org.apache.syncope.core.provisioning.java.job.SchedulerDBInit;\n import org.apache.syncope.core.provisioning.java.job.SchedulerShutdown;\n+import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n+import org.apache.syncope.core.provisioning.java.job.notification.DefaultNotificationJobDelegate;\n+import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n+import org.apache.syncope.core.provisioning.java.job.report.DefaultReportJobDelegate;\n+import org.apache.syncope.core.provisioning.java.notification.DefaultNotificationManager;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationManager;\n+import org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n+import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n+import org.apache.syncope.core.spring.security.DefaultCredentialChecker;\n+import org.apache.syncope.core.spring.security.PasswordGenerator;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.apache.syncope.core.spring.security.jws.AccessTokenJWSSigner;\n+import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n+import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n import org.springframework.context.annotation.Lazy;\n@@ -72,7 +199,6 @@\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.PlatformTransactionManager;\n \n-@ComponentScan(\"org.apache.syncope.core.provisioning.java\")\n @EnableAsync\n @EnableConfigurationProperties(ProvisioningProperties.class)\n @Configuration\n@@ -87,11 +213,38 @@ public class ProvisioningContext implements AsyncConfigurer {\n     private PlatformTransactionManager masterTransactionManager;\n \n     @Autowired\n-    private ProvisioningProperties props;\n+    private ProvisioningProperties provisioningProperties;\n+\n+    @Autowired\n+    private SecurityProperties securityProperties;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @Autowired\n+    private TaskUtilsFactory taskUtilsFactory;\n+\n+    @Autowired\n+    private PasswordGenerator passwordGenerator;\n+\n+    @Autowired\n+    private SearchCondVisitor searchCondVisitor;\n+\n+    @Autowired\n+    private DomainHolder domainHolder;\n \n     @Autowired\n     private ApplicationContext ctx;\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AsyncConnectorFacade asyncConnectorFacade() {\n+        return new AsyncConnectorFacade();\n+    }\n+\n     /**\n      * Annotated as {@code @Primary} because it will be used by {@code @Async} in {@link AsyncConnectorFacade}.\n      *\n@@ -101,9 +254,9 @@ public class ProvisioningContext implements AsyncConfigurer {\n     @Primary\n     public Executor asyncConnectorFacadeExecutor() {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n-        executor.setCorePoolSize(props.getAsyncConnectorFacadeExecutor().getCorePoolSize());\n-        executor.setMaxPoolSize(props.getAsyncConnectorFacadeExecutor().getMaxPoolSize());\n-        executor.setQueueCapacity(props.getAsyncConnectorFacadeExecutor().getQueueCapacity());\n+        executor.setCorePoolSize(provisioningProperties.getAsyncConnectorFacadeExecutor().getCorePoolSize());\n+        executor.setMaxPoolSize(provisioningProperties.getAsyncConnectorFacadeExecutor().getMaxPoolSize());\n+        executor.setQueueCapacity(provisioningProperties.getAsyncConnectorFacadeExecutor().getQueueCapacity());\n         executor.setThreadNamePrefix(\"AsyncConnectorFacadeExecutor-\");\n         executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());\n         executor.initialize();\n@@ -121,11 +274,11 @@ public Executor getAsyncExecutor() {\n      * @return executor\n      */\n     @Bean\n-    public Executor propagationTaskExecutorAsyncExecutor() {\n+    public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor() {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n-        executor.setCorePoolSize(props.getPropagationTaskExecutorAsyncExecutor().getCorePoolSize());\n-        executor.setMaxPoolSize(props.getPropagationTaskExecutorAsyncExecutor().getMaxPoolSize());\n-        executor.setQueueCapacity(props.getPropagationTaskExecutorAsyncExecutor().getQueueCapacity());\n+        executor.setCorePoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getCorePoolSize());\n+        executor.setMaxPoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getMaxPoolSize());\n+        executor.setQueueCapacity(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getQueueCapacity());\n         executor.setThreadNamePrefix(\"PropagationTaskExecutor-\");\n         executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());\n         executor.initialize();\n@@ -141,7 +294,7 @@ public SchedulerDBInit quartzDataSourceInit() throws JsonProcessingException {\n         databasePopulator.setContinueOnError(true);\n         databasePopulator.setIgnoreFailedDrops(true);\n         databasePopulator.setSqlScriptEncoding(StandardCharsets.UTF_8.name());\n-        databasePopulator.setScripts(new ClassPathResource(\"/quartz/\" + props.getQuartz().getSql()));\n+        databasePopulator.setScripts(new ClassPathResource(\"/quartz/\" + provisioningProperties.getQuartz().getSql()));\n         init.setDatabasePopulator(databasePopulator);\n \n         return init;\n@@ -163,13 +316,13 @@ public SchedulerFactoryBean scheduler() {\n         Properties quartzProperties = new Properties();\n         quartzProperties.setProperty(\n                 \"org.quartz.scheduler.idleWaitTime\",\n-                String.valueOf(props.getQuartz().getIdleWaitTime()));\n+                String.valueOf(provisioningProperties.getQuartz().getIdleWaitTime()));\n         quartzProperties.setProperty(\n                 \"org.quartz.jobStore.misfireThreshold\",\n-                String.valueOf(props.getQuartz().getMisfireThreshold()));\n+                String.valueOf(provisioningProperties.getQuartz().getMisfireThreshold()));\n         quartzProperties.setProperty(\n                 \"org.quartz.jobStore.driverDelegateClass\",\n-                props.getQuartz().getDelegate().getName());\n+                provisioningProperties.getQuartz().getDelegate().getName());\n         quartzProperties.setProperty(\"org.quartz.jobStore.isClustered\", \"true\");\n         quartzProperties.setProperty(\"org.quartz.jobStore.clusterCheckinInterval\", \"20000\");\n         quartzProperties.setProperty(\"org.quartz.scheduler.instanceName\", \"ClusteredScheduler\");\n@@ -185,10 +338,25 @@ public SchedulerShutdown schedulerShutdown() {\n         return new SchedulerShutdown(ctx);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public JobManager jobManager() {\n-        JobManagerImpl jobManager = new JobManagerImpl();\n-        jobManager.setDisableQuartzInstance(props.getQuartz().isDisableInstance());\n+    @Autowired\n+    public JobManager jobManager(\n+            final SchedulerFactoryBean scheduler,\n+            final TaskDAO taskDAO,\n+            final ReportDAO reportDAO,\n+            final ImplementationDAO implementationDAO,\n+            final ConfParamOps confParamOps) {\n+\n+        DefaultJobManager jobManager = new DefaultJobManager(\n+                domainHolder,\n+                scheduler,\n+                taskDAO,\n+                reportDAO,\n+                implementationDAO,\n+                confParamOps,\n+                securityProperties);\n+        jobManager.setDisableQuartzInstance(provisioningProperties.getQuartz().isDisableInstance());\n         return jobManager;\n     }\n \n@@ -209,12 +377,12 @@ protected Transport connectTransport() throws MessagingException {\n                 return super.connectTransport();\n             }\n         };\n-        mailSender.setDefaultEncoding(props.getSmtp().getDefaultEncoding());\n-        mailSender.setHost(props.getSmtp().getHost());\n-        mailSender.setPort(props.getSmtp().getPort());\n-        mailSender.setUsername(props.getSmtp().getUsername());\n-        mailSender.setPassword(props.getSmtp().getPassword());\n-        mailSender.setProtocol(props.getSmtp().getProtocol());\n+        mailSender.setDefaultEncoding(provisioningProperties.getSmtp().getDefaultEncoding());\n+        mailSender.setHost(provisioningProperties.getSmtp().getHost());\n+        mailSender.setPort(provisioningProperties.getSmtp().getPort());\n+        mailSender.setUsername(provisioningProperties.getSmtp().getUsername());\n+        mailSender.setPassword(provisioningProperties.getSmtp().getPassword());\n+        mailSender.setProtocol(provisioningProperties.getSmtp().getProtocol());\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"[Mail] host:port = {}:{}\", mailSender.getHost(), mailSender.getPort());\n@@ -235,7 +403,7 @@ protected Transport connectTransport() throws MessagingException {\n         if (session == null) {\n             Properties javaMailProperties = mailSender.getJavaMailProperties();\n \n-            props.getSmtp().getJavamailProperties().\n+            provisioningProperties.getSmtp().getJavamailProperties().\n                     forEach((key, value) -> javaMailProperties.setProperty(key, value));\n \n             if (StringUtils.isNotBlank(mailSender.getUsername())) {\n@@ -247,7 +415,7 @@ protected Transport connectTransport() throws MessagingException {\n                         forEach((key, value) -> LOG.debug(\"[Mail] property: {} = {}\", key, value));\n             }\n \n-            if (props.getSmtp().isDebug()) {\n+            if (provisioningProperties.getSmtp().isDebug()) {\n                 session = mailSender.getSession();\n                 session.setDebug(true);\n                 try (LogOutputStream los = new LogOutputStream(LOG)) {\n@@ -263,71 +431,814 @@ protected Transport connectTransport() throws MessagingException {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public PropagationManager propagationManager() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public ConnectorManager connectorManager(\n+            final ConnIdBundleManager connIdBundleManager,\n+            final RealmDAO realmDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConnInstanceDataBinder connInstanceDataBinder,\n+            final AsyncConnectorFacade asyncConnectorFacade) {\n \n-        return props.getPropagationManager().getDeclaredConstructor().newInstance();\n+        return new DefaultConnectorManager(\n+                connIdBundleManager,\n+                realmDAO,\n+                resourceDAO,\n+                connInstanceDataBinder,\n+                asyncConnectorFacade,\n+                entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ConnIdBundleManager connIdBundleManager() {\n-        return new ConnIdBundleManagerImpl(props.getConnIdLocation());\n+    @Autowired\n+    public ConnectorLoader connectorLoader(final ConnectorManager connectorManager) {\n+        return new ConnectorLoader(connectorManager);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public IntAttrNameParser intAttrNameParser() {\n-        return new IntAttrNameParser();\n+    @Autowired\n+    public InboundMatcher inboundMatcher(\n+            final UserDAO userDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final RealmDAO realmDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final VirAttrHandler virAttrHandler,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        return new InboundMatcher(\n+                userDAO,\n+                anyObjectDAO,\n+                groupDAO,\n+                anySearchDAO,\n+                realmDAO,\n+                virSchemaDAO,\n+                virAttrHandler,\n+                intAttrNameParser,\n+                anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public PropagationTaskExecutor propagationTaskExecutor() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public OutboundMatcher outboundMatcher(\n+            final MappingManager mappingManager,\n+            final UserDAO userDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final VirAttrHandler virAttrHandler) {\n+\n+        return new OutboundMatcher(mappingManager, userDAO, anyUtilsFactory, virSchemaDAO, virAttrHandler);\n+    }\n \n-        return props.getPropagationTaskExecutor().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public DerAttrHandler derAttrHandler() {\n+        return new DefaultDerAttrHandler(anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public UserProvisioningManager userProvisioningManager() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public VirAttrHandler virAttrHandler(\n+            final ConnectorManager connectorManager,\n+            final VirAttrCache virAttrCache,\n+            @Lazy final OutboundMatcher outboundMatcher) {\n \n-        return props.getUserProvisioningManager().getDeclaredConstructor().newInstance();\n+        return new DefaultVirAttrHandler(connectorManager, virAttrCache, outboundMatcher, anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public MappingManager mappingManager(\n+            final AnyTypeDAO anyTypeDAO,\n+            final UserDAO userDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final GroupDAO groupDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final RealmDAO realmDAO,\n+            final ApplicationDAO applicationDAO,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final VirAttrCache virAttrCache,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        return new DefaultMappingManager(\n+                anyTypeDAO,\n+                userDAO,\n+                anyObjectDAO,\n+                groupDAO,\n+                relationshipTypeDAO,\n+                realmDAO,\n+                applicationDAO,\n+                derAttrHandler,\n+                virAttrHandler,\n+                virAttrCache,\n+                passwordGenerator,\n+                anyUtilsFactory,\n+                intAttrNameParser);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public TemplateUtils templateUtils(final UserDAO userDAO, final GroupDAO groupDAO) {\n+        return new TemplateUtils(userDAO, groupDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ConnObjectUtils connObjectUtils(\n+            final MappingManager mappingManager,\n+            final TemplateUtils templateUtils,\n+            final RealmDAO realmDAO,\n+            final UserDAO userDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        return new ConnObjectUtils(\n+                templateUtils,\n+                realmDAO,\n+                userDAO,\n+                resourceDAO,\n+                passwordGenerator,\n+                mappingManager,\n+                anyUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n     @Bean\n-    public GroupProvisioningManager groupProvisioningManager() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public PropagationManager propagationManager(\n+            final VirSchemaDAO virSchemaDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final ConnObjectUtils connObjectUtils,\n+            final MappingManager mappingManager,\n+            final DerAttrHandler derAttrHandler) {\n \n-        return props.getGroupProvisioningManager().getDeclaredConstructor().newInstance();\n+        return new DefaultPropagationManager(\n+                virSchemaDAO,\n+                resourceDAO,\n+                entityFactory,\n+                connObjectUtils,\n+                mappingManager,\n+                derAttrHandler,\n+                anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public AnyObjectProvisioningManager anyObjectProvisioningManager() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    public ConnIdBundleManager connIdBundleManager() {\n+        return new DefaultConnIdBundleManager(provisioningProperties.getConnIdLocation());\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public IntAttrNameParser intAttrNameParser(\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO) {\n \n-        return props.getAnyObjectProvisioningManager().getDeclaredConstructor().newInstance();\n+        return new IntAttrNameParser(plainSchemaDAO, derSchemaDAO, virSchemaDAO, anyUtilsFactory);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public PropagationTaskExecutor propagationTaskExecutor(\n+            final ConnectorManager connectorManager,\n+            final ConnObjectUtils connObjectUtils,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final TaskDAO taskDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final NotificationManager notificationManager,\n+            final AuditManager auditManager,\n+            final TaskDataBinder taskDataBinder,\n+            final OutboundMatcher outboundMatcher) {\n+\n+        return new PriorityPropagationTaskExecutor(\n+                connectorManager,\n+                connObjectUtils,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                taskDAO,\n+                resourceDAO,\n+                notificationManager,\n+                auditManager,\n+                taskDataBinder,\n+                anyUtilsFactory,\n+                taskUtilsFactory,\n+                entityFactory,\n+                outboundMatcher,\n+                propagationTaskExecutorAsyncExecutor());\n+    }\n+\n+    @ConditionalOnMissingBean\n     @Bean\n-    public VirAttrCache virAttrCache() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public UserProvisioningManager userProvisioningManager(\n+            final UserWorkflowAdapter uwfAdapter,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor,\n+            final VirAttrHandler virtAttrHandler,\n+            final UserDAO userDAO) {\n \n-        VirAttrCache virAttrCache = props.getVirAttrCache().getDeclaredConstructor().newInstance();\n-        virAttrCache.setCacheSpec(props.getVirAttrCacheSpec());\n+        return new DefaultUserProvisioningManager(\n+                uwfAdapter,\n+                propagationManager,\n+                taskExecutor,\n+                virtAttrHandler,\n+                userDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GroupProvisioningManager groupProvisioningManager(\n+            final GroupWorkflowAdapter gwfAdapter,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor,\n+            final GroupDataBinder groupDataBinder,\n+            final GroupDAO groupDAO,\n+            final VirAttrHandler virtAttrHandler) {\n+\n+        return new DefaultGroupProvisioningManager(\n+                gwfAdapter,\n+                propagationManager,\n+                taskExecutor,\n+                groupDataBinder,\n+                groupDAO,\n+                virtAttrHandler);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyObjectProvisioningManager anyObjectProvisioningManager(\n+            final AnyObjectWorkflowAdapter awfAdapter,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor,\n+            final VirAttrHandler virtAttrHandler,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n+        return new DefaultAnyObjectProvisioningManager(\n+                awfAdapter,\n+                propagationManager,\n+                taskExecutor,\n+                virtAttrHandler,\n+                anyObjectDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public VirAttrCache virAttrCache() {\n+        VirAttrCache virAttrCache = new CaffeineVirAttrCache();\n+        virAttrCache.setCacheSpec(provisioningProperties.getVirAttrCacheSpec());\n         return virAttrCache;\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationManager notificationManager(\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final NotificationDAO notificationDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final TaskDAO taskDAO,\n+            final UserDataBinder userDataBinder,\n+            final GroupDataBinder groupDataBinder,\n+            final AnyObjectDataBinder anyObjectDataBinder,\n+            final ConfParamOps confParamOps,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        return new DefaultNotificationManager(\n+                derSchemaDAO,\n+                virSchemaDAO,\n+                notificationDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                anySearchDAO,\n+                anyMatchDAO,\n+                taskDAO,\n+                derAttrHandler,\n+                virAttrHandler,\n+                userDataBinder,\n+                groupDataBinder,\n+                anyObjectDataBinder,\n+                confParamOps,\n+                entityFactory,\n+                intAttrNameParser,\n+                searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AuditManager auditManager(final AuditConfDAO auditConfDAO) {\n+        return new DefaultAuditManager(auditConfDAO);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SystemLoadReporterJob systemLoadReporterJob() {\n+        return new SystemLoadReporterJob(ctx);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationJobDelegate notificationJobDelegate(\n+            final TaskDAO taskDAO,\n+            final JavaMailSender mailSender,\n+            final AuditManager auditManager,\n+            final NotificationManager notificationManager) {\n+\n+        return new DefaultNotificationJobDelegate(\n+                taskDAO,\n+                mailSender,\n+                entityFactory,\n+                auditManager,\n+                notificationManager);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationJob notificationJob(final NotificationJobDelegate delegate) {\n+        return new NotificationJob(securityProperties, domainHolder, delegate);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReportJobDelegate reportJobDelegate(final ReportDAO reportDAO, final ReportExecDAO reportExecDAO) {\n+        return new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AccessTokenDataBinder accessTokenDataBinder(\n+            final AccessTokenJWSSigner jwsSigner,\n+            final AccessTokenDAO accessTokenDAO,\n+            final ConfParamOps confParamOps,\n+            final DefaultCredentialChecker credentialChecker) {\n+\n+        return new AccessTokenDataBinderImpl(\n+                securityProperties,\n+                jwsSigner,\n+                accessTokenDAO,\n+                confParamOps,\n+                entityFactory,\n+                credentialChecker);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyObjectDataBinder anyObjectDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher) {\n+\n+        return new AnyObjectDataBinderImpl(\n+                anyTypeDAO,\n+                realmDAO,\n+                anyTypeClassDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                resourceDAO,\n+                relationshipTypeDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                derAttrHandler,\n+                virAttrHandler,\n+                mappingManager,\n+                intAttrNameParser,\n+                outboundMatcher);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeClassDataBinder anyTypeClassDataBinder(\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyTypeDAO anyTypeDAO) {\n+\n+        return new AnyTypeClassDataBinderImpl(plainSchemaDAO, derSchemaDAO, virSchemaDAO, anyTypeDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public AnyTypeDataBinder anyTypeDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AccessTokenDAO accessTokenDAO) {\n+\n+        return new AnyTypeDataBinderImpl(\n+                securityProperties,\n+                anyTypeDAO,\n+                anyTypeClassDAO,\n+                accessTokenDAO,\n+                entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ApplicationDataBinder applicationDataBinder(final ApplicationDAO applicationDAO) {\n+        return new ApplicationDataBinderImpl(applicationDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AuditDataBinder auditDataBinder() {\n+        return new AuditDataBinderImpl();\n+    }\n+\n+    @ConditionalOnMissingBean\n     @Bean\n-    public NotificationManager notificationManager() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    public AuthModuleDataBinder authModuleDataBinder() {\n+        return new AuthModuleDataBinderImpl(entityFactory);\n+    }\n \n-        return props.getNotifcationManager().getDeclaredConstructor().newInstance();\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public AuthProfileDataBinder authProfileDataBinder() {\n+        return new AuthProfileDataBinderImpl(entityFactory);\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n-    public AuditManager auditManager() throws NoSuchMethodException,\n-            InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n+    @Autowired\n+    public ClientAppDataBinder clientAppDataBinder(final PolicyDAO policyDAO) {\n+        return new ClientAppDataBinderImpl(policyDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ConnInstanceDataBinder connInstanceDataBinder(\n+            final ConnIdBundleManager connIdBundleManager,\n+            final ConnInstanceDAO connInstanceDAO,\n+            final RealmDAO realmDAO) {\n+\n+        return new ConnInstanceDataBinderImpl(connIdBundleManager, connInstanceDAO, realmDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DelegationDataBinder delegationDataBinder(final UserDAO userDAO, final RoleDAO roleDAO) {\n+        return new DelegationDataBinderImpl(userDAO, roleDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public DynRealmDataBinder dynRealmDataBinder(final AnyTypeDAO anyTypeDAO, final DynRealmDAO dynRealmDAO) {\n+        return new DynRealmDataBinderImpl(anyTypeDAO, dynRealmDAO, entityFactory, searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public GroupDataBinder groupDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher) {\n+\n+        return new GroupDataBinderImpl(\n+                anyTypeDAO,\n+                realmDAO,\n+                anyTypeClassDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                resourceDAO,\n+                relationshipTypeDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                derAttrHandler,\n+                virAttrHandler,\n+                mappingManager,\n+                intAttrNameParser,\n+                outboundMatcher,\n+                searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ImplementationDataBinder implementationDataBinder() {\n+        return new ImplementationDataBinderImpl(entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public NotificationDataBinder notificationDataBinder(\n+            final MailTemplateDAO mailTemplateDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        return new NotificationDataBinderImpl(\n+                mailTemplateDAO,\n+                anyTypeDAO,\n+                implementationDAO,\n+                entityFactory,\n+                intAttrNameParser);\n+\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public OIDCJWKSDataBinder oidcJWKSDataBinder() {\n+        return new OIDCJWKSDataBinderImpl(entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public PolicyDataBinder policyDataBinder(\n+            final ExternalResourceDAO resourceDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO) {\n+\n+        return new PolicyDataBinderImpl(resourceDAO, realmDAO, anyTypeDAO, implementationDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RealmDataBinder realmDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final RealmDAO realmDAO,\n+            final PolicyDAO policyDAO,\n+            final ExternalResourceDAO resourceDAO) {\n+\n+        return new RealmDataBinderImpl(\n+                anyTypeDAO,\n+                implementationDAO,\n+                realmDAO,\n+                policyDAO,\n+                resourceDAO,\n+                entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public RelationshipTypeDataBinder relationshipTypeDataBinder() {\n+        return new RelationshipTypeDataBinderImpl(entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public RemediationDataBinder remediationDataBinder() {\n+        return new RemediationDataBinderImpl();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ReportDataBinder reportDataBinder(\n+            final ReportTemplateDAO reportTemplateDAO,\n+            final ReportExecDAO reportExecDAO,\n+            final ImplementationDAO implementationDAO,\n+            final SchedulerFactoryBean scheduler) {\n+\n+        return new ReportDataBinderImpl(reportTemplateDAO, reportExecDAO, implementationDAO, scheduler);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public ResourceDataBinder resourceDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final ConnInstanceDAO connInstanceDAO,\n+            final PolicyDAO policyDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final ImplementationDAO implementationDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        return new ResourceDataBinderImpl(\n+                anyTypeDAO,\n+                connInstanceDAO,\n+                policyDAO,\n+                virSchemaDAO,\n+                anyTypeClassDAO,\n+                implementationDAO,\n+                plainSchemaDAO,\n+                entityFactory,\n+                intAttrNameParser);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public RoleDataBinder roleDataBinder(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final RoleDAO roleDAO,\n+            final ApplicationDAO applicationDAO) {\n+\n+        return new RoleDataBinderImpl(realmDAO, dynRealmDAO, roleDAO, applicationDAO, entityFactory, searchCondVisitor);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SAML2IdPEntityDataBinder saml2IdPEntityDataBinder() {\n+        return new SAML2IdPEntityDataBinderImpl(entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SAML2SPEntityDataBinder saml2SPEntityDataBinder() {\n+        return new SAML2SPEntityDataBinderImpl(entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SRARouteDataBinder sraRouteDataBinder() {\n+        return new SRARouteDataBinderImpl();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public SchemaDataBinder schemaDataBinder(\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO) {\n+\n+        return new SchemaDataBinderImpl(\n+                anyTypeClassDAO,\n+                plainSchemaDAO,\n+                derSchemaDAO,\n+                virSchemaDAO,\n+                resourceDAO,\n+                anyTypeDAO,\n+                implementationDAO,\n+                entityFactory,\n+                anyUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SecurityQuestionDataBinder securityQuestionDataBinder() {\n+        return new SecurityQuestionDataBinderImpl(entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public TaskDataBinder taskDataBinder(\n+            final RealmDAO realmDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final TaskExecDAO taskExecDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final SchedulerFactoryBean scheduler) {\n+\n+        return new TaskDataBinderImpl(\n+                realmDAO,\n+                resourceDAO,\n+                taskExecDAO,\n+                anyTypeDAO,\n+                implementationDAO,\n+                entityFactory,\n+                scheduler,\n+                taskUtilsFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public UserDataBinder userDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher,\n+            final RoleDAO roleDAO,\n+            final SecurityQuestionDAO securityQuestionDAO,\n+            final ApplicationDAO applicationDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final DelegationDAO delegationDAO,\n+            final ConfParamOps confParamOps) {\n+\n+        return new UserDataBinderImpl(\n+                anyTypeDAO,\n+                realmDAO,\n+                anyTypeClassDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                resourceDAO,\n+                relationshipTypeDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                derAttrHandler,\n+                virAttrHandler,\n+                mappingManager,\n+                intAttrNameParser,\n+                outboundMatcher,\n+                roleDAO,\n+                securityQuestionDAO,\n+                applicationDAO,\n+                accessTokenDAO,\n+                delegationDAO,\n+                confParamOps,\n+                securityProperties);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WAConfigDataBinder waConfigDataBinder(final WAConfigDAO waConfigDAO) {\n+        return new WAConfigDataBinderImpl(waConfigDAO, entityFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    @Autowired\n+    public WAClientAppDataBinder waClientAppDataBinder(\n+            final ClientAppDataBinder clientAppDataBinder,\n+            final PolicyDataBinder policyDataBinder,\n+            final AuthModuleDAO authModuleDAO) {\n \n-        return props.getAuditManager().getDeclaredConstructor().newInstance();\n+        return new WAClientAppDataBinderImpl(clientAppDataBinder, policyDataBinder, authModuleDAO);\n     }\n }"},{"sha":"269786692c30f77d226394a1e33027c84f8ffae1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningProperties.java","status":"modified","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,18 +22,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AuditManager;\n-import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n-import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.cache.CaffeineVirAttrCache;\n-import org.apache.syncope.core.provisioning.java.notification.DefaultNotificationManager;\n-import org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationManager;\n import org.quartz.impl.jdbcjobstore.DriverDelegate;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n@@ -209,83 +197,14 @@ public Map<String, String> getJavamailProperties() {\n \n     private final ExecutorProperties propagationTaskExecutorAsyncExecutor = new ExecutorProperties();\n \n-    private Class<? extends PropagationManager> propagationManager = DefaultPropagationManager.class;\n-\n-    private Class<? extends PropagationTaskExecutor> propagationTaskExecutor = PriorityPropagationTaskExecutor.class;\n-\n-    private Class<? extends UserProvisioningManager> userProvisioningManager =\n-            DefaultUserProvisioningManager.class;\n-\n-    private Class<? extends GroupProvisioningManager> groupProvisioningManager =\n-            DefaultGroupProvisioningManager.class;\n-\n-    private Class<? extends AnyObjectProvisioningManager> anyObjectProvisioningManager =\n-            DefaultAnyObjectProvisioningManager.class;\n-\n-    private Class<? extends VirAttrCache> virAttrCache = CaffeineVirAttrCache.class;\n-\n     private String virAttrCacheSpec = \"maximumSize=5000,expireAfterAccess=1m\";\n \n-    private Class<? extends NotificationManager> notifcationManager = DefaultNotificationManager.class;\n-\n-    private Class<? extends AuditManager> auditManager = DefaultAuditManager.class;\n-\n     private final List<String> connIdLocation = new ArrayList<>();\n \n     private final QuartzProperties quartz = new QuartzProperties();\n \n     private final SMTPProperties smtp = new SMTPProperties();\n \n-    public Class<? extends PropagationManager> getPropagationManager() {\n-        return propagationManager;\n-    }\n-\n-    public void setPropagationManager(final Class<? extends PropagationManager> propagationManager) {\n-        this.propagationManager = propagationManager;\n-    }\n-\n-    public Class<? extends PropagationTaskExecutor> getPropagationTaskExecutor() {\n-        return propagationTaskExecutor;\n-    }\n-\n-    public void setPropagationTaskExecutor(final Class<? extends PropagationTaskExecutor> propagationTaskExecutor) {\n-        this.propagationTaskExecutor = propagationTaskExecutor;\n-    }\n-\n-    public Class<? extends UserProvisioningManager> getUserProvisioningManager() {\n-        return userProvisioningManager;\n-    }\n-\n-    public void setUserProvisioningManager(final Class<? extends UserProvisioningManager> userProvisioningManager) {\n-        this.userProvisioningManager = userProvisioningManager;\n-    }\n-\n-    public Class<? extends GroupProvisioningManager> getGroupProvisioningManager() {\n-        return groupProvisioningManager;\n-    }\n-\n-    public void setGroupProvisioningManager(final Class<? extends GroupProvisioningManager> groupProvisioningManager) {\n-        this.groupProvisioningManager = groupProvisioningManager;\n-    }\n-\n-    public Class<? extends AnyObjectProvisioningManager> getAnyObjectProvisioningManager() {\n-        return anyObjectProvisioningManager;\n-    }\n-\n-    public void setAnyObjectProvisioningManager(\n-            final Class<? extends AnyObjectProvisioningManager> anyObjectProvisioningManager) {\n-\n-        this.anyObjectProvisioningManager = anyObjectProvisioningManager;\n-    }\n-\n-    public Class<? extends VirAttrCache> getVirAttrCache() {\n-        return virAttrCache;\n-    }\n-\n-    public void setVirAttrCache(final Class<? extends VirAttrCache> virAttrCache) {\n-        this.virAttrCache = virAttrCache;\n-    }\n-\n     public String getVirAttrCacheSpec() {\n         return virAttrCacheSpec;\n     }\n@@ -294,22 +213,6 @@ public void setVirAttrCacheSpec(final String virAttrCacheSpec) {\n         this.virAttrCacheSpec = virAttrCacheSpec;\n     }\n \n-    public Class<? extends NotificationManager> getNotifcationManager() {\n-        return notifcationManager;\n-    }\n-\n-    public void setNotifcationManager(final Class<? extends NotificationManager> notifcationManager) {\n-        this.notifcationManager = notifcationManager;\n-    }\n-\n-    public Class<? extends AuditManager> getAuditManager() {\n-        return auditManager;\n-    }\n-\n-    public void setAuditManager(final Class<? extends AuditManager> auditManager) {\n-        this.auditManager = auditManager;\n-    }\n-\n     public ExecutorProperties getAsyncConnectorFacadeExecutor() {\n         return asyncConnectorFacadeExecutor;\n     }"},{"sha":"20243d1f0b908d359c918730c37e0eb6c257d65a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":60,"deletions":35,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n@@ -93,62 +94,86 @@\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n abstract class AbstractAnyDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAnyDataBinder.class);\n \n-    @Autowired\n-    protected RealmDAO realmDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    protected AnyTypeClassDAO anyTypeClassDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    protected UserDAO userDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    protected PlainSchemaDAO plainSchemaDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    protected PlainAttrDAO plainAttrDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    protected PlainAttrValueDAO plainAttrValueDAO;\n+    protected final PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n-    protected ExternalResourceDAO resourceDAO;\n+    protected final PlainAttrValueDAO plainAttrValueDAO;\n \n-    @Autowired\n-    protected RelationshipTypeDAO relationshipTypeDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    protected EntityFactory entityFactory;\n+    protected final RelationshipTypeDAO relationshipTypeDAO;\n \n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    protected DerAttrHandler derAttrHandler;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    protected VirAttrHandler virAttrHandler;\n+    protected final DerAttrHandler derAttrHandler;\n \n-    @Autowired\n-    protected MappingManager mappingManager;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    protected IntAttrNameParser intAttrNameParser;\n+    protected final MappingManager mappingManager;\n \n-    @Autowired\n-    protected OutboundMatcher outboundMatcher;\n+    protected final IntAttrNameParser intAttrNameParser;\n+\n+    protected final OutboundMatcher outboundMatcher;\n+\n+    protected AbstractAnyDataBinder(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.realmDAO = realmDAO;\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.plainAttrDAO = plainAttrDAO;\n+        this.plainAttrValueDAO = plainAttrValueDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.relationshipTypeDAO = relationshipTypeDAO;\n+        this.entityFactory = entityFactory;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.derAttrHandler = derAttrHandler;\n+        this.virAttrHandler = virAttrHandler;\n+        this.mappingManager = mappingManager;\n+        this.intAttrNameParser = intAttrNameParser;\n+        this.outboundMatcher = outboundMatcher;\n+    }\n \n     protected void setRealm(final Any<?> any, final AnyUR anyUR) {\n         if (anyUR.getRealm() != null && StringUtils.isNotBlank(anyUR.getRealm().getValue())) {"},{"sha":"d420eb7a2d00c6b5410b398c91c92960a45c5501","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":22,"deletions":15,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,29 +40,36 @@\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.apache.syncope.core.spring.security.jws.AccessTokenJWSSigner;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n \n-    @Autowired\n-    private AccessTokenJWSSigner jwsSigner;\n+    protected final AccessTokenJWSSigner jwsSigner;\n \n-    @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n+    protected final AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private DefaultCredentialChecker credentialChecker;\n+    protected final DefaultCredentialChecker credentialChecker;\n+\n+    public AccessTokenDataBinderImpl(\n+            final SecurityProperties securityProperties,\n+            final AccessTokenJWSSigner jwsSigner,\n+            final AccessTokenDAO accessTokenDAO,\n+            final ConfParamOps confParamOps,\n+            final EntityFactory entityFactory,\n+            final DefaultCredentialChecker credentialChecker) {\n+\n+        this.securityProperties = securityProperties;\n+        this.jwsSigner = jwsSigner;\n+        this.accessTokenDAO = accessTokenDAO;\n+        this.confParamOps = confParamOps;\n+        this.entityFactory = entityFactory;\n+        this.credentialChecker = credentialChecker;\n+    }\n \n     @Override\n     public Pair<String, Date> generateJWT("},{"sha":"56dfd75eb8a3b722d9eb5bf371a3100d8c3b9fdb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":56,"deletions":5,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,10 +39,22 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -52,17 +64,56 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n @Transactional(rollbackFor = { Throwable.class })\n public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements AnyObjectDataBinder {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    public AnyObjectDataBinderImpl(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher) {\n+\n+        super(anyTypeDAO,\n+                realmDAO,\n+                anyTypeClassDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                resourceDAO,\n+                relationshipTypeDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                derAttrHandler,\n+                virAttrHandler,\n+                mappingManager,\n+                intAttrNameParser,\n+                outboundMatcher);\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"9d5a65f1adb71028616b4a5e4f722a2d8c2dab02","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,28 +34,34 @@\n import org.apache.syncope.core.provisioning.api.data.AnyTypeClassDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AnyTypeClassDataBinderImpl implements AnyTypeClassDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyTypeClassDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AnyTypeClassDataBinder.class);\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public AnyTypeClassDataBinderImpl(\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public AnyTypeClass create(final AnyTypeClassTO anyTypeClassTO) {"},{"sha":"9b1c3aa4633b65ffbf1b85c9372457a43911a40a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -45,30 +45,36 @@\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AnyTypeDataBinderImpl implements AnyTypeDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AnyTypeDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AnyTypeDataBinder.class);\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n+    protected final AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public AnyTypeDataBinderImpl(\n+            final SecurityProperties securityProperties,\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.securityProperties = securityProperties;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.accessTokenDAO = accessTokenDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public AnyType create(final AnyTypeTO anyTypeTO) {"},{"sha":"92c24aebf8ec9357a81b687b4ae052a081f04164","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ApplicationDataBinderImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -31,19 +31,19 @@\n import org.apache.syncope.core.provisioning.api.data.ApplicationDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class ApplicationDataBinderImpl implements ApplicationDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ApplicationDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ApplicationDataBinder.class);\n \n-    @Autowired\n-    private ApplicationDAO applicationDAO;\n+    protected final ApplicationDAO applicationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public ApplicationDataBinderImpl(final ApplicationDAO applicationDAO, final EntityFactory entityFactory) {\n+        this.applicationDAO = applicationDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public Application create(final ApplicationTO applicationTO) {"},{"sha":"cba420ab1b72791713d8ca21ddcc7d29700bffee","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuditDataBinderImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import org.apache.syncope.common.lib.to.AuditConfTO;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n import org.apache.syncope.core.persistence.api.entity.AuditConf;\n \n-@Component\n public class AuditDataBinderImpl implements AuditDataBinder {\n \n     @Override"},{"sha":"ac31c3aba2306837300817e14f7ca2a8d1596530","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthModuleDataBinderImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,8 +21,6 @@\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -34,15 +32,17 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-@Component\n public class AuthModuleDataBinderImpl implements AuthModuleDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AuthModuleDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AuthModuleDataBinder.class);\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    private void populateItems(final AuthModuleTO authModuleTO, final AuthModule authModule) {\n+    public AuthModuleDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    protected void populateItems(final AuthModuleTO authModuleTO, final AuthModule authModule) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n         SyncopeClientException invalidMapping =\n                 SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n@@ -106,7 +106,7 @@ public AuthModule update(final AuthModule authModule, final AuthModuleTO authMod\n         return authModule;\n     }\n \n-    private static void populateItems(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n+    protected static void populateItems(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n         authModule.getItems().forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());"},{"sha":"cb7b8c8f6de64a9587a626a1432e2a48748f83cd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthProfileDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,14 +22,14 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class AuthProfileDataBinderImpl implements AuthProfileDataBinder {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public AuthProfileDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public AuthProfileTO getAuthProfileTO(final AuthProfile authProfile) {"},{"sha":"f3eb189ea20e3eaf1c4c74bc19939b532c098db5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -32,20 +32,20 @@\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n \n-@Component\n public class ClientAppDataBinderImpl implements ClientAppDataBinder {\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public ClientAppDataBinderImpl(final PolicyDAO policyDAO, final EntityFactory entityFactory) {\n+        this.policyDAO = policyDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n@@ -89,19 +89,19 @@ public <T extends ClientAppTO> T getClientAppTO(final ClientApp clientApp) {\n         throw new IllegalArgumentException(\"Unsupported client app: \" + clientApp.getClass().getName());\n     }\n \n-    private SAML2SPClientApp doCreate(final SAML2SPClientAppTO clientAppTO) {\n+    protected SAML2SPClientApp doCreate(final SAML2SPClientAppTO clientAppTO) {\n         SAML2SPClientApp saml2sp = entityFactory.newEntity(SAML2SPClientApp.class);\n         update(saml2sp, clientAppTO);\n         return saml2sp;\n     }\n \n-    private CASSPClientApp doCreate(final CASSPClientAppTO clientAppTO) {\n+    protected CASSPClientApp doCreate(final CASSPClientAppTO clientAppTO) {\n         CASSPClientApp saml2sp = entityFactory.newEntity(CASSPClientApp.class);\n         update(saml2sp, clientAppTO);\n         return saml2sp;\n     }\n \n-    private void doUpdate(final SAML2SPClientApp clientApp, final SAML2SPClientAppTO clientAppTO) {\n+    protected void doUpdate(final SAML2SPClientApp clientApp, final SAML2SPClientAppTO clientAppTO) {\n         copyToEntity(clientApp, clientAppTO);\n \n         clientApp.setEntityId(clientAppTO.getEntityId());\n@@ -140,7 +140,7 @@ private void doUpdate(final SAML2SPClientApp clientApp, final SAML2SPClientAppTO\n                 clientAppTO.getEncryptionBlackListedAlgorithms());\n     }\n \n-    private static void copyToTO(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n+    protected static void copyToTO(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n         clientAppTO.setName(clientApp.getName());\n         clientAppTO.setKey(clientApp.getKey());\n         clientAppTO.setDescription(clientApp.getDescription());\n@@ -160,7 +160,7 @@ private static void copyToTO(final ClientApp clientApp, final ClientAppTO client\n         clientAppTO.getProperties().addAll(clientApp.getProperties());\n     }\n \n-    private static SAML2SPClientAppTO getSAMLClientAppTO(final SAML2SPClientApp clientApp) {\n+    protected static SAML2SPClientAppTO getSAMLClientAppTO(final SAML2SPClientApp clientApp) {\n         SAML2SPClientAppTO clientAppTO = new SAML2SPClientAppTO();\n         copyToTO(clientApp, clientAppTO);\n \n@@ -195,13 +195,13 @@ private static SAML2SPClientAppTO getSAMLClientAppTO(final SAML2SPClientApp clie\n         return clientAppTO;\n     }\n \n-    private OIDCRPClientApp doCreate(final OIDCRPClientAppTO clientAppTO) {\n+    protected OIDCRPClientApp doCreate(final OIDCRPClientAppTO clientAppTO) {\n         OIDCRPClientApp oidcrp = entityFactory.newEntity(OIDCRPClientApp.class);\n         update(oidcrp, clientAppTO);\n         return oidcrp;\n     }\n \n-    private void doUpdate(final OIDCRPClientApp clientApp, final OIDCRPClientAppTO clientAppTO) {\n+    protected void doUpdate(final OIDCRPClientApp clientApp, final OIDCRPClientAppTO clientAppTO) {\n         copyToEntity(clientApp, clientAppTO);\n \n         clientApp.setClientSecret(clientAppTO.getClientSecret());\n@@ -219,7 +219,7 @@ private void doUpdate(final OIDCRPClientApp clientApp, final OIDCRPClientAppTO c\n         clientApp.setLogoutUri(clientAppTO.getLogoutUri());\n     }\n \n-    private static OIDCRPClientAppTO getOIDCClientAppTO(final OIDCRPClientApp clientApp) {\n+    protected static OIDCRPClientAppTO getOIDCClientAppTO(final OIDCRPClientApp clientApp) {\n         OIDCRPClientAppTO clientAppTO = new OIDCRPClientAppTO();\n         copyToTO(clientApp, clientAppTO);\n \n@@ -235,20 +235,20 @@ private static OIDCRPClientAppTO getOIDCClientAppTO(final OIDCRPClientApp client\n         return clientAppTO;\n     }\n \n-    private void doUpdate(final CASSPClientApp clientApp, final CASSPClientAppTO clientAppTO) {\n+    protected void doUpdate(final CASSPClientApp clientApp, final CASSPClientAppTO clientAppTO) {\n         copyToEntity(clientApp, clientAppTO);\n \n         clientApp.setServiceId(clientAppTO.getServiceId());\n     }\n \n-    private static CASSPClientAppTO getCASClientAppTO(final CASSPClientApp clientApp) {\n+    protected static CASSPClientAppTO getCASClientAppTO(final CASSPClientApp clientApp) {\n         CASSPClientAppTO clientAppTO = new CASSPClientAppTO();\n         copyToTO(clientApp, clientAppTO);\n         clientAppTO.setServiceId(clientApp.getServiceId());\n         return clientAppTO;\n     }\n \n-    private void copyToEntity(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n+    protected void copyToEntity(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n         clientApp.setName(clientAppTO.getName());\n         clientApp.setClientAppId(clientAppTO.getClientAppId());\n         clientApp.setDescription(clientAppTO.getDescription());"},{"sha":"998455d742d7e6d923942bf935ca153c9b2a726a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":17,"deletions":20,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -45,25 +45,30 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnInstanceDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ConnInstanceDataBinder.class);\n \n-    @Autowired\n-    private ConnIdBundleManager connIdBundleManager;\n+    protected final ConnIdBundleManager connIdBundleManager;\n \n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n+    protected final ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public ConnInstanceDataBinderImpl(\n+            final ConnIdBundleManager connIdBundleManager,\n+            final ConnInstanceDAO connInstanceDAO,\n+            final RealmDAO realmDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.connIdBundleManager = connIdBundleManager;\n+        this.connInstanceDAO = connInstanceDAO;\n+        this.realmDAO = realmDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n@@ -176,14 +181,6 @@ public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n                     ConnPoolConfUtils.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n         }\n \n-        try {\n-            connInstance = connInstanceDAO.save(connInstance);\n-        } catch (Exception e) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n-\n         return connInstance;\n     }\n "},{"sha":"3a1d269b4973bf12ee19282628041d50e4dda774","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DelegationDataBinderImpl.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDelegationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDelegationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDelegationDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,22 +35,26 @@\n import org.apache.syncope.core.provisioning.api.data.DelegationDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DelegationDataBinderImpl implements DelegationDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DelegationDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DelegationDataBinder.class);\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private RoleDAO roleDAO;\n+    protected final RoleDAO roleDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public DelegationDataBinderImpl(\n+            final UserDAO userDAO,\n+            final RoleDAO roleDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.userDAO = userDAO;\n+        this.roleDAO = roleDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public Delegation create(final DelegationTO delegationTO) {"},{"sha":"f0447ecd0a89d7316c5dfbd1cee09bad292ba623","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":20,"deletions":16,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,27 +34,32 @@\n import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DynRealmDataBinderImpl implements DynRealmDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DynRealmDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DynRealmDataBinder.class);\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private DynRealmDAO dynRealmDAO;\n+    protected final DynRealmDAO dynRealmDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n \n-    private void setDynMembership(final DynRealm dynRealm, final AnyType anyType, final String dynMembershipFIQL) {\n+    public DynRealmDataBinderImpl(\n+            final AnyTypeDAO anyTypeDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final EntityFactory entityFactory,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.dynRealmDAO = dynRealmDAO;\n+        this.entityFactory = entityFactory;\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n+\n+    protected void setDynMembership(final DynRealm dynRealm, final AnyType anyType, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n@@ -108,10 +113,9 @@ public DynRealmTO getDynRealmTO(final DynRealm dynRealm) {\n \n         dynRealmTO.setKey(dynRealm.getKey());\n \n-        dynRealm.getDynMemberships()\n-            .forEach(memb -> dynRealmTO.getDynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond()));\n+        dynRealm.getDynMemberships().forEach(memb -> dynRealmTO.getDynMembershipConds().\n+                put(memb.getAnyType().getKey(), memb.getFIQLCond()));\n \n         return dynRealmTO;\n     }\n-\n }"},{"sha":"390a8d752549e826689df523d9a8c995d6f9cb5a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":63,"deletions":10,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,40 +35,93 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n @Transactional(rollbackFor = { Throwable.class })\n public class GroupDataBinderImpl extends AbstractAnyDataBinder implements GroupDataBinder {\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    public GroupDataBinderImpl(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        super(anyTypeDAO,\n+                realmDAO,\n+                anyTypeClassDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                resourceDAO,\n+                relationshipTypeDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                derAttrHandler,\n+                virAttrHandler,\n+                mappingManager,\n+                intAttrNameParser,\n+                outboundMatcher);\n+\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n \n-    private void setDynMembership(final Group group, final AnyType anyType, final String dynMembershipFIQL) {\n+    protected void setDynMembership(final Group group, final AnyType anyType, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n@@ -405,7 +458,7 @@ public GroupTO getGroupTO(final String key) {\n         return getGroupTO(groupDAO.authFind(key), true);\n     }\n \n-    private static void populateTransitiveResources(\n+    protected static void populateTransitiveResources(\n             final Group group, final Any<?> any, final Map<String, PropagationByResource<String>> result) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();"},{"sha":"31da17f7130b04dda12047ee2345924ea5bf29c7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -49,16 +49,16 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class ImplementationDataBinderImpl implements ImplementationDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ImplementationDataBinder.class);\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public ImplementationDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public Implementation create(final ImplementationTO implementationTO) {"},{"sha":"f12708aca524d642e4428eb08313f67339c20ea0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,28 +39,34 @@\n import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class NotificationDataBinderImpl implements NotificationDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(NotificationDataBinder.class);\n \n-    @Autowired\n-    private MailTemplateDAO mailTemplateDAO;\n+    protected final MailTemplateDAO mailTemplateDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n+    protected final IntAttrNameParser intAttrNameParser;\n+\n+    public NotificationDataBinderImpl(\n+            final MailTemplateDAO mailTemplateDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final EntityFactory entityFactory,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        this.mailTemplateDAO = mailTemplateDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.entityFactory = entityFactory;\n+        this.intAttrNameParser = intAttrNameParser;\n+    }\n \n     @Override\n     public NotificationTO getNotificationTO(final Notification notification) {"},{"sha":"f35ca8cb2e7f63ff70f3b6ec9d57e5ad131970ec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCJWKSDataBinderImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,16 +34,16 @@\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class OIDCJWKSDataBinderImpl implements OIDCJWKSDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(OIDCJWKSDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(OIDCJWKSDataBinder.class);\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public OIDCJWKSDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public OIDCJWKSTO getOIDCJWKSTO(final OIDCJWKS jwks) {"},{"sha":"4a3608ec2197a7c948d938f7cb0dd655fec5210e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -51,31 +51,37 @@\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class PolicyDataBinderImpl implements PolicyDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PolicyDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(PolicyDataBinder.class);\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public PolicyDataBinderImpl(\n+            final ExternalResourceDAO resourceDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.resourceDAO = resourceDAO;\n+        this.realmDAO = realmDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO) {\n+    protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO) {\n         T result = policy;\n \n         if (policyTO instanceof PasswordPolicyTO) {"},{"sha":"43df9c9f6fbf0a0ead083aca7213aaede4e932db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -43,34 +43,41 @@\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n \n-@Component\n public class RealmDataBinderImpl implements RealmDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(RealmDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(RealmDataBinder.class);\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    private void setTemplates(final RealmTO realmTO, final Realm realm) {\n+    public RealmDataBinderImpl(\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final RealmDAO realmDAO,\n+            final PolicyDAO policyDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.realmDAO = realmDAO;\n+        this.policyDAO = policyDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    protected void setTemplates(final RealmTO realmTO, final Realm realm) {\n         // validate JEXL expressions from templates and proceed if fine\n         TemplateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidRealm);\n         realmTO.getTemplates().forEach((key, template) -> {"},{"sha":"e941a41f14a9ebeacf1b8f4988d868e9a3aae0d2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RelationshipTypeDataBinderImpl.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRelationshipTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRelationshipTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRelationshipTypeDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,18 +22,14 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.provisioning.api.data.RelationshipTypeDataBinder;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class RelationshipTypeDataBinderImpl implements RelationshipTypeDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(RelationshipTypeDataBinder.class);\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    public RelationshipTypeDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public RelationshipType create(final RelationshipTypeTO relationshipTypeTO) {\n@@ -60,5 +56,4 @@ public RelationshipTypeTO getRelationshipTypeTO(final RelationshipType relations\n \n         return relationshipTypeTO;\n     }\n-\n }"},{"sha":"2a02a398760227376e142c1ee483d1d1c8eca8f6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,9 +21,7 @@\n import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class RemediationDataBinderImpl implements RemediationDataBinder {\n \n     @Override"},{"sha":"86699293a4b717b51c43c31ad496e6cf8d8e7e5a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -41,26 +41,31 @@\n import org.quartz.TriggerKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class ReportDataBinderImpl implements ReportDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n-    @Autowired\n-    private ReportTemplateDAO reportTemplateDAO;\n+    protected final ReportTemplateDAO reportTemplateDAO;\n \n-    @Autowired\n-    private ReportExecDAO reportExecDAO;\n+    protected final ReportExecDAO reportExecDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n+    protected final SchedulerFactoryBean scheduler;\n+\n+    public ReportDataBinderImpl(\n+            final ReportTemplateDAO reportTemplateDAO,\n+            final ReportExecDAO reportExecDAO,\n+            final ImplementationDAO implementationDAO,\n+            final SchedulerFactoryBean scheduler) {\n+\n+        this.reportTemplateDAO = reportTemplateDAO;\n+        this.reportExecDAO = reportExecDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void getReport(final Report report, final ReportTO reportTO) {"},{"sha":"5cf60a96f958daa79d04105143f6754b2968a16d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":34,"deletions":24,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -72,40 +72,50 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class ResourceDataBinderImpl implements ResourceDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n+    protected final ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n+    protected final PolicyDAO policyDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n+    protected final IntAttrNameParser intAttrNameParser;\n+\n+    public ResourceDataBinderImpl(\n+            final AnyTypeDAO anyTypeDAO,\n+            final ConnInstanceDAO connInstanceDAO,\n+            final PolicyDAO policyDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final ImplementationDAO implementationDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final EntityFactory entityFactory,\n+            final IntAttrNameParser intAttrNameParser) {\n+\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.connInstanceDAO = connInstanceDAO;\n+        this.policyDAO = policyDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.entityFactory = entityFactory;\n+        this.intAttrNameParser = intAttrNameParser;\n+    }\n \n     @Override\n     public ExternalResource create(final ResourceTO resourceTO) {\n@@ -387,7 +397,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         return resource;\n     }\n \n-    private void populateMapping(\n+    protected void populateMapping(\n             final MappingTO mappingTO,\n             final Mapping mapping,\n             final AnyTypeClassTO allowedSchemas) {\n@@ -566,7 +576,7 @@ private void populateMapping(\n         }\n     }\n \n-    private static void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n+    protected static void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n         items.forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());"},{"sha":"32401fc924a9cde68190930893f2d4f988309736","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":24,"deletions":17,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -39,33 +39,40 @@\n import org.apache.syncope.core.provisioning.api.data.RoleDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class RoleDataBinderImpl implements RoleDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(RoleDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(RoleDataBinder.class);\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private DynRealmDAO dynRealmDAO;\n+    protected final DynRealmDAO dynRealmDAO;\n \n-    @Autowired\n-    private RoleDAO roleDAO;\n+    protected final RoleDAO roleDAO;\n \n-    @Autowired\n-    private ApplicationDAO applicationDAO;\n+    protected final ApplicationDAO applicationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n \n-    private void setDynMembership(final Role role, final String dynMembershipFIQL) {\n+    public RoleDataBinderImpl(\n+            final RealmDAO realmDAO,\n+            final DynRealmDAO dynRealmDAO,\n+            final RoleDAO roleDAO,\n+            final ApplicationDAO applicationDAO,\n+            final EntityFactory entityFactory,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        this.realmDAO = realmDAO;\n+        this.dynRealmDAO = dynRealmDAO;\n+        this.roleDAO = roleDAO;\n+        this.applicationDAO = applicationDAO;\n+        this.entityFactory = entityFactory;\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n+\n+    protected void setDynMembership(final Role role, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);"},{"sha":"8c4e178960225a6481c0fb2742b2529d2c2e9bf8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPEntityDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPEntityDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,17 +20,17 @@\n \n import java.util.Base64;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.common.lib.to.SAML2IdPEntityTO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2IdPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPEntityDataBinder;\n \n-@Component\n public class SAML2IdPEntityDataBinderImpl implements SAML2IdPEntityDataBinder {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public SAML2IdPEntityDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public SAML2IdPEntity create(final SAML2IdPEntityTO entityTO) {"},{"sha":"b6df09390c4466ef26885894b6480840517894cd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2SPEntityDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2SPEntityDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -21,16 +21,16 @@\n import java.util.Base64;\n import org.apache.syncope.common.lib.to.SAML2SPEntityTO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPEntity;\n import org.apache.syncope.core.provisioning.api.data.SAML2SPEntityDataBinder;\n \n-@Component\n public class SAML2SPEntityDataBinderImpl implements SAML2SPEntityDataBinder {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public SAML2SPEntityDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public SAML2SPEntity create(final SAML2SPEntityTO entityTO) {"},{"sha":"fa7e69b84aada8d24b5c08d358260c5b14ea836c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SRARouteDataBinderImpl.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSRARouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSRARouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSRARouteDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,11 +22,9 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.SRARoute;\n import org.apache.syncope.core.provisioning.api.data.SRARouteDataBinder;\n \n-@Component\n public class SRARouteDataBinderImpl implements SRARouteDataBinder {\n \n     @Override"},{"sha":"6fabaed785816d00770caa3ccec706e5ee875f63","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":37,"deletions":27,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -53,42 +53,52 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class SchemaDataBinderImpl implements SchemaDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n \n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n+    protected final AnyTypeClassDAO anyTypeClassDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n+    protected final PlainSchemaDAO plainSchemaDAO;\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    private <S extends Schema, T extends SchemaTO> void labels(final T src, final S dst) {\n+    public SchemaDataBinderImpl(\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.anyTypeClassDAO = anyTypeClassDAO;\n+        this.plainSchemaDAO = plainSchemaDAO;\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.entityFactory = entityFactory;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n+\n+    protected <S extends Schema, T extends SchemaTO> void labels(final T src, final S dst) {\n         src.getLabels().forEach((locale, display) -> {\n             SchemaLabel label = dst.getLabel(locale).orElse(null);\n             if (label == null) {\n@@ -103,13 +113,13 @@ private <S extends Schema, T extends SchemaTO> void labels(final T src, final S\n         dst.getLabels().removeIf(label -> !src.getLabels().containsKey(label.getLocale()));\n     }\n \n-    private static <S extends Schema, T extends SchemaTO> void labels(final S src, final T dst) {\n+    protected static <S extends Schema, T extends SchemaTO> void labels(final S src, final T dst) {\n         dst.getLabels().putAll(src.getLabels().stream().\n                 collect(Collectors.toMap(SchemaLabel::getLocale, SchemaLabel::getDisplay)));\n     }\n \n     // --------------- PLAIN -----------------\n-    private PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaTO) {\n+    protected PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaTO) {\n         if (!JexlUtils.isExpressionValid(schemaTO.getMandatoryCondition())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n             sce.getElements().add(schemaTO.getMandatoryCondition());\n@@ -234,7 +244,7 @@ public PlainSchemaTO getPlainSchemaTO(final String key) {\n     }\n \n     // --------------- DERIVED -----------------\n-    private DerSchema fill(final DerSchema schema, final DerSchemaTO schemaTO) {\n+    protected DerSchema fill(final DerSchema schema, final DerSchemaTO schemaTO) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         if (StringUtils.isBlank(schemaTO.getExpression())) {\n@@ -310,7 +320,7 @@ public DerSchemaTO getDerSchemaTO(final String key) {\n     }\n \n     // --------------- VIRTUAL -----------------\n-    private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n+    protected VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n         schema.setKey(schemaTO.getKey());\n         schema.setExtAttrName(schemaTO.getExtAttrName());\n         schema.setReadonly(schema.isReadonly());"},{"sha":"e55d1659445b5e0b1ee93eef676543ce5f849a3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSecurityQuestionDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSecurityQuestionDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSecurityQuestionDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,14 +22,14 @@\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class SecurityQuestionDataBinderImpl implements SecurityQuestionDataBinder {\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public SecurityQuestionDataBinderImpl(final EntityFactory entityFactory) {\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public SecurityQuestionTO getSecurityQuestionTO(final SecurityQuestion securityQuestion) {"},{"sha":"5b230286680102d4885d35e4274e8ff13b780098","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":32,"deletions":26,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -69,45 +69,51 @@\n import org.quartz.TriggerKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n \n-@Component\n public class TaskDataBinderImpl implements TaskDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    private TaskExecDAO taskExecDAO;\n+    protected final TaskExecDAO taskExecDAO;\n \n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n+    protected final AnyTypeDAO anyTypeDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private TemplateUtils templateUtils;\n+    protected final SchedulerFactoryBean scheduler;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n+    protected final TaskUtilsFactory taskUtilsFactory;\n \n-    @Autowired\n-    private TaskUtilsFactory taskUtilsFactory;\n+    public TaskDataBinderImpl(\n+            final RealmDAO realmDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final TaskExecDAO taskExecDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final ImplementationDAO implementationDAO,\n+            final EntityFactory entityFactory,\n+            final SchedulerFactoryBean scheduler,\n+            final TaskUtilsFactory taskUtilsFactory) {\n \n-    private void fill(final ProvisioningTask provisioningTask, final ProvisioningTaskTO provisioningTaskTO) {\n+        this.realmDAO = realmDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.taskExecDAO = taskExecDAO;\n+        this.anyTypeDAO = anyTypeDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.entityFactory = entityFactory;\n+        this.scheduler = scheduler;\n+        this.taskUtilsFactory = taskUtilsFactory;\n+    }\n+\n+    protected void fill(final ProvisioningTask provisioningTask, final ProvisioningTaskTO provisioningTaskTO) {\n         if (provisioningTask instanceof PushTask && provisioningTaskTO instanceof PushTaskTO) {\n             PushTask pushTask = (PushTask) provisioningTask;\n             PushTaskTO pushTaskTO = (PushTaskTO) provisioningTaskTO;\n@@ -313,7 +319,7 @@ public ExecTO getExecTO(final TaskExec execution) {\n         execTO.setStart(execution.getStart());\n         execTO.setEnd(execution.getEnd());\n         execTO.setExecutor(execution.getExecutor());\n-        \n+\n         if (execution.getTask() != null && execution.getTask().getKey() != null) {\n             execTO.setJobType(JobType.TASK);\n             execTO.setRefKey(execution.getTask().getKey());\n@@ -323,14 +329,14 @@ public ExecTO getExecTO(final TaskExec execution) {\n         return execTO;\n     }\n \n-    private void fill(final SchedTaskTO schedTaskTO, final SchedTask schedTask) {\n+    protected void fill(final SchedTaskTO schedTaskTO, final SchedTask schedTask) {\n         schedTaskTO.setName(schedTask.getName());\n         schedTaskTO.setDescription(schedTask.getDescription());\n         schedTaskTO.setCronExpression(schedTask.getCronExpression());\n         schedTaskTO.setActive(schedTask.isActive());\n \n         schedTaskTO.setLastExec(schedTaskTO.getStart());\n-       \n+\n         String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(schedTask).getName());\n         try {\n             Trigger trigger = scheduler.getScheduler().getTrigger(new TriggerKey(triggerName, Scheduler.DEFAULT_GROUP));"},{"sha":"f81e8ac464fd126b6cf8f696949257830c6a16f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":85,"deletions":26,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -47,6 +47,8 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n@@ -58,11 +60,21 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Delegation;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -75,38 +87,85 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n @Transactional(rollbackFor = { Throwable.class })\n public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDataBinder {\n \n-    @Autowired\n-    private RoleDAO roleDAO;\n-\n-    @Autowired\n-    private SecurityQuestionDAO securityQuestionDAO;\n-\n-    @Autowired\n-    private AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    private ApplicationDAO applicationDAO;\n-\n-    @Autowired\n-    private AccessTokenDAO accessTokenDAO;\n-\n-    @Autowired\n-    private DelegationDAO delegationDAO;\n-\n-    @Autowired\n-    private ConfParamOps confParamOps;\n-\n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final RoleDAO roleDAO;\n+\n+    protected final SecurityQuestionDAO securityQuestionDAO;\n+\n+    protected final ApplicationDAO applicationDAO;\n+\n+    protected final AccessTokenDAO accessTokenDAO;\n+\n+    protected final DelegationDAO delegationDAO;\n+\n+    protected final ConfParamOps confParamOps;\n+\n+    protected final SecurityProperties securityProperties;\n+\n+    public UserDataBinderImpl(\n+            final AnyTypeDAO anyTypeDAO,\n+            final RealmDAO realmDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final PlainAttrDAO plainAttrDAO,\n+            final PlainAttrValueDAO plainAttrValueDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final RelationshipTypeDAO relationshipTypeDAO,\n+            final EntityFactory entityFactory,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final MappingManager mappingManager,\n+            final IntAttrNameParser intAttrNameParser,\n+            final OutboundMatcher outboundMatcher,\n+            final RoleDAO roleDAO,\n+            final SecurityQuestionDAO securityQuestionDAO,\n+            final ApplicationDAO applicationDAO,\n+            final AccessTokenDAO accessTokenDAO,\n+            final DelegationDAO delegationDAO,\n+            final ConfParamOps confParamOps,\n+            final SecurityProperties securityProperties) {\n+\n+        super(anyTypeDAO,\n+                realmDAO,\n+                anyTypeClassDAO,\n+                anyObjectDAO,\n+                userDAO,\n+                groupDAO,\n+                plainSchemaDAO,\n+                plainAttrDAO,\n+                plainAttrValueDAO,\n+                resourceDAO,\n+                relationshipTypeDAO,\n+                entityFactory,\n+                anyUtilsFactory,\n+                derAttrHandler,\n+                virAttrHandler,\n+                mappingManager,\n+                intAttrNameParser,\n+                outboundMatcher);\n+\n+        this.roleDAO = roleDAO;\n+        this.securityQuestionDAO = securityQuestionDAO;\n+        this.applicationDAO = applicationDAO;\n+        this.accessTokenDAO = accessTokenDAO;\n+        this.delegationDAO = delegationDAO;\n+        this.confParamOps = confParamOps;\n+        this.securityProperties = securityProperties;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override"},{"sha":"634de278da13c3ee72e2cc5a16c5bf0391748cfa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/WAConfigDataBinderImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FWAConfigDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -24,17 +24,17 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.WAConfigEntry;\n import org.apache.syncope.core.provisioning.api.data.WAConfigDataBinder;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class WAConfigDataBinderImpl implements WAConfigDataBinder {\n \n-    @Autowired\n-    private WAConfigDAO waConfigDAO;\n+    protected final WAConfigDAO waConfigDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n+\n+    public WAConfigDataBinderImpl(final WAConfigDAO waConfigDAO, final EntityFactory entityFactory) {\n+        this.waConfigDAO = waConfigDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public Attr get(final WAConfigEntry waConfigEntry) {"},{"sha":"900f419162158337be93455e884448d381e8972b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppDataBinderImpl.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -28,23 +28,27 @@\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n \n-@Component\n public class WAClientAppDataBinderImpl implements WAClientAppDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(WAClientAppDataBinder.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(WAClientAppDataBinder.class);\n \n-    @Autowired\n-    private ClientAppDataBinder clientAppDataBinder;\n+    protected final ClientAppDataBinder clientAppDataBinder;\n \n-    @Autowired\n-    private PolicyDataBinder policyDataBinder;\n+    protected final PolicyDataBinder policyDataBinder;\n \n-    @Autowired\n-    private AuthModuleDAO authModuleDAO;\n+    protected final AuthModuleDAO authModuleDAO;\n+\n+    public WAClientAppDataBinderImpl(\n+            final ClientAppDataBinder clientAppDataBinder,\n+            final PolicyDataBinder policyDataBinder,\n+            final AuthModuleDAO authModuleDAO) {\n+\n+        this.clientAppDataBinder = clientAppDataBinder;\n+        this.policyDataBinder = policyDataBinder;\n+        this.authModuleDAO = authModuleDAO;\n+    }\n \n     @Override\n     public WAClientApp getWAClientApp(final ClientApp clientApp) {"},{"sha":"eb0d23056f2c9a83e6bc8d5539eac5a4f094bd38","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/DefaultJobManager.java","status":"renamed","additions":34,"deletions":24,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -62,7 +62,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.BeanCreationException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.Transactional;\n@@ -78,43 +77,54 @@\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n \n-public class JobManagerImpl implements JobManager, SyncopeCoreLoader {\n+public class DefaultJobManager implements JobManager, SyncopeCoreLoader {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(JobManager.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(JobManager.class);\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    protected final DomainHolder domainHolder;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n+    protected final SchedulerFactoryBean scheduler;\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    private ReportDAO reportDAO;\n+    protected final ReportDAO reportDAO;\n \n-    @Autowired\n-    private ImplementationDAO implementationDAO;\n+    protected final ImplementationDAO implementationDAO;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n \n-    private boolean disableQuartzInstance;\n+    protected boolean disableQuartzInstance;\n+\n+    public DefaultJobManager(\n+            final DomainHolder domainHolder,\n+            final SchedulerFactoryBean scheduler,\n+            final TaskDAO taskDAO,\n+            final ReportDAO reportDAO,\n+            final ImplementationDAO implementationDAO,\n+            final ConfParamOps confParamOps,\n+            final SecurityProperties securityProperties) {\n+\n+        this.domainHolder = domainHolder;\n+        this.scheduler = scheduler;\n+        this.taskDAO = taskDAO;\n+        this.reportDAO = reportDAO;\n+        this.implementationDAO = implementationDAO;\n+        this.confParamOps = confParamOps;\n+        this.securityProperties = securityProperties;\n+    }\n \n     public void setDisableQuartzInstance(final boolean disableQuartzInstance) {\n         this.disableQuartzInstance = disableQuartzInstance;\n     }\n \n-    private boolean isRunningHere(final JobKey jobKey) throws SchedulerException {\n+    protected boolean isRunningHere(final JobKey jobKey) throws SchedulerException {\n         return scheduler.getScheduler().getCurrentlyExecutingJobs().stream().\n                 anyMatch(jec -> jobKey.equals(jec.getJobDetail().getKey()));\n     }\n \n-    private boolean isRunningElsewhere(final JobKey jobKey) throws SchedulerException {\n+    protected boolean isRunningElsewhere(final JobKey jobKey) throws SchedulerException {\n         if (!scheduler.getScheduler().getMetaData().isJobStoreClustered()) {\n             return false;\n         }\n@@ -146,7 +156,7 @@ public boolean isRunning(final JobKey jobKey) throws SchedulerException {\n         return isRunningHere(jobKey) || isRunningElsewhere(jobKey);\n     }\n \n-    private void registerJob(\n+    protected void registerJob(\n             final String jobName, final Job jobInstance,\n             final String cronExpression, final Date startAt,\n             final Map<String, Object> jobMap)\n@@ -196,7 +206,7 @@ private void registerJob(\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private static <T> T createSpringBean(final Class<T> jobClass) {\n+    protected static <T> T createSpringBean(final Class<T> jobClass) {\n         T jobInstance = null;\n         for (int i = 0; i < 5 && jobInstance == null; i++) {\n             LOG.debug(\"{} attempt to create Spring bean for {}\", i, jobClass);\n@@ -268,14 +278,14 @@ public void register(final Report report, final Date startAt, final long interru\n         registerJob(JobNamer.getJobKey(report).getName(), job, report.getCronExpression(), startAt, jobMap);\n     }\n \n-    private static Map<String, Object> createJobMapForExecutionContext(final String executor) {\n+    protected static Map<String, Object> createJobMapForExecutionContext(final String executor) {\n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n         jobMap.put(JobManager.EXECUTOR_KEY, executor);\n         return jobMap;\n     }\n \n-    private void unregisterJob(final String jobName) {\n+    protected void unregisterJob(final String jobName) {\n         try {\n             scheduler.getScheduler().unscheduleJob(new TriggerKey(jobName, Scheduler.DEFAULT_GROUP));\n             scheduler.getScheduler().deleteJob(new JobKey(jobName, Scheduler.DEFAULT_GROUP));","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java"},{"sha":"a8d5b3466392e0501a804297514cbbe3c4d9e91f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SystemLoadReporterJob.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSystemLoadReporterJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSystemLoadReporterJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSystemLoadReporterJob.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -22,20 +22,20 @@\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Reports about system load.\n  */\n-@Component\n public class SystemLoadReporterJob extends AbstractInterruptableJob {\n \n-    private static final Integer MB = 1024 * 1024;\n+    protected static final Integer MB = 1024 * 1024;\n \n-    @Autowired\n-    private ApplicationEventPublisher publisher;\n+    protected final ApplicationEventPublisher publisher;\n+\n+    public SystemLoadReporterJob(final ApplicationEventPublisher publisher) {\n+        this.publisher = publisher;\n+    }\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {"},{"sha":"6261933e8ba0e2c8d2907c64a6e0d6957d228897","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -90,7 +90,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                             LOG.error(\"Could not find Implementation '{}', aborting\",\n                                     context.getMergedJobDataMap().getString(DELEGATE_IMPLEMENTATION));\n                         } else {\n-                            delegate = ImplementationManager.<SchedTaskJobDelegate>build(implementation);\n+                            delegate = ImplementationManager.build(implementation);\n                             delegate.execute(\n                                     taskKey,\n                                     context.getMergedJobDataMap().getBoolean(DRY_RUN_JOBDETAIL_KEY),"},{"sha":"94a5059d2997b6ca6399839e5d9b02d59adb6be9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":25,"deletions":19,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -38,37 +38,43 @@\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.MimeMessageHelper;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class DefaultNotificationJobDelegate implements NotificationJobDelegate {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n \n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    private JavaMailSender mailSender;\n+    protected final JavaMailSender mailSender;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private AuditManager auditManager;\n+    protected final AuditManager auditManager;\n \n-    @Autowired\n-    private NotificationManager notificationManager;\n+    protected final NotificationManager notificationManager;\n \n-    private final AtomicReference<String> status = new AtomicReference<>();\n+    protected final AtomicReference<String> status = new AtomicReference<>();\n \n-    private boolean interrupt;\n+    protected boolean interrupt;\n \n-    private boolean interrupted;\n+    protected boolean interrupted;\n+\n+    public DefaultNotificationJobDelegate(\n+            final TaskDAO taskDAO,\n+            final JavaMailSender mailSender,\n+            final EntityFactory entityFactory,\n+            final AuditManager auditManager,\n+            final NotificationManager notificationManager) {\n+\n+        this.taskDAO = taskDAO;\n+        this.mailSender = mailSender;\n+        this.entityFactory = entityFactory;\n+        this.auditManager = auditManager;\n+        this.notificationManager = notificationManager;\n+    }\n \n     @Override\n     public String currentStatus() {\n@@ -226,7 +232,7 @@ public void execute(final String executor) throws JobExecutionException {\n         }\n     }\n \n-    private static boolean hasToBeRegistered(final TaskExec execution) {\n+    protected static boolean hasToBeRegistered(final TaskExec execution) {\n         NotificationTask task = (NotificationTask) execution.getTask();\n \n         // True if either failed and failures have to be registered, or if ALL\n@@ -236,7 +242,7 @@ private static boolean hasToBeRegistered(final TaskExec execution) {\n                 || task.getTraceLevel() == TraceLevel.ALL;\n     }\n \n-    private void handleRetries(final TaskExec execution) {\n+    protected void handleRetries(final TaskExec execution) {\n         if (notificationManager.getMaxRetries() <= 0) {\n             return;\n         }"},{"sha":"3d0e1243f22a8fc41df8e33f7f6c8ff4448142b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJob.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -30,15 +30,12 @@\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Periodically checks for notification to send.\n  *\n  * @see org.apache.syncope.core.persistence.api.entity.task.NotificationTask\n  */\n-@Component\n public class NotificationJob extends AbstractInterruptableJob {\n \n     public enum Status {\n@@ -48,18 +45,25 @@ public enum Status {\n \n     }\n \n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n \n     public static final String DEFAULT_CRON_EXP = \"0 0/5 * * * ?\";\n \n-    @Autowired\n-    private SecurityProperties securityProperties;\n+    protected final SecurityProperties securityProperties;\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    protected final DomainHolder domainHolder;\n \n-    @Autowired\n-    private NotificationJobDelegate delegate;\n+    protected final NotificationJobDelegate delegate;\n+\n+    public NotificationJob(\n+            final SecurityProperties securityProperties,\n+            final DomainHolder domainHolder,\n+            final NotificationJobDelegate delegate) {\n+\n+        this.securityProperties = securityProperties;\n+        this.domainHolder = domainHolder;\n+        this.delegate = delegate;\n+    }\n \n     @Override\n     public JobDelegate getDelegate() {"},{"sha":"0a46700544085f2db7f4f49f6de6e192168f8d3d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -49,17 +49,14 @@\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.helpers.AttributesImpl;\n \n-@Component\n public class DefaultReportJobDelegate implements ReportJobDelegate {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n \n-    private static final SAXTransformerFactory TRANSFORMER_FACTORY;\n+    protected static final SAXTransformerFactory TRANSFORMER_FACTORY;\n \n     static {\n         TRANSFORMER_FACTORY = (SAXTransformerFactory) TransformerFactory.newInstance();\n@@ -71,26 +68,27 @@ public class DefaultReportJobDelegate implements ReportJobDelegate {\n         }\n     }\n \n-    /**\n-     * Report DAO.\n-     */\n-    @Autowired\n-    private ReportDAO reportDAO;\n+    protected final ReportDAO reportDAO;\n \n-    /**\n-     * Report execution DAO.\n-     */\n-    @Autowired\n-    private ReportExecDAO reportExecDAO;\n+    protected final ReportExecDAO reportExecDAO;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    private final AtomicReference<String> status = new AtomicReference<>();\n+    protected final AtomicReference<String> status = new AtomicReference<>();\n \n-    private boolean interrupt;\n+    protected boolean interrupt;\n \n-    private boolean interrupted;\n+    protected boolean interrupted;\n+\n+    public DefaultReportJobDelegate(\n+            final ReportDAO reportDAO,\n+            final ReportExecDAO reportExecDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.reportDAO = reportDAO;\n+        this.reportExecDAO = reportExecDAO;\n+        this.entityFactory = entityFactory;\n+    }\n \n     @Override\n     public String currentStatus() {"},{"sha":"cc386a5d393008e974a623cda63a1bef8140a0c7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -54,7 +54,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -92,7 +92,7 @@ public class ReconciliationReportlet extends AbstractReportlet {\n     private MappingManager mappingManager;\n \n     @Autowired\n-    private ConnectorFactory connFactory;\n+    private ConnectorManager connectorManager;\n \n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n@@ -287,7 +287,7 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                         : StringUtils.EMPTY;\n                 if (provision != null && connObjectKeyItem.isPresent() && StringUtils.isNotBlank(connObjectKeyValue)) {\n                     // 1. read from the underlying connector\n-                    Connector connector = connFactory.getConnector(resource);\n+                    Connector connector = connectorManager.getConnector(resource);\n                     ConnectorObject connectorObject = connector.getObject(\n                             provision.getObjectClass(),\n                             AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue),"},{"sha":"bcc7b442ffb4e7e0f72eaea198ae2a16fdac16c4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":69,"deletions":66,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -78,85 +78,88 @@\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(rollbackFor = { Throwable.class })\n public class DefaultNotificationManager implements NotificationManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationManager.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(NotificationManager.class);\n \n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    protected final DerSchemaDAO derSchemaDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    /**\n-     * Notification DAO.\n-     */\n-    @Autowired\n-    private NotificationDAO notificationDAO;\n+    protected final NotificationDAO notificationDAO;\n \n-    /**\n-     * AnyObject DAO.\n-     */\n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    /**\n-     * User DAO.\n-     */\n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    /**\n-     * Group DAO.\n-     */\n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    /**\n-     * Search DAO.\n-     */\n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO anySearchDAO;\n \n-    @Autowired\n-    private AnyMatchDAO anyMatchDAO;\n+    protected final AnyMatchDAO anyMatchDAO;\n \n-    /**\n-     * Task DAO.\n-     */\n-    @Autowired\n-    private TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    private DerAttrHandler derAttrHander;\n+    protected final DerAttrHandler derAttrHandler;\n \n-    @Autowired\n-    private VirAttrHandler virAttrHander;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    private UserDataBinder userDataBinder;\n+    protected final UserDataBinder userDataBinder;\n \n-    @Autowired\n-    private GroupDataBinder groupDataBinder;\n+    protected final GroupDataBinder groupDataBinder;\n \n-    @Autowired\n-    private AnyObjectDataBinder anyObjectDataBinder;\n+    protected final AnyObjectDataBinder anyObjectDataBinder;\n \n-    @Autowired\n-    private ConfParamOps confParamOps;\n+    protected final ConfParamOps confParamOps;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n+    protected final IntAttrNameParser intAttrNameParser;\n \n-    @Autowired\n-    private SearchCondVisitor searchCondVisitor;\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    public DefaultNotificationManager(\n+            final DerSchemaDAO derSchemaDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final NotificationDAO notificationDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final AnyMatchDAO anyMatchDAO,\n+            final TaskDAO taskDAO,\n+            final DerAttrHandler derAttrHandler,\n+            final VirAttrHandler virAttrHandler,\n+            final UserDataBinder userDataBinder,\n+            final GroupDataBinder groupDataBinder,\n+            final AnyObjectDataBinder anyObjectDataBinder,\n+            final ConfParamOps confParamOps,\n+            final EntityFactory entityFactory,\n+            final IntAttrNameParser intAttrNameParser,\n+            final SearchCondVisitor searchCondVisitor) {\n+\n+        this.derSchemaDAO = derSchemaDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.notificationDAO = notificationDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anySearchDAO = anySearchDAO;\n+        this.anyMatchDAO = anyMatchDAO;\n+        this.taskDAO = taskDAO;\n+        this.derAttrHandler = derAttrHandler;\n+        this.virAttrHandler = virAttrHandler;\n+        this.userDataBinder = userDataBinder;\n+        this.groupDataBinder = groupDataBinder;\n+        this.anyObjectDataBinder = anyObjectDataBinder;\n+        this.confParamOps = confParamOps;\n+        this.entityFactory = entityFactory;\n+        this.intAttrNameParser = intAttrNameParser;\n+        this.searchCondVisitor = searchCondVisitor;\n+    }\n \n     @Transactional(readOnly = true)\n     @Override\n@@ -172,19 +175,19 @@ public long getMaxRetries() {\n      * @param jexlVars JEXL variables\n      * @return notification task, fully populated\n      */\n-    private NotificationTask getNotificationTask(\n+    protected NotificationTask getNotificationTask(\n             final Notification notification,\n             final Any<?> any,\n             final Map<String, Object> jexlVars) {\n \n         if (any != null) {\n-            virAttrHander.getValues(any);\n+            virAttrHandler.getValues(any);\n         }\n \n         List<User> recipients = new ArrayList<>();\n \n         if (notification.getRecipientsFIQL() != null) {\n-            recipients.addAll(searchDAO.<User>search(\n+            recipients.addAll(anySearchDAO.<User>search(\n                     SearchCondConverter.convert(searchCondVisitor, notification.getRecipientsFIQL()),\n                     List.of(), AnyTypeKind.USER));\n         }\n@@ -196,7 +199,7 @@ private NotificationTask getNotificationTask(\n         Set<String> recipientEmails = new HashSet<>();\n         List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n         recipients.forEach(recipient -> {\n-            virAttrHander.getValues(recipient);\n+            virAttrHandler.getValues(recipient);\n \n             String email = getRecipientEmail(notification.getRecipientAttrName(), recipient);\n             if (email == null) {\n@@ -246,7 +249,7 @@ private NotificationTask getNotificationTask(\n         return task;\n     }\n \n-    private static String evaluate(final String template, final Map<String, Object> jexlVars) {\n+    protected static String evaluate(final String template, final Map<String, Object> jexlVars) {\n         StringWriter writer = new StringWriter();\n         JexlUtils.newJxltEngine().\n                 createTemplate(template).\n@@ -379,7 +382,7 @@ public List<NotificationTask> createTasks(\n         return notifications;\n     }\n \n-    private String getRecipientEmail(final String recipientAttrName, final User user) {\n+    protected String getRecipientEmail(final String recipientAttrName, final User user) {\n         String email = null;\n \n         IntAttrName intAttrName;\n@@ -419,8 +422,8 @@ private String getRecipientEmail(final String recipientAttrName, final User user\n                         LOG.warn(\"Ignoring non existing {} {}\", DerSchema.class.getSimpleName(), recipientAttrName);\n                     } else {\n                         email = membership == null\n-                                ? derAttrHander.getValue(user, schema)\n-                                : derAttrHander.getValue(user, membership, schema);\n+                                ? derAttrHandler.getValue(user, schema)\n+                                : derAttrHandler.getValue(user, membership, schema);\n                     }\n                     break;\n \n@@ -430,8 +433,8 @@ private String getRecipientEmail(final String recipientAttrName, final User user\n                         LOG.warn(\"Ignoring non existing {} {}\", VirSchema.class.getSimpleName(), recipientAttrName);\n                     } else {\n                         List<String> virAttrValues = membership == null\n-                                ? virAttrHander.getValues(user, virSchema)\n-                                : virAttrHander.getValues(user, membership, virSchema);\n+                                ? virAttrHandler.getValues(user, virSchema)\n+                                : virAttrHandler.getValues(user, membership, virSchema);\n                         email = virAttrValues.isEmpty() ? null : virAttrValues.get(0);\n                     }\n                     break;"},{"sha":"4ef8d0d675c0972f0fc4c975af12a12f55c9b01c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":48,"deletions":58,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -43,7 +43,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -59,6 +58,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n@@ -79,82 +79,72 @@\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(rollbackFor = { Throwable.class })\n public abstract class AbstractPropagationTaskExecutor implements PropagationTaskExecutor {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationTaskExecutor.class);\n \n-    /**\n-     * Connector factory.\n-     */\n-    @Autowired\n-    protected ConnectorFactory connFactory;\n+    protected final ConnectorManager connectorManager;\n \n-    /**\n-     * ConnObjectUtils.\n-     */\n-    @Autowired\n-    protected ConnObjectUtils connObjectUtils;\n+    protected final ConnObjectUtils connObjectUtils;\n \n-    /**\n-     * User DAO.\n-     */\n-    @Autowired\n-    protected UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    /**\n-     * Group DAO.\n-     */\n-    @Autowired\n-    protected GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    /**\n-     * Any object DAO.\n-     */\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    /**\n-     * Task DAO.\n-     */\n-    @Autowired\n-    protected TaskDAO taskDAO;\n+    protected final TaskDAO taskDAO;\n \n-    @Autowired\n-    protected ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    /**\n-     * Notification Manager.\n-     */\n-    @Autowired\n-    protected NotificationManager notificationManager;\n+    protected final NotificationManager notificationManager;\n \n-    /**\n-     * Audit Manager.\n-     */\n-    @Autowired\n-    protected AuditManager auditManager;\n+    protected final AuditManager auditManager;\n \n-    /**\n-     * Task data binder.\n-     */\n-    @Autowired\n-    protected TaskDataBinder taskDataBinder;\n+    protected final TaskDataBinder taskDataBinder;\n+\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n+    protected final TaskUtilsFactory taskUtilsFactory;\n \n-    @Autowired\n-    protected TaskUtilsFactory taskUtilsFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    protected EntityFactory entityFactory;\n+    protected final OutboundMatcher outboundMatcher;\n \n-    @Autowired\n-    protected OutboundMatcher outboundMatcher;\n+    public AbstractPropagationTaskExecutor(\n+            final ConnectorManager connectorManager,\n+            final ConnObjectUtils connObjectUtils,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final TaskDAO taskDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final NotificationManager notificationManager,\n+            final AuditManager auditManager,\n+            final TaskDataBinder taskDataBinder,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final TaskUtilsFactory taskUtilsFactory,\n+            final EntityFactory entityFactory,\n+            final OutboundMatcher outboundMatcher) {\n+\n+        this.connectorManager = connectorManager;\n+        this.connObjectUtils = connObjectUtils;\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.taskDAO = taskDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.notificationManager = notificationManager;\n+        this.auditManager = auditManager;\n+        this.taskDataBinder = taskDataBinder;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.taskUtilsFactory = taskUtilsFactory;\n+        this.entityFactory = entityFactory;\n+        this.outboundMatcher = outboundMatcher;\n+    }\n \n     protected List<PropagationActions> getPropagationActions(final ExternalResource resource) {\n         List<PropagationActions> result = new ArrayList<>();\n@@ -317,7 +307,7 @@ public TaskExec execute(\n         PropagationTask task = buildTask(taskInfo);\n \n         Connector connector = taskInfo.getConnector() == null\n-                ? connFactory.getConnector(task.getResource())\n+                ? connectorManager.getConnector(task.getResource())\n                 : taskInfo.getConnector();\n \n         List<PropagationActions> actions = getPropagationActions(task.getResource());"},{"sha":"56e04877abc4cac8a58db953ee1cc96501156f2b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationManager.java","status":"modified","additions":26,"deletions":16,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -64,7 +64,6 @@\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n \n@@ -76,26 +75,37 @@ public class DefaultPropagationManager implements PropagationManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationManager.class);\n \n-    @Autowired\n-    protected VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    protected ExternalResourceDAO resourceDAO;\n+    protected final ExternalResourceDAO resourceDAO;\n \n-    @Autowired\n-    protected EntityFactory entityFactory;\n+    protected final EntityFactory entityFactory;\n \n-    @Autowired\n-    protected ConnObjectUtils connObjectUtils;\n+    protected final ConnObjectUtils connObjectUtils;\n \n-    @Autowired\n-    protected MappingManager mappingManager;\n+    protected final MappingManager mappingManager;\n \n-    @Autowired\n-    protected DerAttrHandler derAttrHandler;\n+    protected final DerAttrHandler derAttrHandler;\n \n-    @Autowired\n-    protected AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public DefaultPropagationManager(\n+            final VirSchemaDAO virSchemaDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final EntityFactory entityFactory,\n+            final ConnObjectUtils connObjectUtils,\n+            final MappingManager mappingManager,\n+            final DerAttrHandler derAttrHandler,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.entityFactory = entityFactory;\n+        this.connObjectUtils = connObjectUtils;\n+        this.mappingManager = mappingManager;\n+        this.derAttrHandler = derAttrHandler;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n \n     @Override\n     public List<PropagationTaskInfo> getCreateTasks(\n@@ -455,7 +465,7 @@ protected List<PropagationTaskInfo> createTasks(\n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             Provision provision = Optional.ofNullable(resource).\n-                flatMap(externalResource -> externalResource.getProvision(any.getType())).orElse(null);\n+                    flatMap(externalResource -> externalResource.getProvision(any.getType())).orElse(null);\n             Stream<? extends Item> mappingItems = provision == null\n                     ? Stream.empty()\n                     : MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());"},{"sha":"c5a1454c74e49b27ebdce8d39a0705bf89ec108f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":50,"deletions":4,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,15 +27,28 @@\n import java.util.concurrent.ExecutorCompletionService;\n import java.util.concurrent.Future;\n import java.util.stream.Collectors;\n-import javax.annotation.Resource;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Exec;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n+import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n+import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskCallable;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n+import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n@@ -48,9 +61,6 @@\n  */\n public class PriorityPropagationTaskExecutor extends AbstractPropagationTaskExecutor {\n \n-    @Resource(name = \"propagationTaskExecutorAsyncExecutor\")\n-    protected ThreadPoolTaskExecutor taskExecutor;\n-\n     /**\n      * Creates new instances of {@link PropagationTaskCallable} for usage with\n      * {@link java.util.concurrent.CompletionService}.\n@@ -73,6 +83,42 @@ protected static PropagationTaskCallable newPropagationTaskCallable(\n         return callable;\n     }\n \n+    protected final ThreadPoolTaskExecutor taskExecutor;\n+\n+    public PriorityPropagationTaskExecutor(\n+            final ConnectorManager connectorManager,\n+            final ConnObjectUtils connObjectUtils,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final TaskDAO taskDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final NotificationManager notificationManager,\n+            final AuditManager auditManager,\n+            final TaskDataBinder taskDataBinder,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final TaskUtilsFactory taskUtilsFactory,\n+            final EntityFactory entityFactory,\n+            final OutboundMatcher outboundMatcher,\n+            final ThreadPoolTaskExecutor taskExecutor) {\n+\n+        super(connectorManager,\n+                connObjectUtils,\n+                userDAO,\n+                groupDAO,\n+                anyObjectDAO,\n+                taskDAO,\n+                resourceDAO,\n+                notificationManager,\n+                auditManager,\n+                taskDataBinder,\n+                anyUtilsFactory,\n+                taskUtilsFactory,\n+                entityFactory,\n+                outboundMatcher);\n+        this.taskExecutor = taskExecutor;\n+    }\n+\n     @Override\n     protected void doExecute(\n             final Collection<PropagationTaskInfo> taskInfos,"},{"sha":"77de9bda81e0fe12ca98dad30050192ab429b76d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -35,8 +35,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.ConnectorManager;\n import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobExecutionContext;\n@@ -86,7 +86,7 @@ public static String generate(final Collection<ProvisioningReport> results, fina\n      * ConnInstance loader.\n      */\n     @Autowired\n-    protected ConnectorFactory connFactory;\n+    protected ConnectorManager connectorManager;\n \n     /**\n      * AnyTypeDAO DAO\n@@ -629,7 +629,7 @@ protected String createReport(\n     protected Connector getConnector(final T provisioningTask) throws JobExecutionException {\n         Connector connector;\n         try {\n-            connector = connFactory.getConnector(provisioningTask.getResource());\n+            connector = connectorManager.getConnector(provisioningTask.getResource());\n         } catch (Exception e) {\n             String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n                     provisioningTask.getResource(), provisioningTask.getResource().getConnector());"},{"sha":"ae82bfe3329fe66e41c6e5648dd1a159df7d2001","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultProvisionSorter.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultProvisionSorter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultProvisionSorter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultProvisionSorter.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java;\n+package org.apache.syncope.core.provisioning.java.pushpull;\n \n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -41,5 +41,4 @@ public int compare(final Provision provision1, final Provision provision2) {\n         }\n         return ObjectUtils.compare(provision1.getAnyType().getKey(), provision2.getAnyType().getKey());\n     }\n-\n }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultProvisionSorter.java"},{"sha":"948892f067fb9e72f19e85f9a042863e114a6636","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -97,7 +97,7 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n                 before.getVirAttrs(),\n                 noPropResources),\n                 false,\n-                securityProperties.getAdminUser());\n+                profile.getExecutor());\n         reportPropagation(result, reporter);\n     }\n \n@@ -136,7 +136,7 @@ protected void update(\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter, securityProperties.getAdminUser());\n+            taskExecutor.execute(taskInfos.get(0), reporter, profile.getExecutor());\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -167,7 +167,7 @@ protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, fi\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.of(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter, securityProperties.getAdminUser());\n+            taskExecutor.execute(taskInfos.get(0), reporter, profile.getExecutor());\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -224,13 +224,13 @@ protected void doHandle(final LinkedAccount account, final Provision provision)\n \n         // Try to read remote object BEFORE any actual operation\n         Optional<ConnectorObject> connObj = MappingUtils.getConnObjectKeyItem(provision).\n-            flatMap(connObjectKeyItem -> outboundMatcher.matchByConnObjectKeyValue(\n-            profile.getConnector(),\n-            connObjectKeyItem,\n-            account.getConnObjectKeyValue(),\n-            provision,\n-            Optional.empty(),\n-            Optional.empty()));\n+                flatMap(connObjectKeyItem -> outboundMatcher.matchByConnObjectKeyValue(\n+                profile.getConnector(),\n+                connObjectKeyItem,\n+                account.getConnObjectKeyValue(),\n+                provision,\n+                Optional.empty(),\n+                Optional.empty()));\n         LOG.debug(\"Match found for linked account {} as {}: {}\", account, provision.getObjectClass(), connObj);\n \n         ConnectorObject beforeObj = connObj.orElse(null);\n@@ -375,7 +375,7 @@ protected void provision(\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.empty());\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter, securityProperties.getAdminUser());\n+            taskExecutor.execute(taskInfos.get(0), reporter, profile.getExecutor());\n             reportPropagation(result, reporter);\n         }\n     }\n@@ -402,7 +402,7 @@ protected void update(\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.empty());\n             PropagationReporter reporter = new DefaultPropagationReporter();\n-            taskExecutor.execute(taskInfos.get(0), reporter, securityProperties.getAdminUser());\n+            taskExecutor.execute(taskInfos.get(0), reporter, profile.getExecutor());\n             reportPropagation(result, reporter);\n         }\n     }"},{"sha":"836951037704d81ef90986cf31ae0c512287c0b6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":37,"deletions":27,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -74,43 +74,53 @@\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n \n @Transactional(readOnly = true)\n-@Component\n public class InboundMatcher {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(InboundMatcher.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(InboundMatcher.class);\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n+    protected final AnyObjectDAO anyObjectDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n+    protected final GroupDAO groupDAO;\n \n-    @Autowired\n-    private AnySearchDAO searchDAO;\n+    protected final AnySearchDAO anySearchDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n+    protected final RealmDAO realmDAO;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private VirAttrHandler virAttrHandler;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n+    protected final IntAttrNameParser intAttrNameParser;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public InboundMatcher(\n+            final UserDAO userDAO,\n+            final AnyObjectDAO anyObjectDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final RealmDAO realmDAO,\n+            final VirSchemaDAO virSchemaDAO,\n+            final VirAttrHandler virAttrHandler,\n+            final IntAttrNameParser intAttrNameParser,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.userDAO = userDAO;\n+        this.anyObjectDAO = anyObjectDAO;\n+        this.groupDAO = groupDAO;\n+        this.anySearchDAO = anySearchDAO;\n+        this.realmDAO = realmDAO;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.virAttrHandler = virAttrHandler;\n+        this.intAttrNameParser = intAttrNameParser;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n \n     public Optional<PullMatch> match(\n             final AnyType anyType,\n@@ -240,7 +250,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                         AnyCond cond = new AnyCond(AttrCond.Type.IEQ);\n                         cond.setSchema(\"username\");\n                         cond.setExpression(finalConnObjectKeyValue);\n-                        anys.addAll(searchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.USER));\n+                        anys.addAll(anySearchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.USER));\n                     } else {\n                         Optional.ofNullable(userDAO.findByUsername(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n@@ -251,7 +261,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                         AnyCond cond = new AnyCond(AttrCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n                         cond.setExpression(finalConnObjectKeyValue);\n-                        anys.addAll(searchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.GROUP));\n+                        anys.addAll(anySearchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.GROUP));\n                     } else {\n                         Optional.ofNullable(groupDAO.findByName(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n@@ -260,7 +270,7 @@ public List<PullMatch> matchByConnObjectKeyValue(\n                         AnyCond cond = new AnyCond(AttrCond.Type.IEQ);\n                         cond.setSchema(\"name\");\n                         cond.setExpression(finalConnObjectKeyValue);\n-                        anys.addAll(searchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.ANY_OBJECT));\n+                        anys.addAll(anySearchDAO.search(SearchCond.getLeaf(cond), AnyTypeKind.ANY_OBJECT));\n                     } else {\n                         Optional.ofNullable(anyObjectDAO.findByName(finalConnObjectKeyValue)).ifPresent(anys::add);\n                     }\n@@ -313,15 +323,15 @@ public List<PullMatch> matchByConnObjectKeyValue(\n         return result.isEmpty() ? noMatchResult : result;\n     }\n \n-    private List<PullMatch> matchByCorrelationRule(\n+    protected List<PullMatch> matchByCorrelationRule(\n             final SyncDelta syncDelta,\n             final Provision provision,\n             final PullCorrelationRule rule,\n             final AnyTypeKind type) {\n \n         List<PullMatch> result = new ArrayList<>();\n \n-        result.addAll(searchDAO.search(rule.getSearchCond(syncDelta, provision), type).stream().\n+        result.addAll(anySearchDAO.search(rule.getSearchCond(syncDelta, provision), type).stream().\n                 map(any -> rule.matching(any, syncDelta, provision)).\n                 collect(Collectors.toList()));\n "},{"sha":"33d2d6493ca1e8dba499a8b21bf16ee0b4aa0ff1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":29,"deletions":23,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -52,31 +52,37 @@\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class OutboundMatcher {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(OutboundMatcher.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(OutboundMatcher.class);\n \n-    @Autowired\n-    private MappingManager mappingManager;\n+    protected final MappingManager mappingManager;\n \n-    @Autowired\n-    private UserDAO userDAO;\n+    protected final UserDAO userDAO;\n \n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected final AnyUtilsFactory anyUtilsFactory;\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n+    protected final VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private VirAttrHandler virAttrHandler;\n+    protected final VirAttrHandler virAttrHandler;\n \n-    private Optional<PushCorrelationRule> rule(final Provision provision) {\n+    public OutboundMatcher(\n+            final MappingManager mappingManager,\n+            final UserDAO userDAO,\n+            final AnyUtilsFactory anyUtilsFactory,\n+            final VirSchemaDAO virSchemaDAO,\n+            final VirAttrHandler virAttrHandler) {\n+\n+        this.mappingManager = mappingManager;\n+        this.userDAO = userDAO;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+        this.virSchemaDAO = virSchemaDAO;\n+        this.virAttrHandler = virAttrHandler;\n+    }\n+\n+    protected Optional<PushCorrelationRule> rule(final Provision provision) {\n         Optional<? extends PushCorrelationRuleEntity> correlationRule = provision.getResource().getPushPolicy() == null\n                 ? Optional.empty()\n                 : provision.getResource().getPushPolicy().getCorrelationRule(provision.getAnyType());\n@@ -129,12 +135,12 @@ public List<ConnectorObject> match(\n                         Optional.empty()));\n             } else {\n                 MappingUtils.getConnObjectKeyItem(provision).flatMap(connObjectKeyItem -> matchByConnObjectKeyValue(\n-                    connector,\n-                    connObjectKeyItem,\n-                    connObjectKeyValue,\n-                    provision,\n-                    Optional.of(moreAttrsToGet.toArray(new String[0])),\n-                    Optional.empty())).ifPresent(result::add);\n+                        connector,\n+                        connObjectKeyItem,\n+                        connObjectKeyValue,\n+                        provision,\n+                        Optional.of(moreAttrsToGet.toArray(new String[0])),\n+                        Optional.empty())).ifPresent(result::add);\n             }\n         } catch (RuntimeException e) {\n             LOG.error(\"Could not match {} with any existing {}\", any, provision.getObjectClass(), e);\n@@ -166,7 +172,7 @@ public List<ConnectorObject> match(\n             }\n         });\n         Optional<String[]> effectiveMATG = Optional.of(Stream.concat(\n-            moreAttrsToGet.stream().flatMap(Stream::of),\n+                moreAttrsToGet.stream().flatMap(Stream::of),\n                 matgFromPropagationActions.stream()).toArray(String[]::new));\n \n         Optional<PushCorrelationRule> rule = rule(provision);\n@@ -208,7 +214,7 @@ public List<ConnectorObject> match(\n         return result;\n     }\n \n-    private List<ConnectorObject> matchByCorrelationRule(\n+    protected List<ConnectorObject> matchByCorrelationRule(\n             final Connector connector,\n             final Filter filter,\n             final Provision provision,"},{"sha":"62ceee8aa434202a766d434697310be614f8e5b6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -64,7 +64,6 @@\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n-import org.apache.syncope.core.provisioning.java.DefaultProvisionSorter;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionContext;\n "},{"sha":"1b0c3a0daeaaa300cfad7c38581dfa920943ba0e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n-import org.apache.syncope.core.provisioning.java.DefaultProvisionSorter;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;"},{"sha":"699afcef6232b40e8e981986976c3ad2490fe216","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -50,7 +50,8 @@ public class SinglePushJobDelegate extends PushJobDelegate implements SyncopeSin\n     private List<PushActions> before(\n             final Provision provision,\n             final Connector connector,\n-            final PushTaskTO pushTaskTO) throws JobExecutionException {\n+            final PushTaskTO pushTaskTO,\n+            final String executor) throws JobExecutionException {\n \n         LOG.debug(\"Executing push on {}\", provision.getResource());\n \n@@ -80,6 +81,7 @@ private List<PushActions> before(\n         pushTask.setSyncStatus(pushTaskTO.isSyncStatus());\n \n         profile = new ProvisioningProfile<>(connector, pushTask);\n+        profile.setExecutor(executor);\n         profile.getActions().addAll(actions);\n         profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n@@ -95,10 +97,11 @@ public List<ProvisioningReport> push(\n             final Provision provision,\n             final Connector connector,\n             final Any<?> any,\n-            final PushTaskTO pushTaskTO) throws JobExecutionException {\n+            final PushTaskTO pushTaskTO,\n+            final String executor) throws JobExecutionException {\n \n         try {\n-            List<PushActions> actions = before(provision, connector, pushTaskTO);\n+            List<PushActions> actions = before(provision, connector, pushTaskTO, executor);\n \n             SyncopePushResultHandler handler;\n             switch (provision.getAnyType().getKind()) {\n@@ -135,10 +138,11 @@ public ProvisioningReport push(\n             final Provision provision,\n             final Connector connector,\n             final LinkedAccount account,\n-            final PushTaskTO pushTaskTO) throws JobExecutionException {\n+            final PushTaskTO pushTaskTO,\n+            final String executor) throws JobExecutionException {\n \n         try {\n-            List<PushActions> actions = before(provision, connector, pushTaskTO);\n+            List<PushActions> actions = before(provision, connector, pushTaskTO, executor);\n \n             UserPushResultHandler handler = buildUserHandler();\n             handler.setProfile(profile);"},{"sha":"802218bee6ec929c6cb4087b4454863bf823de71","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamAnyObjectPushResultHandler.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,12 +40,6 @@ public class StreamAnyObjectPushResultHandler extends DefaultAnyObjectPushResult\n     @Autowired\n     private DerAttrHandler derAttrHandler;\n \n-    private String executor;\n-\n-    public void setExecutor(final String executor) {\n-        this.executor = executor;\n-    }\n-\n     @Override\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         Provision provision = profile.getTask().getResource().getProvisions().get(0);\n@@ -67,7 +61,7 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n         LOG.debug(\"PropagationTask created: {}\", propagationTask);\n \n         PropagationReporter reporter = new DefaultPropagationReporter();\n-        taskExecutor.execute(propagationTask, reporter, executor);\n+        taskExecutor.execute(propagationTask, reporter, profile.getExecutor());\n         reportPropagation(result, reporter);\n     }\n }"},{"sha":"1f26309a593b48800da3c132bee3a5c2454823fe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamGroupPushResultHandler.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,12 +40,6 @@ public class StreamGroupPushResultHandler extends DefaultGroupPushResultHandler\n     @Autowired\n     private DerAttrHandler derAttrHandler;\n \n-    private String executor;\n-\n-    public void setExecutor(final String executor) {\n-        this.executor = executor;\n-    }\n-\n     @Override\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         Provision provision = profile.getTask().getResource().getProvisions().get(0);\n@@ -67,7 +61,7 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n         LOG.debug(\"PropagationTask created: {}\", propagationTask);\n \n         PropagationReporter reporter = new DefaultPropagationReporter();\n-        taskExecutor.execute(propagationTask, reporter, executor);\n+        taskExecutor.execute(propagationTask, reporter, profile.getExecutor());\n         reportPropagation(result, reporter);\n     }\n }"},{"sha":"4973b2adc68c9030840fdbf19e82e572047dd5b6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"modified","additions":6,"deletions":17,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -56,33 +56,22 @@ public class StreamPushJobDelegate extends PushJobDelegate implements SyncopeStr\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n-    private String executor;\n-\n     @Override\n     protected AnyObjectPushResultHandler buildAnyObjectHandler() {\n-        StreamAnyObjectPushResultHandler handler =\n-                (StreamAnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().createBean(\n-                        StreamAnyObjectPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setExecutor(executor);\n-        return handler;\n+        return (AnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().createBean(\n+                StreamAnyObjectPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n     @Override\n     protected UserPushResultHandler buildUserHandler() {\n-        StreamUserPushResultHandler handler =\n-                (StreamUserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n-                        createBean(StreamUserPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setExecutor(executor);\n-        return handler;\n+        return (UserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n+                createBean(StreamUserPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n     @Override\n     protected GroupPushResultHandler buildGroupHandler() {\n-        StreamGroupPushResultHandler handler = (StreamGroupPushResultHandler) ApplicationContextProvider.\n-                getBeanFactory().\n+        return (GroupPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(StreamGroupPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n-        handler.setExecutor(executor);\n-        return handler;\n     }\n \n     private ExternalResource externalResource(\n@@ -141,7 +130,6 @@ public List<ProvisioningReport> push(\n             final String executor) throws JobExecutionException {\n \n         LOG.debug(\"Executing stream push as {}\", executor);\n-        this.executor = executor;\n \n         List<PushActions> pushActions = new ArrayList<>();\n         pushTaskTO.getActions().forEach(key -> {\n@@ -171,6 +159,7 @@ public List<ProvisioningReport> push(\n             pushTask.setSyncStatus(false);\n \n             profile = new ProvisioningProfile<>(connector, pushTask);\n+            profile.setExecutor(executor);\n             profile.getActions().addAll(pushActions);\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n "},{"sha":"1508384697e40898216bae0a79b7106c94dc1172","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamUserPushResultHandler.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,12 +40,6 @@ public class StreamUserPushResultHandler extends DefaultUserPushResultHandler {\n     @Autowired\n     private DerAttrHandler derAttrHandler;\n \n-    private String executor;\n-\n-    public void setExecutor(final String executor) {\n-        this.executor = executor;\n-    }\n-\n     @Override\n     protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n         Provision provision = profile.getTask().getResource().getProvisions().get(0);\n@@ -67,7 +61,7 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n         LOG.debug(\"PropagationTask created: {}\", propagationTask);\n \n         PropagationReporter reporter = new DefaultPropagationReporter();\n-        taskExecutor.execute(propagationTask, reporter, executor);\n+        taskExecutor.execute(propagationTask, reporter, profile.getExecutor());\n         reportPropagation(result, reporter);\n     }\n }"},{"sha":"bbf2614eae5298b361bf0b07e4cd93ebf708519d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":35,"deletions":27,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -61,38 +61,14 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n \n-@Component\n public class ConnObjectUtils {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n-\n-    @Autowired\n-    private TemplateUtils templateUtils;\n-\n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private ExternalResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private PasswordGenerator passwordGenerator;\n-\n-    @Autowired\n-    private MappingManager mappingManager;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n     /**\n      * Extract password value from passed value (if instance of GuardedString or GuardedByteArray).\n@@ -151,6 +127,38 @@ public static ConnObjectTO getConnObjectTO(final String fiql, final Set<Attribut\n         return connObjectTO;\n     }\n \n+    protected final TemplateUtils templateUtils;\n+\n+    protected final RealmDAO realmDAO;\n+\n+    protected final UserDAO userDAO;\n+\n+    protected final ExternalResourceDAO resourceDAO;\n+\n+    protected final PasswordGenerator passwordGenerator;\n+\n+    protected final MappingManager mappingManager;\n+\n+    protected final AnyUtilsFactory anyUtilsFactory;\n+\n+    public ConnObjectUtils(\n+            final TemplateUtils templateUtils,\n+            final RealmDAO realmDAO,\n+            final UserDAO userDAO,\n+            final ExternalResourceDAO resourceDAO,\n+            final PasswordGenerator passwordGenerator,\n+            final MappingManager mappingManager,\n+            final AnyUtilsFactory anyUtilsFactory) {\n+\n+        this.templateUtils = templateUtils;\n+        this.realmDAO = realmDAO;\n+        this.userDAO = userDAO;\n+        this.resourceDAO = resourceDAO;\n+        this.passwordGenerator = passwordGenerator;\n+        this.mappingManager = mappingManager;\n+        this.anyUtilsFactory = anyUtilsFactory;\n+    }\n+\n     /**\n      * Build a UserCR / GroupCR / AnyObjectCR out of connector object attributes and schema mapping.\n      *\n@@ -307,7 +315,7 @@ public <U extends AnyUR> U getAnyUR(\n         return anyUR;\n     }\n \n-    private <T extends AnyTO> T getAnyTOFromConnObject(\n+    protected <T extends AnyTO> T getAnyTOFromConnObject(\n             final ConnectorObject obj, final PullTask pullTask, final Provision provision) {\n \n         T anyTO = anyUtilsFactory.getInstance(provision.getAnyType().getKind()).newAnyTO();"},{"sha":"465c0287970604f5465651927af2ccebd54f35f7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -40,20 +40,11 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-@Component\n public class TemplateUtils {\n \n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    private static Attr evaluateAttr(final Attr template, final MapContext jexlContext) {\n+    protected static Attr evaluateAttr(final Attr template, final MapContext jexlContext) {\n         Attr result = new Attr();\n         result.setSchema(template.getSchema());\n \n@@ -69,7 +60,7 @@ private static Attr evaluateAttr(final Attr template, final MapContext jexlConte\n         return result;\n     }\n \n-    private static void fill(final RealmMember realmMember, final RealmMember template) {\n+    protected static void fill(final RealmMember realmMember, final RealmMember template) {\n         MapContext jexlContext = new MapContext();\n         JexlUtils.addFieldsToContext(realmMember, jexlContext);\n         JexlUtils.addAttrsToContext(realmMember.getPlainAttrs(), jexlContext);\n@@ -123,19 +114,28 @@ private static void fill(final RealmMember realmMember, final RealmMember templa\n         realmMember.getAuxClasses().addAll(template.getAuxClasses());\n     }\n \n-    private static void fillRelationships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n+    protected static void fillRelationships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n         template.getRelationships().stream().\n                 filter(relationship -> any.getRelationship(\n                 relationship.getOtherEndKey(), relationship.getOtherEndKey()).isEmpty()).\n                 forEachOrdered(relationship -> any.getRelationships().add(relationship));\n     }\n \n-    private static void fillMemberships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n+    protected static void fillMemberships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n         template.getMemberships().stream().\n                 filter(membership -> any.getMembership(membership.getGroupKey()).isEmpty()).\n                 forEachOrdered(membership -> any.getMemberships().add(membership));\n     }\n \n+    protected final UserDAO userDAO;\n+\n+    protected final GroupDAO groupDAO;\n+\n+    public TemplateUtils(final UserDAO userDAO, final GroupDAO groupDAO) {\n+        this.userDAO = userDAO;\n+        this.groupDAO = groupDAO;\n+    }\n+\n     @Transactional(readOnly = true)\n     public void apply(final RealmMember realmMember, final Optional<? extends AnyTemplate> template) {\n         template.ifPresent(anyTemplate -> apply(realmMember, anyTemplate.get()));"},{"sha":"4eddee90fa04f570314adcf71906791a8df550fe","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ConnectorManagerTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -27,7 +27,6 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.util.ReflectionTestUtils;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -39,13 +38,11 @@ public class ConnectorManagerTest extends AbstractTest {\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    private ConnectorManager connManager;\n+    private DefaultConnectorManager connManager;\n \n     @BeforeEach\n     public void before() {\n-        connManager = new ConnectorManager();\n-        ReflectionTestUtils.setField(connManager, \"connIdBundleManager\", connIdBundleManager);\n-        ReflectionTestUtils.setField(connManager, \"resourceDAO\", resourceDAO);\n+        connManager = new DefaultConnectorManager(connIdBundleManager, null, resourceDAO, null, null, null);\n \n         // Remove any other connector instance bean set up by standard ConnectorManager.load()\n         connManager.unload();"},{"sha":"9706dc0c4c8051a9a352f486b878594ceef7e105","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DefaultMappingManagerTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManagerTest.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -53,7 +53,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n-public class MappingManagerImplTest extends AbstractTest {\n+public class DefaultMappingManagerTest extends AbstractTest {\n \n     @Autowired\n     private MappingManager mappingManager;","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingManagerImplTest.java"},{"sha":"452907154b64c8536a13b52d0b4fc4d8b941889c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyConfParamOps.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyConfParamOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -20,9 +20,7 @@\n \n import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyConfParamOps implements ConfParamOps {\n \n     @Override"},{"sha":"cac01dd585d063a7921d9b16c4a408102c34d85a","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyDomainOps.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyDomainOps.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,14 +23,14 @@\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.DomainRegistry;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyDomainOps implements DomainOps {\n \n-    @Autowired\n-    private DomainRegistry domainRegistry;\n+    private final DomainRegistry domainRegistry;\n+\n+    public DummyDomainOps(final DomainRegistry domainRegistry) {\n+        this.domainRegistry = domainRegistry;\n+    }\n \n     @Override\n     public List<Domain> list() {"},{"sha":"44e323a4447345c7ebf3fa71b1a12d2e21729257","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DummyImplementationLookup.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDummyImplementationLookup.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -34,9 +34,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPushCorrelationRule;\n import org.apache.syncope.core.spring.policy.DefaultAccountRule;\n import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DummyImplementationLookup implements ImplementationLookup {\n \n     @Override"},{"sha":"45c35fd11220b3a09bfc0166a148ccdc6903e325","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ProvisioningTestContext.java","status":"modified","additions":40,"deletions":1,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningTestContext.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -18,15 +18,54 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.jpa.MasterDomain;\n import org.apache.syncope.core.persistence.jpa.PersistenceContext;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n import org.apache.syncope.core.spring.security.SecurityContext;\n import org.apache.syncope.core.workflow.java.WorkflowContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.context.annotation.PropertySource;\n \n @PropertySource(\"classpath:core-test.properties\")\n-@Import({ SecurityContext.class, PersistenceContext.class, ProvisioningContext.class, WorkflowContext.class })\n+@Import({ ProvisioningContext.class, SecurityContext.class,\n+    PersistenceContext.class, MasterDomain.class, WorkflowContext.class })\n @Configuration\n public class ProvisioningTestContext {\n+\n+    @Bean\n+    @Autowired\n+    public TestInitializer testInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n+    }\n+\n+    @Bean\n+    public ImplementationLookup implementationLookup() {\n+        return new DummyImplementationLookup();\n+    }\n+\n+    @Bean\n+    public ConfParamOps confParamOps() {\n+        return new DummyConfParamOps();\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public DomainOps domainOps(final DomainRegistry domainRegistry) {\n+        return new DummyDomainOps(domainRegistry);\n+    }\n }"},{"sha":"b6e9c7b7339685ad77c246cdf026a9e5546ecf60","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/TestInitializer.java","status":"modified","additions":15,"deletions":17,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ab0ffc43370bbfca8253e5ddb0242c27a752fb5/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FTestInitializer.java?ref=6ab0ffc43370bbfca8253e5ddb0242c27a752fb5","patch":"@@ -23,33 +23,31 @@\n import org.apache.syncope.core.persistence.api.content.ContentLoader;\n import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.stereotype.Component;\n import org.springframework.transaction.support.TransactionSynchronizationManager;\n \n-@Component\n-public class TestInitializer implements InitializingBean, ApplicationContextAware {\n+public class TestInitializer implements InitializingBean {\n \n-    private ConfigurableApplicationContext ctx;\n+    private final StartupDomainLoader domainLoader;\n \n-    @Autowired\n-    private StartupDomainLoader domainLoader;\n+    private final DomainHolder domainHolder;\n \n-    @Autowired\n-    private DomainHolder domainHolder;\n+    private final ContentLoader contentLoader;\n \n-    @Autowired\n-    private ContentLoader contentLoader;\n+    private final ConfigurableApplicationContext ctx;\n \n-    @Override\n-    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n-        this.ctx = (ConfigurableApplicationContext) ctx;\n+    public TestInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        this.domainLoader = domainLoader;\n+        this.domainHolder = domainHolder;\n+        this.contentLoader = contentLoader;\n+        this.ctx = ctx;\n     }\n \n     @Override"}]}