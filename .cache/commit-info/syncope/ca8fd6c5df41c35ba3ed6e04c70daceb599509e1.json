{"sha":"ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNhOGZkNmM1ZGY0MWMzNWJhM2VkNmUwNGM3MGRhY2ViNTk5NTA5ZTE=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-09-18T10:37:29Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@users.noreply.github.com","date":"2019-09-18T10:37:29Z"},"message":"NOJIRA - Small improvements/changes from static analysis reports (#116)","tree":{"sha":"01cc69b36a3e73c0123d8821f83a9f320e4f5fda","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/01cc69b36a3e73c0123d8821f83a9f320e4f5fda"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"27bd53cd87f36463f8fbc852fa545f0512bf24e7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/27bd53cd87f36463f8fbc852fa545f0512bf24e7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/27bd53cd87f36463f8fbc852fa545f0512bf24e7"}],"stats":{"total":3405,"additions":1619,"deletions":1786},"files":[{"sha":"37f328ab8810fb522ff3049874fa0ff2fecae38d","filename":".travis.yml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -49,7 +49,7 @@ jobs:\n       name: \"Warm Up Dependencies\"\n       #######################################################\n     - stage: build\n-      script: mvn install --quiet -T 4 -P all,skipTests,skipLegalFiles -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true -Denforcer.skip=true\n+      script: mvn install --quiet -T 4 -P all,skipTests,skipLegalFiles,docker -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true -Denforcer.skip=true\n       name: \"Build\"\n       #######################################################\n     - stage: validate\n@@ -64,14 +64,23 @@ jobs:\n     - stage: validate\n       script: mvn -T 4 --quiet modernizer:modernizer\n       name: \"Modernizer Legacy API Analysis\"\n+    - stage: validate\n+      script: mvn -T 4 --quiet apache-rat:check\n+      name: \"Release Audit Tool (RAT) Analysis\"\n       ######################################################\n     - stage: test\n       script: mvn clean test -T 4 -P skipLegalFiles,skipSass -T 4 --quiet -Dinvoker.streamLogs=true -Denforcer.skip=true -Dmodernizer.skip=true\n       name: \"Unit Tests\"\n       ######################################################\n     - stage: fit\n-      script: travis_wait 30 mvn -f fit/core-reference/pom.xml verify -P skipLegalFiles,skipSass -T 4 -Dinvoker.streamLogs=true -Denforcer.skip=true -Dmodernizer.skip=true -Djacoco.skip=true\n-      name: \"Full Integration Tests\"\n+      script: travis_wait 55 mvn -f fit/core-reference/pom.xml verify -P full-it,all,skipLegalFiles,skipSass -T 4 -Dinvoker.streamLogs=true -Denforcer.skip=true -Dmodernizer.skip=true -Djacoco.skip=true -Drat.skip=true\n+      name: \"Full Integration Tests via JSON Content-Type\"\n+    # - stage: fit\n+    #   script: travis_wait 55 mvn -f fit/core-reference/pom.xml verify -P full-it,all,skipLegalFiles,skipSass -T 4 -DjaxrsContentType=application/xml -Dinvoker.streamLogs=true -Denforcer.skip=true -Dmodernizer.skip=true -Djacoco.skip=true -Drat.skip=true\n+    #   name: \"Full Integration Tests via XML Content-Type\"\n+    # - stage: fit\n+    #   script: travis_wait 55 mvn -f fit/core-reference/pom.xml verify -P full-it,all,skipLegalFiles,skipSass -T 4 -DjaxrsContentType=application/yaml -Dinvoker.streamLogs=true -Denforcer.skip=true -Dmodernizer.skip=true -Djacoco.skip=true -Drat.skip=true\n+    #   name: \"Full Integration Tests via YAML Content-Type\"\n       #####################################################\n   after_failure:\n     - cat fit/core-reference/target/log/*"},{"sha":"368e67a8aa9b74144ac9f7eca24c26d8b2d44b2b","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -82,7 +82,7 @@ public GatewayRouteDirectoryPanel(final String id, final PageReference pageRef)\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n-                    restClient.push();\n+                    GatewayRouteRestClient.push();\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (Exception e) {\n@@ -124,7 +124,7 @@ protected ActionsPanel<GatewayRouteTO> getActions(final IModel<GatewayRouteTO> m\n             public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore) {\n                 send(GatewayRouteDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                restClient.read(model.getObject().getKey()), target));\n+                                GatewayRouteRestClient.read(model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, AMEntitlement.GATEWAY_ROUTE_UPDATE);\n \n@@ -149,7 +149,7 @@ public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore)\n             public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore) {\n                 GatewayRouteTO route = model.getObject();\n                 try {\n-                    restClient.delete(route.getKey());\n+                    GatewayRouteRestClient.delete(route.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -193,14 +193,14 @@ public GatewayRouteProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<? extends GatewayRouteTO> iterator(final long first, final long count) {\n-            List<GatewayRouteTO> list = restClient.list();\n+            List<GatewayRouteTO> list = GatewayRouteRestClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return GatewayRouteRestClient.list().size();\n         }\n \n         @Override"},{"sha":"6dad69f1f63e877c4dc756167289bffeabd40b44","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGatewayRouteWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -43,18 +43,16 @@ public class GatewayRouteWizardBuilder extends BaseAjaxWizardBuilder<GatewayRout\n \n     private static final long serialVersionUID = 2060352959114706419L;\n \n-    private final GatewayRouteRestClient restClient = new GatewayRouteRestClient();\n-\n     public GatewayRouteWizardBuilder(final GatewayRouteTO route, final PageReference pageRef) {\n         super(route, pageRef);\n     }\n \n     @Override\n     protected Serializable onApplyInternal(final GatewayRouteTO modelObject) {\n         if (modelObject.getKey() == null) {\n-            restClient.create(modelObject);\n+            GatewayRouteRestClient.create(modelObject);\n         } else {\n-            restClient.update(modelObject);\n+            GatewayRouteRestClient.update(modelObject);\n         }\n         return modelObject;\n     }"},{"sha":"2d628e5840205101d6c54b01f6b351b17d62f3c1","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/GatewayRouteRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGatewayRouteRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGatewayRouteRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGatewayRouteRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -26,27 +26,27 @@ public class GatewayRouteRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -7379778542101161274L;\n \n-    public List<GatewayRouteTO> list() {\n+    public static List<GatewayRouteTO> list() {\n         return getService(GatewayRouteService.class).list();\n     }\n \n-    public GatewayRouteTO read(final String key) {\n+    public static GatewayRouteTO read(final String key) {\n         return getService(GatewayRouteService.class).read(key);\n     }\n \n-    public void create(final GatewayRouteTO route) {\n+    public static void create(final GatewayRouteTO route) {\n         getService(GatewayRouteService.class).create(route);\n     }\n \n-    public void update(final GatewayRouteTO route) {\n+    public static void update(final GatewayRouteTO route) {\n         getService(GatewayRouteService.class).update(route);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(GatewayRouteService.class).delete(key);\n     }\n \n-    public void push() {\n+    public static void push() {\n         getService(GatewayRouteService.class).pushToSRA();\n     }\n }"},{"sha":"d66548e45253aba2e496ef8f4fe906e358c59a1a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMExternalResourceProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMExternalResourceProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMExternalResourceProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMExternalResourceProvider.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,6 +29,6 @@ public class IdMExternalResourceProvider implements ExternalResourceProvider {\n \n     @Override\n     public List<String> get() {\n-        return new ResourceRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n+        return ResourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"5dfbba37ebf2be46c31c528c58cb4033c697e2b5","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMImplementationInfoProvider.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n@@ -136,7 +137,7 @@ public IModel<List<String>> getReconFilterBuilders() {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(IdMImplementationType.RECON_FILTER_BUILDER).stream().\n+                return ImplementationRestClient.list(IdMImplementationType.RECON_FILTER_BUILDER).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n@@ -150,7 +151,7 @@ public IModel<List<String>> getPullActions() {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n+                return ImplementationRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n@@ -164,7 +165,7 @@ public IModel<List<String>> getPushActions() {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n+                return ImplementationRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };"},{"sha":"69e3483e6504101b8fe441e7f48d1e7d0f500ed1","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -128,7 +128,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryConfTO modelObject) {\n                 try {\n-                    restClient.restore(modelObject.getKey());\n+                    ConnectorHistoryRestClient.restore(modelObject.getKey());\n                     ConnInstanceHistoryConfDirectoryPanel.this.getTogglePanel().close(target);\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -148,7 +148,7 @@ public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryCon\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ConnInstanceHistoryConfTO modelObject) {\n                 try {\n-                    restClient.delete(modelObject.getKey());\n+                    ConnectorHistoryRestClient.delete(modelObject.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                     ConnInstanceHistoryConfDirectoryPanel.this.getTogglePanel().close(target);\n@@ -212,15 +212,15 @@ public CHConfProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<ConnInstanceHistoryConfTO> iterator(final long first, final long count) {\n-            final List<ConnInstanceHistoryConfTO> configurations = restClient.list(entityKey);\n+            final List<ConnInstanceHistoryConfTO> configurations = ConnectorHistoryRestClient.list(entityKey);\n \n             Collections.sort(configurations, comparator);\n             return configurations.iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list(entityKey).size();\n+            return ConnectorHistoryRestClient.list(entityKey).size();\n         }\n \n         @Override"},{"sha":"e49c0e1fcb105cfff6d9831a656c81d2d91bc2d0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -123,7 +123,7 @@ private List<ConnObjectTO> reloadItems(\n             final String anyType,\n             final String cookie) {\n \n-        Pair<String, List<ConnObjectTO>> items = new ResourceRestClient().listConnObjects(resource,\n+        Pair<String, List<ConnObjectTO>> items = ResourceRestClient.listConnObjects(resource,\n                 anyType,\n                 SIZE,\n                 cookie,"},{"sha":"9af04c7a4743752f188dd22f2e9ccc5b4f943682","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/HistoryConfDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -225,12 +225,12 @@ private void addCurrentInstanceConf() {\n         T conf = null;\n \n         if (selectedHistoryConfTO instanceof ConnInstanceHistoryConfTO) {\n-            ConnInstanceTO current = new ConnectorRestClient().read(\n+            ConnInstanceTO current = ConnectorRestClient.read(\n                     ConnInstanceHistoryConfTO.class.cast(selectedHistoryConfTO).getConnInstanceTO().getKey());\n             conf = (T) new ConnInstanceHistoryConfTO();\n             ((ConnInstanceHistoryConfTO) conf).setConnInstanceTO(current);\n         } else if (selectedHistoryConfTO instanceof ResourceHistoryConfTO) {\n-            ResourceTO current = new ResourceRestClient().read(\n+            ResourceTO current = ResourceRestClient.read(\n                     ResourceHistoryConfTO.class.cast(selectedHistoryConfTO).getResourceTO().getKey());\n             conf = (T) new ResourceHistoryConfTO();\n             ((ResourceHistoryConfTO) conf).setResourceTO(current);"},{"sha":"bb31ade6eaec96c9cd5315e17e29119bf01d1027","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/HistoryConfList.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfList.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -19,6 +19,9 @@\n package org.apache.syncope.client.console.panels;\n \n import java.io.Serializable;\n+\n+import org.apache.syncope.client.console.rest.ConnectorHistoryRestClient;\n+import org.apache.syncope.client.console.rest.ResourceHistoryRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -55,7 +58,8 @@ protected void viewConfiguration(final ConnInstanceHistoryConfTO historyTO,\n                     final AjaxRequestTarget target) {\n                 mlp.next(\n                         new StringResourceModel(\"history.diff.view\", this).getObject(),\n-                        new HistoryConfDetails<>(modal, historyTO, pageReference, restClient.list(entityKey)), target);\n+                        new HistoryConfDetails<>(modal, historyTO, pageReference,\n+                            ConnectorHistoryRestClient.list(entityKey)), target);\n             }\n         } : new ResourceHistoryConfDirectoryPanel(baseModal, mlp, entityKey, pageReference) {\n \n@@ -66,7 +70,8 @@ protected void viewConfiguration(final ResourceHistoryConfTO historyTO,\n                     final AjaxRequestTarget target) {\n                 mlp.next(\n                         new StringResourceModel(\"history.diff.view\", this).getObject(),\n-                        new HistoryConfDetails<>(modal, historyTO, pageReference, restClient.list(entityKey)), target);\n+                        new HistoryConfDetails<>(modal, historyTO, pageReference,\n+                            ResourceHistoryRestClient.list(entityKey)), target);\n             }\n         });\n "},{"sha":"377a8c4b4e7463212b2336a1248daf01b156d075","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,12 +46,6 @@ public class ProvisionAuxClassesPanel extends Panel {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ProvisionAuxClassesPanel.class);\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n-    private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n-\n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     private final ProvisionTO provision;\n \n     public ProvisionAuxClassesPanel(final String id, final ProvisionTO provision) {\n@@ -76,12 +70,12 @@ protected void onBeforeRender() {\n             choices = new ArrayList<>();\n \n             try {\n-                anyType = anyTypeRestClient.read(provision.getAnyType());\n+                anyType = AnyTypeRestClient.read(provision.getAnyType());\n             } catch (Exception e) {\n                 LOG.error(\"Could not read AnyType {}\", provision.getAnyType(), e);\n             }\n             if (anyType != null) {\n-                for (AnyTypeClassTO aux : anyTypeClassRestClient.list()) {\n+                for (AnyTypeClassTO aux : AnyTypeClassRestClient.list()) {\n                     if (!anyType.getClasses().contains(aux.getKey())) {\n                         choices.add(aux.getKey());\n                     }\n@@ -103,11 +97,11 @@ protected void onBeforeRender() {\n         addOrReplace(uidOnCreate);\n     }\n \n-    private List<String> getSchemas(final AnyTypeTO anyType, final List<String> anyTypeClasses) {\n+    private static List<String> getSchemas(final AnyTypeTO anyType, final List<String> anyTypeClasses) {\n         List<String> classes = new ArrayList<>(anyType.getClasses());\n         classes.addAll(anyTypeClasses);\n \n-        return schemaRestClient.<PlainSchemaTO>getSchemas(\n+        return SchemaRestClient.<PlainSchemaTO>getSchemas(\n                 SchemaType.PLAIN, null, classes.toArray(new String[] {})).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList());\n     }"},{"sha":"b5018e43a178417f426b028c3961a6f5839f8439","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -153,7 +153,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final RemediationTO ignore) {\n                     try {\n-                        restClient.remedy(model.getObject().getKey(), model.getObject().getKeyPayload());\n+                        RemediationRestClient.remedy(model.getObject().getKey(), model.getObject().getKeyPayload());\n                         SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         target.add(container);\n                     } catch (SyncopeClientException e) {\n@@ -211,7 +211,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                                     model.getObject(),\n                                     previousUserTO,\n                                     newUserTO,\n-                                    new AnyTypeRestClient().read(remediationTO.getAnyType()).getClasses(),\n+                                    AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n                                     FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).getLeft(),\n                                     pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n@@ -238,7 +238,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                                     model.getObject(),\n                                     previousGroupTO,\n                                     newGroupTO,\n-                                    new AnyTypeRestClient().read(remediationTO.getAnyType()).getClasses(),\n+                                    AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n                                     FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).getMiddle(),\n                                     pageRef\n                             ).build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT));\n@@ -265,7 +265,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                                     model.getObject(),\n                                     previousAnyObjectTO,\n                                     newAnyObjectTO,\n-                                    new AnyTypeRestClient().read(remediationTO.getAnyType()).getClasses(),\n+                                    AnyTypeRestClient.read(remediationTO.getAnyType()).getClasses(),\n                                     FormLayoutInfoUtils.fetch(List.of(remediationTO.getAnyType())).\n                                             getRight().values().iterator().next(),\n                                     pageRef\n@@ -283,7 +283,7 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n             @Override\n             public void onClick(final AjaxRequestTarget target, final RemediationTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    RemediationRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -317,8 +317,6 @@ public static class RemediationProvider extends DirectoryDataProvider<Remediatio\n \n         private static final long serialVersionUID = -2311716167583335852L;\n \n-        private final RemediationRestClient restClient = new RemediationRestClient();\n-\n         public RemediationProvider(final int paginatorRows) {\n             super(paginatorRows);\n \n@@ -328,12 +326,13 @@ public RemediationProvider(final int paginatorRows) {\n         @Override\n         public Iterator<RemediationTO> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.getRemediations((page < 0 ? 0 : page) + 1, paginatorRows, getSort()).iterator();\n+            return RemediationRestClient.getRemediations((page < 0 ? 0 : page) + 1,\n+                paginatorRows, getSort()).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.countRemediations();\n+            return RemediationRestClient.countRemediations();\n         }\n \n         @Override\n@@ -381,7 +380,7 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                 UserCR req = new UserCR();\n                 EntityTOUtils.toAnyCR(inner, req);\n \n-                result = restClient.remedy(remediationTO.getKey(), req);\n+                result = RemediationRestClient.remedy(remediationTO.getKey(), req);\n             } else {\n                 UserUR req = AnyOperations.diff(inner, previousUserTO, false);\n \n@@ -397,7 +396,7 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                     result = new ProvisioningResult<>();\n                     result.setEntity(inner);\n                 } else {\n-                    result = restClient.remedy(remediationTO.getKey(), req);\n+                    result = RemediationRestClient.remedy(remediationTO.getKey(), req);\n                 }\n             }\n \n@@ -436,7 +435,7 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n                 GroupCR req = new GroupCR();\n                 EntityTOUtils.toAnyCR(inner, req);\n \n-                result = restClient.remedy(remediationTO.getKey(), req);\n+                result = RemediationRestClient.remedy(remediationTO.getKey(), req);\n             } else {\n                 GroupUR req = AnyOperations.diff(inner, previousGroupTO, false);\n \n@@ -445,7 +444,7 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n                     result = new ProvisioningResult<>();\n                     result.setEntity(inner);\n                 } else {\n-                    result = restClient.remedy(remediationTO.getKey(), req);\n+                    result = RemediationRestClient.remedy(remediationTO.getKey(), req);\n                 }\n             }\n \n@@ -484,7 +483,7 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n                 AnyObjectCR req = new AnyObjectCR();\n                 EntityTOUtils.toAnyCR(inner, req);\n \n-                result = restClient.remedy(remediationTO.getKey(), req);\n+                result = RemediationRestClient.remedy(remediationTO.getKey(), req);\n             } else {\n                 AnyObjectUR req = AnyOperations.diff(inner, previousAnyObjectTO, false);\n \n@@ -493,7 +492,7 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n                     result = new ProvisioningResult<>();\n                     result.setEntity(inner);\n                 } else {\n-                    result = restClient.remedy(remediationTO.getKey(), req);\n+                    result = RemediationRestClient.remedy(remediationTO.getKey(), req);\n                 }\n             }\n "},{"sha":"d800f5ff4d159e55cefb701a0f0f7e1415959939","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -129,7 +129,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO modelObject) {\n                 try {\n-                    restClient.restore(modelObject.getKey());\n+                    ResourceHistoryRestClient.restore(modelObject.getKey());\n                     ResourceHistoryConfDirectoryPanel.this.getTogglePanel().close(target);\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -149,7 +149,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ResourceHistoryConfTO modelObject) {\n                 try {\n-                    restClient.delete(modelObject.getKey());\n+                    ResourceHistoryRestClient.delete(modelObject.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                     ResourceHistoryConfDirectoryPanel.this.getTogglePanel().close(target);\n@@ -213,15 +213,15 @@ public RHConfProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<ResourceHistoryConfTO> iterator(final long first, final long count) {\n-            final List<ResourceHistoryConfTO> configurations = restClient.list(entityKey);\n+            final List<ResourceHistoryConfTO> configurations = ResourceHistoryRestClient.list(entityKey);\n \n             Collections.sort(configurations, comparator);\n             return configurations.iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list(entityKey).size();\n+            return ResourceHistoryRestClient.list(entityKey).size();\n         }\n \n         @Override"},{"sha":"23baedd91dfa0b8cd060bc074f2f3a3ce5487bab","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -45,10 +45,6 @@ public class VirSchemaDetails extends AbstractSchemaDetailsPanel {\n \n     private static final long serialVersionUID = 5979623248182851337L;\n \n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n-    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n     private final Map<String, String> anyTypes = new HashMap<>();\n \n     private final AjaxDropDownChoicePanel<String> anyType;\n@@ -65,7 +61,7 @@ public VirSchemaDetails(final String id, final VirSchemaTO schemaTO) {\n         final AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\n                 \"resource\", getString(\"resource\"), new PropertyModel<String>(schemaTO, \"resource\"), false).\n                 setNullValid(false);\n-        resource.setChoices(resourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+        resource.setChoices(ResourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n         resource.setOutputMarkupId(true);\n         resource.addRequiredLabel();\n         if (resource.getModelObject() != null) {\n@@ -132,7 +128,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     private String getAdminRealm(final String connectorKey) {\n         String adminRealm = null;\n         try {\n-            adminRealm = connectorRestClient.read(connectorKey).getAdminRealm();\n+            adminRealm = ConnectorRestClient.read(connectorKey).getAdminRealm();\n         } catch (Exception e) {\n             LOG.error(\"Could not read Admin Realm for External Resource {}\", selectedResource.getKey());\n         }\n@@ -143,7 +139,7 @@ private String getAdminRealm(final String connectorKey) {\n     private void populateAnyTypes(final String resourceKey) {\n         anyTypes.clear();\n         if (resourceKey != null) {\n-            ResourceTO resource = resourceRestClient.read(resourceKey);\n+            ResourceTO resource = ResourceRestClient.read(resourceKey);\n             String adminRealm = getAdminRealm(resource.getConnector());\n \n             if (SyncopeConsoleSession.get().owns(IdMEntitlement.RESOURCE_READ, adminRealm)) {\n@@ -160,7 +156,7 @@ private List<String> getExtAttrNames() {\n         connInstanceTO.getConf().addAll(selectedResource.getConfOverride());\n \n         Optional<ConnIdObjectClassTO> connIdObjectClass =\n-                connectorRestClient.buildObjectClassInfo(connInstanceTO, false).stream().\n+                ConnectorRestClient.buildObjectClassInfo(connInstanceTO, false).stream().\n                         filter(object -> object.getType().equals(anyTypes.get(anyType.getModelObject()))).\n                         findAny();\n "},{"sha":"2ebb777887721a97c63118f0a85fe54a37705680","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -69,12 +69,6 @@ public class ProvisioningPolicyModalPanel extends AbstractModalPanel<Provisionin\n \n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n-    private final PolicyRestClient restClient = new PolicyRestClient();\n-\n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     private final IModel<Map<String, ImplementationTO>> implementations;\n \n     private final IModel<List<CorrelationRule>> model;\n@@ -94,7 +88,7 @@ public ProvisioningPolicyModalPanel(\n \n             @Override\n             protected Map<String, ImplementationTO> load() {\n-                return implRestClient.list(policyTO instanceof PullPolicyTO\n+                return ImplementationRestClient.list(policyTO instanceof PullPolicyTO\n                         ? IdMImplementationType.PULL_CORRELATION_RULE\n                         : IdMImplementationType.PUSH_CORRELATION_RULE).stream().\n                         collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n@@ -158,13 +152,14 @@ public void onSubmit(final AjaxRequestTarget target) {\n \n                 if (rule.getImpl().getEngine() == ImplementationEngine.JAVA && rule.getDefaultRuleConf() != null) {\n                     try {\n-                        implRestClient.update(rule.getImpl());\n+                        ImplementationRestClient.update(rule.getImpl());\n                     } catch (Exception e) {\n                         throw new RuntimeException(e);\n                     }\n                 }\n             });\n-            restClient.updatePolicy(getItem() instanceof PullPolicyTO ? PolicyType.PULL : PolicyType.PUSH, getItem());\n+            PolicyRestClient.updatePolicy(getItem() instanceof PullPolicyTO\n+                ? PolicyType.PULL : PolicyType.PUSH, getItem());\n \n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             this.modal.close(target);\n@@ -186,7 +181,7 @@ protected class CorrelationRulePanel extends Panel {\n             AjaxDropDownChoicePanel<String> anyType = new AjaxDropDownChoicePanel<>(\n                     \"anyType\", \"anyType\", new PropertyModel<String>(correlationRule.getObject(), \"anyType\")).\n                     setNullValid(true).\n-                    setChoices(new AnyTypeRestClient().list());\n+                    setChoices(AnyTypeRestClient.list());\n             anyType.setNullValid(false);\n             anyType.setRequired(true);\n             anyType.setOutputMarkupId(true);\n@@ -322,7 +317,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         private List<String> getSchemas(final CorrelationRule rule) {\n             List<String> choices = StringUtils.isEmpty(rule.getAnyType())\n                     ? new ArrayList<>()\n-                    : schemaRestClient.getSchemas(SchemaType.PLAIN,\n+                    : SchemaRestClient.getSchemas(SchemaType.PLAIN,\n                             rule.getAnyType().equals(AnyTypeKind.USER.name())\n                             ? AnyTypeKind.USER\n                             : rule.getAnyType().equals(AnyTypeKind.GROUP.name())"},{"sha":"5940abd66130b0228afbe5b60fcc34ac54071f17","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorHistoryRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorHistoryRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorHistoryRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorHistoryRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,7 +29,7 @@ public class ConnectorHistoryRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1917949374689773018L;\n \n-    public List<ConnInstanceHistoryConfTO> list(final String key) {\n+    public static List<ConnInstanceHistoryConfTO> list(final String key) {\n         List<ConnInstanceHistoryConfTO> connHistoryConfs = List.of();\n         try {\n             connHistoryConfs = getService(ConnectorHistoryService.class).list(key);\n@@ -39,11 +39,11 @@ public List<ConnInstanceHistoryConfTO> list(final String key) {\n         return connHistoryConfs;\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(ConnectorHistoryService.class).delete(key);\n     }\n \n-    public void restore(final String key) {\n+    public static void restore(final String key) {\n         getService(ConnectorHistoryService.class).restore(key);\n     }\n }"},{"sha":"ff3f884cfd72e85257acb702e652df734a75381e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -41,7 +41,7 @@ public class ConnectorRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -6870366819966266617L;\n \n-    public List<ConnInstanceTO> getAllConnectors() {\n+    public static List<ConnInstanceTO> getAllConnectors() {\n         List<ConnInstanceTO> connectors = List.of();\n         try {\n             connectors = getService(ConnectorService.class).list(SyncopeConsoleSession.get().getLocale().toString());\n@@ -51,7 +51,7 @@ public List<ConnInstanceTO> getAllConnectors() {\n         return connectors;\n     }\n \n-    public ConnInstanceTO create(final ConnInstanceTO connectorTO) {\n+    public static ConnInstanceTO create(final ConnInstanceTO connectorTO) {\n         List<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n         connectorTO.getConf().clear();\n         connectorTO.getConf().addAll(filteredConf);\n@@ -62,7 +62,7 @@ public ConnInstanceTO create(final ConnInstanceTO connectorTO) {\n         return getObject(service, response.getLocation(), ConnInstanceTO.class);\n     }\n \n-    public List<String> getObjectClasses(final String connectorKey) {\n+    public static List<String> getObjectClasses(final String connectorKey) {\n         List<String> result = new ArrayList<>();\n         try {\n             ConnectorService service = getService(ConnectorService.class);\n@@ -78,11 +78,11 @@ public List<String> getObjectClasses(final String connectorKey) {\n         return result;\n     }\n \n-    public List<String> getExtAttrNames(\n-            final String adminRealm,\n-            final String objectClass,\n-            final String connectorKey,\n-            final Collection<ConnConfProperty> conf) {\n+    public static List<String> getExtAttrNames(\n+        final String adminRealm,\n+        final String objectClass,\n+        final String connectorKey,\n+        final Collection<ConnConfProperty> conf) {\n \n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setAdminRealm(adminRealm);\n@@ -103,7 +103,7 @@ public List<String> getExtAttrNames(\n      * @param key the id\n      * @return ConnInstanceTO\n      */\n-    public ConnInstanceTO read(final String key) {\n+    public static ConnInstanceTO read(final String key) {\n         ConnInstanceTO connectorTO = null;\n \n         try {\n@@ -116,21 +116,21 @@ public ConnInstanceTO read(final String key) {\n         return connectorTO;\n     }\n \n-    public void update(final ConnInstanceTO connectorTO) {\n+    public static void update(final ConnInstanceTO connectorTO) {\n         List<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n         connectorTO.getConf().clear();\n         connectorTO.getConf().addAll(filteredConf);\n         getService(ConnectorService.class).update(connectorTO);\n     }\n \n-    public ConnInstanceTO delete(final String key) {\n+    public static ConnInstanceTO delete(final String key) {\n         ConnInstanceTO connectorTO = getService(ConnectorService.class).\n                 read(key, SyncopeConsoleSession.get().getLocale().toString());\n         getService(ConnectorService.class).delete(key);\n         return connectorTO;\n     }\n \n-    public List<ConnBundleTO> getAllBundles() {\n+    public static List<ConnBundleTO> getAllBundles() {\n         List<ConnBundleTO> bundles = List.of();\n \n         try {\n@@ -142,7 +142,7 @@ public List<ConnBundleTO> getAllBundles() {\n         return bundles;\n     }\n \n-    private List<ConnConfProperty> filterProperties(final Collection<ConnConfProperty> properties) {\n+    private static List<ConnConfProperty> filterProperties(final Collection<ConnConfProperty> properties) {\n         List<ConnConfProperty> newProperties = new ArrayList<>();\n \n         properties.stream().map(property -> {\n@@ -161,7 +161,7 @@ private List<ConnConfProperty> filterProperties(final Collection<ConnConfPropert\n         return newProperties;\n     }\n \n-    public Pair<Boolean, String> check(final ConnInstanceTO connectorTO) {\n+    public static Pair<Boolean, String> check(final ConnInstanceTO connectorTO) {\n         ConnInstanceTO toBeChecked = new ConnInstanceTO();\n         BeanUtils.copyProperties(connectorTO, toBeChecked, new String[] { \"configuration\", \"configurationMap\" });\n         toBeChecked.getConf().addAll(filterProperties(connectorTO.getConf()));\n@@ -179,8 +179,8 @@ public Pair<Boolean, String> check(final ConnInstanceTO connectorTO) {\n         return Pair.of(check, errorMessage);\n     }\n \n-    public List<ConnIdObjectClassTO> buildObjectClassInfo(\n-            final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n+    public static List<ConnIdObjectClassTO> buildObjectClassInfo(\n+        final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n         List<ConnIdObjectClassTO> result = List.of();\n         try {\n@@ -192,7 +192,7 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n         return result;\n     }\n \n-    public void reload() {\n+    public static void reload() {\n         getService(ConnectorService.class).reload();\n     }\n }"},{"sha":"7f43da4636485bb5e50f8ef64aabbf14ea49a2b3","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ReconciliationRestClient.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReconciliationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReconciliationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReconciliationRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -28,24 +28,24 @@ public class ReconciliationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -3161863874876938094L;\n \n-    public ReconStatus status(final AnyTypeKind anyTypeKind, final String anyKey, final String resourceKey) {\n+    public static ReconStatus status(final AnyTypeKind anyTypeKind, final String anyKey, final String resourceKey) {\n         return getService(ReconciliationService.class).status(anyTypeKind, anyKey, resourceKey);\n     }\n \n-    public void push(\n-            final AnyTypeKind anyTypeKind,\n-            final String anyKey,\n-            final String resourceKey,\n-            final PushTaskTO pushTask) {\n+    public static void push(\n+        final AnyTypeKind anyTypeKind,\n+        final String anyKey,\n+        final String resourceKey,\n+        final PushTaskTO pushTask) {\n \n         getService(ReconciliationService.class).push(anyTypeKind, anyKey, resourceKey, pushTask);\n     }\n \n-    public void pull(\n-            final AnyTypeKind anyTypeKind,\n-            final String anyKey,\n-            final String resourceKey,\n-            final PullTaskTO pullTask) {\n+    public static void pull(\n+        final AnyTypeKind anyTypeKind,\n+        final String anyKey,\n+        final String resourceKey,\n+        final PullTaskTO pullTask) {\n \n         getService(ReconciliationService.class).pull(anyTypeKind, anyKey, resourceKey, pullTask);\n     }"},{"sha":"7f4aa0d55fa02a995d59cf49f6d560a517405ec4","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/RemediationRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -34,41 +34,41 @@ public class RemediationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -7033745375669316378L;\n \n-    public int countRemediations() {\n+    public static int countRemediations() {\n         return getService(RemediationService.class).\n                 list(new RemediationQuery.Builder().page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n-    public List<RemediationTO> getRemediations(final int page, final int size, final SortParam<String> sort) {\n+    public static List<RemediationTO> getRemediations(final int page, final int size, final SortParam<String> sort) {\n         return getService(RemediationService.class).\n                 list(new RemediationQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }\n \n-    public RemediationTO getRemediation(final String key) {\n+    public static RemediationTO getRemediation(final String key) {\n         return getService(RemediationService.class).read(key);\n     }\n \n-    public <C extends AnyCR, A extends AnyTO> ProvisioningResult<A> remedy(final String key, final C anyCR) {\n+    public static <C extends AnyCR, A extends AnyTO> ProvisioningResult<A> remedy(final String key, final C anyCR) {\n         Response response = getService(RemediationService.class).remedy(key, anyCR);\n         return response.readEntity(new GenericType<ProvisioningResult<A>>() {\n         });\n     }\n \n-    public <T extends AnyTO> ProvisioningResult<T> remedy(final String key, final AnyUR anyUR) {\n+    public static <T extends AnyTO> ProvisioningResult<T> remedy(final String key, final AnyUR anyUR) {\n         Response response = getService(RemediationService.class).remedy(key, anyUR);\n         return response.readEntity(new GenericType<ProvisioningResult<T>>() {\n         });\n     }\n \n-    public ProvisioningResult<? extends AnyTO> remedy(final String key, final String anyKey) {\n+    public static ProvisioningResult<? extends AnyTO> remedy(final String key, final String anyKey) {\n         Response response = getService(RemediationService.class).remedy(key, anyKey);\n         return response.readEntity(new GenericType<ProvisioningResult<? extends AnyTO>>() {\n         });\n     }\n \n-    public void delete(final String remediation) {\n+    public static void delete(final String remediation) {\n         getService(RemediationService.class).delete(remediation);\n     }\n }"},{"sha":"04399025ddf275d88e93ad68b7756bf97cc0ec00","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceHistoryRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceHistoryRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceHistoryRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceHistoryRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,7 +29,7 @@ public class ResourceHistoryRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -5722829010510310887L;\n \n-    public List<ResourceHistoryConfTO> list(final String key) {\n+    public static List<ResourceHistoryConfTO> list(final String key) {\n         List<ResourceHistoryConfTO> resHistoryConfs = List.of();\n         try {\n             resHistoryConfs = getService(ResourceHistoryService.class).list(key);\n@@ -39,11 +39,11 @@ public List<ResourceHistoryConfTO> list(final String key) {\n         return resHistoryConfs;\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(ResourceHistoryService.class).delete(key);\n     }\n \n-    public void restore(final String key) {\n+    public static void restore(final String key) {\n         getService(ResourceHistoryService.class).restore(key);\n     }\n }"},{"sha":"9f7159da854d1cb5f7d2b324f4a05251de759010","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -38,7 +38,7 @@ public class ResourceRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -6898907679835668987L;\n \n-    public Pair<Boolean, String> check(final ResourceTO resourceTO) {\n+    public static Pair<Boolean, String> check(final ResourceTO resourceTO) {\n         boolean check = false;\n         String errorMessage = null;\n         try {\n@@ -52,16 +52,16 @@ public Pair<Boolean, String> check(final ResourceTO resourceTO) {\n         return Pair.of(check, errorMessage);\n     }\n \n-    public ConnObjectTO readConnObject(final String resource, final String anyTypeKey, final String anyKey) {\n+    public static ConnObjectTO readConnObject(final String resource, final String anyTypeKey, final String anyKey) {\n         return getService(ResourceService.class).readConnObject(resource, anyTypeKey, anyKey);\n     }\n \n-    public Pair<String, List<ConnObjectTO>> listConnObjects(\n-            final String resource,\n-            final String anyTypeKey,\n-            final int size,\n-            final String pagedResultCookie,\n-            final SortParam<String> sort) {\n+    public static Pair<String, List<ConnObjectTO>> listConnObjects(\n+        final String resource,\n+        final String anyTypeKey,\n+        final int size,\n+        final String pagedResultCookie,\n+        final SortParam<String> sort) {\n \n         ConnObjectTOListQuery.Builder builder = new ConnObjectTOListQuery.Builder().\n                 pagedResultsCookie(pagedResultCookie).\n@@ -83,11 +83,11 @@ public Pair<String, List<ConnObjectTO>> listConnObjects(\n         return Pair.of(nextPageResultCookie, result);\n     }\n \n-    public ResourceTO read(final String name) {\n+    public static ResourceTO read(final String name) {\n         return getService(ResourceService.class).read(name);\n     }\n \n-    public List<ResourceTO> list() {\n+    public static List<ResourceTO> list() {\n         List<ResourceTO> resources = List.of();\n         try {\n             resources = getService(ResourceService.class).list();\n@@ -99,25 +99,25 @@ public List<ResourceTO> list() {\n         return resources;\n     }\n \n-    public ResourceTO create(final ResourceTO resourceTO) {\n+    public static ResourceTO create(final ResourceTO resourceTO) {\n         ResourceService service = getService(ResourceService.class);\n         Response response = service.create(resourceTO);\n         return getObject(service, response.getLocation(), ResourceTO.class);\n     }\n \n-    public void update(final ResourceTO resourceTO) {\n+    public static void update(final ResourceTO resourceTO) {\n         getService(ResourceService.class).update(resourceTO);\n     }\n \n-    public void delete(final String name) {\n+    public static void delete(final String name) {\n         getService(ResourceService.class).delete(name);\n     }\n \n-    public void setLatestSyncToken(final String key, final String anyType) {\n+    public static void setLatestSyncToken(final String key, final String anyType) {\n         getService(ResourceService.class).setLatestSyncToken(key, anyType);\n     }\n \n-    public void removeSyncToken(final String key, final String anyType) {\n+    public static void removeSyncToken(final String key, final String anyType) {\n         getService(ResourceService.class).removeSyncToken(key, anyType);\n     }\n }"},{"sha":"edb28b8d9811cb4696fdbb9c3a6cd49124417245","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -110,7 +110,7 @@ public AnyStatusDirectoryPanel(\n             anyTypeKind = AnyTypeKind.ANY_OBJECT;\n         }\n \n-        resources = new ResourceRestClient().list().stream().\n+        resources = ResourceRestClient.list().stream().\n                 filter(resource -> resource.getProvision(anyTO.getType()).isPresent()).\n                 map(EntityTO::getKey).collect(Collectors.toList());\n "},{"sha":"6f89e064819ec069f2d012ece65ea0108c38389e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconStatusUtils.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconStatusUtils.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -36,14 +36,12 @@ public final class ReconStatusUtils implements Serializable {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReconStatusUtils.class);\n \n-    private static final ReconciliationRestClient RECONCILIATION_REST_CLIENT = new ReconciliationRestClient();\n-\n     public static List<Pair<String, ReconStatus>> getReconStatuses(\n             final AnyTypeKind anyTypeKind, final String anyKey, final Collection<String> resources) {\n \n         return resources.stream().map(resource -> {\n             try {\n-                return Pair.of(resource, RECONCILIATION_REST_CLIENT.status(anyTypeKind, anyKey, resource));\n+                return Pair.of(resource, ReconciliationRestClient.status(anyTypeKind, anyKey, resource));\n             } catch (Exception e) {\n                 LOG.warn(\"Unexpected error for {} {} on {}\", anyTypeKind, anyKey, resource, e);\n                 return null;"},{"sha":"9d5089127f7845d0ce5a6073ec73db638ce4f4eb","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -56,17 +56,13 @@ public class ReconTaskPanel extends MultilevelPanel.SecondLevel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(ReconTaskPanel.class);\n \n-    private final ReconciliationRestClient restClient = new ReconciliationRestClient();\n-\n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     private final IModel<List<String>> pullActions = new LoadableDetachableModel<List<String>>() {\n \n         private static final long serialVersionUID = 5275935387613157437L;\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n+            return ImplementationRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n@@ -77,7 +73,7 @@ protected List<String> load() {\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n+            return ImplementationRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n@@ -141,9 +137,11 @@ public ReconTaskPanel(\n             protected void onSubmit(final AjaxRequestTarget target) {\n                 try {\n                     if (taskTO instanceof PushTaskTO) {\n-                        restClient.push(anyTypeKind, anyKey, resource, (PushTaskTO) form.getModelObject());\n+                        ReconciliationRestClient.push(anyTypeKind, anyKey, resource,\n+                            (PushTaskTO) form.getModelObject());\n                     } else {\n-                        restClient.pull(anyTypeKind, anyKey, resource, (PullTaskTO) form.getModelObject());\n+                        ReconciliationRestClient.pull(anyTypeKind, anyKey, resource,\n+                            (PullTaskTO) form.getModelObject());\n                     }\n \n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));"},{"sha":"27ca0f4666bebcf187d13110c5b2c24ea4df9eea","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -72,10 +72,6 @@ public class Topology extends BasePage {\n \n     public static final String CONNECTOR_SERVER_LOCATION_PREFIX = \"connid://\";\n \n-    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n     private final int origX = 3100;\n \n     private final int origY = 2800;\n@@ -94,7 +90,7 @@ public class Topology extends BasePage {\n \n         @Override\n         protected List<ResourceTO> load() {\n-            return resourceRestClient.list();\n+            return ResourceRestClient.list();\n         }\n     };\n \n@@ -107,7 +103,7 @@ protected List<ResourceTO> load() {\n         protected Map<String, List<ConnInstanceTO>> load() {\n             final Map<String, List<ConnInstanceTO>> res = new HashMap<>();\n \n-            connectorRestClient.getAllConnectors().forEach(conn -> {\n+            ConnectorRestClient.getAllConnectors().forEach(conn -> {\n                 final List<ConnInstanceTO> conns;\n                 if (res.containsKey(conn.getLocation())) {\n                     conns = res.get(conn.getLocation());\n@@ -526,7 +522,7 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n         newlyCreatedContainer.add(newlyCreated);\n     }\n \n-    private List<String> createConnections(final Map<Serializable, Map<Serializable, TopologyNode>> targets) {\n+    private static List<String> createConnections(final Map<Serializable, Map<Serializable, TopologyNode>> targets) {\n         List<String> list = new ArrayList<>();\n \n         targets.forEach((key, value) -> value.forEach((label, node) -> list.add("},{"sha":"b5907de236b7e77b85b5ea64f5729c1027074917","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyNodePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyNodePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -78,7 +78,7 @@ public TopologyNodePanel(final String id, final TopologyNode node) {\n                 break;\n             case CONNECTOR:\n                 title = (StringUtils.isBlank(node.getConnectionDisplayName())\n-                        ? \"\" : node.getConnectionDisplayName() + \":\") + node.getDisplayName();\n+                        ? \"\" : node.getConnectionDisplayName() + ':') + node.getDisplayName();\n                 add(new AttributeAppender(\"class\", \"topology_conn\", \" \"));\n                 break;\n             default:\n@@ -121,7 +121,7 @@ public void onEvent(final IEvent<?> event) {\n             final AjaxRequestTarget target = updateEvent.getTarget();\n \n             if (node.getKind() == Kind.CONNECTOR && key.equalsIgnoreCase(node.getKey())) {\n-                ConnInstanceTO conn = new ConnectorRestClient().read(key);\n+                ConnInstanceTO conn = ConnectorRestClient.read(key);\n \n                 String displayName =\n                         // [SYNCOPE-1233]"},{"sha":"6732c060a3212d1602df8ec683291bbc8e11b667","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -70,10 +70,6 @@ public class TopologyTogglePanel extends TogglePanel<Serializable> {\n \n     private static final long serialVersionUID = -2025535531121434056L;\n \n-    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n     private final WebMarkupContainer container;\n \n     protected final BaseModal<Serializable> propTaskModal;\n@@ -187,7 +183,7 @@ private Fragment getSyncopeFragment(final PageReference pageRef) {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n-                    connectorRestClient.reload();\n+                    ConnectorRestClient.reload();\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                 } catch (Exception e) {\n                     LOG.error(\"While reloading all connectors\", e);\n@@ -266,7 +262,7 @@ private Fragment getConnectorFragment(final TopologyNode node, final PageReferen\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n-                    connectorRestClient.delete(String.class.cast(node.getKey()));\n+                    ConnectorRestClient.delete(String.class.cast(node.getKey()));\n                     target.appendJavaScript(String.format(\"jsPlumb.remove('%s');\", node.getKey()));\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     toggle(target, false);\n@@ -316,7 +312,7 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                ConnInstanceTO connInstance = connectorRestClient.read(String.class.cast(node.getKey()));\n+                ConnInstanceTO connInstance = ConnectorRestClient.read(String.class.cast(node.getKey()));\n \n                 final IModel<ConnInstanceTO> model = new CompoundPropertyModel<>(connInstance);\n                 modal.setFormModel(model);\n@@ -349,7 +345,7 @@ public String getAjaxIndicatorMarkupId() {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 String connKey = String.class.cast(node.getKey());\n-                ConnInstanceTO connInstance = connectorRestClient.read(connKey);\n+                ConnInstanceTO connInstance = ConnectorRestClient.read(connKey);\n \n                 target.add(historyModal.setContent(\n                         new HistoryConfList<>(historyModal, connKey, pageRef, connInstance)));\n@@ -382,7 +378,7 @@ private Fragment getResourceFragment(final TopologyNode node, final PageReferenc\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n-                    resourceRestClient.delete(node.getKey());\n+                    ResourceRestClient.delete(node.getKey());\n                     target.appendJavaScript(String.format(\"jsPlumb.remove('%s');\", node.getKey()));\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     toggle(target, false);\n@@ -403,8 +399,8 @@ public void onClick(final AjaxRequestTarget target) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                ResourceTO resource = resourceRestClient.read(node.getKey());\n-                ConnInstanceTO connInstance = connectorRestClient.read(resource.getConnector());\n+                ResourceTO resource = ResourceRestClient.read(node.getKey());\n+                ConnInstanceTO connInstance = ConnectorRestClient.read(resource.getConnector());\n \n                 IModel<ResourceTO> model = new CompoundPropertyModel<>(resource);\n                 modal.setFormModel(model);\n@@ -435,7 +431,7 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                ResourceTO modelObject = resourceRestClient.read(node.getKey());\n+                ResourceTO modelObject = ResourceRestClient.read(node.getKey());\n                 target.add(propTaskModal.setContent(\n                         new ResourceStatusModal(propTaskModal, pageRef, modelObject)));\n                 propTaskModal.header(\n@@ -458,8 +454,8 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                ResourceTO resource = resourceRestClient.read(node.getKey());\n-                ConnInstanceTO connInstance = connectorRestClient.read(resource.getConnector());\n+                ResourceTO resource = ResourceRestClient.read(node.getKey());\n+                ConnInstanceTO connInstance = ConnectorRestClient.read(resource.getConnector());\n \n                 if (SyncopeConsoleSession.get().\n                         owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())) {\n@@ -494,7 +490,7 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                ResourceTO resource = resourceRestClient.read(node.getKey());\n+                ResourceTO resource = ResourceRestClient.read(node.getKey());\n \n                 target.add(propTaskModal.setContent(new ConnObjects(resource, pageRef)));\n                 propTaskModal.header(new StringResourceModel(\"resource.explore.list\", Model.of(node)));\n@@ -580,7 +576,7 @@ public String getAjaxIndicatorMarkupId() {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 String resourceKey = String.class.cast(node.getKey());\n-                final ResourceTO modelObject = resourceRestClient.read(String.class.cast(node.getKey()));\n+                final ResourceTO modelObject = ResourceRestClient.read(String.class.cast(node.getKey()));\n \n                 target.add(historyModal.setContent(\n                         new HistoryConfList<>(historyModal, resourceKey, pageRef, modelObject)));\n@@ -608,7 +604,7 @@ public String getAjaxIndicatorMarkupId() {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n-                    ResourceTO resource = resourceRestClient.read(node.getKey());\n+                    ResourceTO resource = ResourceRestClient.read(node.getKey());\n                     resource.setKey(\"Copy of \" + resource.getKey());\n                     // reset some resource objects keys\n                     if (resource.getOrgUnit() != null) {\n@@ -627,7 +623,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         }\n                         provision.getVirSchemas().clear();\n                     }\n-                    resourceRestClient.create(resource);\n+                    ResourceRestClient.create(resource);\n \n                     // refresh Topology\n                     send(pageRef.getPage(), Broadcast.DEPTH, new AbstractResourceWizardBuilder.CreateEvent("},{"sha":"5b3f99a3ce8c4444883f13b190ec1b261611b4b4","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyWebSocketBehavior.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyWebSocketBehavior.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -73,10 +73,6 @@ public class TopologyWebSocketBehavior extends WebSocketBehavior {\n \n     private final Set<String> runningConnCheck = Collections.synchronizedSet(new HashSet<>());\n \n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n-    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n     public TopologyWebSocketBehavior() {\n         // Handling with timeout as per SYNCOPE-1379\n         try {\n@@ -290,9 +286,9 @@ public String call() throws Exception {\n             ThreadContext.setSession(session);\n \n             try {\n-                final ConnInstanceTO connector = connectorRestClient.read(key);\n+                final ConnInstanceTO connector = ConnectorRestClient.read(key);\n                 return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                        connectorRestClient.check(connector).getLeft()\n+                        ConnectorRestClient.check(connector).getLeft()\n                         ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n             } catch (Exception e) {\n                 LOG.warn(\"Error checking connection for {}\", key, e);\n@@ -316,9 +312,9 @@ public String call() throws Exception {\n             ThreadContext.setSession(session);\n \n             try {\n-                final ResourceTO resource = resourceRestClient.read(key);\n+                final ResourceTO resource = ResourceRestClient.read(key);\n                 return String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                        resourceRestClient.check(resource).getLeft()\n+                        ResourceRestClient.check(resource).getLeft()\n                         ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n             } catch (Exception e) {\n                 LOG.warn(\"Error checking connection for {}\", key, e);"},{"sha":"bafd73d2a619adebb5813a3e635651d9df1d98a7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/list/ConnConfPropertyListView.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -141,11 +141,11 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void setNewFieldModel(final FieldPanel field, final List<Object> values) {\n+    private static void setNewFieldModel(final FieldPanel field, final List<Object> values) {\n         field.setNewModel(values);\n     }\n \n-    private FormComponent<?> addCheckboxToggle(final ConnConfProperty property) {\n+    private static FormComponent<?> addCheckboxToggle(final ConnConfProperty property) {\n         final BootstrapToggleConfig config = new BootstrapToggleConfig().\n                 withOnStyle(BootstrapToggleConfig.Style.success).\n                 withOffStyle(BootstrapToggleConfig.Style.danger)."},{"sha":"c471e990d3cb17d31536337e650de96efe1f9bb1","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/widgets/RemediationsWidget.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FRemediationsWidget.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,8 +46,6 @@ public class RemediationsWidget extends ExtAlertWidget<RemediationTO> {\n \n     private static final long serialVersionUID = 1817429725840355068L;\n \n-    private final RemediationRestClient restClient = new RemediationRestClient();\n-\n     private final List<RemediationTO> lastRemediations = new ArrayList<>();\n \n     public RemediationsWidget(final String id, final PageReference pageRef) {\n@@ -88,7 +86,7 @@ public final void refreshLatestAlerts(final AjaxRequestTarget target) {\n     protected int getLatestAlertsSize() {\n         return SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_LIST)\n                 && SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_READ)\n-                ? restClient.countRemediations()\n+                ? RemediationRestClient.countRemediations()\n                 : 0;\n     }\n \n@@ -104,7 +102,8 @@ public List<RemediationTO> getObject() {\n                 if (SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_LIST)\n                         && SyncopeConsoleSession.get().owns(IdMEntitlement.REMEDIATION_READ)) {\n \n-                    updatedRemediations = restClient.getRemediations(1, MAX_SIZE, new SortParam<>(\"instant\", true));\n+                    updatedRemediations = RemediationRestClient.getRemediations(1,\n+                        MAX_SIZE, new SortParam<>(\"instant\", true));\n                 } else {\n                     updatedRemediations = List.of();\n                 }"},{"sha":"d54982f70362e667e3cde67415c7bea99f6cb273","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/AbstractMappingPanel.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FAbstractMappingPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n-import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n@@ -55,11 +54,6 @@ public abstract class AbstractMappingPanel extends Panel {\n \n     private static final long serialVersionUID = -8295587900937040104L;\n \n-    /**\n-     * Any type rest client.\n-     */\n-    protected final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n     /**\n      * Any type class rest client.\n      */\n@@ -395,7 +389,7 @@ protected void onBeforeRender() {\n      * @param connObjectKey connObjectKey checkbox.\n      * @param password password checkbox.\n      */\n-    private void setConnObjectKey(final AjaxCheckBoxPanel connObjectKey, final AjaxCheckBoxPanel password) {\n+    private static void setConnObjectKey(final AjaxCheckBoxPanel connObjectKey, final AjaxCheckBoxPanel password) {\n         if (password.getModelObject()) {\n             connObjectKey.setReadOnly(true);\n             connObjectKey.setModelObject(false);"},{"sha":"659296f400752c1bdcceeb83bb9390f8fcc50962","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -55,7 +55,7 @@ public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<Con\n \n             @Override\n             protected List<String> load() {\n-                return new RealmRestClient().list().stream().\n+                return RealmRestClient.list().stream().\n                         filter(realm -> authRealms.stream().\n                         anyMatch(authRealm -> realm.getFullPath().startsWith(authRealm))).\n                         map(RealmTO::getFullPath).\n@@ -160,7 +160,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\")));\n     }\n \n-    private List<String> getVersions(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n+    private static List<String> getVersions(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n         return bundles.stream().filter(object\n                 -> object.getLocation().equals(connInstanceTO.getLocation())\n                 && object.getBundleName().equals(connInstanceTO.getBundleName()))."},{"sha":"7a5ae9c36dc0f5f1568648456433ff5fcbbb06f7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorWizardBuilder.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -41,13 +41,11 @@ public class ConnectorWizardBuilder extends AbstractResourceWizardBuilder<ConnIn\n \n     private static final long serialVersionUID = -2025535531121434050L;\n \n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n     private final List<ConnBundleTO> bundles;\n \n     public ConnectorWizardBuilder(final ConnInstanceTO defaultItem, final PageReference pageRef) {\n         super(defaultItem, pageRef);\n-        this.bundles = connectorRestClient.getAllBundles().stream().\n+        this.bundles = ConnectorRestClient.getAllBundles().stream().\n                 filter(object -> object.getLocation().equals(defaultItem.getLocation())).collect(Collectors.toList());\n     }\n \n@@ -68,7 +66,7 @@ protected Pair<Boolean, String> check(final AjaxRequestTarget target) {\n                 connInstanceTO.setBundleName(bundleTO.getBundleName());\n                 connInstanceTO.setVersion(bundleTO.getVersion());\n \n-                return connectorRestClient.check(connInstanceTO);\n+                return ConnectorRestClient.check(connInstanceTO);\n             }\n \n             @Override\n@@ -103,9 +101,9 @@ protected Serializable onApplyInternal(final Serializable modelObject) {\n \n         ConnInstanceTO res;\n         if (mode == AjaxWizard.Mode.CREATE) {\n-            res = connectorRestClient.create(connInstanceTO);\n+            res = ConnectorRestClient.create(connInstanceTO);\n         } else {\n-            connectorRestClient.update(connInstanceTO);\n+            ConnectorRestClient.update(connInstanceTO);\n             res = connInstanceTO;\n         }\n "},{"sha":"49274aa4cb36df5e83edb582028eda01c2b2b229","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ItemTransformersTogglePanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FItemTransformersTogglePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,8 +42,6 @@ public class ItemTransformersTogglePanel extends TogglePanel<Serializable> {\n \n     private static final long serialVersionUID = -3195479265440591519L;\n \n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     private ItemTO item;\n \n     public ItemTransformersTogglePanel(final WebMarkupContainer container, final PageReference pageRef) {\n@@ -65,7 +63,7 @@ protected List<String> load() {\n         Form<?> form = new Form<>(\"form\");\n         addInnerObject(form);\n \n-        List<String> choices = implRestClient.list(IdMImplementationType.ITEM_TRANSFORMER).stream().\n+        List<String> choices = ImplementationRestClient.list(IdMImplementationType.ITEM_TRANSFORMER).stream().\n                 map(EntityTO::getKey).sorted().collect(Collectors.toList());\n \n         form.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setRenderer(new IChoiceRenderer<String>() {"},{"sha":"41afe27c8322170aa8d3db87786c2805d09db22b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -49,8 +49,6 @@ public class ProvisionWizardBuilder extends BaseAjaxWizardBuilder<ResourceProvis\n \n     private static final long serialVersionUID = 3739399543837732640L;\n \n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n     private final ResourceTO resourceTO;\n \n     private final String adminRealm;\n@@ -75,7 +73,7 @@ private final class ObjectType extends WizardStep {\n             clazz = new AjaxTextFieldPanel(\n                     \"clazz\", \"clazz\", new PropertyModel<>(resourceProvision, \"objectClass\"));\n             clazz.setRequired(true);\n-            clazz.setChoices(connectorRestClient.getObjectClasses(resourceTO.getConnector()));\n+            clazz.setChoices(ConnectorRestClient.getObjectClasses(resourceTO.getConnector()));\n             container.add(clazz);\n \n             AjaxCheckBoxPanel ignoreCaseMatch = new AjaxCheckBoxPanel("},{"sha":"55bc92a25f187de57f239fdc0a0b8846fd3b545a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceConnConfPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -33,8 +33,6 @@ public abstract class ResourceConnConfPanel extends AbstractConnConfPanel<Resour\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    private final ConnectorRestClient restClient = new ConnectorRestClient();\n-\n     private final boolean createFlag;\n \n     public ResourceConnConfPanel(final ResourceTO resourceTO, final boolean createFlag) {\n@@ -91,7 +89,7 @@ protected final List<ConnConfProperty> getConnProperties(final ResourceTO resour\n         List<ConnConfProperty> props = new ArrayList<>();\n \n         if (resourceTO.getConnector() != null) {\n-            restClient.read(resourceTO.getConnector()).getConf().stream().\n+            ConnectorRestClient.read(resourceTO.getConnector()).getConf().stream().\n                     filter(ConnConfProperty::isOverridable).\n                     forEachOrdered(props::add);\n         }"},{"sha":"d4f08c2f409408734395eed7f4b960c7315f285c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -44,15 +44,13 @@ public class ResourceDetailsPanel extends WizardStep {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     private final IModel<List<String>> propagationActions = new LoadableDetachableModel<List<String>>() {\n \n         private static final long serialVersionUID = 5275935387613157437L;\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(IdMImplementationType.PROPAGATION_ACTIONS).stream().\n+            return ImplementationRestClient.list(IdMImplementationType.PROPAGATION_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };"},{"sha":"444b1b50e342b011ed48ad43140dd639127dc0d0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceMappingPanel.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceMappingPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -24,6 +24,8 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -91,7 +93,7 @@ public ResourceMappingPanel(\n \n             @Override\n             protected List<String> load() {\n-                return new ConnectorRestClient().getExtAttrNames(\n+                return ConnectorRestClient.getExtAttrNames(\n                         adminRealm,\n                         provision.getObjectClass(),\n                         resourceTO.getConnector(),\n@@ -129,22 +131,22 @@ protected void setAttrNames(final AjaxTextFieldPanel toBeUpdated) {\n         } else {\n             AnyTypeTO anyType = null;\n             try {\n-                anyType = anyTypeRestClient.read(provision.getAnyType());\n+                anyType = AnyTypeRestClient.read(provision.getAnyType());\n             } catch (Exception e) {\n                 LOG.error(\"Could not read AnyType {}\", provision.getAnyType(), e);\n             }\n \n             List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n             if (anyType != null) {\n                 try {\n-                    anyTypeClassTOs.addAll(anyTypeClassRestClient.list(anyType.getClasses()));\n+                    anyTypeClassTOs.addAll(AnyTypeClassRestClient.list(anyType.getClasses()));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not read AnyType classes for {}\", anyType.getClasses(), e);\n                 }\n             }\n             provision.getAuxClasses().forEach(auxClass -> {\n                 try {\n-                    anyTypeClassTOs.add(anyTypeClassRestClient.read(auxClass));\n+                    anyTypeClassTOs.add(AnyTypeClassRestClient.read(auxClass));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not read AnyTypeClass for {}\", auxClass, e);\n                 }"},{"sha":"f3ce952cd68e316699d9a7c0361b4fcae56f2ab9","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -56,8 +56,6 @@ public class ResourceProvisionPanel extends AbstractModalPanel<Serializable> {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n     private final ResourceTO resourceTO;\n \n     private final List<ResourceProvision> provisions;\n@@ -174,7 +172,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ResourceProvision provision) {\n                         try {\n-                            resourceRestClient.setLatestSyncToken(resourceTO.getKey(), provision.getAnyType());\n+                            ResourceRestClient.setLatestSyncToken(resourceTO.getKey(), provision.getAnyType());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (Exception e) {\n                             LOG.error(\"While setting latest sync token for {}/{}\",\n@@ -192,7 +190,7 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                     @Override\n                     public void onClick(final AjaxRequestTarget target, final ResourceProvision provision) {\n                         try {\n-                            resourceRestClient.removeSyncToken(resourceTO.getKey(), provision.getAnyType());\n+                            ResourceRestClient.removeSyncToken(resourceTO.getKey(), provision.getAnyType());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         } catch (Exception e) {\n                             LOG.error(\"While removing sync token for {}/{}\",\n@@ -291,7 +289,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                         }\n                     });\n \n-            resourceRestClient.update(resourceTO);\n+            ResourceRestClient.update(resourceTO);\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             modal.close(target);\n         } catch (Exception e) {\n@@ -314,7 +312,7 @@ private LoadableDetachableModel<List<String>> getAnyTypes() {\n \n             @Override\n             protected List<String> load() {\n-                List<String> anyTypes = new AnyTypeRestClient().list().stream().\n+                List<String> anyTypes = AnyTypeRestClient.list().stream().\n                         filter(anyType -> resourceTO.getProvision(anyType).isEmpty()).\n                         collect(Collectors.toList());\n                 if (resourceTO.getOrgUnit() == null) {"},{"sha":"92420b9d12988858ad832a2d08e8c146c586fbf0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -39,15 +39,13 @@ public class ResourceSecurityPanel extends WizardStep {\n \n     private static final long serialVersionUID = -7982691107029848579L;\n \n-    private final PolicyRestClient policyRestClient = new PolicyRestClient();\n-\n     private final IModel<Map<String, String>> passwordPolicies = new LoadableDetachableModel<Map<String, String>>() {\n \n         private static final long serialVersionUID = 5275935387613157437L;\n \n         @Override\n         protected Map<String, String> load() {\n-            return policyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n+            return PolicyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -58,7 +56,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return policyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n+            return PolicyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -69,7 +67,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return policyRestClient.getPolicies(PolicyType.PULL).stream().\n+            return PolicyRestClient.getPolicies(PolicyType.PULL).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -80,7 +78,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return policyRestClient.getPolicies(PolicyType.PUSH).stream().\n+            return PolicyRestClient.getPolicies(PolicyType.PUSH).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };"},{"sha":"d8c91982a985bde4d67279508435f75af6872f59","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceWizardBuilder.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -37,10 +37,6 @@ public class ResourceWizardBuilder extends AbstractResourceWizardBuilder<Resourc\n \n     private static final long serialVersionUID = 1734415311027284221L;\n \n-    private final ResourceRestClient resourceRestClient = new ResourceRestClient();\n-\n-    private final ConnectorRestClient connectorRestClient = new ConnectorRestClient();\n-\n     private boolean createFlag;\n \n     public ResourceWizardBuilder(final ResourceTO resourceTO, final PageReference pageRef) {\n@@ -63,7 +59,7 @@ protected WizardModel buildModelSteps(final Serializable modelObject, final Wiza\n \n             @Override\n             protected Pair<Boolean, String> check(final AjaxRequestTarget target) {\n-                return resourceRestClient.check(modelObject);\n+                return ResourceRestClient.check(modelObject);\n             }\n \n             @Override\n@@ -73,7 +69,7 @@ protected void onComponentTag(final ComponentTag tag) {\n \n         });\n         wizardModel.add(new ResourceConnCapabilitiesPanel(\n-                resourceTO, connectorRestClient.read(resourceTO.getConnector()).getCapabilities()));\n+                resourceTO, ConnectorRestClient.read(resourceTO.getConnector()).getCapabilities()));\n \n         wizardModel.add(new ResourceSecurityPanel(resourceTO));\n         return wizardModel;\n@@ -83,9 +79,9 @@ protected void onComponentTag(final ComponentTag tag) {\n     protected ResourceTO onApplyInternal(final Serializable modelObject) {\n         ResourceTO resourceTO = ResourceTO.class.cast(modelObject);\n         if (createFlag) {\n-            resourceTO = resourceRestClient.create(resourceTO);\n+            resourceTO = ResourceRestClient.create(resourceTO);\n         } else {\n-            resourceRestClient.update(resourceTO);\n+            ResourceRestClient.update(resourceTO);\n         }\n         return resourceTO;\n     }"},{"sha":"7b14cfc193adf0b33ff6eeda039a4e28c9248827","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/SyncopeUIRequestCycleListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FSyncopeUIRequestCycleListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FSyncopeUIRequestCycleListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FSyncopeUIRequestCycleListener.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -48,7 +48,7 @@ public abstract class SyncopeUIRequestCycleListener implements IRequestCycleList\n \n     private static final String REST = \"Error while contacting Syncope core\";\n \n-    private Throwable instanceOf(final Exception e, final Class<? extends Exception> clazz) {\n+    private static Throwable instanceOf(final Exception e, final Class<? extends Exception> clazz) {\n         return clazz.isAssignableFrom(e.getClass())\n                 ? e\n                 : e.getCause() != null && clazz.isAssignableFrom(e.getCause().getClass())"},{"sha":"40a1cd974bb8962b2fdca66a54156fbfcdf4fec8","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxPaletteConf.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPaletteConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPaletteConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPaletteConf.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -23,13 +23,15 @@\n /**\n  * To be overridden in order to change the default filter option.\n  */\n-public class AjaxPaletteConf implements Serializable {\n+public final class AjaxPaletteConf implements Serializable {\n \n     private static final long serialVersionUID = -1;\n \n     private static final String DEFAULT_FILTER = \"*\";\n \n-    public String getDefaultFilter() {\n+    private AjaxPaletteConf() {\n+    }\n+    public static String getDefaultFilter() {\n         return DEFAULT_FILTER;\n     }\n }"},{"sha":"5af8052f82873cff27943f316155595539b62385","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -213,9 +213,7 @@ public void reload(final AjaxRequestTarget target) {\n \n         private boolean filtered;\n \n-        private final AjaxPaletteConf conf = new AjaxPaletteConf();\n-\n-        private String filter = conf.getDefaultFilter();\n+        private String filter = AjaxPaletteConf.getDefaultFilter();\n \n         private String name;\n "},{"sha":"3aecf6720e68fea6a7b58a9f03778c149c1ea7e5","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/wizards/AjaxWizardBuilder.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2FAjaxWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -169,7 +169,8 @@ protected abstract Future<Pair<Serializable, Serializable>> execute(\n      * @param target ajax request target\n      * @return payload to be sent.\n      */\n-    protected Serializable getEditCustomPayloadEvent(final Serializable afterObject, final AjaxRequestTarget target) {\n+    protected static Serializable getEditCustomPayloadEvent(final Serializable afterObject,\n+                                                            final AjaxRequestTarget target) {\n         return null;\n     }\n }"},{"sha":"3eca648d9c4cb130393adcbce73969796c27c861","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -62,17 +62,17 @@ public class PreferenceManager implements Serializable {\n         COOKIE_UTILS = new CookieUtils(cookieDefaults);\n     }\n \n-    public List<Integer> getPaginatorChoices() {\n+    public static List<Integer> getPaginatorChoices() {\n         return PAGINATOR_CHOICES;\n     }\n \n-    private Map<String, String> getPrefs(final String value) {\n+    private static Map<String, String> getPrefs(final String value) {\n         Map<String, String> prefs;\n         try {\n             if (StringUtils.isNotBlank(value)) {\n                 prefs = MAPPER.readValue(value, MAP_TYPE_REF);\n             } else {\n-                throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n+                throw new Exception(\"Invalid cookie value '\" + value + '\\'');\n             }\n         } catch (Exception e) {\n             LOG.debug(\"No preferences found\", e);\n@@ -82,14 +82,14 @@ private Map<String, String> getPrefs(final String value) {\n         return prefs;\n     }\n \n-    private String setPrefs(final Map<String, String> prefs) throws IOException {\n+    private static String setPrefs(final Map<String, String> prefs) throws IOException {\n         StringWriter writer = new StringWriter();\n         MAPPER.writeValue(writer, prefs);\n \n         return writer.toString();\n     }\n \n-    public String get(final Request request, final String key) {\n+    public static String get(final Request request, final String key) {\n         String result = null;\n \n         String prefString = COOKIE_UTILS.load(COOKIE_NAME);\n@@ -101,7 +101,7 @@ public String get(final Request request, final String key) {\n         return result;\n     }\n \n-    public Integer getPaginatorRows(final Request request, final String key) {\n+    public static Integer getPaginatorRows(final Request request, final String key) {\n         Integer result = getPaginatorChoices().get(0);\n \n         String value = get(request, key);\n@@ -112,7 +112,7 @@ public Integer getPaginatorRows(final Request request, final String key) {\n         return result;\n     }\n \n-    public List<String> getList(final Request request, final String key) {\n+    public static List<String> getList(final Request request, final String key) {\n         final List<String> result = new ArrayList<>();\n \n         final String compound = get(request, key);"},{"sha":"e751a16a9ef9bfc6c60fb76a1ecdec2ee8fe652e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/chartjs/ChartJSPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fchartjs%2FChartJSPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fchartjs%2FChartJSPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fchartjs%2FChartJSPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -75,6 +75,6 @@ public String generateChart() {\n         }\n \n         return \"var \" + container.getMarkupId() + \" = WicketCharts['\" + container.getMarkupId() + \"'].\"\n-                + model.getObject().getClass().getSimpleName() + \"(\" + dataString + \", \" + optionString + \");\";\n+                + model.getObject().getClass().getSimpleName() + '(' + dataString + \", \" + optionString + \");\";\n     }\n }"},{"sha":"2ed938d037fd074139480f67e6a8587fc6535c16","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -40,8 +40,6 @@ public class IdRepoImplementationInfoProvider implements ImplementationInfoProvi\n \n     protected final ClassPathScanImplementationLookup lookup;\n \n-    protected final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     public IdRepoImplementationInfoProvider(final ClassPathScanImplementationLookup lookup) {\n         this.lookup = lookup;\n     }\n@@ -159,7 +157,7 @@ public IModel<List<String>> getTaskJobDelegates() {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n+                return ImplementationRestClient.list(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };"},{"sha":"20bb2bb334c548cb354cf03002d25c370c27e0cc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/PreviewUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreviewUtils.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -32,7 +32,7 @@ public class PreviewUtils {\n     @Autowired\n     private ClassPathScanImplementationLookup lookup;\n \n-    public AbstractBinaryPreviewer getDefaultPreviewer(final String mimeType) {\n+    public static AbstractBinaryPreviewer getDefaultPreviewer(final String mimeType) {\n         return new DefaultPreviewer(\"previewer\", mimeType);\n     }\n "},{"sha":"9904684e3584c2238c3ea6338e10fa71e9e527f3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -258,7 +258,7 @@ protected void onEventAction(final IEvent<?> event) {\n         });\n     }\n \n-    private List<String> filter(final List<EventCategory> eventCategoryTOs, final EventCategoryType type) {\n+    private static List<String> filter(final List<EventCategory> eventCategoryTOs, final EventCategoryType type) {\n         Set<String> res = new HashSet<>();\n \n         eventCategoryTOs.stream().filter(eventCategory\n@@ -270,8 +270,8 @@ private List<String> filter(final List<EventCategory> eventCategoryTOs, final Ev\n         return filtered;\n     }\n \n-    private List<String> filter(\n-            final List<EventCategory> eventCategoryTOs, final EventCategoryType type, final String category) {\n+    private static List<String> filter(\n+        final List<EventCategory> eventCategoryTOs, final EventCategoryType type, final String category) {\n \n         Set<String> res = new HashSet<>();\n "},{"sha":"8518e8650fa94a18896ddc4abac518ef461c44da","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -184,7 +184,7 @@ protected void populateItem(final ListItem<String> item) {\n         failureGroup.add(failureView);\n     }\n \n-    private List<String> getEvents(final EventCategory eventCategoryTO) {\n+    private static List<String> getEvents(final EventCategory eventCategoryTO) {\n         final List<String> res;\n \n         res = eventCategoryTO.getEvents();"},{"sha":"8decb9b905be1d676466db1ce1195189f48127d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/init/ClassPathScanImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FClassPathScanImplementationLookup.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -153,7 +153,7 @@ private static void initFieldNames(final Class<?> entityClass, final Set<String>\n      *\n      * @return basePackage for classpath scanning\n      */\n-    protected String getBasePackage() {\n+    protected static String getBasePackage() {\n         return DEFAULT_BASE_PACKAGE;\n     }\n "},{"sha":"883dc42383b36c5e0154e503bb4d5ee42cf6efee","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/ConsoleLayoutInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FConsoleLayoutInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FConsoleLayoutInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FConsoleLayoutInfo.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,6 +42,6 @@ public String getContent() {\n     }\n \n     public void setContent(final String content) {\n-        this.content = FormLayoutInfoUtils.defaultConsoleLayoutInfoIfEmpty(content, new AnyTypeRestClient().list());\n+        this.content = FormLayoutInfoUtils.defaultConsoleLayoutInfoIfEmpty(content, AnyTypeRestClient.list());\n     }\n }"},{"sha":"c34c901c278d3650478d0a620e2828c71053a2d0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/layout/FormLayoutInfoUtils.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Flayout%2FFormLayoutInfoUtils.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -43,8 +43,6 @@\n  */\n public final class FormLayoutInfoUtils {\n \n-    private static final RoleRestClient ROLE_REST_CLIENT = new RoleRestClient();\n-\n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n     public static Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObjectFormLayoutInfo>> fetch(\n@@ -54,7 +52,7 @@ public static Triple<UserFormLayoutInfo, GroupFormLayoutInfo, Map<String, AnyObj\n         try {\n             JsonNode tree = null;\n             for (int i = 0; i < ownedRoles.size() && tree == null; i++) {\n-                String consoleLayoutInfo = ROLE_REST_CLIENT.readConsoleLayoutInfo(ownedRoles.get(i));\n+                String consoleLayoutInfo = RoleRestClient.readConsoleLayoutInfo(ownedRoles.get(i));\n                 if (StringUtils.isNotBlank(consoleLayoutInfo)) {\n                     tree = MAPPER.readTree(consoleLayoutInfo);\n                 }"},{"sha":"1d975267a9e18f5a32e043b7c41f0d15f847881e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationDirectoryPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -111,7 +111,8 @@ public ActionsPanel<NotificationTO> getActions(final IModel<NotificationTO> mode\n             public void onClick(final AjaxRequestTarget target, final NotificationTO ignore) {\n                 send(NotificationDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                new NotificationWrapper(restClient.read(model.getObject().getKey())), target));\n+                                new NotificationWrapper(\n+                                    NotificationRestClient.read(model.getObject().getKey())), target));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.NOTIFICATION_UPDATE);\n \n@@ -136,7 +137,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTO ignore)\n             @Override\n             public void onClick(final AjaxRequestTarget target, final NotificationTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    NotificationRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -181,14 +182,14 @@ public NotificationProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<NotificationTO> iterator(final long first, final long count) {\n-            List<NotificationTO> list = restClient.list();\n+            List<NotificationTO> list = NotificationRestClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return NotificationRestClient.list().size();\n         }\n \n         @Override"},{"sha":"3c86a17fa852cca1a21f206d6a5711e8cf3ec720","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":10,"deletions":18,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -77,14 +77,6 @@ public class NotificationWizardBuilder extends BaseAjaxWizardBuilder<Notificatio\n \n     private final NotificationRestClient restClient = new NotificationRestClient();\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n-    private final LoggerRestClient loggerRestClient = new LoggerRestClient();\n-\n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     /**\n      * Construct.\n      *\n@@ -102,9 +94,9 @@ protected Serializable onApplyInternal(final NotificationWrapper modelObject) {\n \n         final boolean createFlag = modelObject.getInnerObject().getKey() == null;\n         if (createFlag) {\n-            restClient.create(modelObject.getInnerObject());\n+            NotificationRestClient.create(modelObject.getInnerObject());\n         } else {\n-            restClient.update(modelObject.getInnerObject());\n+            NotificationRestClient.update(modelObject.getInnerObject());\n         }\n \n         return null;\n@@ -173,7 +165,7 @@ public Events(final NotificationWrapper modelObject) {\n \n             add(new EventCategoryPanel(\n                     \"eventSelection\",\n-                    loggerRestClient.listEvents(),\n+                    LoggerRestClient.listEvents(),\n                     new PropertyModel<List<String>>(modelObject.getInnerObject(), \"events\")) {\n \n                 private static final long serialVersionUID = 6429053774964787735L;\n@@ -216,7 +208,7 @@ public void setObject(final String object) {\n                         }\n \n                     });\n-            type.setChoices(new AnyTypeRestClient().list());\n+            type.setChoices(AnyTypeRestClient.list());\n             type.addRequiredLabel();\n             add(type);\n \n@@ -341,7 +333,7 @@ public class Recipients extends WizardStep {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(IdRepoImplementationType.RECIPIENTS_PROVIDER).stream().\n+                return ImplementationRestClient.list(IdRepoImplementationType.RECIPIENTS_PROVIDER).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n@@ -391,10 +383,10 @@ public Recipients(final NotificationWrapper modelObject) {\n         }\n     }\n \n-    private List<String> getSchemas() {\n+    private static List<String> getSchemas() {\n         AnyTypeTO type = null;\n         try {\n-            type = anyTypeRestClient.read(AnyTypeKind.USER.name());\n+            type = AnyTypeRestClient.read(AnyTypeKind.USER.name());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While reading all any types\", e);\n         }\n@@ -405,11 +397,11 @@ private List<String> getSchemas() {\n         List<String> result = new ArrayList<>();\n         result.add(\"username\");\n \n-        result.addAll(schemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, null, anyTypeClasses).\n+        result.addAll(SchemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-        result.addAll(schemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, null, anyTypeClasses).\n+        result.addAll(SchemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-        result.addAll(schemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, null, anyTypeClasses).\n+        result.addAll(SchemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, null, anyTypeClasses).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n \n         Collections.sort(result);"},{"sha":"71c54460a3526c8c7cd0175527eff1935b9b7a3b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -45,9 +45,7 @@ public Audit(final PageParameters parameters) {\n \n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n \n-        final LoggerRestClient loggerRestClient = new LoggerRestClient();\n-\n-        List<String> events = loggerRestClient.listAudits().stream().\n+        List<String> events = LoggerRestClient.listAudits().stream().\n                 map(audit -> AuditLoggerName.buildEvent(\n                 audit.getType(),\n                 audit.getCategory(),\n@@ -64,7 +62,7 @@ public Audit(final PageParameters parameters) {\n \n         form.add(new EventCategoryPanel(\n                 \"auditPanel\",\n-                loggerRestClient.listEvents(),\n+                LoggerRestClient.listEvents(),\n                 new ListModel<>(events)) {\n \n             private static final long serialVersionUID = 6113164334533550277L;\n@@ -97,7 +95,7 @@ public void onEventAction(final IEvent<?> event) {\n                                 ? null : eventCategory.getKey().getEvents().iterator().next(),\n                                 eventCategory.getValue());\n \n-                        loggerRestClient.disableAudit(auditLoggerName);\n+                        LoggerRestClient.disableAudit(auditLoggerName);\n                     });\n \n                     eventSelectionChanged.getToBeAdded().forEach(toBeAdded -> {\n@@ -112,7 +110,7 @@ public void onEventAction(final IEvent<?> event) {\n                                 ? null : eventCategory.getKey().getEvents().iterator().next(),\n                                 eventCategory.getValue());\n \n-                        loggerRestClient.enableAudit(auditLoggerName);\n+                        LoggerRestClient.enableAudit(auditLoggerName);\n                     });\n                 }\n             }"},{"sha":"0654fb417920897cd6c8dbcbffdf058bd401bd60","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -122,7 +122,7 @@ public BasePage(final PageParameters parameters) {\n             public void onClick() {\n                 try {\n                     HttpResourceStream stream =\n-                            new HttpResourceStream(new SyncopeRestClient().exportInternalStorageContent());\n+                            new HttpResourceStream(SyncopeRestClient.exportInternalStorageContent());\n \n                     ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n                     rsrh.setFileName(stream.getFilename() == null\n@@ -525,11 +525,11 @@ public void renderHead(final IHeaderResponse response) {\n         response.render(new PriorityHeaderItem(META_IE_EDGE));\n     }\n \n-    private String getLIContainerId(final String linkId) {\n+    private static String getLIContainerId(final String linkId) {\n         return linkId + \"LI\";\n     }\n \n-    private String getULContainerId(final String linkId) {\n+    private static String getULContainerId(final String linkId) {\n         return linkId + \"UL\";\n     }\n \n@@ -539,7 +539,7 @@ private String getULContainerId(final String linkId) {\n      * @param modal window\n      * @param container container\n      */\n-    public void setWindowClosedCallback(final BaseModal<?> modal, final WebMarkupContainer container) {\n+    public static void setWindowClosedCallback(final BaseModal<?> modal, final WebMarkupContainer container) {\n         modal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n \n             private static final long serialVersionUID = 8804221891699487139L;"},{"sha":"f8e533a5e728828be7d5b57e817ca5ca23ded204","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,8 +46,6 @@ public class LogViewer extends WebPage {\n \n     private static final long serialVersionUID = -7578329899052708105L;\n \n-    private final LoggerRestClient restClient = new LoggerRestClient();\n-\n     public LogViewer() {\n         final WebMarkupContainer viewer = new WebMarkupContainer(\"viewer\");\n         viewer.setOutputMarkupId(true);\n@@ -56,7 +54,7 @@ public LogViewer() {\n         final AjaxDropDownChoicePanel<String> appenders = new AjaxDropDownChoicePanel<>(\n                 \"appenders\", \"Appender\", new Model<>(), false);\n         MetaDataRoleAuthorizationStrategy.authorize(appenders, ENABLE, IdRepoEntitlement.LOG_READ);\n-        appenders.setChoices(restClient.listMemoryAppenders());\n+        appenders.setChoices(LoggerRestClient.listMemoryAppenders());\n         viewer.add(appenders);\n \n         final WebMarkupContainer stContainer = new WebMarkupContainer(\"stContainer\");\n@@ -90,7 +88,8 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n \n                 List<LogStatement> recentLogStatements = appenders.getModelObject() == null\n                         ? new ArrayList<>()\n-                        : restClient.getLastLogStatements(appenders.getModelObject(), lastTimeInMillis.getObject());\n+                        : LoggerRestClient.getLastLogStatements(appenders.getModelObject(),\n+                    lastTimeInMillis.getObject());\n                 if (!recentLogStatements.isEmpty()) {\n                     lastTimeInMillis.setObject(recentLogStatements.get(recentLogStatements.size() - 1).getTimeMillis());\n \n@@ -126,7 +125,7 @@ protected void onPostProcessTarget(final AjaxRequestTarget target) {\n             protected void onUpdate(final AjaxRequestTarget target) {\n                 List<LogStatement> lastStatements = appenders.getModelObject() == null\n                         ? new ArrayList<>()\n-                        : restClient.getLastLogStatements(appenders.getModelObject(), 0);\n+                        : LoggerRestClient.getLastLogStatements(appenders.getModelObject(), 0);\n                 statementViewModel.setObject(lastStatements);\n                 target.add(stContainer);\n "},{"sha":"e387f18b7c46a2ce49484c9ba8fa31921af138f7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/MustChangePassword.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -30,16 +30,14 @@ public class MustChangePassword extends AbstractMustChangePassword {\n \n     private static final long serialVersionUID = 8581970794722709800L;\n \n-    protected UserSelfRestClient restClient = new UserSelfRestClient();\n-\n     public MustChangePassword(final PageParameters parameters) {\n         super(parameters);\n     }\n \n     @Override\n     protected void doSubmit(final AjaxRequestTarget target) {\n         try {\n-            restClient.changePassword(passwordField.getModelObject());\n+            UserSelfRestClient.changePassword(passwordField.getModelObject());\n \n             SyncopeConsoleSession.get().invalidate();\n "},{"sha":"189b765bc909758ca9fa5c72138375c274de5e32","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Realms.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRealms.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -52,8 +52,6 @@ public class Realms extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    private final RealmRestClient realmRestClient = new RealmRestClient();\n-\n     private final TemplatesTogglePanel templates;\n \n     private final RealmChoicePanel realmChoicePanel;\n@@ -75,7 +73,7 @@ public Realms(final PageParameters parameters) {\n             protected Serializable onApplyInternal(\n                     final TemplatableTO targetObject, final String type, final AnyTO anyTO) {\n                 targetObject.getTemplates().put(type, anyTO);\n-                new RealmRestClient().update(RealmTO.class.cast(targetObject));\n+                RealmRestClient.update(RealmTO.class.cast(targetObject));\n                 return targetObject;\n             }\n         };\n@@ -234,7 +232,7 @@ protected void onClickDelete(final AjaxRequestTarget target, final RealmTO realm\n                     if (realmTO.getKey() == null) {\n                         throw new Exception(\"Root realm cannot be deleted\");\n                     }\n-                    realmRestClient.delete(realmTO.getFullPath());\n+                    RealmRestClient.delete(realmTO.getFullPath());\n                     RealmTO parent = realmChoicePanel.moveToParentRealm(realmTO.getKey());\n                     target.add(realmChoicePanel.reloadRealmTree(target));\n "},{"sha":"d2cfba6fa027fe4ca7fd16b44e3c586ee7c380d9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -122,7 +122,7 @@ public ActionsPanel<AccessTokenTO> getActions(final IModel<AccessTokenTO> model)\n             @Override\n             public void onClick(final AjaxRequestTarget target, final AccessTokenTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    AccessTokenRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -172,14 +172,14 @@ public AccessTokenDataProvider(final int paginatorRows) {\n         @Override\n         public Iterator<AccessTokenTO> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.list(\n+            return AccessTokenRestClient.list(\n                     (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.count();\n+            return AccessTokenRestClient.count();\n         }\n \n         @Override"},{"sha":"3ad57cd698c63bdc5bf64632a07e130cfea2d5f7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -27,12 +27,12 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.client.console.PreferenceManager;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.AnyDataProvider;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.status.ConnObjectWrapper;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.AttrColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n@@ -65,8 +65,6 @@\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    protected final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     protected final List<String> pSchemaNames;\n \n     protected final List<String> dSchemaNames;\n@@ -150,18 +148,18 @@ protected List<IColumn<A, String>> getColumns() {\n         columns.add(new KeyPropertyColumn<>(\n                 new ResourceModel(Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME));\n \n-        prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type)).stream().\n+        PreferenceManager.getList(getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type)).stream().\n                 filter(name -> !Constants.KEY_FIELD_NAME.equalsIgnoreCase(name)).\n                 forEachOrdered(name -> addPropertyColumn(\n                 name,\n                 ReflectionUtils.findField(DisplayAttributesModalPanel.getTOClass(type), name),\n                 prefcolumns));\n \n-        prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type)).stream().\n+        PreferenceManager.getList(getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type)).stream().\n                 filter(pSchemaNames::contains).\n                 forEachOrdered(name -> prefcolumns.add(new AttrColumn<>(name, SchemaType.PLAIN)));\n \n-        prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type)).stream().\n+        PreferenceManager.getList(getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type)).stream().\n                 filter(dSchemaNames::contains).\n                 forEachOrdered(name -> prefcolumns.add(new AttrColumn<>(name, SchemaType.DERIVED)));\n "},{"sha":"18e40d238c087902d0a5086bb95e7ae28999f285","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -250,7 +250,7 @@ protected Panel getDirectoryPanel(final String id) {\n                 final UserTO userTO = new UserTO();\n                 userTO.setRealm(realmTO.getFullPath());\n                 panel = new UserDirectoryPanel.Builder(\n-                        anyTypeClassRestClient.list(anyTypeTO.getClasses()),\n+                        AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                         anyTypeTO.getKey(),\n                         pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n                         setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n@@ -269,7 +269,7 @@ protected Panel getDirectoryPanel(final String id) {\n                 final GroupTO groupTO = new GroupTO();\n                 groupTO.setRealm(realmTO.getFullPath());\n                 panel = new GroupDirectoryPanel.Builder(\n-                        anyTypeClassRestClient.list(anyTypeTO.getClasses()),\n+                        AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                         anyTypeTO.getKey(),\n                         pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n                         setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n@@ -291,7 +291,7 @@ protected Panel getDirectoryPanel(final String id) {\n                 anyObjectTO.setRealm(realmTO.getFullPath());\n                 anyObjectTO.setType(anyTypeTO.getKey());\n                 panel = new AnyObjectDirectoryPanel.Builder(\n-                        anyTypeClassRestClient.list(anyTypeTO.getClasses()),\n+                        AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                         anyTypeTO.getKey(),\n                         pageRef).setRealm(realm).setDynRealm(dynRealm).setFiltered(true).\n                         setFiql(fiql).setWizardInModal(true).addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate("},{"sha":"f34ce87572c7687c02b331361d5d1e0d0225e27a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassDetailsPanel.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassDetailsPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -37,13 +37,11 @@ public class AnyTypeClassDetailsPanel extends Panel {\n \n     private final AnyTypeClassTO anyTypeClassTO;\n \n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n+    private final List<String> availablePlainSchemas = SchemaRestClient.getPlainSchemaNames();\n \n-    private final List<String> availablePlainSchemas = schemaRestClient.getPlainSchemaNames();\n+    private final List<String> availableDerSchemas = SchemaRestClient.getDerSchemaNames();\n \n-    private final List<String> availableDerSchemas = schemaRestClient.getDerSchemaNames();\n-\n-    private final List<String> availableVirSchemas = schemaRestClient.getVirSchemaNames();\n+    private final List<String> availableVirSchemas = SchemaRestClient.getVirSchemaNames();\n \n     private static final List<String> LAYOUT_PARAMETERS =\n             List.of(\"admin.user.layout\", \"self.user.layout\",\n@@ -102,7 +100,7 @@ public AnyTypeClassDetailsPanel(final String id, final AnyTypeClassTO anyTypeCla\n     }\n \n     private void buildAvailableSchemas(final String key) {\n-        new AnyTypeClassRestClient().list().stream().\n+        AnyTypeClassRestClient.list().stream().\n                 filter(item -> key == null || !item.getKey().equals(key)).\n                 forEach(item -> {\n                     availablePlainSchemas.removeAll(item.getPlainSchemas());"},{"sha":"e6ce27d7313ff33bca46d7545651dd2be7544716","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeClassesPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeClassesPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -78,9 +78,9 @@ public WizardModalPanel<AnyTypeClassTO> build(\n                     public void onSubmit(final AjaxRequestTarget target) {\n                         try {\n                             if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                restClient.create(modelObject);\n+                                AnyTypeClassRestClient.create(modelObject);\n                             } else {\n-                                restClient.update(modelObject);\n+                                AnyTypeClassRestClient.update(modelObject);\n                             }\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             AnyTypeClassesPanel.this.updateResultTable(target);\n@@ -178,7 +178,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeClassTO ignore)\n             @Override\n             public void onClick(final AjaxRequestTarget target, final AnyTypeClassTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    AnyTypeClassRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (Exception e) {\n@@ -206,14 +206,14 @@ private AnyTypeClassProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<AnyTypeClassTO> iterator(final long first, final long count) {\n-            final List<AnyTypeClassTO> list = restClient.list();\n+            final List<AnyTypeClassTO> list = AnyTypeClassRestClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return AnyTypeClassRestClient.list().size();\n         }\n \n         @Override"},{"sha":"d56267310f0faf76e550f2d9185d4ee7aef49429","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -70,7 +70,7 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n                 new ListModel<>(getAvailableAnyTypeClasses())).hideLabel().setOutputMarkupId(true));\n     }\n \n-    private List<String> getAvailableAnyTypeClasses() {\n-        return new AnyTypeClassRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n+    private static List<String> getAvailableAnyTypeClasses() {\n+        return AnyTypeClassRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"7ecd93124b64f3278a22cd49a7fea525c36b55c9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeMenuItem.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeMenuItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeMenuItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeMenuItem.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -35,7 +35,7 @@ public AnyTypeMenuItem(final String label, final String href) {\n         super(\"anytype-menuitem\");\n \n         WebMarkupContainer myLink = new WebMarkupContainer(\"tabLink\");\n-        myLink.add(new AttributeModifier(\"href\", \"#\" + href));\n+        myLink.add(new AttributeModifier(\"href\", '#' + href));\n         myLink.add(new Label(\"tabLabel\", label));\n         add(myLink);\n     }"},{"sha":"241ffb27b4e7e086017ecb09536675ec6cbd792d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypesPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypesPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -76,10 +76,10 @@ public WizardModalPanel<AnyTypeTO> build(final String id, final int index, final\n                     public void onSubmit(final AjaxRequestTarget target) {\n                         try {\n                             if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                restClient.create(modelObject);\n+                                AnyTypeRestClient.create(modelObject);\n                                 SyncopeConsoleSession.get().refreshAuth(null);\n                             } else {\n-                                restClient.update(modelObject);\n+                                AnyTypeRestClient.update(modelObject);\n                             }\n \n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -176,7 +176,7 @@ public void onClick(final AjaxRequestTarget target, final AnyTypeTO ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final AnyTypeTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    AnyTypeRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().refreshAuth(null);\n \n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n@@ -206,14 +206,14 @@ private AnyTypeProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<AnyTypeTO> iterator(final long first, final long count) {\n-            final List<AnyTypeTO> list = restClient.listAnyTypes();\n+            final List<AnyTypeTO> list = AnyTypeRestClient.listAnyTypes();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return AnyTypeRestClient.list().size();\n         }\n \n         @Override"},{"sha":"5c050d644116f1a8bc118649f061452a5a159a10","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -144,8 +144,8 @@ public void populateItem(\n                     final String componentId,\n                     final IModel<ApplicationTO> rowModel) {\n \n-                item.add(new Label(componentId, \"[\" + rowModel.getObject().getPrivileges().stream().\n-                        map(EntityTO::getKey).collect(Collectors.joining(\", \")) + \"]\"));\n+                item.add(new Label(componentId, '[' + rowModel.getObject().getPrivileges().stream().\n+                        map(EntityTO::getKey).collect(Collectors.joining(\", \")) + ']'));\n             }\n         });\n \n@@ -195,7 +195,7 @@ public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore)\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ApplicationTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    ApplicationRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -236,23 +236,21 @@ protected class ApplicationDataProvider extends DirectoryDataProvider<Applicatio\n \n         private final SortableDataProviderComparator<ApplicationTO> comparator;\n \n-        private final ApplicationRestClient restClient = new ApplicationRestClient();\n-\n         public ApplicationDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n             this.comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n         public Iterator<ApplicationTO> iterator(final long first, final long count) {\n-            List<ApplicationTO> result = restClient.list();\n+            List<ApplicationTO> result = ApplicationRestClient.list();\n             Collections.sort(result, comparator);\n             return result.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return ApplicationRestClient.list().size();\n         }\n \n         @Override"},{"sha":"4e831a96a04d2cb346e5b5f72520a2425729b8bb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationModalPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationModalPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -34,8 +34,6 @@ public class ApplicationModalPanel extends AbstractModalPanel<ApplicationTO> {\n \n     private static final long serialVersionUID = 4575264480736377795L;\n \n-    private final ApplicationRestClient restClient = new ApplicationRestClient();\n-\n     private final ApplicationTO application;\n \n     private final boolean create;\n@@ -73,9 +71,9 @@ public ApplicationTO getItem() {\n     public void onSubmit(final AjaxRequestTarget target) {\n         try {\n             if (create) {\n-                restClient.create(application);\n+                ApplicationRestClient.create(application);\n             } else {\n-                restClient.update(application);\n+                ApplicationRestClient.update(application);\n             }\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             this.modal.close(target);"},{"sha":"b4a6fe208a4b5e512ae60eed6aea3674583b32e2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -186,17 +186,17 @@ protected void populateItem(final ListItem<String> item) {\n                             switch (type) {\n                                 case PLAIN:\n                                     choices.addAll(\n-                                            schemaRestClient.getSchemas(SchemaType.PLAIN, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.PLAIN, schemaAnnot.anyTypeKind()));\n                                     break;\n \n                                 case DERIVED:\n                                     choices.addAll(\n-                                            schemaRestClient.getSchemas(SchemaType.DERIVED, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.DERIVED, schemaAnnot.anyTypeKind()));\n                                     break;\n \n                                 case VIRTUAL:\n                                     choices.addAll(\n-                                            schemaRestClient.getSchemas(SchemaType.VIRTUAL, schemaAnnot.anyTypeKind()));\n+                                            SchemaRestClient.getSchemas(SchemaType.VIRTUAL, schemaAnnot.anyTypeKind()));\n                                     break;\n \n                                 default:\n@@ -231,8 +231,8 @@ protected void populateItem(final ListItem<String> item) {\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private FieldPanel buildSinglePanel(\n-            final Serializable bean, final Class<?> type, final String fieldName, final String id) {\n+    private static FieldPanel buildSinglePanel(\n+        final Serializable bean, final Class<?> type, final String fieldName, final String id) {\n         FieldPanel result = null;\n         PropertyModel model = new PropertyModel(bean, fieldName);\n         if (ClassUtils.isAssignable(Boolean.class, type)) {"},{"sha":"cbc7596fdf2f510513c8227ed11eb9f1513f8884","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ConsoleLogPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -38,19 +38,19 @@ public class ConsoleLogPanel extends AbstractLogsPanel<LoggerTO> {\n     private static final ConsoleLoggerController CONSOLE_LOGGER_CONTROLLER = new ConsoleLoggerController();\n \n     public ConsoleLogPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, CONSOLE_LOGGER_CONTROLLER.getLoggers());\n+        super(id, pageReference, ConsoleLoggerController.getLoggers());\n     }\n \n     @Override\n     protected void update(final LoggerTO loggerTO) {\n-        CONSOLE_LOGGER_CONTROLLER.setLogLevel(loggerTO.getKey(), loggerTO.getLevel());\n+        ConsoleLoggerController.setLogLevel(loggerTO.getKey(), loggerTO.getLevel());\n     }\n \n     private static class ConsoleLoggerController implements Serializable {\n \n         private static final long serialVersionUID = -1550459341476431714L;\n \n-        public List<LoggerTO> getLoggers() {\n+        public static List<LoggerTO> getLoggers() {\n             LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n             List<LoggerTO> result = new ArrayList<>();\n@@ -69,7 +69,7 @@ public List<LoggerTO> getLoggers() {\n             return result;\n         }\n \n-        public void setLogLevel(final String name, final LoggerLevel level) {\n+        public static void setLogLevel(final String name, final LoggerLevel level) {\n             final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n             final LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n                     ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)"},{"sha":"053da7ef1030b457f0c005a5c7b7ccf3373c89b8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/CoreLogPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,10 +29,8 @@ public class CoreLogPanel extends AbstractLogsPanel<LoggerTO> {\n \n     private static final long serialVersionUID = 3905038169553185171L;\n \n-    private final LoggerRestClient restClient = new LoggerRestClient();\n-\n     public CoreLogPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, new LoggerRestClient().listLogs());\n+        super(id, pageReference, LoggerRestClient.listLogs());\n \n         BookmarkablePageLink<Void> viewer = new BookmarkablePageLink<>(\"viewer\", LogViewer.class);\n         viewer.setPopupSettings(new PopupSettings().setHeight(600).setWidth(800));\n@@ -41,6 +39,6 @@ public CoreLogPanel(final String id, final PageReference pageReference) {\n \n     @Override\n     protected void update(final LoggerTO loggerTO) {\n-        restClient.setLogLevel(loggerTO);\n+        LoggerRestClient.setLogLevel(loggerTO);\n     }\n }"},{"sha":"7588971f64b4919c95011e9af8188ffc36e319ef","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DashboardOverviewPanel.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardOverviewPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -53,12 +53,10 @@ public class DashboardOverviewPanel extends Panel {\n \n     private final LoadWidget load;\n \n-    private final SyncopeRestClient restClient = new SyncopeRestClient();\n-\n     public DashboardOverviewPanel(final String id) {\n         super(id);\n \n-        NumbersInfo numbers = restClient.numbers();\n+        NumbersInfo numbers = SyncopeRestClient.numbers();\n \n         WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n@@ -98,7 +96,7 @@ public DashboardOverviewPanel(final String id) {\n                 numbers.getAny2ByRealm());\n         container.add(anyByRealm);\n \n-        load = new LoadWidget(\"load\", restClient.system());\n+        load = new LoadWidget(\"load\", SyncopeRestClient.system());\n         container.add(load);\n \n         container.add(new IndicatorAjaxTimerBehavior(Duration.seconds(60)) {\n@@ -107,7 +105,7 @@ public DashboardOverviewPanel(final String id) {\n \n             @Override\n             protected void onTimer(final AjaxRequestTarget target) {\n-                NumbersInfo numbers = restClient.numbers();\n+                NumbersInfo numbers = SyncopeRestClient.numbers();\n \n                 if (totalUsers.refresh(numbers.getTotalUsers())) {\n                     target.add(totalUsers);\n@@ -144,13 +142,13 @@ protected void onTimer(final AjaxRequestTarget target) {\n                     target.add(anyByRealm);\n                 }\n \n-                load.refresh(restClient.system());\n+                load.refresh(SyncopeRestClient.system());\n                 target.add(load);\n             }\n         });\n     }\n \n-    private Triple<Integer, String, String> buildTotalAny1OrRoles(final NumbersInfo numbers) {\n+    private static Triple<Integer, String, String> buildTotalAny1OrRoles(final NumbersInfo numbers) {\n         int number;\n         String label;\n         String icon;\n@@ -166,7 +164,7 @@ private Triple<Integer, String, String> buildTotalAny1OrRoles(final NumbersInfo\n         return Triple.of(number, label, icon);\n     }\n \n-    private Triple<Integer, String, String> buildTotalAny2OrResources(final NumbersInfo numbers) {\n+    private static Triple<Integer, String, String> buildTotalAny2OrResources(final NumbersInfo numbers) {\n         int number;\n         String label;\n         String icon;"},{"sha":"326b9e004db262fd71ab7a531bfc3fdf32895b3f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -168,7 +168,7 @@ protected DirectoryPanel(final String id, final Builder<T, W, E> builder, final\n         container.setOutputMarkupId(true);\n         addInnerObject(container);\n \n-        rows = prefMan.getPaginatorRows(getRequest(), paginatorRowsKey());\n+        rows = PreferenceManager.getPaginatorRows(getRequest(), paginatorRowsKey());\n \n         setWindowClosedReloadCallback(modal);\n         setWindowClosedReloadCallback(altDefaultModal);\n@@ -217,7 +217,7 @@ protected void initResultTable() {\n         container.add(paginatorForm);\n \n         DropDownChoice<Integer> rowsChooser = new DropDownChoice<>(\n-                \"rowsChooser\", new PropertyModel<>(this, \"rows\"), prefMan.getPaginatorChoices());\n+                \"rowsChooser\", new PropertyModel<>(this, \"rows\"), PreferenceManager.getPaginatorChoices());\n         rowsChooser.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;"},{"sha":"082221225420a5740a3a2b0f953e910e403f0b87","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DisplayAttributesModalPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDisplayAttributesModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDisplayAttributesModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDisplayAttributesModalPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -113,11 +113,11 @@ protected List<String> load() {\n         };\n \n         selectedDetails =\n-                prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type));\n+                PreferenceManager.getList(getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type));\n         selectedPlainSchemas =\n-                prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type));\n+                PreferenceManager.getList(getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type));\n         selectedDerSchemas =\n-                prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type));\n+                PreferenceManager.getList(getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type));\n \n         // remove old schemas from selected lists\n         selectedPlainSchemas.retainAll(pSchemaNames);"},{"sha":"15078914b66f2de6e5fda0d1095cfe9d79b5a597","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmDirectoryPanel.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -141,7 +141,7 @@ public void onClick(final AjaxRequestTarget target, final DynRealmTO ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final DynRealmTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    DynRealmRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -182,23 +182,21 @@ protected class DynRealmDataProvider extends DirectoryDataProvider<DynRealmTO> {\n \n         private final SortableDataProviderComparator<DynRealmTO> comparator;\n \n-        private final DynRealmRestClient restClient = new DynRealmRestClient();\n-\n         public DynRealmDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n             this.comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n         public Iterator<DynRealmTO> iterator(final long first, final long count) {\n-            List<DynRealmTO> result = restClient.list();\n+            List<DynRealmTO> result = DynRealmRestClient.list();\n             Collections.sort(result, comparator);\n             return result.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return DynRealmRestClient.list().size();\n         }\n \n         @Override"},{"sha":"6ca5ebdadd2dc2ccb084c2ae54db579334eaf780","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmModalPanel.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -50,10 +50,6 @@ public class DynRealmModalPanel extends AbstractModalPanel<DynRealmWrapper> {\n \n     private static final long serialVersionUID = -3773196441177699452L;\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n-    private final DynRealmRestClient restClient = new DynRealmRestClient();\n-\n     private final DynRealmWrapper dynRealmWrapper;\n \n     private final boolean create;\n@@ -81,7 +77,7 @@ public DynRealmModalPanel(\n \n             @Override\n             protected List<AnyTypeTO> load() {\n-                return anyTypeRestClient.listAnyTypes();\n+                return AnyTypeRestClient.listAnyTypes();\n             }\n         };\n \n@@ -134,9 +130,9 @@ public void onSubmit(final AjaxRequestTarget target) {\n         try {\n             dynRealmWrapper.fillDynamicConditions();\n             if (create) {\n-                restClient.create(dynRealmWrapper.getInnerObject());\n+                DynRealmRestClient.create(dynRealmWrapper.getInnerObject());\n             } else {\n-                restClient.update(dynRealmWrapper.getInnerObject());\n+                DynRealmRestClient.update(dynRealmWrapper.getInnerObject());\n             }\n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n             this.modal.close(target);"},{"sha":"9754ffdf0f0a010971773a6384c4c11f6613b80d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -96,10 +96,7 @@ protected GroupDirectoryPanel(final String id, final Builder builder, final bool\n             protected Serializable onApplyInternal(\n                     final GroupTO groupTO, final String type, final AjaxRequestTarget target) {\n \n-                AnyTypeRestClient typeRestClient = new AnyTypeRestClient();\n-                AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();\n-\n-                AnyTypeTO anyTypeTO = typeRestClient.read(type);\n+                AnyTypeTO anyTypeTO = AnyTypeRestClient.read(type);\n \n                 ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO, null, null, false, pageRef) {\n \n@@ -116,15 +113,15 @@ protected Panel getDirectoryPanel(final String id) {\n                                     SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue()).query();\n \n                             panel = new UserDirectoryPanel.Builder(\n-                                    classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                                AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n                                     setRealm(SyncopeConstants.ROOT_REALM).\n                                     setFiltered(true).\n                                     setFiql(query).\n                                     disableCheckBoxes().\n                                     addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n                                             new UserTO(),\n                                             anyTypeTO.getClasses(),\n-                                            FormLayoutInfoUtils.fetch(typeRestClient.list()).getLeft(),\n+                                            FormLayoutInfoUtils.fetch(AnyTypeRestClient.list()).getLeft(),\n                                             pageRef), false).\n                                     setWizardInModal(false).build(id);\n \n@@ -136,15 +133,15 @@ protected Panel getDirectoryPanel(final String id) {\n                                     SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue()).query();\n \n                             panel = new AnyObjectDirectoryPanel.Builder(\n-                                    classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                                AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n                                     setRealm(SyncopeConstants.ROOT_REALM).\n                                     setFiltered(true).\n                                     setFiql(query).\n                                     disableCheckBoxes().\n                                     addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n                                             new AnyObjectTO(),\n                                             anyTypeTO.getClasses(),\n-                                            FormLayoutInfoUtils.fetch(typeRestClient.list()).getRight().get(type),\n+                                            FormLayoutInfoUtils.fetch(AnyTypeRestClient.list()).getRight().get(type),\n                                             pageRef), false).\n                                     setWizardInModal(false).build(id);\n \n@@ -276,7 +273,7 @@ public boolean isIndicatorEnabled() {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 try {\n-                    restClient.provisionMembers(model.getObject().getKey(), ProvisionAction.PROVISION);\n+                    GroupRestClient.provisionMembers(model.getObject().getKey(), ProvisionAction.PROVISION);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -297,7 +294,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 try {\n-                    restClient.provisionMembers(model.getObject().getKey(), ProvisionAction.DEPROVISION);\n+                    GroupRestClient.provisionMembers(model.getObject().getKey(), ProvisionAction.DEPROVISION);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {"},{"sha":"9982695ded2a161eb9d7cb662a5178bb6becfaf0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -159,7 +159,7 @@ public void onClick(final AjaxRequestTarget target, final ImplementationTO ignor\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ImplementationTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getType(), model.getObject().getKey());\n+                    ImplementationRestClient.delete(model.getObject().getType(), model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -204,14 +204,14 @@ public ImplementationProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<ImplementationTO> iterator(final long first, final long count) {\n-            List<ImplementationTO> list = restClient.list(type);\n+            List<ImplementationTO> list = ImplementationRestClient.list(type);\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list(type).size();\n+            return ImplementationRestClient.list(type).size();\n         }\n \n         @Override"},{"sha":"b7ca781c11bba9be1608744b4c559c1505c51b81","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -51,8 +51,6 @@ public class ImplementationModalPanel extends AbstractModalPanel<ImplementationT\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private final ImplementationRestClient restClient = new ImplementationRestClient();\n-\n     private final ImplementationTO implementation;\n \n     private final ViewMode viewMode;\n@@ -184,9 +182,9 @@ public void renderHead(final IHeaderResponse response) {\n     public void onSubmit(final AjaxRequestTarget target) {\n         try {\n             if (create) {\n-                restClient.create(implementation);\n+                ImplementationRestClient.create(implementation);\n             } else {\n-                restClient.update(implementation);\n+                ImplementationRestClient.update(implementation);\n             }\n \n             modal.close(target);"},{"sha":"099d8a8afcdfb45e9312121ef9cde3a1c8e06eff","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -215,7 +215,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n         checkGroup.add(beans);\n     }\n \n-    private ListView<String> header(final List<String> labels) {\n+    private static ListView<String> header(final List<String> labels) {\n         return new ListView<String>(\"names\", labels) {\n \n             private static final long serialVersionUID = 1L;"},{"sha":"6c3cdad113a17415c49d47f40bb72d5c436e4b01","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -74,7 +74,7 @@ public LogStatementPanel(final String id, final LogStatement statement) {\n         collapse.setOutputMarkupPlaceholderTag(true);\n         collapse.setVisible(StringUtils.isNotBlank(statement.getStackTrace()));\n         collapse.add(new JQueryUIBehavior(\n-                \"#\" + collapse.getMarkupId(), \"accordion\", new Options(\"active\", false).set(\"collapsible\", true)));\n+            '#' + collapse.getMarkupId(), \"accordion\", new Options(\"active\", false).set(\"collapsible\", true)));\n         add(collapse);\n \n         Label stacktrace = new Label(\"stacktrace\", Model.of(statement.getStackTrace()));"},{"sha":"80fbe93f4fc4652f630e26cd4dcdabf9ae825fba","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/MembersTogglePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembersTogglePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -53,7 +53,7 @@ public abstract class MembersTogglePanel extends TogglePanel<Serializable> {\n \n         @Override\n         protected List<String> load() {\n-            return new AnyTypeRestClient().list().stream().\n+            return AnyTypeRestClient.list().stream().\n                     filter(anyType -> !AnyTypeKind.GROUP.name().equals(anyType)).collect(Collectors.toList());\n         }\n     };"},{"sha":"54aaee2056577cd3ba4eba486d409dab672cb00f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -56,8 +56,6 @@ public class PlainSchemaDetails extends AbstractSchemaDetailsPanel {\n     @SpringBean\n     private MIMETypesLoader mimeTypesLoader;\n \n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     private final MultiFieldPanel<String> enumerationValues;\n \n     private final MultiFieldPanel<String> enumerationKeys;\n@@ -236,7 +234,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected List<String> load() {\n-                return implRestClient.list(IdRepoImplementationType.VALIDATOR).stream().\n+                return ImplementationRestClient.list(IdRepoImplementationType.VALIDATOR).stream().\n                         map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };"},{"sha":"f301a4345d2a41144991874ed1891f04754de7b1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -115,7 +115,7 @@ public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final PrivilegeTO ignore) {\n                 try {\n                     application.getPrivileges().remove(model.getObject());\n-                    restClient.update(application);\n+                    ApplicationRestClient.update(application);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     customActionOnFinishCallback(target);\n                 } catch (SyncopeClientException e) {"},{"sha":"1a4cda85ffd4e38ad849b14fb41e9ac25b0e4919","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PrivilegeWizardBuilder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPrivilegeWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -36,8 +36,6 @@ public class PrivilegeWizardBuilder extends BaseAjaxWizardBuilder<PrivilegeTO> {\n \n     private static final long serialVersionUID = -1817419622749405208L;\n \n-    private final ApplicationRestClient restClient = new ApplicationRestClient();\n-\n     private final ApplicationTO application;\n \n     public PrivilegeWizardBuilder(\n@@ -59,7 +57,7 @@ protected Serializable onApplyInternal(final PrivilegeTO modelObject) {\n         application.getPrivileges().removeIf(privilege -> privilege.getKey().equals(modelObject.getKey()));\n         application.getPrivileges().add(modelObject);\n \n-        restClient.update(application);\n+        ApplicationRestClient.update(application);\n \n         return modelObject;\n     }"},{"sha":"f60c21af8b6cefbd94a52c9004c4658d35099bf7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/Realm.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealm.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -79,7 +79,7 @@ public abstract class Realm extends WizardMgtPanel<RealmTO> {\n     public Realm(final String id, final RealmTO realmTO, final PageReference pageRef, final int selectedIndex) {\n         super(id, true);\n         this.realmTO = realmTO;\n-        this.anyTypes = new AnyTypeRestClient().listAnyTypes();\n+        this.anyTypes = AnyTypeRestClient.listAnyTypes();\n \n         setPageRef(pageRef);\n "},{"sha":"8743ff8709ecc09de2322870a9be23dd358e5a18","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -57,8 +57,6 @@ public class RealmChoicePanel extends Panel {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n \n-    private final RealmRestClient realmRestClient = new RealmRestClient();\n-\n     private final PageReference pageRef;\n \n     private final LoadableDetachableModel<List<Pair<String, RealmTO>>> realmTree;\n@@ -121,7 +119,7 @@ protected List<Pair<String, RealmTO>> load() {\n \n             @Override\n             protected List<DynRealmTO> load() {\n-                List<DynRealmTO> dynRealms = realmRestClient.listDynReams();\n+                List<DynRealmTO> dynRealms = RealmRestClient.listDynReams();\n                 dynRealms.sort((left, right) -> {\n                     if (left == null) {\n                         return -1;\n@@ -305,7 +303,7 @@ public final RealmChoicePanel reloadRealmTree(final AjaxRequestTarget target, fi\n     }\n \n     private Map<String, Pair<RealmTO, List<RealmTO>>> reloadRealmParentMap() {\n-        return reloadRealmParentMap(realmRestClient.list().stream().\n+        return reloadRealmParentMap(RealmRestClient.list().stream().\n                 sorted(Comparator.comparing(RealmTO::getName)).\n                 collect(Collectors.toList()));\n     }"},{"sha":"4ae1bf4b79edc8c94b4bb6523c7d02f0f8ccae17","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -55,17 +55,13 @@ public class RealmDetails extends Panel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(RealmDetails.class);\n \n-    private final PolicyRestClient policyRestClient = new PolicyRestClient();\n-\n-    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n-\n     private final IModel<Map<String, String>> accountPolicies = new LoadableDetachableModel<Map<String, String>>() {\n \n         private static final long serialVersionUID = -2012833443695917883L;\n \n         @Override\n         protected Map<String, String> load() {\n-            return policyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n+            return PolicyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -76,7 +72,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return policyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n+            return PolicyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -87,7 +83,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected List<String> load() {\n-            return implRestClient.list(IdRepoImplementationType.LOGIC_ACTIONS).stream().\n+            return ImplementationRestClient.list(IdRepoImplementationType.LOGIC_ACTIONS).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };"},{"sha":"f85ab7b43714922f76a987c44269e3269dc0f539","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmWizardBuilder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -32,8 +32,6 @@ public class RealmWizardBuilder extends BaseAjaxWizardBuilder<RealmTO> {\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private final RealmRestClient realmRestClient = new RealmRestClient();\n-\n     private String parentPath;\n \n     /**\n@@ -49,9 +47,9 @@ public RealmWizardBuilder(final PageReference pageRef) {\n     protected Serializable onApplyInternal(final RealmTO modelObject) {\n         ProvisioningResult<RealmTO> result;\n         if (modelObject.getKey() == null) {\n-            result = realmRestClient.create(this.parentPath, modelObject);\n+            result = RealmRestClient.create(this.parentPath, modelObject);\n         } else {\n-            result = realmRestClient.update(modelObject);\n+            result = RealmRestClient.update(modelObject);\n         }\n         return result;\n     }"},{"sha":"d56640b7112644dd46487002cb63d810fc55a4de","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RelationshipTypesPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRelationshipTypesPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -81,9 +81,9 @@ public WizardModalPanel<RelationshipTypeTO> build(\n                     public void onSubmit(final AjaxRequestTarget target) {\n                         try {\n                             if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-                                restClient.create(modelObject);\n+                                RelationshipTypeRestClient.create(modelObject);\n                             } else {\n-                                restClient.update(modelObject);\n+                                RelationshipTypeRestClient.update(modelObject);\n                             }\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             RelationshipTypesPanel.this.updateResultTable(target);\n@@ -180,7 +180,7 @@ public void onClick(final AjaxRequestTarget target, final RelationshipTypeTO ign\n             @Override\n             public void onClick(final AjaxRequestTarget target, final RelationshipTypeTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    RelationshipTypeRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (Exception e) {\n@@ -208,14 +208,14 @@ private RelationshipTypeProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<RelationshipTypeTO> iterator(final long first, final long count) {\n-            final List<RelationshipTypeTO> list = restClient.list();\n+            final List<RelationshipTypeTO> list = RelationshipTypeRestClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return RelationshipTypeRestClient.list().size();\n         }\n \n         @Override"},{"sha":"4e6add8a17ff84ab7fb27447bdca30b08d3b9f26","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RoleDirectoryPanel.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -137,7 +137,7 @@ public ActionsPanel<RoleTO> getActions(final IModel<RoleTO> model) {\n             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                 send(RoleDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                new RoleWrapper(new RoleRestClient().read(model.getObject().getKey())),\n+                                new RoleWrapper(RoleRestClient.read(model.getObject().getKey())),\n                                 target));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.ROLE_READ);\n@@ -165,10 +165,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                         SyncopeClient.getUserSearchConditionBuilder().inRoles(model.getObject().getKey()),\n                         SyncopeClient.getUserSearchConditionBuilder().is(\"key\").notNullValue()).query();\n \n-                AnyTypeRestClient typeRestClient = new AnyTypeRestClient();\n-                AnyTypeClassRestClient classRestClient = new AnyTypeClassRestClient();\n-\n-                AnyTypeTO anyTypeTO = typeRestClient.read(AnyTypeKind.USER.name());\n+                AnyTypeTO anyTypeTO = AnyTypeRestClient.read(AnyTypeKind.USER.name());\n \n                 ModalPanel panel = new AnyPanel(BaseModal.CONTENT_ID, anyTypeTO, null, null, false, pageRef) {\n \n@@ -177,15 +174,15 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                     @Override\n                     protected Panel getDirectoryPanel(final String id) {\n                         Panel panel = new UserDirectoryPanel.Builder(\n-                                classRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                            AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n                                 setRealm(SyncopeConstants.ROOT_REALM).\n                                 setFiltered(true).\n                                 setFiql(query).\n                                 disableCheckBoxes().\n                                 addNewItemPanelBuilder(FormLayoutInfoUtils.instantiate(\n                                         new UserTO(),\n                                         anyTypeTO.getClasses(),\n-                                        FormLayoutInfoUtils.fetch(typeRestClient.list()).getLeft(),\n+                                        FormLayoutInfoUtils.fetch(AnyTypeRestClient.list()).getLeft(),\n                                         pageRef), false).\n                                 setWizardInModal(false).build(id);\n \n@@ -212,7 +209,7 @@ protected Panel getDirectoryPanel(final String id) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                 ConsoleLayoutInfo info = new ConsoleLayoutInfo(model.getObject().getKey());\n-                info.setContent(restClient.readConsoleLayoutInfo(model.getObject().getKey()));\n+                info.setContent(RoleRestClient.readConsoleLayoutInfo(model.getObject().getKey()));\n \n                 utilityModal.header(new ResourceModel(\"console.layout.info\", \"JSON Content\"));\n                 utilityModal.setContent(new JsonEditorPanel(\n@@ -223,7 +220,7 @@ public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                     @Override\n                     public void onSubmit(final AjaxRequestTarget target) {\n                         try {\n-                            restClient.setConsoleLayoutInfo(info.getKey(), info.getContent());\n+                            RoleRestClient.setConsoleLayoutInfo(info.getKey(), info.getContent());\n                             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                             modal.show(false);\n                             modal.close(target);\n@@ -246,7 +243,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final RoleTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    RoleRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -287,23 +284,21 @@ protected class RoleDataProvider extends DirectoryDataProvider<RoleTO> {\n \n         private final SortableDataProviderComparator<RoleTO> comparator;\n \n-        private final RoleRestClient restClient = new RoleRestClient();\n-\n         public RoleDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n             this.comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n         public Iterator<RoleTO> iterator(final long first, final long count) {\n-            List<RoleTO> result = restClient.list();\n+            List<RoleTO> result = RoleRestClient.list();\n             Collections.sort(result, comparator);\n             return result.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return RoleRestClient.list().size();\n         }\n \n         @Override"},{"sha":"944e2bbc7a3a4d8ebdec8dd03e726d4d4223718e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -176,15 +176,15 @@ public void onClick(final AjaxRequestTarget target, final SchemaTO ignore) {\n                 try {\n                     switch (schemaType) {\n                         case DERIVED:\n-                            restClient.deleteDerSchema(model.getObject().getKey());\n+                            SchemaRestClient.deleteDerSchema(model.getObject().getKey());\n                             break;\n \n                         case VIRTUAL:\n-                            restClient.deleteVirSchema(model.getObject().getKey());\n+                            SchemaRestClient.deleteVirSchema(model.getObject().getKey());\n                             break;\n \n                         default:\n-                            restClient.deletePlainSchema(model.getObject().getKey());\n+                            SchemaRestClient.deletePlainSchema(model.getObject().getKey());\n                             break;\n                     }\n \n@@ -220,15 +220,15 @@ private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n \n         @Override\n         public Iterator<SchemaTO> iterator(final long first, final long count) {\n-            List<SchemaTO> schemas = restClient.getSchemas(this.schemaType, keyword);\n+            List<SchemaTO> schemas = SchemaRestClient.getSchemas(this.schemaType, keyword);\n             Collections.sort(schemas, comparator);\n \n             return schemas.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.getSchemas(this.schemaType, keyword).size();\n+            return SchemaRestClient.getSchemas(this.schemaType, keyword).size();\n         }\n \n         @Override\n@@ -245,10 +245,10 @@ public void onEvent(final IEvent<?> event) {\n \n             keyword = payload.getKeyword();\n             if (!keyword.startsWith(\"*\")) {\n-                keyword = \"*\" + keyword;\n+                keyword = '*' + keyword;\n             }\n             if (!keyword.endsWith(\"*\")) {\n-                keyword = keyword + \"*\";\n+                keyword = keyword + '*';\n             }\n \n             updateResultTable(target);"},{"sha":"b646d0a57272d74da138f598cbbd305457ede4de","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypeWizardBuilder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -59,8 +59,6 @@ public class SchemaTypeWizardBuilder extends BaseAjaxWizardBuilder<SchemaTO> {\n \n     private static final long serialVersionUID = -3893521796674873644L;\n \n-    private final SchemaRestClient restClient = new SchemaRestClient();\n-\n     private final SchemaType schemaType;\n \n     private final ListModel<MutablePair<Locale, String>> translations = new ListModel<>(new ArrayList<>());\n@@ -80,9 +78,9 @@ protected Serializable onApplyInternal(final SchemaTO modelObject) {\n                 collect(Collectors.toMap(MutablePair::getKey, MutablePair::getValue)));\n \n         if (getOriginalItem() == null || StringUtils.isBlank(getOriginalItem().getKey())) {\n-            restClient.create(schemaType, modelObject);\n+            SchemaRestClient.create(schemaType, modelObject);\n         } else {\n-            restClient.update(schemaType, modelObject);\n+            SchemaRestClient.update(schemaType, modelObject);\n         }\n \n         return null;"},{"sha":"124b5f80f0518b6e0c7fc85c3fba61a30d3b583c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsModalPanel.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsModalPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -34,8 +34,6 @@ public class SecurityQuestionsModalPanel extends AbstractModalPanel<SecurityQues\n \n     private final SecurityQuestionTO securityQuestionTO;\n \n-    private final SecurityQuestionRestClient restClient = new SecurityQuestionRestClient();\n-\n     public SecurityQuestionsModalPanel(\n             final BaseModal<SecurityQuestionTO> modal,\n             final SecurityQuestionTO securityQuestionTO,\n@@ -55,9 +53,9 @@ public final SecurityQuestionTO getItem() {\n     public void onSubmit(final AjaxRequestTarget target) {\n         try {\n             if (securityQuestionTO.getKey() == null) {\n-                restClient.create(securityQuestionTO);\n+                SecurityQuestionRestClient.create(securityQuestionTO);\n             } else {\n-                restClient.update(securityQuestionTO);\n+                SecurityQuestionRestClient.update(securityQuestionTO);\n             }\n \n             SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));"},{"sha":"925cf01d36d5ae5a51505ca027bc5e34a6d9a29a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionsPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -158,7 +158,7 @@ public void onClick(final AjaxRequestTarget target, final SecurityQuestionTO ign\n             @Override\n             public void onClick(final AjaxRequestTarget target, final SecurityQuestionTO ignore) {\n                 try {\n-                    restClient.delete(model.getObject().getKey());\n+                    SecurityQuestionRestClient.delete(model.getObject().getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (Exception e) {\n@@ -186,14 +186,14 @@ private SecurityQuestionsProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<SecurityQuestionTO> iterator(final long first, final long count) {\n-            final List<SecurityQuestionTO> list = restClient.list();\n+            final List<SecurityQuestionTO> list = SecurityQuestionRestClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return SecurityQuestionRestClient.list().size();\n         }\n \n         @Override"},{"sha":"088268fa86f4933f6cf1b45ee522eaccc1b49cbe","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -232,7 +232,7 @@ public void toggle(final AjaxRequestTarget target, final boolean toggle) {\n                 target.appendJavaScript(\n                         selector + \".toggle(\\\"slow\\\");\"\n                         + selector + \".attr(\\\"class\\\", \\\"\"\n-                        + ToggleMenuCSS.CLASS.value() + \" \" + ToggleMenuCSS.CLASS_ACTIVE.value() + \"\\\");\");\n+                        + ToggleMenuCSS.CLASS.value() + ' ' + ToggleMenuCSS.CLASS_ACTIVE.value() + \"\\\");\");\n                 status = Status.ACTIVE;\n             } else if (status == Status.ACTIVE) {\n                 // useful when handling action menu after refreshing (ref. SYNCOPE-1134)\n@@ -245,7 +245,7 @@ public void toggle(final AjaxRequestTarget target, final boolean toggle) {\n             target.appendJavaScript(\n                     selector + \".toggle(\\\"slow\\\");\"\n                     + selector + \".attr(\\\"class\\\", \\\"\"\n-                    + ToggleMenuCSS.CLASS.value() + \" \" + ToggleMenuCSS.CLASS_INACTIVE.value() + \"\\\");\");\n+                    + ToggleMenuCSS.CLASS.value() + ' ' + ToggleMenuCSS.CLASS_INACTIVE.value() + \"\\\");\");\n             status = Status.INACTIVE;\n         }\n     }"},{"sha":"f2cc57083bcb5714100e582c5665a4222965ce59","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -52,10 +52,6 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchPanel.class);\n \n-    protected AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n-    protected SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     protected IModel<List<String>> dnames;\n \n     protected IModel<Map<String, PlainSchemaTO>> anames;\n@@ -183,8 +179,8 @@ protected List<String> load() {\n \n             @Override\n             protected Map<String, PlainSchemaTO> load() {\n-                return schemaRestClient.<PlainSchemaTO>getSchemas(\n-                        SchemaType.PLAIN, null, anyTypeRestClient.read(type).getClasses().toArray(new String[] {})).\n+                return SchemaRestClient.<PlainSchemaTO>getSchemas(\n+                        SchemaType.PLAIN, null, AnyTypeRestClient.read(type).getClasses().toArray(new String[] {})).\n                         stream().collect(Collectors.toMap(SchemaTO::getKey, Function.identity()));\n             }\n         };"},{"sha":"002971c704f0a30d5b4eda25a29bf945222ad5a5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -231,7 +231,7 @@ protected List<String> load() {\n                         return resources;\n \n                     case RELATIONSHIP:\n-                        final List<String> relations = new RelationshipTypeRestClient().list().stream().\n+                        final List<String> relations = RelationshipTypeRestClient.list().stream().\n                                 map(RelationshipTypeTO::getKey).collect(Collectors.toList());\n                         return relations;\n \n@@ -404,11 +404,11 @@ protected void onEvent(final AjaxRequestTarget target) {\n                                 ? inputAsArray[1]\n                                 : property.getField().getInput();\n                         inputValue = (inputValue.startsWith(\"*\") && !inputValue.endsWith(\"*\"))\n-                                ? inputValue + \"*\"\n+                                ? inputValue + '*'\n                                 : (!inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\"))\n-                                ? \"*\" + inputValue\n+                                ? '*' + inputValue\n                                 : (inputValue.startsWith(\"*\") && inputValue.endsWith(\"*\")\n-                                ? inputValue : \"*\" + inputValue + \"*\");\n+                                ? inputValue : '*' + inputValue + '*');\n \n                         if (groupInfo.getRight() > AnyObjectSearchPanel.MAX_GROUP_LIST_CARDINALITY) {\n                             property.setChoices(groupRestClient.search(\n@@ -639,7 +639,7 @@ private void setFieldAccess(\n         }\n     }\n \n-    private IChoiceRenderer<SearchClause.Comparator> getComparatorRender(final IModel<SearchClause> clause) {\n+    private static IChoiceRenderer<SearchClause.Comparator> getComparatorRender(final IModel<SearchClause> clause) {\n         return new IChoiceRenderer<SearchClause.Comparator>() {\n \n             private static final long serialVersionUID = -9086043750227867686L;"},{"sha":"e2e3e56d02efea1f0e2391768c7e6c1cc65e036b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -32,10 +32,6 @@ public final class UserSearchPanel extends AnyObjectSearchPanel {\n \n     private static final long serialVersionUID = -1769527800450203738L;\n \n-    private final RoleRestClient roleRestClient = new RoleRestClient();\n-\n-    private final ApplicationRestClient applicationRestClient = new ApplicationRestClient();\n-\n     public static class Builder extends AnyObjectSearchPanel.Builder {\n \n         private static final long serialVersionUID = 6308997285778809578L;\n@@ -64,7 +60,7 @@ protected void populate() {\n \n             @Override\n             protected List<String> load() {\n-                return roleRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n+                return RoleRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n             }\n         };\n \n@@ -74,7 +70,7 @@ protected List<String> load() {\n \n             @Override\n             protected List<String> load() {\n-                return applicationRestClient.list().stream().\n+                return ApplicationRestClient.list().stream().\n                         flatMap(application -> application.getPrivileges().stream()).\n                         map(EntityTO::getKey).collect(Collectors.toList());\n             }"},{"sha":"dfc0ff1e9b5abc5ac92f7094626ee27d5a863c53","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -146,7 +146,7 @@ public ActionsPanel<T> getActions(final IModel<T> model) {\n             public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                restClient.getPolicy(type, model.getObject().getKey()), target));\n+                                PolicyRestClient.getPolicy(type, model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.POLICY_UPDATE);\n \n@@ -173,7 +173,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 final T policyTO = model.getObject();\n                 try {\n-                    restClient.delete(type, policyTO.getKey());\n+                    PolicyRestClient.delete(type, policyTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -224,14 +224,14 @@ public PolicyDataProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n-            List<T> list = restClient.getPolicies(type);\n+            List<T> list = PolicyRestClient.getPolicies(type);\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.getPolicies(type).size();\n+            return PolicyRestClient.getPolicies(type).size();\n         }\n \n         @Override"},{"sha":"4a29eaa3f33c45928f8ef10e8a28a193705907d0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -61,8 +61,6 @@\n \n     private final PolicyType type;\n \n-    private final PolicyRestClient restClient = new PolicyRestClient();\n-\n     public PolicyModalPanelBuilder(\n             final PolicyType type, final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n \n@@ -158,9 +156,9 @@ protected void populateItem(final ListItem<Component> item) {\n         public void onSubmit(final AjaxRequestTarget target) {\n             try {\n                 if (policyTO.getKey() == null) {\n-                    restClient.createPolicy(type, policyTO);\n+                    PolicyRestClient.createPolicy(type, policyTO);\n                 } else {\n-                    restClient.updatePolicy(type, policyTO);\n+                    PolicyRestClient.updatePolicy(type, policyTO);\n                 }\n                 SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                 Profile.this.modal.close(target);"},{"sha":"0ad24dd8ad9bb654c1dbcdefd0a8961dbd19969c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -167,10 +167,10 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n             public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n                 RuleConf rule = model.getObject().getConf();\n                 try {\n-                    T actual = restClient.getPolicy(type, policy);\n+                    T actual = PolicyRestClient.getPolicy(type, policy);\n                     if (actual instanceof ComposablePolicy) {\n                         ((ComposablePolicy) actual).getRules().remove(model.getObject().getImplementationKey());\n-                        restClient.updatePolicy(type, actual);\n+                        PolicyRestClient.updatePolicy(type, actual);\n \n                         SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                         customActionOnFinishCallback(target);\n@@ -224,8 +224,6 @@ protected class PolicyRuleDataProvider extends DirectoryDataProvider<PolicyRuleW\n \n         private static final long serialVersionUID = 4725679400450513556L;\n \n-        private final ImplementationRestClient implementationClient = new ImplementationRestClient();\n-\n         private final SortableDataProviderComparator<PolicyRuleWrapper> comparator;\n \n         public PolicyRuleDataProvider(final int paginatorRows) {\n@@ -239,7 +237,7 @@ public PolicyRuleDataProvider(final int paginatorRows) {\n         @SuppressWarnings(\"unchecked\")\n         private List<PolicyRuleWrapper> getPolicyRuleWrappers(final ComposablePolicy policy) {\n             return policy.getRules().stream().map(rule -> {\n-                ImplementationTO implementation = implementationClient.read(implementationType, rule);\n+                ImplementationTO implementation = ImplementationRestClient.read(implementationType, rule);\n \n                 PolicyRuleWrapper wrapper = new PolicyRuleWrapper(false).\n                         setImplementationKey(implementation.getKey()).\n@@ -259,7 +257,7 @@ private List<PolicyRuleWrapper> getPolicyRuleWrappers(final ComposablePolicy pol\n \n         @Override\n         public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n-            final T actual = restClient.getPolicy(type, policy);\n+            final T actual = PolicyRestClient.getPolicy(type, policy);\n \n             List<PolicyRuleWrapper> rules = actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual)\n@@ -271,7 +269,7 @@ public Iterator<PolicyRuleWrapper> iterator(final long first, final long count)\n \n         @Override\n         public long size() {\n-            final T actual = restClient.getPolicy(type, policy);\n+            final T actual = PolicyRestClient.getPolicy(type, policy);\n             return actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual).size()\n                     : 0;"},{"sha":"364dc96e4b65c96e6597bb7037f0a4e8c39bc151","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -51,10 +51,6 @@ public class PolicyRuleWizardBuilder extends BaseAjaxWizardBuilder<PolicyRuleWra\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private final ImplementationRestClient implementationClient = new ImplementationRestClient();\n-\n-    private final PolicyRestClient restClient = new PolicyRestClient();\n-\n     private final String policy;\n \n     private final PolicyType type;\n@@ -78,7 +74,7 @@ public PolicyRuleWizardBuilder(\n \n     @Override\n     protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n-        PolicyTO policyTO = restClient.getPolicy(type, policy);\n+        PolicyTO policyTO = PolicyRestClient.getPolicy(type, policy);\n \n         ComposablePolicy composable;\n         if (policyTO instanceof ComposablePolicy) {\n@@ -88,10 +84,11 @@ protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n         }\n \n         if (modelObject.getImplementationEngine() == ImplementationEngine.JAVA) {\n-            ImplementationTO rule = implementationClient.read(implementationType, modelObject.getImplementationKey());\n+            ImplementationTO rule = ImplementationRestClient.read(implementationType,\n+                modelObject.getImplementationKey());\n             try {\n                 rule.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n-                implementationClient.update(rule);\n+                ImplementationRestClient.update(rule);\n             } catch (Exception e) {\n                 throw new RuntimeException(e);\n             }\n@@ -101,7 +98,7 @@ protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n             composable.getRules().add(modelObject.getImplementationKey());\n         }\n \n-        restClient.updatePolicy(type, policyTO);\n+        PolicyRestClient.updatePolicy(type, policyTO);\n         return modelObject;\n     }\n \n@@ -127,12 +124,12 @@ public Profile(final PolicyRuleWrapper rule) {\n             List<String> choices;\n             switch (type) {\n                 case ACCOUNT:\n-                    choices = implementationClient.list(IdRepoImplementationType.ACCOUNT_RULE).stream().\n+                    choices = ImplementationRestClient.list(IdRepoImplementationType.ACCOUNT_RULE).stream().\n                             map(EntityTO::getKey).sorted().collect(Collectors.toList());\n                     break;\n \n                 case PASSWORD:\n-                    choices = implementationClient.list(IdRepoImplementationType.PASSWORD_RULE).stream().\n+                    choices = ImplementationRestClient.list(IdRepoImplementationType.PASSWORD_RULE).stream().\n                             map(EntityTO::getKey).sorted().collect(Collectors.toList());\n                     break;\n \n@@ -150,7 +147,7 @@ public Profile(final PolicyRuleWrapper rule) {\n \n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n-                    ImplementationTO impl = implementationClient.read(implementationType, conf.getModelObject());\n+                    ImplementationTO impl = ImplementationRestClient.read(implementationType, conf.getModelObject());\n                     rule.setImplementationEngine(impl.getEngine());\n                     if (impl.getEngine() == ImplementationEngine.JAVA) {\n                         try {"},{"sha":"7796ea4f582e037bd4c0c54973719f12c7f38437","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -140,7 +140,7 @@ public void populateItem(\n \n                 Component panel;\n                 try {\n-                    JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n+                    JobTO jobTO = ReportRestClient.getJob(rowModel.getObject().getKey());\n                     panel = new JobActionPanel(componentId, jobTO, false, ReportDirectoryPanel.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\",\n@@ -184,7 +184,7 @@ public ActionsPanel<ReportTO> getActions(final IModel<ReportTO> model) {\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 send(ReportDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                restClient.read(model.getObject().getKey()), target));\n+                                ReportRestClient.read(model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REPORT_UPDATE);\n \n@@ -246,7 +246,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 final ReportTO reportTO = model.getObject();\n                 try {\n-                    restClient.delete(reportTO.getKey());\n+                    ReportRestClient.delete(reportTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -295,14 +295,14 @@ public ReportDataProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<ReportTO> iterator(final long first, final long count) {\n-            List<ReportTO> list = restClient.list();\n+            List<ReportTO> list = ReportRestClient.list();\n             Collections.sort(list, comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return restClient.list().size();\n+            return ReportRestClient.list().size();\n         }\n \n         @Override"},{"sha":"a152fbb093768dd679db0e17c74c4920259eddcc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportExecutionDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -160,7 +160,7 @@ public AjaxExportDownloadBehavior setDetails(\n \n         private void createResourceStream() {\n             if (stream == null) {\n-                stream = new HttpResourceStream(new ReportRestClient().exportExecutionResult(execution, exportFormat));\n+                stream = new HttpResourceStream(ReportRestClient.exportExecutionResult(execution, exportFormat));\n             }\n         }\n "},{"sha":"d94beb4e57b5a49bbf252f8af1b8e8a1deb7289c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -49,9 +49,9 @@ public ReportWizardBuilder(final ReportTO reportTO, final PageReference pageRef)\n     protected Serializable onApplyInternal(final ReportTO modelObject) {\n         modelObject.setCronExpression(crontabPanel.getCronExpression());\n         if (modelObject.getKey() == null) {\n-            restClient.create(modelObject);\n+            ReportRestClient.create(modelObject);\n         } else {\n-            restClient.update(modelObject);\n+            ReportRestClient.update(modelObject);\n         }\n         return modelObject;\n     }"},{"sha":"43b04b8af75a647077314aff3bd6d67de4a19795","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -156,9 +156,9 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n             public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignore) {\n                 final ReportletConf reportlet = model.getObject().getConf();\n                 try {\n-                    final ReportTO actual = restClient.read(report);\n+                    final ReportTO actual = ReportRestClient.read(report);\n                     actual.getReportlets().remove(model.getObject().getImplementationKey());\n-                    restClient.update(actual);\n+                    ReportRestClient.update(actual);\n \n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     customActionOnFinishCallback(target);\n@@ -211,8 +211,6 @@ protected class ReportDataProvider extends DirectoryDataProvider<ReportletWrappe\n \n         private static final long serialVersionUID = 4725679400450513556L;\n \n-        private final ImplementationRestClient implementationClient = new ImplementationRestClient();\n-\n         private final SortableDataProviderComparator<ReportletWrapper> comparator;\n \n         public ReportDataProvider(final int paginatorRows) {\n@@ -225,7 +223,7 @@ public ReportDataProvider(final int paginatorRows) {\n \n         private List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n             return reportTO.getReportlets().stream().map(reportlet -> {\n-                ImplementationTO impl = implementationClient.read(IdRepoImplementationType.REPORTLET, reportlet);\n+                ImplementationTO impl = ImplementationRestClient.read(IdRepoImplementationType.REPORTLET, reportlet);\n \n                 ReportletWrapper wrapper = new ReportletWrapper(false).\n                         setImplementationKey(impl.getKey()).\n@@ -245,7 +243,7 @@ private List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n \n         @Override\n         public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n-            final ReportTO actual = restClient.read(report);\n+            final ReportTO actual = ReportRestClient.read(report);\n \n             List<ReportletWrapper> reportlets = getReportletWrappers(actual);\n \n@@ -255,7 +253,7 @@ public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n \n         @Override\n         public long size() {\n-            final ReportTO actual = restClient.read(report);\n+            final ReportTO actual = ReportRestClient.read(report);\n             return getReportletWrappers(actual).size();\n         }\n "},{"sha":"434d187f081d1b368ad9abd43f6828466e19be37","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -47,10 +47,6 @@ public class ReportletWizardBuilder extends BaseAjaxWizardBuilder<ReportletWrapp\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n \n-    private final ImplementationRestClient implementationClient = new ImplementationRestClient();\n-\n-    private final ReportRestClient restClient = new ReportRestClient();\n-\n     private final String report;\n \n     public ReportletWizardBuilder(\n@@ -64,22 +60,22 @@ public ReportletWizardBuilder(\n     @Override\n     protected Serializable onApplyInternal(final ReportletWrapper modelObject) {\n         if (modelObject.getImplementationEngine() == ImplementationEngine.JAVA) {\n-            ImplementationTO reportlet = implementationClient.read(\n+            ImplementationTO reportlet = ImplementationRestClient.read(\n                     IdRepoImplementationType.REPORTLET, modelObject.getImplementationKey());\n             try {\n                 reportlet.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n-                implementationClient.update(reportlet);\n+                ImplementationRestClient.update(reportlet);\n             } catch (Exception e) {\n                 throw new RuntimeException(e);\n             }\n         }\n \n-        ReportTO reportTO = restClient.read(report);\n+        ReportTO reportTO = ReportRestClient.read(report);\n         if (modelObject.isNew()) {\n             reportTO.getReportlets().add(modelObject.getImplementationKey());\n         }\n \n-        restClient.update(reportTO);\n+        ReportRestClient.update(reportTO);\n         return modelObject;\n     }\n \n@@ -99,7 +95,7 @@ public Profile(final ReportletWrapper reportlet) {\n             final AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n                     \"reportlet\", getString(\"reportlet\"), new PropertyModel<>(reportlet, \"implementationKey\"));\n \n-            conf.setChoices(implementationClient.list(IdRepoImplementationType.REPORTLET).stream().\n+            conf.setChoices(ImplementationRestClient.list(IdRepoImplementationType.REPORTLET).stream().\n                     map(EntityTO::getKey).sorted().collect(Collectors.toList()));\n             conf.addRequiredLabel();\n             conf.setNullValid(false);\n@@ -110,7 +106,7 @@ public Profile(final ReportletWrapper reportlet) {\n \n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n-                    ImplementationTO impl = implementationClient.read(\n+                    ImplementationTO impl = ImplementationRestClient.read(\n                             IdRepoImplementationType.REPORTLET, conf.getModelObject());\n                     reportlet.setImplementationEngine(impl.getEngine());\n                     if (impl.getEngine() == ImplementationEngine.JAVA) {"},{"sha":"3f38b87698b92a384ce8c8f089afabf0b933dd3c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -72,7 +72,7 @@ public ProvisioningResult<TO> delete(final String etag, final String key) {\n         return result;\n     }\n \n-    private List<BatchResponseItem> parseBatchResponse(final Response response) throws IOException {\n+    private static List<BatchResponseItem> parseBatchResponse(final Response response) throws IOException {\n         return BatchPayloadParser.parse(\n                 (InputStream) response.getEntity(), response.getMediaType(), new BatchResponseItem());\n     }\n@@ -148,7 +148,7 @@ public Map<String, String> deassociate(\n         return result;\n     }\n \n-    public Map<String, String> batch(final BatchRequest batchRequest) {\n+    public static Map<String, String> batch(final BatchRequest batchRequest) {\n         List<BatchRequestItem> batchRequestItems = new ArrayList<>(batchRequest.getItems());\n \n         Map<String, String> result = new LinkedHashMap<>();"},{"sha":"356a1b4705e3237d61f9d881c85e9828eea066c3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AccessTokenRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAccessTokenRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAccessTokenRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAccessTokenRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -31,17 +31,17 @@ public class AccessTokenRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -3161863874876938094L;\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(AccessTokenService.class).delete(key);\n     }\n \n-    public int count() {\n+    public static int count() {\n         return getService(AccessTokenService.class).list(\n                 new AccessTokenQuery.Builder().page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n-    public List<AccessTokenTO> list(final int page, final int size, final SortParam<String> sort) {\n+    public static List<AccessTokenTO> list(final int page, final int size, final SortParam<String> sort) {\n         return getService(AccessTokenService.class).list(\n                 new AccessTokenQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n                 getResult();"},{"sha":"eab12a8ccfb96490ff078f818f61e9b12b6d71bb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,7 +42,7 @@ protected Class<? extends AnyService<AnyObjectTO>> getAnyServiceClass() {\n         return AnyObjectService.class;\n     }\n \n-    public ProvisioningResult<AnyObjectTO> create(final AnyObjectCR createReq) {\n+    public static ProvisioningResult<AnyObjectTO> create(final AnyObjectCR createReq) {\n         Response response = getService(AnyObjectService.class).create(createReq);\n         return response.readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n         });"},{"sha":"ef092625767a1256f10ce41edd12b7135c4b7c9c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeClassRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeClassRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,23 +29,23 @@ public class AnyTypeClassRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n-    public void create(final AnyTypeClassTO anyTypeClass) {\n+    public static void create(final AnyTypeClassTO anyTypeClass) {\n         getService(AnyTypeClassService.class).create(anyTypeClass);\n     }\n \n-    public void update(final AnyTypeClassTO anyTypeClass) {\n+    public static void update(final AnyTypeClassTO anyTypeClass) {\n         getService(AnyTypeClassService.class).update(anyTypeClass);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(AnyTypeClassService.class).delete(key);\n     }\n \n-    public AnyTypeClassTO read(final String key) {\n+    public static AnyTypeClassTO read(final String key) {\n         return getService(AnyTypeClassService.class).read(key);\n     }\n \n-    public List<AnyTypeClassTO> list() {\n+    public static List<AnyTypeClassTO> list() {\n         List<AnyTypeClassTO> types = List.of();\n \n         try {\n@@ -57,7 +57,7 @@ public List<AnyTypeClassTO> list() {\n         return types;\n     }\n \n-    public List<AnyTypeClassTO> list(final Collection<String> anyTypeClassNames) {\n+    public static List<AnyTypeClassTO> list(final Collection<String> anyTypeClassNames) {\n         List<AnyTypeClassTO> anyTypeClassTOs = new ArrayList<>();\n         for (String anyTypeClass : anyTypeClassNames) {\n             anyTypeClassTOs.add(read(anyTypeClass));"},{"sha":"6221d8578c52ab57c3088dabf13baa9fdd363aa6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AnyTypeRestClient.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyTypeRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -33,11 +33,9 @@ public class AnyTypeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n-    private static final AnyTypeComparator COMPARATOR = new AnyTypeComparator();\n-\n     public static final Comparator<String> KEY_COMPARATOR = new AnyTypeKeyComparator();\n \n-    public AnyTypeTO read(final String key) {\n+    public static AnyTypeTO read(final String key) {\n         AnyTypeTO type = null;\n \n         try {\n@@ -49,7 +47,7 @@ public AnyTypeTO read(final String key) {\n         return type;\n     }\n \n-    public List<AnyTypeTO> listAnyTypes() {\n+    public static List<AnyTypeTO> listAnyTypes() {\n         List<AnyTypeTO> types = List.of();\n \n         try {\n@@ -62,21 +60,21 @@ public List<AnyTypeTO> listAnyTypes() {\n         return types;\n     }\n \n-    public List<String> list() {\n+    public static List<String> list() {\n         List<String> types = getSyncopeService().platform().getAnyTypes();\n         Collections.sort(types, new AnyTypeKeyComparator());\n         return types;\n     }\n \n-    public void create(final AnyTypeTO anyTypeTO) {\n+    public static void create(final AnyTypeTO anyTypeTO) {\n         getService(AnyTypeService.class).create(anyTypeTO);\n     }\n \n-    public void update(final AnyTypeTO anyTypeTO) {\n+    public static void update(final AnyTypeTO anyTypeTO) {\n         getService(AnyTypeService.class).update(anyTypeTO);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(AnyTypeService.class).delete(key);\n     }\n "},{"sha":"25c5d1444bb51035aed9d4f79f90070124895457","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ApplicationRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FApplicationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FApplicationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FApplicationRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -26,23 +26,23 @@ public class ApplicationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -381814125643246243L;\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(ApplicationService.class).delete(key);\n     }\n \n-    public ApplicationTO read(final String key) {\n+    public static ApplicationTO read(final String key) {\n         return getService(ApplicationService.class).read(key);\n     }\n \n-    public void update(final ApplicationTO applicationTO) {\n+    public static void update(final ApplicationTO applicationTO) {\n         getService(ApplicationService.class).update(applicationTO);\n     }\n \n-    public void create(final ApplicationTO applicationTO) {\n+    public static void create(final ApplicationTO applicationTO) {\n         getService(ApplicationService.class).create(applicationTO);\n     }\n \n-    public List<ApplicationTO> list() {\n+    public static List<ApplicationTO> list() {\n         return getService(ApplicationService.class).list();\n     }\n "},{"sha":"0d880de8666c902a653f7f510ae3eb45150851c5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/DynRealmRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FDynRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FDynRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FDynRealmRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,19 +29,19 @@ public class DynRealmRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n \n-    public List<DynRealmTO> list() {\n+    public static List<DynRealmTO> list() {\n         return getService(DynRealmService.class).list();\n     }\n \n-    public void create(final DynRealmTO dynRealmTO) {\n+    public static void create(final DynRealmTO dynRealmTO) {\n         getService(DynRealmService.class).create(dynRealmTO);\n     }\n \n-    public void update(final DynRealmTO dynRealmTO) {\n+    public static void update(final DynRealmTO dynRealmTO) {\n         getService(DynRealmService.class).update(dynRealmTO);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(DynRealmService.class).delete(key);\n     }\n }"},{"sha":"8d843eca3130e71f8c53c9f1e9a3c7b9c722d03a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -43,7 +43,7 @@ protected Class<? extends AnyService<GroupTO>> getAnyServiceClass() {\n         return GroupService.class;\n     }\n \n-    public ProvisioningResult<GroupTO> create(final GroupCR groupCR) {\n+    public static ProvisioningResult<GroupTO> create(final GroupCR groupCR) {\n         Response response = getService(GroupService.class).create(groupCR);\n         return response.readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n         });\n@@ -81,7 +81,7 @@ public List<GroupTO> search(\n                         orderBy(toOrderBy(sort)).details(false).build()).getResult();\n     }\n \n-    public void provisionMembers(final String key, final ProvisionAction actionType) {\n+    public static void provisionMembers(final String key, final ProvisionAction actionType) {\n         getService(GroupService.class).provisionMembers(key, actionType);\n     }\n }"},{"sha":"2728e0bf32ce510d9ffed8289b2dd1dd7b3a67e9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ImplementationRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FImplementationRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -26,23 +26,23 @@ public class ImplementationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -4111950555473526287L;\n \n-    public List<ImplementationTO> list(final String type) {\n+    public static List<ImplementationTO> list(final String type) {\n         return getService(ImplementationService.class).list(type);\n     }\n \n-    public ImplementationTO read(final String type, final String key) {\n+    public static ImplementationTO read(final String type, final String key) {\n         return getService(ImplementationService.class).read(type, key);\n     }\n \n-    public void create(final ImplementationTO implementation) {\n+    public static void create(final ImplementationTO implementation) {\n         getService(ImplementationService.class).create(implementation);\n     }\n \n-    public void update(final ImplementationTO implementation) {\n+    public static void update(final ImplementationTO implementation) {\n         getService(ImplementationService.class).update(implementation);\n     }\n \n-    public void delete(final String type, final String key) {\n+    public static void delete(final String type, final String key) {\n         getService(ImplementationService.class).delete(type, key);\n     }\n }"},{"sha":"3424bfd01e6d047f5678eab3936d16317b405ded","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -41,12 +41,12 @@ public class LoggerRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 4579786978763032240L;\n \n-    public List<String> listMemoryAppenders() {\n+    public static List<String> listMemoryAppenders() {\n         return getService(LoggerService.class).memoryAppenders().stream().\n                 map(LogAppender::getName).collect(Collectors.toList());\n     }\n \n-    public List<LogStatement> getLastLogStatements(final String appender, final long lastStatementTime) {\n+    public static List<LogStatement> getLastLogStatements(final String appender, final long lastStatementTime) {\n         List<LogStatement> result = new ArrayList<>();\n         getService(LoggerService.class).getLastLogStatements(appender).stream().\n                 filter(statement -> statement.getTimeMillis() > lastStatementTime).\n@@ -55,18 +55,18 @@ public List<LogStatement> getLastLogStatements(final String appender, final long\n         return result;\n     }\n \n-    public List<LoggerTO> listLogs() {\n+    public static List<LoggerTO> listLogs() {\n         List<LoggerTO> logs = getService(LoggerService.class).list(LoggerType.LOG);\n         Collections.sort(logs, (o1, o2) -> ObjectUtils.compare(o1.getKey(), o2.getKey()));\n \n         return logs;\n     }\n \n-    public List<AuditLoggerName> listAudits() {\n+    public static List<AuditLoggerName> listAudits() {\n         return LoggerWrapper.wrap(getService(LoggerService.class).list(LoggerType.AUDIT));\n     }\n \n-    public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n+    public static Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         Map<String, Set<AuditLoggerName>> result = new HashMap<>();\n         listAudits().forEach(audit -> {\n             if (!result.containsKey(audit.getCategory())) {\n@@ -79,26 +79,26 @@ public Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         return result;\n     }\n \n-    public void setLogLevel(final LoggerTO loggerTO) {\n+    public static void setLogLevel(final LoggerTO loggerTO) {\n         getService(LoggerService.class).update(LoggerType.LOG, loggerTO);\n     }\n \n-    public void enableAudit(final AuditLoggerName auditLoggerName) {\n+    public static void enableAudit(final AuditLoggerName auditLoggerName) {\n         LoggerTO loggerTO = new LoggerTO();\n         loggerTO.setKey(auditLoggerName.toLoggerName());\n         loggerTO.setLevel(LoggerLevel.DEBUG);\n         getService(LoggerService.class).update(LoggerType.AUDIT, loggerTO);\n     }\n \n-    public void deleteLog(final String name) {\n+    public static void deleteLog(final String name) {\n         getService(LoggerService.class).delete(LoggerType.LOG, name);\n     }\n \n-    public void disableAudit(final AuditLoggerName auditLoggerName) {\n+    public static void disableAudit(final AuditLoggerName auditLoggerName) {\n         getService(LoggerService.class).delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n     }\n \n-    public List<EventCategory> listEvents() {\n+    public static List<EventCategory> listEvents() {\n         try {\n             return getService(LoggerService.class).events();\n         } catch (Exception e) {"},{"sha":"065c27e68b37fdc9afbe8615f35f13226d4a5187","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/NotificationRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -36,31 +36,31 @@ public class NotificationRestClient extends BaseRestClient\n \n     private static final long serialVersionUID = 6328933265096511690L;\n \n-    public List<NotificationTO> list() {\n+    public static List<NotificationTO> list() {\n         return getService(NotificationService.class).list();\n     }\n \n-    public JobTO getJob() {\n+    public static JobTO getJob() {\n         return getService(NotificationService.class).getJob();\n     }\n \n-    public void actionJob(final JobAction jobAction) {\n+    public static void actionJob(final JobAction jobAction) {\n         getService(NotificationService.class).actionJob(jobAction);\n     }\n \n-    public NotificationTO read(final String key) {\n+    public static NotificationTO read(final String key) {\n         return getService(NotificationService.class).read(key);\n     }\n \n-    public void create(final NotificationTO notificationTO) {\n+    public static void create(final NotificationTO notificationTO) {\n         getService(NotificationService.class).create(notificationTO);\n     }\n \n-    public void update(final NotificationTO notificationTO) {\n+    public static void update(final NotificationTO notificationTO) {\n         getService(NotificationService.class).update(notificationTO);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(NotificationService.class).delete(key);\n     }\n "},{"sha":"78032c2597b1bfa23c9d46d3b870d638f4edcb92","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -36,7 +36,7 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final PolicyComparator COMPARATOR = new PolicyComparator();\n \n-    public <T extends PolicyTO> T getPolicy(final PolicyType type, final String key) {\n+    public static <T extends PolicyTO> T getPolicy(final PolicyType type, final String key) {\n         T policy = null;\n         try {\n             policy = getService(PolicyService.class).read(type, key);\n@@ -47,7 +47,7 @@ public <T extends PolicyTO> T getPolicy(final PolicyType type, final String key)\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n+    public static <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n         try {\n             return getService(PolicyService.class).<T>list(type).stream().\n                     sorted(COMPARATOR).\n@@ -58,15 +58,15 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n         }\n     }\n \n-    public <T extends PolicyTO> void createPolicy(final PolicyType type, final T policy) {\n+    public static <T extends PolicyTO> void createPolicy(final PolicyType type, final T policy) {\n         getService(PolicyService.class).create(type, policy);\n     }\n \n-    public <T extends PolicyTO> void updatePolicy(final PolicyType type, final T policy) {\n+    public static <T extends PolicyTO> void updatePolicy(final PolicyType type, final T policy) {\n         getService(PolicyService.class).update(type, policy);\n     }\n \n-    public void delete(final PolicyType type, final String key) {\n+    public static void delete(final PolicyType type, final String key) {\n         getService(PolicyService.class).delete(type, key);\n     }\n "},{"sha":"54ae734cc0a0d363f59f3259b5001fe278b41518","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RealmRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRealmRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -34,31 +34,31 @@ public class RealmRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n \n-    public List<RealmTO> list() {\n+    public static List<RealmTO> list() {\n         return getService(RealmService.class).list();\n     }\n \n-    public List<DynRealmTO> listDynReams() {\n+    public static List<DynRealmTO> listDynReams() {\n         return getService(DynRealmService.class).list();\n     }\n \n-    public DynRealmTO readDynReams(final String key) {\n+    public static DynRealmTO readDynReams(final String key) {\n         return getService(DynRealmService.class).read(key);\n     }\n \n-    public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO realmTO) {\n+    public static ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO realmTO) {\n         final Response response = getService(RealmService.class).create(parentPath, realmTO);\n         return response.readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n         });\n     }\n \n-    public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n+    public static ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         final Response response = getService(RealmService.class).update(realmTO);\n         return response.readEntity(new GenericType<ProvisioningResult<RealmTO>>() {\n         });\n     }\n \n-    public void delete(final String fullPath) {\n+    public static void delete(final String fullPath) {\n         getService(RealmService.class).delete(fullPath);\n     }\n }"},{"sha":"478eca1c402e9d935b83f7c610418dc6d2d8c32a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RelationshipTypeRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRelationshipTypeRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -27,23 +27,23 @@ public class RelationshipTypeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -5400007385180229980L;\n \n-    public void create(final RelationshipTypeTO relationshipType) {\n+    public static void create(final RelationshipTypeTO relationshipType) {\n         getService(RelationshipTypeService.class).create(relationshipType);\n     }\n \n-    public void update(final RelationshipTypeTO relationshipType) {\n+    public static void update(final RelationshipTypeTO relationshipType) {\n         getService(RelationshipTypeService.class).update(relationshipType);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(RelationshipTypeService.class).delete(key);\n     }\n \n-    public RelationshipTypeTO read(final String key) {\n+    public static RelationshipTypeTO read(final String key) {\n         return getService(RelationshipTypeService.class).read(key);\n     }\n \n-    public List<RelationshipTypeTO> list() {\n+    public static List<RelationshipTypeTO> list() {\n         List<RelationshipTypeTO> types = List.of();\n \n         try {"},{"sha":"3de8715e64c8a9720cb24adeccc4a095358c0bf4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -50,31 +50,31 @@ public class ReportRestClient extends BaseRestClient\n \n     private static final long serialVersionUID = 1644689667998953604L;\n \n-    public ReportTO read(final String reportKey) {\n+    public static ReportTO read(final String reportKey) {\n         return getService(ReportService.class).read(reportKey);\n     }\n \n-    public List<ReportTO> list() {\n+    public static List<ReportTO> list() {\n         return getService(ReportService.class).list();\n     }\n \n-    public JobTO getJob(final String key) {\n+    public static JobTO getJob(final String key) {\n         return getService(ReportService.class).getJob(key);\n     }\n \n-    public List<JobTO> listJobs() {\n+    public static List<JobTO> listJobs() {\n         return getService(ReportService.class).listJobs();\n     }\n \n-    public void actionJob(final String refKey, final JobAction jobAction) {\n+    public static void actionJob(final String refKey, final JobAction jobAction) {\n         getService(ReportService.class).actionJob(refKey, jobAction);\n     }\n \n-    public void create(final ReportTO reportTO) {\n+    public static void create(final ReportTO reportTO) {\n         getService(ReportService.class).create(reportTO);\n     }\n \n-    public void update(final ReportTO reportTO) {\n+    public static void update(final ReportTO reportTO) {\n         getService(ReportService.class).update(reportTO);\n     }\n \n@@ -83,7 +83,7 @@ public void update(final ReportTO reportTO) {\n      *\n      * @param reportKey report to delete\n      */\n-    public void delete(final String reportKey) {\n+    public static void delete(final String reportKey) {\n         getService(ReportService.class).delete(reportKey);\n     }\n \n@@ -102,7 +102,7 @@ public List<ExecTO> listRecentExecutions(final int max) {\n         return getService(ReportService.class).listRecentExecutions(max);\n     }\n \n-    public Response exportExecutionResult(final String executionKey, final ReportExecExportFormat fmt) {\n+    public static Response exportExecutionResult(final String executionKey, final ReportExecExportFormat fmt) {\n         return getService(ReportService.class).exportExecutionResult(executionKey, fmt);\n     }\n "},{"sha":"93f9da4a0d8fed16d2d60b2e1963d69d0ade3047","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/RoleRestClient.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -35,27 +35,27 @@ public class RoleRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -3161863874876938094L;\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(RoleService.class).delete(key);\n     }\n \n-    public RoleTO read(final String key) {\n+    public static RoleTO read(final String key) {\n         return getService(RoleService.class).read(key);\n     }\n \n-    public void update(final RoleTO roleTO) {\n+    public static void update(final RoleTO roleTO) {\n         getService(RoleService.class).update(roleTO);\n     }\n \n-    public void create(final RoleTO roleTO) {\n+    public static void create(final RoleTO roleTO) {\n         getService(RoleService.class).create(roleTO);\n     }\n \n-    public List<RoleTO> list() {\n+    public static List<RoleTO> list() {\n         return getService(RoleService.class).list();\n     }\n \n-    public String readConsoleLayoutInfo(final String roleKey) {\n+    public static String readConsoleLayoutInfo(final String roleKey) {\n         try {\n             return IOUtils.toString(InputStream.class.cast(\n                     getService(RoleService.class).getConsoleLayoutInfo(roleKey).getEntity()),\n@@ -66,16 +66,16 @@ public String readConsoleLayoutInfo(final String roleKey) {\n         }\n     }\n \n-    public void setConsoleLayoutInfo(final String roleKey, final String content) {\n+    public static void setConsoleLayoutInfo(final String roleKey, final String content) {\n         getService(RoleService.class).setConsoleLayoutInfo(\n                 roleKey, IOUtils.toInputStream(content, StandardCharsets.UTF_8));\n     }\n \n-    public void removeConsoleLayoutInfo(final String roleKey) {\n+    public static void removeConsoleLayoutInfo(final String roleKey) {\n         getService(RoleService.class).removeConsoleLayoutInfo(roleKey);\n     }\n \n-    public List<String> getAllAvailableEntitlements() {\n+    public static List<String> getAllAvailableEntitlements() {\n         List<String> entitlements = new ArrayList<>(getSyncopeService().platform().getEntitlements());\n         Collections.sort(entitlements);\n         return entitlements;"},{"sha":"957de8a0f0b3684db597a47d31e8a19a0b6dc3bc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,7 +42,7 @@ public class SchemaRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2479730152700312373L;\n \n-    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final AnyTypeKind kind) {\n+    public static <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final AnyTypeKind kind) {\n         final AnyTypeService client = getService(AnyTypeService.class);\n \n         final List<String> classes = new ArrayList<>();\n@@ -57,16 +57,16 @@ public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, fina\n                 break;\n \n             default:\n-                new AnyTypeRestClient().listAnyTypes().stream().filter(\n+                AnyTypeRestClient.listAnyTypes().stream().filter(\n                         anyTypeTO -> (anyTypeTO.getKind() != AnyTypeKind.USER\n                         && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n                         forEach((anyTypeTO) -> classes.addAll(anyTypeTO.getClasses()));\n         }\n         return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n     }\n \n-    public <T extends SchemaTO> List<T> getSchemas(\n-            final SchemaType schemaType, final String keyword, final String... anyTypeClasses) {\n+    public static <T extends SchemaTO> List<T> getSchemas(\n+        final SchemaType schemaType, final String keyword, final String... anyTypeClasses) {\n \n         SchemaQuery.Builder builder = new SchemaQuery.Builder().type(schemaType);\n         if (StringUtils.isNotBlank(keyword)) {\n@@ -85,7 +85,7 @@ public <T extends SchemaTO> List<T> getSchemas(\n         return schemas;\n     }\n \n-    public List<String> getSchemaNames(final SchemaType schemaType) {\n+    public static List<String> getSchemaNames(final SchemaType schemaType) {\n         List<String> schemaNames = List.of();\n \n         try {\n@@ -98,44 +98,44 @@ public List<String> getSchemaNames(final SchemaType schemaType) {\n         return schemaNames;\n     }\n \n-    public List<String> getPlainSchemaNames() {\n+    public static List<String> getPlainSchemaNames() {\n         return getSchemaNames(SchemaType.PLAIN);\n     }\n \n-    public List<String> getDerSchemaNames() {\n+    public static List<String> getDerSchemaNames() {\n         return getSchemaNames(SchemaType.DERIVED);\n     }\n \n-    public List<String> getVirSchemaNames() {\n+    public static List<String> getVirSchemaNames() {\n         return getSchemaNames(SchemaType.VIRTUAL);\n     }\n \n-    public PlainSchemaTO read(final SchemaType schemaType, final String key) {\n+    public static PlainSchemaTO read(final SchemaType schemaType, final String key) {\n         return getService(SchemaService.class).read(schemaType, key);\n \n     }\n \n-    public void create(final SchemaType schemaType, final SchemaTO modelObject) {\n+    public static void create(final SchemaType schemaType, final SchemaTO modelObject) {\n         getService(SchemaService.class).create(schemaType, modelObject);\n     }\n \n-    public void update(final SchemaType schemaType, final SchemaTO modelObject) {\n+    public static void update(final SchemaType schemaType, final SchemaTO modelObject) {\n         getService(SchemaService.class).update(schemaType, modelObject);\n     }\n \n-    public PlainSchemaTO deletePlainSchema(final String name) {\n+    public static PlainSchemaTO deletePlainSchema(final String name) {\n         PlainSchemaTO response = getService(SchemaService.class).read(SchemaType.PLAIN, name);\n         getService(SchemaService.class).delete(SchemaType.PLAIN, name);\n         return response;\n     }\n \n-    public DerSchemaTO deleteDerSchema(final String name) {\n+    public static DerSchemaTO deleteDerSchema(final String name) {\n         DerSchemaTO schemaTO = getService(SchemaService.class).read(SchemaType.DERIVED, name);\n         getService(SchemaService.class).delete(SchemaType.DERIVED, name);\n         return schemaTO;\n     }\n \n-    public VirSchemaTO deleteVirSchema(final String name) {\n+    public static VirSchemaTO deleteVirSchema(final String name) {\n         VirSchemaTO schemaTO = getService(SchemaService.class).read(SchemaType.VIRTUAL, name);\n         getService(SchemaService.class).delete(SchemaType.VIRTUAL, name);\n         return schemaTO;"},{"sha":"28d04b3d5edf6e78ea3f7b8e1af47a0bea5023be","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SecurityQuestionRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSecurityQuestionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSecurityQuestionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSecurityQuestionRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -26,23 +26,23 @@ public class SecurityQuestionRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -3167730221361895176L;\n \n-    public List<SecurityQuestionTO> list() {\n+    public static List<SecurityQuestionTO> list() {\n         return getService(SecurityQuestionService.class).list();\n     }\n \n-    public void create(final SecurityQuestionTO securityQuestionTO) {\n+    public static void create(final SecurityQuestionTO securityQuestionTO) {\n         getService(SecurityQuestionService.class).create(securityQuestionTO);\n     }\n \n-    public void update(final SecurityQuestionTO securityQuestionTO) {\n+    public static void update(final SecurityQuestionTO securityQuestionTO) {\n         getService(SecurityQuestionService.class).update(securityQuestionTO);\n     }\n \n-    public void delete(final String securityQuestionKey) {\n+    public static void delete(final String securityQuestionKey) {\n         getService(SecurityQuestionService.class).delete(securityQuestionKey);\n     }\n \n-    public SecurityQuestionTO readByUser(final String username) {\n+    public static SecurityQuestionTO readByUser(final String username) {\n         return getService(SecurityQuestionService.class).readByUser(username);\n     }\n "},{"sha":"d70a03de1023c5f5598460ecab201e2d59a8d1b9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SyncopeRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -27,15 +27,15 @@ public class SyncopeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -9013241672773442286L;\n \n-    public NumbersInfo numbers() {\n+    public static NumbersInfo numbers() {\n         return getService(SyncopeService.class).numbers();\n     }\n \n-    public SystemInfo system() {\n+    public static SystemInfo system() {\n         return getService(SyncopeService.class).system();\n     }\n \n-    public Response exportInternalStorageContent() {\n+    public static Response exportInternalStorageContent() {\n         return getService(SyncopeService.class).exportInternalStorageContent();\n     }\n }"},{"sha":"d992cb7f06901decc8cf35ef1910ad336a653d59","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -53,35 +53,35 @@ public class TaskRestClient extends BaseRestClient implements ExecutionRestClien\n \n     private static final long serialVersionUID = 6284485820911028843L;\n \n-    public JobTO getJob(final String key) {\n+    public static JobTO getJob(final String key) {\n         return getService(TaskService.class).getJob(key);\n     }\n \n-    public List<JobTO> listJobs() {\n+    public static List<JobTO> listJobs() {\n         return getService(TaskService.class).listJobs();\n     }\n \n-    public void actionJob(final String refKey, final JobAction jobAction) {\n+    public static void actionJob(final String refKey, final JobAction jobAction) {\n         getService(TaskService.class).actionJob(refKey, jobAction);\n     }\n \n-    public int count(final TaskType kind) {\n+    public static int count(final TaskType kind) {\n         return getService(TaskService.class).search(\n                 new TaskQuery.Builder(kind).page(1).size(1).build()).getTotalCount();\n     }\n \n-    public int count(final String resource, final TaskType kind) {\n+    public static int count(final String resource, final TaskType kind) {\n         return getService(TaskService.class).search(\n                 new TaskQuery.Builder(kind).resource(resource).page(1).size(1).build()).getTotalCount();\n     }\n \n-    public int count(final AnyTypeKind anyTypeKind, final String entityKey, final TaskType kind) {\n+    public static int count(final AnyTypeKind anyTypeKind, final String entityKey, final TaskType kind) {\n         return getService(TaskService.class).search(\n                 new TaskQuery.Builder(kind).anyTypeKind(anyTypeKind).entityKey(entityKey).page(1).size(1).build()).\n                 getTotalCount();\n     }\n \n-    public int count(final AnyTypeKind anyTypeKind, final String entityKey, final String notification) {\n+    public static int count(final AnyTypeKind anyTypeKind, final String entityKey, final String notification) {\n         return getService(TaskService.class).search(\n                 new TaskQuery.Builder(TaskType.NOTIFICATION).notification(notification).\n                         anyTypeKind(anyTypeKind).entityKey(entityKey).page(1).size(1).build()).\n@@ -94,7 +94,7 @@ public int countExecutions(final String taskKey) {\n                 listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(1).build()).getTotalCount();\n     }\n \n-    public List<PropagationTaskTO> listPropagationTasks(\n+    public static List<PropagationTaskTO> listPropagationTasks(\n             final String resource, final int page, final int size, final SortParam<String> sort) {\n \n         return getService(TaskService.class).\n@@ -105,7 +105,7 @@ public List<PropagationTaskTO> listPropagationTasks(\n                 getResult();\n     }\n \n-    public List<PropagationTaskTO> listPropagationTasks(\n+    public static List<PropagationTaskTO> listPropagationTasks(\n             final AnyTypeKind anyTypeKind, final String entityKey,\n             final int page, final int size, final SortParam<String> sort) {\n \n@@ -117,7 +117,7 @@ public List<PropagationTaskTO> listPropagationTasks(\n                 getResult();\n     }\n \n-    public List<NotificationTaskTO> listNotificationTasks(\n+    public static List<NotificationTaskTO> listNotificationTasks(\n             final String notification,\n             final AnyTypeKind anyTypeKind,\n             final String entityKey,\n@@ -144,21 +144,21 @@ public List<NotificationTaskTO> listNotificationTasks(\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends TaskTO> List<T> list(\n-            final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n+    public static <T extends TaskTO> List<T> list(\n+        final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n                 search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).\n                         orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends TaskTO> List<T> list(\n-            final String resource,\n-            final Class<T> reference,\n-            final int page,\n-            final int size,\n-            final SortParam<String> sort) {\n+    public static <T extends TaskTO> List<T> list(\n+        final String resource,\n+        final Class<T> reference,\n+        final int page,\n+        final int size,\n+        final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n                 search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).resource(resource).\n@@ -174,7 +174,7 @@ public List<ExecTO> listExecutions(\n                         orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n-    private TaskType getTaskType(final Class<?> reference) {\n+    private static TaskType getTaskType(final Class<?> reference) {\n         TaskType result = null;\n         if (PropagationTaskTO.class.equals(reference)) {\n             result = TaskType.PROPAGATION;\n@@ -190,19 +190,19 @@ private TaskType getTaskType(final Class<?> reference) {\n         return result;\n     }\n \n-    public PropagationTaskTO readPropagationTask(final String taskKey) {\n+    public static PropagationTaskTO readPropagationTask(final String taskKey) {\n         return getService(TaskService.class).read(TaskType.PROPAGATION, taskKey, false);\n     }\n \n-    public NotificationTaskTO readNotificationTask(final String taskKey) {\n+    public static NotificationTaskTO readNotificationTask(final String taskKey) {\n         return getService(TaskService.class).read(TaskType.NOTIFICATION, taskKey, false);\n     }\n \n-    public <T extends TaskTO> T readTask(final TaskType type, final String taskKey) {\n+    public static <T extends TaskTO> T readTask(final TaskType type, final String taskKey) {\n         return getService(TaskService.class).read(type, taskKey, false);\n     }\n \n-    public void delete(final TaskType type, final String taskKey) {\n+    public static void delete(final TaskType type, final String taskKey) {\n         getService(TaskService.class).delete(type, taskKey);\n     }\n \n@@ -211,7 +211,7 @@ public void startExecution(final String taskKey, final Date start) {\n         startExecution(taskKey, start, false);\n     }\n \n-    public void startExecution(final String taskKey, final Date start, final boolean dryRun) {\n+    public static void startExecution(final String taskKey, final Date start, final boolean dryRun) {\n         getService(TaskService.class).execute(\n                 new ExecuteQuery.Builder().key(taskKey).startAt(start).dryRun(dryRun).build());\n     }\n@@ -226,11 +226,11 @@ public List<ExecTO> listRecentExecutions(final int max) {\n         return getService(TaskService.class).listRecentExecutions(max);\n     }\n \n-    public void create(final TaskType type, final SchedTaskTO taskTO) {\n+    public static void create(final TaskType type, final SchedTaskTO taskTO) {\n         getService(TaskService.class).create(type, taskTO);\n     }\n \n-    public void update(final TaskType type, final SchedTaskTO taskTO) {\n+    public static void update(final TaskType type, final SchedTaskTO taskTO) {\n         getService(TaskService.class).update(type, taskTO);\n     }\n "},{"sha":"f95d253ea306b7b43241940b1fbc52b04c4ce9cf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -52,7 +52,7 @@ protected Class<? extends AnyService<UserTO>> getAnyServiceClass() {\n         return UserService.class;\n     }\n \n-    public ProvisioningResult<UserTO> create(final UserCR createReq) {\n+    public static ProvisioningResult<UserTO> create(final UserCR createReq) {\n         Response response = getService(UserService.class).create(createReq);\n         return response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         });"},{"sha":"0d8f3b6aa1cca2afa6fa349621a729d212b0b800","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -24,7 +24,7 @@ public class UserSelfRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 100731599744900931L;\n \n-    public void changePassword(final String password) {\n+    public static void changePassword(final String password) {\n         getService(UserSelfService.class).mustChangePassword(password);\n     }\n "},{"sha":"b37df0d843da5e9772f659d2a08da7f649dd9dfc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/AnyPropagationTaskDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTaskDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Iterator;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -60,13 +61,13 @@ public AnyPropagationTasksProvider(final int paginatorRows) {\n \n         @Override\n         public long size() {\n-            return restClient.count(anyTypeKind, entityKey, taskType);\n+            return TaskRestClient.count(anyTypeKind, entityKey, taskType);\n         }\n \n         @Override\n         public Iterator<PropagationTaskTO> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.listPropagationTasks(\n+            return TaskRestClient.listPropagationTasks(\n                     anyTypeKind, entityKey, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }"},{"sha":"997b3e89985114c1ff33122cbb0d2e12c5ac1c89","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/CrontabPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCrontabPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -139,7 +139,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         });\n     }\n \n-    private String getCronField(final FormComponent<?> formComponent, final int field) {\n+    private static String getCronField(final FormComponent<?> formComponent, final int field) {\n         String cronField = null;\n \n         if (formComponent != null) {\n@@ -149,7 +149,7 @@ private String getCronField(final FormComponent<?> formComponent, final int fiel\n         return cronField;\n     }\n \n-    private String getCronField(final String cron, final int field) {\n+    private static String getCronField(final String cron, final int field) {\n         String cronField = null;\n \n         if (cron != null && !cron.isEmpty() && !\"UNSCHEDULE\".equals(cron)) {\n@@ -170,11 +170,11 @@ public String getCronExpression() {\n                 && daysOfWeek != null && daysOfWeek.getModelObject() != null) {\n \n             cronExpression = new StringBuilder().\n-                    append(seconds.getModelObject().trim()).append(\" \").\n-                    append(minutes.getModelObject().trim()).append(\" \").\n-                    append(hours.getModelObject().trim()).append(\" \").\n-                    append(daysOfMonth.getModelObject().trim()).append(\" \").\n-                    append(months.getModelObject().trim()).append(\" \").\n+                    append(seconds.getModelObject().trim()).append(' ').\n+                    append(minutes.getModelObject().trim()).append(' ').\n+                    append(hours.getModelObject().trim()).append(' ').\n+                    append(daysOfMonth.getModelObject().trim()).append(' ').\n+                    append(months.getModelObject().trim()).append(' ').\n                     append(daysOfWeek.getModelObject().trim()).toString();\n         }\n "},{"sha":"6579d5491f75ad35f4ab0c15bb95ff8c0a7899fd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.commons.TaskDataProvider;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -160,7 +161,7 @@ public void onClick(final AjaxRequestTarget target, final NotificationTaskTO mod\n             @Override\n             public void onClick(final AjaxRequestTarget target, final NotificationTaskTO modelObject) {\n                 try {\n-                    restClient.delete(TaskType.NOTIFICATION, taskTO.getKey());\n+                    TaskRestClient.delete(TaskType.NOTIFICATION, taskTO.getKey());\n                     updateResultTable(target);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n@@ -218,13 +219,13 @@ public NotificationTasksProvider(\n \n         @Override\n         public long size() {\n-            return restClient.count(anyTypeKind, entityKey, notification);\n+            return TaskRestClient.count(anyTypeKind, entityKey, notification);\n         }\n \n         @Override\n         public Iterator<NotificationTaskTO> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.listNotificationTasks(\n+            return TaskRestClient.listNotificationTasks(\n                     notification, anyTypeKind, entityKey, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }"},{"sha":"11e56dec8c695f654c27436b49bd622b8c290570","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.commons.TaskDataProvider;\n import org.apache.syncope.client.console.pages.BasePage;\n@@ -167,7 +168,7 @@ public void onClick(final AjaxRequestTarget target, final PropagationTaskTO mode\n             @Override\n             public void onClick(final AjaxRequestTarget target, final PropagationTaskTO modelObject) {\n                 try {\n-                    restClient.delete(TaskType.PROPAGATION, taskTO.getKey());\n+                    TaskRestClient.delete(TaskType.PROPAGATION, taskTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                     PropagationTaskDirectoryPanel.this.getTogglePanel().close(target);\n@@ -211,13 +212,13 @@ public PropagationTasksProvider(final int paginatorRows) {\n \n         @Override\n         public long size() {\n-            return restClient.count(resource, TaskType.PROPAGATION);\n+            return TaskRestClient.count(resource, TaskType.PROPAGATION);\n         }\n \n         @Override\n         public Iterator<PropagationTaskTO> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.listPropagationTasks(\n+            return TaskRestClient.listPropagationTasks(\n                     resource, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }"},{"sha":"a861d4d227452108bfc6def0fba845697495bc9c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -22,6 +22,7 @@\n import java.util.Iterator;\n import java.util.List;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n@@ -141,7 +142,7 @@ public void populateItem(\n \n                 Component panel;\n                 try {\n-                    JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n+                    JobTO jobTO = TaskRestClient.getJob(rowModel.getObject().getKey());\n                     panel = new JobActionPanel(componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this, pageRef);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\",\n@@ -186,13 +187,13 @@ public ProvisioningTasksProvider(final Class<T> reference, final TaskType id, fi\n \n         @Override\n         public long size() {\n-            return restClient.count(resource, taskType);\n+            return TaskRestClient.count(resource, taskType);\n         }\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.list(\n+            return TaskRestClient.list(\n                     resource, reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }"},{"sha":"354a8359ace8e0d73f0de75598f37fc47e0f62dd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskFilters.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -49,7 +49,7 @@ public PushTaskFilters(final PushTaskWrapper pushTaskWrapper) {\n \n             @Override\n             protected List<AnyTypeTO> load() {\n-                return new AnyTypeRestClient().listAnyTypes();\n+                return AnyTypeRestClient.listAnyTypes();\n             }\n         };\n "},{"sha":"847b69a82ccb6094b0aeb8bf3abcd5439f2c8d19","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -120,7 +120,7 @@ protected Serializable onApplyInternal(\n                     final TemplatableTO targetObject, final String type, final AnyTO anyTO) {\n \n                 targetObject.getTemplates().put(type, anyTO);\n-                new TaskRestClient().update(taskType, SchedTaskTO.class.cast(targetObject));\n+                TaskRestClient.update(taskType, SchedTaskTO.class.cast(targetObject));\n                 return targetObject;\n             }\n         };\n@@ -208,7 +208,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n                 send(SchedTaskDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                restClient.readTask(taskType, model.getObject().getKey()),\n+                                TaskRestClient.readTask(taskType, model.getObject().getKey()),\n                                 target).setResourceModel(\n                                 new StringResourceModel(\"inner.task.edit\",\n                                         SchedTaskDirectoryPanel.this,\n@@ -255,7 +255,7 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 try {\n-                    restClient.delete(taskType, taskTO.getKey());\n+                    TaskRestClient.delete(taskType, taskTO.getKey());\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                     SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n@@ -307,13 +307,13 @@ public SchedTasksProvider(final Class<T> reference, final TaskType taskType, fin\n \n         @Override\n         public long size() {\n-            return restClient.count(taskType);\n+            return TaskRestClient.count(taskType);\n         }\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return restClient.list(\n+            return TaskRestClient.list(\n                     reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }"},{"sha":"a5eba127d14c9bcfb94955a98706e32e21bee435","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -55,8 +55,6 @@\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private final TaskRestClient restClient = new TaskRestClient();\n-\n     private final TaskType type;\n \n     private PushTaskWrapper wrapper;\n@@ -69,7 +67,7 @@\n \n         @Override\n         protected List<String> load() {\n-            List<String> result = new RealmRestClient().list().stream().\n+            List<String> result = RealmRestClient.list().stream().\n                     map(RealmTO::getFullPath).collect(Collectors.toList());\n             Collections.sort(result);\n \n@@ -90,9 +88,9 @@ protected Serializable onApplyInternal(final SchedTaskTO modelObject) {\n \n         modelObject.setCronExpression(crontabPanel.getCronExpression());\n         if (modelObject.getKey() == null) {\n-            restClient.create(type, modelObject);\n+            TaskRestClient.create(type, modelObject);\n         } else {\n-            restClient.update(type, modelObject);\n+            TaskRestClient.update(type, modelObject);\n         }\n         return modelObject;\n     }"},{"sha":"6e9577018292c5c085b69ed3b0a92396097946a7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskAttributesDetailsView.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskAttributesDetailsView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskAttributesDetailsView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskAttributesDetailsView.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -64,7 +64,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n \n     }\n \n-    private String getJSONInfo(final PropagationTaskTO taskTO) {\n+    private static String getJSONInfo(final PropagationTaskTO taskTO) {\n         String json = \"\";\n         try {\n             JsonNode list = MAPPER.readTree(taskTO.getAttributes());"},{"sha":"d330bd754569af720a7e158610312bbe0c784dee","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -80,7 +80,7 @@ public TasksProvider(final int paginatorRows, final TaskType id) {\n \n         @Override\n         public long size() {\n-            return restClient.count(id);\n+            return TaskRestClient.count(id);\n         }\n \n         @Override"},{"sha":"aa32a348407b634949621f44ffe61ead28c0c9be","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskStartAtTogglePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskStartAtTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskStartAtTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskStartAtTogglePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -44,7 +44,7 @@ public TaskStartAtTogglePanel(final WebMarkupContainer container, final PageRefe\n             @Override\n             protected void onSubmit(final AjaxRequestTarget target) {\n                 try {\n-                    getRestClient().startExecution(key, startAtDateModel.getObject(), true);\n+                    TaskRestClient.startExecution(key, startAtDateModel.getObject(), true);\n                     SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                     toggle(target, false);\n                     target.add(container);"},{"sha":"6de26bfd947a8cdfd14a88d3336baae7f09da94e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TemplatesTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTemplatesTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTemplatesTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTemplatesTogglePanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -70,7 +70,7 @@ public abstract class TemplatesTogglePanel extends TogglePanel<Serializable> {\n \n         @Override\n         protected List<String> load() {\n-            return new AnyTypeRestClient().list();\n+            return AnyTypeRestClient.list();\n         }\n     };\n \n@@ -102,7 +102,7 @@ protected void onSubmit(final AjaxRequestTarget target) {\n                             Model.of(Pair.of(typeModel.getObject(), targetObject))).setDefaultValue(\n                             \"Edit template\"));\n \n-                    final List<String> classes = new AnyTypeRestClient().read(typeModel.getObject()).getClasses();\n+                    final List<String> classes = AnyTypeRestClient.read(typeModel.getObject()).getClasses();\n \n                     final TemplateWizardBuilder<?> builder;\n "},{"sha":"8a175a3efc010e5f446bf46c5e96d44436ccb028","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/form/AbstractAjaxDownloadBehavior.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FAbstractAjaxDownloadBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FAbstractAjaxDownloadBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FAbstractAjaxDownloadBehavior.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -39,7 +39,7 @@ public abstract class AbstractAjaxDownloadBehavior extends AbstractAjaxBehavior\n      */\n     public void initiate(final AjaxRequestTarget target) {\n         CharSequence url = getCallbackUrl();\n-        target.appendJavaScript(\"window.location.href='\" + url + \"'\");\n+        target.appendJavaScript(\"window.location.href='\" + url + '\\'');\n     }\n \n     @Override"},{"sha":"6db2776a39a20cc3dd874db3bc6666fa3f63366c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -40,7 +40,7 @@\n     public AttrColumn(final String name, final SchemaType schemaType) {\n         // set sortProperty to schematype#name (e.g. derivedSchema#cn, \n         // for use with SortableUserProviderComparator.AttrModel#getObject)\n-        super(new ResourceModel(name, name), schemaType.name() + \"#\" + name);\n+        super(new ResourceModel(name, name), schemaType.name() + '#' + name);\n         this.name = name;\n         this.schemaType = schemaType;\n     }"},{"sha":"1cf45e659ccc5314770fba6f3ba6c4429f57b59d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ConnObjectAttrColumn.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FConnObjectAttrColumn.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -39,7 +39,7 @@ public class ConnObjectAttrColumn extends AbstractColumn<ConnObjectTO, String> {\n     public ConnObjectAttrColumn(final String name, final SchemaType schemaType) {\n         // set sortProperty to schematype#name (e.g. derivedSchema#cn, \n         // for use with SortableUserProviderComparator.AttrModel#getObject)\n-        super(new ResourceModel(name, name), schemaType.name() + \"#\" + name);\n+        super(new ResourceModel(name, name), schemaType.name() + '#' + name);\n         this.name = name;\n     }\n "},{"sha":"f071ed3910782fd00cce954da2ee39f448763a2e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/head/MetaHeaderItem.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -39,7 +39,7 @@ public MetaHeaderItem(final String key, final String value) {\n \n     @Override\n     public Iterable<?> getRenderTokens() {\n-        return List.of(\"meta-\" + key + \"-\" + value);\n+        return List.of(\"meta-\" + key + '-' + value);\n     }\n \n     @Override"},{"sha":"114da98494d15e9f22739378c48d15faa47101d8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDownload.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -69,11 +69,11 @@ public void initiate(final AjaxRequestTarget target) {\n     public void onRequest() {\n         HttpResourceStream stream = getResourceStream();\n         ResourceStreamRequestHandler handler = new ResourceStreamRequestHandler(stream);\n-        String key = StringUtils.isNotBlank(fileKey) ? fileKey + \"_\" : \"\";\n+        String key = StringUtils.isNotBlank(fileKey) ? fileKey + '_' : \"\";\n         String ext = \"\";\n         if (StringUtils.isNotBlank(mimeType)) {\n             String extByMimeType = mimeTypesLoader.getFileExt(mimeType);\n-            ext = StringUtils.isBlank(extByMimeType) ? \".bin\" : (\".\" + extByMimeType);\n+            ext = StringUtils.isBlank(extByMimeType) ? \".bin\" : ('.' + extByMimeType);\n         }\n         String fileName = key + (stream.getFilename() == null ? name : stream.getFilename()) + ext;\n "},{"sha":"4a98a4ea35fe78b5e1a43dc9f7474429f445e992","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -147,7 +147,7 @@ public String build() {\n         field = new TextField<>(\"textField\", model);\n         add(field.setLabel(new Model<>(name)).setOutputMarkupId(true));\n \n-        uploadForm.add(new Label(\"preview\", StringUtils.isBlank(mimeType) ? StringUtils.EMPTY : \"(\" + mimeType + \")\"));\n+        uploadForm.add(new Label(\"preview\", StringUtils.isBlank(mimeType) ? StringUtils.EMPTY : '(' + mimeType + ')'));\n \n         fileDownload = new AjaxDownload(name, fileKey, mimeType, true) {\n \n@@ -281,7 +281,7 @@ public FieldPanel<String> setNewModel(final IModel<String> model) {\n         if (StringUtils.isNotBlank(modelObj)) {\n             final Component panelPreview;\n             if (previewer == null) {\n-                panelPreview = previewUtils.getDefaultPreviewer(mimeType);\n+                panelPreview = PreviewUtils.getDefaultPreviewer(mimeType);\n             } else {\n                 panelPreview = previewer.preview(modelObj);\n             }"},{"sha":"a156f93abc2c022fe57a293b83c84f36de75b9e9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/SelectableRecorder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -86,7 +86,7 @@ private void initIds() {\n         while (selection.hasNext()) {\n             modelStringBuffer.append(renderer.getIdValue(selection.next(), i++));\n             if (selection.hasNext()) {\n-                modelStringBuffer.append(\",\");\n+                modelStringBuffer.append(',');\n             }\n         }\n "},{"sha":"77a51d4274dacd8f9a7943de4a3f0dae977ab635","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobActionPanel.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -49,12 +49,6 @@ public class JobActionPanel extends WizardMgtPanel<Serializable> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(JobActionPanel.class);\n \n-    private final NotificationRestClient notificationRestClient = new NotificationRestClient();\n-\n-    private final ReportRestClient reportRestClient = new ReportRestClient();\n-\n-    private final TaskRestClient taskRestClient = new TaskRestClient();\n-\n     public JobActionPanel(\n             final String id,\n             final JobTO jobTO,\n@@ -82,15 +76,15 @@ public void onClick(final AjaxRequestTarget target) {\n                     try {\n                         switch (jobTO.getType()) {\n                             case NOTIFICATION:\n-                                notificationRestClient.actionJob(JobAction.STOP);\n+                                NotificationRestClient.actionJob(JobAction.STOP);\n                                 break;\n \n                             case REPORT:\n-                                reportRestClient.actionJob(jobTO.getRefKey(), JobAction.STOP);\n+                                ReportRestClient.actionJob(jobTO.getRefKey(), JobAction.STOP);\n                                 break;\n \n                             case TASK:\n-                                taskRestClient.actionJob(jobTO.getRefKey(), JobAction.STOP);\n+                                TaskRestClient.actionJob(jobTO.getRefKey(), JobAction.STOP);\n                                 break;\n \n                             default:\n@@ -116,15 +110,15 @@ public void onClick(final AjaxRequestTarget target) {\n                     try {\n                         switch (jobTO.getType()) {\n                             case NOTIFICATION:\n-                                notificationRestClient.actionJob(JobAction.START);\n+                                NotificationRestClient.actionJob(JobAction.START);\n                                 break;\n \n                             case REPORT:\n-                                reportRestClient.actionJob(jobTO.getRefKey(), JobAction.START);\n+                                ReportRestClient.actionJob(jobTO.getRefKey(), JobAction.START);\n                                 break;\n \n                             case TASK:\n-                                taskRestClient.actionJob(jobTO.getRefKey(), JobAction.START);\n+                                TaskRestClient.actionJob(jobTO.getRefKey(), JobAction.START);\n                                 break;\n \n                             default:"},{"sha":"a789c70e8a6d76c3a7c200a11ca6a38e124efce3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -125,8 +125,6 @@ protected void onConfigure() {\n         }\n     };\n \n-    private final NotificationRestClient notificationRestClient = new NotificationRestClient();\n-\n     private final TaskRestClient taskRestClient = new TaskRestClient();\n \n     private final ReportRestClient reportRestClient = new ReportRestClient();\n@@ -218,20 +216,20 @@ protected void onTimer(final AjaxRequestTarget target) {\n         add(actionTogglePanel);\n     }\n \n-    private List<JobTO> getUpdatedAvailable() {\n+    private static List<JobTO> getUpdatedAvailable() {\n         List<JobTO> updatedAvailable = new ArrayList<>();\n \n         if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.NOTIFICATION_LIST)) {\n-            JobTO notificationJob = notificationRestClient.getJob();\n+            JobTO notificationJob = NotificationRestClient.getJob();\n             if (notificationJob != null) {\n                 updatedAvailable.add(notificationJob);\n             }\n         }\n         if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.TASK_LIST)) {\n-            updatedAvailable.addAll(taskRestClient.listJobs());\n+            updatedAvailable.addAll(TaskRestClient.listJobs());\n         }\n         if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.REPORT_LIST)) {\n-            updatedAvailable.addAll(reportRestClient.listJobs());\n+            updatedAvailable.addAll(ReportRestClient.listJobs());\n         }\n \n         return updatedAvailable;\n@@ -393,7 +391,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                             break;\n \n                         case REPORT:\n-                            ReportTO reportTO = reportRestClient.read(jobTO.getRefKey());\n+                            ReportTO reportTO = ReportRestClient.read(jobTO.getRefKey());\n \n                             ReportWizardBuilder rwb = new ReportWizardBuilder(reportTO, pageRef);\n                             rwb.setEventSink(AvailableJobsPanel.this);\n@@ -411,11 +409,11 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                         case TASK:\n                             ProvisioningTaskTO schedTaskTO;\n                             try {\n-                                schedTaskTO = taskRestClient.readTask(TaskType.PULL, jobTO.getRefKey());\n+                                schedTaskTO = TaskRestClient.readTask(TaskType.PULL, jobTO.getRefKey());\n                             } catch (Exception e) {\n                                 LOG.debug(\"Failed to read {} as {}, attempting {}\",\n                                         jobTO.getRefKey(), TaskType.PULL, TaskType.PUSH, e);\n-                                schedTaskTO = taskRestClient.readTask(TaskType.PUSH, jobTO.getRefKey());\n+                                schedTaskTO = TaskRestClient.readTask(TaskType.PUSH, jobTO.getRefKey());\n                             }\n \n                             SchedTaskWizardBuilder<ProvisioningTaskTO> swb =\n@@ -459,7 +457,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n \n                             case REPORT:\n \n-                                final ReportTO reportTO = reportRestClient.read(jobTO.getRefKey());\n+                                final ReportTO reportTO = ReportRestClient.read(jobTO.getRefKey());\n \n                                 target.add(AvailableJobsPanel.this.reportModal.setContent(\n                                         new ReportletDirectoryPanel(reportModal, jobTO.getRefKey(), pageRef)));\n@@ -506,11 +504,11 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                                     break;\n \n                                 case REPORT:\n-                                    reportRestClient.actionJob(jobTO.getRefKey(), JobAction.DELETE);\n+                                    ReportRestClient.actionJob(jobTO.getRefKey(), JobAction.DELETE);\n                                     break;\n \n                                 case TASK:\n-                                    taskRestClient.actionJob(jobTO.getRefKey(), JobAction.DELETE);\n+                                    TaskRestClient.actionJob(jobTO.getRefKey(), JobAction.DELETE);\n                                     break;\n \n                                 default:"},{"sha":"ce3430e784b031907a4db053df0622d46b9bf724","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/LoadWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FLoadWidget.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -41,7 +41,7 @@ public LoadWidget(final String id, final SystemInfo systeminfo) {\n         add(chart);\n     }\n \n-    private Line build(final SystemInfo systeminfo) {\n+    private static Line build(final SystemInfo systeminfo) {\n         List<Double> cpuValues = new ArrayList<>();\n         List<Long> memValues = new ArrayList<>();\n "},{"sha":"b002146388a08a0b802f49a67c30a6614ea25c7e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/NumberWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FNumberWidget.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,12 +46,12 @@ public NumberWidget(final String id, final String bg, final int number, final St\n         setOutputMarkupId(true);\n \n         WebMarkupContainer box = new WebMarkupContainer(\"box\");\n-        box.add(new AttributeAppender(\"class\", \" \" + bg));\n+        box.add(new AttributeAppender(\"class\", ' ' + bg));\n \n         boolean isAuthorized = true;\n         final PageParameters pageParameters = new PageParameters();\n         final Class<? extends IRequestablePage> responsePage;\n-        List<String> anyTypes = new AnyTypeRestClient().list();\n+        List<String> anyTypes = AnyTypeRestClient.list();\n         switch (id) {\n             case \"totalUsers\":\n                 pageParameters.add(\"selectedIndex\", 1);"},{"sha":"552cfc929c5647ee9063fecd3b584e53a249287e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ProgressPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FProgressPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FProgressPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FProgressPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -37,8 +37,8 @@ public ProgressPanel(final String id, final ProgressBean progressBean) {\n         add(new Label(\"total\", progressBean.getTotal()));\n \n         WebMarkupContainer progress = new WebMarkupContainer(\"progress\");\n-        progress.add(new AttributeModifier(\"style\", \"width: \" + progressBean.getPercent() + \"%\"));\n-        progress.add(new AttributeAppender(\"class\", \" \" + progressBean.getCssClass()));\n+        progress.add(new AttributeModifier(\"style\", \"width: \" + progressBean.getPercent() + '%'));\n+        progress.add(new AttributeAppender(\"class\", ' ' + progressBean.getCssClass()));\n         add(progress);\n     }\n "},{"sha":"c285855d2b2a0e712f265e0b56f2fed722c6d2f4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -121,7 +121,7 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n             protected void onTimer(final AjaxRequestTarget target) {\n                 if (isCheckReconciliationJob()) {\n                     try {\n-                        restClient.listJobs().stream().\n+                        ReportRestClient.listJobs().stream().\n                                 filter(jobTO -> SyncopeWebApplication.get().\n                                 getReconciliationReportKey().equals(jobTO.getRefKey())).\n                                 findFirst().ifPresent(reportJobTO -> {\n@@ -155,7 +155,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n         ReportTO reconciliationReport = null;\n         if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.REPORT_READ)) {\n             try {\n-                reconciliationReport = restClient.read(reconciliationReportKey);\n+                reconciliationReport = ReportRestClient.read(reconciliationReportKey);\n             } catch (Exception e) {\n                 LOG.error(\"Could not fetch the expected reconciliation report with key {}, aborting\",\n                         reconciliationReportKey, e);\n@@ -273,7 +273,7 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n         if (exec.isEmpty()) {\n             LOG.error(\"Could not find the last execution of reconciliation report\");\n         } else {\n-            Object entity = restClient.exportExecutionResult(\n+            Object entity = ReportRestClient.exportExecutionResult(\n                     exec.get().getKey(), ReportExecExportFormat.XML).getEntity();\n             if (entity instanceof InputStream) {\n                 try {\n@@ -370,7 +370,7 @@ public void populateItem(\n                             rowModel.getObject().getKey()\n                             + (StringUtils.isBlank(rowModel.getObject().getName())\n                             ? StringUtils.EMPTY\n-                            : \" \" + rowModel.getObject().getName())));\n+                            : ' ' + rowModel.getObject().getName())));\n                 }\n             });\n \n@@ -412,8 +412,8 @@ public void populateItem(\n                                     public void onClick(final AjaxRequestTarget target, final Any ignore) {\n                                         modal.header(Model.of(\n                                                 rowModel.getObject().getType()\n-                                                + \" \" + rowModel.getObject().getKey()\n-                                                + \" \" + rowModel.getObject().getName()));\n+                                                + ' ' + rowModel.getObject().getKey()\n+                                                + ' ' + rowModel.getObject().getName()));\n                                         modal.setContent(new ReconDetailsModalPanel(\n                                                 modal,\n                                                 resource,"},{"sha":"df3f9929784b3855e74eced37c964da6cb915fc9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/UsersByStatusWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FUsersByStatusWidget.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -43,7 +43,7 @@ public UsersByStatusWidget(final String id, final Map<String, Integer> usersBySt\n         add(chart);\n     }\n \n-    private Doughnut build(final Map<String, Integer> usersByStatus) {\n+    private static Doughnut build(final Map<String, Integer> usersByStatus) {\n         Doughnut doughnut = new Doughnut();\n         doughnut.getOptions().setResponsive(true);\n         doughnut.getOptions().setMaintainAspectRatio(true);"},{"sha":"4dd3603acb24d33b8efcdb1e5422c994d559718a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -56,8 +56,6 @@\n \n     protected final Comparator<Attr> attrComparator = new AttrComparator();\n \n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n     private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n \n     private final GroupRestClient groupRestClient = new GroupRestClient();\n@@ -93,7 +91,7 @@ public AbstractAttrs(\n \n     private List<Attr> loadAttrs() {\n         List<String> classes = new ArrayList<>(anyTypeClasses);\n-        classes.addAll(anyTypeClassRestClient.list(anyTO.getAuxClasses()).stream().\n+        classes.addAll(AnyTypeClassRestClient.list(anyTO.getAuxClasses()).stream().\n                 map(EntityTO::getKey).collect(Collectors.toList()));\n         setSchemas(classes);\n         setAttrs();\n@@ -109,7 +107,7 @@ private List<MembershipTO> loadMembershipAttrs() {\n             for (MembershipTO membership : (List<MembershipTO>) PropertyResolver.getPropertyField(\n                     \"memberships\", anyTO).get(anyTO)) {\n                 setSchemas(membership.getGroupKey(),\n-                        anyTypeClassRestClient.list(getMembershipAuxClasses(membership, anyTO.getType())).\n+                        AnyTypeClassRestClient.list(getMembershipAuxClasses(membership, anyTO.getType())).\n                                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n                 setAttrs(membership);\n \n@@ -155,7 +153,7 @@ private void setSchemas(final List<String> anyTypeClasses, final Map<String, S>\n         if (anyTypeClasses.isEmpty()) {\n             allSchemas = List.of();\n         } else {\n-            allSchemas = schemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n+            allSchemas = SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n         }\n \n         scs.clear();"},{"sha":"8b9361dd78dce278119909ad2e25870996ada30c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -79,7 +79,7 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n             AnyObjectCR req = new AnyObjectCR();\n             EntityTOUtils.toAnyCR(inner, req);\n \n-            result = anyObjectRestClient.create(req);\n+            result = AnyObjectRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             AnyObjectUR req = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"b8dc37be43a5f612eee01f9fd70e405ced0fb19c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConnObjectPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConnObjectPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -141,7 +141,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n      * @param attrTO remote attribute.\n      * @return fragment.\n      */\n-    private Panel getValuePanel(final String id, final String schemaName, final Attr attrTO) {\n+    private static Panel getValuePanel(final String id, final String schemaName, final Attr attrTO) {\n         Panel field;\n         if (attrTO == null) {\n             field = new AjaxTextFieldPanel(id, schemaName, new Model<>());"},{"sha":"780b229b29c79b19cfe56f8a788109eb3f9185fd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/ConsoleAuxClasses.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConsoleAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConsoleAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FConsoleAuxClasses.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -35,6 +35,6 @@ public <T extends AnyTO> ConsoleAuxClasses(final AnyWrapper<T> modelObject, fina\n \n     @Override\n     protected final List<AnyTypeClassTO> listAnyTypecClasses() {\n-        return new AnyTypeClassRestClient().list();\n+        return AnyTypeClassRestClient.list();\n     }\n }"},{"sha":"fdffb4b5eda26df4374e828cb17f4bdbc9ae5fc8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -64,7 +64,7 @@ public Details(\n         } else {\n             final List<RealmTO> realms = pageRef.getPage() instanceof Realms\n                     ? getRealmsFromLinks(Realms.class.cast(pageRef.getPage()).getRealmChoicePanel().getLinks())\n-                    : new RealmRestClient().list();\n+                    : RealmRestClient.list();\n \n             realm = new AjaxDropDownChoicePanel<>(\n                     \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(inner, \"realm\"), false);\n@@ -86,7 +86,7 @@ protected AnnotatedBeanPanel getGeneralStatusInformation(final String id, final\n         return new AnnotatedBeanPanel(id, anyTO);\n     }\n \n-    private List<RealmTO> getRealmsFromLinks(final List<AbstractLink> realmLinks) {\n+    private static List<RealmTO> getRealmsFromLinks(final List<AbstractLink> realmLinks) {\n         List<RealmTO> realms = new ArrayList<>();\n \n         realmLinks.stream()."},{"sha":"daca2c9b3af1a2ba4262e02b908b1cbbc799db15","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/DynamicMemberships.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -45,8 +45,6 @@ public class DynamicMemberships extends WizardStep {\n \n     private static final long serialVersionUID = 855618618337931784L;\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n     public DynamicMemberships(final GroupWrapper groupWrapper) {\n         super();\n \n@@ -56,7 +54,7 @@ public DynamicMemberships(final GroupWrapper groupWrapper) {\n \n             @Override\n             protected List<AnyTypeTO> load() {\n-                return anyTypeRestClient.listAnyTypes().stream().\n+                return AnyTypeRestClient.listAnyTypes().stream().\n                         filter(type -> AnyTypeKind.USER != type.getKind() && AnyTypeKind.GROUP != type.getKind()).\n                         collect(Collectors.toList());\n             }"},{"sha":"eefa9754eb456ddf405e86daafe221f0f4ae8346","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -98,7 +98,7 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n             GroupCR req = new GroupCR();\n             EntityTOUtils.toAnyCR(inner, req);\n \n-            result = groupRestClient.create(req);\n+            result = GroupRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             GroupUR groupUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"4de68e6b59b99736efc95debd314b8f7eee9f1d0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -75,8 +75,6 @@ public class Ownership extends WizardStep implements ICondition {\n \n     private final WebMarkupContainer ownerContainer;\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n     private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n \n     private final GroupSearchPanel groupSearchPanel;\n@@ -174,10 +172,10 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 build(\"groupsearch\");\n         groupSearchFragment.add(groupSearchPanel.setRenderBodyOnly(true));\n \n-        AnyTypeTO anyTypeTO = anyTypeRestClient.read(AnyTypeKind.GROUP.name());\n+        AnyTypeTO anyTypeTO = AnyTypeRestClient.read(AnyTypeKind.GROUP.name());\n \n         groupDirectoryPanel = GroupSelectionDirectoryPanel.class.cast(new GroupSelectionDirectoryPanel.Builder(\n-                anyTypeClassRestClient.list(anyTypeTO.getClasses()),\n+                AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                 anyTypeTO.getKey(),\n                 pageRef).build(\"searchResult\"));\n \n@@ -189,10 +187,10 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 build(\"usersearch\"));\n         userSearchFragment.add(userSearchPanel.setRenderBodyOnly(true));\n \n-        anyTypeTO = anyTypeRestClient.read(AnyTypeKind.USER.name());\n+        anyTypeTO = AnyTypeRestClient.read(AnyTypeKind.USER.name());\n \n         userDirectoryPanel = UserSelectionDirectoryPanel.class.cast(new UserSelectionDirectoryPanel.Builder(\n-                anyTypeClassRestClient.list(anyTypeTO.getClasses()),\n+                AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                 anyTypeTO.getKey(),\n                 pageRef).build(\"searchResult\"));\n "},{"sha":"d5a6b62313c71e6b5a5b878a857fe49afe35ab6b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -85,14 +85,10 @@ public class Relationships extends WizardStep implements ICondition {\n \n     private final PageReference pageRef;\n \n-    private final AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();\n-\n     private final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n \n     private final AnyTO anyTO;\n \n-    private final RelationshipTypeRestClient relationshipTypeRestClient = new RelationshipTypeRestClient();\n-\n     public Relationships(final AnyWrapper<?> modelObject, final PageReference pageRef) {\n         super();\n         add(new Label(\"title\", new ResourceModel(\"any.relationships\")));\n@@ -190,7 +186,8 @@ private List<RelationshipTO> getCurrentRelationships() {\n                 : Collections.<RelationshipTO>emptyList();\n     }\n \n-    private void addRelationship(final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n+    private static void addRelationship(final Map<String, List<RelationshipTO>> relationships,\n+                                        final RelationshipTO... rels) {\n \n         for (RelationshipTO relationship : rels) {\n             final List<RelationshipTO> listrels;\n@@ -226,7 +223,7 @@ private void removeRelationships(\n     @Override\n     public boolean evaluate() {\n         // [SYNCOPE-1171] - skip current step when the are no relationships types in Syncope\n-        return !relationshipTypeRestClient.list().isEmpty();\n+        return !RelationshipTypeRestClient.list().isEmpty();\n     }\n \n     public class Specification extends Panel {\n@@ -243,15 +240,15 @@ public Specification() {\n             super(\"specification\");\n             rel = new RelationshipTO();\n \n-            final List<String> availableRels = relationshipTypeRestClient.list().stream().\n+            final List<String> availableRels = RelationshipTypeRestClient.list().stream().\n                     map(EntityTO::getKey).collect(Collectors.toList());\n \n             final AjaxDropDownChoicePanel<String> type = new AjaxDropDownChoicePanel<>(\n                     \"type\", \"type\", new PropertyModel<>(rel, \"type\"));\n             type.setChoices(availableRels);\n             add(type.setRenderBodyOnly(true));\n \n-            final List<AnyTypeTO> availableTypes = anyTypeRestClient.listAnyTypes().stream().\n+            final List<AnyTypeTO> availableTypes = AnyTypeRestClient.listAnyTypes().stream().\n                     filter(anyType -> anyType.getKind() != AnyTypeKind.GROUP\n                     && anyType.getKind() != AnyTypeKind.USER).collect(Collectors.toList());\n \n@@ -345,7 +342,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         fragment.add(anyObjectSearchPanel.setRenderBodyOnly(true));\n \n                         anyObjectDirectoryPanel = new AnyObjectSelectionDirectoryPanel.Builder(\n-                                anyTypeClassRestClient.list(anyType.getClasses()),\n+                                AnyTypeClassRestClient.list(anyType.getClasses()),\n                                 anyType.getKey(),\n                                 pageRef).\n                                 setFiql(SyncopeClient.getAnyObjectSearchConditionBuilder(anyType.getKey())."},{"sha":"8b6a114a12c85416a92b3d020e737153cd0667ff","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Roles.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRoles.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -77,7 +77,7 @@ public <T extends AnyTO> Roles(final AnyWrapper<?> modelObject) {\n \n         allRoles = SyncopeWebApplication.get().getSecuritySettings().getAuthorizationStrategy().\n                 isActionAuthorized(this, RENDER)\n-                ? new RoleRestClient().list().stream().map(EntityTO::getKey).collect(Collectors.toList())\n+                ? RoleRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList())\n                 : List.of();\n         Collections.sort(allRoles);\n "},{"sha":"4e9de5c7d27b89f99a28b309de7eb4360da1fa38","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/StatusPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -200,10 +200,10 @@ public Map<String, StatusBean> getInitialStatusBeanMap() {\n         return initialStatusBeanMap;\n     }\n \n-    protected Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs(\n-            final String anyKey,\n-            final String resource,\n-            final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> objects) {\n+    protected static Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs(\n+        final String anyKey,\n+        final String resource,\n+        final List<Triple<ConnObjectTO, ConnObjectWrapper, String>> objects) {\n \n         for (Triple<ConnObjectTO, ConnObjectWrapper, String> object : objects) {\n             if (anyKey.equals(object.getMiddle().getAny().getKey())\n@@ -237,7 +237,7 @@ class RemoteAnyPanel extends RemoteObjectPanel {\n \n         @Override\n         protected final Pair<ConnObjectTO, ConnObjectTO> getConnObjectTOs() {\n-            return StatusPanel.this.getConnObjectTOs(bean.getKey(), bean.getResource(), connObjects);\n+            return StatusPanel.getConnObjectTOs(bean.getKey(), bean.getResource(), connObjects);\n         }\n     }\n }"},{"sha":"a62b5d7197dbfb9d972ec1e139576597940c259d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/TypeExtensionWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -89,7 +89,7 @@ public Details(final TypeExtensionTO typeExtensionTO) {\n             add(new Label(\"anyType.label\", anyTypeLabel));\n \n             if (typeExtensionTO.getAnyType() == null) {\n-                List<String> anyTypes = new AnyTypeRestClient().list();\n+                List<String> anyTypes = AnyTypeRestClient.list();\n                 anyTypes.remove(AnyTypeKind.GROUP.name());\n                 anyTypes.removeAll(anyTypes.stream().\n                         filter(anyType -> groupTO.getTypeExtension(anyType).isPresent()).collect(Collectors.toList()));\n@@ -108,7 +108,7 @@ public Details(final TypeExtensionTO typeExtensionTO) {\n \n             add(new Label(\"auxClasses.label\", auxClassesLabel));\n \n-            List<String> anyTypeClasses = new AnyTypeClassRestClient().list().stream().\n+            List<String> anyTypeClasses = AnyTypeClassRestClient.list().stream().\n                     map(EntityTO::getKey).collect(Collectors.toList());\n             AjaxPalettePanel<String> auxClassesPalette = new AjaxPalettePanel.Builder<String>().build(\n                     \"auxClasses.palette\","},{"sha":"00702075237dfa244834b473a4b4ebb158fd62a5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -90,7 +90,7 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                     ? UserWrapper.class.cast(modelObject).isStorePasswordInSyncope()\n                     : StringUtils.isNotBlank(inner.getPassword()));\n \n-            result = userRestClient.create(req);\n+            result = UserRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             UserUR userUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"341527fff0673a822b4dc6a07fe72dc532758f29","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/role/RoleWizardBuilder.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -52,8 +52,6 @@ public class RoleWizardBuilder extends BaseAjaxWizardBuilder<RoleWrapper> {\n \n     private static final long serialVersionUID = 5945391813567245081L;\n \n-    private final RoleRestClient groupRestClient = new RoleRestClient();\n-\n     /**\n      * Construct.\n      *\n@@ -83,9 +81,9 @@ protected Serializable onApplyInternal(final RoleWrapper modelObject) {\n         modelObject.fillDynamicConditions();\n         if (getOriginalItem() == null || getOriginalItem().getInnerObject() == null\n                 || StringUtils.isBlank(getOriginalItem().getInnerObject().getKey())) {\n-            groupRestClient.create(modelObject.getInnerObject());\n+            RoleRestClient.create(modelObject.getInnerObject());\n         } else {\n-            groupRestClient.update(modelObject.getInnerObject());\n+            RoleRestClient.update(modelObject.getInnerObject());\n         }\n         return null;\n     }\n@@ -149,7 +147,7 @@ public void setObject(final List<String> object) {\n                     modelObject.getEntitlements().clear();\n                     modelObject.getEntitlements().addAll(object);\n                 }\n-            }, new ListModel<>(new RoleRestClient().getAllAvailableEntitlements())).\n+            }, new ListModel<>(RoleRestClient.getAllAvailableEntitlements())).\n                     hideLabel().setOutputMarkupId(true));\n         }\n     }\n@@ -162,7 +160,7 @@ public Realms(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"realms\"));\n             add(new AjaxPalettePanel.Builder<>().build(\"realms\",\n                     new PropertyModel<>(modelObject, \"realms\"),\n-                    new ListModel<>(new RealmRestClient().list().stream().\n+                    new ListModel<>(RealmRestClient.list().stream().\n                             map(RealmTO::getFullPath).collect(Collectors.toList()))).\n                     hideLabel().setOutputMarkupId(true));\n         }\n@@ -176,7 +174,7 @@ public DynRealms(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"dynRealms\"));\n             add(new AjaxPalettePanel.Builder<>().build(\"dynRealms\",\n                     new PropertyModel<>(modelObject, \"dynRealms\"),\n-                    new ListModel<>(new DynRealmRestClient().list().stream().\n+                    new ListModel<>(DynRealmRestClient.list().stream().\n                             map(EntityTO::getKey).collect(Collectors.toList()))).\n                     hideLabel().setOutputMarkupId(true));\n         }\n@@ -190,7 +188,7 @@ public Privileges(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"privileges\"));\n             add(new AjaxPalettePanel.Builder<>().build(\"privileges\",\n                     new PropertyModel<>(modelObject, \"privileges\"),\n-                    new ListModel<>(new ApplicationRestClient().list().stream().\n+                    new ListModel<>(ApplicationRestClient.list().stream().\n                             flatMap(application -> application.getPrivileges().stream()).\n                             map(EntityTO::getKey).collect(Collectors.toList()))).\n                     hideLabel().setOutputMarkupId(true));"},{"sha":"65a8ff06bebc5a4d93c2dad4ba64a789706c9e97","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeWebApplication.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeWebApplication.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -171,7 +171,7 @@ protected void init() {\n \n         // read customFormAttributes.json\n         File enduserDir;\n-        try (InputStream is = getClass().getResourceAsStream(\"/\" + CUSTOM_FORM_ATTRIBUTES_FILE)) {\n+        try (InputStream is = getClass().getResourceAsStream('/' + CUSTOM_FORM_ATTRIBUTES_FILE)) {\n             customFormAttributes = MAPPER.readValue(is,\n                     new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n             });\n@@ -190,7 +190,7 @@ protected void init() {\n             FileAlterationObserver observer = existsEnduserDir\n                     ? new FileAlterationObserver(enduserDir,\n                             pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_ATTRIBUTES_FILE))\n-                    : new FileAlterationObserver(getClass().getResource(\"/\" + CUSTOM_FORM_ATTRIBUTES_FILE).getFile(),\n+                    : new FileAlterationObserver(getClass().getResource('/' + CUSTOM_FORM_ATTRIBUTES_FILE).getFile(),\n                             pathname -> StringUtils.contains(pathname.getPath(), CUSTOM_FORM_ATTRIBUTES_FILE));\n \n             FileAlterationMonitor monitor = new FileAlterationMonitor(5000);\n@@ -349,7 +349,7 @@ public SyncopeClientFactoryBean newClientFactory() {\n                 setUseCompression(useGZIPCompression);\n     }\n \n-    protected Class<? extends WebPage> getSignInPageClass() {\n+    protected static Class<? extends WebPage> getSignInPageClass() {\n         return Login.class;\n     }\n "},{"sha":"34049d1c064cc3ca6d1befce0e145ee6ef974348","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/commons/PreviewUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fcommons%2FPreviewUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fcommons%2FPreviewUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fcommons%2FPreviewUtils.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -32,7 +32,7 @@ public class PreviewUtils {\n     @Autowired\n     private ClassPathScanImplementationLookup lookup;\n \n-    public AbstractBinaryPreviewer getDefaultPreviewer(final String mimeType) {\n+    public static AbstractBinaryPreviewer getDefaultPreviewer(final String mimeType) {\n         return new DefaultPreviewer(\"previewer\", mimeType);\n     }\n "},{"sha":"d6a9440634d91d863556bc8fd15b8ae2d64ff29a","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/init/ClassPathScanImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -59,7 +59,7 @@ public class ClassPathScanImplementationLookup {\n      *\n      * @return basePackage for classpath scanning\n      */\n-    protected String getBasePackage() {\n+    protected static String getBasePackage() {\n         return DEFAULT_BASE_PACKAGE;\n     }\n "},{"sha":"b9ae12088512e58e6d102f5bd85aa74e39ddcb67","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/markup/html/form/AjaxDownload.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FAjaxDownload.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -69,11 +69,11 @@ public void initiate(final AjaxRequestTarget target) {\n     public void onRequest() {\n         HttpResourceStream stream = getResourceStream();\n         ResourceStreamRequestHandler handler = new ResourceStreamRequestHandler(stream);\n-        String key = StringUtils.isNotBlank(fileKey) ? fileKey + \"_\" : \"\";\n+        String key = StringUtils.isNotBlank(fileKey) ? fileKey + '_' : \"\";\n         String ext = \"\";\n         if (StringUtils.isNotBlank(mimeType)) {\n             String extByMimeType = mimeTypesLoader.getFileExt(mimeType);\n-            ext = StringUtils.isBlank(extByMimeType) ? \".bin\" : (\".\" + extByMimeType);\n+            ext = StringUtils.isBlank(extByMimeType) ? \".bin\" : ('.' + extByMimeType);\n         }\n         String fileName = key + (stream.getFilename() == null ? name : stream.getFilename()) + ext;\n "},{"sha":"79cd24aa747328c374149c711287d488f6f52206","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/markup/html/form/BinaryFieldPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -145,7 +145,7 @@ public String build() {\n         field = new TextField<>(\"textField\", model);\n         add(field.setLabel(new Model<>(name)).setOutputMarkupId(true));\n \n-        uploadForm.add(new Label(\"preview\", StringUtils.isBlank(mimeType) ? StringUtils.EMPTY : \"(\" + mimeType + \")\"));\n+        uploadForm.add(new Label(\"preview\", StringUtils.isBlank(mimeType) ? StringUtils.EMPTY : '(' + mimeType + ')'));\n \n         fileDownload = new AjaxDownload(name, fileKey, mimeType, true) {\n \n@@ -278,7 +278,7 @@ public FieldPanel<String> setNewModel(final IModel<String> model) {\n         if (StringUtils.isNotBlank(modelObj)) {\n             final Component panelPreview;\n             if (previewer == null) {\n-                panelPreview = previewUtils.getDefaultPreviewer(mimeType);\n+                panelPreview = PreviewUtils.getDefaultPreviewer(mimeType);\n             } else {\n                 panelPreview = previewer.preview(modelObj);\n             }"},{"sha":"156c64c53fac08619bbff126427afbd8a3e0020a","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/MustChangePassword.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FMustChangePassword.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -31,16 +31,14 @@ public class MustChangePassword extends AbstractMustChangePassword {\n \n     private static final long serialVersionUID = 8581970794722709800L;\n \n-    protected UserSelfRestClient restClient = new UserSelfRestClient();\n-\n     public MustChangePassword(final PageParameters parameters) {\n         super(parameters);\n     }\n \n     @Override\n     protected void doSubmit(final AjaxRequestTarget target) {\n         try {\n-            restClient.changePassword(passwordField.getModelObject());\n+            UserSelfRestClient.changePassword(passwordField.getModelObject());\n \n             SyncopeEnduserSession.get().invalidate();\n "},{"sha":"a3a64e2e518ce71f9abf85e2b9693bd1911b0e70","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/pages/Self.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FSelf.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -112,7 +112,7 @@ protected final AjaxWizard<AnyWrapper<UserTO>> buildWizard(final UserTO userTO,\n         return wizardBuilder.build(WIZARD_ID, mode);\n     }\n \n-    private UserTO buildNewUserTO(final PageParameters parameters) {\n+    private static UserTO buildNewUserTO(final PageParameters parameters) {\n         final UserTO userTO = new UserTO();\n \n         if (parameters != null) {"},{"sha":"76596d76e1ed93a570b58d80dd21dc97e174c5eb","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/AnyTypeRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FAnyTypeRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -35,7 +35,7 @@ public class AnyTypeRestClient extends BaseRestClient {\n \n     public static final Comparator<String> KEY_COMPARATOR = new AnyTypeKeyComparator();\n \n-    public AnyTypeTO read(final String key) {\n+    public static AnyTypeTO read(final String key) {\n         AnyTypeTO type = null;\n \n         try {\n@@ -47,7 +47,7 @@ public AnyTypeTO read(final String key) {\n         return type;\n     }\n \n-    public List<AnyTypeTO> listAnyTypes() {\n+    public static List<AnyTypeTO> listAnyTypes() {\n         List<AnyTypeTO> types = List.of();\n \n         try {\n@@ -60,21 +60,21 @@ public List<AnyTypeTO> listAnyTypes() {\n         return types;\n     }\n \n-    public List<String> list() {\n+    public static List<String> list() {\n         List<String> types = getSyncopeService().platform().getAnyTypes();\n         Collections.sort(types, new AnyTypeKeyComparator());\n         return types;\n     }\n \n-    public void create(final AnyTypeTO anyTypeTO) {\n+    public static void create(final AnyTypeTO anyTypeTO) {\n         getService(AnyTypeService.class).create(anyTypeTO);\n     }\n \n-    public void update(final AnyTypeTO anyTypeTO) {\n+    public static void update(final AnyTypeTO anyTypeTO) {\n         getService(AnyTypeService.class).update(anyTypeTO);\n     }\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(AnyTypeService.class).delete(key);\n     }\n "},{"sha":"ffeb769c5116484673591a7710b1bd14099f07e0","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/GroupRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FGroupRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,7 +42,7 @@ protected Class<? extends AnyService<GroupTO>> getAnyServiceClass() {\n         return GroupService.class;\n     }\n \n-    public ProvisioningResult<GroupTO> create(final GroupCR groupCR) {\n+    public static ProvisioningResult<GroupTO> create(final GroupCR groupCR) {\n         Response response = getService(GroupService.class).create(groupCR);\n         return response.readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n         });\n@@ -59,11 +59,11 @@ public ProvisioningResult<GroupTO> update(final String etag, final GroupUR updat\n         return result;\n     }\n \n-    public List<GroupTO> searchAssignableGroups(\n-            final String realm,\n-            final String term,\n-            final int page,\n-            final int size) {\n+    public static List<GroupTO> searchAssignableGroups(\n+        final String realm,\n+        final String term,\n+        final int page,\n+        final int size) {\n \n         return getService(SyncopeService.class).searchAssignableGroups(realm, term, page, size).getResult();\n     }"},{"sha":"d7b5729c8254afcb540c6bd43dfef604ed79a29c","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/RealmRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRealmRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -29,7 +29,7 @@ public class RealmRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n \n-    public List<RealmTO> list() {\n+    public static List<RealmTO> list() {\n         return getService(RealmService.class).list();\n     }\n "},{"sha":"a0d055d1b2ed316f6d0da0a6f753d99aa83d21ec","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/RoleRestClient.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FRoleRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -35,27 +35,27 @@ public class RoleRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -3161863874876938094L;\n \n-    public void delete(final String key) {\n+    public static void delete(final String key) {\n         getService(RoleService.class).delete(key);\n     }\n \n-    public RoleTO read(final String key) {\n+    public static RoleTO read(final String key) {\n         return getService(RoleService.class).read(key);\n     }\n \n-    public void update(final RoleTO roleTO) {\n+    public static void update(final RoleTO roleTO) {\n         getService(RoleService.class).update(roleTO);\n     }\n \n-    public void create(final RoleTO roleTO) {\n+    public static void create(final RoleTO roleTO) {\n         getService(RoleService.class).create(roleTO);\n     }\n \n-    public List<RoleTO> list() {\n+    public static List<RoleTO> list() {\n         return getService(RoleService.class).list();\n     }\n \n-    public String readConsoleLayoutInfo(final String roleKey) {\n+    public static String readConsoleLayoutInfo(final String roleKey) {\n         try {\n             return IOUtils.toString(InputStream.class.cast(\n                     getService(RoleService.class).getConsoleLayoutInfo(roleKey).getEntity()),\n@@ -66,16 +66,16 @@ public String readConsoleLayoutInfo(final String roleKey) {\n         }\n     }\n \n-    public void setConsoleLayoutInfo(final String roleKey, final String content) {\n+    public static void setConsoleLayoutInfo(final String roleKey, final String content) {\n         getService(RoleService.class).setConsoleLayoutInfo(\n                 roleKey, IOUtils.toInputStream(content, StandardCharsets.UTF_8));\n     }\n \n-    public void removeConsoleLayoutInfo(final String roleKey) {\n+    public static void removeConsoleLayoutInfo(final String roleKey) {\n         getService(RoleService.class).removeConsoleLayoutInfo(roleKey);\n     }\n \n-    public List<String> getAllAvailableEntitlements() {\n+    public static List<String> getAllAvailableEntitlements() {\n         List<String> entitlements = new ArrayList<>(getSyncopeService().platform().getEntitlements());\n         Collections.sort(entitlements);\n         return entitlements;"},{"sha":"c89e35b8482e364196093b3f61daa6702eb6fe71","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,7 +42,7 @@ public class SchemaRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2479730152700312373L;\n \n-    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final AnyTypeKind kind) {\n+    public static <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final AnyTypeKind kind) {\n         final AnyTypeService client = getService(AnyTypeService.class);\n \n         final List<String> classes = new ArrayList<>();\n@@ -57,16 +57,16 @@ public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, fina\n                 break;\n \n             default:\n-                new AnyTypeRestClient().listAnyTypes().stream().filter(\n+                AnyTypeRestClient.listAnyTypes().stream().filter(\n                         anyTypeTO -> (anyTypeTO.getKind() != AnyTypeKind.USER\n                         && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n                         forEach((anyTypeTO) -> classes.addAll(anyTypeTO.getClasses()));\n         }\n         return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n     }\n \n-    public <T extends SchemaTO> List<T> getSchemas(\n-            final SchemaType schemaType, final String keyword, final String... anyTypeClasses) {\n+    public static <T extends SchemaTO> List<T> getSchemas(\n+        final SchemaType schemaType, final String keyword, final String... anyTypeClasses) {\n \n         SchemaQuery.Builder builder = new SchemaQuery.Builder().type(schemaType);\n         if (StringUtils.isNotBlank(keyword)) {\n@@ -85,7 +85,7 @@ public <T extends SchemaTO> List<T> getSchemas(\n         return schemas;\n     }\n \n-    public List<String> getSchemaNames(final SchemaType schemaType) {\n+    public static List<String> getSchemaNames(final SchemaType schemaType) {\n         List<String> schemaNames = List.of();\n \n         try {\n@@ -98,44 +98,44 @@ public List<String> getSchemaNames(final SchemaType schemaType) {\n         return schemaNames;\n     }\n \n-    public List<String> getPlainSchemaNames() {\n+    public static List<String> getPlainSchemaNames() {\n         return getSchemaNames(SchemaType.PLAIN);\n     }\n \n-    public List<String> getDerSchemaNames() {\n+    public static List<String> getDerSchemaNames() {\n         return getSchemaNames(SchemaType.DERIVED);\n     }\n \n-    public List<String> getVirSchemaNames() {\n+    public static List<String> getVirSchemaNames() {\n         return getSchemaNames(SchemaType.VIRTUAL);\n     }\n \n-    public PlainSchemaTO read(final SchemaType schemaType, final String key) {\n+    public static PlainSchemaTO read(final SchemaType schemaType, final String key) {\n         return getService(SchemaService.class).read(schemaType, key);\n \n     }\n \n-    public void create(final SchemaType schemaType, final SchemaTO modelObject) {\n+    public static void create(final SchemaType schemaType, final SchemaTO modelObject) {\n         getService(SchemaService.class).create(schemaType, modelObject);\n     }\n \n-    public void update(final SchemaType schemaType, final SchemaTO modelObject) {\n+    public static void update(final SchemaType schemaType, final SchemaTO modelObject) {\n         getService(SchemaService.class).update(schemaType, modelObject);\n     }\n \n-    public PlainSchemaTO deletePlainSchema(final String name) {\n+    public static PlainSchemaTO deletePlainSchema(final String name) {\n         PlainSchemaTO response = getService(SchemaService.class).read(SchemaType.PLAIN, name);\n         getService(SchemaService.class).delete(SchemaType.PLAIN, name);\n         return response;\n     }\n \n-    public DerSchemaTO deleteDerSchema(final String name) {\n+    public static DerSchemaTO deleteDerSchema(final String name) {\n         DerSchemaTO schemaTO = getService(SchemaService.class).read(SchemaType.DERIVED, name);\n         getService(SchemaService.class).delete(SchemaType.DERIVED, name);\n         return schemaTO;\n     }\n \n-    public VirSchemaTO deleteVirSchema(final String name) {\n+    public static VirSchemaTO deleteVirSchema(final String name) {\n         VirSchemaTO schemaTO = getService(SchemaService.class).read(SchemaType.VIRTUAL, name);\n         getService(SchemaService.class).delete(SchemaType.VIRTUAL, name);\n         return schemaTO;"},{"sha":"bf11aabd51e91adec027040c5096ca513506a15a","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SecurityQuestionRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSecurityQuestionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSecurityQuestionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSecurityQuestionRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -26,7 +26,7 @@ public class SecurityQuestionRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -3167730221361895176L;\n \n-    public List<SecurityQuestionTO> list() {\n+    public static List<SecurityQuestionTO> list() {\n         return getService(SecurityQuestionService.class).list();\n     }\n "},{"sha":"74429c8fc0c9b51a457ef2592b5bf402be916878","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SyncopeRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSyncopeRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -27,7 +27,7 @@ public class SyncopeRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2211371717449597247L;\n \n-    public List<String> listAnyTypeClasses() {\n+    public static List<String> listAnyTypeClasses() {\n         List<String> types = List.of();\n \n         try {\n@@ -38,7 +38,7 @@ public List<String> listAnyTypeClasses() {\n         return types;\n     }\n \n-    public List<String> searchUserTypeExtensions(final String groupName) {\n+    public static List<String> searchUserTypeExtensions(final String groupName) {\n         List<String> types = List.of();\n         try {\n             TypeExtensionTO typeExtensionTO = getService(SyncopeService.class).readUserTypeExtension(groupName);"},{"sha":"56aa2ffab33460c3ecb3911b3ef246775781501f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/UserSelfRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FUserSelfRestClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -34,7 +34,7 @@ public class UserSelfRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1575748964398293968L;\n \n-    public ProvisioningResult<UserTO> create(final UserCR createReq) {\n+    public static ProvisioningResult<UserTO> create(final UserCR createReq) {\n         Response response = getService(UserSelfService.class).create(createReq);\n         return response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         });\n@@ -58,7 +58,7 @@ public ProvisioningResult<UserTO> mustChangePassword(final String etag, final bo\n         return update(etag, userUR);\n     }\n \n-    public void changePassword(final String password) {\n+    public static void changePassword(final String password) {\n         getService(UserSelfService.class).mustChangePassword(password);\n     }\n "},{"sha":"92a5d6ca7592391e2a82f53a13251b56fffe5988","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AbstractAttrs.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -54,10 +54,6 @@\n \n     protected final Comparator<Attr> attrComparator = new AttrComparator();\n \n-    private final SchemaRestClient schemaRestClient = new SchemaRestClient();\n-\n-    private final SyncopeRestClient syncopeRestClient = new SyncopeRestClient();\n-\n     protected final AnyTO anyTO;\n \n     private final Map<String, CustomizationOption> whichAttrs;\n@@ -131,7 +127,7 @@ protected boolean renderAsReadonly(final String schema, final String groupName)\n         // whether to render the attribute as readonly or not, without considering schema readonly property\n         String schemaName = (org.apache.commons.lang3.StringUtils.isBlank(groupName)\n                 ? org.apache.commons.lang3.StringUtils.EMPTY\n-                : groupName + \"#\")\n+                : groupName + '#')\n                 + schema;\n         return whichAttrs.get(schemaName) == null ? false : whichAttrs.get(schemaName).isReadonly();\n     }\n@@ -143,7 +139,7 @@ protected List<String> getDefaultValues(final String schema) {\n     protected List<String> getDefaultValues(final String schema, final String groupName) {\n         String schemaName = (org.apache.commons.lang3.StringUtils.isBlank(groupName)\n                 ? org.apache.commons.lang3.StringUtils.EMPTY\n-                : groupName + \"#\")\n+                : groupName + '#')\n                 + schema;\n         return whichAttrs.get(schemaName) == null\n                 ? List.of()\n@@ -173,7 +169,7 @@ private void setSchemas(final List<String> anyTypeClasses, final String groupNam\n         if (anyTypeClasses.isEmpty()) {\n             allSchemas = List.of();\n         } else {\n-            allSchemas = schemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n+            allSchemas = SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n         }\n \n         scs.clear();\n@@ -183,7 +179,7 @@ private void setSchemas(final List<String> anyTypeClasses, final String groupNam\n             allSchemas.removeAll(allSchemas.stream().\n                     filter(schemaTO -> org.apache.commons.lang3.StringUtils.isBlank(groupName)\n                     ? !whichAttrs.containsKey(schemaTO.getKey())\n-                    : !whichAttrs.containsKey(groupName + \"#\" + schemaTO.getKey())).collect(Collectors.toSet()));\n+                    : !whichAttrs.containsKey(groupName + '#' + schemaTO.getKey())).collect(Collectors.toSet()));\n         }\n \n         allSchemas.forEach(schemaTO -> scs.put(schemaTO.getKey(), schemaTO));\n@@ -208,9 +204,9 @@ public void renderHead(final IHeaderResponse response) {\n \n     protected abstract List<Attr> getAttrsFromTO(MembershipTO membershipTO);\n \n-    protected List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n+    protected static List<String> getMembershipAuxClasses(final MembershipTO membershipTO, final String anyType) {\n         try {\n-            return syncopeRestClient.searchUserTypeExtensions(membershipTO.getGroupName());\n+            return SyncopeRestClient.searchUserTypeExtensions(membershipTO.getGroupName());\n         } catch (Exception e) {\n             return List.of();\n         }"},{"sha":"bdd6f449d8af677873d2718e7a63615f7665353d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/EnduserAuxClasses.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FEnduserAuxClasses.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FEnduserAuxClasses.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FEnduserAuxClasses.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -36,7 +36,7 @@ public <T extends AnyTO> EnduserAuxClasses(final AnyWrapper<T> modelObject, fina\n \n     @Override\n     protected final List<AnyTypeClassTO> listAnyTypecClasses() {\n-        return new SyncopeRestClient().listAnyTypeClasses().stream().map(name -> {\n+        return SyncopeRestClient.listAnyTypeClasses().stream().map(name -> {\n             AnyTypeClassTO anyTypeClassTO = new AnyTypeClassTO();\n             anyTypeClassTO.setKey(name);\n             return anyTypeClassTO;"},{"sha":"ff60de5a26c9921ad091417b57806a8ea96a9e52","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/Groups.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -104,7 +104,7 @@ public List<MembershipTO> getObject() {\n                 public List<MembershipTO> execute(final String filter) {\n                     return (StringUtils.isEmpty(filter) || \"*\".equals(filter)\n                             ? groupsModel.getObject()\n-                            : groupRestClient.searchAssignableGroups(\n+                            : GroupRestClient.searchAssignableGroups(\n                                     anyTO.getRealm(),\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n                                             isAssignable().and().is(\"name\").equalTo(filter).query(),\n@@ -138,7 +138,7 @@ public List<GroupTO> getObject() {\n          */\n         @Override\n         protected void reloadObject() {\n-            groups = groupRestClient.searchAssignableGroups(\n+            groups = GroupRestClient.searchAssignableGroups(\n                     realm,\n                     null,\n                     1,"},{"sha":"52c833b776fec7a1a3493b39d9ec41260f73dd82","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/PlainAttrs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -377,7 +377,7 @@ protected PageReference getPageReference() {\n         }\n \n         panel.setReadOnly(readOnly);\n-        panel.setMarkupId(StringUtils.isBlank(groupName) ? schemaTO.getKey() : groupName + \".\" + schemaTO.getKey());\n+        panel.setMarkupId(StringUtils.isBlank(groupName) ? schemaTO.getKey() : groupName + '.' + schemaTO.getKey());\n         \n         return panel;\n     }"},{"sha":"94197edc6a91aca00f8997e530fb8290308fc41d","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/UserDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -105,7 +105,7 @@ public UserDetails(\n                 \"destinationRealm\", \"destinationRealm\", new PropertyModel<>(userTO, \"realm\"), false);\n \n         ((AjaxDropDownChoicePanel<String>) realm).setChoices(\n-                new RealmRestClient().list().stream().map(RealmTO::getFullPath).collect(Collectors.toList()));\n+                RealmRestClient.list().stream().map(RealmTO::getFullPath).collect(Collectors.toList()));\n         add(realm);\n \n         // ------------------------\n@@ -163,7 +163,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 userTO, \"securityQuestion\"));\n         ((AjaxDropDownChoicePanel) securityQuestion).setNullValid(true);\n \n-        final List<SecurityQuestionTO> securityQuestions = new SecurityQuestionRestClient().list();\n+        final List<SecurityQuestionTO> securityQuestions = SecurityQuestionRestClient.list();\n         ((AjaxDropDownChoicePanel<String>) securityQuestion).setChoices(securityQuestions.stream().map(\n                 SecurityQuestionTO::getKey).collect(Collectors.toList()));\n         ((AjaxDropDownChoicePanel<String>) securityQuestion).setChoiceRenderer("},{"sha":"714cacb9b962bcac75fbfbe6a4a461eb37da727f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/UserWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -94,7 +94,7 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                     ? UserWrapper.class.cast(modelObject).isStorePasswordInSyncope()\n                     : StringUtils.isNotBlank(inner.getPassword()));\n \n-            result = userSelfRestClient.create(req);\n+            result = UserSelfRestClient.create(req);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n             UserUR userUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);"},{"sha":"b7b4a5ae307e58ec0c1d8e90b9870deef9327f21","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -79,7 +79,7 @@ public Exception fromResponse(final Response response) {\n         return ex;\n     }\n \n-    private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n+    private static SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n         SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n \n         // Attempts to read ErrorTO or List<ErrorTO> as entity..."},{"sha":"d5e63626e94a53debfbfd3690dd6f254ed9f4aec","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -295,7 +295,7 @@ public Pair<Map<String, Set<String>>, UserTO> self() {\n      * @param values HTTP header values\n      * @return given service instance, with given header set\n      */\n-    public <T> T header(final T service, final String key, final Object... values) {\n+    public static <T> T header(final T service, final String key, final Object... values) {\n         WebClient.client(service).header(key, values);\n         return service;\n     }\n@@ -308,7 +308,7 @@ public <T> T header(final T service, final String key, final Object... values) {\n      * @param preference preference to be set via {@code Prefer} header\n      * @return given service instance, with {@code Prefer} header set\n      */\n-    public <T> T prefer(final T service, final Preference preference) {\n+    public static <T> T prefer(final T service, final Preference preference) {\n         return header(service, RESTHeaders.PREFER, preference.toString());\n     }\n \n@@ -321,7 +321,7 @@ public <T> T prefer(final T service, final Preference preference) {\n      * requested\n      * @return service instance of the given reference class, with related header set\n      */\n-    public <T> T nullPriorityAsync(final T service, final boolean nullPriorityAsync) {\n+    public static <T> T nullPriorityAsync(final T service, final boolean nullPriorityAsync) {\n         return header(service, RESTHeaders.NULL_PRIORITY_ASYNC, nullPriorityAsync);\n     }\n \n@@ -334,7 +334,7 @@ public <T> T nullPriorityAsync(final T service, final boolean nullPriorityAsync)\n      * @param ifNot if true then {@code If-None-Match} is set, {@code If-Match} otherwise\n      * @return given service instance, with {@code If-Match} or {@code If-None-Match} set\n      */\n-    private <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n+    private static <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n         WebClient.client(service).match(etag, ifNot);\n         return service;\n     }\n@@ -347,7 +347,7 @@ private <T> T match(final T service, final EntityTag etag, final boolean ifNot)\n      * @param etag ETag value\n      * @return given service instance, with {@code If-Match} set\n      */\n-    public <T> T ifMatch(final T service, final EntityTag etag) {\n+    public static <T> T ifMatch(final T service, final EntityTag etag) {\n         return match(service, etag, false);\n     }\n \n@@ -359,7 +359,7 @@ public <T> T ifMatch(final T service, final EntityTag etag) {\n      * @param etag ETag value\n      * @return given service instance, with {@code If-None-Match} set\n      */\n-    public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n+    public static <T> T ifNoneMatch(final T service, final EntityTag etag) {\n         return match(service, etag, true);\n     }\n \n@@ -370,7 +370,7 @@ public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n      * @param service service class instance\n      * @return {@code ETag} header value from latest service run (if available)\n      */\n-    public <T> EntityTag getLatestEntityTag(final T service) {\n+    public static <T> EntityTag getLatestEntityTag(final T service) {\n         return WebClient.client(service).getResponse().getEntityTag();\n     }\n "},{"sha":"0529e185eccf358601e4ca60c2d3d5a850db90dc","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -89,15 +89,15 @@ public static ContentType fromString(final String value) {\n \n     private JAXRSClientFactoryBean restClientFactoryBean;\n \n-    protected JacksonJaxbJsonProvider defaultJsonProvider() {\n+    protected static JacksonJaxbJsonProvider defaultJsonProvider() {\n         ObjectMapper objectMapper = new ObjectMapper();\n         objectMapper.registerModule(new JodaModule());\n         objectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n         return new JacksonJaxbJsonProvider(objectMapper, JacksonJaxbJsonProvider.DEFAULT_ANNOTATIONS);\n     }\n \n     @SuppressWarnings({ \"rawtypes\" })\n-    protected JAXBElementProvider<?> defaultJAXBProvider() {\n+    protected static JAXBElementProvider<?> defaultJAXBProvider() {\n         JAXBElementProvider<?> defaultJAXBProvider = new JAXBElementProvider();\n \n         DocumentDepthProperties depthProperties = new DocumentDepthProperties();\n@@ -115,7 +115,7 @@ protected JAXBElementProvider<?> defaultJAXBProvider() {\n         return defaultJAXBProvider;\n     }\n \n-    protected RestClientExceptionMapper defaultExceptionMapper() {\n+    protected static RestClientExceptionMapper defaultExceptionMapper() {\n         return new RestClientExceptionMapper();\n     }\n \n@@ -150,7 +150,7 @@ protected JAXRSClientFactoryBean defaultRestClientFactoryBean() {\n     }\n \n     public JacksonJaxbJsonProvider getJsonProvider() {\n-        return Optional.ofNullable(jsonProvider).orElseGet(this::defaultJsonProvider);\n+        return Optional.ofNullable(jsonProvider).orElseGet(SyncopeClientFactoryBean::defaultJsonProvider);\n     }\n \n     public void setJsonProvider(final JacksonJaxbJsonProvider jsonProvider) {\n@@ -169,7 +169,7 @@ public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider<?> jax\n     }\n \n     public RestClientExceptionMapper getExceptionMapper() {\n-        return Optional.ofNullable(exceptionMapper).orElseGet(this::defaultExceptionMapper);\n+        return Optional.ofNullable(exceptionMapper).orElseGet(SyncopeClientFactoryBean::defaultExceptionMapper);\n     }\n \n     public SyncopeClientFactoryBean setExceptionMapper(final RestClientExceptionMapper exceptionMapper) {"},{"sha":"bf430885bd2381d9a59625dd856d01486a9f3e0b","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/PropertyUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FPropertyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FPropertyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FPropertyUtils.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,7 +46,7 @@ public static Properties read(\n \n         Properties props = new Properties();\n \n-        try (InputStream is = clazz.getResourceAsStream(\"/\" + propertiesFileName)) {\n+        try (InputStream is = clazz.getResourceAsStream('/' + propertiesFileName)) {\n             props.load(is);\n \n             String confDirName = props.getProperty(confDirProp);"},{"sha":"04467963ff6f9b4107b9f71f2236c141cf649390","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/collections/CircularFifoQueue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FCircularFifoQueue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FCircularFifoQueue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FCircularFifoQueue.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -182,7 +182,7 @@ public boolean isEmpty() {\n      *\n      * @return always returns {@code false}\n      */\n-    public boolean isFull() {\n+    public static boolean isFull() {\n         return false;\n     }\n "},{"sha":"4548584c3c2d463b598c3c71ddaab69f550793de","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/search/SyncopeFiqlParser.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParser.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -60,8 +60,8 @@ public SyncopeFiqlParser(\n         CONDITION_MAP.put(ConditionType.CUSTOM, IEQ);\n         CONDITION_MAP.put(ConditionType.CUSTOM, NIEQ);\n \n-        String comparators = GT + \"|\" + GE + \"|\" + LT + \"|\" + LE + \"|\" + EQ + \"|\" + NEQ + \"|\" + IEQ + \"|\" + NIEQ;\n-        String s1 = \"[\\\\p{ASCII}]+(\" + comparators + \")\";\n+        String comparators = GT + '|' + GE + '|' + LT + '|' + LE + '|' + EQ + '|' + NEQ + '|' + IEQ + '|' + NIEQ;\n+        String s1 = \"[\\\\p{ASCII}]+(\" + comparators + ')';\n         comparatorsPattern = Pattern.compile(s1);\n     }\n \n@@ -106,8 +106,8 @@ private class SyncopeComparison implements ASTNode<T> {\n \n         @Override\n         public String toString() {\n-            return name + \" \" + operator + \" \" + tvalue.getObject()\n-                    + \" (\" + tvalue.getObject().getClass().getSimpleName() + \")\";\n+            return name + ' ' + operator + ' ' + tvalue.getObject()\n+                    + \" (\" + tvalue.getObject().getClass().getSimpleName() + ')';\n         }\n \n         @Override"},{"sha":"ad15b2f93fcf46868084d903152aff381e4779a7","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AnyEntitlement.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyEntitlement.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -26,6 +26,6 @@ public enum AnyEntitlement {\n     DELETE;\n \n     public String getFor(final String anyTypeKey) {\n-        return anyTypeKey + \"_\" + name();\n+        return anyTypeKey + '_' + name();\n     }\n }"},{"sha":"7b365540641a7384303ba7198725583f82c27894","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -38,11 +38,11 @@ public class AuditLoggerName implements Serializable {\n     private static final long serialVersionUID = -647989486671786839L;\n \n     public static String getAuditLoggerName(final String domain) {\n-        return LoggerType.AUDIT.getPrefix() + \".\" + domain;\n+        return LoggerType.AUDIT.getPrefix() + '.' + domain;\n     }\n \n     public static String getAuditEventLoggerName(final String domain, final String loggerName) {\n-        return domain + \".\" + loggerName;\n+        return domain + '.' + loggerName;\n     }\n \n     private final AuditElements.EventCategoryType type;\n@@ -141,7 +141,7 @@ public static AuditLoggerName fromLoggerName(final String loggerName)\n         }\n \n         Map.Entry<EventCategory, Result> eventCategory = parseEventCategory(\n-                loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + \".\", \"\"));\n+                loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + '.', \"\"));\n \n         return new AuditLoggerName(\n                 eventCategory.getKey().getType(),"},{"sha":"8933913f244d2301bf1ab49215f14ce16aaa23dc","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -102,7 +102,7 @@ public static ClientExceptionType fromHeaderValue(final String exceptionTypeHead\n \n     public String getInfoHeaderValue(final String value) {\n         // HTTP header values cannot contain CR / LF\n-        return (name() + \":\" + value).replaceAll(\"(\\\\r|\\\\n)\", \" \");\n+        return (name() + ':' + value).replaceAll(\"(\\\\r|\\\\n)\", \" \");\n     }\n \n     public Response.Status getResponseStatus() {"},{"sha":"e7ec427533328008a553ef244830a50478250e30","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/MatchingRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FMatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FMatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FMatchingRule.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -53,6 +53,6 @@ public enum MatchingRule {\n \n     public static String toEventName(final MatchingRule rule) {\n         return new StringBuilder(MatchingRule.class.getSimpleName()).\n-                append(\"_\").append(rule.name()).toString().toLowerCase();\n+                append('_').append(rule.name()).toString().toLowerCase();\n     }\n }"},{"sha":"838f9af726b348a190759b15ae88a679479bbc2b","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/UnmatchingRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FUnmatchingRule.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,6 +46,6 @@ public enum UnmatchingRule {\n \n     public static String toEventName(final UnmatchingRule rule) {\n         return new StringBuilder(UnmatchingRule.class.getSimpleName()).\n-                append(\"_\").append(rule.name()).toString().toLowerCase();\n+                append('_').append(rule.name()).toString().toLowerCase();\n     }\n }"},{"sha":"422cde3b87988d6647132272f75795c12d11db8d","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/search/SyncopeFiqlParserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSyncopeFiqlParserTest.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -33,7 +33,7 @@ public class SyncopeFiqlParserTest {\n             SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n \n     @SuppressWarnings(\"unchecked\")\n-    private SyncopeFiqlSearchCondition<SearchBean> parse(final String fiql) {\n+    private static SyncopeFiqlSearchCondition<SearchBean> parse(final String fiql) {\n         SearchCondition<SearchBean> parsed = FIQL_PARSER.parse(fiql);\n         assertTrue(parsed instanceof SyncopeFiqlSearchCondition);\n         return (SyncopeFiqlSearchCondition) parsed;"},{"sha":"0429e29ee0dbb843c931ab2528a40a7f8aa77f8d","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -84,7 +84,7 @@ public final class RESTHeaders {\n      * @return multipart/mixed Content-Type string, with given boundary\n      */\n     public static String multipartMixedWith(final String boundary) {\n-        return MULTIPART_MIXED + \";\" + BOUNDARY_PARAMETER + \"=\" + boundary;\n+        return MULTIPART_MIXED + ';' + BOUNDARY_PARAMETER + '=' + boundary;\n     }\n \n     /**"},{"sha":"0d31d5edc74b36934e67965072c8eaf235be71b0","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/model/Domain.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fmodel%2FDomain.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -241,7 +241,7 @@ public void setAdminCipherAlgorithm(final CipherAlgorithm adminCipherAlgorithm)\n     private String read(final String filename) {\n         String read = null;\n         try {\n-            read = IOUtils.toString(getClass().getResourceAsStream(\"/\" + filename));\n+            read = IOUtils.toString(getClass().getResourceAsStream('/' + filename));\n         } catch (IOException e) {\n             LOG.error(\"Could not read {}\", filename, e);\n         }"},{"sha":"bcbccf75a9c1789e151296e6edd99990aafcdf87","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperConfParamOps.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperConfParamOps.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -44,8 +44,8 @@ public class ZookeeperConfParamOps implements ConfParamOps {\n     @Autowired\n     private CuratorFramework client;\n \n-    private String buildConfPath(final String... parts) {\n-        return CONF_PATH + \"/\" + String.join(\"/\", parts);\n+    private static String buildConfPath(final String... parts) {\n+        return CONF_PATH + '/' + String.join(\"/\", parts);\n     }\n \n     @Override"},{"sha":"7dba3ffbaa264f82db6291f03bdbdb1ef8520151","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOps.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -81,7 +81,7 @@ public void afterPropertiesSet() throws Exception {\n \n                     case NODE_REMOVED:\n                         LOG.debug(\"Domain {} removed\", event.getData().getPath());\n-                        watcher.removed(StringUtils.substringAfter(event.getData().getPath(), DOMAIN_PATH + \"/\"));\n+                        watcher.removed(StringUtils.substringAfter(event.getData().getPath(), DOMAIN_PATH + '/'));\n                         break;\n \n                     default:\n@@ -91,11 +91,11 @@ public void afterPropertiesSet() throws Exception {\n         }\n     }\n \n-    private String buildDomainPath(final String... parts) {\n+    private static String buildDomainPath(final String... parts) {\n         String prefix = DOMAIN_PATH;\n         String suffix = StringUtils.EMPTY;\n         if (parts != null && parts.length > 0) {\n-            suffix = \"/\" + String.join(\"/\", parts);\n+            suffix = '/' + String.join(\"/\", parts);\n         }\n         return prefix + suffix;\n     }"},{"sha":"60824ec54af7335a9b1e2ba4b526ae74ea761ae4","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceDiscoveryOps.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceDiscoveryOps.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -116,9 +116,9 @@ public void unregister(final NetworkService service) {\n         }\n     }\n \n-    private NetworkService toNetworkService(\n-            final NetworkService.Type serviceType,\n-            final ServiceInstance<Void> serviceInstance) {\n+    private static NetworkService toNetworkService(\n+        final NetworkService.Type serviceType,\n+        final ServiceInstance<Void> serviceInstance) {\n \n         NetworkService ns = new NetworkService();\n         ns.setType(serviceType);"},{"sha":"164c021e54f2491fa2844c60eda6b2cc2f66053e","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperServiceOps.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperServiceOps.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -46,11 +46,11 @@ public class ZookeeperServiceOps implements ServiceOps {\n     @Autowired\n     private CuratorFramework client;\n \n-    private String buildServicePath(final NetworkService.Type serviceType, final String... parts) {\n-        String prefix = SERVICE_PATH + \"/\" + serviceType.name();\n+    private static String buildServicePath(final NetworkService.Type serviceType, final String... parts) {\n+        String prefix = SERVICE_PATH + '/' + serviceType.name();\n         String suffix = StringUtils.EMPTY;\n         if (parts != null && parts.length > 0) {\n-            suffix = \"/\" + String.join(\"/\", parts);\n+            suffix = '/' + String.join(\"/\", parts);\n         }\n         return prefix + suffix;\n     }"},{"sha":"74acedec7a6e694193a86537cbb8b99531059b11","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorHistoryLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorHistoryLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -51,7 +51,7 @@ public class ConnectorHistoryLogic extends AbstractTransactionalLogic<ConnInstan\n     public List<ConnInstanceHistoryConfTO> list(final String key) {\n         ConnInstance connInstance = connInstanceDAO.find(key);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + key + \"'\");\n+            throw new NotFoundException(\"Connector '\" + key + '\\'');\n         }\n \n         return connInstanceHistoryConfDAO.findByEntity(connInstance).stream().\n@@ -62,7 +62,7 @@ public List<ConnInstanceHistoryConfTO> list(final String key) {\n     public void restore(final String key) {\n         ConnInstanceHistoryConf connInstanceHistoryConf = connInstanceHistoryConfDAO.find(key);\n         if (connInstanceHistoryConf == null) {\n-            throw new NotFoundException(\"Connector History Conf '\" + key + \"'\");\n+            throw new NotFoundException(\"Connector History Conf '\" + key + '\\'');\n         }\n \n         binder.update(connInstanceHistoryConf.getConf());\n@@ -72,7 +72,7 @@ public void restore(final String key) {\n     public void delete(final String key) {\n         ConnInstanceHistoryConf connInstanceHistoryConf = connInstanceHistoryConfDAO.find(key);\n         if (connInstanceHistoryConf == null) {\n-            throw new NotFoundException(\"Connector History Conf '\" + key + \"'\");\n+            throw new NotFoundException(\"Connector History Conf '\" + key + '\\'');\n         }\n \n         connInstanceHistoryConfDAO.delete(key);"},{"sha":"6493d66622f34a4423b576c19431fafc1eee7259","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -73,7 +73,7 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+    protected static void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ConnInstance.class.getSimpleName(), key);\n@@ -114,7 +114,7 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n     public ConnInstanceTO delete(final String key) {\n         ConnInstance connInstance = connInstanceDAO.authFind(key);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + key + \"'\");\n+            throw new NotFoundException(\"Connector '\" + key + '\\'');\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -161,7 +161,7 @@ public ConnInstanceTO read(final String key, final String lang) {\n \n         ConnInstance connInstance = connInstanceDAO.authFind(key);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + key + \"'\");\n+            throw new NotFoundException(\"Connector '\" + key + '\\'');\n         }\n \n         return binder.getConnInstanceTO(connInstance);\n@@ -247,7 +247,7 @@ public ConnInstanceTO readByResource(final String resourceName, final String lan\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceName + '\\'');\n         }\n         ConnInstanceTO connInstance = binder.getConnInstanceTO(connFactory.getConnector(resource).getConnInstance());\n         connInstance.setKey(resource.getConnector().getKey());"},{"sha":"941c2cafa185b6f4909b0591e50d63683a8656dd","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -95,17 +95,17 @@ private Pair<Any<?>, Provision> init(final AnyTypeKind anyTypeKind, final String\n \n         Any<?> any = anyUtils.dao().authFind(anyKey);\n         if (any == null) {\n-            throw new NotFoundException(anyTypeKind + \" '\" + anyKey + \"'\");\n+            throw new NotFoundException(anyTypeKind + \" '\" + anyKey + '\\'');\n         }\n \n         ExternalResource resource = resourceDAO.find(resourceKey);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceKey + '\\'');\n         }\n         Provision provision = resource.getProvision(any.getType()).orElseThrow(()\n-                -> new NotFoundException(\"Provision for \" + any.getType() + \" on Resource '\" + resourceKey + \"'\"));\n+                -> new NotFoundException(\"Provision for \" + any.getType() + \" on Resource '\" + resourceKey + '\\''));\n         if (provision.getMapping() == null) {\n-            throw new NotFoundException(\"Mapping for \" + any.getType() + \" on Resource '\" + resourceKey + \"'\");\n+            throw new NotFoundException(\"Mapping for \" + any.getType() + \" on Resource '\" + resourceKey + '\\'');\n         }\n \n         return (Pair<Any<?>, Provision>) Pair.of(any, provision);\n@@ -132,7 +132,7 @@ private ConnObjectTO getOnResource(final Any<?> any, final Provision provision)\n         // 1. build connObjectKeyItem\n         MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).orElseThrow(()\n                 -> new NotFoundException(\"ConnObjectKey for \" + any.getType()\n-                        + \" on resource '\" + provision.getResource().getKey() + \"'\"));\n+                        + \" on resource '\" + provision.getResource().getKey() + '\\''));\n         String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, provision).orElse(null);\n         if (connObjectKeyValue == null) {\n             return null;"},{"sha":"8b0d7fed9108d307d9aab8d8290f4b270a1bbc4e","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -83,7 +83,7 @@ public Pair<Integer, List<RemediationTO>> list(\n     public RemediationTO read(final String key) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+            LOG.error(\"Could not find remediation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -95,7 +95,7 @@ public RemediationTO read(final String key) {\n     public void delete(final String key) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+            LOG.error(\"Could not find remediation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -107,7 +107,7 @@ public void delete(final String key) {\n     public ProvisioningResult<?> remedy(final String key, final AnyCR anyCR, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+            LOG.error(\"Could not find remediation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -136,7 +136,7 @@ public ProvisioningResult<?> remedy(final String key, final AnyCR anyCR, final b\n     public ProvisioningResult<?> remedy(final String key, final AnyUR anyUR, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+            LOG.error(\"Could not find remediation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -165,7 +165,7 @@ public ProvisioningResult<?> remedy(final String key, final AnyUR anyUR, final b\n     public ProvisioningResult<?> remedy(final String key, final String anyKey, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n-            LOG.error(\"Could not find remediation '\" + key + \"'\");\n+            LOG.error(\"Could not find remediation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"87af15ce64b85c7a53e83f483675a7d5ddc66b1b","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceHistoryLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceHistoryLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -51,7 +51,7 @@ public class ResourceHistoryLogic extends AbstractTransactionalLogic<ResourceHis\n     public List<ResourceHistoryConfTO> list(final String key) {\n         ExternalResource resource = resourceDAO.find(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + '\\'');\n         }\n \n         return resourceHistoryConfDAO.findByEntity(resource).stream().\n@@ -62,7 +62,7 @@ public List<ResourceHistoryConfTO> list(final String key) {\n     public void restore(final String key) {\n         ExternalResourceHistoryConf resourceHistoryConf = resourceHistoryConfDAO.find(key);\n         if (resourceHistoryConf == null) {\n-            throw new NotFoundException(\"Resource History Conf '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource History Conf '\" + key + '\\'');\n         }\n \n         binder.update(resourceHistoryConf.getEntity(), resourceHistoryConf.getConf());\n@@ -72,7 +72,7 @@ public void restore(final String key) {\n     public void delete(final String key) {\n         ExternalResourceHistoryConf resourceHistoryConf = resourceHistoryConfDAO.find(key);\n         if (resourceHistoryConf == null) {\n-            throw new NotFoundException(\"Resource History Conf '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource History Conf '\" + key + '\\'');\n         }\n \n         resourceHistoryConfDAO.delete(key);"},{"sha":"704cbe87a9cc6891b9db98ea04eff48131b8ea61","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -116,7 +116,7 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+    protected static void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ExternalResource.class.getSimpleName(), key);\n@@ -154,7 +154,7 @@ public ResourceTO create(final ResourceTO resourceTO) {\n     public ResourceTO update(final ResourceTO resourceTO) {\n         ExternalResource resource = resourceDAO.authFind(resourceTO.getKey());\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceTO.getKey() + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceTO.getKey() + '\\'');\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -169,7 +169,7 @@ public ResourceTO update(final ResourceTO resourceTO) {\n     public void setLatestSyncToken(final String key, final String anyTypeKey) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + '\\'');\n         }\n \n         Connector connector;\n@@ -183,18 +183,18 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n \n         if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n             if (resource.getOrgUnit() == null) {\n-                throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + \"'\");\n+                throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + '\\'');\n             }\n \n             resource.getOrgUnit().setSyncToken(connector.getLatestSyncToken(resource.getOrgUnit().getObjectClass()));\n         } else {\n             AnyType anyType = anyTypeDAO.find(anyTypeKey);\n             if (anyType == null) {\n-                throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n+                throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n             }\n             Optional<? extends Provision> provision = resource.getProvision(anyType);\n             if (provision.isEmpty()) {\n-                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n+                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\'');\n             }\n \n             provision.get().setSyncToken(connector.getLatestSyncToken(provision.get().getObjectClass()));\n@@ -212,22 +212,22 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n     public void removeSyncToken(final String key, final String anyTypeKey) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + '\\'');\n         }\n         if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n             if (resource.getOrgUnit() == null) {\n-                throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + \"'\");\n+                throw new NotFoundException(\"Realm provision not enabled for Resource '\" + key + '\\'');\n             }\n \n             resource.getOrgUnit().setSyncToken(null);\n         } else {\n             AnyType anyType = anyTypeDAO.find(anyTypeKey);\n             if (anyType == null) {\n-                throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n+                throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n             }\n             Optional<? extends Provision> provision = resource.getProvision(anyType);\n             if (provision.isEmpty()) {\n-                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n+                throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + '\\'');\n             }\n \n             provision.get().setSyncToken(null);\n@@ -245,7 +245,7 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n     public ResourceTO delete(final String key) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + '\\'');\n         }\n \n         Set<String> effectiveRealms = RealmUtils.getEffective(\n@@ -265,7 +265,7 @@ public ResourceTO delete(final String key) {\n     public ResourceTO read(final String key) {\n         ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + key + \"'\");\n+            throw new NotFoundException(\"Resource '\" + key + '\\'');\n         }\n \n         return binder.getResourceTO(resource);\n@@ -282,15 +282,15 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n \n         ExternalResource resource = resourceDAO.authFind(resourceKey);\n         if (resource == null) {\n-            throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceKey + '\\'');\n         }\n         AnyType anyType = anyTypeDAO.find(anyTypeKey);\n         if (anyType == null) {\n-            throw new NotFoundException(\"AnyType '\" + anyTypeKey + \"'\");\n+            throw new NotFoundException(\"AnyType '\" + anyTypeKey + '\\'');\n         }\n         Optional<? extends Provision> provision = resource.getProvision(anyType);\n         if (provision.isEmpty()) {\n-            throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + \"'\");\n+            throw new NotFoundException(\"Provision on resource '\" + resourceKey + \"' for type '\" + anyTypeKey + '\\'');\n         }\n \n         return ImmutableTriple.of(resource, anyType, provision.get());\n@@ -314,10 +314,10 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         // 2. build connObjectKeyItem\n         MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight()).\n                 orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\"));\n+                \"ConnObjectKey mapping for \" + init.getMiddle() + ' ' + anyKey + \" on resource '\" + key + '\\''));\n         String connObjectKeyValue = mappingManager.getConnObjectKeyValue(any, init.getRight()).\n                 orElseThrow(() -> new NotFoundException(\n-                \"ConnObjectKey value for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\"));\n+                \"ConnObjectKey value for \" + init.getMiddle() + ' ' + anyKey + \" on resource '\" + key + '\\''));\n \n         // 3. determine attributes to query\n         Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(init.getRight()).stream().\n@@ -362,10 +362,10 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n         if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n             resource = resourceDAO.authFind(key);\n             if (resource == null) {\n-                throw new NotFoundException(\"Resource '\" + key + \"'\");\n+                throw new NotFoundException(\"Resource '\" + key + '\\'');\n             }\n             if (resource.getOrgUnit() == null) {\n-                throw new NotFoundException(\"Realm provisioning for resource '\" + key + \"'\");\n+                throw new NotFoundException(\"Realm provisioning for resource '\" + key + '\\'');\n             }\n \n             objectClass = resource.getOrgUnit().getObjectClass();\n@@ -413,7 +413,7 @@ public void handleResult(final SearchResult sr) {\n     public void check(final ResourceTO resourceTO) {\n         ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnector());\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + resourceTO.getConnector() + \"'\");\n+            throw new NotFoundException(\"Connector '\" + resourceTO.getConnector() + '\\'');\n         }\n \n         connFactory.createConnector("},{"sha":"f360225e2f9642066815fe3b031dbb3fa6639a14","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -72,7 +72,7 @@\n     @Autowired\n     private TemplateUtils templateUtils;\n \n-    private List<LogicActions> getActions(final Realm realm) {\n+    private static List<LogicActions> getActions(final Realm realm) {\n         List<LogicActions> actions = new ArrayList<>();\n \n         realm.getActions().forEach(impl -> {"},{"sha":"6d8c91ce3b710dff8776d142c7d9aaad7592c925","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -56,7 +56,7 @@ public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO>\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n-    private byte[] getAuthorities() {\n+    private static byte[] getAuthorities() {\n         byte[] authorities = null;\n         try {\n             authorities = ENCRYPTOR.encode(POJOHelper.serialize("},{"sha":"2cc212f3669b2a82d5a7c53de82c41409630bc68","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -51,7 +51,7 @@ public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO\n     public AnyTypeClassTO read(final String key) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(key);\n         if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+            LOG.error(\"Could not find anyType '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -82,7 +82,7 @@ public AnyTypeClassTO create(final AnyTypeClassTO anyTypeClassTO) {\n     public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n         AnyTypeClass anyType = anyTypeClassDAO.find(anyTypeClassTO.getKey());\n         if (anyType == null) {\n-            LOG.error(\"Could not find anyTypeClass '\" + anyTypeClassTO.getKey() + \"'\");\n+            LOG.error(\"Could not find anyTypeClass '\" + anyTypeClassTO.getKey() + '\\'');\n             throw new NotFoundException(anyTypeClassTO.getKey());\n         }\n \n@@ -96,7 +96,7 @@ public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n     public AnyTypeClassTO delete(final String key) {\n         AnyTypeClass anyTypeClass = anyTypeClassDAO.find(key);\n         if (anyTypeClass == null) {\n-            LOG.error(\"Could not find anyTypeClass '\" + key + \"'\");\n+            LOG.error(\"Could not find anyTypeClass '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"49bf59c56c064c680d798f1c87c2d9fc2a8b7f6b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -56,7 +56,7 @@ public class AnyTypeLogic extends AbstractTransactionalLogic<AnyTypeTO> {\n     public AnyTypeTO read(final String key) {\n         AnyType anyType = anyTypeDAO.find(key);\n         if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+            LOG.error(\"Could not find anyType '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -88,7 +88,7 @@ public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n     public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n         AnyType anyType = anyTypeDAO.find(anyTypeTO.getKey());\n         if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");\n+            LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + '\\'');\n \n             throw new NotFoundException(anyTypeTO.getKey());\n         }\n@@ -103,7 +103,7 @@ public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n     public AnyTypeTO delete(final String key) {\n         AnyType anyType = anyTypeDAO.find(key);\n         if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+            LOG.error(\"Could not find anyType '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"90f7249d7816112dae70571f4c5c1e57a63ff0ab","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ApplicationLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FApplicationLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -49,7 +49,7 @@ public class ApplicationLogic extends AbstractTransactionalLogic<ApplicationTO>\n     public ApplicationTO read(final String key) {\n         Application application = applicationDAO.find(key);\n         if (application == null) {\n-            LOG.error(\"Could not find application '\" + key + \"'\");\n+            LOG.error(\"Could not find application '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -62,7 +62,7 @@ public ApplicationTO read(final String key) {\n     public PrivilegeTO readPrivilege(final String key) {\n         Privilege privilege = applicationDAO.findPrivilege(key);\n         if (privilege == null) {\n-            LOG.error(\"Could not find privilege '\" + key + \"'\");\n+            LOG.error(\"Could not find privilege '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -85,7 +85,7 @@ public ApplicationTO create(final ApplicationTO applicationTO) {\n     public ApplicationTO update(final ApplicationTO applicationTO) {\n         Application application = applicationDAO.find(applicationTO.getKey());\n         if (application == null) {\n-            LOG.error(\"Could not find application '\" + applicationTO.getKey() + \"'\");\n+            LOG.error(\"Could not find application '\" + applicationTO.getKey() + '\\'');\n             throw new NotFoundException(applicationTO.getKey());\n         }\n \n@@ -96,7 +96,7 @@ public ApplicationTO update(final ApplicationTO applicationTO) {\n     public ApplicationTO delete(final String key) {\n         Application application = applicationDAO.find(key);\n         if (application == null) {\n-            LOG.error(\"Could not find application '\" + key + \"'\");\n+            LOG.error(\"Could not find application '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"1cbd1a362c4e69857c9102c1bcb9193a8fb61f39","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DynRealmLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDynRealmLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -47,7 +47,7 @@ public class DynRealmLogic extends AbstractTransactionalLogic<DynRealmTO> {\n     public DynRealmTO read(final String key) {\n         DynRealm dynRealm = dynRealmDAO.find(key);\n         if (dynRealm == null) {\n-            LOG.error(\"Could not find dynamic realm '\" + key + \"'\");\n+            LOG.error(\"Could not find dynamic realm '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -69,7 +69,7 @@ public DynRealmTO create(final DynRealmTO dynRealmTO) {\n     public DynRealmTO update(final DynRealmTO dynRealmTO) {\n         DynRealm dynRealm = dynRealmDAO.find(dynRealmTO.getKey());\n         if (dynRealm == null) {\n-            LOG.error(\"Could not find dynamic realm '\" + dynRealmTO.getKey() + \"'\");\n+            LOG.error(\"Could not find dynamic realm '\" + dynRealmTO.getKey() + '\\'');\n             throw new NotFoundException(dynRealmTO.getKey());\n         }\n \n@@ -80,7 +80,7 @@ public DynRealmTO update(final DynRealmTO dynRealmTO) {\n     public DynRealmTO delete(final String key) {\n         DynRealm dynRealm = dynRealmDAO.find(key);\n         if (dynRealm == null) {\n-            LOG.error(\"Could not find dynamic realm '\" + key + \"'\");\n+            LOG.error(\"Could not find dynamic realm '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"0d5a0c02ba295e51489fa6391f921d397a0a60da","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -233,7 +233,7 @@ public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPr\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n             sce.getElements().addAll(ownedGroups.stream().\n-                    map(g -> g.getKey() + \" \" + g.getName()).collect(Collectors.toList()));\n+                    map(g -> g.getKey() + ' ' + g.getName()).collect(Collectors.toList()));\n             throw sce;\n         }\n "},{"sha":"40380cd8c2626286b26c1c0dc053d85006a39188","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -77,7 +77,7 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati\n     @Autowired\n     private NotificationDAO notificationDAO;\n \n-    private void checkType(final String type) {\n+    private static void checkType(final String type) {\n         if (!ImplementationTypesHolder.getInstance().getValues().containsKey(type)) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementationType);\n             sce.getElements().add(\"Implementation type not found: \");\n@@ -101,7 +101,7 @@ public ImplementationTO read(final String type, final String key) {\n \n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {\n-            LOG.error(\"Could not find implementation '\" + key + \"'\");\n+            LOG.error(\"Could not find implementation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -137,7 +137,7 @@ public ImplementationTO create(final ImplementationTO implementationTO) {\n     public ImplementationTO update(final ImplementationTO implementationTO) {\n         Implementation implementation = implementationDAO.find(implementationTO.getKey());\n         if (implementation == null) {\n-            LOG.error(\"Could not find implementation '\" + implementationTO.getKey() + \"'\");\n+            LOG.error(\"Could not find implementation '\" + implementationTO.getKey() + '\\'');\n \n             throw new NotFoundException(implementationTO.getKey());\n         }\n@@ -154,7 +154,7 @@ public ImplementationTO update(final ImplementationTO implementationTO) {\n     public void delete(final String type, final String key) {\n         Implementation implementation = implementationDAO.find(key);\n         if (implementation == null) {\n-            LOG.error(\"Could not find implementation '\" + key + \"'\");\n+            LOG.error(\"Could not find implementation '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"22c5d37ef6c78a9b97670ccfee00aecfd86e9d40","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -152,7 +152,7 @@ public List<AuditLoggerName> listAudits() {\n                 collect(Collectors.toList());\n     }\n \n-    private void throwInvalidLogger(final LoggerType type) {\n+    private static void throwInvalidLogger(final LoggerType type) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidLogger);\n         sce.getElements().add(\"Expected \" + type.name());\n \n@@ -216,7 +216,7 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n             }\n             for (AuditAppender auditAppender : loggerLoader.auditAppenders(AuthContextUtils.getDomain())) {\n                 if (auditAppender.getEvents().stream().anyMatch(event -> name.equalsIgnoreCase(event.toLoggerName()))) {\n-                    loggerLoader.addAppenderToContext(ctx, auditAppender, logConf);\n+                    LoggerLoader.addAppenderToContext(ctx, auditAppender, logConf);\n                 }\n             }\n             if (isRootLogConf) {"},{"sha":"074a2bde438f79faf3df5195b5078e20d90576c7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -53,7 +53,7 @@ public class MailTemplateLogic extends AbstractTransactionalLogic<MailTemplateTO\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    private MailTemplateTO getMailTemplateTO(final String key) {\n+    private static MailTemplateTO getMailTemplateTO(final String key) {\n         MailTemplateTO mailTemplateTO = new MailTemplateTO();\n         mailTemplateTO.setKey(key);\n         return mailTemplateTO;\n@@ -64,7 +64,7 @@ private MailTemplateTO getMailTemplateTO(final String key) {\n     public MailTemplateTO read(final String key) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n-            LOG.error(\"Could not find mail template '\" + key + \"'\");\n+            LOG.error(\"Could not find mail template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -95,7 +95,7 @@ public MailTemplateTO create(final String key) {\n     public String getFormat(final String key, final MailTemplateFormat format) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n-            LOG.error(\"Could not find mail template '\" + key + \"'\");\n+            LOG.error(\"Could not find mail template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -116,7 +116,7 @@ public String getFormat(final String key, final MailTemplateFormat format) {\n     public void setFormat(final String key, final MailTemplateFormat format, final String template) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n-            LOG.error(\"Could not find mail template '\" + key + \"'\");\n+            LOG.error(\"Could not find mail template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -134,7 +134,7 @@ public void setFormat(final String key, final MailTemplateFormat format, final S\n     public MailTemplateTO delete(final String key) {\n         MailTemplate mailTemplate = mailTemplateDAO.find(key);\n         if (mailTemplate == null) {\n-            LOG.error(\"Could not find mail template '\" + key + \"'\");\n+            LOG.error(\"Could not find mail template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"af54d4baca10081ae61ed355761f1e6844cf144a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -54,7 +54,7 @@ public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n     public NotificationTO read(final String key) {\n         Notification notification = notificationDAO.find(key);\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + key + \"'\");\n+            LOG.error(\"Could not find notification '\" + key + '\\'');\n \n             throw new NotFoundException(String.valueOf(key));\n         }\n@@ -77,7 +77,7 @@ public NotificationTO create(final NotificationTO notificationTO) {\n     public NotificationTO update(final NotificationTO notificationTO) {\n         Notification notification = notificationDAO.find(notificationTO.getKey());\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + notificationTO.getKey() + \"'\");\n+            LOG.error(\"Could not find notification '\" + notificationTO.getKey() + '\\'');\n             throw new NotFoundException(String.valueOf(notificationTO.getKey()));\n         }\n \n@@ -91,7 +91,7 @@ public NotificationTO update(final NotificationTO notificationTO) {\n     public NotificationTO delete(final String key) {\n         Notification notification = notificationDAO.find(key);\n         if (notification == null) {\n-            LOG.error(\"Could not find notification '\" + key + \"'\");\n+            LOG.error(\"Could not find notification '\" + key + '\\'');\n \n             throw new NotFoundException(String.valueOf(key));\n         }"},{"sha":"aa7465cdcf4e585ac8df320a81718d5e41d7ab18","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -74,7 +74,7 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     public List<RealmTO> list(final String fullPath) {\n         Realm realm = realmDAO.findByFullPath(fullPath);\n         if (realm == null) {\n-            LOG.error(\"Could not find realm '\" + fullPath + \"'\");\n+            LOG.error(\"Could not find realm '\" + fullPath + '\\'');\n \n             throw new NotFoundException(fullPath);\n         }\n@@ -134,7 +134,7 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n     public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n         if (realm == null) {\n-            LOG.error(\"Could not find realm '\" + realmTO.getFullPath() + \"'\");\n+            LOG.error(\"Could not find realm '\" + realmTO.getFullPath() + '\\'');\n \n             throw new NotFoundException(realmTO.getFullPath());\n         }\n@@ -156,7 +156,7 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n     public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         Realm realm = realmDAO.findByFullPath(fullPath);\n         if (realm == null) {\n-            LOG.error(\"Could not find realm '\" + fullPath + \"'\");\n+            LOG.error(\"Could not find realm '\" + fullPath + '\\'');\n \n             throw new NotFoundException(fullPath);\n         }"},{"sha":"1b76d42c541f9e5b860e59cb6afffa50bedd5f18","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RelationshipTypeLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRelationshipTypeLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -48,7 +48,7 @@ public class RelationshipTypeLogic extends AbstractTransactionalLogic<Relationsh\n     public RelationshipTypeTO read(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n         if (relationshipType == null) {\n-            LOG.error(\"Could not find relationshipType '\" + key + \"'\");\n+            LOG.error(\"Could not find relationshipType '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -71,7 +71,7 @@ public RelationshipTypeTO create(final RelationshipTypeTO relationshipTypeTO) {\n     public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTypeTO.getKey());\n         if (relationshipType == null) {\n-            LOG.error(\"Could not find relationshipType '\" + relationshipTypeTO.getKey() + \"'\");\n+            LOG.error(\"Could not find relationshipType '\" + relationshipTypeTO.getKey() + '\\'');\n             throw new NotFoundException(relationshipTypeTO.getKey());\n         }\n \n@@ -85,7 +85,7 @@ public RelationshipTypeTO update(final RelationshipTypeTO relationshipTypeTO) {\n     public RelationshipTypeTO delete(final String key) {\n         RelationshipType relationshipType = relationshipTypeDAO.find(key);\n         if (relationshipType == null) {\n-            LOG.error(\"Could not find relationshipType '\" + key + \"'\");\n+            LOG.error(\"Could not find relationshipType '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"77568e60094ba2d7614c49bf9ac97d5092bb1c5b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -215,8 +215,8 @@ public ReportExec getReportExec(final String executionKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n-    public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n-            final ReportExecExportFormat format) {\n+    public static void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n+                                             final ReportExecExportFormat format) {\n \n         // streaming SAX handler from a compressed byte array stream\n         try (ByteArrayInputStream bais = new ByteArrayInputStream(reportExec.getExecResult());"},{"sha":"907a7b96817fe3f4c3c2a8588dc15e25aa3e2963","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -53,7 +53,7 @@ public class ReportTemplateLogic extends AbstractTransactionalLogic<ReportTempla\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    private ReportTemplateTO getReportTemplateTO(final String key) {\n+    private static ReportTemplateTO getReportTemplateTO(final String key) {\n         ReportTemplateTO reportTemplateTO = new ReportTemplateTO();\n         reportTemplateTO.setKey(key);\n         return reportTemplateTO;\n@@ -64,7 +64,7 @@ private ReportTemplateTO getReportTemplateTO(final String key) {\n     public ReportTemplateTO read(final String key) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n-            LOG.error(\"Could not find report template '\" + key + \"'\");\n+            LOG.error(\"Could not find report template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -95,7 +95,7 @@ public ReportTemplateTO create(final String key) {\n     public String getFormat(final String key, final ReportTemplateFormat format) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n-            LOG.error(\"Could not find report template '\" + key + \"'\");\n+            LOG.error(\"Could not find report template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -118,7 +118,7 @@ public String getFormat(final String key, final ReportTemplateFormat format) {\n     public void setFormat(final String key, final ReportTemplateFormat format, final String template) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n-            LOG.error(\"Could not find report template '\" + key + \"'\");\n+            LOG.error(\"Could not find report template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -146,7 +146,7 @@ public void setFormat(final String key, final ReportTemplateFormat format, final\n     public ReportTemplateTO delete(final String key) {\n         ReportTemplate reportTemplate = reportTemplateDAO.find(key);\n         if (reportTemplate == null) {\n-            LOG.error(\"Could not find report template '\" + key + \"'\");\n+            LOG.error(\"Could not find report template '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"a37e4ee77c821396452a8ce53a55445bf80c0373","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -48,7 +48,7 @@ public class RoleLogic extends AbstractTransactionalLogic<RoleTO> {\n     public RoleTO read(final String key) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + key + \"'\");\n+            LOG.error(\"Could not find role '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -71,7 +71,7 @@ public RoleTO create(final RoleTO roleTO) {\n     public RoleTO update(final RoleTO roleTO) {\n         Role role = roleDAO.find(roleTO.getKey());\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleTO.getKey() + \"'\");\n+            LOG.error(\"Could not find role '\" + roleTO.getKey() + '\\'');\n             throw new NotFoundException(roleTO.getKey());\n         }\n \n@@ -82,7 +82,7 @@ public RoleTO update(final RoleTO roleTO) {\n     public RoleTO delete(final String key) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + key + \"'\");\n+            LOG.error(\"Could not find role '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -96,14 +96,14 @@ public RoleTO delete(final String key) {\n     public String getConsoleLayoutInfo(final String key) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + key + \"'\");\n+            LOG.error(\"Could not find role '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n \n         String consoleLayout = role.getConsoleLayoutInfo();\n         if (StringUtils.isBlank(consoleLayout)) {\n-            LOG.error(\"Could not find console layout for Role '\" + key + \"'\");\n+            LOG.error(\"Could not find console layout for Role '\" + key + '\\'');\n \n             throw new NotFoundException(\"Console layout for role \" + key);\n         }\n@@ -115,7 +115,7 @@ public String getConsoleLayoutInfo(final String key) {\n     public void setConsoleLayoutInfo(final String key, final String consoleLayout) {\n         Role role = roleDAO.find(key);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + key + \"'\");\n+            LOG.error(\"Could not find role '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }"},{"sha":"1e08b6e1406fe8a5518911520495a52ec2872394","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -229,7 +229,7 @@ public <T extends SchemaTO> void update(final SchemaType schemaType, final T sch\n             case VIRTUAL:\n                 VirSchema virSchema = virSchemaDAO.find(schemaTO.getKey());\n                 if (virSchema == null) {\n-                    throw new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + \"'\");\n+                    throw new NotFoundException(\"Virtual Schema '\" + schemaTO.getKey() + '\\'');\n                 }\n \n                 virSchemaDAO.save(binder.update((VirSchemaTO) schemaTO, virSchema));\n@@ -238,7 +238,7 @@ public <T extends SchemaTO> void update(final SchemaType schemaType, final T sch\n             case DERIVED:\n                 DerSchema derSchema = derSchemaDAO.find(schemaTO.getKey());\n                 if (derSchema == null) {\n-                    throw new NotFoundException(\"Derived schema '\" + schemaTO.getKey() + \"'\");\n+                    throw new NotFoundException(\"Derived schema '\" + schemaTO.getKey() + '\\'');\n                 }\n \n                 derSchemaDAO.save(binder.update((DerSchemaTO) schemaTO, derSchema));\n@@ -248,7 +248,7 @@ public <T extends SchemaTO> void update(final SchemaType schemaType, final T sch\n             default:\n                 PlainSchema plainSchema = plainSchemaDAO.find(schemaTO.getKey());\n                 if (plainSchema == null) {\n-                    throw new NotFoundException(\"Schema '\" + schemaTO.getKey() + \"'\");\n+                    throw new NotFoundException(\"Schema '\" + schemaTO.getKey() + '\\'');\n                 }\n \n                 plainSchemaDAO.save(binder.update((PlainSchemaTO) schemaTO, plainSchema));"},{"sha":"20610a86a437dd77a70dc2f63c7c7164e8fe4858","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SecurityQuestionLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSecurityQuestionLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -58,7 +58,7 @@ public List<SecurityQuestionTO> list() {\n     public SecurityQuestionTO read(final String key) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(key);\n         if (securityQuestion == null) {\n-            LOG.error(\"Could not find security question '\" + key + \"'\");\n+            LOG.error(\"Could not find security question '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -75,7 +75,7 @@ public SecurityQuestionTO create(final SecurityQuestionTO securityQuestionTO) {\n     public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(securityQuestionTO.getKey());\n         if (securityQuestion == null) {\n-            LOG.error(\"Could not find security question '\" + securityQuestionTO.getKey() + \"'\");\n+            LOG.error(\"Could not find security question '\" + securityQuestionTO.getKey() + '\\'');\n \n             throw new NotFoundException(securityQuestionTO.getKey());\n         }\n@@ -90,7 +90,7 @@ public SecurityQuestionTO update(final SecurityQuestionTO securityQuestionTO) {\n     public SecurityQuestionTO delete(final String key) {\n         SecurityQuestion securityQuestion = securityQuestionDAO.find(key);\n         if (securityQuestion == null) {\n-            LOG.error(\"Could not find security question '\" + key + \"'\");\n+            LOG.error(\"Could not find security question '\" + key + '\\'');\n \n             throw new NotFoundException(key);\n         }\n@@ -111,7 +111,7 @@ public SecurityQuestionTO readByUser(final String username) {\n         }\n \n         if (user.getSecurityQuestion() == null) {\n-            LOG.error(\"Could not find security question for user '\" + username + \"'\");\n+            LOG.error(\"Could not find security question for user '\" + username + '\\'');\n \n             throw new NotFoundException(\"Security question for user \" + username);\n         }"},{"sha":"58d54334d804a950d321b2a57694ea3c89dea2e5","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -337,7 +337,7 @@ public PlatformInfo platform() {\n         return PLATFORM_INFO;\n     }\n \n-    private void initSystemInfo() {\n+    private static void initSystemInfo() {\n         if (SYSTEM_INFO == null) {\n             OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();\n             RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n@@ -350,27 +350,27 @@ private void initSystemInfo() {\n             }\n \n             SYSTEM_INFO.setOs(operatingSystemMXBean.getName()\n-                    + \" \" + operatingSystemMXBean.getVersion()\n-                    + \" \" + operatingSystemMXBean.getArch());\n+                    + ' ' + operatingSystemMXBean.getVersion()\n+                    + ' ' + operatingSystemMXBean.getArch());\n             SYSTEM_INFO.setAvailableProcessors(operatingSystemMXBean.getAvailableProcessors());\n             SYSTEM_INFO.setJvm(\n                     runtimeMXBean.getVmName()\n-                    + \" \" + System.getProperty(\"java.version\")\n-                    + \" \" + runtimeMXBean.getVmVendor());\n+                    + ' ' + System.getProperty(\"java.version\")\n+                    + ' ' + runtimeMXBean.getVmVendor());\n             SYSTEM_INFO.setStartTime(runtimeMXBean.getStartTime());\n         }\n     }\n \n     @EventListener\n-    public void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n+    public static void addLoadInstant(final PayloadApplicationEvent<SystemInfo.LoadInstant> event) {\n         synchronized (MONITOR) {\n             initSystemInfo();\n             SYSTEM_INFO.getLoad().add(event.getPayload());\n         }\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public SystemInfo system() {\n+    public static SystemInfo system() {\n         synchronized (MONITOR) {\n             initSystemInfo();\n         }\n@@ -448,11 +448,11 @@ public Pair<Integer, List<GroupTO>> searchAssignableGroups(\n             termCond.setSchema(\"name\");\n \n             String termSearchableValue = (term.startsWith(\"*\") && !term.endsWith(\"*\"))\n-                    ? term + \"%\"\n+                    ? term + '%'\n                     : (!term.startsWith(\"*\") && term.endsWith(\"*\"))\n-                    ? \"%\" + term\n+                    ? '%' + term\n                     : (term.startsWith(\"*\") && term.endsWith(\"*\")\n-                    ? term : \"%\" + term + \"%\");\n+                    ? term : '%' + term + '%');\n             termCond.setExpression(termSearchableValue);\n \n             searchCond = SearchCond.getAndCond("},{"sha":"0651a9855fe46cfd46a446832d4719f4571bd9b9","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -347,7 +347,7 @@ protected ProvisioningResult<UserTO> doDelete(\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n             sce.getElements().addAll(ownedGroups.stream().\n-                    map(group -> group.getKey() + \" \" + group.getName()).collect(Collectors.toList()));\n+                    map(group -> group.getKey() + ' ' + group.getName()).collect(Collectors.toList()));\n             throw sce;\n         }\n "},{"sha":"271f84adf25d78196780c9f3c5020f071d441caa","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -188,6 +188,6 @@ private static SAXTransformerFactory createNewSAXTransformerFactory() {\n \n     @Override\n     public String toString() {\n-        return StringRepresentation.buildString(this, \"src=<\" + this.source + \">\");\n+        return StringRepresentation.buildString(this, \"src=<\" + this.source + '>');\n     }\n }"},{"sha":"b5421ca6d46f3a4e90bae27fd4ea02666e5ac863","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -100,7 +100,7 @@ public int getOrder() {\n      *\n      * @return basePackage for classpath scanning\n      */\n-    protected String getBasePackage() {\n+    protected static String getBasePackage() {\n         return DEFAULT_BASE_PACKAGE;\n     }\n "},{"sha":"4b057e329955cd643e4569912feeb5836a074f39","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerAccessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -74,7 +74,7 @@ public void synchronizeLog4J(final LoggerContext ctx) {\n                     logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n                     syncopeLoggers.remove(loggerName);\n                 } else if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix())\n-                        || !loggerName.startsWith(AuthContextUtils.getDomain() + \".\" + LoggerType.AUDIT.getPrefix())) {\n+                        || !loggerName.startsWith(AuthContextUtils.getDomain() + '.' + LoggerType.AUDIT.getPrefix())) {\n \n                     Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n                     syncopeLogger.setKey(loggerName);"},{"sha":"f3eddbc2b1328fdb6ff559523fe5c2ea56a663f4","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -64,7 +64,7 @@ public int getOrder() {\n         return 300;\n     }\n \n-    private ColumnConfig[] buildColumnConfigs(final LoggerContext ctx) {\n+    private static ColumnConfig[] buildColumnConfigs(final LoggerContext ctx) {\n         ColumnConfig[] columnConfigs = {\n             ColumnConfig.newBuilder().\n             setConfiguration(ctx.getConfiguration()).setName(\"EVENT_DATE\").setEventTimestamp(true).build(),\n@@ -154,10 +154,10 @@ public List<AuditAppender> auditAppenders(final String domain) throws BeansExcep\n         }).collect(Collectors.toList());\n     }\n \n-    public void addAppenderToContext(\n-            final LoggerContext ctx,\n-            final AuditAppender auditAppender,\n-            final LoggerConfig eventLogConf) {\n+    public static void addAppenderToContext(\n+        final LoggerContext ctx,\n+        final AuditAppender auditAppender,\n+        final LoggerConfig eventLogConf) {\n \n         Appender targetAppender = ctx.getConfiguration().getAppender(auditAppender.getTargetAppenderName());\n         if (targetAppender == null) {"},{"sha":"fe2fdcc37b16acf429399d55f288463e8d6254c3","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.cxf;\n \n import java.sql.SQLException;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -154,7 +153,7 @@ public Response toResponse(final Exception ex) {\n         return Optional.ofNullable(builder).map(ResponseBuilder::build).orElse(null);\n     }\n \n-    private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\n+    private static ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\n         ResponseBuilder builder = Response.status(ex.getType().getResponseStatus());\n         builder.header(RESTHeaders.ERROR_CODE, ex.getType().name());\n \n@@ -170,15 +169,15 @@ private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientExc\n         return builder.entity(error);\n     }\n \n-    private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final SyncopeClientCompositeException ex) {\n+    private static ResponseBuilder getSyncopeClientCompositeExceptionResponse(\n+        final SyncopeClientCompositeException ex) {\n         if (ex.getExceptions().size() == 1) {\n             return getSyncopeClientExceptionResponse(ex.getExceptions().iterator().next());\n         }\n \n         ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n \n-        List<ErrorTO> errors = new ArrayList<>();\n-        ex.getExceptions().stream().map(sce -> {\n+        List<ErrorTO> errors = ex.getExceptions().stream().map(sce -> {\n             builder.header(RESTHeaders.ERROR_CODE, sce.getType().name());\n \n             ErrorTO error = new ErrorTO();\n@@ -196,7 +195,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n         return builder.entity(errors);\n     }\n \n-    private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n+    private static ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n         InvalidEntityException iee = null;\n \n         if (ex instanceof InvalidEntityException) {\n@@ -244,7 +243,7 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n         return null;\n     }\n \n-    private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n+    private static ResponseBuilder processBadRequestExceptions(final Exception ex) {\n         // This exception might be raised by Flowable (if enabled)\n         Class<?> ibatisPersistenceException = null;\n         try {\n@@ -272,7 +271,7 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n         return null;\n     }\n \n-    private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n+    private static ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n         ResponseBuilder builder = Response.status(hType.getResponseStatus()).\n                 header(RESTHeaders.ERROR_CODE, hType.name()).\n                 header(RESTHeaders.ERROR_INFO, hType.getInfoHeaderValue(msg));\n@@ -292,7 +291,7 @@ private ResponseBuilder builder(final ClientExceptionType hType, final String ms\n      * @param response model to construct {@link ResponseBuilder} from\n      * @return new {@link ResponseBuilder} instance initialized from given response\n      */\n-    private ResponseBuilder builder(final Response response) {\n+    private static ResponseBuilder builder(final Response response) {\n         ResponseBuilder builder = JAXRSUtils.toResponseBuilder(response.getStatus());\n         builder.entity(response.getEntity());\n         response.getMetadata().forEach((key, value) -> {"},{"sha":"9ab783dc82e020e1a557543a763b2d662554be10","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/UnwrappedObjectMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FUnwrappedObjectMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FUnwrappedObjectMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FUnwrappedObjectMapper.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -50,7 +50,7 @@ public UnwrappedObjectMapper() {\n      * @param value the potential Map to unwrap\n      * @return the unwrapped map or the original value\n      */\n-    private Object unwrapMap(final Object value) {\n+    private static Object unwrapMap(final Object value) {\n         if (value instanceof Map) {\n             Map<?, ?> map = (Map<?, ?>) value;\n             if (map.size() == 1) {"},{"sha":"8ef9a265c346a6c055c7d1bdce9295a4f709b06d","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -48,7 +48,7 @@ public class WADLServlet extends HttpServlet {\n \n     private static final Pattern SCHEMA_PATTERN = Pattern.compile(\"/schema_(.*)_(.*)\\\\.html\");\n \n-    protected void finish(final Pipeline<SAXPipelineComponent> pipeline, final HttpServletResponse response)\n+    protected static void finish(final Pipeline<SAXPipelineComponent> pipeline, final HttpServletResponse response)\n             throws ServletException, IOException {\n \n         pipeline.addComponent(XMLSerializer.createHTML4Serializer());"},{"sha":"e60994b4c8899ff6db35d90610c0ffb31ec0dbbe","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -74,11 +74,11 @@ public ReportTO read(final String key) {\n     public Response exportExecutionResult(final String executionKey, final ReportExecExportFormat fmt) {\n         ReportExecExportFormat format = Optional.ofNullable(fmt).orElse(ReportExecExportFormat.XML);\n         ReportExec reportExec = logic.getReportExec(executionKey);\n-        StreamingOutput sout = (os) -> logic.exportExecutionResult(os, reportExec, format);\n+        StreamingOutput sout = (os) -> ReportLogic.exportExecutionResult(os, reportExec, format);\n \n         return Response.ok(sout).\n                 header(HttpHeaders.CONTENT_DISPOSITION,\n-                        \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().toLowerCase()).\n+                        \"attachment; filename=\" + reportExec.getReport().getName() + '.' + format.name().toLowerCase()).\n                 build();\n     }\n "},{"sha":"a86f7e23c0f2b946a280ad15110ed81b68fe17bb","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SyncopeServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSyncopeServiceImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -88,7 +88,7 @@ public PlatformInfo platform() {\n \n     @Override\n     public SystemInfo system() {\n-        return logic.system();\n+        return SyncopeLogic.system();\n     }\n \n     @Override"},{"sha":"7a1a9d4a0fea2bce6f57949063fc67c11bf98be7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -66,7 +66,7 @@ public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n-    private AttributeCond createAttributeCond(final String schema) {\n+    private static AttributeCond createAttributeCond(final String schema) {\n         AttributeCond attributeCond = SearchableFields.contains(schema)\n                 ? new AnyCond()\n                 : new AttributeCond();"},{"sha":"39f50dd9dd7a86e10632fb068e92a4485f1d67ba","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnyDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -165,7 +165,7 @@ public <A extends Any<?>> Optional<A> findByPlainAttrUniqueValue(\n      * @param literals literals/tokens\n      * @return split value\n      */\n-    private List<String> split(final String attrValue, final List<String> literals) {\n+    private static List<String> split(final String attrValue, final List<String> literals) {\n         final List<String> attrValues = new ArrayList<>();\n \n         if (literals.isEmpty()) {"},{"sha":"ec3ee709c3d67afd08b9be2b9cd2cecf311ff282","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnyDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnyDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -45,7 +45,7 @@ protected String queryBegin(final String table) {\n                 : StringUtils.containsIgnoreCase(table, AnyTypeKind.GROUP.name())\n                 ? \"group_search\"\n                 : \"anyObject_search\";\n-        return \"SELECT DISTINCT id FROM \" + view + \" \";\n+        return \"SELECT DISTINCT id FROM \" + view + ' ';\n     }\n \n     @Override\n@@ -61,12 +61,12 @@ protected String attrValueMatch(\n                     + \"AND \"\n                     + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n                     + (schema.isUniqueConstraint()\n-                    ? \"attrUniqueValue ->> '$.\" + schemaInfo.getLeft() + \"'\"\n+                    ? \"attrUniqueValue ->> '$.\" + schemaInfo.getLeft() + '\\''\n                     : schemaInfo.getLeft())\n                     + (schemaInfo.getRight() ? \")\" : \"\")\n                     + \" = \"\n                     + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n-                    + \"?\"\n+                    + '?'\n                     + (schemaInfo.getRight() ? \")\" : \"\");\n         } else {\n             PlainAttr<?> container = anyUtils.newPlainAttr();"},{"sha":"bb48eda941ecb61fae5e0937e95d6647334401eb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -63,15 +63,15 @@ protected void processOBS(\n                         attrWhere.append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]')\");\n \n                         nullAttrWhere.append(\" UNION SELECT DISTINCT any_id,\").append(svs.table().alias).append(\".*, \").\n-                                append(\"\\\"\").append(field).append(\"\\\"\").append(\" AS plainShema, \").\n+                                append('\"').append(field).append('\"').append(\" AS plainShema, \").\n                                 append(\"null AS binaryValue, \").\n                                 append(\"null AS booleanValue, \").\n                                 append(\"null AS dateValue, \").\n                                 append(\"null AS doubleValue, \").\n                                 append(\"null AS longValue, \").\n                                 append(\"null AS stringValue, \").\n                                 append(\"null AS attrUniqueValue\").\n-                                append(\" FROM \").append(svs.table().name).append(\" \").append(svs.table().alias).\n+                                append(\" FROM \").append(svs.table().name).append(' ').append(svs.table().alias).\n                                 append(\", \").append(svs.field().name).\n                                 append(\" WHERE any_id=\").append(svs.table().alias).append(\".id\").\n                                 append(\" AND any_id NOT IN \").\n@@ -105,11 +105,11 @@ protected void parseOrderByForPlainSchema(\n \n         obs.views.add(svs.field());\n \n-        item.select = svs.field().alias + \".\"\n+        item.select = svs.field().alias + '.'\n                 + (schema.isUniqueConstraint() ? \"attrUniqueValue\" : key(schema.getType()))\n                 + \" AS \" + fieldName;\n-        item.where = \"plainSchema = '\" + fieldName + \"'\";\n-        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+        item.where = \"plainSchema = '\" + fieldName + '\\'';\n+        item.orderBy = fieldName + ' ' + clause.getDirection().name();\n     }\n \n     private void fillAttrQuery(\n@@ -130,7 +130,7 @@ private void fillAttrQuery(\n             query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n             query.append(svs.field().name).append(\" WHERE \");\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n-            query.append(\")\");\n+            query.append(')');\n         } else {\n             if (!not && cond.getType() == AttributeCond.Type.EQ) {\n                 PlainAttr<?> container = anyUtils.newPlainAttr();\n@@ -153,14 +153,14 @@ private void fillAttrQuery(\n                         append(\" AND \").\n                         append(lower ? \"LOWER(\" : \"\").\n                         append(schema.isUniqueConstraint()\n-                                ? \"attrUniqueValue ->> '$.\" + key + \"'\"\n+                                ? \"attrUniqueValue ->> '$.\" + key + '\\''\n                                 : key).\n                         append(lower ? \")\" : \"\");\n \n                 appendOp(query, cond.getType(), not);\n \n                 query.append(lower ? \"LOWER(\" : \"\").\n-                        append(\"?\").append(setParameter(parameters, cond.getExpression())).\n+                        append('?').append(setParameter(parameters, cond.getExpression())).\n                         append(lower ? \")\" : \"\");\n             }\n         }"},{"sha":"dbc7bcedeeeaac82744daef9dfabdce2ff59df6e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnyDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnyDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -55,10 +55,10 @@ protected String attrValueMatch(\n                     + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n                     + (schema.isUniqueConstraint() ? \"attrs -> 'uniqueValue'\" : \"attrValues\")\n                     + \" ->> '\" + schemaInfo.getLeft()\n-                    + \"'\" + (schemaInfo.getRight() ? \")\" : \"\")\n+                    + '\\'' + (schemaInfo.getRight() ? \")\" : \"\")\n                     + \" = \"\n                     + (schemaInfo.getRight() ? \"LOWER(\" : \"\")\n-                    + \"?\"\n+                    + '?'\n                     + (schemaInfo.getRight() ? \")\" : \"\");\n         } else {\n             PlainAttr<?> container = anyUtils.newPlainAttr();"},{"sha":"3eef640043daba0c3e4d9cf89f124d71e5a64247","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -67,7 +67,7 @@ protected void processOBS(\n                                 append(\"'{\\\"schema\\\": \\\"\").\n                                 append(field).\n                                 append(\"\\\"}'::jsonb as attrs, '{}'::jsonb as attrValues\").\n-                                append(\" FROM \").append(svs.table().name).append(\" \").append(svs.table().alias).\n+                                append(\" FROM \").append(svs.table().name).append(' ').append(svs.table().alias).\n                                 append(\", \").append(svs.field().name).\n                                 append(\" WHERE \").\n                                 append(\"any_id NOT IN \").\n@@ -102,8 +102,8 @@ protected void parseOrderByForPlainSchema(\n         obs.views.add(svs.field());\n \n         item.select = svs.field().alias + \".attrValues ->> '\" + key(schema.getType()) + \"' AS \" + fieldName;\n-        item.where = \"attrs ->> 'schema' = '\" + fieldName + \"'\";\n-        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+        item.where = \"attrs ->> 'schema' = '\" + fieldName + '\\'';\n+        item.orderBy = fieldName + ' ' + clause.getDirection().name();\n     }\n \n     private void fillAttrQuery(\n@@ -124,7 +124,7 @@ private void fillAttrQuery(\n             query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n             query.append(svs.field().name).append(\" WHERE \");\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n-            query.append(\")\");\n+            query.append(')');\n         } else {\n             if (!not && cond.getType() == AttributeCond.Type.EQ) {\n                 PlainAttr<?> container = anyUtils.newPlainAttr();\n@@ -148,7 +148,7 @@ private void fillAttrQuery(\n                         append(lower ? \"LOWER(\" : \"\").\n                         append(schema.isUniqueConstraint()\n                                 ? \"attrs -> 'uniqueValue'\" : \"attrValues\").\n-                        append(\" ->> '\").append(key).append(\"'\").\n+                        append(\" ->> '\").append(key).append('\\'').\n                         append(lower ? \")\" : \"\");\n \n                 appendOp(query, cond.getType(), not);\n@@ -162,7 +162,7 @@ private void fillAttrQuery(\n                     }\n                 }\n                 query.append(lower ? \"LOWER(\" : \"\").\n-                        append(\"?\").append(setParameter(parameters, value)).\n+                        append('?').append(setParameter(parameters, value)).\n                         append(lower ? \")\" : \"\");\n             }\n         }"},{"sha":"2d152deb108a5817c2fcb934c292e2e765dd09d3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainConfFactory.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -59,24 +59,24 @@ public void setEnvironment(final Environment env) {\n         this.env = env;\n     }\n \n-    private void unregisterSingleton(final String name) {\n+    private static void unregisterSingleton(final String name) {\n         if (ApplicationContextProvider.getBeanFactory().containsSingleton(name)) {\n             ApplicationContextProvider.getBeanFactory().destroySingleton(name);\n         }\n     }\n \n-    private void registerSingleton(final String name, final Object bean) {\n+    private static void registerSingleton(final String name, final Object bean) {\n         unregisterSingleton(name);\n         ApplicationContextProvider.getBeanFactory().registerSingleton(name, bean);\n     }\n \n-    private void unregisterBeanDefinition(final String name) {\n+    private static void unregisterBeanDefinition(final String name) {\n         if (ApplicationContextProvider.getBeanFactory().containsBeanDefinition(name)) {\n             ApplicationContextProvider.getBeanFactory().removeBeanDefinition(name);\n         }\n     }\n \n-    private void registerBeanDefinition(final String name, final BeanDefinition beanDefinition) {\n+    private static void registerBeanDefinition(final String name, final BeanDefinition beanDefinition) {\n         unregisterBeanDefinition(name);\n         ApplicationContextProvider.getBeanFactory().registerBeanDefinition(name, beanDefinition);\n     }"},{"sha":"2e62e16b583367d63f922efd19c9a2ffc89f04b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BasicValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBasicValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -42,7 +42,7 @@ protected void doValidate(final PlainAttrValue attrValue) {\n \n             if (!found) {\n                 throw new InvalidPlainAttrValueException(\n-                        \"'\" + value + \"' is not one of: \" + schema.getEnumerationValues());\n+                    '\\'' + value + \"' is not one of: \" + schema.getEnumerationValues());\n             }\n         }\n     }"},{"sha":"97c2649030ed31af6deb209ed8de3c0bcab46aca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/attrvalue/validation/BinaryValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fattrvalue%2Fvalidation%2FBinaryValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -60,12 +60,12 @@ protected void doValidate(final PlainAttrValue attrValue) {\n             if (!valid) {\n                 throw new InvalidPlainAttrValueException(\n                         \"Found MIME type: '\" + mimeType + \"', expecting: '\"\n-                        + attrValue.getAttr().getSchema().getMimeType() + \"'\");\n+                        + attrValue.getAttr().getSchema().getMimeType() + '\\'');\n             }\n         }\n     }\n \n-    private boolean isValidJSON(final String value) {\n+    private static boolean isValidJSON(final String value) {\n         try {\n             MAPPER.readTree(value);\n             return true;"},{"sha":"4a279f52b8a63dff219d00a391d632abc08e7ea7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -111,12 +111,13 @@ public class XMLContentExporter implements ContentExporter {\n     @Autowired\n     private RealmDAO realmDAO;\n \n-    private boolean isTableAllowed(final String tableName) {\n+    private static boolean isTableAllowed(final String tableName) {\n         return TABLE_PREFIXES_TO_BE_EXCLUDED.stream().\n                 allMatch(prefix -> !tableName.toUpperCase().startsWith(prefix.toUpperCase()));\n     }\n \n-    private List<String> sortByForeignKeys(final String dbSchema, final Connection conn, final Set<String> tableNames)\n+    private static List<String> sortByForeignKeys(final String dbSchema, final Connection conn,\n+                                                  final Set<String> tableNames)\n             throws SQLException {\n \n         Set<MultiParentNode<String>> roots = new HashSet<>();\n@@ -186,7 +187,7 @@ private List<String> sortByForeignKeys(final String dbSchema, final Connection c\n         return sortedTableNames;\n     }\n \n-    private String getValues(final ResultSet rs, final String columnName, final Integer columnType)\n+    private static String getValues(final ResultSet rs, final String columnName, final Integer columnType)\n             throws SQLException {\n \n         String res = null;\n@@ -260,7 +261,7 @@ private void exportTable(\n                     String columnName = pkeyRS.getString(\"COLUMN_NAME\");\n                     if (columnName != null) {\n                         if (orderBy.length() > 0) {\n-                            orderBy.append(\",\");\n+                            orderBy.append(',');\n                         }\n \n                         orderBy.append(columnName);"},{"sha":"d202922ce093f000ed0fb7d79ef41538db3866c2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentLoader.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -101,8 +101,8 @@ public void load(final String domain, final DataSource datasource) {\n         }\n     }\n \n-    private void loadDefaultContent(\n-            final String domain, final InputStream contentXML, final DataSource dataSource)\n+    private static void loadDefaultContent(\n+        final String domain, final InputStream contentXML, final DataSource dataSource)\n             throws IOException, ParserConfigurationException, SAXException {\n \n         SAXParserFactory factory = SAXParserFactory.newInstance();"},{"sha":"f05cbff80075d73bc78a6f77d4c44a5262f7cd98","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -160,7 +160,7 @@ public A authFind(final String key) {\n         A any = find(key);\n         if (any == null) {\n             throw new NotFoundException(StringUtils.substringBefore(\n-                    StringUtils.substringAfter(getClass().getSimpleName(), \"JPA\"), \"DAO\") + \" \" + key);\n+                    StringUtils.substringAfter(getClass().getSimpleName(), \"JPA\"), \"DAO\") + ' ' + key);\n         }\n \n         securityChecks(any);\n@@ -181,7 +181,7 @@ private Query findByPlainAttrValueQuery(final String entityName, final boolean i\n                 + \" AND \"\n                 + (ignoreCaseMatch ? \"LOWER(\" : \"\") + \"e.stringValue\" + (ignoreCaseMatch ? \")\" : \"\")\n                 + \" = \"\n-                + (ignoreCaseMatch ? \"LOWER(\" : \"\") + \":stringValue\" + (ignoreCaseMatch ? \")\" : \"\") + \")\"\n+                + (ignoreCaseMatch ? \"LOWER(\" : \"\") + \":stringValue\" + (ignoreCaseMatch ? \")\" : \"\") + ')'\n                 + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n                 + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n                 + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n@@ -255,7 +255,7 @@ public Optional<A> findByPlainAttrUniqueValue(\n      * @param literals literals/tokens\n      * @return split value\n      */\n-    private List<String> split(final String attrValue, final List<String> literals) {\n+    private static List<String> split(final String attrValue, final List<String> literals) {\n         final List<String> attrValues = new ArrayList<>();\n \n         if (literals.isEmpty()) {\n@@ -338,10 +338,10 @@ private Set<String> getWhereClause(final String expression, final String value,\n                     // clear builder\n                     bld.delete(0, bld.length());\n \n-                    bld.append(\"(\");\n+                    bld.append('(');\n \n                     // set schema key\n-                    bld.append(\"s.id = '\").append(identifiers.get(i)).append(\"'\");\n+                    bld.append(\"s.id = '\").append(identifiers.get(i)).append('\\'');\n \n                     bld.append(\" AND \");\n \n@@ -354,7 +354,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n                     // use a value clause different for eanch different schema type\n                     switch (schema.getType()) {\n                         case Boolean:\n-                            bld.append(\"v.booleanValue = '\").append(attrValues.get(i)).append(\"'\");\n+                            bld.append(\"v.booleanValue = '\").append(attrValues.get(i)).append('\\'');\n                             break;\n                         case Long:\n                             bld.append(\"v.longValue = \").append(attrValues.get(i));\n@@ -363,15 +363,15 @@ private Set<String> getWhereClause(final String expression, final String value,\n                             bld.append(\"v.doubleValue = \").append(attrValues.get(i));\n                             break;\n                         case Date:\n-                            bld.append(\"v.dateValue = '\").append(attrValues.get(i)).append(\"'\");\n+                            bld.append(\"v.dateValue = '\").append(attrValues.get(i)).append('\\'');\n                             break;\n                         default:\n                             if (ignoreCaseMatch) {\n                                 bld.append(\"LOWER(v.stringValue) = '\").\n-                                        append(attrValues.get(i).toLowerCase()).append(\"'\");\n+                                        append(attrValues.get(i).toLowerCase()).append('\\'');\n                             } else {\n                                 bld.append(\"v.stringValue = '\").\n-                                        append(attrValues.get(i)).append(\"'\");\n+                                        append(attrValues.get(i)).append('\\'');\n                             }\n                     }\n "},{"sha":"04edad727f9ecf9d743446db9c98b119f73af8c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -95,7 +95,7 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n-    protected SearchCond buildEffectiveCond(final SearchCond cond, final Set<String> dynRealmKeys) {\n+    protected static SearchCond buildEffectiveCond(final SearchCond cond, final Set<String> dynRealmKeys) {\n         List<SearchCond> effectiveConds = dynRealmKeys.stream().map(dynRealmKey -> {\n             DynRealmCond dynRealmCond = new DynRealmCond();\n             dynRealmCond.setDynRealm(dynRealmKey);\n@@ -165,7 +165,7 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttributeCond cond, fina\n                 ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n             }\n         } catch (ValidationException e) {\n-            LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+            LOG.error(\"Could not validate expression '\" + cond.getExpression() + '\\'', e);\n             throw new IllegalArgumentException();\n         }\n \n@@ -228,7 +228,7 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n             try {\n                 ((JPAPlainSchema) schema).validator().validate(computed.getExpression(), attrValue);\n             } catch (ValidationException e) {\n-                LOG.error(\"Could not validate expression '\" + computed.getExpression() + \"'\", e);\n+                LOG.error(\"Could not validate expression '\" + computed.getExpression() + '\\'', e);\n                 throw new IllegalArgumentException();\n             }\n         }\n@@ -245,7 +245,7 @@ protected String check(final MembershipCond cond) {\n             groupKey = Optional.ofNullable(group).map(Entity::getKey).orElse(null);\n         }\n         if (groupKey == null) {\n-            LOG.error(\"Could not find group for '\" + cond.getGroup() + \"'\");\n+            LOG.error(\"Could not find group for '\" + cond.getGroup() + '\\'');\n             throw new IllegalArgumentException();\n         }\n \n@@ -261,7 +261,7 @@ protected String check(final RelationshipCond cond) {\n             rightAnyObjectKey = Optional.ofNullable(anyObject).map(Entity::getKey).orElse(null);\n         }\n         if (rightAnyObjectKey == null) {\n-            LOG.error(\"Could not find any object for '\" + cond.getAnyObject() + \"'\");\n+            LOG.error(\"Could not find any object for '\" + cond.getAnyObject() + '\\'');\n             throw new IllegalArgumentException();\n         }\n \n@@ -271,7 +271,7 @@ protected String check(final RelationshipCond cond) {\n     protected Realm check(final AssignableCond cond) {\n         Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n         if (realm == null) {\n-            LOG.error(\"Could not find realm for '\" + cond.getRealmFullPath() + \"'\");\n+            LOG.error(\"Could not find realm for '\" + cond.getRealmFullPath() + '\\'');\n             throw new IllegalArgumentException();\n         }\n \n@@ -290,7 +290,7 @@ protected String check(final MemberCond cond) {\n             memberKey = Optional.ofNullable(member).map(Entity::getKey).orElse(null);\n         }\n         if (memberKey == null) {\n-            LOG.error(\"Could not find user or any object for '\" + cond.getMember() + \"'\");\n+            LOG.error(\"Could not find user or any object for '\" + cond.getMember() + '\\'');\n             throw new IllegalArgumentException();\n         }\n "},{"sha":"e7fb7d8b2198a245d5aa326a1a1fd85398086fd4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAccessTokenDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -59,7 +59,7 @@ public AccessToken findByOwner(final String username) {\n         return result;\n     }\n \n-    private StringBuilder buildFindAllQuery() {\n+    private static StringBuilder buildFindAllQuery() {\n         return new StringBuilder(\"SELECT e FROM \").\n                 append(JPAAccessToken.class.getSimpleName()).\n                 append(\" e WHERE 1=1\");\n@@ -75,7 +75,7 @@ public int count() {\n         return ((Number) query.getSingleResult()).intValue();\n     }\n \n-    private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+    private static String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         StringBuilder statement = new StringBuilder();\n \n         for (OrderByClause clause : orderByClauses) {"},{"sha":"1f37e4c77891d5ecef9e4dcd4dc19f5dbbad00e1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyMatchDAO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyMatchDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -141,13 +141,13 @@ public <T extends Any<?>> boolean matches(final T any, final SearchCond cond) {\n         return false;\n     }\n \n-    private boolean matches(final Any<?> any, final AnyTypeCond cond, final boolean not) {\n+    private static boolean matches(final Any<?> any, final AnyTypeCond cond, final boolean not) {\n         boolean equals = any.getType().getKey().equals(cond.getAnyTypeKey());\n         return not ? !equals : equals;\n     }\n \n-    private boolean matches(\n-            final GroupableRelatable<?, ?, ?, ?, ?> any, final RelationshipTypeCond cond, final boolean not) {\n+    private static boolean matches(\n+        final GroupableRelatable<?, ?, ?, ?, ?> any, final RelationshipTypeCond cond, final boolean not) {\n \n         boolean found = any.getRelationships().stream().\n                 anyMatch(rel -> rel.getType().getKey().equals(cond.getRelationshipTypeKey()));\n@@ -227,11 +227,11 @@ private boolean matches(final Any<?> any, final ResourceCond cond, final boolean\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private boolean matches(\n-            final List<? extends PlainAttrValue> anyAttrValues,\n-            final PlainAttrValue attrValue,\n-            final PlainSchema schema,\n-            final AttributeCond cond) {\n+    private static boolean matches(\n+        final List<? extends PlainAttrValue> anyAttrValues,\n+        final PlainAttrValue attrValue,\n+        final PlainSchema schema,\n+        final AttributeCond cond) {\n \n         return anyAttrValues.stream().anyMatch(item -> {\n             switch (cond.getType()) {\n@@ -320,7 +320,7 @@ private boolean matches(final Any<?> any, final AttributeCond cond, final boolea\n                         ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n                     }\n                 } catch (ValidationException e) {\n-                    LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+                    LOG.error(\"Could not validate expression '\" + cond.getExpression() + '\\'', e);\n                     return false;\n                 }\n \n@@ -411,7 +411,7 @@ private boolean matches(final Any<?> any, final AnyCond cond, final boolean not)\n                     try {\n                         ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n                     } catch (ValidationException e) {\n-                        LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+                        LOG.error(\"Could not validate expression '\" + cond.getExpression() + '\\'', e);\n                         return false;\n                     }\n                 }"},{"sha":"6df44fb3426580092024ba659980ed10bbc9bf88","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -212,12 +212,12 @@ protected <T extends Any<?>> List<T> doSearch(\n         return List.of();\n     }\n \n-    protected int setParameter(final List<Object> parameters, final Object parameter) {\n+    protected static int setParameter(final List<Object> parameters, final Object parameter) {\n         parameters.add(parameter);\n         return parameters.size();\n     }\n \n-    private void fillWithParameters(final Query query, final List<Object> parameters) {\n+    private static void fillWithParameters(final Query query, final List<Object> parameters) {\n         for (int i = 0; i < parameters.size(); i++) {\n             if (parameters.get(i) instanceof Date) {\n                 query.setParameter(i + 1, (Date) parameters.get(i), TemporalType.TIMESTAMP);\n@@ -231,7 +231,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n         }\n     }\n \n-    private StringBuilder buildSelect(final OrderBySupport obs) {\n+    private static StringBuilder buildSelect(final OrderBySupport obs) {\n         StringBuilder select = new StringBuilder(\"SELECT DISTINCT u.any_id\");\n \n         obs.items.forEach(item -> select.append(',').append(item.select));\n@@ -264,10 +264,10 @@ protected void processOBS(\n                         } else {\n                             attrWhere.append(\" OR \");\n                         }\n-                        attrWhere.append(\"schema_id='\").append(field).append(\"'\");\n+                        attrWhere.append(\"schema_id='\").append(field).append('\\'');\n \n                         nullAttrWhere.append(\" UNION SELECT any_id, \").\n-                                append(\"'\").\n+                                append('\\'').\n                                 append(field).\n                                 append(\"' AS schema_id, \").\n                                 append(\"null AS booleanvalue, \").\n@@ -309,7 +309,7 @@ private StringBuilder buildWhere(\n         return where;\n     }\n \n-    private StringBuilder buildOrderBy(final OrderBySupport obs) {\n+    private static StringBuilder buildOrderBy(final OrderBySupport obs) {\n         StringBuilder orderBy = new StringBuilder();\n \n         obs.items.forEach(item -> orderBy.append(item.orderBy).append(','));\n@@ -321,7 +321,7 @@ private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         return orderBy;\n     }\n \n-    protected String key(final AttrSchemaType schemaType) {\n+    protected static String key(final AttrSchemaType schemaType) {\n         String key;\n         switch (schemaType) {\n             case Boolean:\n@@ -371,8 +371,8 @@ protected void parseOrderByForPlainSchema(\n                     append(\" AS \").append(fieldName).toString();\n             item.where = new StringBuilder().\n                     append(svs.asSearchViewSupport().uniqueAttr().alias).\n-                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n-            item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+                    append(\".schema_id='\").append(fieldName).append('\\'').toString();\n+            item.orderBy = fieldName + ' ' + clause.getDirection().name();\n         } else {\n             obs.views.add(svs.asSearchViewSupport().attr());\n \n@@ -381,8 +381,8 @@ protected void parseOrderByForPlainSchema(\n                     append(\" AS \").append(fieldName).toString();\n             item.where = new StringBuilder().\n                     append(svs.asSearchViewSupport().attr().alias).\n-                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n-            item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+                    append(\".schema_id='\").append(fieldName).append('\\'').toString();\n+            item.orderBy = fieldName + ' ' + clause.getDirection().name();\n         }\n     }\n \n@@ -429,9 +429,9 @@ private OrderBySupport parseOrderBy(\n \n                 obs.views.add(svs.field());\n \n-                item.select = svs.field().alias + \".\" + fieldName;\n+                item.select = svs.field().alias + '.' + fieldName;\n                 item.where = StringUtils.EMPTY;\n-                item.orderBy = svs.field().alias + \".\" + fieldName + \" \" + clause.getDirection().name();\n+                item.orderBy = svs.field().alias + '.' + fieldName + ' ' + clause.getDirection().name();\n             }\n \n             if (item.isEmpty()) {\n@@ -531,11 +531,11 @@ private Pair<StringBuilder, Set<String>> getQuery(\n         return Pair.of(query, involvedPlainAttrs);\n     }\n \n-    protected String getQuery(\n-            final AnyTypeCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    protected static String getQuery(\n+        final AnyTypeCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE type_id\");\n@@ -551,11 +551,11 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    protected String getQuery(\n-            final RelationshipTypeCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    protected static String getQuery(\n+        final RelationshipTypeCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -648,11 +648,11 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    protected String getQuery(\n-            final RoleCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    protected static String getQuery(\n+        final RoleCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -675,18 +675,18 @@ protected String getQuery(\n         }\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n-                append(svs.dynrolemembership().name).append(\" WHERE \").\n+                append(SearchSupport.dynrolemembership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRole())).\n                 append(\"))\");\n \n         return query.toString();\n     }\n \n-    protected String getQuery(\n-            final PrivilegeCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    protected static String getQuery(\n+        final PrivilegeCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -716,11 +716,11 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    protected String getQuery(\n-            final DynRealmCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    protected static String getQuery(\n+        final DynRealmCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -732,18 +732,18 @@ protected String getQuery(\n         }\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n-                append(svs.dynrealmmembership().name).append(\" WHERE \").\n+                append(SearchSupport.dynrealmmembership().name).append(\" WHERE \").\n                 append(\"dynRealm_id=?\").append(setParameter(parameters, cond.getDynRealm())).\n                 append(\"))\");\n \n         return query.toString();\n     }\n \n-    protected String getQuery(\n-            final ResourceCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    protected static String getQuery(\n+        final ResourceCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -841,14 +841,14 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    private void fillAttrQuery(\n-            final StringBuilder query,\n-            final PlainAttrValue attrValue,\n-            final PlainSchema schema,\n-            final AttributeCond cond,\n-            final boolean not,\n-            final List<Object> parameters,\n-            final SearchSupport svs) {\n+    private static void fillAttrQuery(\n+        final StringBuilder query,\n+        final PlainAttrValue attrValue,\n+        final PlainSchema schema,\n+        final AttributeCond cond,\n+        final boolean not,\n+        final List<Object> parameters,\n+        final SearchSupport svs) {\n \n         // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n         if (not && schema.isMultivalue()\n@@ -863,14 +863,14 @@ private void fillAttrQuery(\n             }\n             query.append(\" WHERE schema_id='\").append(schema.getKey());\n             fillAttrQuery(query, attrValue, schema, cond, false, parameters, svs);\n-            query.append(\")\");\n+            query.append(')');\n         } else {\n             // activate ignoreCase only for EQ and LIKE operators\n             boolean ignoreCase = AttributeCond.Type.ILIKE == cond.getType() || AttributeCond.Type.IEQ == cond.getType();\n \n             String column = (cond instanceof AnyCond) ? cond.getSchema() : key(schema.getType());\n             if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && ignoreCase) {\n-                column = \"LOWER (\" + column + \")\";\n+                column = \"LOWER (\" + column + ')';\n             }\n             if (!(cond instanceof AnyCond)) {\n                 column = \"' AND \" + column;\n@@ -992,19 +992,19 @@ protected String getQuery(\n                 query.append(checked.getLeft().isUniqueConstraint()\n                         ? svs.asSearchViewSupport().uniqueAttr().name\n                         : svs.asSearchViewSupport().attr().name).\n-                        append(\" WHERE schema_id=\").append(\"'\").append(checked.getLeft().getKey()).append(\"'\");\n+                        append(\" WHERE schema_id=\").append('\\'').append(checked.getLeft().getKey()).append('\\'');\n                 break;\n \n             case ISNULL:\n                 query.append(svs.field().name).\n                         append(\" WHERE any_id NOT IN \").\n-                        append(\"(\").\n+                        append('(').\n                         append(\"SELECT DISTINCT any_id FROM \").\n                         append(checked.getLeft().isUniqueConstraint()\n                                 ? svs.asSearchViewSupport().uniqueAttr().name\n                                 : svs.asSearchViewSupport().attr().name).\n-                        append(\" WHERE schema_id=\").append(\"'\").append(checked.getLeft().getKey()).append(\"'\").\n-                        append(\")\");\n+                        append(\" WHERE schema_id=\").append('\\'').append(checked.getLeft().getKey()).append('\\'').\n+                        append(')');\n                 break;\n \n             default:"},{"sha":"d6719737c919fb53faf6bf4c79139b64f274d944","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -151,7 +151,7 @@ public List<ExternalResource> findByPropagationActions(final Implementation prop\n         return query.getResultList();\n     }\n \n-    private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n+    private static StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName()).\n                 append(\" e WHERE e.\");"},{"sha":"7829c854ed207aded1de78dba2ce34fbe20dd7a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -232,7 +232,7 @@ public List<String> findAllKeys(final int page, final int itemsPerPage) {\n         return findAllKeys(JPAGroup.TABLE, page, itemsPerPage);\n     }\n \n-    private SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n+    private static SearchCond buildDynMembershipCond(final String baseCondFIQL, final Realm groupRealm) {\n         AssignableCond cond = new AssignableCond();\n         cond.setRealmFullPath(groupRealm.getFullPath());\n         cond.setFromGroup(true);"},{"sha":"57f60b3ee2fe16acb7fdec539ecf33589e003228","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPolicyDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -52,7 +52,7 @@ public class JPAPolicyDAO extends AbstractDAO<Policy> implements PolicyDAO {\n     @Lazy\n     private ExternalResourceDAO resourceDAO;\n \n-    private <T extends Policy> Class<? extends AbstractPolicy> getEntityReference(final Class<T> reference) {\n+    private static <T extends Policy> Class<? extends AbstractPolicy> getEntityReference(final Class<T> reference) {\n         return AccountPolicy.class.isAssignableFrom(reference)\n                 ? JPAAccountPolicy.class\n                 : PasswordPolicy.class.isAssignableFrom(reference)"},{"sha":"c268d648d38d954696f29a5ecd40d7604b2e2a38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -164,7 +164,7 @@ public List<Realm> findByLogicActions(final Implementation logicActions) {\n         return query.getResultList();\n     }\n \n-    private void findAncestors(final List<Realm> result, final Realm realm) {\n+    private static void findAncestors(final List<Realm> result, final Realm realm) {\n         if (realm.getParent() != null && !result.contains(realm.getParent())) {\n             result.add(realm.getParent());\n             findAncestors(result, realm.getParent());"},{"sha":"d14f73f011465a8053c4851a214cf8f7c23a25e9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -81,7 +81,7 @@ public int count(final String reportKey) {\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n-    private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+    private static String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         StringBuilder statement = new StringBuilder();\n \n         for (OrderByClause clause : orderByClauses) {"},{"sha":"416412f0721736c8bf0b1227a39d680155d6f579","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -89,7 +89,7 @@ public Class<? extends Task> getEntityReference(final TaskType type) {\n         return result;\n     }\n \n-    private String getEntityTableName(final TaskType type) {\n+    private static String getEntityTableName(final TaskType type) {\n         String result = null;\n \n         switch (type) {\n@@ -205,14 +205,14 @@ public <T extends Task> List<T> findAll(final TaskType type) {\n         return findAll(type, null, null, null, null, -1, -1, List.of());\n     }\n \n-    private StringBuilder buildFindAllQuery(\n-            final TaskType type,\n-            final ExternalResource resource,\n-            final Notification notification,\n-            final AnyTypeKind anyTypeKind,\n-            final String entityKey,\n-            final boolean orderByTaskExecInfo,\n-            final List<Object> queryParameters) {\n+    private static StringBuilder buildFindAllQuery(\n+        final TaskType type,\n+        final ExternalResource resource,\n+        final Notification notification,\n+        final AnyTypeKind anyTypeKind,\n+        final String entityKey,\n+        final boolean orderByTaskExecInfo,\n+        final List<Object> queryParameters) {\n \n         if (resource != null\n                 && type != TaskType.PROPAGATION && type != TaskType.PUSH && type != TaskType.PULL) {\n@@ -233,11 +233,11 @@ private StringBuilder buildFindAllQuery(\n         StringBuilder queryString = new StringBuilder(\"SELECT \").append(AbstractTask.TABLE).append(\".*\");\n \n         if (orderByTaskExecInfo) {\n-            queryString.append(\",\").append(JPATaskExec.TABLE).append(\".startDate AS startDate\").\n-                    append(\",\").append(JPATaskExec.TABLE).append(\".endDate AS endDate\").\n-                    append(\",\").append(JPATaskExec.TABLE).append(\".status AS status\").\n+            queryString.append(',').append(JPATaskExec.TABLE).append(\".startDate AS startDate\").\n+                    append(',').append(JPATaskExec.TABLE).append(\".endDate AS endDate\").\n+                    append(',').append(JPATaskExec.TABLE).append(\".status AS status\").\n                     append(\" FROM \").append(AbstractTask.TABLE).\n-                    append(\",\").append(JPATaskExec.TABLE).append(\",\").append(\"(SELECT \").\n+                    append(',').append(JPATaskExec.TABLE).append(',').append(\"(SELECT \").\n                     append(JPATaskExec.TABLE).append(\".task_id, \").\n                     append(\"MAX(\").append(JPATaskExec.TABLE).append(\".startDate) AS startDate\").\n                     append(\" FROM \").append(JPATaskExec.TABLE).\n@@ -299,7 +299,8 @@ private StringBuilder buildFindAllQuery(\n         return queryString;\n     }\n \n-    private String toOrderByStatement(final Class<? extends Task> beanClass, final List<OrderByClause> orderByClauses) {\n+    private static String toOrderByStatement(final Class<? extends Task> beanClass,\n+                                             final List<OrderByClause> orderByClauses) {\n \n         StringBuilder statement = new StringBuilder();\n \n@@ -384,7 +385,7 @@ public <T extends Task> List<T> findAll(\n                             false,\n                             queryParameters)).\n                     append(\" AND id NOT IN \").\n-                    append(\"(SELECT task_id AS id FROM \").append(JPATaskExec.TABLE).append(\")\").\n+                    append(\"(SELECT task_id AS id FROM \").append(JPATaskExec.TABLE).append(')').\n                     append(\")) T\");\n         } else {\n             queryString.insert(0, \"SELECT T.id FROM (\").append(\") T\");"},{"sha":"eb705324143b211611d280882c34cc48a2becf23","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -125,7 +125,7 @@ public int count(final String taskKey) {\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n-    private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+    private static String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n         StringBuilder statement = new StringBuilder();\n \n         for (OrderByClause clause : orderByClauses) {"},{"sha":"5bbd7a2b664cf8d1c19ddd4b022031a15e5c9ff0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -78,7 +78,7 @@\n public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     protected static final Pattern USERNAME_PATTERN =\n-            Pattern.compile(\"^\" + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+            Pattern.compile('^' + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n "},{"sha":"db48343ada09b021605827195a94093cfaaa7ed9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -117,12 +117,12 @@ public SearchView field() {\n \n     public SearchView relationship() {\n         String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n-        return new SearchView(\"sv\" + kind + \"m\", field().name + \"_\" + kind + \"relationship\");\n+        return new SearchView(\"sv\" + kind + 'm', field().name + '_' + kind + \"relationship\");\n     }\n \n     public SearchView membership() {\n         String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n-        return new SearchView(\"sv\" + kind + \"m\", field().name + \"_\" + kind + \"membership\");\n+        return new SearchView(\"sv\" + kind + 'm', field().name + '_' + kind + \"membership\");\n     }\n \n     public SearchView dyngroupmembership() {\n@@ -142,11 +142,11 @@ public SearchView dynpriv() {\n         return new SearchView(\"svdp\", field().name + \"_dynpriv\");\n     }\n \n-    public SearchView dynrolemembership() {\n+    public static SearchView dynrolemembership() {\n         return new SearchView(\"svdr\", JPARoleDAO.DYNMEMB_TABLE);\n     }\n \n-    public SearchView dynrealmmembership() {\n+    public static SearchView dynrealmmembership() {\n         return new SearchView(\"svdrealm\", JPADynRealmDAO.DYNMEMB_TABLE);\n     }\n "},{"sha":"9e1ca1ae315d41fcce4880ac3a703640ab6f2917","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/BooleanValueHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FBooleanValueHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FBooleanValueHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FBooleanValueHandler.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -52,7 +52,7 @@ public Column[] map(final ValueMapping vm, final String name, final ColumnIO io,\n         return map(vm, colName, io, adapt);\n     }\n \n-    public Column[] map(final ValueMapping vm, final DBIdentifier name, final ColumnIO io, final boolean adapt) {\n+    public static Column[] map(final ValueMapping vm, final DBIdentifier name, final ColumnIO io, final boolean adapt) {\n         Column col = new Column();\n         col.setIdentifier(name);\n         col.setJavaType(JavaTypes.INT);"},{"sha":"a85d845150e77ab5ba3f369ed7753ba6a0517f79","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/openjpa/LocaleValueHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fopenjpa%2FLocaleValueHandler.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -55,7 +55,7 @@ public Column[] map(final ValueMapping vm, final String name, final ColumnIO io,\n         return map(vm, colName, io, adapt);\n     }\n \n-    public Column[] map(final ValueMapping vm, final DBIdentifier name, final ColumnIO io, final boolean adapt) {\n+    public static Column[] map(final ValueMapping vm, final DBIdentifier name, final ColumnIO io, final boolean adapt) {\n         Column col = new Column();\n         col.setIdentifier(name);\n         col.setJavaType(JavaTypes.STRING);"},{"sha":"ea6743aa0163baad998aa21df1e1ac4a950aa14c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -31,15 +31,15 @@\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n     protected static final Pattern KEY_PATTERN =\n-            Pattern.compile(\"^\" + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+            Pattern.compile('^' + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n     @Override\n     public void initialize(final A annotation) {\n         // no initialization\n     }\n \n-    protected final String getTemplate(final EntityViolationType type, final String message) {\n-        return type.name() + \";\" + message;\n+    protected static String getTemplate(final EntityViolationType type, final String message) {\n+        return type.name() + ';' + message;\n     }\n \n     protected boolean isHtml(final String text) {"},{"sha":"baa33f9c30fc95054cba0e508215d124f907053a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -33,10 +33,10 @@\n @SuppressWarnings(\"rawtypes\")\n public class AnyValidator extends AbstractValidator<AnyCheck, Any> {\n \n-    private boolean raiseNotAllowedViolation(\n-            final ConstraintValidatorContext context,\n-            final String schema,\n-            final Group group) {\n+    private static boolean raiseNotAllowedViolation(\n+        final ConstraintValidatorContext context,\n+        final String schema,\n+        final Group group) {\n \n         if (group == null) {\n             context.buildConstraintViolationWithTemplate("},{"sha":"52ef08ce93aeabe0087efd0b51aa5dbaee426390","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -70,7 +70,8 @@ public void validate(final Object object) {\n                 }\n             }\n \n-            throw new InvalidEntityException(entityInt == null ? \"Entity\" : entityInt.getSimpleName(), violations);\n+            throw new InvalidEntityException(entityInt == null\n+                ? \"Entity\" : entityInt.getSimpleName(), violations);\n         }\n     }\n }"},{"sha":"46f931e03aa1cd1f8354d4613610c481981dd515","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -33,7 +33,7 @@\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n-    private boolean isValid(final List<? extends Item> items, final ConstraintValidatorContext context) {\n+    private static boolean isValid(final List<? extends Item> items, final ConstraintValidatorContext context) {\n         long connObjectKeys = items.stream().filter(Item::isConnObjectKey).count();\n         if (connObjectKeys != 1) {\n             context.buildConstraintViolationWithTemplate(\n@@ -45,15 +45,15 @@ private boolean isValid(final List<? extends Item> items, final ConstraintValida\n         return true;\n     }\n \n-    private boolean isValid(final OrgUnit orgUnit, final ConstraintValidatorContext context) {\n+    private static boolean isValid(final OrgUnit orgUnit, final ConstraintValidatorContext context) {\n         if (orgUnit == null) {\n             return true;\n         }\n \n         return isValid(orgUnit.getItems(), context);\n     }\n \n-    private boolean isValid(final Mapping mapping, final ConstraintValidatorContext context) {\n+    private static boolean isValid(final Mapping mapping, final ConstraintValidatorContext context) {\n         if (mapping == null) {\n             return true;\n         }"},{"sha":"2abc2e98df0c8b7f124b5cfa712e68538f4e4262","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PropagationTaskValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -45,7 +45,7 @@ public boolean isValid(final PropagationTask task, final ConstraintValidatorCont\n                     try {\n                         ExecStatus.valueOf(execution.getStatus());\n                     } catch (IllegalArgumentException e) {\n-                        LOG.error(\"Invalid execution status '\" + execution.getStatus() + \"'\", e);\n+                        LOG.error(\"Invalid execution status '\" + execution.getStatus() + '\\'', e);\n                         isValid = false;\n                     }\n                 }"},{"sha":"09b6368b63d2e0a803f072af3e1d1347653f1651","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -48,7 +48,7 @@ public boolean isValid(final Report report, final ConstraintValidatorContext con\n             try {\n                 new CronExpression(report.getCronExpression());\n             } catch (ParseException e) {\n-                LOG.error(\"Invalid cron expression '\" + report.getCronExpression() + \"'\", e);\n+                LOG.error(\"Invalid cron expression '\" + report.getCronExpression() + '\\'', e);\n                 isValid = false;\n \n                 context.disableDefaultConstraintViolation();"},{"sha":"8699dd5615b68e9da25c400040c0853196a0530a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SchedTaskValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -34,7 +34,7 @@ public boolean isValid(final SchedTask task, final ConstraintValidatorContext co\n             try {\n                 new CronExpression(task.getCronExpression());\n             } catch (ParseException e) {\n-                LOG.error(\"Invalid cron expression '\" + task.getCronExpression() + \"'\", e);\n+                LOG.error(\"Invalid cron expression '\" + task.getCronExpression() + '\\'', e);\n                 isValid = false;\n \n                 context.disableDefaultConstraintViolation();"},{"sha":"efeae698939f7bc41a4644ef6ef336ae222c786a","filename":"core/persistence-jpa/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaDialect.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaDialect.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -87,7 +87,7 @@ public ConnectionHandle getJdbcConnection(final EntityManager entityManager, fin\n      * @param em the generic {@code EntityManager} instance\n      * @return the OpenJPA-specific variant of {@code EntityManager}\n      */\n-    protected OpenJPAEntityManager getOpenJPAEntityManager(final EntityManager em) {\n+    protected static OpenJPAEntityManager getOpenJPAEntityManager(final EntityManager em) {\n         return OpenJPAPersistence.cast(em);\n     }\n "},{"sha":"2a2fb969a4c6c812f1b84acdc9ca2391653b9c62","filename":"core/persistence-jpa/src/main/java/org/springframework/orm/jpa/vendor/OpenJpaVendorAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fspringframework%2Form%2Fjpa%2Fvendor%2FOpenJpaVendorAdapter.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -88,7 +88,7 @@ public Map<String, Object> getJpaPropertyMap() {\n      * @param database the specified database\n      * @return the OpenJPA database dictionary name, or {@code null} if none found\n      */\n-    protected String determineDatabaseDictionary(final Database database) {\n+    protected static String determineDatabaseDictionary(final Database database) {\n         switch (database) {\n             case DB2:\n                 return \"db2\";"},{"sha":"9bf8c74438ba2447b65b63088e0fa3716b98e924","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -130,7 +130,7 @@ public void checkForEnumType() {\n         }\n \n         schema.setEnumerationValues(\"red\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"yellow\");\n-        schema.setEnumerationKeys(\"1\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"2\");\n+        schema.setEnumerationKeys('1' + SyncopeConstants.ENUM_VALUES_SEPARATOR + '2');\n \n         plainSchemaDAO.save(schema);\n "},{"sha":"835682c2898d0990e5a29583444735194e294068","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -242,11 +242,11 @@ public void issueSYNCOPE800() {\n         assertNotNull(firstname);\n \n         // search by ksuffix derived attribute\n-        List<User> list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"ksuffix\"), firstname + \"k\", false);\n+        List<User> list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"ksuffix\"), firstname + 'k', false);\n         assertEquals(1, list.size());\n \n         // search by kprefix derived attribute\n-        list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"kprefix\"), \"k\" + firstname, false);\n+        list = userDAO.findByDerAttrValue(derSchemaDAO.find(\"kprefix\"), 'k' + firstname, false);\n         assertEquals(1, list.size());\n     }\n "},{"sha":"d7cbe49a806a9f80cb1c717c5a2d1a0f02bf23f1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationException.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -37,7 +37,7 @@ public class PropagationException extends RuntimeException {\n      * @param stackTrace original stacktrace\n      */\n     public PropagationException(final String resourceName, final String stackTrace) {\n-        super(\"Exception during provision on resource \" + resourceName + \"\\n\" + stackTrace);\n+        super(\"Exception during provision on resource \" + resourceName + '\\n' + stackTrace);\n \n         this.resourceName = resourceName;\n     }"},{"sha":"5b16b1af08b13927b56d27246d108a488360463b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -27,7 +27,7 @@\n public final class RealmUtils {\n \n     public static String getGroupOwnerRealm(final String realmPath, final String groupKey) {\n-        return realmPath + \"@\" + groupKey;\n+        return realmPath + '@' + groupKey;\n     }\n \n     public static boolean normalizingAddTo(final Set<String> realms, final String newRealm) {"},{"sha":"c0cd4cf05f3c8abb8ed05f50ad41d845d4e6264b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AuditEntry.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAuditEntry.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -66,7 +66,7 @@ public AuditEntry(\n         }\n     }\n \n-    private Object maskSensitive(final Object object) {\n+    private static Object maskSensitive(final Object object) {\n         Object masked;\n \n         if (object instanceof UserTO) {"},{"sha":"16faf613d301c6f90e2ba2134bacbc4e2c8573f3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -509,7 +509,7 @@ public ConnInstance getConnInstance() {\n         return connInstance;\n     }\n \n-    private Object getPropertyValue(final String propType, final List<?> values) {\n+    private static Object getPropertyValue(final String propType, final List<?> values) {\n         Object value = null;\n \n         try {\n@@ -551,6 +551,6 @@ private Object getPropertyValue(final String propType, final List<?> values) {\n     @Override\n     public String toString() {\n         return \"ConnectorFacadeProxy{\"\n-                + \"connector=\" + connector + \"\\n\" + \"capabitilies=\" + connInstance.getCapabilities() + '}';\n+                + \"connector=\" + connector + '\\n' + \"capabitilies=\" + connInstance.getCapabilities() + '}';\n     }\n }"},{"sha":"f6f3b7d6465d7d7fd62d6d13aeb81668a2969de3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -68,7 +68,7 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n \n     private EntityFactory entityFactory;\n \n-    private String getBeanName(final ExternalResource resource) {\n+    private static String getBeanName(final ExternalResource resource) {\n         return String.format(\"connInstance-%s-%S-%s\",\n                 AuthContextUtils.getDomain(), resource.getConnector().getKey(), resource.getKey());\n     }"},{"sha":"0f4757f5a7df15e893dbcc3005b47ba4cc38765f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -45,7 +45,7 @@ public class DerAttrHandlerImpl implements DerAttrHandler {\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n-    private Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema> schemas) {\n+    private static Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema> schemas) {\n         Map<DerSchema, String> result = new HashMap<>(schemas.size());\n \n         schemas.forEach(schema -> {\n@@ -90,8 +90,8 @@ public Map<DerSchema, String> getValues(final Any<?> any) {\n                 anyUtilsFactory.getInstance(any).dao().findAllowedSchemas(any, DerSchema.class).getForSelf());\n     }\n \n-    private Map<DerSchema, String> getValues(\n-            final GroupableRelatable<?, ?, ?, ?, ?> any, final Membership<?> membership, final Set<DerSchema> schemas) {\n+    private static Map<DerSchema, String> getValues(\n+        final GroupableRelatable<?, ?, ?, ?, ?> any, final Membership<?> membership, final Set<DerSchema> schemas) {\n \n         Map<DerSchema, String> result = new HashMap<>(schemas.size());\n "},{"sha":"04c13006d217bf3b2da46e5dcef8069b670cc1fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -221,7 +221,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         return Pair.of(connObjectKey, attributes);\n     }\n \n-    private String getIntValue(final Realm realm, final Item orgUnitItem) {\n+    private static String getIntValue(final Realm realm, final Item orgUnitItem) {\n         String value = null;\n         switch (orgUnitItem.getIntAttrName()) {\n             case \"key\":"},{"sha":"c7aae0d82791a7d43583f2e7b9cfbd707b4ba674","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -168,12 +168,12 @@ protected PlainSchema getPlainSchema(final String schemaName) {\n         return schema;\n     }\n \n-    private void fillAttr(\n-            final List<String> values,\n-            final AnyUtils anyUtils,\n-            final PlainSchema schema,\n-            final PlainAttr<?> attr,\n-            final SyncopeClientException invalidValues) {\n+    private static void fillAttr(\n+        final List<String> values,\n+        final AnyUtils anyUtils,\n+        final PlainSchema schema,\n+        final PlainAttr<?> attr,\n+        final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n         // otherwise only the fist one - if provided - is considered\n@@ -249,11 +249,11 @@ private SyncopeClientException checkMandatoryOnResources(\n         return reqValMissing;\n     }\n \n-    private void checkMandatory(\n-            final PlainSchema schema,\n-            final PlainAttr<?> attr,\n-            final Any<?> any,\n-            final SyncopeClientException reqValMissing) {\n+    private static void checkMandatory(\n+        final PlainSchema schema,\n+        final PlainAttr<?> attr,\n+        final Any<?> any,\n+        final SyncopeClientException reqValMissing) {\n \n         if (attr == null\n                 && !schema.isReadonly()\n@@ -265,7 +265,7 @@ private void checkMandatory(\n         }\n     }\n \n-    private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils anyUtils) {\n+    private static SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils anyUtils) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n@@ -545,15 +545,15 @@ protected void fill(\n         }\n     }\n \n-    protected void fillTO(\n-            final AnyTO anyTO,\n-            final String realmFullPath,\n-            final Collection<? extends AnyTypeClass> auxClasses,\n-            final Collection<? extends PlainAttr<?>> plainAttrs,\n-            final Map<DerSchema, String> derAttrs,\n-            final Map<VirSchema, List<String>> virAttrs,\n-            final Collection<? extends ExternalResource> resources,\n-            final boolean details) {\n+    protected static void fillTO(\n+        final AnyTO anyTO,\n+        final String realmFullPath,\n+        final Collection<? extends AnyTypeClass> auxClasses,\n+        final Collection<? extends PlainAttr<?>> plainAttrs,\n+        final Map<DerSchema, String> derAttrs,\n+        final Map<VirSchema, List<String>> virAttrs,\n+        final Collection<? extends ExternalResource> resources,\n+        final boolean details) {\n \n         anyTO.setRealm(realmFullPath);\n \n@@ -572,17 +572,17 @@ protected void fillTO(\n         anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n     }\n \n-    protected RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {\n+    protected static RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {\n         return new RelationshipTO.Builder().\n                 type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n                 build();\n     }\n \n-    protected MembershipTO getMembershipTO(\n-            final Collection<? extends PlainAttr<?>> plainAttrs,\n-            final Map<DerSchema, String> derAttrs,\n-            final Map<VirSchema, List<String>> virAttrs,\n-            final Membership<? extends Any<?>> membership) {\n+    protected static MembershipTO getMembershipTO(\n+        final Collection<? extends PlainAttr<?>> plainAttrs,\n+        final Map<DerSchema, String> derAttrs,\n+        final Map<VirSchema, List<String>> virAttrs,\n+        final Membership<? extends Any<?>> membership) {\n \n         MembershipTO membershipTO = new MembershipTO.Builder(membership.getRightEnd().getKey())\n                 .groupName(membership.getRightEnd().getName())\n@@ -613,8 +613,8 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any, final AnyUtils\n                 ifPresent(provision -> {\n                     MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n                             orElseThrow(() -> new NotFoundException(\n-                            \"ConnObjectKey mapping for \" + any.getType().getKey() + \" \" + any.getKey()\n-                            + \" on resource '\" + resource.getKey() + \"'\"));\n+                            \"ConnObjectKey mapping for \" + any.getType().getKey() + ' ' + any.getKey()\n+                            + \" on resource '\" + resource.getKey() + '\\''));\n \n                     mappingManager.getConnObjectKeyValue(any, provision).\n                             ifPresent(value -> connObjectKeys.put(resource.getKey(), value));"},{"sha":"815fe3c1d8284fc2063130a0b95cfc34d885dfc8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -133,7 +133,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n     public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = connInstanceDAO.authFind(connInstanceTO.getKey());\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + '\\'');\n         }\n \n         ConnInstanceTO current = getConnInstanceTO(connInstance);"},{"sha":"9a514da9eb3acd32f9508440a41aba54572d54e5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -386,8 +386,8 @@ public GroupTO getGroupTO(final String key) {\n         return getGroupTO(groupDAO.authFind(key), true);\n     }\n \n-    private void populateTransitiveResources(\n-            final Group group, final Any<?> any, final Map<String, PropagationByResource> result) {\n+    private static void populateTransitiveResources(\n+        final Group group, final Any<?> any, final Map<String, PropagationByResource> result) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n         group.getResources().forEach(resource -> {"},{"sha":"f4fbe766d92a795885f45022c3708ab30fba4397","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -151,7 +151,7 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n \n                     Implementation rule = implementationDAO.find(impl);\n                     if (rule == null) {\n-                        throw new NotFoundException(\"Implementation \" + type + \" \" + impl);\n+                        throw new NotFoundException(\"Implementation \" + type + ' ' + impl);\n                     }\n                     correlationRule.setImplementation(rule);\n                 }\n@@ -184,7 +184,7 @@ private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO)\n \n                     Implementation rule = implementationDAO.find(impl);\n                     if (rule == null) {\n-                        throw new NotFoundException(\"Implementation \" + type + \" \" + impl);\n+                        throw new NotFoundException(\"Implementation \" + type + ' ' + impl);\n                     }\n                     correlationRule.setImplementation(rule);\n                 }"},{"sha":"bb2adae55728395e267e67f04986349c436b3365","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -72,7 +72,7 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n \n     private void setTemplates(final RealmTO realmTO, final Realm realm) {\n         // validate JEXL expressions from templates and proceed if fine\n-        templateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidRealm);\n+        TemplateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidRealm);\n         realmTO.getTemplates().forEach((key, template) -> {\n             AnyType type = anyTypeDAO.find(key);\n             if (type == null) {"},{"sha":"abf2f2bca496f339df873dbe779726195bb25c9a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -132,7 +132,7 @@ public ReportTO getReportTO(final Report report) {\n     @Override\n     public String buildRefDesc(final Report report) {\n         return \"Report \"\n-                + report.getKey() + \" \"\n+                + report.getKey() + ' '\n                 + report.getName();\n     }\n "},{"sha":"fe82ef5d042ece63213ce8e4cdc3836a13bfd87b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -446,7 +446,7 @@ private void populateMapping(\n                         && intAttrName.getPrivilegesOfApplication() == null) {\n \n                     LOG.error(\"'{}' not existing\", itemTO.getIntAttrName());\n-                    invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not existing\");\n+                    invalidMapping.getElements().add('\\'' + itemTO.getIntAttrName() + \"' not existing\");\n                 } else {\n                     boolean allowed = true;\n                     if (intAttrName.getSchemaType() != null\n@@ -577,7 +577,7 @@ private void populateMapping(\n                         }\n                     } else {\n                         LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n-                        invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not allowed\");\n+                        invalidMapping.getElements().add('\\'' + itemTO.getIntAttrName() + \"' not allowed\");\n                     }\n                 }\n             }\n@@ -591,7 +591,7 @@ private void populateMapping(\n         }\n     }\n \n-    private void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n+    private static void populateItems(final List<? extends Item> items, final ItemContainerTO containerTO) {\n         items.forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());"},{"sha":"db4156b9cde62e6f057410bb07f4d8863c41dc59","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ca8fd6c5df41c35ba3ed6e04c70daceb599509e1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=ca8fd6c5df41c35ba3ed6e04c70daceb599509e1","patch":"@@ -103,7 +103,7 @@ private <S extends Schema, T extends SchemaTO> void labels(final T src, final S\n         dst.getLabels().removeIf(label -> !src.getLabels().containsKey(label.getLocale()));\n     }\n \n-    private <S extends Schema, T extends SchemaTO> void labels(final S src, final T dst) {\n+    private static <S extends Schema, T extends SchemaTO> void labels(final S src, final T dst) {\n         dst.getLabels().putAll(src.getLabels().stream().\n                 collect(Collectors.toMap(SchemaLabel::getLocale, SchemaLabel::getDisplay)));\n     }\n@@ -206,7 +206,7 @@ public PlainSchema update(final PlainSchemaTO schemaTO, final PlainSchema schema\n     public PlainSchemaTO getPlainSchemaTO(final String key) {\n         PlainSchema schema = plainSchemaDAO.find(key);\n         if (schema == null) {\n-            throw new NotFoundException(\"Schema '\" + key + \"'\");\n+            throw new NotFoundException(\"Schema '\" + key + '\\'');\n         }\n \n         PlainSchemaTO schemaTO = new PlainSchemaTO();\n@@ -295,7 +295,7 @@ public DerSchema update(final DerSchemaTO schemaTO, final DerSchema schema) {\n     public DerSchemaTO getDerSchemaTO(final String key) {\n         DerSchema schema = derSchemaDAO.find(key);\n         if (schema == null) {\n-            throw new NotFoundException(\"Derived schema '\" + key + \"'\");\n+            throw new NotFoundException(\"Derived schema '\" + key + '\\'');\n         }\n \n         DerSchemaTO schemaTO = new DerSchemaTO();\n@@ -372,7 +372,7 @@ public VirSchema update(final VirSchemaTO schemaTO, final VirSchema schema) {\n     public VirSchemaTO getVirSchemaTO(final String key) {\n         VirSchema schema = virSchemaDAO.find(key);\n         if (schema == null) {\n-            throw new NotFoundException(\"Virtual Schema '\" + key + \"'\");\n+            throw new NotFoundException(\"Virtual Schema '\" + key + '\\'');\n         }\n \n         VirSchemaTO schemaTO = new VirSchemaTO();"}]}