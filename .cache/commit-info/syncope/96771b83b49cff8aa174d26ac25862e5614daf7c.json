{"sha":"96771b83b49cff8aa174d26ac25862e5614daf7c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk2NzcxYjgzYjQ5Y2ZmOGFhMTc0ZDI2YWMyNTg2MmU1NjE0ZGFmN2M=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-15T08:50:25Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-15T08:50:25Z"},"message":"[SYNCOPE-259]\nReplacing Class<T> method parameters with matching Enum types.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1433313 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46a3189244235ab46fb7025497189dcc72b82558","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/46a3189244235ab46fb7025497189dcc72b82558"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/96771b83b49cff8aa174d26ac25862e5614daf7c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/96771b83b49cff8aa174d26ac25862e5614daf7c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/96771b83b49cff8aa174d26ac25862e5614daf7c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/96771b83b49cff8aa174d26ac25862e5614daf7c/comments","author":null,"committer":null,"parents":[{"sha":"3d3a338e7ff31e6ae01c5c9a73084be93bd73785","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d3a338e7ff31e6ae01c5c9a73084be93bd73785","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d3a338e7ff31e6ae01c5c9a73084be93bd73785"}],"stats":{"total":1190,"additions":665,"deletions":525},"files":[{"sha":"a74063330df6711b55274cfb290045224b81cb49","filename":"client/src/main/java/org/apache/syncope/services/PolicyService.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -28,32 +28,29 @@\n import org.apache.syncope.client.to.PolicyTO;\r\n import org.apache.syncope.types.PolicyType;\r\n \r\n-@Path(\"policies\")\r\n+@Path(\"policies/{kind}\")\r\n public interface PolicyService {\r\n \r\n     @POST\r\n-    <T extends PolicyTO> T create(T policyTO);\r\n+    <T extends PolicyTO> T create(@PathParam(\"kind\") PolicyType type, T policyTO);\r\n \r\n     // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n     @DELETE\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T delete(@PathParam(\"policyId\") Long policyId, Class<T> policyClass);\r\n+    <T extends PolicyTO> T delete(@PathParam(\"kind\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n     @GET\r\n-    @Path(\"{kind}\")\r\n     <T extends PolicyTO> List<T> listByType(@PathParam(\"kind\") PolicyType type);\r\n \r\n-    // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n     @GET\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T read(@PathParam(\"policyId\") Long policyId, Class<T> policyClass);\r\n+    <T extends PolicyTO> T read(@PathParam(\"kind\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n-    // TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n     @GET\r\n-    @Path(\"global/{kind}\")\r\n-    <T extends PolicyTO> T readGlobal(@PathParam(\"kind\") PolicyType type, Class<T> policyClass);\r\n+    @Path(\"global\")\r\n+    <T extends PolicyTO> T readGlobal(@PathParam(\"kind\") PolicyType type);\r\n \r\n     @PUT\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T update(@PathParam(\"policyId\") Long policyId, T policyTO);\r\n+    <T extends PolicyTO> T update(@PathParam(\"kind\") PolicyType type,@PathParam(\"policyId\") Long policyId, T policyTO);\r\n }\r"},{"sha":"8d8a67ccebff9745bb821f9bdb64a60c05276a95","filename":"client/src/main/java/org/apache/syncope/services/ResourceService.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FResourceService.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -54,6 +54,9 @@ public interface ResourceService {\n     @Path(\"propagationActionsClasses\")\r\n     Set<String> getPropagationActionsClasses();\r\n \r\n+    @GET\r\n+    List<ResourceTO> list();\r\n+\r\n     @GET\r\n     List<ResourceTO> list(@MatrixParam(\"connInstanceId\") Long connInstanceId);\r\n \r"},{"sha":"008d8cbf2f18032292974a5ad68db613ea3e1c30","filename":"client/src/main/java/org/apache/syncope/services/RoleService.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -37,6 +37,10 @@ public interface RoleService {\n     @Path(\"{roleId}/children\")\r\n     List<RoleTO> children(@PathParam(\"roleId\") Long roleId);\r\n \r\n+    @GET\r\n+    @Path(\"count\")\r\n+    Integer count();\r\n+\r\n     @POST\r\n     RoleTO create(RoleTO roleTO);\r\n \r\n@@ -47,6 +51,9 @@ public interface RoleService {\n     @GET\r\n     List<RoleTO> list();\r\n \r\n+    @GET\r\n+    List<RoleTO> list(@QueryParam(\"page\") int page, @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n+\r\n     @GET\r\n     @Path(\"{roleId}/parent\")\r\n     RoleTO parent(@PathParam(\"roleId\") Long roleId);\r\n@@ -61,8 +68,7 @@ public interface RoleService {\n \r\n     @POST\r\n     @Path(\"search\")\r\n-    List<RoleTO> search(NodeCond searchCondition,\r\n-            @QueryParam(\"page\") int page,\r\n+    List<RoleTO> search(NodeCond searchCondition, @QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     @POST\r"},{"sha":"2e40a04c5e66d7c22c04fb1567d09bd48fa07ea0","filename":"client/src/main/java/org/apache/syncope/services/SchemaService.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -19,26 +19,29 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.List;\r\n+\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n+\r\n import org.apache.syncope.client.to.AbstractSchemaTO;\r\n+import org.apache.syncope.types.AttributableType;\r\n \r\n @Path(\"schemas/{kind}/{type}\")\r\n public interface SchemaService {\r\n \r\n-    enum SchemaKind {\r\n+    enum SchemaType {\r\n \r\n         NORMAL(\"schema\"),\r\n         DERIVED(\"derivedSchema\"),\r\n         VIRTUAL(\"virtualSchema\");\r\n \r\n-        private String name;\r\n+        private final String name;\r\n \r\n-        private SchemaKind(String name) {\r\n+        private SchemaType(String name) {\r\n             this.name = name;\r\n         }\r\n \r\n@@ -49,30 +52,30 @@ public String toString() {\n     }\r\n \r\n     @POST\r\n-    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") String kind,\r\n-            @PathParam(\"type\") SchemaKind type,\r\n+    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type,\r\n             T schemaTO);\r\n \r\n     @DELETE\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") String kind,\r\n-            @PathParam(\"type\") SchemaKind type,\r\n+    <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName);\r\n \r\n     @GET\r\n-    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") String kind,\r\n-            @PathParam(\"type\") SchemaKind type);\r\n+    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type);\r\n \r\n     @GET\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") String kind,\r\n-            @PathParam(\"type\") SchemaKind type,\r\n+    <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName);\r\n \r\n     @PUT\r\n     @Path(\"{name}\")\r\n-    <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") String kind,\r\n-            @PathParam(\"type\") SchemaKind type,\r\n+    <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") AttributableType kind,\r\n+            @PathParam(\"type\") SchemaType type,\r\n             @PathParam(\"name\") String schemaName,\r\n             T schemaTO);\r\n }\r"},{"sha":"316facfd8eea552e21ded6258971ad3388e6eff3","filename":"client/src/main/java/org/apache/syncope/services/TaskService.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -32,20 +32,21 @@\n import org.apache.syncope.client.to.TaskExecTO;\r\n import org.apache.syncope.client.to.TaskTO;\r\n import org.apache.syncope.types.PropagationTaskExecStatus;\r\n+import org.apache.syncope.types.TaskType;\r\n \r\n @Path(\"tasks\")\r\n public interface TaskService {\r\n \r\n     @GET\r\n-    @Path(\"{kind}/count\")\r\n-    int count(@PathParam(\"kind\") String kind);\r\n+    @Path(\"{type}/count\")\r\n+    int count(@PathParam(\"type\") TaskType taskType);\r\n \r\n     @POST\r\n     <T extends TaskTO> T create(T taskTO);\r\n \r\n     @DELETE\r\n-    @Path(\"{taskId}\")\r\n-    <T extends TaskTO> T delete(@PathParam(\"taskId\") Long taskId, Class<T> type);\r\n+    @Path(\"{type}/{taskId}\")\r\n+    <T extends TaskTO> T delete(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n \r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n@@ -65,21 +66,21 @@ TaskExecTO execute(@PathParam(\"taskId\") Long taskId,\n     Set<String> getSyncActionsClasses();\r\n \r\n     @GET\r\n-    @Path(\"{kind}\")\r\n-    <T extends TaskTO> List<T> list(@PathParam(\"kind\") String kind, Class<T[]> type);\r\n+    @Path(\"{type}\")\r\n+    <T extends TaskTO> List<T> list(@PathParam(\"type\") TaskType taskType);\r\n \r\n     @GET\r\n-    @Path(\"{kind}\")\r\n-    <T extends TaskTO> List<T> list(@PathParam(\"kind\") String kind, @QueryParam(\"page\") int page,\r\n-            @QueryParam(\"size\") @DefaultValue(\"25\") int size, Class<T[]> type);\r\n+    @Path(\"{type}\")\r\n+    <T extends TaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     @GET\r\n-    @Path(\"{kind}/executions\")\r\n-    List<TaskExecTO> listExecutions(@PathParam(\"kind\") String kind);\r\n+    @Path(\"{type}/executions\")\r\n+    List<TaskExecTO> listExecutions(@PathParam(\"type\") TaskType taskType);\r\n \r\n     @GET\r\n-    @Path(\"{taskId}\")\r\n-    <T extends TaskTO> T read(@PathParam(\"taskId\") Long taskId, Class<T> type);\r\n+    @Path(\"{type}/{taskId}\")\r\n+    <T extends TaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n \r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r"},{"sha":"103c73fa374e7860082ef7533f0c0d03154e305f","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":42,"deletions":47,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -26,62 +26,57 @@\n \r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n import org.apache.syncope.services.ConfigurationService;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n-public class ConfigurationServiceProxy extends SpringServiceProxy implements\r\n-\t\tConfigurationService {\r\n+public class ConfigurationServiceProxy extends SpringServiceProxy implements ConfigurationService {\r\n \r\n-\tpublic ConfigurationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tsuper(baseUrl, restTemplate);\r\n-\t}\r\n+    public ConfigurationServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic ConfigurationTO create(ConfigurationTO configurationTO) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"configuration/create\",\r\n-\t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n-\t}\r\n+    @Override\r\n+    public ConfigurationTO create(ConfigurationTO configurationTO) {\r\n+        return getRestTemplate()\r\n+                .postForObject(baseUrl + \"configuration/create\", configurationTO, ConfigurationTO.class);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic ConfigurationTO delete(String key) {\r\n-\t\treturn restTemplate\r\n-\t\t\t\t.getForObject(baseUrl + \"configuration/delete/{key}.json\",\r\n-\t\t\t\t\t\tConfigurationTO.class, key);\r\n-\t}\r\n+    @Override\r\n+    public ConfigurationTO delete(String key) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic List<ConfigurationTO> list() {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n-\t\t\t\t+ \"configuration/list.json\", ConfigurationTO[].class));\r\n-\t}\r\n+    @Override\r\n+    public List<ConfigurationTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"configuration/list.json\",\r\n+                ConfigurationTO[].class));\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic ConfigurationTO read(String key) {\r\n-\t\treturn restTemplate.getForObject(baseUrl\r\n-\t\t\t\t+ \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n-\t}\r\n+    @Override\r\n+    public ConfigurationTO read(String key) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"configuration/read/{key}.json\", ConfigurationTO.class, key);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"configuration/update\",\r\n-\t\t\t\tconfigurationTO, ConfigurationTO.class);\r\n-\t}\r\n+    @Override\r\n+    public ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n+        return getRestTemplate()\r\n+                .postForObject(baseUrl + \"configuration/update\", configurationTO, ConfigurationTO.class);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic Set<String> getValidators() {\r\n-\t\t// TODO Auto-generated method stub\r\n-\t\treturn null;\r\n-\t}\r\n+    @Override\r\n+    public Set<String> getValidators() {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic Set<String> getMailTemplates() {\r\n-\t\t// TODO Auto-generated method stub\r\n-\t\treturn null;\r\n-\t}\r\n+    @Override\r\n+    public Set<String> getMailTemplates() {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic Response dbExport() {\r\n-\t\t// TODO Auto-generated method stub\r\n-\t\treturn null;\r\n-\t}\r\n+    @Override\r\n+    public Response dbExport() {\r\n+        // TODO Auto-generated method stub\r\n+        return null;\r\n+    }\r\n \r\n }\r"},{"sha":"f75ad14be3681574c4bf21267aa63a6b097a11fa","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -25,29 +25,28 @@\n import org.apache.syncope.client.to.ConnInstanceTO;\r\n import org.apache.syncope.services.ConnectorService;\r\n import org.apache.syncope.types.ConnConfProperty;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r\n \r\n-    public ConnectorServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public ConnectorServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO create(ConnInstanceTO connectorTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n+        return getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO update(Long connectorId, ConnInstanceTO connectorTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"connector/update.json\", connectorTO,\r\n+        return getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO delete(Long connectorId) {\r\n-        return restTemplate.getForObject(baseUrl + \"connector/delete/{connectorId}.json\",\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/delete/{connectorId}.json\",\r\n                 ConnInstanceTO.class, connectorId);\r\n     }\r\n \r\n@@ -57,13 +56,13 @@ public List<ConnInstanceTO> list(String lang) {\n                 ? \"?lang=\" + lang\r\n                 : \"\";\r\n \r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"connector/list.json\" + param,\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/list.json\" + param,\r\n                 ConnInstanceTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO read(Long connectorId) {\r\n-        return restTemplate.getForObject(baseUrl + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n                 connectorId);\r\n     }\r\n \r\n@@ -73,7 +72,7 @@ public List<ConnBundleTO> getBundles(String lang) {\n                 ? \"?lang=\" + lang\r\n                 : \"\";\r\n \r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"connector/bundle/list.json\" + param,\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/bundle/list.json\" + param,\r\n                 ConnBundleTO[].class));\r\n     }\r\n \r\n@@ -83,25 +82,25 @@ public List<String> getSchemaNames(Long connectorId, ConnInstanceTO connectorTO,\n                 ? \"?showall=true\"\r\n                 : \"?showall=false\";\r\n \r\n-        return Arrays.asList(restTemplate.postForObject(baseUrl + \"connector/schema/list\" + param, connectorTO,\r\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"connector/schema/list\" + param, connectorTO,\r\n                 String[].class));\r\n     }\r\n \r\n     @Override\r\n     public List<ConnConfProperty> getConfigurationProperties(Long connectorId) {\r\n-        return Arrays.asList(restTemplate\r\n+        return Arrays.asList(getRestTemplate()\r\n                 .getForObject(baseUrl + \"connector/{connectorId}/configurationProperty/list\",\r\n                         ConnConfProperty[].class, connectorId));\r\n     }\r\n \r\n     @Override\r\n     public boolean validate(ConnInstanceTO connectorTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"connector/check.json\", connectorTO, Boolean.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"connector/check.json\", connectorTO, Boolean.class);\r\n     }\r\n \r\n     @Override\r\n     public ConnInstanceTO readConnectorBean(String resourceName) {\r\n-        return restTemplate.getForObject(baseUrl + \"connector/{resourceName}/connectorBean\",\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/connectorBean\",\r\n                 ConnInstanceTO.class, resourceName);\r\n     }\r\n \r"},{"sha":"dd2035ed6a503fccd75a9ae868b7b22332ca5745","filename":"client/src/main/java/org/apache/syncope/services/proxy/EntitlementServiceProxy.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -26,21 +26,21 @@\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r\n-\t\r\n-\tpublic EntitlementServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tsuper(baseUrl, restTemplate);\r\n-\t}\r\n \r\n-\t@Override\r\n-\tpublic Set<String> getAllEntitlements() {\r\n-\t\treturn new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n-                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n-\t}\r\n+    public EntitlementServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic Set<String> getMyEntitlements() {\r\n-\t\treturn new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n-                + \"auth/entitlements.json\", String[].class)));\r\n-\t}\r\n+    @Override\r\n+    public Set<String> getAllEntitlements() {\r\n+        return new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(baseUrl + \"auth/allentitlements.json\",\r\n+                String[].class)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getMyEntitlements() {\r\n+        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"auth/entitlements.json\",\r\n+                String[].class)));\r\n+    }\r\n \r\n }\r"},{"sha":"63c6106dee53e438b72467a2ae067cae57ef838c","filename":"client/src/main/java/org/apache/syncope/services/proxy/LoggerServiceProxy.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -24,46 +24,45 @@\n import org.apache.syncope.client.to.LoggerTO;\r\n import org.apache.syncope.services.LoggerService;\r\n import org.apache.syncope.types.AuditLoggerName;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n import ch.qos.logback.classic.Level;\r\n \r\n public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n \r\n-    public LoggerServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public LoggerServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n     public List<LoggerTO> listLogs() {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/log/list\", LoggerTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public List<AuditLoggerName> listAudits() {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"logger/audit/list\",\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"logger/audit/list\",\r\n                 AuditLoggerName[].class));\r\n     }\r\n \r\n     @Override\r\n     public LoggerTO update(String name, Level level) {\r\n-        return restTemplate.postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n+        return getRestTemplate().postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n                 level);\r\n     }\r\n \r\n     @Override\r\n     public LoggerTO delete(String name) {\r\n-        return restTemplate.getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n+        return getRestTemplate().getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n     }\r\n \r\n     @Override\r\n     public void enableAudit(AuditLoggerName auditLoggerName) {\r\n-        restTemplate.put(baseUrl + \"logger/audit/enable\", auditLoggerName);\r\n+        getRestTemplate().put(baseUrl + \"logger/audit/enable\", auditLoggerName);\r\n     }\r\n \r\n     @Override\r\n     public void disableAudit(AuditLoggerName auditLoggerName) {\r\n-        restTemplate.put(baseUrl + \"logger/audit/disable\", auditLoggerName);\r\n+        getRestTemplate().put(baseUrl + \"logger/audit/disable\", auditLoggerName);\r\n     }\r\n \r\n }\r"},{"sha":"1f69ca373997bdb548204545020f7bf5205c5747","filename":"client/src/main/java/org/apache/syncope/services/proxy/NotificationServiceProxy.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -23,41 +23,40 @@\n \r\n import org.apache.syncope.client.to.NotificationTO;\r\n import org.apache.syncope.services.NotificationService;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class NotificationServiceProxy extends SpringServiceProxy implements NotificationService {\r\n \r\n-    public NotificationServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public NotificationServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO read(Long notificationId) {\r\n-        return restTemplate.getForObject(baseUrl + \"notification/read/{notificationId}.json\",\r\n+        return getRestTemplate().getForObject(baseUrl + \"notification/read/{notificationId}.json\",\r\n                 NotificationTO.class, notificationId);\r\n     }\r\n \r\n     @Override\r\n     public List<NotificationTO> list() {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"notification/list.json\",\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"notification/list.json\",\r\n                 NotificationTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO create(NotificationTO notificationTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"notification/create.json\", notificationTO,\r\n+        return getRestTemplate().postForObject(baseUrl + \"notification/create.json\", notificationTO,\r\n                 NotificationTO.class);\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO update(Long notificationId, NotificationTO notificationTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"notification/update.json\", notificationTO,\r\n+        return getRestTemplate().postForObject(baseUrl + \"notification/update.json\", notificationTO,\r\n                 NotificationTO.class);\r\n     }\r\n \r\n     @Override\r\n     public NotificationTO delete(Long notificationId) {\r\n-        return restTemplate.getForObject(baseUrl + \"notification/delete/{notificationId}.json\",\r\n+        return getRestTemplate().getForObject(baseUrl + \"notification/delete/{notificationId}.json\",\r\n                 NotificationTO.class, notificationId);\r\n     }\r\n \r"},{"sha":"ca0fc76f86897cd9ff633c2c30858dfc404cc610","filename":"client/src/main/java/org/apache/syncope/services/proxy/PolicyServiceProxy.java","status":"modified","additions":68,"deletions":50,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -20,69 +20,87 @@\n \r\n import java.util.List;\r\n \r\n+import org.apache.syncope.client.to.AccountPolicyTO;\r\n+import org.apache.syncope.client.to.PasswordPolicyTO;\r\n import org.apache.syncope.client.to.PolicyTO;\r\n+import org.apache.syncope.client.to.SyncPolicyTO;\r\n import org.apache.syncope.services.PolicyService;\r\n import org.apache.syncope.types.PolicyType;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class PolicyServiceProxy extends SpringServiceProxy implements PolicyService {\r\n \r\n-\tpublic PolicyServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tsuper(baseUrl, restTemplate);\r\n-\t}\r\n+    public PolicyServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic <T extends PolicyTO> T create(final T policyTO) {\r\n-\t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tT result = (T) restTemplate.postForObject(baseUrl\r\n-\t\t\t\t+ \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n-\t\t\t\ttypeToUrl(policyTO.getType()));\r\n-\t\treturn result;\r\n-\t}\r\n+    @Override\r\n+    public <T extends PolicyTO> T create(PolicyType type, final T policyTO) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        T result = (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/create\", policyTO, policyTO.getClass(),\r\n+                typeToUrl(policyTO.getType()));\r\n+        return result;\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic <T extends PolicyTO> T update(Long policyId, T policyTO) {\r\n-\t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tT result = (T) restTemplate.postForObject(baseUrl\r\n-\t\t\t\t+ \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n-\t\t\t\ttypeToUrl(policyTO.getType()));\r\n-\t\treturn result;\r\n-\t}\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends PolicyTO> T delete(PolicyType type, Long policyId) {\r\n+        T result = (T) getRestTemplate().getForObject(baseUrl + \"policy/delete/{id}\", getTOClass(type), policyId);\r\n+        return result;\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic <T extends PolicyTO> List<T> listByType(PolicyType type) {\r\n-\t\t@SuppressWarnings(\"unchecked\")\r\n-\t\tList<T> result = restTemplate.getForObject(baseUrl + \"policy/{kind}/list\",\r\n-\t\t\t\tList.class, typeToUrl(type));\r\n-\t\treturn result;\r\n-\t}\r\n+    private Class<? extends PolicyTO> getTOClass(PolicyType type) {\r\n+        switch (type) {\r\n+        case ACCOUNT:\r\n+        case GLOBAL_ACCOUNT:\r\n+            return AccountPolicyTO.class;\r\n+        case PASSWORD:\r\n+        case GLOBAL_PASSWORD:\r\n+            return PasswordPolicyTO.class;\r\n+        case SYNC:\r\n+        case GLOBAL_SYNC:\r\n+            return SyncPolicyTO.class;\r\n+        default:\r\n+            throw new IllegalArgumentException(\"Policy Type not supported\");\r\n+        }\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic <T extends PolicyTO> T readGlobal(PolicyType type, Class<T> policyClass) {\r\n-\t\tT result = restTemplate.getForObject(baseUrl + \"policy/{kind}/global/read\",\r\n-                policyClass, typeToUrl(type));\r\n-\t\treturn result;\r\n-\t}\r\n+    @Override\r\n+    public <T extends PolicyTO> List<T> listByType(PolicyType type) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        List<T> result = getRestTemplate().getForObject(baseUrl + \"policy/{kind}/list\", List.class, typeToUrl(type));\r\n+        return result;\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic <T extends PolicyTO> T read(Long policyId, Class<T> policyClass) {\r\n-\t\tT result = restTemplate.getForObject(baseUrl + \"policy/read/{id}\", policyClass, policyId);\r\n-\t\treturn result;\r\n-\t}\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    @Override\r\n+    public <T extends PolicyTO> T read(PolicyType type, Long policyId) {\r\n+        T result = (T) getRestTemplate().getForObject(baseUrl + \"policy/read/{id}\", getTOClass(type), policyId);\r\n+        return result;\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic <T extends PolicyTO> T delete(Long policyId, Class<T> policyClass) {\r\n-\t\tT result = restTemplate.getForObject(baseUrl + \"policy/delete/{id}\", policyClass, policyId);\r\n-\t\treturn result;\r\n-\t}\r\n+    @Override\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public <T extends PolicyTO> T readGlobal(PolicyType type) {\r\n+        T result = (T) getRestTemplate().getForObject(baseUrl + \"policy/{kind}/global/read\", getTOClass(type),\r\n+                typeToUrl(type));\r\n+        return result;\r\n+    }\r\n \r\n     private String typeToUrl(PolicyType type) {\r\n-    \tString url = type.name().toLowerCase();\r\n-    \tint index = url.indexOf(\"_\");\r\n-    \tif (index != -1) {\r\n-    \t\treturn url.substring(index + 1);\r\n-    \t} else {\r\n-    \t\treturn url;\r\n-    \t}\r\n+        String url = type.name().toLowerCase();\r\n+        int index = url.indexOf(\"_\");\r\n+        if (index != -1) {\r\n+            return url.substring(index + 1);\r\n+        } else {\r\n+            return url;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends PolicyTO> T update(PolicyType type, Long policyId, T policyTO) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        T result = (T) getRestTemplate().postForObject(baseUrl + \"policy/{kind}/update\", policyTO, policyTO.getClass(),\r\n+                typeToUrl(policyTO.getType()));\r\n+        return result;\r\n     }\r\n }\r"},{"sha":"5317f924d2fd03c61d01bdc394d0b1718595e151","filename":"client/src/main/java/org/apache/syncope/services/proxy/ReportServiceProxy.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -25,32 +25,31 @@\n import org.apache.syncope.client.to.ReportTO;\r\n import org.apache.syncope.services.ReportService;\r\n import org.apache.syncope.types.ReportExecExportFormat;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r\n \r\n-    public ReportServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public ReportServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n     public ReportTO create(ReportTO reportTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"report/create\", reportTO, ReportTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ReportTO update(Long reportId, ReportTO reportTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"report/update\", reportTO, ReportTO.class);\r\n     }\r\n \r\n     @Override\r\n     public int count() {\r\n-        return restTemplate.getForObject(baseUrl + \"report/count.json\", Integer.class);\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/count.json\", Integer.class);\r\n     }\r\n \r\n     @Override\r\n     public List<ReportTO> list() {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"report/list\", ReportTO[].class));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/list\", ReportTO[].class));\r\n     }\r\n \r\n     @Override\r\n@@ -61,24 +60,24 @@ public List<ReportTO> list(int page, int size) {\n \r\n     @Override\r\n     public List<ReportExecTO> listExecutions() {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"report/execution/list\",\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/execution/list\",\r\n                 ReportExecTO[].class));\r\n     }\r\n \r\n     @Override\r\n     public List<String> getReportletConfClasses() {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"report/reportletConfClasses.json\",\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"report/reportletConfClasses.json\",\r\n                 String[].class));\r\n     }\r\n \r\n     @Override\r\n     public ReportTO read(Long reportId) {\r\n-        return restTemplate.getForObject(baseUrl + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/read/{reportId}\", ReportTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n     public ReportExecTO readExecution(Long executionId) {\r\n-        return restTemplate.getForObject(baseUrl + \"report/execution/read/{reportId}\",\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/execution/read/{reportId}\",\r\n                 ReportExecTO.class, executionId);\r\n     }\r\n \r\n@@ -90,13 +89,13 @@ public void exportExecutionResult(Long executionId, ReportExecExportFormat fmt)\n \r\n     @Override\r\n     public ReportExecTO execute(Long reportId) {\r\n-        return restTemplate.postForObject(baseUrl + \"report/execute/{reportId}\", null,\r\n+        return getRestTemplate().postForObject(baseUrl + \"report/execute/{reportId}\", null,\r\n                 ReportExecTO.class, reportId);\r\n     }\r\n \r\n     @Override\r\n     public ReportTO delete(Long reportId) {\r\n-        return restTemplate.getForObject(baseUrl + \"report/delete/{reportId}\",\r\n+        return getRestTemplate().getForObject(baseUrl + \"report/delete/{reportId}\",\r\n                 ReportTO.class, reportId);\r\n     }\r\n \r"},{"sha":"4fa82f97c27c696c88e1595ad3aada6a615ee556","filename":"client/src/main/java/org/apache/syncope/services/proxy/ResourceServiceProxy.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -28,62 +28,63 @@\n import org.apache.syncope.client.to.ResourceTO;\r\n import org.apache.syncope.services.ResourceService;\r\n import org.apache.syncope.types.AttributableType;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r\n \r\n-    public ResourceServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public ResourceServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO create(ResourceTO resourceTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"resource/create.json\", resourceTO, ResourceTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"resource/create.json\", resourceTO, ResourceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO update(String resourceName, ResourceTO resourceTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"resource/update.json\", resourceTO, ResourceTO.class);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO delete(String resourceName) {\r\n-        return restTemplate.getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class,\r\n+        return getRestTemplate().getForObject(baseUrl + \"resource/delete/{resourceName}.json\", ResourceTO.class,\r\n                 resourceName);\r\n     }\r\n \r\n     @Override\r\n     public ResourceTO read(String resourceName) {\r\n-        return restTemplate.getForObject(baseUrl + \"resource/read/{resourceName}.json\", ResourceTO.class,\r\n-                resourceName);\r\n+        return getRestTemplate().getForObject(baseUrl + \"resource/read/{resourceName}.json\", ResourceTO.class, resourceName);\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getPropagationActionsClasses() {\r\n-        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n+        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl\r\n                 + \"resource/propagationActionsClasses.json\", String[].class)));\r\n     }\r\n \r\n+    @Override\r\n+    public List<ResourceTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"resource/list.json\", ResourceTO[].class));\r\n+    }\r\n+\r\n     @Override\r\n     public List<ResourceTO> list(Long connInstanceId) {\r\n-        String query = (connInstanceId != null)\r\n-                ? query = \"?connInstanceId=\" + connInstanceId.toString()\r\n-                : \"\";\r\n+        if (connInstanceId == null)\r\n+            return list();\r\n \r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"resource/list.json\" + query,\r\n-                ResourceTO[].class, connInstanceId));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"resource/list.json?connInstanceId={connId}\", ResourceTO[].class,\r\n+                connInstanceId));\r\n     }\r\n \r\n     @Override\r\n     public ConnObjectTO getConnector(String resourceName, AttributableType type, String objectId) {\r\n-        return restTemplate.getForObject(baseUrl + \"resource/{resourceName}/read/{type}/{objectId}.json\",\r\n-                ConnObjectTO.class, resourceName, type, objectId);\r\n+        return getRestTemplate().getForObject(baseUrl + \"resource/{resourceName}/read/{type}/{objectId}.json\",\r\n+                ConnObjectTO.class, resourceName, type.toString().toUpperCase(), objectId);\r\n     }\r\n \r\n     @Override\r\n     public boolean check(ResourceTO resourceTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class)\r\n-                .booleanValue();\r\n+        return getRestTemplate().postForObject(baseUrl + \"resource/check.json\", resourceTO, Boolean.class).booleanValue();\r\n     }\r\n \r\n }\r"},{"sha":"dab7c9b5b92948eb677d32a26bffa092621a2c34","filename":"client/src/main/java/org/apache/syncope/services/proxy/RoleServiceProxy.java","status":"modified","additions":72,"deletions":70,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -25,78 +25,80 @@\n import org.apache.syncope.client.search.NodeCond;\r\n import org.apache.syncope.client.to.RoleTO;\r\n import org.apache.syncope.services.RoleService;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r\n \r\n-\tpublic RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tsuper(baseUrl, restTemplate);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic List<RoleTO> children(Long roleId) {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n-\t\t\t\t+ \"role/children/{roleId}.json\", RoleTO[].class, roleId));\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic RoleTO create(RoleTO roleTO) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"role/create\", roleTO,\r\n-\t\t\t\tRoleTO.class);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic RoleTO delete(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/delete/{roleId}\",\r\n-\t\t\t\tRoleTO.class, roleId);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic List<RoleTO> list() {\r\n-\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n-\t\t\t\t+ \"role/list.json\", RoleTO[].class));\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic RoleTO parent(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/parent/{roleId}.json\",\r\n-\t\t\t\tRoleTO.class, roleId);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic RoleTO read(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/read/{roleId}.json\",\r\n-\t\t\t\tRoleTO.class, roleId);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic List<RoleTO> search(NodeCond searchCondition) {\r\n-\t\treturn Arrays.asList(restTemplate.postForObject(\r\n-\t\t\t\tbaseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic List<RoleTO> search(NodeCond searchCondition, int page, int size) {\r\n-\t\treturn Arrays.asList(restTemplate.postForObject(\r\n-\t\t\t\tbaseUrl + \"role/search/{page}/{size}\", searchCondition, RoleTO[].class, page, size));\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic int searchCount(NodeCond searchCondition) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"role/search/count.json\",\r\n-\t\t\t\tsearchCondition, Integer.class);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic RoleTO selfRead(Long roleId) {\r\n-\t\treturn restTemplate.getForObject(baseUrl + \"role/selfRead/{roleId}\",\r\n-\t\t\t\tRoleTO.class, roleId);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic RoleTO update(Long roleId, RoleMod roleMod) {\r\n-\t\treturn restTemplate.postForObject(baseUrl + \"role/update\", roleMod,\r\n-\t\t\t\tRoleTO.class);\r\n-\t}\r\n+    public RoleServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> children(Long roleId) {\r\n+        return Arrays\r\n+                .asList(getRestTemplate().getForObject(baseUrl + \"role/children/{roleId}.json\", RoleTO[].class, roleId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Integer count() {\r\n+        //return getRestTemplate().getForObject(baseUrl + \"role/count.json\", Integer.class);\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO create(RoleTO roleTO) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"role/create\", roleTO, RoleTO.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO delete(Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/delete/{roleId}\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> list() {\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"role/list.json\", RoleTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> list(int page, int size) {\r\n+        //        return Arrays.asList(getRestTemplate().getForObject(baseURL + \"role/list.json\", RoleTO[].class, page, size));\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO parent(Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/parent/{roleId}.json\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO read(Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/read/{roleId}.json\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> search(NodeCond searchCondition) {\r\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> search(NodeCond searchCondition, int page, int size) {\r\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"role/search/{page}/{size}\", searchCondition,\r\n+                RoleTO[].class, page, size));\r\n+    }\r\n+\r\n+    @Override\r\n+    public int searchCount(NodeCond searchCondition) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"role/search/count.json\", searchCondition, Integer.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO selfRead(Long roleId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"role/selfRead/{roleId}\", RoleTO.class, roleId);\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO update(Long roleId, RoleMod roleMod) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"role/update\", roleMod, RoleTO.class);\r\n+    }\r\n \r\n }\r"},{"sha":"6c3fe68aaba055a6e51342962a76727598e219ba","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -26,44 +26,44 @@\n import org.apache.syncope.client.to.SchemaTO;\r\n import org.apache.syncope.client.to.VirtualSchemaTO;\r\n import org.apache.syncope.services.SchemaService;\r\n-import org.springframework.web.client.RestTemplate;\r\n+import org.apache.syncope.types.AttributableType;\r\n \r\n @SuppressWarnings(\"unchecked\")\r\n public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n \r\n-    public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public SchemaServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T create(String kind, SchemaKind type, T schemaTO) {\r\n-        return (T) restTemplate.postForObject(baseUrl + type + \"/{kind}/create\", schemaTO, getTOClass(type), kind);\r\n+    public <T extends AbstractSchemaTO> T create(AttributableType kind, SchemaType type, T schemaTO) {\r\n+        return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/create\", schemaTO, getTOClass(type), kind);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T delete(String kind, SchemaKind type, String schemaName) {\r\n-        return (T) restTemplate.getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n+    public <T extends AbstractSchemaTO> T delete(AttributableType kind, SchemaType type, String schemaName) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(String kind, SchemaKind type) {\r\n+    public <T extends AbstractSchemaTO> List<T> list(AttributableType kind, SchemaType type) {\r\n         switch (type) {\r\n         case NORMAL:\r\n-            return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n                     SchemaTO[].class, kind));\r\n         case DERIVED:\r\n-            return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n                     DerivedSchemaTO[].class, kind));\r\n         case VIRTUAL:\r\n-            return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n                     VirtualSchemaTO[].class, kind));\r\n         default:\r\n             throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n         }\r\n     }\r\n \r\n-    private Class<? extends AbstractSchemaTO> getTOClass(SchemaKind type) {\r\n+    private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\r\n         switch (type) {\r\n         case NORMAL:\r\n             return SchemaTO.class;\r\n@@ -77,13 +77,13 @@ private Class<? extends AbstractSchemaTO> getTOClass(SchemaKind type) {\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T read(String kind, SchemaKind type, String schemaName) {\r\n-        return (T) restTemplate.getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n+    public <T extends AbstractSchemaTO> T read(AttributableType kind, SchemaType type, String schemaName) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T update(String kind, SchemaKind type, String schemaName, T schemaTO) {\r\n-        return (T) restTemplate.postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n+    public <T extends AbstractSchemaTO> T update(AttributableType kind, SchemaType type, String schemaName, T schemaTO) {\r\n+        return (T) getRestTemplate().postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n     }\r\n }\r"},{"sha":"1436bc7aa297ce374c69228f3e9ed9106b576db4","filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringRestTemplate.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringRestTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringRestTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringRestTemplate.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -0,0 +1,26 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services.proxy;\r\n+\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public interface SpringRestTemplate {\r\n+\r\n+    RestTemplate getRestTemplate();\r\n+}\r"},{"sha":"738ed8a469a3b7346ebb2ddcff72dd755a1297ec","filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringServiceProxy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -22,12 +22,16 @@\n \r\n public abstract class SpringServiceProxy {\r\n \r\n-\tprotected RestTemplate restTemplate;\r\n-\r\n \tprotected String baseUrl;\r\n \r\n-\tpublic SpringServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-\t\tthis.restTemplate = restTemplate;\r\n+\tprivate final SpringRestTemplate callback;\r\n+\r\n+\tpublic SpringServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n \t\tthis.baseUrl = baseUrl;\r\n+\t\tthis.callback = callback;\r\n \t}\r\n+\r\n+    public RestTemplate getRestTemplate() {\r\n+        return callback.getRestTemplate();\r\n+    }\r\n }\r"},{"sha":"4e5a087a815478cde73e0428d3609fd31ae80a1c","filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java","status":"modified","additions":75,"deletions":34,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -23,26 +23,28 @@\n import java.util.List;\r\n import java.util.Set;\r\n \r\n+import org.apache.syncope.client.to.NotificationTaskTO;\r\n+import org.apache.syncope.client.to.PropagationTaskTO;\r\n import org.apache.syncope.client.to.SchedTaskTO;\r\n import org.apache.syncope.client.to.SyncTaskTO;\r\n import org.apache.syncope.client.to.TaskExecTO;\r\n import org.apache.syncope.client.to.TaskTO;\r\n import org.apache.syncope.services.TaskService;\r\n import org.apache.syncope.types.PropagationTaskExecStatus;\r\n-import org.springframework.web.client.RestTemplate;\r\n+import org.apache.syncope.types.TaskType;\r\n \r\n+@SuppressWarnings(\"unchecked\")\r\n public class TaskServiceProxy extends SpringServiceProxy implements TaskService {\r\n \r\n-    public TaskServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public TaskServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n-    public int count(String kind) {\r\n-        return restTemplate.getForObject(baseUrl + \"task/{kind}/count.json\", Integer.class, kind);\r\n+    public int count(TaskType type) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"task/{type}/count.json\", Integer.class, type);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends TaskTO> T create(T taskTO) {\r\n         String subTypeString = (taskTO instanceof SyncTaskTO)\r\n@@ -51,78 +53,117 @@ public <T extends TaskTO> T create(T taskTO) {\n                         ? \"sched\"\r\n                         : \"\";\r\n \r\n-        return (T) restTemplate.postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n-                subTypeString);\r\n+        return (T) getRestTemplate().postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(), subTypeString);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> T delete(Long taskId, Class<T> type) {\r\n-        return restTemplate.getForObject(baseUrl + \"task/delete/{taskId}\", type, taskId);\r\n+    public <T extends TaskTO> T delete(TaskType type, Long taskId) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"task/delete/{taskId}\", getTOClass(type), taskId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO deleteExecution(Long executionId) {\r\n-        // TODO Auto-generated method stub\r\n-        return null;\r\n+        return getRestTemplate()\r\n+                .getForObject(baseUrl + \"task/execution/delete/{executionId}\", TaskExecTO.class, executionId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO execute(Long taskId, boolean dryRun) {\r\n         String param = (dryRun)\r\n                 ? \"?dryRun=true\"\r\n                 : \"\";\r\n-        return restTemplate.postForObject(baseUrl + \"task/execute/{taskId}\" + param, null, TaskExecTO.class,\r\n-                taskId);\r\n+        return getRestTemplate().postForObject(baseUrl + \"task/execute/{taskId}\" + param, null, TaskExecTO.class, taskId);\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getJobClasses() {\r\n-        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl + \"task/jobClasses.json\",\r\n+        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/jobClasses.json\",\r\n                 String[].class)));\r\n     }\r\n \r\n     @Override\r\n     public Set<String> getSyncActionsClasses() {\r\n-        return new HashSet<String>(Arrays.asList(restTemplate.getForObject(baseUrl\r\n-                + \"task/syncActionsClasses.json\", String[].class)));\r\n+        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/syncActionsClasses.json\",\r\n+                String[].class)));\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> List<T> list(String kind, Class<T[]> type) {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"task/{kind}/list\", type, kind));\r\n+    public <T extends TaskTO> List<T> list(TaskType type) {\r\n+        switch (type) {\r\n+        case PROPAGATION:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n+                    PropagationTaskTO[].class, type));\r\n+        case NOTIFICATION:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\",\r\n+                    NotificationTaskTO[].class, type));\r\n+        case SCHEDULED:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\", SchedTaskTO[].class,\r\n+                    type));\r\n+        case SYNCHRONIZATION:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list\", SyncTaskTO[].class,\r\n+                    type));\r\n+        default:\r\n+            throw new IllegalArgumentException(\"TaskType is not supported.\");\r\n+        }\r\n+    }\r\n+\r\n+    private Class<? extends TaskTO> getTOClass(TaskType type) {\r\n+        switch (type) {\r\n+        case PROPAGATION:\r\n+            return PropagationTaskTO.class;\r\n+        case NOTIFICATION:\r\n+            return NotificationTaskTO.class;\r\n+        case SCHEDULED:\r\n+            return SchedTaskTO.class;\r\n+        case SYNCHRONIZATION:\r\n+            return SyncTaskTO.class;\r\n+        default:\r\n+            throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n+        }\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> List<T> list(String kind, int page, int size, Class<T[]> type) {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"task/{kind}/list/{page}/{size}.json\",\r\n-                type, kind, page, size));\r\n+    public <T extends TaskTO> List<T> list(TaskType type, int page, int size) {\r\n+        switch (type) {\r\n+        case PROPAGATION:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                    PropagationTaskTO[].class, type, page, size));\r\n+        case NOTIFICATION:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                    NotificationTaskTO[].class, type, page, size));\r\n+        case SCHEDULED:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                    SchedTaskTO[].class, type, page, size));\r\n+        case SYNCHRONIZATION:\r\n+            return (List<T>) Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/list/{page}/{size}.json\",\r\n+                    SyncTaskTO[].class, type, page, size));\r\n+        default:\r\n+            throw new IllegalArgumentException(\"TaskType is not supported.\");\r\n+        }\r\n     }\r\n \r\n     @Override\r\n-    public List<TaskExecTO> listExecutions(String kind) {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"task/{kind}/execution/list\",\r\n-                TaskExecTO[].class, kind));\r\n+    public List<TaskExecTO> listExecutions(TaskType type) {\r\n+        return Arrays.asList(getRestTemplate()\r\n+                .getForObject(baseUrl + \"task/{type}/execution/list\", TaskExecTO[].class, type));\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> T read(Long taskId, Class<T> type) {\r\n-        return restTemplate.getForObject(baseUrl + \"task/read/{taskId}\", type, taskId);\r\n+    public <T extends TaskTO> T read(TaskType type, Long taskId) {\r\n+        return (T) getRestTemplate().getForObject(baseUrl + \"task/read/{taskId}\", getTOClass(type), taskId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO readExecution(Long executionId) {\r\n-        return restTemplate.getForObject(baseUrl + \"task/execution/read/{taskId}\", TaskExecTO.class,\r\n-                executionId);\r\n+        return getRestTemplate().getForObject(baseUrl + \"task/execution/read/{taskId}\", TaskExecTO.class, executionId);\r\n     }\r\n \r\n     @Override\r\n     public TaskExecTO report(Long executionId, PropagationTaskExecStatus status, String message) {\r\n-        return restTemplate.getForObject(baseUrl + \"task/execution/report/{executionId}\"\r\n-                + \"?executionStatus={status}&message={message}\", TaskExecTO.class, executionId, status,\r\n-                message);\r\n+        return getRestTemplate().getForObject(baseUrl + \"task/execution/report/{executionId}\"\r\n+                + \"?executionStatus={status}&message={message}\", TaskExecTO.class, executionId, status, message);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n     public <T extends TaskTO> T update(Long taskId, T taskTO) {\r\n         String path = (taskTO instanceof SyncTaskTO)\r\n@@ -133,7 +174,7 @@ public <T extends TaskTO> T update(Long taskId, T taskTO) {\n         if (path == null)\r\n             throw new IllegalArgumentException(\"Task can only be instance of SchedTaskTO or SyncTaskTO\");\r\n \r\n-        return (T) restTemplate.postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n+        return (T) getRestTemplate().postForObject(baseUrl + \"task/update/\" + path, taskTO, taskTO.getClass());\r\n     }\r\n \r\n }\r"},{"sha":"2f70f7d09b6e3f5ea637f864647647e16c3ee433","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserRequestServiceProxy.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -24,12 +24,11 @@\n import org.apache.syncope.client.to.UserRequestTO;\r\n import org.apache.syncope.client.to.UserTO;\r\n import org.apache.syncope.services.UserRequestService;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r\n \r\n-    public UserRequestServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public UserRequestServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n@@ -40,17 +39,17 @@ public boolean isCreateAllowed() {\n \r\n     @Override\r\n     public UserRequestTO create(UserTO userTO) {\r\n-        return restTemplate.postForObject(baseUrl + \"user/request/create\", userTO, UserRequestTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"user/request/create\", userTO, UserRequestTO.class);\r\n     }\r\n \r\n     @Override\r\n     public UserRequestTO update(UserMod userMod) {\r\n-        return restTemplate.postForObject(baseUrl + \"user/request/update\", userMod, UserRequestTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"user/request/update\", userMod, UserRequestTO.class);\r\n     }\r\n \r\n     @Override\r\n     public UserRequestTO delete(Long userId) {\r\n-        return restTemplate.getForObject(baseUrl + \"user/request/delete/{userId}\", UserRequestTO.class,\r\n+        return getRestTemplate().getForObject(baseUrl + \"user/request/delete/{userId}\", UserRequestTO.class,\r\n                 userId);\r\n     }\r\n \r"},{"sha":"6ed1fe1136990306337e69bfa2c2f0a59654a0fc","filename":"client/src/main/java/org/apache/syncope/services/proxy/UserServiceProxy.java","status":"modified","additions":27,"deletions":28,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -27,61 +27,60 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.to.WorkflowFormTO;\n import org.apache.syncope.services.UserService;\n-import org.springframework.web.client.RestTemplate;\n \n public class UserServiceProxy extends SpringServiceProxy implements UserService {\n \n-    public UserServiceProxy(String baseUrl, RestTemplate restTemplate) {\n-        super(baseUrl, restTemplate);\n+    public UserServiceProxy(String baseUrl, SpringRestTemplate callback) {\n+        super(baseUrl, callback);\n     }\n \n     @Override\n     public Boolean verifyPassword(String username, String password) {\n-        return restTemplate.getForObject(\n+        return getRestTemplate().getForObject(\n                 baseUrl + \"user/verifyPassword/{username}.json?password={password}\", Boolean.class,\n                 username, password);\n     }\n \n     @Override\n     public int count() {\n-        return restTemplate.getForObject(baseUrl + \"user/count.json\", Integer.class);\n+        return getRestTemplate().getForObject(baseUrl + \"user/count.json\", Integer.class);\n     }\n \n     @Override\n     public List<UserTO> list() {\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list.json\", UserTO[].class));\n     }\n \n     @Override\n     public List<UserTO> list(int page, int size) {\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/list/{page}/{size}.json\",\n                 UserTO[].class, page, size));\n     }\n \n     @Override\n     public UserTO read(Long userId) {\n-        return restTemplate.getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n+        return getRestTemplate().getForObject(baseUrl + \"user/read/{userId}.json\", UserTO.class, userId);\n     }\n \n     @Override\n     public UserTO read(String username) {\n-        return restTemplate.getForObject(baseUrl + \"user/readByUsername/{username}.json\", UserTO.class,\n+        return getRestTemplate().getForObject(baseUrl + \"user/readByUsername/{username}.json\", UserTO.class,\n                 username);\n     }\n \n     @Override\n     public UserTO create(UserTO userTO) {\n-        return restTemplate.postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n+        return getRestTemplate().postForObject(baseUrl + \"user/create\", userTO, UserTO.class);\n     }\n \n     @Override\n     public UserTO update(Long userId, UserMod userMod) {\n-        return restTemplate.postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n+        return getRestTemplate().postForObject(baseUrl + \"user/update\", userMod, UserTO.class);\n     }\n \n     @Override\n     public UserTO delete(Long userId) {\n-        return restTemplate.getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n+        return getRestTemplate().getForObject(baseUrl + \"user/delete/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n@@ -91,91 +90,91 @@ public UserTO executeWorkflow(String taskId, UserTO userTO) {\n \n     @Override\n     public List<WorkflowFormTO> getForms() {\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"user/workflow/form/list\",\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"user/workflow/form/list\",\n                 WorkflowFormTO[].class));\n     }\n \n     @Override\n     public WorkflowFormTO getFormForUser(Long userId) {\n-        return restTemplate.getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n+        return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/{userId}\", WorkflowFormTO.class,\n                 userId);\n     }\n \n     @Override\n     public WorkflowFormTO claimForm(String taskId) {\n-        return restTemplate.getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\",\n+        return getRestTemplate().getForObject(baseUrl + \"user/workflow/form/claim/{taskId}\",\n                 WorkflowFormTO.class, taskId);\n     }\n \n     @Override\n     public UserTO submitForm(WorkflowFormTO form) {\n-        return restTemplate.postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n+        return getRestTemplate().postForObject(baseUrl + \"user/workflow/form/submit\", form, UserTO.class);\n     }\n \n     @Override\n     public UserTO activate(long userId, String token) {\n-        return restTemplate.getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class,\n+        return getRestTemplate().getForObject(baseUrl + \"user/activate/{userId}?token=\" + token, UserTO.class,\n                 userId);\n     }\n \n     @Override\n     public UserTO activateByUsername(String username, String token) {\n-        return restTemplate.getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n+        return getRestTemplate().getForObject(baseUrl + \"user/activateByUsername/{username}.json?token=\" + token,\n                 UserTO.class, username);\n     }\n \n     @Override\n     public UserTO suspend(long userId) {\n-        return restTemplate.getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n+        return getRestTemplate().getForObject(baseUrl + \"user/suspend/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n     public UserTO reactivate(long userId) {\n-        return restTemplate.getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n+        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/{userId}\", UserTO.class, userId);\n     }\n \n     @Override\n     public UserTO reactivate(long userId, String query) {\n-        return restTemplate.getForObject(baseUrl + \"user/reactivate/\" + userId + query, UserTO.class);\n+        return getRestTemplate().getForObject(baseUrl + \"user/reactivate/\" + userId + query, UserTO.class);\n     }\n \n     @Override\n     public UserTO suspendByUsername(String username) {\n-        return restTemplate.getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class,\n+        return getRestTemplate().getForObject(baseUrl + \"user/suspendByUsername/{username}.json\", UserTO.class,\n                 username);\n     }\n \n     @Override\n     public UserTO reactivateByUsername(String username) {\n-        return restTemplate.getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n+        return getRestTemplate().getForObject(baseUrl + \"user/reactivateByUsername/{username}.json\",\n                 UserTO.class, username);\n     }\n \n     @Override\n     public UserTO suspend(long userId, String query) {\n-        return restTemplate.getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n+        return getRestTemplate().getForObject(baseUrl + \"user/suspend/\" + userId + query, UserTO.class);\n     }\n \n     @Override\n     public UserTO readSelf() {\n-        return restTemplate.getForObject(baseUrl + \"user/read/self\", UserTO.class);\n+        return getRestTemplate().getForObject(baseUrl + \"user/read/self\", UserTO.class);\n     }\n \n     @Override\n     public List<UserTO> search(NodeCond searchCondition) {\n-        return Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search\", searchCondition,\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search\", searchCondition,\n                 UserTO[].class));\n     }\n \n     @Override\n     public List<UserTO> search(NodeCond searchCondition, int page, int size) {\n-        return Arrays.asList(restTemplate.postForObject(baseUrl + \"user/search/{page}/{size}\",\n+        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"user/search/{page}/{size}\",\n                 searchCondition, UserTO[].class, page, size));\n     }\n \n     @Override\n     public int searchCount(NodeCond searchCondition) {\n-        return restTemplate\n+        return getRestTemplate()\n                 .postForObject(baseUrl + \"user/search/count.json\", searchCondition, Integer.class);\n     }\n "},{"sha":"79f704f572bb8c2ec8e4ac94d0073363ad4dc418","filename":"client/src/main/java/org/apache/syncope/services/proxy/WorkflowServiceProxy.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -23,28 +23,27 @@\n \r\n import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n import org.apache.syncope.services.WorkflowService;\r\n-import org.springframework.web.client.RestTemplate;\r\n \r\n public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r\n \r\n-    public WorkflowServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n-        super(baseUrl, restTemplate);\r\n+    public WorkflowServiceProxy(String baseUrl, SpringRestTemplate callback) {\r\n+        super(baseUrl, callback);\r\n     }\r\n \r\n     @Override\r\n     public WorkflowDefinitionTO getDefinition(String type) {\r\n-        return restTemplate\r\n+        return getRestTemplate()\r\n                 .getForObject(baseUrl + \"workflow/definition/\" + type, WorkflowDefinitionTO.class);\r\n     }\r\n \r\n     @Override\r\n     public void updateDefinition(String type, WorkflowDefinitionTO definition) {\r\n-        restTemplate.put(baseUrl + \"workflow/definition/\" + type, definition);\r\n+        getRestTemplate().put(baseUrl + \"workflow/definition/\" + type, definition);\r\n     }\r\n \r\n     @Override\r\n     public List<String> getDefinedTasks(final String type) {\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + \"workflow/tasks/\" + type, String.class));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"workflow/tasks/{type}\", String.class, type));\r\n     }\r\n \r\n }\r"},{"sha":"9af261b2848da9eb69109bda6e9172a21cff4590","filename":"client/src/main/java/org/apache/syncope/types/AttributableType.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAttributableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAttributableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAttributableType.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -24,4 +24,9 @@ public enum AttributableType {\n     ROLE,\n     MEMBERSHIP;\n \n+    @Override\n+    public String toString() {\n+        return name().toLowerCase();\n+    };\n+\n }"},{"sha":"6e05b0212784697fe24838d2668e6ad3e4115889","filename":"client/src/main/java/org/apache/syncope/types/TaskType.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FTaskType.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.types;\r\n+\r\n+public enum TaskType {\r\n+\r\n+    PROPAGATION(\"propagation\"),\r\n+    NOTIFICATION(\"notification\"),\r\n+    SCHEDULED(\"sched\"),\r\n+    SYNCHRONIZATION(\"sync\");\r\n+\r\n+    private String name;\r\n+\r\n+    private TaskType(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public static TaskType fromString(String name) {\r\n+        if (name != null) {\r\n+          for (TaskType t : TaskType.values()) {\r\n+            if (t.name.equalsIgnoreCase(name)) {\r\n+              return t;\r\n+            }\r\n+          }\r\n+        }\r\n+        return null;\r\n+      }\r\n+}\r"},{"sha":"16baff0ceee69ca4a3dfcc6dda398c56f6882dc2","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":23,"deletions":17,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.services.proxy.ResourceServiceProxy;\n import org.apache.syncope.services.proxy.RoleServiceProxy;\n import org.apache.syncope.services.proxy.SchemaServiceProxy;\n+import org.apache.syncope.services.proxy.SpringRestTemplate;\n import org.apache.syncope.services.proxy.TaskServiceProxy;\n import org.apache.syncope.services.proxy.UserRequestServiceProxy;\n import org.apache.syncope.services.proxy.UserServiceProxy;\n@@ -65,7 +66,7 @@\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = { \"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\" })\n-public abstract class AbstractTest {\n+public abstract class AbstractTest implements SpringRestTemplate {\n \n     protected static AttributeTO attributeTO(final String schema, final String value) {\n         AttributeTO attr = new AttributeTO();\n@@ -91,7 +92,7 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     public static final String ADMIN_UID = \"admin\";\n \n     public static final String ADMIN_PWD = \"password\";\n-    \n+\n     protected PolicyServiceProxy policyService;\n \n     @Autowired\n@@ -145,20 +146,25 @@ public void setupRestTemplate(final String uid, final String pwd) {\n     @Before\n     public void resetRestTemplate() {\n         setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n-        userService = new UserServiceProxy(BASE_URL, restTemplate);\n-        roleService = new RoleServiceProxy(BASE_URL, restTemplate);\n-        resourceService = new ResourceServiceProxy(BASE_URL, restTemplate);\n-        entitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n-        configurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n-        connectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n-        loggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n-        reportService = new ReportServiceProxy(BASE_URL, restTemplate);\n-        taskService = new TaskServiceProxy(BASE_URL, restTemplate);\n-        policyService = new PolicyServiceProxy(BASE_URL, restTemplate);\n-        workflowService = new WorkflowServiceProxy(BASE_URL, restTemplate);\n-        notificationService = new NotificationServiceProxy(BASE_URL, restTemplate);\n-        schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n-        userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n+        userService = new UserServiceProxy(BASE_URL, this);\n+        roleService = new RoleServiceProxy(BASE_URL, this);\n+        resourceService = new ResourceServiceProxy(BASE_URL, this);\n+        entitlementService = new EntitlementServiceProxy(BASE_URL, this);\n+        configurationService = new ConfigurationServiceProxy(BASE_URL, this);\n+        connectorService = new ConnectorServiceProxy(BASE_URL, this);\n+        loggerService = new LoggerServiceProxy(BASE_URL, this);\n+        reportService = new ReportServiceProxy(BASE_URL, this);\n+        taskService = new TaskServiceProxy(BASE_URL, this);\n+        policyService = new PolicyServiceProxy(BASE_URL, this);\n+        workflowService = new WorkflowServiceProxy(BASE_URL, this);\n+        notificationService = new NotificationServiceProxy(BASE_URL, this);\n+        schemaService = new SchemaServiceProxy(BASE_URL, this);\n+        userRequestService = new UserRequestServiceProxy(BASE_URL, this);\n+    }\n+\n+    @Override\n+    public RestTemplate getRestTemplate() {\n+        return restTemplate;\n     }\n-    \n+\n }"},{"sha":"7be4aab61fae0556ecc212728db4b435e6c66dbf","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n@@ -76,7 +77,7 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = schemaService.create(\"user\", SchemaService.SchemaKind.NORMAL, schemaTO);\n+        SchemaTO newSchemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n@@ -94,19 +95,19 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(userTO);\n \n         // 3. read the schema created above (as admin) - success\n-        schemaTO = schemaService.read(\"user\", SchemaService.SchemaKind.NORMAL, \"authTestSchema\");\n+        schemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n         super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-        schemaTO = schemaService.read(\"user\", SchemaService.SchemaKind.NORMAL, \"authTestSchema\");\n+        schemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n         assertNotNull(schemaTO);\n \n         // 5. update the schema create above (as user) - failure\n         HttpClientErrorException exception = null;\n         try {\n-            schemaService.update(\"role\", SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n         } catch (HttpClientErrorException e) {\n             exception = e;\n         }"},{"sha":"18a1650f2f2e9341b86e1b400f4eb3188b04c527","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.to.DerivedSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -32,15 +33,9 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class DerivedSchemaTestITCase extends AbstractTest {\n \n-    private static final String ROLE = \"role\";\n-\n-    private static final String USER = \"user\";\n-\n-    private static final String MEMBERSHIP = \"membership\";\n-\n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = schemaService.list(USER, SchemaService.SchemaKind.DERIVED);\n+        List<DerivedSchemaTO> derivedSchemas = schemaService.list(AttributableType.USER, SchemaService.SchemaType.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n@@ -49,7 +44,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = schemaService.read(USER, SchemaService.SchemaKind.DERIVED, \"cn\");\n+        DerivedSchemaTO derivedSchemaTO = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, \"cn\");\n         assertNotNull(derivedSchemaTO);\n     }\n \n@@ -59,54 +54,54 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        DerivedSchemaTO actual = schemaService.create(USER, SchemaService.SchemaKind.DERIVED, schema);\n+        DerivedSchemaTO actual = schemaService.create(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(USER, SchemaService.SchemaKind.DERIVED, actual.getName());\n+        actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, actual.getName());\n         assertNotNull(actual);\n         assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n     }\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaKind.DERIVED, \"rderiveddata\");\n+        DerivedSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n         assertNotNull(schema);\n \n-        DerivedSchemaTO schemaToDelete = schemaService.delete(ROLE, SchemaService.SchemaKind.DERIVED, schema.getName());\n+        DerivedSchemaTO schemaToDelete = schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schema.getName());\n         assertNotNull(schemaToDelete);\n \n         Throwable t = null;\n         try {\n-            schemaService.read(ROLE, SchemaService.SchemaKind.DERIVED, \"rderiveddata\");\n+            schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n             // Recreate schema to make test re-runnable\n-            schema = schemaService.create(ROLE, SchemaService.SchemaKind.DERIVED, schemaToDelete);\n+            schema = schemaService.create(AttributableType.ROLE, SchemaService.SchemaType.DERIVED, schemaToDelete);\n             assertNotNull(schema);\n         }\n         assertNotNull(t);\n     }\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, \"mderiveddata\");\n+        DerivedSchemaTO schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n         try {\n             schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n \n-            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, schema.getName(), schema);\n+            schema = schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n             assertNotNull(schema);\n \n-            schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, \"mderiveddata\");\n+            schema = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n             assertNotNull(schema);\n             assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n         } finally {\n             // Set updated back to make test re-runnable\n             schema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n-            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaKind.DERIVED, schema.getName(), schema);\n+            schema = schemaService.update(AttributableType.MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n             assertNotNull(schema);\n         }\n     }"},{"sha":"9e81b94ce858f351e881ebab77df1cc3bd3d8d60","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -51,14 +51,14 @@ public void listByType() {\n \n     @Test\n     public void read() {\n-        SyncPolicyTO policyTO = policyService.read(1L, SyncPolicyTO.class);\n+        SyncPolicyTO policyTO = policyService.read(PolicyType.SYNC, 1L);\n \n         assertNotNull(policyTO);\n     }\n \n     @Test\n     public void getGlobalPasswordPolicy() {\n-        PasswordPolicyTO policyTO = policyService.readGlobal(PolicyType.PASSWORD, PasswordPolicyTO.class);\n+        PasswordPolicyTO policyTO = policyService.readGlobal(PolicyType.PASSWORD);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n@@ -67,7 +67,7 @@ public void getGlobalPasswordPolicy() {\n \n     @Test\n     public void getGlobalAccountPolicy() {\n-        AccountPolicyTO policyTO = policyService.readGlobal(PolicyType.ACCOUNT, AccountPolicyTO.class);\n+        AccountPolicyTO policyTO = policyService.readGlobal(PolicyType.ACCOUNT);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_ACCOUNT, policyTO.getType());\n@@ -82,7 +82,7 @@ public void createWithException() {\n \n         Throwable t = null;\n         try {\n-            policyService.create(policy);\n+            policyService.create(PolicyType.PASSWORD, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             t = sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy);\n@@ -97,7 +97,7 @@ public void createMissingDescription() {\n \n         Throwable t = null;\n         try {\n-            policyService.create(policy);\n+            policyService.create(PolicyType.SYNC, policy);\n             fail();\n         } catch (SyncopeClientCompositeErrorException sccee) {\n             t = sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy);\n@@ -109,7 +109,7 @@ public void createMissingDescription() {\n     public void create() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n \n-        SyncPolicyTO policyTO = policyService.create(policy);\n+        SyncPolicyTO policyTO = policyService.create(PolicyType.SYNC, policy);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n@@ -118,17 +118,17 @@ public void create() {\n     @Test\n     public void update() {\n         // get global password\n-        PasswordPolicyTO globalPolicy = policyService.read(2L, PasswordPolicyTO.class);\n+        PasswordPolicyTO globalPolicy = policyService.read(PolicyType.PASSWORD, 2L);\n \n         PasswordPolicyTO policy = new PasswordPolicyTO();\n         policy.setDescription(\"A simple password policy\");\n         policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        policy = policyService.create(policy);\n+        policy = policyService.create(PolicyType.PASSWORD, policy);\n \n         // read new password policy\n-        policy = policyService.read(policy.getId(), PasswordPolicyTO.class);\n+        policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n \n         assertNotNull(\"find to update did not work\", policy);\n \n@@ -137,7 +137,7 @@ public void update() {\n         policy.setSpecification(policySpec);\n \n         // update new password policy\n-        policy = policyService.update(policy.getId(), policy);\n+        policy = policyService.update(PolicyType.PASSWORD, policy.getId(), policy);\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n@@ -148,16 +148,16 @@ public void update() {\n     @Test\n     public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n-        SyncPolicyTO policyTO = policyService.create(policy);\n+        SyncPolicyTO policyTO = policyService.create(PolicyType.SYNC, policy);\n         assertNotNull(policyTO);\n \n         PolicyTO policyToDelete =\n-                policyService.delete(policyTO.getId(), SyncPolicyTO.class);\n+                policyService.delete(PolicyType.SYNC, policyTO.getId());\n         assertNotNull(policyToDelete);\n \n         Throwable t = null;\n         try {\n-        \tpolicyService.read(policyTO.getId(), SyncPolicyTO.class);\n+        \tpolicyService.read(PolicyType.SYNC, policyTO.getId());\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n         }"},{"sha":"966b58644da55d634643e92c814f93255e583a0d","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":19,"deletions":24,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.EntityViolationType;\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n@@ -41,23 +42,17 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class SchemaTestITCase extends AbstractTest {\n \n-    private static final String ROLE = \"role\";\n-\n-    private static final String USER = \"user\";\n-\n-    private static final String MEMBERSHIP = \"membership\";\n-\n     @Test\n     public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n+        SchemaTO newSchemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        newSchemaTO = schemaService.create(MEMBERSHIP, SchemaService.SchemaKind.NORMAL, schemaTO);\n+        newSchemaTO = schemaService.create(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -68,7 +63,7 @@ public void createWithNotPermittedName() {\n         schemaTO.setType(SchemaType.String);\n \n         try {\n-            schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n+            schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -87,7 +82,7 @@ public void createREnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(ROLE, SchemaService.SchemaKind.NORMAL, schemaTO);\n+            schemaService.create(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -106,7 +101,7 @@ public void createUEnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n+            schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -120,11 +115,11 @@ public void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        SchemaTO deletedSchema = schemaService.delete(USER, SchemaService.SchemaKind.NORMAL, \"cool\");\n+        SchemaTO deletedSchema = schemaService.delete(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"cool\");\n         assertNotNull(deletedSchema);\n         SchemaTO firstname = null;\n         try {\n-            firstname = schemaService.read(USER, SchemaService.SchemaKind.NORMAL, \"cool\");\n+            firstname = schemaService.read(AttributableType.USER, SchemaService.SchemaType.NORMAL, \"cool\");\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -133,19 +128,19 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas = schemaService.list(USER, SchemaService.SchemaKind.NORMAL);\n+        List<SchemaTO> userSchemas = schemaService.list(AttributableType.USER, SchemaService.SchemaType.NORMAL);\n         assertFalse(userSchemas.isEmpty());\n         for (SchemaTO schemaTO : userSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> roleSchemas = schemaService.list(ROLE, SchemaService.SchemaKind.NORMAL);\n+        List<SchemaTO> roleSchemas = schemaService.list(AttributableType.ROLE, SchemaService.SchemaType.NORMAL);\n         assertFalse(roleSchemas.isEmpty());\n         for (SchemaTO schemaTO : roleSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> membershipSchemas = schemaService.list(MEMBERSHIP, SchemaService.SchemaKind.NORMAL);\n+        List<SchemaTO> membershipSchemas = schemaService.list(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {\n             assertNotNull(schemaTO);\n@@ -154,15 +149,15 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchemaTO schemaTO = schemaService.read(ROLE, SchemaService.SchemaKind.NORMAL, \"icon\");\n+        SchemaTO schemaTO = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n         assertNotNull(schemaTO);\n \n-        SchemaTO updatedTO = schemaService.update(ROLE, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n+        SchemaTO updatedTO = schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(SchemaType.Date);\n         try {\n-            schemaService.update(ROLE, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), updatedTO);\n+            schemaService.update(AttributableType.ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -176,7 +171,7 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(SchemaType.Double);\n \n-        schemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n+        schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue258@syncope.apache.org\");\n@@ -187,7 +182,7 @@ public void issue258() {\n \n         schemaTO.setType(SchemaType.Long);\n         try {\n-            schemaService.update(USER, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -202,7 +197,7 @@ public void issue259() {\n         schemaTO.setUniqueConstraint(true);\n         schemaTO.setType(SchemaType.Long);\n \n-        schemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n+        schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue259@syncope.apache.org\");\n@@ -228,7 +223,7 @@ public void issue260() {\n         schemaTO.setType(SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        schemaTO = schemaService.create(USER, SchemaService.SchemaKind.NORMAL, schemaTO);\n+        schemaTO = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue260@syncope.apache.org\");\n@@ -238,7 +233,7 @@ public void issue260() {\n \n         schemaTO.setUniqueConstraint(false);\n         try {\n-            schemaService.update(USER, SchemaService.SchemaKind.NORMAL, schemaTO.getName(), schemaTO);\n+            schemaService.update(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);"},{"sha":"a92fccda7bddb99b96fa44ccd21134e205750ae1","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":39,"deletions":42,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n+import org.apache.syncope.types.TaskType;\n import org.apache.syncope.types.TraceLevel;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -96,7 +97,7 @@ public void create() {\n         SyncTaskTO actual = taskService.create(task);\n         assertNotNull(actual);\n \n-        task = taskService.read(actual.getId(), SyncTaskTO.class);\n+        task = taskService.read(TaskType.SYNCHRONIZATION, actual.getId());\n         assertNotNull(task);\n         assertEquals(actual.getId(), task.getId());\n         assertEquals(actual.getJobClassName(), task.getJobClassName());\n@@ -106,7 +107,7 @@ public void create() {\n \n     @Test\n     public void update() {\n-        SchedTaskTO task = taskService.read(SCHED_TASK_ID, SchedTaskTO.class);\n+        SchedTaskTO task = taskService.read(TaskType.SCHEDULED, SCHED_TASK_ID);\n         assertNotNull(task);\n \n         SchedTaskTO taskMod = new SchedTaskTO();\n@@ -121,14 +122,14 @@ public void update() {\n \n     @Test\n     public void count() {\n-        Integer count = taskService.count(\"propagation\");\n+        Integer count = taskService.count(TaskType.PROPAGATION);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n     public void list() {\n-        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -139,7 +140,7 @@ public void list() {\n \n     @Test\n     public void paginatedList() {\n-        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", 1, 2, PropagationTaskTO[].class);\n+        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION, 1, 2);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -149,7 +150,7 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(\"propagation\", 2, 2, PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION, 2, 2);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -158,15 +159,15 @@ public void paginatedList() {\n             assertNotNull(task);\n         }\n \n-        tasks = taskService.list(\"propagation\", 100, 2, PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION, 100, 2);\n \n         assertNotNull(tasks);\n         assertTrue(tasks.isEmpty());\n     }\n \n     @Test\n     public void listExecutions() {\n-        List<TaskExecTO> executions = taskService.listExecutions(\"propagation\");\n+        List<TaskExecTO> executions = taskService.listExecutions(TaskType.PROPAGATION);\n         assertNotNull(executions);\n         assertFalse(executions.isEmpty());\n         for (TaskExecTO execution : executions) {\n@@ -176,7 +177,7 @@ public void listExecutions() {\n \n     @Test\n     public void read() {\n-        PropagationTaskTO taskTO = taskService.read(3L, PropagationTaskTO.class);\n+        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, 3L);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n@@ -192,7 +193,7 @@ public void readExecution() {\n     @Test\n     public void deal() {\n         try {\n-            taskService.delete(0L, TaskTO.class);\n+            taskService.delete(TaskType.PROPAGATION, 0L);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -203,7 +204,7 @@ public void deal() {\n         assertEquals(PropagationTaskExecStatus.SUCCESS.name(), exec.getStatus());\n         assertEquals(\"OK\", exec.getMessage());\n \n-        taskService.delete(1L, PropagationTaskTO.class);\n+        taskService.delete(TaskType.PROPAGATION, 1L);\n         try {\n             taskService.readExecution(exec.getId());\n         } catch (HttpStatusCodeException e) {\n@@ -235,16 +236,15 @@ public void sync() {\n         assertNotNull(usersPre);\n \n         // Update sync task\n-        SyncTaskTO task = taskService.read(SYNC_TASK_ID, SyncTaskTO.class);\n+        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n         assertNotNull(task);\n \n         //  add custom SyncJob actions\n         task.setActionsClassName(TestSyncActions.class.getName());\n \n         //  add user template\n         UserTO template = new UserTO();\n-        template.addAttribute(attributeTO(\"type\",\n-                \"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n+        template.addAttribute(attributeTO(\"type\", \"email == 'test8@syncope.apache.org'? 'TYPE_8': 'TYPE_OTHER'\"));\n         template.addDerivedAttribute(attributeTO(\"cn\", null));\n         template.addResource(\"resource-testdb\");\n \n@@ -260,7 +260,7 @@ public void sync() {\n         assertEquals(task.getId(), actual.getId());\n         assertEquals(TestSyncActions.class.getName(), actual.getActionsClassName());\n \n-        execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, false);\n+        execSyncTask(SYNC_TASK_ID, 50, false);\n \n         // after execution of the sync task the user data should be synced from\n         // csv datasource and processed by user template\n@@ -309,7 +309,7 @@ public void sync() {\n     @Test\n     public void reconcileUsers() {\n         // Update sync task\n-        SyncTaskTO task = taskService.read(7L, SyncTaskTO.class);\n+        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 7L);\n         assertNotNull(task);\n \n         //  add user template\n@@ -327,22 +327,21 @@ public void reconcileUsers() {\n         assertEquals(template, actual.getUserTemplate());\n         assertEquals(new RoleTO(), actual.getRoleTemplate());\n \n-        TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 20, false);\n+        TaskExecTO execution = execSyncTask(actual.getId(), 20, false);\n \n         final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n         final UserTO userTO = userService.read(\"testuser1\");\n         assertNotNull(userTO);\n-        assertEquals(\"reconciled@syncope.apache.org\",\n-                userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+        assertEquals(\"reconciled@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n     }\n \n     @Test\n     public void reconcileRoles() {\n         // Update sync task\n-        SyncTaskTO task = taskService.read(11L, SyncTaskTO.class);\n+        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 11L);\n         assertNotNull(task);\n \n         //  add user template\n@@ -358,7 +357,7 @@ public void reconcileRoles() {\n         assertEquals(template, actual.getRoleTemplate());\n         assertEquals(new UserTO(), actual.getUserTemplate());\n \n-        TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 20, false);\n+        TaskExecTO execution = execSyncTask(actual.getId(), 20, false);\n \n         // 1. verify execution status\n         final String status = execution.getStatus();\n@@ -397,15 +396,14 @@ public void issue196() {\n \n     @Test\n     public void dryRun() {\n-        TaskExecTO execution = execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, true);\n-        assertEquals(\n-                \"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n+        TaskExecTO execution = execSyncTask(SYNC_TASK_ID, 50, true);\n+        assertEquals(\"Execution of task \" + execution.getTask() + \" failed with message \" + execution.getMessage(),\n                 \"SUCCESS\", execution.getStatus());\n     }\n \n     @Test\n     public void issueSYNCOPE81() {\n-        NotificationTaskTO taskTO = taskService.read(8L, NotificationTaskTO.class);\n+        NotificationTaskTO taskTO = taskService.read(TaskType.NOTIFICATION, 8L);\n         assertNotNull(taskTO);\n \n         int executions = taskTO.getExecutions().size();\n@@ -426,7 +424,7 @@ public void issueSYNCOPE81() {\n                 } catch (InterruptedException e) {\n                 }\n \n-                taskTO = taskService.read(taskTO.getId(), NotificationTaskTO.class);\n+                taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getId());\n \n                 assertNotNull(taskTO);\n                 assertNotNull(taskTO.getExecutions());\n@@ -437,7 +435,7 @@ public void issueSYNCOPE81() {\n             assertFalse(taskTO.getExecutions().isEmpty());\n         }\n \n-        taskTO = taskService.delete(taskTO.getId(), NotificationTaskTO.class);\n+        taskTO = taskService.delete(TaskType.NOTIFICATION, taskTO.getId());\n         assertNotNull(taskTO);\n     }\n \n@@ -479,7 +477,7 @@ public void issueSYNCOPE86() {\n         assertNotNull(userTO);\n \n         // 3. get NotificationTaskTO for user just created\n-        List<NotificationTaskTO> tasks = taskService.list(\"notification\", NotificationTaskTO[].class);\n+        List<NotificationTaskTO> tasks = taskService.list(TaskType.NOTIFICATION);\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n@@ -497,7 +495,7 @@ public void issueSYNCOPE86() {\n         assertNotNull(execution);\n \n         // 5. verify\n-        taskTO = taskService.read(taskTO.getId(), NotificationTaskTO.class);\n+        taskTO = taskService.read(TaskType.NOTIFICATION, taskTO.getId());\n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());\n     }\n@@ -547,7 +545,7 @@ public void issueSYNCOPE68() {\n         //-----------------------------\n \n         // Update sync task\n-        SyncTaskTO task = taskService.read(9L, SyncTaskTO.class);\n+        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 9L);\n         assertNotNull(task);\n \n         task.setUserTemplate(template);\n@@ -558,15 +556,14 @@ public void issueSYNCOPE68() {\n         assertFalse(actual.getUserTemplate().getResources().isEmpty());\n         assertFalse(actual.getUserTemplate().getMemberships().isEmpty());\n \n-        TaskExecTO execution = execTask(SyncTaskTO.class, actual.getId(), 50, false);\n+        TaskExecTO execution = execSyncTask(actual.getId(), 50, false);\n         final String status = execution.getStatus();\n         assertNotNull(status);\n         assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n \n         userTO = userService.read(\"testuser2\");\n         assertNotNull(userTO);\n-        assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues()\n-                .get(0));\n+        assertEquals(\"testuser2@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n         assertEquals(2, userTO.getMemberships().size());\n         assertEquals(4, userTO.getResources().size());\n     }\n@@ -583,7 +580,7 @@ public void issueSYNCOPE144() {\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n \n-        task = taskService.read(actual.getId(), SchedTaskTO.class);\n+        task = taskService.read(TaskType.SCHEDULED, actual.getId());\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n@@ -600,7 +597,7 @@ public void issueSYNCOPE144() {\n     @Test\n     public void issueSYNCOPE230() {\n         // 1. read SyncTask for resource-db-sync (table TESTSYNC on external H2)\n-        execTask(SyncTaskTO.class, 10L, 20, false);\n+        execSyncTask(10L, 20, false);\n \n         // 3. read e-mail address for user created by the SyncTask first execution\n         UserTO userTO = userService.read(\"issuesyncope230\");\n@@ -613,7 +610,7 @@ public void issueSYNCOPE230() {\n         jdbcTemplate.execute(\"UPDATE TESTSYNC SET email='updatedSYNCOPE230@syncope.apache.org'\");\n \n         // 5. re-execute the SyncTask\n-        execTask(SyncTaskTO.class, 10L, 20, false);\n+        execSyncTask(10L, 20, false);\n \n         // 6. verify that the e-mail was updated\n         userTO = userService.read(\"issuesyncope230\");\n@@ -623,10 +620,10 @@ public void issueSYNCOPE230() {\n         assertEquals(\"updatedSYNCOPE230@syncope.apache.org\", email);\n     }\n \n-    private TaskExecTO execTask(final Class<? extends TaskTO> taskClass, final Long taskId,\n-            final int maxWaitSeconds, final boolean dryRun) {\n+    private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n+            final boolean dryRun) {\n \n-        TaskTO taskTO = taskService.read(taskId, taskClass);\n+        TaskTO taskTO = taskService.read(TaskType.SYNCHRONIZATION, taskId);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n@@ -644,7 +641,7 @@ private TaskExecTO execTask(final Class<? extends TaskTO> taskClass, final Long\n             } catch (InterruptedException e) {\n             }\n \n-            taskTO = taskService.read(taskTO.getId(), taskClass);\n+            taskTO = taskService.read(TaskType.SYNCHRONIZATION, taskTO.getId());\n \n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getExecutions());\n@@ -677,7 +674,7 @@ public void issueSYNCOPE272() {\n         assertTrue(userTO.getPropagationTOs().get(0).getStatus().isSuccessful());\n \n         // Update sync task\n-        SyncTaskTO task = taskService.read(SYNC_TASK_ID, SyncTaskTO.class);\n+        SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n         assertNotNull(task);\n \n         // add user template\n@@ -699,7 +696,7 @@ public void issueSYNCOPE272() {\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n \n-        TaskExecTO taskExecTO = execTask(SyncTaskTO.class, SYNC_TASK_ID, 50, false);\n+        TaskExecTO taskExecTO = execSyncTask(SYNC_TASK_ID, 50, false);\n         assertNotNull(actual);\n         assertEquals(task.getId(), actual.getId());\n "},{"sha":"df3bbf800d0a0f11464a4be5e896be49fcf8750a","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":27,"deletions":20,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -18,22 +18,27 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.mod.MembershipMod;\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.client.to.ConfigurationTO;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.MembershipTO;\n-import org.apache.syncope.client.to.PasswordPolicyTO;\n import org.apache.syncope.client.to.PolicyTO;\n import org.apache.syncope.client.to.PropagationTO;\n import org.apache.syncope.client.to.PropagationTaskTO;\n@@ -48,8 +53,10 @@\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.CipherAlgorithm;\n+import org.apache.syncope.types.PolicyType;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n+import org.apache.syncope.types.TaskType;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n@@ -72,7 +79,7 @@ private ConnObjectTO readUserConnObj(String resourceName, String userId) {\n     public static UserTO getSampleUniqueTO() {\n     \treturn getSampleTO(getUUIDString() + \"@test.com\");\n     }\n-    \n+\n     public static UserTO getSampleTO(final String email) {\n     \tString uid = email;\n         UserTO userTO = new UserTO();\n@@ -110,7 +117,7 @@ public void selfRead() {\n     @Test\n     public void createUserWithNoPropagation() {\n         // get task list\n-        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -138,7 +145,7 @@ public void createUserWithNoPropagation() {\n         userService.create(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION);\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n@@ -153,7 +160,7 @@ public void createUserWithNoPropagation() {\n         assertTrue(newMaxId > maxId);\n \n         // get last task\n-        PropagationTaskTO taskTO = taskService.read(newMaxId, PropagationTaskTO.class);\n+        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n \n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n@@ -167,11 +174,11 @@ public void createUserWithNoPropagation() {\n      * introducing a simple control.\n      */\n     public void issue172() {\n-        PolicyTO policyTO = policyService.read(2L, PasswordPolicyTO.class);\n+        PolicyTO policyTO = policyService.read(PolicyType.PASSWORD, 2L);\n \n         assertNotNull(policyTO);\n \n-        policyService.delete(2L, PasswordPolicyTO.class);\n+        policyService.delete(PolicyType.PASSWORD, 2L);\n \n         UserTO userTO = new UserTO();\n         userTO.setUsername(\"issue172@syncope.apache.org\");\n@@ -184,7 +191,7 @@ public void issue172() {\n \n         userService.create(userTO);\n \n-        policyService.create(policyTO);\n+        policyService.create(PolicyType.PASSWORD, policyTO);\n \n         assertNotNull(policyTO);\n     }\n@@ -409,7 +416,7 @@ public void createWithException() {\n     public void create() {\n         // get task list\n         List<PropagationTaskTO> tasks =\n-                taskService.list(\"propagation\", PropagationTaskTO[].class);\n+                taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -421,7 +428,7 @@ public void create() {\n                 maxId = task.getId();\n             }\n         }\n-        PropagationTaskTO taskTO = taskService.read(maxId, PropagationTaskTO.class);\n+        PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, maxId);\n \n         assertNotNull(taskTO);\n         int maxTaskExecutions = taskTO.getExecutions().size();\n@@ -462,7 +469,7 @@ public void create() {\n         assertEquals(\"virtualvalue\", newUserTO.getVirtualAttributeMap().get(\"virtualdata\").getValues().get(0));\n \n         // get the new task list\n-        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -481,7 +488,7 @@ public void create() {\n         assertEquals(newMaxId, maxId);\n \n         // get last task\n-        taskTO = taskService.read(newMaxId, PropagationTaskTO.class);\n+        taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n \n         assertNotNull(taskTO);\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n@@ -914,7 +921,7 @@ public void update() {\n \n     @Test\n     public void updatePasswordOnly() {\n-        List<PropagationTaskTO> beforeTasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        List<PropagationTaskTO> beforeTasks = taskService.list(TaskType.PROPAGATION);\n         assertNotNull(beforeTasks);\n         assertFalse(beforeTasks.isEmpty());\n \n@@ -939,7 +946,7 @@ public void updatePasswordOnly() {\n         passwordTestUser.setPassword(\"newPassword123\", CipherAlgorithm.SHA1, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n-        List<PropagationTaskTO> afterTasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        List<PropagationTaskTO> afterTasks = taskService.list(TaskType.PROPAGATION);\n         assertNotNull(afterTasks);\n         assertFalse(afterTasks.isEmpty());\n \n@@ -949,7 +956,7 @@ public void updatePasswordOnly() {\n     @Test\n     public void verifyTaskRegistration() {\n         // get task list\n-        List<PropagationTaskTO> tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        List<PropagationTaskTO> tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -978,7 +985,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION);\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n@@ -1009,7 +1016,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(userTO);\n \n         // get the new task list\n-        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION);\n \n         // get max task id\n         maxId = newMaxId;\n@@ -1024,7 +1031,7 @@ public void verifyTaskRegistration() {\n         //             all update executions have to be registered\n         assertTrue(newMaxId > maxId);\n \n-        final PropagationTaskTO taskTO = taskService.read(newMaxId, PropagationTaskTO.class);\n+        final PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, newMaxId);\n \n         assertNotNull(taskTO);\n         assertEquals(1, taskTO.getExecutions().size());\n@@ -1035,7 +1042,7 @@ public void verifyTaskRegistration() {\n         userService.delete(userTO.getId());\n \n         // get the new task list\n-        tasks = taskService.list(\"propagation\", PropagationTaskTO[].class);\n+        tasks = taskService.list(TaskType.PROPAGATION);\n \n         // get max task id\n         maxId = newMaxId;"},{"sha":"a49e858e701eea9aca8e73f8add34c8e9a397225","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/96771b83b49cff8aa174d26ac25862e5614daf7c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=96771b83b49cff8aa174d26ac25862e5614daf7c","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.to.VirtualSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.services.SchemaService;\n+import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -32,15 +33,9 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class VirtualSchemaTestITCase extends AbstractTest {\n \n-    private static final String ROLE = \"role\";\n-\n-    private static final String USER = \"user\";\n-\n-    private static final String MEMBERSHIP = \"membership\";\n-\n     @Test\n     public void list() {\n-        List<VirtualSchemaTO> vSchemas = schemaService.list(USER, SchemaService.SchemaKind.VIRTUAL);\n+        List<VirtualSchemaTO> vSchemas = schemaService.list(AttributableType.USER, SchemaService.SchemaType.VIRTUAL);\n         assertFalse(vSchemas.isEmpty());\n         for (VirtualSchemaTO vSchemaTO : vSchemas) {\n             assertNotNull(vSchemaTO);\n@@ -49,7 +44,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO vSchemaTO = schemaService.read(MEMBERSHIP, SchemaService.SchemaKind.VIRTUAL, \"mvirtualdata\");\n+        VirtualSchemaTO vSchemaTO = schemaService.read(AttributableType.MEMBERSHIP, SchemaService.SchemaType.VIRTUAL, \"mvirtualdata\");\n         assertNotNull(vSchemaTO);\n     }\n \n@@ -58,24 +53,24 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        VirtualSchemaTO actual = schemaService.create(USER, SchemaService.SchemaKind.VIRTUAL, schema);\n+        VirtualSchemaTO actual = schemaService.create(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(USER, SchemaService.SchemaKind.VIRTUAL, actual.getName());\n+        actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, actual.getName());\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaKind.VIRTUAL, \"rvirtualdata\");\n+        VirtualSchemaTO schema = schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n         assertNotNull(schema);\n \n-        VirtualSchemaTO deletedSchema = schemaService.delete(ROLE, SchemaService.SchemaKind.VIRTUAL, schema.getName());\n+        VirtualSchemaTO deletedSchema = schemaService.delete(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL, schema.getName());\n         assertNotNull(deletedSchema);\n \n         Throwable t = null;\n         try {\n-            schemaService.read(ROLE, SchemaService.SchemaKind.VIRTUAL, \"rvirtualdata\");\n+            schemaService.read(AttributableType.ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));"}]}