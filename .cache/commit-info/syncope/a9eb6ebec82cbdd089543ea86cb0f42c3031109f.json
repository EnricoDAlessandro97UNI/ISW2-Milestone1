{"sha":"a9eb6ebec82cbdd089543ea86cb0f42c3031109f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE5ZWI2ZWJlYzgyY2JkZDA4OTU0M2VhODZjYjBmNDJjMzAzMTEwOWY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-04T13:43:16Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-04T13:43:16Z"},"message":"Stronger attribute validation\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1245971 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"88ecd36769b61822f60b31ed765b97060bb50579","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/88ecd36769b61822f60b31ed765b97060bb50579"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a9eb6ebec82cbdd089543ea86cb0f42c3031109f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9eb6ebec82cbdd089543ea86cb0f42c3031109f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a9eb6ebec82cbdd089543ea86cb0f42c3031109f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/comments","author":null,"committer":null,"parents":[{"sha":"1c62c889ea3c7784650cc40c528f660b72a2d9dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c62c889ea3c7784650cc40c528f660b72a2d9dd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1c62c889ea3c7784650cc40c528f660b72a2d9dd"}],"stats":{"total":622,"additions":450,"deletions":172},"files":[{"sha":"aa751d7204e63fb6da52a8aca1e27a4e2210ccdd","filename":"core/src/main/java/org/syncope/core/AttributeType.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2FAttributeType.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -37,7 +37,7 @@ public String getClassName() {\n         return className;\n     }\n \n-    public Format getFormatter() {\n+    public Format getBasicFormatter() {\n         if (formatter == null) {\n             switch (this) {\n                 case Date:\n@@ -50,4 +50,11 @@ public Format getFormatter() {\n \n         return formatter;\n     }\n+\n+    public boolean isConversionPatternNeeded() {\n+        return this == AttributeType.Date\n+                || this == AttributeType.Double\n+                || this == AttributeType.Long;\n+    }\n+\n }"},{"sha":"3dfdb6f1e32a9028111b259921d57786ba6b6fd7","filename":"core/src/main/java/org/syncope/core/beans/UserAttribute.java","status":"modified","additions":11,"deletions":144,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttribute.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -15,10 +15,6 @@\n package org.syncope.core.beans;\n \n import java.io.Serializable;\n-import java.text.DecimalFormat;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.CascadeType;\n@@ -29,9 +25,9 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n-import javax.persistence.Transient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.syncope.core.validation.ValidationException;\n \n @Entity\n public class UserAttribute implements Serializable {\n@@ -43,8 +39,6 @@ public class UserAttribute implements Serializable {\n     private Long id;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UserAttributeSchema schema;\n-    @Transient\n-    private Class userAttributeClass;\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER)\n     private Set<UserAttributeValue> values;\n@@ -68,19 +62,8 @@ public UserAttributeSchema getSchema() {\n         return schema;\n     }\n \n-    public void setSchema(UserAttributeSchema schema)\n-            throws ClassNotFoundException {\n-\n+    public void setSchema(UserAttributeSchema schema) {\n         this.schema = schema;\n-\n-        if (schema == null) {\n-            throw new NullPointerException(\n-                    \"Cannot set a NULL UserAttributeSchema!\");\n-        }\n-\n-        this.schema = schema;\n-        this.userAttributeClass = Class.forName(\n-                schema.getType().getClassName());\n     }\n \n     public Set<UserAttributeValue> getValues() {\n@@ -91,13 +74,12 @@ public void setValues(Set<UserAttributeValue> values) {\n         this.values = values;\n     }\n \n-    public boolean addValue(String value) {\n+    public boolean addValue(Object value) {\n         UserAttributeValue actualValue = null;\n         try {\n-            actualValue = getValue(value);\n-        } catch (ParseException e) {\n-            log.error(\"While parsing '\" + value + \"' as \"\n-                    + userAttributeClass.getClass().getName(), e);\n+            actualValue = getSchema().getValidator().getValue(value);\n+        } catch (ValidationException e) {\n+            log.error(\"While validating '\" + value + \"'\", e);\n         }\n \n         boolean result = false;\n@@ -111,140 +93,25 @@ public boolean addValue(String value) {\n         return result;\n     }\n \n-    public boolean addValue(Object value)\n-            throws ClassCastException {\n-\n-        if (!userAttributeClass.isInstance(value)) {\n-            log.error(\"'\" + value + \"' is not an instance of \"\n-                    + userAttributeClass.getClass().getName());\n-\n-            throw getClassCastException(value);\n-        }\n-\n-        if (!schema.isMultivalue()) {\n-            values.clear();\n-        }\n-\n-        return values.add(getValue(value));\n-    }\n-\n-    public boolean removeValue(String value) {\n+    public boolean removeValue(Object value) {\n         UserAttributeValue actualValue = null;\n         try {\n-            actualValue = getValue(value);\n-        } catch (ParseException e) {\n-            log.error(\"While parsing '\" + value + \"' as \"\n-                    + userAttributeClass.getClass().getName(), e);\n+            actualValue = getSchema().getValidator().getValue(value);\n+        } catch (ValidationException e) {\n+            log.error(\"While validating '\" + value + \"'\", e);\n         }\n \n         boolean result = false;\n         if (actualValue != null) {\n             result = values.remove(actualValue);\n-            if (!values.isEmpty()\n-                    && !schema.isMultivalue()) {\n-\n+            if (!values.isEmpty() && !schema.isMultivalue()) {\n                 values.clear();\n             }\n         }\n \n         return result;\n     }\n \n-    public boolean removeValue(Object value)\n-            throws ClassCastException {\n-\n-        if (!userAttributeClass.isInstance(value)) {\n-            log.error(\"'\" + value + \"' is not an instance of \"\n-                    + userAttributeClass.getClass().getName());\n-\n-            throw getClassCastException(value);\n-        }\n-\n-        boolean result = values.remove(getValue(value));\n-        if (!values.isEmpty()\n-                && !schema.isMultivalue()) {\n-\n-            values.clear();\n-        }\n-\n-        return result;\n-    }\n-\n-    private UserAttributeValue getValue(String value)\n-            throws ParseException {\n-\n-        UserAttributeValue result = null;\n-\n-        switch (schema.getType()) {\n-\n-            case String:\n-                result = new UserAttributeValueAsString(value);\n-                break;\n-\n-            case Boolean:\n-                result = new UserAttributeValueAsBoolean(\n-                        Boolean.parseBoolean(value));\n-                break;\n-\n-            case Long:\n-                result = new UserAttributeValueAsLong(\n-                        Long.valueOf(schema.getFormatter(\n-                        DecimalFormat.class).parse(value).longValue()));\n-                break;\n-\n-            case Double:\n-                result = new UserAttributeValueAsDouble(\n-                        Double.valueOf(schema.getFormatter(\n-                        DecimalFormat.class).parse(value).doubleValue()));\n-                break;\n-\n-            case Date:\n-                result = new UserAttributeValueAsDate(\n-                        new Date(schema.getFormatter(\n-                        SimpleDateFormat.class).parse(value).getTime()));\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    private UserAttributeValue getValue(Object value) {\n-\n-        UserAttributeValue result = null;\n-\n-        switch (schema.getType()) {\n-\n-            case String:\n-                result = new UserAttributeValueAsString((String) value);\n-                break;\n-\n-            case Boolean:\n-                result = new UserAttributeValueAsBoolean((Boolean) value);\n-                break;\n-\n-            case Long:\n-                result = new UserAttributeValueAsLong((Long) value);\n-                break;\n-\n-            case Double:\n-                result = new UserAttributeValueAsDouble((Double) value);\n-                break;\n-\n-            case Date:\n-                result = new UserAttributeValueAsDate((Date) value);\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    private ClassCastException getClassCastException(Object value) {\n-        return new ClassCastException(\"Passed value is instance of \"\n-                + value.getClass().getName()\n-                + \", while this attribute has type \"\n-                + userAttributeClass.getName());\n-    }\n-\n     @Override\n     public boolean equals(Object obj) {\n         if (obj == null) {"},{"sha":"e30a58d3244dd862bb60dc9501e432770c2939d7","filename":"core/src/main/java/org/syncope/core/beans/UserAttributeSchema.java","status":"modified","additions":59,"deletions":10,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fbeans%2FUserAttributeSchema.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.beans;\n \n+import java.lang.reflect.Constructor;\n import static javax.persistence.EnumType.STRING;\n \n import java.io.Serializable;\n@@ -24,9 +25,13 @@\n import javax.persistence.Entity;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n+import javax.persistence.Transient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.syncope.core.AttributeType;\n+import org.syncope.core.validation.UserAttributeBasicValidator;\n+import org.syncope.core.validation.UserAttributeValidator;\n+import org.syncope.core.validation.ValidatorInstantiationException;\n \n @Entity\n public class UserAttributeSchema implements Serializable {\n@@ -41,6 +46,9 @@ public class UserAttributeSchema implements Serializable {\n     private Boolean mandatory;\n     private Boolean multivalue;\n     private String conversionPattern;\n+    private String validatorClass;\n+    @Transient\n+    private UserAttributeValidator validator;\n \n     public UserAttributeSchema() {\n         type = AttributeType.String;\n@@ -80,14 +88,46 @@ public void setMultivalue(Boolean multivalue) {\n         this.multivalue = multivalue;\n     }\n \n-    private boolean isConversionPatternNeeded() {\n-        return type == AttributeType.Date\n-                || type == AttributeType.Double\n-                || type == AttributeType.Long;\n+    public UserAttributeValidator getValidator()\n+            throws ValidatorInstantiationException {\n+\n+        if (validator != null) {\n+            return validator;\n+        }\n+\n+        if (getValidatorClass() != null && getValidatorClass().length() == 0) {\n+            try {\n+                Constructor validatorConstructor =\n+                        Class.forName(getValidatorClass()).getConstructor(\n+                        new Class[]{getClass()});\n+                validator = (UserAttributeValidator) validatorConstructor.newInstance(this);\n+            } catch (Exception e) {\n+                throw new ValidatorInstantiationException(\n+                        \"Could not instantiate validator of type \"\n+                        + getValidatorClass(), e);\n+            }\n+        } else {\n+            try {\n+                validator = new UserAttributeBasicValidator(this);\n+            } catch (ClassNotFoundException cnfe) {\n+                throw new ValidatorInstantiationException(\n+                        \"Could not instantiate basic validator\", cnfe);\n+            }\n+        }\n+\n+        return validator;\n+    }\n+\n+    public String getValidatorClass() {\n+        return validatorClass;\n+    }\n+\n+    public void setValidatorClass(String validatorClass) {\n+        this.validatorClass = validatorClass;\n     }\n \n     public String getConversionPattern() {\n-        if (!isConversionPatternNeeded()) {\n+        if (!getType().isConversionPatternNeeded()) {\n             log.warn(\"Conversion pattern is not needed: \"\n                     + \"this attribute type is \"\n                     + getType());\n@@ -97,7 +137,7 @@ public String getConversionPattern() {\n     }\n \n     public void setConversionPattern(String conversionPattern) {\n-        if (!isConversionPatternNeeded()) {\n+        if (!getType().isConversionPatternNeeded()) {\n             log.warn(\"Conversion pattern will be ignored: \"\n                     + \"this attribute type is \"\n                     + getType());\n@@ -112,23 +152,23 @@ public <T extends Format> T getFormatter(Class<T> reference) {\n         switch (getType()) {\n             case Long:\n                 DecimalFormat longFormatter =\n-                        ((DecimalFormat) getType().getFormatter());\n+                        ((DecimalFormat) getType().getBasicFormatter());\n                 longFormatter.applyPattern(getConversionPattern());\n \n                 result = (T) longFormatter;\n                 break;\n \n             case Double:\n                 DecimalFormat doubleFormatter =\n-                        ((DecimalFormat) getType().getFormatter());\n+                        ((DecimalFormat) getType().getBasicFormatter());\n                 doubleFormatter.applyPattern(getConversionPattern());\n \n                 result = (T) doubleFormatter;\n                 break;\n \n             case Date:\n                 SimpleDateFormat dateFormatter =\n-                        (SimpleDateFormat) getType().getFormatter();\n+                        (SimpleDateFormat) getType().getBasicFormatter();\n                 dateFormatter.applyPattern(getConversionPattern());\n \n                 result = (T) dateFormatter;\n@@ -175,6 +215,12 @@ public boolean equals(Object obj) {\n \n             return false;\n         }\n+        if ((this.validatorClass == null)\n+                ? (other.validatorClass != null)\n+                : !this.validatorClass.equals(other.validatorClass)) {\n+\n+            return false;\n+        }\n         return true;\n     }\n \n@@ -189,6 +235,8 @@ public int hashCode() {\n                 ? this.multivalue.hashCode() : 0);\n         hash = 67 * hash + (this.conversionPattern != null\n                 ? this.conversionPattern.hashCode() : 0);\n+        hash = 67 * hash + (this.validatorClass != null\n+                ? this.validatorClass.hashCode() : 0);\n \n         return hash;\n     }\n@@ -200,7 +248,8 @@ public String toString() {\n                 + \"type=\" + type + \",\"\n                 + \"mandatory=\" + mandatory + \",\"\n                 + \"multivalue=\" + multivalue + \",\"\n-                + \"conversionPattern=\" + conversionPattern\n+                + \"conversionPattern=\" + conversionPattern + \",\"\n+                + \"validatorClass=\" + validatorClass\n                 + \")\";\n     }\n }"},{"sha":"a070e66a4979c93144811192c1c167b4f45515e2","filename":"core/src/main/java/org/syncope/core/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -16,10 +16,12 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.beans.SyncopeUser;\n import org.syncope.core.dao.SyncopeUserDAO;\n \n+@Repository\n public class SyncopeUserDAOImpl extends AbstractDAOImpl\n         implements SyncopeUserDAO {\n "},{"sha":"808239ca9f4daf005930e83ef3ec0d17f1ec5f78","filename":"core/src/main/java/org/syncope/core/dao/impl/UserAttributeDAOImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeDAOImpl.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -16,10 +16,12 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.beans.UserAttribute;\n import org.syncope.core.dao.UserAttributeDAO;\n \n+@Repository\n public class UserAttributeDAOImpl extends AbstractDAOImpl\n         implements UserAttributeDAO {\n "},{"sha":"c0bd75c45f47de1dd6f8ab6576aef6f5ca133b79","filename":"core/src/main/java/org/syncope/core/dao/impl/UserAttributeSchemaDAOImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserAttributeSchemaDAOImpl.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -16,10 +16,12 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.beans.UserAttributeSchema;\n import org.syncope.core.dao.UserAttributeSchemaDAO;\n \n+@Repository\n public class UserAttributeSchemaDAOImpl extends AbstractDAOImpl\n         implements UserAttributeSchemaDAO {\n "},{"sha":"fce1721bcca1edfcd93fcae59c9cf6711ab3018f","filename":"core/src/main/java/org/syncope/core/dao/impl/UserDerivedAttributeDAOImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeDAOImpl.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -16,10 +16,12 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.beans.UserDerivedAttribute;\n import org.syncope.core.dao.UserDerivedAttributeDAO;\n \n+@Repository\n public class UserDerivedAttributeDAOImpl extends AbstractDAOImpl\n         implements UserDerivedAttributeDAO {\n "},{"sha":"ad83c0d9154c87a998588419412bc0161f9f4a10","filename":"core/src/main/java/org/syncope/core/dao/impl/UserDerivedAttributeSchemaDAOImpl.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fdao%2Fimpl%2FUserDerivedAttributeSchemaDAOImpl.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -16,10 +16,12 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.beans.UserDerivedAttributeSchema;\n import org.syncope.core.dao.UserDerivedAttributeSchemaDAO;\n \n+@Repository\n public class UserDerivedAttributeSchemaDAOImpl extends AbstractDAOImpl\n         implements UserDerivedAttributeSchemaDAO {\n "},{"sha":"81da082ddf4b4b0dd5407fbca3814089239326d7","filename":"core/src/main/java/org/syncope/core/validation/EmailAddressValidator.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FEmailAddressValidator.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,47 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.beans.UserAttributeValue;\n+import org.syncope.core.beans.UserAttributeValueAsString;\n+\n+public class EmailAddressValidator extends UserAttributeValidator {\n+\n+    final private static Pattern emailValidationPattern = Pattern.compile(\n+            \"^[\\\\w\\\\-]([\\\\.\\\\w])+[\\\\w]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\",\n+            Pattern.CASE_INSENSITIVE);\n+\n+    public EmailAddressValidator(UserAttributeSchema schema) \n+            throws ClassNotFoundException {\n+        \n+        super(schema);\n+    }\n+\n+    @Override\n+    protected void doValidate(UserAttributeValue userAttributeValue)\n+            throws ValidationFailedException {\n+\n+        CharSequence emailAddress =\n+                ((UserAttributeValueAsString) userAttributeValue).getActualValue();\n+        Matcher matcher = emailValidationPattern.matcher(emailAddress);\n+\n+        if (!matcher.matches()) {\n+            throw new ValidationFailedException(userAttributeValue);\n+        }\n+    }\n+}"},{"sha":"2182777fd85b03a361d602428f85958845b28958","filename":"core/src/main/java/org/syncope/core/validation/ParseException.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FParseException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FParseException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FParseException.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,26 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+public class ParseException extends ValidationException {\n+\n+    public ParseException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    public ParseException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}"},{"sha":"8fe08ebf5df669afd39fc945d30ba137a9bd1598","filename":"core/src/main/java/org/syncope/core/validation/UserAttributeBasicValidator.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FUserAttributeBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FUserAttributeBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FUserAttributeBasicValidator.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,32 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.beans.UserAttributeValue;\n+\n+public class UserAttributeBasicValidator extends UserAttributeValidator {\n+\n+    public UserAttributeBasicValidator(UserAttributeSchema schema) \n+            throws ClassNotFoundException {\n+        \n+        super(schema);\n+    }\n+\n+    @Override\n+    protected void doValidate(UserAttributeValue userAttributeValue)\n+            throws ValidationFailedException {\n+    }\n+}"},{"sha":"3810b607cd86ed719c33bb8e51d9b5f587455e31","filename":"core/src/main/java/org/syncope/core/validation/UserAttributeValidator.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FUserAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FUserAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FUserAttributeValidator.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,149 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import org.syncope.core.beans.UserAttributeSchema;\n+import org.syncope.core.beans.UserAttributeValue;\n+import org.syncope.core.beans.UserAttributeValueAsBoolean;\n+import org.syncope.core.beans.UserAttributeValueAsDate;\n+import org.syncope.core.beans.UserAttributeValueAsDouble;\n+import org.syncope.core.beans.UserAttributeValueAsLong;\n+import org.syncope.core.beans.UserAttributeValueAsString;\n+\n+public abstract class UserAttributeValidator {\n+\n+    final protected UserAttributeSchema schema;\n+    final protected Class userAttributeClass;\n+\n+    public UserAttributeValidator(UserAttributeSchema schema)\n+            throws ClassNotFoundException {\n+\n+        this.schema = schema;\n+        this.userAttributeClass = Class.forName(\n+                schema.getType().getClassName());\n+    }\n+\n+    public UserAttributeValue getValue(Object value)\n+            throws ValidationException {\n+\n+        if (!userAttributeClass.isInstance(value)) {\n+            throw new ParseException(\n+                    new ClassCastException(\"Passed value is instance of \"\n+                    + value.getClass().getName()\n+                    + \", while this attribute has type \"\n+                    + userAttributeClass.getName()));\n+        }\n+\n+        UserAttributeValue result = value instanceof String\n+                ? parseValue((String) value) : parseValue(value);\n+        doValidate(result);\n+\n+        return result;\n+    }\n+\n+    protected UserAttributeValue parseValue(String value)\n+            throws ParseException {\n+\n+        UserAttributeValue result = null;\n+        Exception exception = null;\n+\n+        switch (schema.getType()) {\n+\n+            case String:\n+                result = new UserAttributeValueAsString(value);\n+                break;\n+\n+            case Boolean:\n+                result = new UserAttributeValueAsBoolean(\n+                        Boolean.parseBoolean(value));\n+                break;\n+\n+            case Long:\n+                try {\n+                    result = new UserAttributeValueAsLong(\n+                            Long.valueOf(schema.getFormatter(\n+                            DecimalFormat.class).parse(value).longValue()));\n+                } catch (java.text.ParseException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Double:\n+                try {\n+                    result = new UserAttributeValueAsDouble(\n+                            Double.valueOf(schema.getFormatter(\n+                            DecimalFormat.class).parse(value).doubleValue()));\n+                } catch (java.text.ParseException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+\n+            case Date:\n+                try {\n+                    result = new UserAttributeValueAsDate(\n+                            new Date(schema.getFormatter(\n+                            SimpleDateFormat.class).parse(value).getTime()));\n+                } catch (java.text.ParseException pe) {\n+                    exception = pe;\n+                }\n+                break;\n+        }\n+\n+        if (exception != null) {\n+            throw new ParseException(\n+                    \"While trying to parse '\" + value + \"'\", exception);\n+        }\n+\n+        return result;\n+    }\n+\n+    protected UserAttributeValue parseValue(Object value)\n+            throws ParseException {\n+\n+        UserAttributeValue result = null;\n+\n+        switch (schema.getType()) {\n+\n+            case String:\n+                result = new UserAttributeValueAsString((String) value);\n+                break;\n+\n+            case Boolean:\n+                result = new UserAttributeValueAsBoolean((Boolean) value);\n+                break;\n+\n+            case Long:\n+                result = new UserAttributeValueAsLong((Long) value);\n+                break;\n+\n+            case Double:\n+                result = new UserAttributeValueAsDouble((Double) value);\n+                break;\n+\n+            case Date:\n+                result = new UserAttributeValueAsDate((Date) value);\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    protected abstract void doValidate(\n+            UserAttributeValue userAttributeValue)\n+            throws ValidationFailedException;\n+}"},{"sha":"e1465e8048563ba77a9b198675081c4fd181f848","filename":"core/src/main/java/org/syncope/core/validation/ValidationException.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidationException.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,30 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+public class ValidationException extends Exception {\n+\n+    public ValidationException(String message) {\n+        super(message);\n+    }\n+\n+    public ValidationException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    public ValidationException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}"},{"sha":"c0f6393311b60b97588f7c69e4fad0a3fff9a0b3","filename":"core/src/main/java/org/syncope/core/validation/ValidationFailedException.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidationFailedException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidationFailedException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidationFailedException.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,24 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+import org.syncope.core.beans.UserAttributeValue;\n+\n+public class ValidationFailedException extends ValidationException {\n+\n+    public ValidationFailedException(UserAttributeValue userAttributeValue) {\n+        super(\"Could not validate \" + userAttributeValue);\n+    }\n+}"},{"sha":"aaf4890e0f71cec91f803f95fa7f598b6162cc5d","filename":"core/src/main/java/org/syncope/core/validation/ValidatorInstantiationException.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidatorInstantiationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidatorInstantiationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fvalidation%2FValidatorInstantiationException.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -0,0 +1,22 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.validation;\n+\n+public class ValidatorInstantiationException extends ValidationException {\n+\n+    public ValidatorInstantiationException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}"},{"sha":"7f632e7bf0b4c9544b329b7082bfe7e7506984a7","filename":"core/src/main/resources/applicationContext.xml","status":"modified","additions":26,"deletions":13,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -1,52 +1,65 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:amq=\"http://activemq.apache.org/schema/core\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:p=\"http://www.springframework.org/schema/p\"\n        xmlns:tx=\"http://www.springframework.org/schema/tx\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\">\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://www.springframework.org/schema/tx\n+       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n \n-    <bean id=\"hsqlMemoryDb\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+    <bean id=\"hsqlMemoryDb\"\n+          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n         <property name=\"driverClassName\" value=\"org.hsqldb.jdbcDriver\" />\n         <property name=\"url\" value=\"jdbc:hsqldb:mem:syncopeTest\" />\n         <property name=\"username\" value=\"sa\" />\n         <property name=\"password\" value=\"\" />\n     </bean>\n \n-    <bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n+    <bean id=\"entityManagerFactory\"\n+          class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n         <property name=\"persistenceUnitName\" value=\"syncopePersistenceUnit\"/>\n         <property name=\"dataSource\" ref=\"hsqlMemoryDb\" />\n         <property name=\"jpaVendorAdapter\">\n             <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n                 <property name=\"showSql\" value=\"true\" />\n                 <property name=\"generateDdl\" value=\"true\" />\n-                <property name=\"databasePlatform\" value=\"org.hibernate.dialect.HSQLDialect\" />\n+                <property name=\"databasePlatform\"\n+                          value=\"org.hibernate.dialect.HSQLDialect\" />\n             </bean>\n         </property>\n     </bean>\n \n-    <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n+    <bean id=\"entityManager\"\n+          class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">\n         <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n \n-    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n-        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\" />\n+    <tx:annotation-driven/>\n+    <bean id=\"transactionManager\"\n+          class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n+        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n \n     <!-- DAOs -->\n-    <bean id=\"syncopeUserDAO\" class=\"org.syncope.core.dao.impl.SyncopeUserDAOImpl\">\n+    <bean id=\"syncopeUserDAO\"\n+          class=\"org.syncope.core.dao.impl.SyncopeUserDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-    <bean id=\"userAttributeSchemaDAO\" class=\"org.syncope.core.dao.impl.UserAttributeSchemaDAOImpl\">\n+    <bean id=\"userAttributeSchemaDAO\"\n+          class=\"org.syncope.core.dao.impl.UserAttributeSchemaDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-    <bean id=\"userAttributeDAO\" class=\"org.syncope.core.dao.impl.UserAttributeDAOImpl\">\n+    <bean id=\"userAttributeDAO\"\n+          class=\"org.syncope.core.dao.impl.UserAttributeDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-    <bean id=\"userDerivedAttributeSchemaDAO\" class=\"org.syncope.core.dao.impl.UserDerivedAttributeSchemaDAOImpl\">\n+    <bean id=\"userDerivedAttributeSchemaDAO\"\n+          class=\"org.syncope.core.dao.impl.UserDerivedAttributeSchemaDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n-    <bean id=\"userDerivedAttributeDAO\" class=\"org.syncope.core.dao.impl.UserDerivedAttributeDAOImpl\">\n+    <bean id=\"userDerivedAttributeDAO\"\n+          class=\"org.syncope.core.dao.impl.UserDerivedAttributeDAOImpl\">\n         <property name=\"entityManager\" ref=\"entityManager\" />\n     </bean>\n </beans>\n\\ No newline at end of file"},{"sha":"def025b9ceb9b4720de943ad883c32ad770632f5","filename":"core/src/test/java/org/syncope/core/test/dao/UserAttributeSchemaDAOTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fdao%2FUserAttributeSchemaDAOTest.java?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -50,6 +50,8 @@ public final void testSave() {\n         UserAttributeSchema userAttributeSchema = new UserAttributeSchema();\n         userAttributeSchema.setName(\"email\");\n         userAttributeSchema.setType(AttributeType.String);\n+        userAttributeSchema.setValidatorClass(\n+                \"org.syncope.core.validation.EmailAddressValidator\");\n         userAttributeSchema.setMandatory(false);\n         userAttributeSchema.setMultivalue(true);\n "},{"sha":"e053777a385be49f36225596a3eed5a2735feed3","filename":"core/src/test/resources/dbunitTestData.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a9eb6ebec82cbdd089543ea86cb0f42c3031109f/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FdbunitTestData.xml?ref=a9eb6ebec82cbdd089543ea86cb0f42c3031109f","patch":"@@ -6,16 +6,16 @@\n \n     <UserAttributeSchema name=\"username\" type=\"String\"\n                          mandatory=\"true\" multivalue=\"false\"\n-                         conversionPattern=\"NULL\"/>\n+                         conversionPattern=\"NULL\" validatorClass=\"NULL\"/>\n     <UserAttributeSchema name=\"loginDate\" type=\"Date\"\n                          mandatory=\"false\" multivalue=\"true\"\n-                         conversionPattern=\"yyyy-MM-dd\"/>\n+                         conversionPattern=\"yyyy-MM-dd\" validatorClass=\"NULL\"/>\n     <UserAttributeSchema name=\"firstname\" type=\"String\"\n                          mandatory=\"false\" multivalue=\"false\"\n-                         conversionPattern=\"NULL\"/>\n+                         conversionPattern=\"NULL\" validatorClass=\"NULL\"/>\n     <UserAttributeSchema name=\"surname\" type=\"String\"\n                          mandatory=\"true\" multivalue=\"false\"\n-                         conversionPattern=\"NULL\"/>\n+                         conversionPattern=\"NULL\" validatorClass=\"NULL\"/>\n \n     <UserAttribute id=\"100\" schema_name=\"username\"/>\n     <UserAttribute id=\"200\" schema_name=\"loginDate\"/>"}]}