{"sha":"90e89addb59464ed5eb311ba9a8c698788eaef46","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwZTg5YWRkYjU5NDY0ZWQ1ZWIzMTFiYTlhOGM2OTg3ODhlYWVmNDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-17T15:00:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-17T15:00:07Z"},"message":"[SYNCOPE-349] Introducing support for 'orderby' in user and role search\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1551562 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42b54903a737debe340b149450db8f04d77fc757","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/42b54903a737debe340b149450db8f04d77fc757"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/90e89addb59464ed5eb311ba9a8c698788eaef46","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90e89addb59464ed5eb311ba9a8c698788eaef46","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90e89addb59464ed5eb311ba9a8c698788eaef46","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90e89addb59464ed5eb311ba9a8c698788eaef46/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"21a9a607f663d396f14ecea91d02587ccf8ef5f2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21a9a607f663d396f14ecea91d02587ccf8ef5f2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/21a9a607f663d396f14ecea91d02587ccf8ef5f2"}],"stats":{"total":957,"additions":764,"deletions":193},"files":[{"sha":"060ca0797ced533d1c988bc36167322dc9ba35d4","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -24,6 +24,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.rest.RestClientFactoryBean;\n+import org.apache.syncope.common.search.OrderByClauseBuilder;\n import org.apache.syncope.common.search.RoleFiqlSearchConditionBuilder;\n import org.apache.syncope.common.services.UserSelfService;\n import org.apache.syncope.common.services.WorkflowService;\n@@ -74,6 +75,15 @@ public static RoleFiqlSearchConditionBuilder getRoleSearchConditionBuilder() {\n         return new RoleFiqlSearchConditionBuilder();\n     }\n \n+    /**\n+     * Returns a new instance of <tt>OrderByClauseBuilder</tt>, for assisted building of <tt>orderby</tt> clauses.\n+     *\n+     * @return default instance of <tt>OrderByClauseBuilder</tt>\n+     */\n+    public static OrderByClauseBuilder getOrderByClauseBuilder() {\n+        return new OrderByClauseBuilder();\n+    }\n+\n     /**\n      * Creates an instance of the given service class, with configured content type and authentication.\n      *"},{"sha":"e3af5264881699c023503f8a7085a4b7f041ca0c","filename":"common/src/main/java/org/apache/syncope/common/search/OrderByClauseBuilder.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FOrderByClauseBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FOrderByClauseBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FOrderByClauseBuilder.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.search;\n+\n+/**\n+ * Simple builder for generating <tt>orderby</tt> values.\n+ */\n+public class OrderByClauseBuilder {\n+\n+    private final StringBuilder builder = new StringBuilder();\n+\n+    public OrderByClauseBuilder asc(final String key) {\n+        builder.append(key).append(\" ASC,\");\n+        return this;\n+    }\n+\n+    public OrderByClauseBuilder desc(final String key) {\n+        builder.append(key).append(\" DESC,\");\n+        return this;\n+    }\n+\n+    public String build() {\n+        return builder.deleteCharAt(builder.length() - 1).toString();\n+    }\n+}"},{"sha":"d954e15ae4d22c637b58cdfad58522433a5dc099","filename":"common/src/main/java/org/apache/syncope/common/services/JAXRSService.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FJAXRSService.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -20,6 +20,8 @@\n \n public interface JAXRSService {\n \n+    static final String PARAM_FIQL = \"fiql\";\n+\n     static final String PARAM_PAGE = \"page\";\n \n     static final String DEFAULT_PARAM_PAGE = \"1\";\n@@ -32,4 +34,6 @@ public interface JAXRSService {\n \n     static final int DEFAULT_PARAM_SIZE_VALUE = Integer.valueOf(DEFAULT_PARAM_SIZE);\n \n+    static final String PARAM_ORDERBY = \"orderby\";\n+\n }"},{"sha":"d8305178e4e4f7458f7c076299623d70762df2b5","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"modified","additions":25,"deletions":2,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -104,7 +104,16 @@ PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAG\n      */\r\n     @GET\r\n     @Path(\"search\")\r\n-    PagedResult<RoleTO> search(@QueryParam(\"fiql\") String fiql);\r\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql);\r\n+\r\n+    /**\r\n+     * @param fiql FIQL search expression\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @return Paged list of roles matching the provided FIQL search condition\r\n+     */\r\n+    @GET\r\n+    @Path(\"search\")\r\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql, @QueryParam(PARAM_ORDERBY) String orderBy);\r\n \r\n     /**\r\n      * @param fiql FIQL search expression\r\n@@ -114,10 +123,24 @@ PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAG\n      */\r\n     @GET\r\n     @Path(\"search\")\r\n-    PagedResult<RoleTO> search(@QueryParam(\"fiql\") String fiql,\r\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\r\n             @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n             @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n+    /**\r\n+     * @param fiql FIQL search expression\r\n+     * @param page result page number\r\n+     * @param size number of entries per page\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @return Paged list of roles matching the provided FIQL search condition\r\n+     */\r\n+    @GET\r\n+    @Path(\"search\")\r\n+    PagedResult<RoleTO> search(@QueryParam(PARAM_FIQL) String fiql,\r\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size,\r\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n     /**\r\n      * This method is similar to {@link #read(Long)}, but uses different authentication handling to ensure that a user\r\n      * can read his own roles.\r"},{"sha":"7afe0eb0f4e191ea35b1d13f31e553dcb542cd16","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":43,"deletions":2,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -114,7 +114,24 @@ PagedResult<UserTO> list(\n                 value = \"Returns a paged list of users matching the provided FIQL search condition\"),\n         @Description(target = DocTarget.RETURN, value = \"List of users matching the given condition\")\n     })\n-    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql);\n+    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(PARAM_FIQL) String fiql);\n+\n+    /**\n+     * Returns a paged list of users matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return Paged list of users matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Descriptions({\n+        @Description(target = DocTarget.METHOD,\n+                value = \"Returns a paged list of users matching the provided FIQL search condition\"),\n+        @Description(target = DocTarget.RETURN, value = \"List of users matching the given condition\")\n+    })\n+    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(PARAM_FIQL) String fiql,\n+            @Description(\"list of ordering clauses, separated by comma\") @QueryParam(PARAM_ORDERBY) String orderBy);\n \n     /**\n      * Returns a paged list of users matching the provided FIQL search condition.\n@@ -132,12 +149,36 @@ PagedResult<UserTO> list(\n         @Description(target = DocTarget.RETURN,\n                 value = \"Paged list of users matching the provided FIQL search condition\")\n     })\n-    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(\"fiql\") String fiql,\n+    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(PARAM_FIQL) String fiql,\n             @Description(\"result page number\")\n             @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\n             @Description(\"number of entries per page\")\n             @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\n \n+    /**\n+     * Returns a paged list of users matching the provided FIQL search condition.\n+     *\n+     * @param fiql FIQL search expression\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return Paged list of users matching the provided FIQL search condition\n+     */\n+    @GET\n+    @Path(\"search\")\n+    @Descriptions({\n+        @Description(target = DocTarget.METHOD,\n+                value = \"Returns a paged list of users matching the provided FIQL search condition\"),\n+        @Description(target = DocTarget.RETURN,\n+                value = \"Paged list of users matching the provided FIQL search condition\")\n+    })\n+    PagedResult<UserTO> search(@Description(\"FIQL search expression\") @QueryParam(PARAM_FIQL) String fiql,\n+            @Description(\"result page number\")\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\n+            @Description(\"number of entries per page\")\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size,\n+            @Description(\"list of ordering clauses, separated by comma\") @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n     /**\n      * Creates a new user.\n      *"},{"sha":"f49fc7f628169515dc6bec70e81ec2a2043f42aa","filename":"core/src/main/java/org/apache/syncope/core/init/LoggerLoader.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -22,7 +22,6 @@\n import java.util.Map;\n \n import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.SyncopeConstants;"},{"sha":"3382f3f655d29a21d35dd23b4a73610cf84960a0","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.rest.data.SearchCondConverter;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -151,7 +152,7 @@ private NotificationTask getNotificationTask(\n         if (notification.getRecipients() != null) {\n             recipients.addAll(searchDAO.<SyncopeUser>search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                     SearchCondConverter.convert(notification.getRecipients()),\n-                    AttributableUtil.getInstance(AttributableType.USER)));\n+                    Collections.<OrderByClause>emptyList(), AttributableUtil.getInstance(AttributableType.USER)));\n         }\n \n         if (notification.isSelfAsRecipient() && attributable instanceof SyncopeUser) {"},{"sha":"c885b5455f8cbc5e45e1c2ec2e151791cf61551a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/AttributableSearchDAO.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchDAO.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.util.AttributableUtil;\n \n public interface AttributableSearchDAO extends DAO {\n@@ -45,17 +46,29 @@ public interface AttributableSearchDAO extends DAO {\n     <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n             AttributableUtil attrUtil);\n \n+    /**\n+     * @param adminRoles the set of admin roles owned by the caller\n+     * @param searchCondition the search condition\n+     * @param orderBy list of ordering clauses\n+     * @param attrUtil AttributeUtil\n+     * @param <T> user/role\n+     * @return the list of users/roles matching the given search condition\n+     */\n+    <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n+            List<OrderByClause> orderBy, AttributableUtil attrUtil);\n+\n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n      * @param searchCondition the search condition\n      * @param page position of the first result, start from 1\n      * @param itemsPerPage number of results per page\n+     * @param orderBy list of ordering clauses\n      * @param attrUtil AttributeUtil\n      * @param <T> user/role\n      * @return the list of users/roles matching the given search condition (in the given page)\n      */\n     <T extends AbstractAttributable> List<T> search(Set<Long> adminRoles, SearchCond searchCondition,\n-            int page, int itemsPerPage, AttributableUtil attrUtil);\n+            int page, int itemsPerPage, List<OrderByClause> orderBy, AttributableUtil attrUtil);\n \n     /**\n      * Verify if user/role matches the given search condition."},{"sha":"e554f61a18c1f4322196fe05051572d243e06d9f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":193,"deletions":112,"changes":305,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -31,12 +31,7 @@\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n-import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.dao.search.EntitlementCond;\n-import org.apache.syncope.core.persistence.dao.search.MembershipCond;\n-import org.apache.syncope.core.persistence.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.dao.search.ResourceCond;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -46,6 +41,13 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.EntitlementCond;\n+import org.apache.syncope.core.persistence.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -104,7 +106,8 @@ public int count(final Set<Long> adminRoles, final SearchCond searchCondition, f\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n-        StringBuilder queryString = getQuery(searchCondition, parameters, attrUtil);\n+        SearchSupport svs = new SearchSupport(attrUtil);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, attrUtil, svs);\n \n         // 2. take into account administrative roles\n         queryString.insert(0, \"SELECT u.subject_id FROM (\");\n@@ -130,12 +133,20 @@ public int count(final Set<Long> adminRoles, final SearchCond searchCondition, f\n     public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final SearchCond searchCondition,\n             final AttributableUtil attrUtil) {\n \n-        return search(adminRoles, searchCondition, -1, -1, attrUtil);\n+        return search(adminRoles, searchCondition, Collections.<OrderByClause>emptyList(), attrUtil);\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final SearchCond searchCondition,\n+            final List<OrderByClause> orderBy, final AttributableUtil attrUtil) {\n+\n+        return search(adminRoles, searchCondition, -1, -1, orderBy, attrUtil);\n     }\n \n     @Override\n     public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final SearchCond searchCondition,\n-            final int page, final int itemsPerPage, final AttributableUtil attrUtil) {\n+            final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n+            final AttributableUtil attrUtil) {\n \n         List<T> result = Collections.<T>emptyList();\n \n@@ -144,7 +155,7 @@ public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRole\n \n             if (searchCondition != null && searchCondition.isValid()) {\n                 try {\n-                    result = doSearch(adminRoles, searchCondition, page, itemsPerPage, attrUtil);\n+                    result = doSearch(adminRoles, searchCondition, page, itemsPerPage, orderBy, attrUtil);\n                 } catch (Exception e) {\n                     LOG.error(\"While searching for {}\", attrUtil.getType(), e);\n                 }\n@@ -163,7 +174,8 @@ public <T extends AbstractAttributable> boolean matches(final T user, final Sear\n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n-        StringBuilder queryString = getQuery(searchCondition, parameters, attrUtil);\n+        SearchSupport svs = new SearchSupport(attrUtil);\n+        StringBuilder queryString = getQuery(searchCondition, parameters, attrUtil, svs);\n \n         boolean matches;\n         if (queryString.length() == 0) {\n@@ -211,27 +223,129 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n         }\n     }\n \n+    private StringBuilder buildSelect(final OrderBySupport orderBySupport) {\n+        final StringBuilder select = new StringBuilder(\"SELECT u.subject_id\");\n+\n+        for (OrderBySupport.Item obs : orderBySupport.items) {\n+            select.append(',').append(obs.select);\n+        }\n+        select.append(\" FROM \");\n+\n+        return select;\n+    }\n+\n+    private StringBuilder buildWhere(final OrderBySupport orderBySupport, final AttributableUtil attrUtil) {\n+        final StringBuilder where = new StringBuilder(\" u\");\n+        for (SearchSupport.SearchView searchView : orderBySupport.views) {\n+            where.append(',').append(searchView.name).append(' ').append(searchView.alias);\n+        }\n+        where.append(\" WHERE \");\n+        for (SearchSupport.SearchView searchView : orderBySupport.views) {\n+            where.append(\"u.subject_id=\").append(searchView.alias).append(\".subject_id AND \");\n+        }\n+\n+        for (OrderBySupport.Item obs : orderBySupport.items) {\n+            if (StringUtils.isNotBlank(obs.where)) {\n+                where.append(obs.where).append(\" AND \");\n+            }\n+        }\n+        where.append(\"u.subject_id NOT IN (\");\n+\n+        return where;\n+    }\n+\n+    private StringBuilder buildOrderBy(final OrderBySupport orderBySupport) {\n+        final StringBuilder orderBy = new StringBuilder();\n+\n+        for (OrderBySupport.Item obs : orderBySupport.items) {\n+            orderBy.append(obs.orderBy).append(',');\n+        }\n+        if (!orderBySupport.items.isEmpty()) {\n+            orderBy.insert(0, \" ORDER BY \");\n+            orderBy.deleteCharAt(orderBy.length() - 1);\n+        }\n+\n+        return orderBy;\n+    }\n+\n+    private OrderBySupport parseOrderBy(final AttributableUtil attrUtil, final SearchSupport svs,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        OrderBySupport orderBySupport = new OrderBySupport();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            OrderBySupport.Item obs = new OrderBySupport.Item();\n+\n+            Field attributableField = ReflectionUtils.findField(attrUtil.attributableClass(), clause.getField());\n+            if (attributableField == null) {\n+                AbstractNormalSchema schema = schemaDAO.find(clause.getField(), attrUtil.schemaClass());\n+                if (schema != null) {\n+                    if (schema.isUniqueConstraint()) {\n+                        orderBySupport.views.add(svs.uniqueAttr());\n+\n+                        obs.select = new StringBuilder().\n+                                append(svs.uniqueAttr().alias).append('.').append(svs.fieldName(schema.getType())).\n+                                append(\" AS \").append(clause.getField()).toString();\n+                        obs.where = new StringBuilder().\n+                                append(svs.uniqueAttr().alias).\n+                                append(\".schema_name='\").append(clause.getField()).append(\"'\").toString();\n+                        obs.orderBy = clause.getField() + \" \" + clause.getDirection().name();\n+                    } else {\n+                        orderBySupport.views.add(svs.attr());\n+\n+                        obs.select = new StringBuilder().\n+                                append(svs.attr().alias).append('.').append(svs.fieldName(schema.getType())).\n+                                append(\" AS \").append(clause.getField()).toString();\n+                        obs.where = new StringBuilder().\n+                                append(svs.attr().alias).\n+                                append(\".schema_name='\").append(clause.getField()).append(\"'\").toString();\n+                        obs.orderBy = clause.getField() + \" \" + clause.getDirection().name();\n+                    }\n+                }\n+            } else {\n+                orderBySupport.views.add(svs.field());\n+\n+                obs.select = svs.field().alias + \".\" + clause.getField();\n+                obs.where = StringUtils.EMPTY;\n+                obs.orderBy = svs.field().alias + \".\" + clause.getField() + \" \" + clause.getDirection().name();\n+            }\n+\n+            if (obs.isEmpty()) {\n+                LOG.warn(\"Cannot build any valid clause from {}\", clause);\n+            } else {\n+                orderBySupport.items.add(obs);\n+            }\n+        }\n+\n+        return orderBySupport;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminRoles, final SearchCond nodeCond,\n-            final int page, final int itemsPerPage, final AttributableUtil attrUtil) {\n+    private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminRoles,\n+            final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n+            final AttributableUtil attrUtil) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n \n         // 1. get the query string from the search condition\n-        final StringBuilder queryString = getQuery(nodeCond, parameters, attrUtil);\n+        SearchSupport svs = new SearchSupport(attrUtil);\n+        StringBuilder queryString = getQuery(nodeCond, parameters, attrUtil, svs);\n \n-        // 2. take into account administrative roles\n+        // 2. take into account administrative roles and ordering\n+        OrderBySupport orderBySupport = parseOrderBy(attrUtil, svs, orderBy);\n         if (queryString.charAt(0) == '(') {\n-            queryString.insert(0, \"SELECT u.subject_id FROM \");\n-            queryString.append(\" u WHERE subject_id NOT IN (\");\n+            queryString.insert(0, buildSelect(orderBySupport));\n+            queryString.append(buildWhere(orderBySupport, attrUtil));\n         } else {\n-            queryString.insert(0, \"SELECT u.subject_id FROM (\");\n-            queryString.append(\") u WHERE subject_id NOT IN (\");\n+            queryString.insert(0, buildSelect(orderBySupport).append('('));\n+            queryString.append(')').append(buildWhere(orderBySupport, attrUtil));\n         }\n-        queryString.append(getAdminRolesFilter(adminRoles, attrUtil)).append(\")\");\n+        queryString.\n+                append(getAdminRolesFilter(adminRoles, attrUtil)).append(')').\n+                append(buildOrderBy(orderBySupport));\n \n         // 3. prepare the search query\n-        final Query query = entityManager.createNativeQuery(queryString.toString());\n+        Query query = entityManager.createNativeQuery(queryString.toString());\n \n         // 4. page starts from 1, while setFirtResult() starts from 0\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n@@ -246,43 +360,34 @@ private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminR\n         LOG.debug(\"Native query\\n{}\\nwith parameters\\n{}\", queryString.toString(), parameters);\n \n         // 6. Prepare the result (avoiding duplicates)\n-        final List<Number> subjectIds = new ArrayList<Number>();\n-        final List resultList = query.getResultList();\n-\n-        // fix for HHH-5902 - bug hibernate\n-        if (resultList != null) {\n-            for (Object userId : resultList) {\n-                final Number subjectIdNumber;\n-                if (userId instanceof Object[]) {\n-                    subjectIdNumber = (Number) ((Object[]) userId)[0];\n-                } else {\n-                    subjectIdNumber = (Number) userId;\n-                }\n-                if (!subjectIds.contains(subjectIdNumber)) {\n-                    subjectIds.add(subjectIdNumber);\n-                }\n-            }\n-        }\n+        List<T> result = new ArrayList<T>();\n \n-        final List<T> result = new ArrayList<T>(subjectIds.size());\n+        for (Object subjectId : query.getResultList()) {\n+            long actualId;\n+            if (subjectId instanceof Object[]) {\n+                actualId = ((Number) ((Object[]) subjectId)[0]).longValue();\n+            } else {\n+                actualId = ((Number) subjectId).longValue();\n+            }\n \n-        for (Number subjectId : subjectIds) {\n             T subject = attrUtil.getType() == AttributableType.USER\n-                    ? (T) userDAO.find(subjectId.longValue())\n-                    : (T) roleDAO.find(subjectId.longValue());\n+                    ? (T) userDAO.find(actualId)\n+                    : (T) roleDAO.find(actualId);\n             if (subject == null) {\n                 LOG.error(\"Could not find {} with id {}, even though returned by the native query\",\n                         attrUtil.getType(), subjectId);\n             } else {\n-                result.add(subject);\n+                if (!result.contains(subject)) {\n+                    result.add(subject);\n+                }\n             }\n         }\n \n         return result;\n     }\n \n     private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtil attrUtil, final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder();\n \n@@ -292,37 +397,38 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n             case NOT_LEAF:\n                 if (nodeCond.getMembershipCond() != null && AttributableType.USER == attrUtil.getType()) {\n                     query.append(getQuery(nodeCond.getMembershipCond(), nodeCond.getType() == SearchCond.Type.NOT_LEAF,\n-                            parameters, attrUtil));\n+                            parameters, svs));\n                 }\n                 if (nodeCond.getResourceCond() != null) {\n                     query.append(getQuery(nodeCond.getResourceCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil, svs));\n                 }\n                 if (nodeCond.getEntitlementCond() != null) {\n                     query.append(getQuery(nodeCond.getEntitlementCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 }\n                 if (nodeCond.getAttributeCond() != null) {\n                     query.append(getQuery(nodeCond.getAttributeCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil, svs));\n                 }\n                 if (nodeCond.getAttributableCond() != null) {\n                     query.append(getQuery(nodeCond.getAttributableCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, attrUtil, svs));\n                 }\n                 break;\n \n             case AND:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil)).\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil, svs)).\n                         append(\" AND subject_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil)).\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil, svs)).\n                         append(\")\");\n                 break;\n \n             case OR:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil)).\n-                        append(\" UNION \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil));\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil, svs)).\n+                        append(\" OR subject_id IN ( \").\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil, svs)).\n+                        append(\")\");\n                 break;\n \n             default:\n@@ -332,10 +438,10 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n     }\n \n     private String getQuery(final MembershipCond cond, final boolean not, final List<Object> parameters,\n-            final AttributableUtil attrUtil) {\n+            final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n-                append(attrUtil.searchView()).append(\" WHERE \");\n+                append(svs.field().name).append(\" WHERE \");\n \n         if (not) {\n             query.append(\"subject_id NOT IN (\");\n@@ -344,32 +450,34 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n         }\n \n         query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n-                append(attrUtil.searchView()).append(\"_membership WHERE \").\n+                append(svs.membership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRoleId())).\n                 append(')');\n \n         return query.toString();\n     }\n \n     private String getQuery(final ResourceCond cond, final boolean not, final List<Object> parameters,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtil attrUtil, final SearchSupport svs) {\n \n         final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n-                append(attrUtil.searchView()).append(\" WHERE \");\n+                append(svs.field().name).append(\" WHERE \");\n \n         if (not) {\n             query.append(\"subject_id NOT IN (\");\n         } else {\n             query.append(\"subject_id IN (\");\n         }\n \n-        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").append(attrUtil.searchView()).\n-                append(\"_resource WHERE resource_name=?\").\n+        query.append(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.resource().name).\n+                append(\" WHERE resource_name=?\").\n                 append(setParameter(parameters, cond.getResourceName()));\n \n         if (attrUtil.getType() == AttributableType.USER) {\n-            query.append(\" UNION SELECT DISTINCT subject_id \").append(\"FROM \").append(attrUtil.searchView()).\n-                    append(\"_role_resource WHERE resource_name=?\").\n+            query.append(\" UNION SELECT DISTINCT subject_id FROM \").\n+                    append(svs.roleResource().name).\n+                    append(\" WHERE resource_name=?\").\n                     append(setParameter(parameters, cond.getResourceName()));\n         }\n \n@@ -378,9 +486,12 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n         return query.toString();\n     }\n \n-    private String getQuery(final EntitlementCond cond, final boolean not, final List<Object> parameters) {\n+    private String getQuery(final EntitlementCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n         final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n-                append(\"role_search_entitlements WHERE entitlement_name \");\n+                append(svs.entitlements().name).\n+                append(\" WHERE entitlement_name \");\n         if (not) {\n             query.append(\" NOT \");\n         }\n@@ -391,11 +502,11 @@ private String getQuery(final EntitlementCond cond, final boolean not, final Lis\n \n     private void fillAttributeQuery(final StringBuilder query, final AbstractAttrValue attrValue,\n             final AbstractNormalSchema schema, final AttributeCond cond, final boolean not,\n-            final List<Object> parameters) {\n+            final List<Object> parameters, final SearchSupport svs) {\n \n         String column = (cond instanceof AttributableCond)\n                 ? cond.getSchema()\n-                : \"' AND \" + getFieldName(schema.getType());\n+                : \"' AND \" + svs.fieldName(schema.getType());\n \n         switch (cond.getType()) {\n \n@@ -481,40 +592,8 @@ private void fillAttributeQuery(final StringBuilder query, final AbstractAttrVal\n         }\n     }\n \n-    private String getFieldName(final AttributeSchemaType type) {\n-        String result;\n-\n-        switch (type) {\n-            case Boolean:\n-                result = \"booleanvalue\";\n-                break;\n-\n-            case Date:\n-                result = \"datevalue\";\n-                break;\n-\n-            case Double:\n-                result = \"doublevalue\";\n-                break;\n-\n-            case Long:\n-                result = \"longvalue\";\n-                break;\n-\n-            case String:\n-            case Enum:\n-                result = \"stringvalue\";\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n     private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtil attrUtil, final SearchSupport svs) {\n \n         AbstractNormalSchema schema = schemaDAO.find(cond.getSchema(), attrUtil.schemaClass());\n         if (schema == null) {\n@@ -534,23 +613,25 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n             return EMPTY_ATTR_QUERY;\n         }\n \n-        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").append(attrUtil.searchView());\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \");\n         if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n-            query.append(\" WHERE subject_id NOT IN (SELECT subject_id FROM \").\n-                    append(attrUtil.searchView()).append(\"_null_attr WHERE schema_name='\").\n-                    append(schema.getName()).append(\"')\");\n+            query.append(svs.field().name).\n+                    append(\" WHERE subject_id NOT IN (SELECT subject_id FROM \").\n+                    append(svs.nullAttr().name).\n+                    append(\" WHERE schema_name='\").append(schema.getName()).append(\"')\");\n         } else {\n             if (cond.getType() == AttributeCond.Type.ISNULL) {\n-                query.append(\"_null_attr WHERE schema_name='\").append(schema.getName()).append(\"'\");\n+                query.append(svs.nullAttr().name).\n+                        append(\" WHERE schema_name='\").append(schema.getName()).append(\"'\");\n             } else {\n                 if (schema.isUniqueConstraint()) {\n-                    query.append(\"_unique_attr \");\n+                    query.append(svs.uniqueAttr().name);\n                 } else {\n-                    query.append(\"_attr \");\n+                    query.append(svs.attr().name);\n                 }\n-                query.append(\"WHERE schema_name='\").append(schema.getName());\n+                query.append(\" WHERE schema_name='\").append(schema.getName());\n \n-                fillAttributeQuery(query, attrValue, schema, cond, not, parameters);\n+                fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n             }\n         }\n \n@@ -559,7 +640,7 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n \n     @SuppressWarnings(\"rawtypes\")\n     private String getQuery(final AttributableCond cond, final boolean not, final List<Object> parameters,\n-            final AttributableUtil attrUtil) {\n+            final AttributableUtil attrUtil, final SearchSupport svs) {\n \n         Field attributableField = ReflectionUtils.findField(attrUtil.attributableClass(), cond.getSchema());\n         if (attributableField == null) {\n@@ -624,9 +705,9 @@ private String getQuery(final AttributableCond cond, final boolean not, final Li\n         }\n \n         final StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n-                append(attrUtil.searchView()).append(\" WHERE \");\n+                append(svs.field().name).append(\" WHERE \");\n \n-        fillAttributeQuery(query, attrValue, schema, cond, not, parameters);\n+        fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n \n         return query.toString();\n     }"},{"sha":"d7d87348ffc02df9a91eb47e7068b5e89664acbc","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/OrderBySupport.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FOrderBySupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FOrderBySupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FOrderBySupport.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao.impl;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+class OrderBySupport {\n+\n+    static class Item {\n+\n+        protected String select;\n+\n+        protected String where;\n+\n+        protected String orderBy;\n+\n+        protected boolean isEmpty() {\n+            return (select == null || select.isEmpty())\n+                    && (where == null || where.isEmpty())\n+                    && (orderBy == null || orderBy.isEmpty());\n+        }\n+    }\n+\n+    protected Set<SearchSupport.SearchView> views = new HashSet<SearchSupport.SearchView>();\n+\n+    protected List<Item> items = new ArrayList<Item>();\n+\n+}"},{"sha":"23b36132afe4210f95826323f1d3d30a69f9dad9","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SearchSupport.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSearchSupport.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao.impl;\n+\n+import static org.apache.syncope.common.types.AttributeSchemaType.Double;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.core.util.AttributableUtil;\n+\n+class SearchSupport {\n+\n+    static class SearchView {\n+\n+        protected String alias;\n+\n+        protected String name;\n+\n+        protected SearchView(final String alias, final String name) {\n+            this.alias = alias;\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            return EqualsBuilder.reflectionEquals(this, obj);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return HashCodeBuilder.reflectionHashCode(this);\n+        }\n+    }\n+\n+    private final AttributableType type;\n+\n+    public SearchSupport(final AttributableUtil attrUtil) {\n+        this.type = attrUtil.getType();\n+    }\n+\n+    public String fieldName(final AttributeSchemaType type) {\n+        String result;\n+\n+        switch (type) {\n+            case Boolean:\n+                result = \"booleanvalue\";\n+                break;\n+\n+            case Date:\n+                result = \"datevalue\";\n+                break;\n+\n+            case Double:\n+                result = \"doublevalue\";\n+                break;\n+\n+            case Long:\n+                result = \"longvalue\";\n+                break;\n+\n+            case String:\n+            case Enum:\n+                result = \"stringvalue\";\n+                break;\n+\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    public SearchView field() {\n+        String result = \"\";\n+\n+        switch (type) {\n+            case USER:\n+                result = \"user_search\";\n+                break;\n+\n+            case ROLE:\n+                result = \"role_search\";\n+                break;\n+\n+            case MEMBERSHIP:\n+            default:\n+        }\n+\n+        return new SearchView(\"sv\", result);\n+    }\n+\n+    public SearchView attr() {\n+        return new SearchView(\"sva\", field().name + \"_attr\");\n+    }\n+\n+    public SearchView membership() {\n+        return new SearchView(\"svm\", field().name + \"_membership\");\n+    }\n+\n+    public SearchView nullAttr() {\n+        return new SearchView(\"svna\", field().name + \"_null_attr\");\n+    }\n+\n+    public SearchView resource() {\n+        return new SearchView(\"svr\", field().name + \"_resource\");\n+    }\n+\n+    public SearchView roleResource() {\n+        return new SearchView(\"svrr\", field().name + \"_role_resource\");\n+    }\n+\n+    public SearchView uniqueAttr() {\n+        return new SearchView(\"svua\", field().name + \"_unique_attr\");\n+    }\n+\n+    public SearchView entitlements() {\n+        return new SearchView(\"sve\", field().name + \"_entitlements\");\n+    }\n+}"},{"sha":"b00a7749214f052356d72d8895d5c12117746dab","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":3,"deletions":17,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -180,24 +180,10 @@ public final List<SyncopeUser> findAll(final Set<Long> adminRoles, final int pag\n             query.setMaxResults(itemsPerPage);\n         }\n \n-        List<Number> userIds = new ArrayList<Number>();\n-        List<Object> resultList = query.getResultList();\n-\n-        // fix for HHH-5902 - bug hibernate\n-        if (resultList != null) {\n-            for (Object userId : resultList) {\n-                if (userId instanceof Object[]) {\n-                    userIds.add((Number) ((Object[]) userId)[0]);\n-                } else {\n-                    userIds.add((Number) userId);\n-                }\n-            }\n-        }\n-\n-        List<SyncopeUser> result = new ArrayList<SyncopeUser>(userIds.size());\n+        List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n \n-        for (Number userId : userIds) {\n-            SyncopeUser user = findInternal(userId.longValue());\n+        for (Object userId : query.getResultList()) {\n+            SyncopeUser user = findInternal(((Number) userId).longValue());\n             if (user == null) {\n                 LOG.error(\"Could not find user with id {}, even though returned by the native query\", userId);\n             } else {"},{"sha":"1f372f7bb3d2a2b10c06fc68d0ec2e846708fa97","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/search/OrderByClause.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FOrderByClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FOrderByClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fsearch%2FOrderByClause.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.dao.search;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+\n+public class OrderByClause {\n+\n+    public enum Direction {\n+\n+        ASC,\n+        DESC\n+\n+    }\n+\n+    private String field;\n+\n+    private Direction direction;\n+\n+    public String getField() {\n+        return field;\n+    }\n+\n+    public void setField(final String field) {\n+        this.field = field;\n+    }\n+\n+    public Direction getDirection() {\n+        return direction == null ? Direction.ASC : direction;\n+    }\n+\n+    public void setDirection(final Direction direction) {\n+        this.direction = direction;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+}"},{"sha":"93b2bbbce2bfba11eb8d485cf8d6792a1157e79b","filename":"core/src/main/java/org/apache/syncope/core/report/RoleReportlet.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FRoleReportlet.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.report;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +34,7 @@\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.SearchCondConverter;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -66,7 +68,8 @@ private List<SyncopeRole> getPagedRoles(final int page) {\n             result = roleDAO.findAll();\n         } else {\n             result = searchDAO.search(adminRoleIds, SearchCondConverter.convert(conf.getMatchingCond()),\n-                    page, PAGE_SIZE, AttributableUtil.getInstance(AttributableType.ROLE));\n+                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(),\n+                    AttributableUtil.getInstance(AttributableType.ROLE));\n         }\n \n         return result;"},{"sha":"b47ccfc60fee1f5a43598b226094f1035428a811","filename":"core/src/main/java/org/apache/syncope/core/report/UserReportlet.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FUserReportlet.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.report;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -35,6 +36,7 @@\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.rest.data.SearchCondConverter;\n@@ -74,7 +76,8 @@ private List<SyncopeUser> getPagedUsers(final int page) {\n             result = userDAO.findAll(adminRoleIds, page, PAGE_SIZE);\n         } else {\n             result = searchDAO.search(adminRoleIds, SearchCondConverter.convert(conf.getMatchingCond()),\n-                    page, PAGE_SIZE, AttributableUtil.getInstance(AttributableType.USER));\n+                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(),\n+                    AttributableUtil.getInstance(AttributableType.USER));\n         }\n \n         return result;"},{"sha":"62ad48e97fc816420a3f6f43f76cb0767a52b820","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n@@ -200,10 +201,12 @@ public int searchCount(final SearchCond searchCondition) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public List<RoleTO> search(final SearchCond searchCondition, final int page, final int size) {\n+    public List<RoleTO> search(final SearchCond searchCondition, final int page, final int size,\n+            final List<OrderByClause> orderBy) {\n+\n         final List<SyncopeRole> matchingRoles = searchDAO.search(\n-                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()), searchCondition, page, size,\n-                AttributableUtil.getInstance(AttributableType.ROLE));\n+                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()),\n+                searchCondition, page, size, orderBy, AttributableUtil.getInstance(AttributableType.ROLE));\n \n         final List<RoleTO> result = new ArrayList<RoleTO>(matchingRoles.size());\n         for (SyncopeRole role : matchingRoles) {"},{"sha":"a2678dcde6d3bab828b47e2ae25c705029754d00","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationReporter;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n@@ -153,9 +154,12 @@ public UserTO read(final Long userId) {\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true)\n-    public List<UserTO> search(final SearchCond searchCondition, final int page, final int size) {\n-        final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil.\n-                getOwnedEntitlementNames()), searchCondition, page, size,\n+    public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n+            final List<OrderByClause> orderBy) {\n+\n+        final List<SyncopeUser> matchingUsers = searchDAO.search(\n+                EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()),\n+                searchCondition, page, size, orderBy,\n                 AttributableUtil.getInstance(AttributableType.USER));\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());"},{"sha":"1974023c080eb3b9934364f86eaf21df33df7d4d","filename":"core/src/main/java/org/apache/syncope/core/services/AbstractServiceImpl.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FAbstractServiceImpl.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -19,13 +19,16 @@\n package org.apache.syncope.core.services;\n \n import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n@@ -37,6 +40,7 @@\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.types.Preference;\n import org.apache.syncope.common.types.RESTHeaders;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.rest.data.SearchCondVisitor;\n import org.slf4j.Logger;\n@@ -165,6 +169,30 @@ protected SearchCond getSearchCond(final String fiql) {\n         }\n     }\n \n+    protected List<OrderByClause> getOrderByClauses(final String orderBy) {\n+        if (StringUtils.isBlank(orderBy)) {\n+            return Collections.<OrderByClause>emptyList();\n+        }\n+\n+        List<OrderByClause> result = new ArrayList<OrderByClause>();\n+\n+        for (String clause : orderBy.split(\",\")) {\n+            String[] elems = clause.split(\" \");\n+\n+            if (elems.length > 0 && StringUtils.isNotBlank(elems[0])) {\n+                OrderByClause obc = new OrderByClause();\n+                obc.setField(elems[0].trim());\n+                if (elems.length > 1 && StringUtils.isNotBlank(elems[1])) {\n+                    obc.setDirection(elems[1].trim().equalsIgnoreCase(OrderByClause.Direction.ASC.name())\n+                            ? OrderByClause.Direction.ASC : OrderByClause.Direction.DESC);\n+                }\n+                result.add(obc);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Builds a paged result out of a list of items and additional information.\n      *"},{"sha":"0dd14cd9b2c461532b7b46eab286c2a2d4e79e78","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.to.RoleTO;\r\n import org.apache.syncope.common.types.ResourceAssociationActionType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\r\n import org.apache.syncope.core.persistence.dao.search.SearchCond;\r\n import org.apache.syncope.core.rest.controller.RoleController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n@@ -89,14 +90,26 @@ public RoleTO read(final Long roleId) {\n \r\n     @Override\r\n     public PagedResult<RoleTO> search(final String fiql) {\r\n-        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\r\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public PagedResult<RoleTO> search(final String fiql, final String orderBy) {\r\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\r\n     }\r\n \r\n     @Override\r\n     public PagedResult<RoleTO> search(final String fiql, final int page, final int size) {\r\n+        return search(fiql, page, size, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public PagedResult<RoleTO> search(final String fiql, final int page, final int size, final String orderBy) {\r\n         checkPageSize(page, size);\r\n         SearchCond cond = getSearchCond(fiql);\r\n-        return buildPagedResult(controller.search(cond, page, size), page, size, controller.searchCount(cond));\r\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\r\n+        return buildPagedResult(\r\n+                controller.search(cond, page, size, orderByClauses), page, size, controller.searchCount(cond));\r\n     }\r\n \r\n     @Override\r"},{"sha":"c836514a5159930454de80d528e5e1e98b22be7e","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.services;\n \n+import static org.apache.syncope.common.services.JAXRSService.DEFAULT_PARAM_PAGE_VALUE;\n+import static org.apache.syncope.common.services.JAXRSService.DEFAULT_PARAM_SIZE_VALUE;\n import java.util.List;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.HttpHeaders;\n@@ -34,6 +36,7 @@\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.ResourceAssociationActionType;\n import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.rest.controller.UserController;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -96,14 +99,26 @@ public UserTO read(final Long userId) {\n \n     @Override\n     public PagedResult<UserTO> search(final String fiql) {\n-        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> search(final String fiql, final String orderBy) {\n+        return search(fiql, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n     public PagedResult<UserTO> search(final String fiql, final int page, final int size) {\n+        return search(fiql, page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> search(final String fiql, final int page, final int size, final String orderBy) {\n         checkPageSize(page, size);\n         SearchCond cond = getSearchCond(fiql);\n-        return buildPagedResult(controller.search(cond, page, size), page, size, controller.searchCount(cond));\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(\n+                controller.search(cond, page, size, orderByClauses), page, size, controller.searchCount(cond));\n     }\n \n     @Override"},{"sha":"821ded2d8deefb6fcab7bc30a81f8587f8708419","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n@@ -354,7 +355,8 @@ protected List<Long> search(final SearchCond searchCond, final AttributableUtil\n         final List<Long> result = new ArrayList<Long>();\n \n         final List<AbstractAttributable> subjects = searchDAO.search(\n-                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond, attrUtil);\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCond, Collections.<OrderByClause>emptyList(), attrUtil);\n         for (AbstractAttributable subject : subjects) {\n             result.add(subject.getId());\n         }"},{"sha":"5322d6ec474cf910710954d53c177d44e2d8d8d4","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -722,23 +722,6 @@ public SyncCorrelationRule getCorrelationRule(final SyncPolicySpec policySpec) {\n         return res;\n     }\n \n-    public String searchView() {\n-        String result = \"\";\n-\n-        switch (type) {\n-            case USER:\n-                result = \"user_search\";\n-                break;\n-            case ROLE:\n-                result = \"role_search\";\n-                break;\n-            case MEMBERSHIP:\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     public <T extends AbstractAttributableTO> T newAttributableTO() {\n         T result = null;\n "},{"sha":"0d426797b4d0e09051728a768ada8ffe5c9a9bf8","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttributableSearchTest.java","status":"modified","additions":80,"deletions":27,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -23,6 +23,8 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -35,6 +37,7 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.junit.Test;\n@@ -121,14 +124,14 @@ public void searchWithLikeCondition() {\n \n     @Test\n     public void searchWithNotCondition() {\n-        final AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttributeCond fullnameLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"Giuseppe Verdi\");\n \n-        final SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n+        SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n         assertTrue(cond.isValid());\n \n-        final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(4, users.size());\n@@ -143,14 +146,14 @@ public void searchWithNotCondition() {\n \n     @Test\n     public void searchByBoolean() {\n-        final AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n         coolLeafCond.setExpression(\"true\");\n \n-        final SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n+        SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n-        final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -180,12 +183,14 @@ public void searchByPageAndSize() {\n \n         assertTrue(cond.isValid());\n \n-        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond, 1, 2,\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                cond, 1, 2, Collections.<OrderByClause>emptyList(),\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond, 2, 2,\n+        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                cond, 2, 2, Collections.<OrderByClause>emptyList(),\n                 AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n@@ -255,18 +260,18 @@ public void searchByResource() {\n \n     @Test\n     public void searchByUsernameAndId() {\n-        final AttributableCond usernameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n+        AttributableCond usernameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"rossini\");\n \n-        final AttributableCond idRightCond = new AttributableCond(AttributableCond.Type.LT);\n+        AttributableCond idRightCond = new AttributableCond(AttributableCond.Type.LT);\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n+        SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n \n         assertNotNull(matchingUsers);\n@@ -277,20 +282,20 @@ public void searchByUsernameAndId() {\n \n     @Test\n     public void searchByRolenameAndId() {\n-        final AttributableCond rolenameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n+        AttributableCond rolenameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n         rolenameLeafCond.setSchema(\"name\");\n         rolenameLeafCond.setExpression(\"root\");\n \n-        final AttributableCond idRightCond = new AttributableCond(AttributableCond.Type.LT);\n+        AttributableCond idRightCond = new AttributableCond(AttributableCond.Type.LT);\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(rolenameLeafCond),\n+        SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getLeafCond(rolenameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n         assertTrue(searchCondition.isValid());\n \n-        final List<SyncopeRole> matchingRoles = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<SyncopeRole> matchingRoles = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.ROLE));\n \n         assertNotNull(matchingRoles);\n@@ -301,18 +306,18 @@ public void searchByRolenameAndId() {\n \n     @Test\n     public void searchByUsernameAndFullname() {\n-        final AttributableCond usernameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n+        AttributableCond usernameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n         usernameLeafCond.setExpression(\"rossini\");\n \n-        final AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"Giuseppe V%\");\n \n-        final SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n+        SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        final List<SyncopeUser> matchingUsers =\n+        List<SyncopeUser> matchingUsers =\n                 searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n                         AttributableUtil.getInstance(AttributableType.USER));\n \n@@ -358,19 +363,67 @@ public void searchById() {\n         assertTrue(found);\n     }\n \n+    @Test\n+    public void userOrderBy() {\n+        AttributableCond usernameLeafCond = new AttributableCond(AttributableCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"rossini\");\n+        AttributeCond idRightCond = new AttributeCond(AttributeCond.Type.LIKE);\n+        idRightCond.setSchema(\"fullname\");\n+        idRightCond.setExpression(\"Giuseppe V%\");\n+        SearchCond searchCondition = SearchCond.getOrCond(\n+                SearchCond.getLeafCond(usernameLeafCond), SearchCond.getLeafCond(idRightCond));\n+\n+        List<OrderByClause> orderByClauses = new ArrayList<OrderByClause>();\n+        OrderByClause orderByClause = new OrderByClause();\n+        orderByClause.setField(\"username\");\n+        orderByClause.setDirection(OrderByClause.Direction.DESC);\n+        orderByClauses.add(orderByClause);\n+        orderByClause = new OrderByClause();\n+        orderByClause.setField(\"fullname\");\n+        orderByClause.setDirection(OrderByClause.Direction.ASC);\n+        orderByClauses.add(orderByClause);\n+\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition, Collections.singletonList(orderByClause),\n+                AttributableUtil.getInstance(AttributableType.USER));\n+        assertEquals(searchDAO.count(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition, AttributableUtil.getInstance(AttributableType.USER)),\n+                users.size());\n+    }\n+\n+    @Test\n+    public void roleOrderBy() {\n+        AttributableCond idLeafCond = new AttributableCond(AttributableCond.Type.LIKE);\n+        idLeafCond.setSchema(\"name\");\n+        idLeafCond.setExpression(\"%r\");\n+        SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n+        assertTrue(searchCondition.isValid());\n+\n+        OrderByClause orderByClause = new OrderByClause();\n+        orderByClause.setField(\"name\");\n+\n+        List<SyncopeRole> roles = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition, Collections.singletonList(orderByClause),\n+                AttributableUtil.getInstance(AttributableType.ROLE));\n+        assertEquals(searchDAO.count(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition, AttributableUtil.getInstance(AttributableType.ROLE)),\n+                roles.size());\n+    }\n+\n     @Test\n     public void issue202() {\n-        final ResourceCond ws2 = new ResourceCond();\n+        ResourceCond ws2 = new ResourceCond();\n         ws2.setResourceName(\"ws-target-resource-2\");\n \n-        final ResourceCond ws1 = new ResourceCond();\n+        ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceName(\"ws-target-resource-list-mappings-1\");\n \n-        final SearchCond searchCondition =\n+        SearchCond searchCondition =\n                 SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.isValid());\n \n-        final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(2, users.size());\n@@ -385,14 +438,14 @@ public void issue202() {\n \n     @Test\n     public void issue242() {\n-        final AttributableCond cond = new AttributableCond(AttributeCond.Type.LIKE);\n+        AttributableCond cond = new AttributableCond(AttributeCond.Type.LIKE);\n         cond.setSchema(\"id\");\n         cond.setExpression(\"test%\");\n \n-        final SearchCond searchCondition = SearchCond.getLeafCond(cond);\n+        SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertTrue(users.isEmpty());"},{"sha":"b8d0c4f98e5d838f2342d4e67831ca5accf0b8e9","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90e89addb59464ed5eb311ba9a8c698788eaef46/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=90e89addb59464ed5eb311ba9a8c698788eaef46","patch":"@@ -168,4 +168,16 @@ public void nested() {\n             assertNotNull(user);\n         }\n     }\n+\n+    @Test\n+    public void orderBy() {\n+        final PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"userId\").equalTo(\"*@apache.org\").query(),\n+                SyncopeClient.getOrderByClauseBuilder().asc(\"status\").desc(\"firstname\").build());\n+\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+        for (UserTO user : matchedUsers.getResult()) {\n+            assertNotNull(user);\n+        }\n+    }\n }"}]}