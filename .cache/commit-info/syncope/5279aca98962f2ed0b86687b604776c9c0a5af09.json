{"sha":"5279aca98962f2ed0b86687b604776c9c0a5af09","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyNzlhY2E5ODk2MmYyZWQwYjg2Njg3YjYwNDc3NmM5YzBhNWFmMDk=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-12-22T12:04:42Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-12-22T12:04:42Z"},"message":"[SYNCOPE-156] fix mimetype autocomplition","tree":{"sha":"18746277d75271ab91f6be47e1afa90147bcc2fd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/18746277d75271ab91f6be47e1afa90147bcc2fd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5279aca98962f2ed0b86687b604776c9c0a5af09","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5279aca98962f2ed0b86687b604776c9c0a5af09","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5279aca98962f2ed0b86687b604776c9c0a5af09","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5279aca98962f2ed0b86687b604776c9c0a5af09/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"72e3836cf29e1edeb2c619c2d06ce64252e31f34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72e3836cf29e1edeb2c619c2d06ce64252e31f34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72e3836cf29e1edeb2c619c2d06ce64252e31f34"}],"stats":{"total":104,"additions":66,"deletions":38},"files":[{"sha":"db478447f206954c4048ad7e417ab431071d21ad","filename":"client/console/src/main/java/org/apache/syncope/client/console/init/MIMETypesLoader.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5279aca98962f2ed0b86687b604776c9c0a5af09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5279aca98962f2ed0b86687b604776c9c0a5af09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesLoader.java?ref=5279aca98962f2ed0b86687b604776c9c0a5af09","patch":"@@ -23,6 +23,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.util.io.IOUtils;\n import org.slf4j.Logger;\n@@ -35,19 +36,21 @@ public class MIMETypesLoader {\n     private List<String> mimeTypes;\n \n     public void load() {\n-        Set<String> mediaTypes = new HashSet<>();\n-        this.mimeTypes = new ArrayList<>();\n-        try {\n-            final String mimeTypesFile = IOUtils.toString(getClass().getResourceAsStream(\"/MIMETypes\"));\n-            for (String fileRow : mimeTypesFile.split(\"\\n\")) {\n-                if (StringUtils.isNotBlank(fileRow) && !fileRow.startsWith(\"#\")) {\n-                    mediaTypes.add(fileRow);\n+        if (CollectionUtils.isEmpty(mimeTypes)) {\n+            Set<String> mediaTypes = new HashSet<>();\n+            this.mimeTypes = new ArrayList<>();\n+            try {\n+                final String mimeTypesFile = IOUtils.toString(getClass().getResourceAsStream(\"/MIMETypes\"));\n+                for (String fileRow : mimeTypesFile.split(\"\\n\")) {\n+                    if (StringUtils.isNotBlank(fileRow) && !fileRow.startsWith(\"#\")) {\n+                        mediaTypes.add(fileRow);\n+                    }\n                 }\n+                this.mimeTypes.addAll(mediaTypes);\n+                Collections.sort(this.mimeTypes);\n+            } catch (Exception e) {\n+                LOG.error(\"Error reading file MIMETypes from resources\", e);\n             }\n-            this.mimeTypes.addAll(mediaTypes);\n-            Collections.sort(this.mimeTypes);\n-        } catch (Exception e) {\n-            LOG.error(\"Error reading file MIMETypes from resources\", e);\n         }\n     }\n "},{"sha":"175d7585809faf7fa9ce426e311fe2877b268164","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":31,"deletions":27,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5279aca98962f2ed0b86687b604776c9c0a5af09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5279aca98962f2ed0b86687b604776c9c0a5af09/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=5279aca98962f2ed0b86687b604776c9c0a5af09","patch":"@@ -95,20 +95,20 @@ public PlainSchemaDetails(\n         typeParams.setOutputMarkupPlaceholderTag(true);\n \n         // enum\n-        final AjaxTextFieldPanel enumerationValuesPanel =\n-                new AjaxTextFieldPanel(\"panel\", \"enumerationValues\", new Model<String>(null));\n+        final AjaxTextFieldPanel enumerationValuesPanel = new AjaxTextFieldPanel(\"panel\", \"enumerationValues\",\n+                new Model<String>(null));\n \n         enumerationValues = new MultiFieldPanel.Builder<>(\n                 new ListModel<String>(getEnumValuesAsList(((PlainSchemaTO) schemaTO).getEnumerationValues()))).build(\n-                        \"enumerationValues\",\n-                        \"enumerationValues\",\n-                        enumerationValuesPanel);\n+                \"enumerationValues\",\n+                \"enumerationValues\",\n+                enumerationValuesPanel);\n \n         enumerationKeys = new MultiFieldPanel.Builder<>(\n                 new ListModel<String>(getEnumValuesAsList(((PlainSchemaTO) schemaTO).getEnumerationKeys()))).build(\n-                        \"enumerationKeys\",\n-                        \"enumerationKeys\",\n-                        new AjaxTextFieldPanel(\"panel\", \"enumerationKeys\", new Model<String>()));\n+                \"enumerationKeys\",\n+                \"enumerationKeys\",\n+                new AjaxTextFieldPanel(\"panel\", \"enumerationKeys\", new Model<String>()));\n \n         final WebMarkupContainer enumParams = new WebMarkupContainer(\"enumParams\");\n         enumParams.setOutputMarkupPlaceholderTag(true);\n@@ -137,8 +137,6 @@ public PlainSchemaDetails(\n         final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n                 getString(\"mimeType\"), new PropertyModel<String>(schemaTO, \"mimeType\"));\n \n-        mimeType.setChoices(MIME_TYPES_INITIALIZER.getMimeTypes());\n-\n         final WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n         binaryParams.setOutputMarkupPlaceholderTag(true);\n         binaryParams.add(mimeType);\n@@ -185,26 +183,26 @@ protected List<String> load() {\n         validatorClass.setChoices(validatorsList.getObject());\n         schemaForm.add(validatorClass);\n \n-        final AutoCompleteTextField<String> mandatoryCondition =\n-                new AutoCompleteTextField<String>(\"mandatoryCondition\") {\n-\n-                    private static final long serialVersionUID = -2428903969518079100L;\n+        final AutoCompleteTextField<String> mandatoryCondition\n+                = new AutoCompleteTextField<String>(\"mandatoryCondition\") {\n \n-                    @Override\n-                    protected Iterator<String> getChoices(final String input) {\n-                        List<String> choices = new ArrayList<>();\n+            private static final long serialVersionUID = -2428903969518079100L;\n \n-                        if (Strings.isEmpty(input)) {\n-                            choices = Collections.emptyList();\n-                        } else if (\"true\".startsWith(input.toLowerCase())) {\n-                            choices.add(\"true\");\n-                        } else if (\"false\".startsWith(input.toLowerCase())) {\n-                            choices.add(\"false\");\n-                        }\n+            @Override\n+            protected Iterator<String> getChoices(final String input) {\n+                List<String> choices = new ArrayList<>();\n+\n+                if (Strings.isEmpty(input)) {\n+                    choices = Collections.emptyList();\n+                } else if (\"true\".startsWith(input.toLowerCase())) {\n+                    choices.add(\"true\");\n+                } else if (\"false\".startsWith(input.toLowerCase())) {\n+                    choices.add(\"false\");\n+                }\n \n-                        return choices.iterator();\n-                    }\n-                };\n+                return choices.iterator();\n+            }\n+        };\n         mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -269,6 +267,7 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n \n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n         } else if (AttrSchemaType.Enum.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -292,6 +291,7 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n \n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n         } else if (AttrSchemaType.Encrypted.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -313,6 +313,7 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n \n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n         } else if (AttrSchemaType.Binary.ordinal() == typeOrdinal) {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -335,6 +336,8 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n             cipherAlgorithm.setModelObject(null);\n \n             binaryParams.setVisible(true);\n+            MIME_TYPES_INITIALIZER.load();\n+            mimeType.setChoices(MIME_TYPES_INITIALIZER.getMimeTypes());\n         } else {\n             conversionParams.setVisible(false);\n             conversionPattern.setModelObject(null);\n@@ -358,6 +361,7 @@ private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePan\n \n             binaryParams.setVisible(false);\n             mimeType.setModelObject(null);\n+            mimeType.setChoices(null);\n         }\n     }\n "},{"sha":"60420580cd96c51151cf8027d9ad2563f20dcae9","filename":"client/console/src/main/resources/META-INF/resources/css/syncopeConsole.css","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5279aca98962f2ed0b86687b604776c9c0a5af09/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5279aca98962f2ed0b86687b604776c9c0a5af09/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.css?ref=5279aca98962f2ed0b86687b604776c9c0a5af09","patch":"@@ -358,4 +358,25 @@ div.searchResult{\n \n .logs .box{\n   border-top: 0px !important;\n+}\n+\n+*::after, *::before {\n+    box-sizing: border-box;\n+}\n+\n+\n+.wicket-aa-container {\n+    border-color: #eee;\n+    box-shadow: none;\n+    background-clip: padding-box;\n+    background-color: #fff;\n+    border: 1px solid rgba(0, 0, 0, 0.15);\n+    border-radius: 4px;\n+    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.176);\n+    float: left;\n+    font-size: 14px;\n+    list-style: outside none none;\n+    min-width: 160px;\n+    text-align: left;\n+    max-height: 250px;\n }\n\\ No newline at end of file"}]}