{"sha":"66785322f729cc967d97769ff77dc9956297eb20","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2Nzg1MzIyZjcyOWNjOTY3ZDk3NzY5ZmY3N2RjOTk1NjI5N2ViMjA=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-01-23T13:34:00Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-01-23T13:34:00Z"},"message":"SYNCOPE-279 merged from the branch. I'm going to move the timeout configuration onto the resource ...\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1437387 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"399adb13f7facab332c8dec220162449fbdc3239","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/399adb13f7facab332c8dec220162449fbdc3239"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/66785322f729cc967d97769ff77dc9956297eb20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66785322f729cc967d97769ff77dc9956297eb20","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/66785322f729cc967d97769ff77dc9956297eb20","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66785322f729cc967d97769ff77dc9956297eb20/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"80f3f66919b69355a732789de142a712da263e0a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/80f3f66919b69355a732789de142a712da263e0a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/80f3f66919b69355a732789de142a712da263e0a"}],"stats":{"total":721,"additions":612,"deletions":109},"files":[{"sha":"767d80cb9522e142161d2f261e24d10924aee070","filename":"build-tools/src/main/java/org/apache/syncope/buildtools/ServiceTimeoutServlet.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FServiceTimeoutServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FServiceTimeoutServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fbuildtools%2FServiceTimeoutServlet.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.buildtools;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Just used to verify a connector request timeout.\n+ */\n+public class ServiceTimeoutServlet extends HttpServlet {\n+\n+    /**\n+     * Processes requests for both HTTP\n+     * <code>GET</code> and\n+     * <code>POST</code> methods.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+        response.setContentType(\"text/html;charset=UTF-8\");\n+\n+        try {\n+            Thread.sleep(60000);\n+        } catch (InterruptedException ignore) {\n+            // ignore\n+        }\n+\n+        final PrintWriter out = response.getWriter();\n+\n+        try {\n+            out.println(\"OK\");\n+        } finally {\n+            out.close();\n+        }\n+    }\n+\n+    /**\n+     * Handles the HTTP\n+     * <code>GET</code> method.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    @Override\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+        processRequest(request, response);\n+    }\n+\n+    /**\n+     * Handles the HTTP\n+     * <code>POST</code> method.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    @Override\n+    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n+            throws ServletException, IOException {\n+        processRequest(request, response);\n+    }\n+\n+    /**\n+     * Returns a short description of the servlet.\n+     *\n+     * @return a String containing servlet description\n+     */\n+    @Override\n+    public String getServletInfo() {\n+        return \"Service Timeout\";\n+    }\n+}"},{"sha":"efdb621b2a1021561a044cc6327689ef1720a69a","filename":"build-tools/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -44,8 +44,16 @@ under the License.\n         <servlet-name>ApacheDSRootDseServlet</servlet-name>\n         <servlet-class>org.apache.syncope.buildtools.ApacheDSRootDseServlet</servlet-class>\n     </servlet>\n+    <servlet>\n+        <servlet-name>ServiceTimeoutServlet</servlet-name>\n+        <servlet-class>org.apache.syncope.buildtools.ServiceTimeoutServlet</servlet-class>\n+    </servlet>\n     <servlet-mapping>\n         <servlet-name>ApacheDSRootDseServlet</servlet-name>\n         <url-pattern>/apacheDS</url-pattern>\n     </servlet-mapping>\n+    <servlet-mapping>\n+        <servlet-name>ServiceTimeoutServlet</servlet-name>\n+        <url-pattern>/services/*</url-pattern>\n+    </servlet-mapping>\n </web-app>"},{"sha":"d63e56d02bb4eac7cecbf128b576c8c328ad363c","filename":"core/src/main/java/org/apache/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -103,7 +103,8 @@ public SyncopeConnector createConnectorBean(final ConnInstance connInstance,\n \n         connInstanceClone.setConfiguration(configuration);\n \n-        return new ConnectorFacadeProxy(connInstanceClone, connBundleManager);\n+        return ApplicationContextProvider.getBeanFactory().getBean(\n+                \"connectorFacadeProxy\", ConnectorFacadeProxy.class, connInstanceClone, connBundleManager);\n     }\n \n     /* (non-Javadoc)\n@@ -150,7 +151,7 @@ public void load() {\n             }\n         }\n \n-        LOG.info(\"Done loading {} connectors.\",\n-                ApplicationContextProvider.getBeanFactory().getBeansOfType(ConnectorFacadeProxy.class).size());\n+        LOG.info(\"Done loading {} connectors.\", ApplicationContextProvider.getBeanFactory().getBeansOfType(\n+                ConnectorFacadeProxy.class, false, true).size());\n     }\n }"},{"sha":"e4b0454267c4639bcf5348a27392c98808db9f8d","filename":"core/src/main/java/org/apache/syncope/core/propagation/TimeoutException.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FTimeoutException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FTimeoutException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FTimeoutException.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.propagation;\n+\n+/**\n+ *\n+ * @author fabio\n+ */\n+public class TimeoutException extends RuntimeException {\n+\n+    /**\n+     * Creates a new instance of\n+     * <code>TimeoutException</code> without detail message.\n+     */\n+    public TimeoutException() {\n+    }\n+\n+    /**\n+     * Constructs an instance of\n+     * <code>TimeoutException</code> with the specified detail message.\n+     *\n+     * @param msg the detail message.\n+     */\n+    public TimeoutException(String msg) {\n+        super(msg);\n+    }\n+}"},{"sha":"47c4ff19e80490332a1f15169bf79d3e5a7d6963","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.core.propagation.PropagationHandler;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.TimeoutException;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n@@ -235,19 +236,17 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n             LOG.debug(\"{} not found on external resource: ignoring delete\", task.getAccountId());\n         } else {\n             /*\n-             * We must choose here whether to\n-             *  a. actually delete the provided user from the external resource\n-             *  b. just update the provided user data onto the external resource\n+             * We must choose here whether to a. actually delete the provided user from the external resource b. just\n+             * update the provided user data onto the external resource\n              *\n-             * (a) happens when either there is no user associated with the PropagationTask (this takes\n-             * place when the task is generated via UserController.delete()) or the provided updated\n-             * user hasn't the current resource assigned (when the task is generated via\n-             * UserController.update()).\n+             * (a) happens when either there is no user associated with the PropagationTask (this takes place when the\n+             * task is generated via UserController.delete()) or the provided updated user hasn't the current resource\n+             * assigned (when the task is generated via UserController.update()).\n              *\n-             * (b) happens when the provided updated user does have the current resource assigned\n-             * (when the task is generated via UserController.update()): this basically means that\n-             * before such update, this user used to have the current resource assigned by more than\n-             * one mean (for example, two different memberships with the same resource).\n+             * (b) happens when the provided updated user does have the current resource assigned (when the task is\n+             * generated via UserController.update()): this basically means that before such update, this user used to\n+             * have the current resource assigned by more than one mean (for example, two different memberships with the\n+             * same resource).\n              */\n             AbstractAttributable subject = getSubject(task);\n             if (subject == null || !subject.getResourceNames().contains(task.getResource().getName())) {\n@@ -376,7 +375,8 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n     }\n \n     @Override\n-    public void execute(final Collection<PropagationTask> tasks) throws PropagationException {\n+    public void execute(final Collection<PropagationTask> tasks)\n+            throws PropagationException {\n         execute(tasks, null);\n     }\n \n@@ -443,6 +443,9 @@ protected ConnectorObject getRemoteObject(final PropagationTask task, final Sync\n                     new Uid(accountId),\n                     connector.getOperationOptions(AttributableUtil.getInstance(task.getSubjectType()).\n                     getMappingItems(task.getResource())));\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n         } catch (RuntimeException ignore) {\n             LOG.debug(\"While resolving {}\", accountId, ignore);\n         }"},{"sha":"ac4985800ab49161c771e338467f6360893ca383","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AsyncConnectorFacade.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAsyncConnectorFacade.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.propagation.impl;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+import org.identityconnectors.framework.api.ConnectorFacade;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeInfo;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.Schema;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.scheduling.annotation.AsyncResult;\n+\n+/**\n+ * Intercept calls to ConnectorFacade's methods and check if the corresponding connector instance has been configured to\n+ * allow every single operation: if not, simply do nothing.\n+ */\n+public class AsyncConnectorFacade {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(AsyncConnectorFacade.class);\n+\n+    @Async\n+    public Future<Uid> create(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Set<Attribute> attrs,\n+            final OperationOptions options) {\n+\n+        return new AsyncResult<Uid>(connector.create(objectClass, attrs, options));\n+    }\n+\n+    @Async\n+    public Future<Uid> update(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final Set<Attribute> attrs,\n+            final OperationOptions options) {\n+\n+        return new AsyncResult<Uid>(connector.update(objectClass, uid, attrs, options));\n+    }\n+\n+    @Async\n+    public Future<Uid> delete(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final OperationOptions options) {\n+\n+        connector.delete(objectClass, uid, options);\n+        return new AsyncResult<Uid>(uid);\n+    }\n+\n+    @Async\n+    public Future<SyncToken> getLatestSyncToken(\n+            final ConnectorFacade connector, final ObjectClass objectClass) {\n+\n+        return new AsyncResult<SyncToken>(connector.getLatestSyncToken(objectClass));\n+    }\n+\n+    @Async\n+    public Future<ConnectorObject> getObject(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final OperationOptions options) {\n+\n+        return new AsyncResult<ConnectorObject>(connector.getObject(objectClass, uid, options));\n+    }\n+\n+    @Async\n+    public Future<Attribute> getObjectAttribute(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final OperationOptions options,\n+            final String attributeName) {\n+\n+        Attribute attribute = null;\n+\n+        final ConnectorObject object = connector.getObject(objectClass, uid, options);\n+        if (object == null) {\n+            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n+        } else {\n+            attribute = object.getAttributeByName(attributeName);\n+        }\n+\n+        return new AsyncResult<Attribute>(attribute);\n+    }\n+\n+    @Async\n+    public Future<Set<Attribute>> getObjectAttributes(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final OperationOptions options) {\n+\n+        final Set<Attribute> attributes = new HashSet<Attribute>();\n+\n+        final ConnectorObject object = connector.getObject(objectClass, uid, options);\n+\n+        if (object == null) {\n+            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n+        } else {\n+            for (String attribute : options.getAttributesToGet()) {\n+                attributes.add(object.getAttributeByName(attribute));\n+            }\n+        }\n+\n+        return new AsyncResult<Set<Attribute>>(attributes);\n+    }\n+\n+    @Async\n+    public Future<Set<String>> getSchema(\n+            final ConnectorFacade connector,\n+            final boolean showall) {\n+        final Set<String> resourceSchemaNames = new HashSet<String>();\n+\n+        final Schema schema = connector.schema();\n+\n+        try {\n+            for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n+                for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n+                    if (showall || !isSpecialName(attrInfo.getName())) {\n+                        resourceSchemaNames.add(attrInfo.getName());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            // catch exception in order to manage unpredictable behaviors\n+            LOG.debug(\"Unsupported operation {}\", e);\n+        }\n+\n+        return new AsyncResult<Set<String>>(resourceSchemaNames);\n+    }\n+\n+    @Async\n+    public Future<String> validate(final ConnectorFacade connector) {\n+        connector.validate();\n+        return new AsyncResult<String>(\"OK\");\n+    }\n+\n+    @Async\n+    public Future<String> test(final ConnectorFacade connector) {\n+        connector.test();\n+        return new AsyncResult<String>(\"OK\");\n+    }\n+\n+    private boolean isSpecialName(final String name) {\n+        return (name.startsWith(\"__\") && name.endsWith(\"__\"));\n+    }\n+}"},{"sha":"4ba2d80a6034f03fbd354b5b61a67af15a11f05b","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/ConnectorFacadeProxy.java","status":"modified","additions":200,"deletions":87,"changes":287,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -25,14 +25,18 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n+import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.TimeoutException;\n import org.apache.syncope.core.util.ConnBundleManager;\n import org.apache.syncope.core.util.NotFoundException;\n import org.identityconnectors.common.security.GuardedByteArray;\n@@ -44,16 +48,13 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeInfo;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.ResultsHandler;\n-import org.identityconnectors.framework.common.objects.Schema;\n import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n@@ -62,6 +63,7 @@\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.util.ClassUtils;\n \n /**\n@@ -87,6 +89,23 @@ public class ConnectorFacadeProxy implements SyncopeConnector {\n      */\n     private final ConnInstance activeConnInstance;\n \n+    private int timeout;\n+\n+    @Autowired\n+    private AsyncConnectorFacade asyncFacade;\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @Autowired\n+    private void setTimeout() {\n+        try {\n+            timeout = Integer.parseInt(confDAO.find(\"connectorRequest.timeout\", \"60\").getValue());\n+        } catch (Throwable t) {\n+            timeout = 60;\n+        }\n+    }\n+\n     /**\n      * Use the passed connector instance to build a ConnectorFacade that will be used to make all wrapped calls.\n      *\n@@ -177,7 +196,20 @@ public Uid create(final PropagationMode propagationMode, final ObjectClass objec\n \n             propagationAttempted.add(\"create\");\n \n-            result = connector.create(objectClass, attrs, options);\n+            final Future<Uid> future = asyncFacade.create(connector, objectClass, attrs, options);\n+            try {\n+                result = future.get(timeout, TimeUnit.SECONDS);\n+            } catch (java.util.concurrent.TimeoutException e) {\n+                future.cancel(true);\n+                throw new TimeoutException(\"Request timeout\");\n+            } catch (Exception e) {\n+                LOG.error(\"Connector request execution failure\", e);\n+                if (e.getCause() instanceof RuntimeException) {\n+                    throw (RuntimeException) e.getCause();\n+                } else {\n+                    throw new IllegalArgumentException(e.getCause());\n+                }\n+            }\n         } else {\n             LOG.info(\"Create was attempted, although the connector only has these capabilities: {}. No action.\",\n                     activeConnInstance.getCapabilities());\n@@ -201,7 +233,21 @@ public Uid update(final PropagationMode propagationMode, final ObjectClass objec\n \n             propagationAttempted.add(\"update\");\n \n-            result = connector.update(objectClass, uid, attrs, options);\n+            final Future<Uid> future = asyncFacade.update(connector, objectClass, uid, attrs, options);\n+\n+            try {\n+                result = future.get(timeout, TimeUnit.SECONDS);\n+            } catch (java.util.concurrent.TimeoutException e) {\n+                future.cancel(true);\n+                throw new TimeoutException(\"Request timeout\");\n+            } catch (Exception e) {\n+                LOG.error(\"Connector request execution failure\", e);\n+                if (e.getCause() instanceof RuntimeException) {\n+                    throw (RuntimeException) e.getCause();\n+                } else {\n+                    throw new IllegalArgumentException(e.getCause());\n+                }\n+            }\n         } else {\n             LOG.info(\"Update for {} was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\", uid.getUidValue(), activeConnInstance.\n@@ -224,7 +270,21 @@ public void delete(final PropagationMode propagationMode, final ObjectClass obje\n \n             propagationAttempted.add(\"delete\");\n \n-            connector.delete(objectClass, uid, options);\n+            final Future<Uid> future = asyncFacade.delete(connector, objectClass, uid, options);\n+\n+            try {\n+                future.get(timeout, TimeUnit.SECONDS);\n+            } catch (java.util.concurrent.TimeoutException e) {\n+                future.cancel(true);\n+                throw new TimeoutException(\"Request timeout\");\n+            } catch (Exception e) {\n+                LOG.error(\"Connector request execution failure\", e);\n+                if (e.getCause() instanceof RuntimeException) {\n+                    throw (RuntimeException) e.getCause();\n+                } else {\n+                    throw new IllegalArgumentException(e.getCause());\n+                }\n+            }\n         } else {\n             LOG.info(\"Delete for {} was attempted, although the connector only has these capabilities: {}. No action.\",\n                     uid.getUidValue(), activeConnInstance.getCapabilities());\n@@ -254,7 +314,21 @@ public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n         SyncToken result = null;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SYNC)) {\n-            result = connector.getLatestSyncToken(objectClass);\n+            final Future<SyncToken> future = asyncFacade.getLatestSyncToken(connector, objectClass);\n+\n+            try {\n+                result = future.get(timeout, TimeUnit.SECONDS);\n+            } catch (java.util.concurrent.TimeoutException e) {\n+                future.cancel(true);\n+                throw new TimeoutException(\"Request timeout\");\n+            } catch (Exception e) {\n+                LOG.error(\"Connector request execution failure\", e);\n+                if (e.getCause() instanceof RuntimeException) {\n+                    throw (RuntimeException) e.getCause();\n+                } else {\n+                    throw new IllegalArgumentException(e.getCause());\n+                }\n+            }\n         } else {\n             LOG.info(\"getLatestSyncToken was attempted, although the \"\n                     + \"connector only has these capabilities: {}. No action.\", activeConnInstance.getCapabilities());\n@@ -278,11 +352,11 @@ public ConnectorObject getObject(final ObjectClass objectClass, final Uid uid, f\n     public ConnectorObject getObject(final PropagationMode propagationMode, final ResourceOperation operationType,\n             final ObjectClass objectClass, final Uid uid, final OperationOptions options) {\n \n-        ConnectorObject result = null;\n+        Future<ConnectorObject> future = null;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n             if (operationType == null) {\n-                result = connector.getObject(objectClass, uid, options);\n+                future = asyncFacade.getObject(connector, objectClass, uid, options);\n             } else {\n                 switch (operationType) {\n                     case CREATE:\n@@ -292,7 +366,7 @@ public ConnectorObject getObject(final PropagationMode propagationMode, final Re\n                                 : activeConnInstance.getCapabilities().\n                                 contains(ConnectorCapability.TWO_PHASES_CREATE))) {\n \n-                            result = connector.getObject(objectClass, uid, options);\n+                            future = asyncFacade.getObject(connector, objectClass, uid, options);\n                         }\n                         break;\n                     case UPDATE:\n@@ -302,42 +376,49 @@ public ConnectorObject getObject(final PropagationMode propagationMode, final Re\n                                 : activeConnInstance.getCapabilities().\n                                 contains(ConnectorCapability.TWO_PHASES_UPDATE))) {\n \n-                            result = connector.getObject(objectClass, uid, options);\n+                            future = asyncFacade.getObject(connector, objectClass, uid, options);\n                         }\n                         break;\n                     default:\n-                        result = connector.getObject(objectClass, uid, options);\n+                        future = asyncFacade.getObject(connector, objectClass, uid, options);\n                 }\n             }\n         } else {\n             LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n                     activeConnInstance.getCapabilities());\n         }\n \n-        return result;\n+        try {\n+            return future == null ? null : future.get(timeout, TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n+        } catch (Exception e) {\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n+            }\n+        }\n     }\n \n     /* (non-Javadoc)\n      * @see SyncopeConnector#search(ObjectClass, filter.Filter, OperationOptions)\n      */\n     @Override\n-    public List<ConnectorObject> search(final ObjectClass objectClass, final Filter filter,\n-            final OperationOptions options) {\n+    public List<ConnectorObject> search(\n+            final ObjectClass objectClass, final Filter filter, final OperationOptions options) {\n \n         final List<ConnectorObject> result = new ArrayList<ConnectorObject>();\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n-            connector.search(objectClass, filter, new ResultsHandler() {\n+        search(objectClass, filter, new ResultsHandler() {\n \n-                @Override\n-                public boolean handle(final ConnectorObject obj) {\n-                    return result.add(obj);\n-                }\n-            }, options);\n-        } else {\n-            LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n-        }\n+            @Override\n+            public boolean handle(final ConnectorObject obj) {\n+                return result.add(obj);\n+            }\n+        }, options);\n \n         return result;\n     }\n@@ -346,28 +427,22 @@ public boolean handle(final ConnectorObject obj) {\n      * @see SyncopeConnector#getAllObjects(ObjectClass, SyncResultsHandler, OperationOptions)\n      */\n     @Override\n-    public void getAllObjects(final ObjectClass objectClass, final SyncResultsHandler handler,\n-            final OperationOptions options) {\n+    public void getAllObjects(\n+            final ObjectClass objectClass, final SyncResultsHandler handler, final OperationOptions options) {\n \n-        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n-            connector.search(objectClass, null, new ResultsHandler() {\n+        search(objectClass, null, new ResultsHandler() {\n \n-                @Override\n-                public boolean handle(final ConnectorObject obj) {\n-                    final SyncDeltaBuilder bld = new SyncDeltaBuilder();\n-                    bld.setObject(obj);\n-                    bld.setUid(obj.getUid());\n-                    bld.setDeltaType(SyncDeltaType.CREATE_OR_UPDATE);\n-                    bld.setToken(new SyncToken(\"\"));\n+            @Override\n+            public boolean handle(final ConnectorObject obj) {\n+                final SyncDeltaBuilder bld = new SyncDeltaBuilder();\n+                bld.setObject(obj);\n+                bld.setUid(obj.getUid());\n+                bld.setDeltaType(SyncDeltaType.CREATE_OR_UPDATE);\n+                bld.setToken(new SyncToken(\"\"));\n \n-                    return handler.handle(bld.build());\n-                }\n-            }, options);\n-\n-        } else {\n-            LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n-                    activeConnInstance.getCapabilities());\n-        }\n+                return handler.handle(bld.build());\n+            }\n+        }, options);\n     }\n \n     /* (non-Javadoc)\n@@ -376,17 +451,21 @@ public boolean handle(final ConnectorObject obj) {\n     @Override\n     public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid, final OperationOptions options,\n             final String attributeName) {\n-\n-        Attribute attribute = null;\n-\n-        final ConnectorObject object = connector.getObject(objectClass, uid, options);\n-        if (object == null) {\n-            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n-        } else {\n-            attribute = object.getAttributeByName(attributeName);\n+        final Future<Attribute> future = asyncFacade.getObjectAttribute(connector, objectClass, uid, options,\n+                attributeName);\n+        try {\n+            return future.get(timeout, TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n+        } catch (Exception e) {\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n+            }\n         }\n-\n-        return attribute;\n     }\n \n     /* (non-Javadoc)\n@@ -395,60 +474,98 @@ public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid\n     @Override\n     public Set<Attribute> getObjectAttributes(final ObjectClass objectClass, final Uid uid,\n             final OperationOptions options) {\n-\n-        final Set<Attribute> attributes = new HashSet<Attribute>();\n-\n-        ConnectorObject object = connector.getObject(objectClass, uid, options);\n-        if (object == null) {\n-            LOG.debug(\"Object for '{}' not found\", uid.getUidValue());\n-        } else {\n-            for (String attribute : options.getAttributesToGet()) {\n-                attributes.add(object.getAttributeByName(attribute));\n+        final Future<Set<Attribute>> future = asyncFacade.getObjectAttributes(connector, objectClass, uid, options);\n+        try {\n+            return future.get(timeout, TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n+        } catch (Exception e) {\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n             }\n         }\n-\n-        return attributes;\n     }\n \n     /* (non-Javadoc)\n      * @see SyncopeConnector#getSchema(boolean)\n      */\n     @Override\n     public Set<String> getSchema(final boolean showall) {\n-        final Set<String> resourceSchemaNames = new HashSet<String>();\n-\n-        final Schema schema = connector.schema();\n-\n+        final Future<Set<String>> future = asyncFacade.getSchema(connector, showall);\n         try {\n-            for (ObjectClassInfo info : schema.getObjectClassInfo()) {\n-                for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n-                    if (showall || !isSpecialName(attrInfo.getName())) {\n-                        resourceSchemaNames.add(attrInfo.getName());\n-                    }\n-                }\n-            }\n+            return future.get(timeout, TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n         } catch (Exception e) {\n-            // catch exception in order to manage unpredictable behaviors\n-            LOG.debug(\"Unsupported operation {}\", e);\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n+            }\n         }\n-\n-        return resourceSchemaNames;\n     }\n \n     /* (non-Javadoc)\n      * @see SyncopeConnector#validate()\n      */\n     @Override\n     public void validate() {\n-        connector.validate();\n+        final Future<String> future = asyncFacade.test(connector);\n+        try {\n+            future.get(timeout, TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n+        } catch (Exception e) {\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n+            }\n+        }\n     }\n \n     /* (non-Javadoc)\n      * @see SyncopeConnector#test()\n      */\n     @Override\n     public void test() {\n-        connector.test();\n+        final Future<String> future = asyncFacade.test(connector);\n+        try {\n+            future.get(timeout, TimeUnit.SECONDS);\n+        } catch (java.util.concurrent.TimeoutException e) {\n+            future.cancel(true);\n+            throw new TimeoutException(\"Request timeout\");\n+        } catch (Exception e) {\n+            LOG.error(\"Connector request execution failure\", e);\n+            if (e.getCause() instanceof RuntimeException) {\n+                throw (RuntimeException) e.getCause();\n+            } else {\n+                throw new IllegalArgumentException(e.getCause());\n+            }\n+        }\n+    }\n+\n+    private void search(\n+            final ObjectClass objectClass,\n+            final Filter filter,\n+            final ResultsHandler handler,\n+            final OperationOptions options) {\n+\n+        if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n+            connector.search(objectClass, filter, handler, options);\n+\n+        } else {\n+            LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n+                    activeConnInstance.getCapabilities());\n+        }\n     }\n \n     /* (non-Javadoc)\n@@ -523,10 +640,6 @@ private Object getPropertyValue(final String propType, final List<?> values) {\n         return value;\n     }\n \n-    private boolean isSpecialName(final String name) {\n-        return (name.startsWith(\"__\") && name.endsWith(\"__\"));\n-    }\n-\n     /* (non-Javadoc)\n      * @see SyncopeConnector#toString()\n      */"},{"sha":"464f1ae7e2178fe9f84bc4ecfebba03aefe140e9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -368,8 +368,8 @@ public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connecto\n     public ModelAndView check(final HttpServletResponse response, @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        final SyncopeConnector connector = new ConnectorFacadeProxy(binder.getConnInstance(connectorTO),\n-                bundleManager);\n+        final SyncopeConnector connector =\n+                connLoader.createConnectorBean(binder.getConnInstance(connectorTO), connectorTO.getConfiguration());\n \n         boolean result;\n         try {"},{"sha":"7aff6bdde58c3acd4dfd5807841ed0e7741decbb","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -60,6 +60,21 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n \n @Controller\n@@ -254,7 +269,7 @@ public ModelAndView check(final HttpServletResponse response, @RequestBody final\n \n         final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n \n-        final SyncopeConnector connector = new ConnectorFacadeProxy(connInstance, bundleManager);\n+        final SyncopeConnector connector = connLoader.createConnectorBean(connInstance, connInstance.getConfiguration());\n \n         boolean result;\n         try {"},{"sha":"b4eb06036371d5621689e826762d837dac5e8cc4","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -85,6 +85,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.context.SecurityContextHolder;\n \n public class SyncopeSyncResultHandler implements SyncResultsHandler {\n \n@@ -246,6 +247,7 @@ public Map<Long, String> getRoleOwnerMap() {\n     @Override\n     public boolean handle(final SyncDelta delta) {\n         try {\n+            LOG.error(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAA in handle {}\", SecurityContextHolder.getContext().getAuthentication());\n             results.addAll(doHandle(delta));\n             return true;\n         } catch (JobExecutionException e) {"},{"sha":"81e922cb4dbc22a873e20e6b63fd9b1cef9bec46","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -30,6 +30,7 @@ under the License.\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n+  <SyncopeConf confKey=\"connectorRequest.timeout\" confValue=\"10\"/>\n     \n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"Global Sync Policy\" type=\"GLOBAL_SYNC\"\n           specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>"},{"sha":"8ca7e5d139325d7f8cfede9db8902145e80f2cb9","filename":"core/src/main/resources/securityContext.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -26,6 +26,16 @@ under the License.\n                            http://www.springframework.org/schema/security/spring-security.xsd\">\n \n   <security:global-method-security pre-post-annotations=\"enabled\"/>\n+  \n+  <bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\">\n+    <property name=\"targetClass\" value=\"org.springframework.security.core.context.SecurityContextHolder\"/>\n+    <property name=\"targetMethod\" value=\"setStrategyName\"/> \n+    <property name=\"arguments\">\n+      <list>\n+        <value>MODE_INHERITABLETHREADLOCAL</value>\n+      </list>\n+    </property>\n+  </bean>\n \n   <bean id=\"securityContextRepository\" class='org.springframework.security.web.context.NullSecurityContextRepository'/>\n \n@@ -50,5 +60,4 @@ under the License.\n   <security:authentication-manager>\n     <security:authentication-provider ref=\"syncopeAuthenticationProvider\"/>\n   </security:authentication-manager>\n-\n </beans>"},{"sha":"f9659b7c898fe1f3a64dbe4d2fd7a660454d2823","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -19,11 +19,14 @@ under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\" \n        xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n-                           http://www.springframework.org/schema/context/spring-context.xsd\">\n+                           http://www.springframework.org/schema/context/spring-context.xsd\n+                           http://www.springframework.org/schema/task\n+                           http://www.springframework.org/schema/task/spring-task-3.1.xsd\">\n \n   <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n     <property name=\"locations\">\n@@ -73,6 +76,12 @@ under the License.\n   <bean id=\"notificationManager\" class=\"org.apache.syncope.core.notification.NotificationManager\"/>\n \n   <bean id=\"auditManager\" class=\"org.apache.syncope.core.audit.AuditManager\"/>\n+  \n+  <bean id=\"connectorFacadeProxy\" class=\"org.apache.syncope.core.propagation.impl.ConnectorFacadeProxy\" scope=\"prototype\"/>\n+  <bean id=\"asyncConnFacade\" class=\"org.apache.syncope.core.propagation.impl.AsyncConnectorFacade\" scope=\"singleton\"/>\n+  \n+  <task:annotation-driven executor=\"connectorExecutor\"/>\n+  <task:executor id=\"connectorExecutor\" pool-size=\"10\"/>\n \n   <bean id=\"jexlEngine\" class=\"org.apache.commons.jexl2.JexlEngine\">\n     <property name=\"cache\" value=\"512\"/>"},{"sha":"2cd8a1ab15d467efbc73ca53dcafd4be98e14efe","filename":"core/src/test/java/org/apache/syncope/core/init/ConnInstanceLoaderTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -68,6 +68,6 @@ public void load() {\n \n         assertEquals(resourceDAO.findAll().size(),\n                 ApplicationContextProvider.getApplicationContext().\n-                getBeanNamesForType(SyncopeConnector.class).length);\n+                getBeanNamesForType(SyncopeConnector.class, false, true).length);\n     }\n }"},{"sha":"a9419f19be4c5df051cfa63575ab562760bce956","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -70,7 +70,7 @@ public void findById() {\n     public void findAll() {\n         List<ExternalResource> resources = resourceDAO.findAll();\n         assertNotNull(resources);\n-        assertEquals(17, resources.size());\n+        assertEquals(18, resources.size());\n     }\n \n     @Test"},{"sha":"e5650d20a767a752e92ff7989aa21134ca6bd4db","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -1858,4 +1858,12 @@ public void issueSYNCOPE266() {\n         userTO = userService.update(userTO.getId(), userMod);\n         assertNotNull(userTO);\n     }\n+\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void issueSYNCOPE279() {\n+        UserTO userTO = getUniqueSampleTO(\"syncope279@apache.org\");\n+        userTO.getResources().clear();\n+        userTO.addResource(\"ws-target-resource-3\");\n+        userService.create(userTO);\n+    }\n }"},{"sha":"60fd542429e76de50c457ee73ef7a5573eeb5d9f","filename":"core/src/test/resources/content.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66785322f729cc967d97769ff77dc9956297eb20/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=66785322f729cc967d97769ff77dc9956297eb20","patch":"@@ -30,6 +30,7 @@ under the License.\n   <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n   <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n+  <SyncopeConf confKey=\"connectorRequest.timeout\" confValue=\"10\"/>\n \n   <!-- sample policies -->\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"GLOBAL_SYNC\" specification=\"%3Corg.apache.syncope.common.types.SyncPolicySpec%2F%3E\"/>\n@@ -341,6 +342,10 @@ under the License.\n   <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\"\n                     enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n+  <ExternalResource name=\"ws-target-resource-3\" connector_id=\"102\"\n+                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    xmlConfiguration=\"%3Cset%3E%0A++%3Corg.apache.syncope.common.types.ConnConfProperty%3E%0A++++%3Cschema%3E%0A++++++%3Cname%3Eendpoint%3C/name%3E%0A++++++%3Ctype%3Ejava.lang.String%3C/type%3E%0A++++++%3Crequired%3Etrue%3C/required%3E%0A++++%3C/schema%3E%0A++++%3Cvalues%3E%0A++++++%3Cjava.lang.String%3Ehttp%3A//localhost%3A9080/syncope-build-tools/services/provisioning%3C/java.lang.String%3E%0A++++%3C/values%3E%0A++++%3Coverridable%3Etrue%3C/overridable%3E%0A++%3C/org.apache.syncope.common.types.ConnConfProperty%3E%0A%3C/set%3E\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"\n                     enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n@@ -608,6 +613,11 @@ under the License.\n   <UMappingItem id=\"332\" mapping_id=\"17\" accountid=\"0\" password=\"0\" \n                 extAttrName=\"USERNAME\" intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\"\n                 mandatoryCondition=\"false\" />\n+                \n+  <UMapping id=\"18\" resource_name=\"ws-target-resource-3\"/>\n+  <UMappingItem id=\"333\" mapping_id=\"18\" accountid=\"1\" password=\"0\"\n+                extAttrName=\"__NAME__\" intAttrName=\"fullname\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"true\"/>\n   \n   <Task DTYPE=\"PropagationTask\" id=\"1\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" subjectType=\"USER\" subjectId=\"1\""}]}