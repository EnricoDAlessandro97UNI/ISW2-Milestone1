{"sha":"f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0ZWIxYmZiMjZiOGY0OGM2Yzc2OTYyOWUzZGM5NmNkY2EwN2Q3ZGI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-22T13:16:10Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-22T13:16:10Z"},"message":"Fixing issue with RESTful derived schema access\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246224 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e1330e21faf4bb33fc23039f968749075cc661b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4e1330e21faf4bb33fc23039f968749075cc661b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/comments","author":null,"committer":null,"parents":[{"sha":"d022749c41de90dd5805259235da37f4556bf7d8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d022749c41de90dd5805259235da37f4556bf7d8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d022749c41de90dd5805259235da37f4556bf7d8"}],"stats":{"total":173,"additions":105,"deletions":68},"files":[{"sha":"409d02a7cbaffea5bbe33631b254ba6bf1930c92","filename":"client/src/main/java/org/syncope/types/Comparator.java","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d022749c41de90dd5805259235da37f4556bf7d8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d022749c41de90dd5805259235da37f4556bf7d8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FComparator.java?ref=d022749c41de90dd5805259235da37f4556bf7d8","patch":"@@ -1,20 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.types;\n-\n-public enum Comparator {\n-\n-    EQUAL, LIKE, NOT_EQUAL, NOT_LIKE\n-}"},{"sha":"4430bfe7f221d50b582be526d3f54cd9e0f7af9d","filename":"core/src/main/java/org/syncope/core/persistence/Attributable.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAttributable.java?ref=f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","patch":"@@ -0,0 +1,55 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+\n+public enum Attributable {\n+\n+    USER, ROLE;\n+\n+    public Class getSchemaClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserSchema.class;\n+                break;\n+            case ROLE:\n+                result = RoleSchema.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public Class getDerivedSchemaClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserDerivedSchema.class;\n+                break;\n+            case ROLE:\n+                result = RoleDerivedSchema.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"24cb316f62a4f6e0094e3907493f273d47db7341","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributeValue.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java?ref=f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","patch":"@@ -67,9 +67,8 @@ public <T> T getValue() {\n                 ? longValue : stringValue))));\n     }\n \n-    public abstract <T extends AbstractAttribute> T getAttribute()\n-            throws ClassCastException;\n+    public abstract <T extends AbstractAttribute> T getAttribute();\n \n     public abstract <T extends AbstractAttribute> void setAttribute(\n-            T attribute) throws ClassCastException;\n+            T attribute);\n }"},{"sha":"c13fe697526141aa4e3bc11117316971935089c0","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleDerivedSchema.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java?ref=f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","patch":"@@ -43,10 +43,6 @@ public RoleDerivedSchema() {\n \n     @Override\n     public <T extends AbstractSchema> boolean addSchema(T schema) {\n-        if (!(schema instanceof RoleSchema)) {\n-            throw new ClassCastException();\n-        }\n-\n         return schemas.add((RoleSchema) schema);\n     }\n "},{"sha":"64f9a009f4eebbc0c76e9c56647038da65cf4707","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java?ref=f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","patch":"@@ -17,6 +17,7 @@\n import java.text.DecimalFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import org.springframework.beans.TypeMismatchException;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n@@ -37,10 +38,7 @@ public <T extends AbstractAttributeValue> T getValue(Object value,\n \n         if (!attributeClass.isInstance(value)) {\n             throw new ParseException(\n-                    new ClassCastException(\"Passed value is instance of \"\n-                    + value.getClass().getName()\n-                    + \", while this attribute has type \"\n-                    + attributeClass.getName()));\n+                    new TypeMismatchException(value, attributeClass));\n         }\n \n         attributeValue = value instanceof String"},{"sha":"4d3c6660f32d9789bbe371cd89a1d88d078d0723","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":42,"deletions":33,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","patch":"@@ -14,25 +14,23 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import javax.servlet.http.HttpServletRequest;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.TypeMismatchException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.context.WebApplicationContext;\n-import org.springframework.web.servlet.support.RequestContextUtils;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.to.SchemaTO;\n+import org.syncope.core.persistence.Attributable;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n \n@@ -42,36 +40,44 @@ public class SchemaController {\n \n     private static final Logger log = LoggerFactory.getLogger(\n             SchemaController.class);\n+    private SchemaDAO schemaDAO;\n+    private DerivedSchemaDAO derivedSchemaDAO;\n \n-    private Class getReference(String kind) throws IOException {\n+    @Autowired\n+    public SchemaController(SchemaDAO schemaDAO,\n+            DerivedSchemaDAO derivedSchemaDAO) {\n+\n+        this.schemaDAO = schemaDAO;\n+        this.derivedSchemaDAO = derivedSchemaDAO;\n+    }\n+\n+    private Class getSchemaReference(String kind) {\n         Class result = null;\n \n-        if (\"user\".equals(kind)) {\n-            result = UserSchema.class;\n-        } else if (\"role\".equals(kind)) {\n-            result = RoleSchema.class;\n-        } else {// TODO: throw exception in REST style\n+        try {\n+            result = Attributable.valueOf(kind.toUpperCase()).getSchemaClass();\n+        } catch (Exception e) {\n+            log.error(\"Attributable not supported: \" + kind);\n+            throw new TypeMismatchException(kind, Attributable.class, e);\n         }\n \n         return result;\n     }\n \n+    /*@RequestMapping(method = RequestMethod.POST,\n+    value = \"/attribute/\")\n+    public SchemaTO attributeCreate(HttpServletResponse response,\n+    @RequestBody SchemaTO schemaTO) {\n+    }*/\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/attribute/{kind}/list\")\n     public List<SchemaTO> attributeList(HttpServletRequest request,\n-            @PathVariable(\"kind\") String kind) throws IOException {\n-\n-        Class reference = getReference(kind);\n+            @PathVariable(\"kind\") String kind) {\n \n-        WebApplicationContext webApplicationContext =\n-                RequestContextUtils.getWebApplicationContext(request);\n-\n-        SchemaDAO schemaDAO =\n-                (SchemaDAO) webApplicationContext.getBean(\"schemaDAOImpl\");\n+        Class reference = getSchemaReference(kind);\n \n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n \n-        // TODO: change TO?\n         List<SchemaTO> result = new ArrayList<SchemaTO>(schemas.size());\n         SchemaTO schemaTO = null;\n         String[] ignoreProperties = {\"derivedSchemas\"};\n@@ -92,24 +98,28 @@ public List<SchemaTO> attributeList(HttpServletRequest request,\n         return result;\n     }\n \n+    private Class getDerivedSchemaReference(String kind) {\n+        Class result = null;\n+\n+        try {\n+            result = Attributable.valueOf(kind.toUpperCase()).getDerivedSchemaClass();\n+        } catch (Exception e) {\n+            log.error(\"Attributable not supported: \" + kind);\n+            throw new TypeMismatchException(kind, Attributable.class, e);\n+        }\n+\n+        return result;\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/derivedAttribute/{kind}/list\")\n     public List<DerivedSchemaTO> derivedAttributeList(\n-            HttpServletRequest request, @PathVariable(\"kind\") String kind)\n-            throws IOException {\n+            HttpServletRequest request, @PathVariable(\"kind\") String kind) {\n \n-        Class reference = getReference(kind);\n-\n-        WebApplicationContext webApplicationContext =\n-                RequestContextUtils.getWebApplicationContext(request);\n-\n-        DerivedSchemaDAO derivedAttributeSchemaDAO =\n-                (DerivedSchemaDAO) webApplicationContext.getBean(\n-                \"derivedSchemaDAOImpl\");\n+        Class reference = getDerivedSchemaReference(kind);\n \n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n-                derivedAttributeSchemaDAO.findAll(reference);\n-        // TODO: change TO?\n+                derivedSchemaDAO.findAll(reference);\n         List<DerivedSchemaTO> result =\n                 new ArrayList<DerivedSchemaTO>(\n                 derivedAttributeSchemas.size());\n@@ -122,7 +132,6 @@ public List<DerivedSchemaTO> derivedAttributeList(\n                     derivedAttributeSchemaTO, ignoreProperties);\n \n             for (AbstractSchema schema : derivedSchema.getSchemas()) {\n-\n                 derivedAttributeSchemaTO.addSchema(schema.getName());\n             }\n "},{"sha":"fd35a320e7a780af26e5b5f5a6d939cfd7fa8202","filename":"core/src/test/java/org/syncope/core/rest/test/SchemaTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Ftest%2FSchemaTestITCase.java?ref=f4eb1bfb26b8f48c6c769629e3dc96cdca07d7db","patch":"@@ -24,19 +24,19 @@ public class SchemaTestITCase extends AbstractTestITCase {\n \n     @Test\n     public void attributeList() {\n-        List<SchemaTO> attributeSchemas =\n+        List<SchemaTO> schemas =\n                 restTemplate.getForObject(BASE_URL\n                 + \"schema/attribute/role/list.json\", List.class);\n \n-        assertNotNull(attributeSchemas);\n+        assertNotNull(schemas);\n     }\n \n     @Test\n     public void derivedAttributeList() {\n-        List<DerivedSchemaTO> derivedAttributeSchemas =\n+        List<DerivedSchemaTO> derivedSchemas =\n                 restTemplate.getForObject(BASE_URL\n                 + \"schema/derivedAttribute/user/list.json\", List.class);\n \n-        assertNotNull(derivedAttributeSchemas);\n+        assertNotNull(derivedSchemas);\n     }\n }"}]}