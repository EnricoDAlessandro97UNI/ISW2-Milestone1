{"sha":"2a1d9e8c131cea6c4276e49e951657326fb2c0eb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJhMWQ5ZThjMTMxY2VhNmM0Mjc2ZTQ5ZTk1MTY1NzMyNmZiMmMwZWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-09T14:24:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-160] WA service refactoring","tree":{"sha":"eb469487d6725272e6d0977450d9de4983c4e8a3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/eb469487d6725272e6d0977450d9de4983c4e8a3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a1d9e8c131cea6c4276e49e951657326fb2c0eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a1d9e8c131cea6c4276e49e951657326fb2c0eb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a1d9e8c131cea6c4276e49e951657326fb2c0eb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"95630c4ad32aecb81e976a91e1a34f07a7312c19","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95630c4ad32aecb81e976a91e1a34f07a7312c19","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/95630c4ad32aecb81e976a91e1a34f07a7312c19"}],"stats":{"total":1664,"additions":725,"deletions":939},"files":[{"sha":"524ffc9a31cabd2c7db966ebb44bb90854182722","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/WAClientApp.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FWAClientApp.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -16,15 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.common.lib.wa;\n \n import java.io.Serializable;\n import org.apache.syncope.common.lib.policy.AccessPolicyConf;\n import org.apache.syncope.common.lib.policy.AttrReleasePolicyConf;\n import org.apache.syncope.common.lib.policy.AuthPolicyConf;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n \n-public class RegisteredClientAppTO implements Serializable {\n+public class WAClientApp implements Serializable {\n \n     private static final long serialVersionUID = 6633251825655119506L;\n ","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/RegisteredClientAppTO.java"},{"sha":"988e45015165403fa24496f0604c2f18bad488b0","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/package-info.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2Fpackage-info.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NS)\n+@XmlJavaTypeAdapters({ @XmlJavaTypeAdapter(type = Date.class, value = DateAdapter.class), })\n+package org.apache.syncope.common.lib.wa;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.jaxb.DateAdapter;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapters;\n+\n+import java.util.Date;"},{"sha":"cd55423818ee10adce23243ed3a14960ceeb045f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RegisteredClientAppService.java","status":"removed","additions":0,"deletions":133,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRegisteredClientAppService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRegisteredClientAppService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRegisteredClientAppService.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -1,133 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api.service;\n-\n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n-import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import javax.validation.constraints.NotNull;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.core.MediaType;\n-\n-import java.util.List;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DELETE;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n-import org.apache.syncope.common.lib.types.ClientAppType;\n-\n-/**\n- * REST operations for resgistered client applications.\n- */\n-@Tag(name = \"RegisteredClientApps\")\n-@SecurityRequirements({\n-    @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"registeredClientApps\")\n-public interface RegisteredClientAppService extends JAXRSService {\n-\n-    /**\n-     * Returns a list of all client applications to be registered.\n-     *\n-     * @return list of all client applications.\n-     */\n-    @GET\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<RegisteredClientAppTO> list();\n-\n-    /**\n-     * Returns a client application with matching key.\n-     *\n-     * @param clientAppId registered client application ID to be read\n-     * @return registered client application with matching id\n-     */\n-    @GET\n-    @Path(\"{clientAppId}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    RegisteredClientAppTO read(@NotNull @PathParam(\"clientAppId\") Long clientAppId);\n-\n-    @GET\n-    @Path(\"{clientAppId}/{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    RegisteredClientAppTO read(\n-            @NotNull @PathParam(\"clientAppId\") Long clientAppId,\n-            @NotNull @PathParam(\"type\") ClientAppType type);\n-\n-    /**\n-     * Returns a client application with matching key.\n-     *\n-     * @param name registered client application name to be read\n-     * @return registered client application with matching name\n-     */\n-    @GET\n-    @Path(\"/name/{name}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    RegisteredClientAppTO read(@NotNull @PathParam(\"name\") String name);\n-\n-    @GET\n-    @Path(\"/name/{name}/{type}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    RegisteredClientAppTO read(\n-            @NotNull @PathParam(\"name\") String name,\n-            @NotNull @PathParam(\"type\") ClientAppType type);\n-\n-    /**\n-     * Create a new client app.\n-     *\n-     * @param registeredClientAppTO\n-     * @return Response object featuring Location header of created registered client app\n-     */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"201\",\n-                    description = \"ClientApp successfully created\", headers = {\n-                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"UUID generated for the entity created\"),\n-                @Header(name = HttpHeaders.LOCATION, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"URL of the entity created\") }))\n-    @POST\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull RegisteredClientAppTO registeredClientAppTO);\n-\n-    /**\n-     * Delete client app matching the given key.\n-     *\n-     * @param name name of registered client application to be deleted\n-     * @return\n-     */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @DELETE\n-    @Path(\"{name}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    boolean delete(@NotNull @PathParam(\"name\") String name);\n-\n-}"},{"sha":"16c0521d6ce335d3e1e65acf6ba3b85a6c85fdea","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WAClientAppService.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAClientAppService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAClientAppService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAClientAppService.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+/**\n+ * REST operations for WA.\n+ */\n+@Tag(name = \"WA\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"wa/clientApps\")\n+public interface WAClientAppService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all client applications available.\n+     *\n+     * @return list of all client applications.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    List<WAClientApp> list();\n+\n+    /**\n+     * Returns client application with matching type and clientAppId, if found.\n+     *\n+     * @param clientAppId registered client application ID to be read\n+     * @param type client application type\n+     * @return client application with matching type and clientAppId\n+     */\n+    @GET\n+    @Path(\"{clientAppId}\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    WAClientApp read(@NotNull @PathParam(\"clientAppId\") Long clientAppId, @QueryParam(\"type\") ClientAppType type);\n+\n+    /**\n+     * Returns client application with matching type and name, if found.\n+     *\n+     * @param name registered client application name to be read\n+     * @param type client application type\n+     * @return client application with matching type and name\n+     */\n+    @GET\n+    @Path(\"byName/{name}\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    WAClientApp read(@NotNull @PathParam(\"name\") String name, @QueryParam(\"type\") ClientAppType type);\n+}"},{"sha":"f9b162ae9bb9be2bd7fb781deb9d4d581ff3a837","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/RegisteredClientAppLogic.java","status":"removed","additions":0,"deletions":238,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRegisteredClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRegisteredClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRegisteredClientAppLogic.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -1,238 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.to.AccessPolicyTO;\n-import org.apache.syncope.common.lib.to.AttrReleasePolicyTO;\n-import org.apache.syncope.common.lib.to.AuthPolicyTO;\n-import org.apache.syncope.common.lib.to.ImplementationTO;\n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n-import org.apache.syncope.common.lib.types.AMImplementationType;\n-import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n-import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n-import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n-import org.apache.syncope.core.provisioning.api.data.RegisteredClientAppBinder;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Component\n-public class RegisteredClientAppLogic {\n-\n-    @Autowired\n-    private ImplementationLogic implementationLogic;\n-\n-    @Autowired\n-    private PolicyLogic policyLogic;\n-\n-    @Autowired\n-    private ClientAppDataBinder clientAppDataBinder;\n-\n-    @Autowired\n-    private RegisteredClientAppBinder binder;\n-\n-    @Autowired\n-    private SAML2SPDAO saml2spDAO;\n-\n-    @Autowired\n-    private OIDCRPDAO oidcrpDAO;\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public List<RegisteredClientAppTO> list() {\n-        List<RegisteredClientAppTO> registeredApplications = new ArrayList<>();\n-        Arrays.asList(ClientAppType.values()).forEach(type -> {\n-            switch (type) {\n-                case OIDCRP:\n-                    registeredApplications.addAll(oidcrpDAO.findAll().stream().map(binder::getRegisteredClientAppTO).\n-                            collect(Collectors.toList()));\n-                    break;\n-\n-                case SAML2SP:\n-                default:\n-                    registeredApplications.addAll(saml2spDAO.findAll().stream().map(binder::getRegisteredClientAppTO).\n-                            collect(Collectors.toList()));\n-            }\n-        });\n-\n-        return registeredApplications;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public RegisteredClientAppTO read(final Long clientAppId, final ClientAppType type) {\n-        switch (type) {\n-            case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.findByClientAppId(clientAppId);\n-                if (oidcrp != null) {\n-                    return binder.getRegisteredClientAppTO(oidcrp);\n-                }\n-            case SAML2SP:\n-                SAML2SP saml2sp = saml2spDAO.findByClientAppId(clientAppId);\n-                if (saml2sp != null) {\n-                    return binder.getRegisteredClientAppTO(saml2sp);\n-                }\n-            default:\n-                return null;\n-        }\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public RegisteredClientAppTO read(final Long clientAppId) {\n-        for (ClientAppType type : ClientAppType.values()) {\n-            RegisteredClientAppTO registeredClientAppTO = read(clientAppId, type);\n-            if (registeredClientAppTO != null) {\n-                return registeredClientAppTO;\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public RegisteredClientAppTO read(final String name, final ClientAppType type) {\n-        switch (type) {\n-            case OIDCRP:\n-                OIDCRP oidcrp = oidcrpDAO.findByName(name);\n-                if (oidcrp != null) {\n-                    return binder.getRegisteredClientAppTO(oidcrp);\n-                }\n-            case SAML2SP:\n-                SAML2SP saml2sp = saml2spDAO.findByName(name);\n-                if (saml2sp != null) {\n-                    return binder.getRegisteredClientAppTO(saml2sp);\n-                }\n-            default:\n-                return null;\n-        }\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional(readOnly = true)\n-    public RegisteredClientAppTO read(final String name) {\n-        for (ClientAppType type : ClientAppType.values()) {\n-            RegisteredClientAppTO registeredClientAppTO = read(name, type);\n-            if (registeredClientAppTO != null) {\n-                return registeredClientAppTO;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional\n-    public RegisteredClientAppTO create(final RegisteredClientAppTO registeredClientAppTO) {\n-\n-        AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n-        if (registeredClientAppTO.getAuthPolicyConf() != null) {\n-            String policyName = registeredClientAppTO.getClientAppTO().getName() + \"AuthPolicy\";\n-            ImplementationTO implementationTO = new ImplementationTO();\n-            implementationTO.setKey(policyName);\n-            implementationTO.setEngine(ImplementationEngine.JAVA);\n-            implementationTO.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n-            implementationTO.setBody(POJOHelper.serialize(registeredClientAppTO.getAuthPolicyConf()));\n-\n-            ImplementationTO conf = implementationLogic.create(implementationTO);\n-\n-            authPolicyTO.setConfiguration(conf.getKey());\n-            authPolicyTO = policyLogic.create(PolicyType.AUTH, authPolicyTO);\n-        }\n-\n-        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n-        if (registeredClientAppTO.getAccessPolicyConf() != null) {\n-\n-            String policyName = registeredClientAppTO.getClientAppTO().getName() + \"AccessPolicy\";\n-            ImplementationTO implementationTO = new ImplementationTO();\n-            implementationTO.setKey(policyName);\n-            implementationTO.setEngine(ImplementationEngine.JAVA);\n-            implementationTO.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n-            implementationTO.setBody(POJOHelper.serialize(registeredClientAppTO.getAuthPolicyConf()));\n-\n-            ImplementationTO conf = implementationLogic.create(implementationTO);\n-\n-            accessPolicyTO.setConfiguration(conf.getKey());\n-            accessPolicyTO = policyLogic.create(PolicyType.ACCESS, accessPolicyTO);\n-        }\n-\n-        AttrReleasePolicyTO attrReleasePolicyTO = new AttrReleasePolicyTO();\n-        if (registeredClientAppTO.getAttrReleasePolicyConf() != null) {\n-\n-            String policyName = registeredClientAppTO.getClientAppTO().getName() + \"AttrReleasePolicy\";\n-            ImplementationTO implementationTO = new ImplementationTO();\n-            implementationTO.setKey(policyName);\n-            implementationTO.setEngine(ImplementationEngine.JAVA);\n-            implementationTO.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n-            implementationTO.setBody(POJOHelper.serialize(registeredClientAppTO.getAttrReleasePolicyConf()));\n-\n-            ImplementationTO conf = implementationLogic.create(implementationTO);\n-\n-            attrReleasePolicyTO.setConfiguration(conf.getKey());\n-            attrReleasePolicyTO = policyLogic.create(PolicyType.ATTR_RELEASE, attrReleasePolicyTO);\n-        }\n-\n-        if (registeredClientAppTO.getClientAppTO() instanceof OIDCRPTO) {\n-            OIDCRPTO oidcrpto = OIDCRPTO.class.cast(registeredClientAppTO.getClientAppTO());\n-            oidcrpto.setAccessPolicy(accessPolicyTO.getKey());\n-            oidcrpto.setAttrReleasePolicy(attrReleasePolicyTO.getKey());\n-            oidcrpto.setAuthPolicy(authPolicyTO.getKey());\n-            return binder.getRegisteredClientAppTO(oidcrpDAO.save(clientAppDataBinder.create(oidcrpto)));\n-\n-        } else if (registeredClientAppTO.getClientAppTO() instanceof SAML2SPTO) {\n-            SAML2SPTO saml2spto = SAML2SPTO.class.cast(registeredClientAppTO.getClientAppTO());\n-            saml2spto.setAccessPolicy(accessPolicyTO.getKey());\n-            saml2spto.setAttrReleasePolicy(attrReleasePolicyTO.getKey());\n-            saml2spto.setAuthPolicy(authPolicyTO.getKey());\n-            return binder.getRegisteredClientAppTO(saml2spDAO.save(clientAppDataBinder.create(saml2spto)));\n-        }\n-\n-        return null;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    @Transactional\n-    public boolean delete(final String name) {\n-        ClientAppTO clientAppTO = read(name).getClientAppTO();\n-        if (clientAppTO != null) {\n-            if (clientAppTO instanceof OIDCRPTO) {\n-                oidcrpDAO.delete(clientAppTO.getKey());\n-            } else if (clientAppTO instanceof SAML2SPTO) {\n-                saml2spDAO.delete(clientAppTO.getKey());\n-            }\n-            return true;\n-        }\n-        return false;\n-    }\n-}"},{"sha":"1bb6cd54a6549048a014d6285817a8b28449ba17","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.wa;\n+\n+import static org.apache.syncope.common.lib.types.ClientAppType.OIDCRP;\n+import static org.apache.syncope.common.lib.types.ClientAppType.SAML2SP;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppBinder;\n+\n+@Component\n+public class WAClientAppLogic {\n+\n+    @Autowired\n+    private WAClientAppBinder binder;\n+\n+    @Autowired\n+    private SAML2SPDAO saml2spDAO;\n+\n+    @Autowired\n+    private OIDCRPDAO oidcrpDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<WAClientApp> list() {\n+        List<WAClientApp> clientApps = new ArrayList<>();\n+\n+        Stream.of(ClientAppType.values()).forEach(type -> {\n+            switch (type) {\n+                case OIDCRP:\n+                    clientApps.addAll(oidcrpDAO.findAll().stream().\n+                            map(binder::getWAClientApp).collect(Collectors.toList()));\n+                    break;\n+\n+                case SAML2SP:\n+                default:\n+                    clientApps.addAll(saml2spDAO.findAll().stream().\n+                            map(binder::getWAClientApp).collect(Collectors.toList()));\n+            }\n+        });\n+\n+        return clientApps;\n+    }\n+\n+    private WAClientApp doRead(final Long clientAppId, final ClientAppType type) {\n+        WAClientApp clientApp = null;\n+\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.findByClientAppId(clientAppId);\n+                if (oidcrp != null) {\n+                    clientApp = binder.getWAClientApp(oidcrp);\n+                }\n+                break;\n+\n+            case SAML2SP:\n+                SAML2SP saml2sp = saml2spDAO.findByClientAppId(clientAppId);\n+                if (saml2sp != null) {\n+                    clientApp = binder.getWAClientApp(saml2sp);\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return clientApp;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n+        WAClientApp clientApp = null;\n+        if (type == null) {\n+            for (int i = 0; i < ClientAppType.values().length && clientApp == null; i++) {\n+                clientApp = doRead(clientAppId, ClientAppType.values()[i]);\n+            }\n+        } else {\n+            clientApp = doRead(clientAppId, type);\n+        }\n+\n+        if (clientApp == null) {\n+            throw new NotFoundException(\n+                    \"Client app with clientApp ID \" + clientAppId + \" and type \" + type + \" not found\");\n+        }\n+        return clientApp;\n+    }\n+\n+    private WAClientApp doRead(final String name, final ClientAppType type) {\n+        WAClientApp clientApp = null;\n+\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.findByName(name);\n+                if (oidcrp != null) {\n+                    clientApp = binder.getWAClientApp(oidcrp);\n+                }\n+                break;\n+\n+            case SAML2SP:\n+                SAML2SP saml2sp = saml2spDAO.findByName(name);\n+                if (saml2sp != null) {\n+                    clientApp = binder.getWAClientApp(saml2sp);\n+                }\n+                break;\n+\n+            default:\n+        }\n+\n+        return clientApp;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public WAClientApp read(final String name, final ClientAppType type) {\n+        WAClientApp clientApp = null;\n+        if (type == null) {\n+            for (int i = 0; i < ClientAppType.values().length && clientApp == null; i++) {\n+                clientApp = doRead(name, ClientAppType.values()[i]);\n+            }\n+        } else {\n+            clientApp = doRead(name, type);\n+        }\n+\n+        if (clientApp == null) {\n+            throw new NotFoundException(\"Client app with name \" + name + \" with type \" + type + \" not found\");\n+        }\n+        return clientApp;\n+    }\n+}"},{"sha":"9a858fd5e5e2fcc0567646188c0d9558d837ea3f","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RegisteredClientAppServiceImpl.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRegisteredClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRegisteredClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRegisteredClientAppServiceImpl.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -1,96 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service;\n-\n-import java.net.URI;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-import java.util.List;\n-import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n-import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.RegisteredClientAppService;\n-import org.apache.syncope.core.logic.RegisteredClientAppLogic;\n-\n-@Service\n-public class RegisteredClientAppServiceImpl extends AbstractServiceImpl implements RegisteredClientAppService {\n-\n-    @Autowired\n-    private RegisteredClientAppLogic logic;\n-\n-    @Override\n-    public List<RegisteredClientAppTO> list() {\n-        return logic.list();\n-    }\n-\n-    @Override\n-    public RegisteredClientAppTO read(final Long clientAppId) {\n-        RegisteredClientAppTO registeredClientAppTO = logic.read(clientAppId);\n-        if (registeredClientAppTO == null) {\n-            throw new NotFoundException(\"Client app with clientApp ID \" + clientAppId + \" not found\");\n-        }\n-        return registeredClientAppTO;\n-    }\n-\n-    @Override\n-    public RegisteredClientAppTO read(final Long clientAppId, final ClientAppType type) {\n-        RegisteredClientAppTO registeredClientAppTO = logic.read(clientAppId, type);\n-        if (registeredClientAppTO == null) {\n-            throw new NotFoundException(\"Client app with clientApp ID \" + clientAppId\n-                    + \" with type \" + type + \" not found\");\n-        }\n-        return registeredClientAppTO;\n-    }\n-\n-    @Override\n-    public RegisteredClientAppTO read(final String name) {\n-        RegisteredClientAppTO registeredClientAppTO = logic.read(name);\n-        if (registeredClientAppTO == null) {\n-            throw new NotFoundException(\"Client app with name \" + name + \" not found\");\n-        }\n-        return registeredClientAppTO;\n-    }\n-\n-    @Override\n-    public RegisteredClientAppTO read(final String name, final ClientAppType type) {\n-        RegisteredClientAppTO registeredClientAppTO = logic.read(name, type);\n-        if (registeredClientAppTO == null) {\n-            throw new NotFoundException(\"Client app with name \" + name + \" with type \" + type + \" not found\");\n-        }\n-        return registeredClientAppTO;\n-    }\n-\n-    @Override\n-    public Response create(final RegisteredClientAppTO registeredClientAppTO) {\n-        RegisteredClientAppTO appTO = logic.create(registeredClientAppTO);\n-        URI location = uriInfo.getAbsolutePathBuilder().path(appTO.getClientAppTO().getKey()).build();\n-        return Response.created(location).\n-                header(RESTHeaders.RESOURCE_KEY, appTO.getClientAppTO().getKey()).\n-                build();\n-    }\n-\n-    @Override\n-    public boolean delete(final String name) {\n-        return logic.delete(name);\n-    }\n-\n-}"},{"sha":"fcd9061c571b12c2a41a6ac091746d849eaf9ddd","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAClientAppServiceImpl.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAClientAppServiceImpl.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n+import org.apache.syncope.core.logic.wa.WAClientAppLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class WAClientAppServiceImpl extends AbstractServiceImpl implements WAClientAppService {\n+\n+    @Autowired\n+    private WAClientAppLogic logic;\n+\n+    @Override\n+    public List<WAClientApp> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n+        return logic.read(clientAppId, type);\n+    }\n+\n+    @Override\n+    public WAClientApp read(final String name, final ClientAppType type) {\n+        return logic.read(name, type);\n+    }\n+}"},{"sha":"f61260dd68b9b1faa9e6eabbb72e2ef4be8038fd","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -50,7 +50,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-abstract class AbstractServiceImpl implements JAXRSService {\n+public abstract class AbstractServiceImpl implements JAXRSService {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractServiceImpl.class);\n "},{"sha":"c95f9a68a33b02309d213c845f3e80ef789a34f0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/wa/WAClientAppBinder.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppBinder.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -16,13 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api.data;\n+package org.apache.syncope.core.provisioning.api.data.wa;\n \n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n \n-public interface RegisteredClientAppBinder {\n-\n-    RegisteredClientAppTO getRegisteredClientAppTO(ClientApp clientApp);\n+public interface WAClientAppBinder {\n \n+    WAClientApp getWAClientApp(ClientApp clientApp);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RegisteredClientAppBinder.java"},{"sha":"c8aae5b941be93d8a34a929305a56c07a7028f6c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RegisteredClientAppBinderImpl.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRegisteredClientAppBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRegisteredClientAppBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRegisteredClientAppBinderImpl.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -1,84 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n-import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n-import org.apache.syncope.core.provisioning.api.data.RegisteredClientAppBinder;\n-import org.apache.syncope.core.spring.ImplementationManager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class RegisteredClientAppBinderImpl implements RegisteredClientAppBinder {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(RegisteredClientAppBinder.class);\n-\n-    @Autowired\n-    private ClientAppDataBinder clientAppDataBinder;\n-\n-    @Override\n-    public RegisteredClientAppTO getRegisteredClientAppTO(final ClientApp clientApp) {\n-        RegisteredClientAppTO registeredClientAppTO = new RegisteredClientAppTO();\n-        registeredClientAppTO.setClientAppTO(clientAppDataBinder.getClientAppTO(clientApp));\n-\n-        try {\n-            if (clientApp.getAuthPolicy() != null) {\n-                registeredClientAppTO.setAuthPolicyConf(build((clientApp.getAuthPolicy()).getConfiguration()));\n-            } else if (clientApp.getRealm().getAuthPolicy() != null) {\n-                registeredClientAppTO.\n-                        setAuthPolicyConf(build((clientApp.getRealm().getAuthPolicy()).getConfiguration()));\n-            } else {\n-                registeredClientAppTO.setAuthPolicyConf(null);\n-            }\n-\n-            if (clientApp.getAccessPolicy() != null) {\n-                registeredClientAppTO.setAccessPolicyConf(build((clientApp.getAccessPolicy()).getConfiguration()));\n-            } else if (clientApp.getRealm().getAccessPolicy() != null) {\n-                registeredClientAppTO.setAccessPolicyConf(build((clientApp.getRealm().getAccessPolicy()).\n-                        getConfiguration()));\n-            } else {\n-                registeredClientAppTO.setAccessPolicyConf(null);\n-            }\n-\n-            if (clientApp.getAttrReleasePolicy() != null) {\n-                registeredClientAppTO.setAttrReleasePolicyConf(build((clientApp.getAttrReleasePolicy()).\n-                        getConfiguration()));\n-            } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n-                registeredClientAppTO.setAttrReleasePolicyConf(build((clientApp.getRealm().getAttrReleasePolicy()).\n-                        getConfiguration()));\n-            } else {\n-                registeredClientAppTO.setAttrReleasePolicyConf(null);\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"While building the configuration from an application's policy \", e);\n-        }\n-\n-        return registeredClientAppTO;\n-    }\n-\n-    private <T> T build(final Implementation impl) throws InstantiationException, IllegalAccessException,\n-            ClassNotFoundException {\n-        return ImplementationManager.build(impl);\n-    }\n-}"},{"sha":"5636892f14cb9b21c53c238fe6c0983e9e5961b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppBinderImpl.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppBinderImpl.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data.wa;\n+\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppBinder;\n+\n+@Component\n+public class WAClientAppBinderImpl implements WAClientAppBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(WAClientAppBinder.class);\n+\n+    @Autowired\n+    private ClientAppDataBinder clientAppDataBinder;\n+\n+    @Override\n+    public WAClientApp getWAClientApp(final ClientApp clientApp) {\n+        WAClientApp waClientApp = new WAClientApp();\n+        waClientApp.setClientAppTO(clientAppDataBinder.getClientAppTO(clientApp));\n+\n+        try {\n+            if (clientApp.getAuthPolicy() != null) {\n+                waClientApp.setAuthPolicyConf(\n+                        ImplementationManager.build((clientApp.getAuthPolicy()).getConfiguration()));\n+            } else if (clientApp.getRealm().getAuthPolicy() != null) {\n+                waClientApp.setAuthPolicyConf(\n+                        ImplementationManager.build((clientApp.getRealm().getAuthPolicy()).getConfiguration()));\n+            }\n+\n+            if (clientApp.getAccessPolicy() != null) {\n+                waClientApp.setAccessPolicyConf(\n+                        ImplementationManager.build((clientApp.getAccessPolicy()).getConfiguration()));\n+            } else if (clientApp.getRealm().getAccessPolicy() != null) {\n+                waClientApp.setAccessPolicyConf(\n+                        ImplementationManager.build((clientApp.getRealm().getAccessPolicy()).getConfiguration()));\n+            }\n+\n+            if (clientApp.getAttrReleasePolicy() != null) {\n+                waClientApp.setAttrReleasePolicyConf(\n+                        ImplementationManager.build((clientApp.getAttrReleasePolicy()).getConfiguration()));\n+            } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n+                waClientApp.setAttrReleasePolicyConf(\n+                        ImplementationManager.build((clientApp.getRealm().getAttrReleasePolicy()).getConfiguration()));\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While building the configuration from an application's policy \", e);\n+        }\n+\n+        return waClientApp;\n+    }\n+}"},{"sha":"ee19a6b88b61d28dfae750bb45b2e8fffe433bf5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -793,5 +793,4 @@ protected <T extends ClientAppTO> T createClientApp(final ClientAppType type, fi\n         }\n         return (T) getObject(response.getLocation(), ClientAppService.class, clientAppTO.getClass());\n     }\n-\n }"},{"sha":"42fe26f5c3e692ca20cfd206b272ca0dcafc1aef","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RegisteredClientAppITCase.java","status":"removed","additions":0,"deletions":114,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRegisteredClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRegisteredClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRegisteredClientAppITCase.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -1,114 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-import java.util.List;\n-import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n-import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n-import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.rest.api.service.RegisteredClientAppService;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-\n-public class RegisteredClientAppITCase extends AbstractITCase {\n-\n-    protected static RegisteredClientAppService registeredClientAppService;\n-\n-    @BeforeAll\n-    public static void setup() {\n-        SyncopeClient anonymous = clientFactory.create(\n-                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n-        registeredClientAppService = anonymous.getService(RegisteredClientAppService.class);\n-    }\n-\n-    @Test\n-    public void list() {\n-        createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n-\n-        List<RegisteredClientAppTO> list = registeredClientAppService.list();\n-        assertFalse(list.isEmpty());\n-    }\n-\n-    @Test\n-    public void read() {\n-        OIDCRPTO oidcrpto = createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n-        RegisteredClientAppTO registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getClientAppId());\n-        assertNotNull(registeredOidcClientApp);\n-\n-        registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getClientAppId(),\n-                ClientAppType.OIDCRP);\n-        assertNotNull(registeredOidcClientApp);\n-\n-        registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getName());\n-        assertNotNull(registeredOidcClientApp);\n-\n-        registeredOidcClientApp = registeredClientAppService.read(oidcrpto.getName(), ClientAppType.OIDCRP);\n-        assertNotNull(registeredOidcClientApp);\n-        \n-        \n-        SAML2SPTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n-        RegisteredClientAppTO registeredSamlClientApp=  registeredClientAppService.read(samlspto.getClientAppId());\n-        assertNotNull(registeredSamlClientApp);\n-\n-        registeredSamlClientApp = registeredClientAppService.read(samlspto.getClientAppId(),\n-                ClientAppType.SAML2SP);\n-        assertNotNull(registeredSamlClientApp);\n-\n-        registeredSamlClientApp = registeredClientAppService.read(samlspto.getName());\n-        assertNotNull(registeredSamlClientApp);\n-\n-        registeredSamlClientApp = registeredClientAppService.read(samlspto.getName(), ClientAppType.SAML2SP);\n-        assertNotNull(registeredSamlClientApp);\n-    }\n-\n-\n-    @Test\n-    public void delete() {\n-        SAML2SPTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n-\n-        assertTrue(registeredClientAppService.delete(samlspto.getName()));\n-        try {\n-            clientAppService.read(ClientAppType.SAML2SP, samlspto.getKey());\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    @Test\n-    public void create() {\n-        OIDCRPTO oidcrpto = buildOIDCRP();\n-        RegisteredClientAppTO appTO = new RegisteredClientAppTO();\n-        appTO.setClientAppTO(oidcrpto);\n-\n-        registeredClientAppService.create(appTO);\n-        assertNotNull(registeredClientAppService.read(oidcrpto.getClientAppId()));\n-    }\n-\n-}"},{"sha":"99d4ded73780754cbc4cdf83eaccae2a912b032a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAClientAppITCase.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.List;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n+\n+public class WAClientAppITCase extends AbstractITCase {\n+\n+    private static WAClientAppService waClientAppService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waClientAppService = anonymous.getService(WAClientAppService.class);\n+    }\n+\n+    @Test\n+    public void list() {\n+        createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n+\n+        List<WAClientApp> list = waClientAppService.list();\n+        assertFalse(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void read() {\n+        OIDCRPTO oidcrpto = createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n+        WAClientApp waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n+        assertNotNull(waClientApp);\n+\n+        waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), ClientAppType.OIDCRP);\n+        assertNotNull(waClientApp);\n+\n+        waClientApp = waClientAppService.read(oidcrpto.getName(), null);\n+        assertNotNull(waClientApp);\n+\n+        waClientApp = waClientAppService.read(oidcrpto.getName(), ClientAppType.OIDCRP);\n+        assertNotNull(waClientApp);\n+\n+        SAML2SPTO samlspto = createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n+        WAClientApp registeredSamlClientApp = waClientAppService.read(samlspto.getClientAppId(), null);\n+        assertNotNull(registeredSamlClientApp);\n+\n+        registeredSamlClientApp = waClientAppService.read(samlspto.getClientAppId(), ClientAppType.SAML2SP);\n+        assertNotNull(registeredSamlClientApp);\n+\n+        registeredSamlClientApp = waClientAppService.read(samlspto.getName(), null);\n+        assertNotNull(registeredSamlClientApp);\n+\n+        registeredSamlClientApp = waClientAppService.read(samlspto.getName(), ClientAppType.SAML2SP);\n+        assertNotNull(registeredSamlClientApp);\n+    }\n+}"},{"sha":"c81d1a74f47ec3cfa86889cc996c7d1115fdc22a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/mapper/RegisteredServiceMapper.java","status":"removed","additions":0,"deletions":205,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/95630c4ad32aecb81e976a91e1a34f07a7312c19/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fmapper%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/95630c4ad32aecb81e976a91e1a34f07a7312c19/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fmapper%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fmapper%2FRegisteredServiceMapper.java?ref=95630c4ad32aecb81e976a91e1a34f07a7312c19","patch":"@@ -1,205 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.wa.mapper;\n-\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n-import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n-import org.apache.syncope.common.lib.to.RegisteredClientAppTO;\n-import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n-import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n-import org.apache.syncope.common.lib.types.OIDCSubjectType;\n-import org.apache.syncope.common.lib.types.SAML2SPNameId;\n-import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n-import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n-import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n-import org.apereo.cas.services.OidcRegisteredService;\n-import org.apereo.cas.services.RegisteredService;\n-import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n-import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n-import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n-import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n-import org.apereo.cas.support.saml.services.SamlRegisteredService;\n-\n-public class RegisteredServiceMapper {\n-\n-    public RegisteredService toRegisteredService(final RegisteredClientAppTO clientApp) {\n-\n-        DefaultRegisteredServiceAuthenticationPolicy authenticationPolicy =\n-                new DefaultRegisteredServiceAuthenticationPolicy();\n-        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n-                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n-        criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) clientApp.getAuthPolicyConf().getCriteria()).isAll());\n-        authenticationPolicy.setCriteria(criteria);\n-\n-        RegisteredServiceAccessStrategy accessStrategy =\n-                new DefaultRegisteredServiceAccessStrategy(\n-                        clientApp.getAccessPolicyConf().isEnabled(), clientApp.getAccessPolicyConf().isSsoEnabled());\n-        accessStrategy.getRequiredAttributes().putAll(clientApp.getAccessPolicyConf().getRequiredAttributes());\n-\n-        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n-        if (clientApp.getAttrReleasePolicyConf() != null\n-                && clientApp.getAttrReleasePolicyConf() instanceof AllowedAttrReleasePolicyConf\n-                && !((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).\n-                        getAllowedAttributes().isEmpty()) {\n-            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n-            ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes();\n-            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).getAllowedAttributes().addAll(\n-                    ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes());\n-        } else {\n-            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n-        }\n-\n-        if (clientApp.getClientAppTO() instanceof OIDCRPTO) {\n-            OIDCRPTO rp = OIDCRPTO.class.cast(clientApp.getClientAppTO());\n-            OidcRegisteredService registeredService = new OidcRegisteredService();\n-\n-            String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n-            registeredService.setServiceId(redirectURIs);\n-            registeredService.setName(rp.getName());\n-            registeredService.setDescription(rp.getDescription());\n-            registeredService.setAccessStrategy(accessStrategy);\n-            registeredService.setAuthenticationPolicy(authenticationPolicy);\n-            registeredService.setAttributeReleasePolicy(attributeReleasePolicy);\n-\n-            registeredService.setClientId(rp.getClientId());\n-            registeredService.setClientSecret(rp.getClientSecret());\n-            registeredService.setSignIdToken(rp.isSignIdToken());\n-            registeredService.setJwks(rp.getJwks());\n-            registeredService.setSubjectType(rp.getSubjectType().name());\n-            registeredService.setRedirectUrl(redirectURIs);\n-            registeredService.setSupportedGrantTypes((HashSet<String>) rp.getSupportedGrantTypes());\n-            registeredService.setSupportedResponseTypes((HashSet<String>) rp.getSupportedResponseTypes());\n-\n-            return registeredService;\n-        } else if (clientApp.getClientAppTO() instanceof SAML2SPTO) {\n-            SAML2SPTO sp = SAML2SPTO.class.cast(clientApp.getClientAppTO());\n-            SamlRegisteredService registeredService = new SamlRegisteredService();\n-\n-            registeredService.setServiceId(sp.getEntityId());\n-            registeredService.setName(sp.getName());\n-            registeredService.setDescription(sp.getDescription());\n-            registeredService.setAccessStrategy(accessStrategy);\n-            registeredService.setAuthenticationPolicy(authenticationPolicy);\n-            registeredService.setAttributeReleasePolicy(attributeReleasePolicy);\n-\n-            registeredService.setMetadataLocation(sp.getMetadataLocation());\n-            registeredService.setMetadataSignatureLocation(sp.getMetadataSignatureLocation());\n-            registeredService.setSignAssertions(sp.isSignAssertions());\n-            registeredService.setSignResponses(sp.isSignResponses());\n-            registeredService.setEncryptionOptional(sp.isEncryptionOptional());\n-            registeredService.setEncryptAssertions(sp.isEncryptAssertions());\n-            registeredService.setRequiredAuthenticationContextClass(sp.getRequiredAuthenticationContextClass());\n-            registeredService.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n-            registeredService.setSkewAllowance(sp.getSkewAllowance());\n-            registeredService.setNameIdQualifier(sp.getNameIdQualifier());\n-            registeredService.setAssertionAudiences(sp.getAssertionAudiences());\n-            registeredService.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n-            return registeredService;\n-        }\n-        return null;\n-    }\n-\n-    public RegisteredClientAppTO fromRegisteredService(final RegisteredService registeredService) {\n-        RegisteredClientAppTO clientApp = new RegisteredClientAppTO();\n-\n-        if (registeredService.getAuthenticationPolicy() != null) {\n-            DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n-            DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n-            criteria.setAll(((DefaultAuthPolicyCriteriaConf) registeredService.\n-                    getAuthenticationPolicy().getCriteria()).isAll());\n-            authPolicyConf.setCriteria(criteria);\n-\n-            clientApp.setAuthPolicyConf(authPolicyConf);\n-        }\n-\n-        if (registeredService.getAccessStrategy() != null) {\n-            DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n-            accessPolicyConf.setEnabled(\n-                    ((DefaultRegisteredServiceAccessStrategy) registeredService.getAccessStrategy()).\n-                            isEnabled());\n-            accessPolicyConf.setSsoEnabled(((DefaultRegisteredServiceAccessStrategy) registeredService.\n-                    getAccessStrategy()).\n-                    isSsoEnabled());\n-            accessPolicyConf.getRequiredAttributes().putAll(((DefaultRegisteredServiceAccessStrategy) registeredService.\n-                    getAccessStrategy()).getRejectedAttributes());\n-\n-            clientApp.setAccessPolicyConf(accessPolicyConf);\n-        }\n-\n-        if (registeredService.getAttributeReleasePolicy() != null) {\n-\n-            if (registeredService.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy) {\n-                ReturnAllowedAttributeReleasePolicy returnAllowedAttributeReleasePolicy =\n-                        ReturnAllowedAttributeReleasePolicy.class.cast(registeredService.getAttributeReleasePolicy());\n-                AllowedAttrReleasePolicyConf allowedAttrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n-                allowedAttrReleasePolicyConf.getAllowedAttributes().addAll(returnAllowedAttributeReleasePolicy.\n-                        getAllowedAttributes());\n-\n-                clientApp.setAttrReleasePolicyConf(allowedAttrReleasePolicyConf);\n-            }\n-        }\n-\n-        if (registeredService instanceof OidcRegisteredService) {\n-            OidcRegisteredService oidcRegisteredService = OidcRegisteredService.class.cast(registeredService);\n-            OIDCRPTO oidcrpto = new OIDCRPTO();\n-\n-            Arrays.asList(registeredService.getServiceId().split(\"|\")).forEach(redirectURI\n-                    -> oidcrpto.getRedirectUris().add(redirectURI));\n-            oidcrpto.setName(oidcRegisteredService.getName());\n-            oidcrpto.setDescription(oidcRegisteredService.getDescription());\n-            oidcrpto.setClientId(oidcRegisteredService.getClientId());\n-            oidcrpto.setClientSecret(oidcRegisteredService.getClientSecret());\n-            oidcrpto.setSignIdToken(oidcRegisteredService.isSignIdToken());\n-            oidcrpto.setJwks(oidcRegisteredService.getJwks());\n-            oidcrpto.setSubjectType(OIDCSubjectType.valueOf(oidcRegisteredService.getSubjectType()));\n-            oidcrpto.getSupportedGrantTypes().addAll(oidcRegisteredService.getSupportedGrantTypes());\n-            oidcrpto.getSupportedResponseTypes().addAll(oidcRegisteredService.getSupportedResponseTypes());\n-\n-            clientApp.setClientAppTO(oidcrpto);\n-        } else if (registeredService instanceof SamlRegisteredService) {\n-            SamlRegisteredService samlRegisteredService = SamlRegisteredService.class.cast(registeredService);\n-            SAML2SPTO saml2spto = new SAML2SPTO();\n-\n-            saml2spto.setEntityId(samlRegisteredService.getServiceId());\n-            saml2spto.setName(samlRegisteredService.getName());\n-            saml2spto.setDescription(samlRegisteredService.getDescription());\n-\n-            saml2spto.setMetadataLocation(samlRegisteredService.getMetadataLocation());\n-            saml2spto.setMetadataSignatureLocation(samlRegisteredService.getMetadataSignatureLocation());\n-            saml2spto.setSignAssertions(samlRegisteredService.isSignAssertions());\n-            saml2spto.setSignResponses(samlRegisteredService.isSignResponses());\n-            saml2spto.setEncryptionOptional(samlRegisteredService.isEncryptionOptional());\n-            saml2spto.setEncryptAssertions(samlRegisteredService.isEncryptAssertions());\n-            saml2spto.setRequiredAuthenticationContextClass(samlRegisteredService.\n-                    getRequiredAuthenticationContextClass());\n-            saml2spto.setRequiredNameIdFormat(SAML2SPNameId.valueOf(samlRegisteredService.getRequiredNameIdFormat()));\n-            saml2spto.setSkewAllowance(samlRegisteredService.getSkewAllowance());\n-            saml2spto.setNameIdQualifier(samlRegisteredService.getNameIdQualifier());\n-            saml2spto.setAssertionAudiences(samlRegisteredService.getAssertionAudiences());\n-            saml2spto.setServiceProviderNameIdQualifier(samlRegisteredService.getServiceProviderNameIdQualifier());\n-\n-            clientApp.setClientAppTO(saml2spto);\n-        }\n-        return clientApp;\n-    }\n-}"},{"sha":"27467935f0819cb19a39b3fd58da17676e3aca67","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/RegisteredServiceMapper.java","status":"added","additions":205,"deletions":0,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FRegisteredServiceMapper.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.wa.starter;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.DefaultRegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n+import org.apereo.cas.services.OidcRegisteredService;\n+import org.apereo.cas.services.RegisteredService;\n+import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n+import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n+import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n+import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n+import org.apereo.cas.support.saml.services.SamlRegisteredService;\n+\n+public final class RegisteredServiceMapper {\n+\n+    private RegisteredServiceMapper() {\n+        // private constructor for static utility class\n+    }\n+\n+    public static RegisteredService toRegisteredService(final WAClientApp clientApp) {\n+        DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n+        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n+                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n+        criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) clientApp.getAuthPolicyConf().getCriteria()).isAll());\n+        authPolicy.setCriteria(criteria);\n+\n+        RegisteredServiceAccessStrategy accessStrategy = new DefaultRegisteredServiceAccessStrategy(\n+                clientApp.getAccessPolicyConf().isEnabled(), clientApp.getAccessPolicyConf().isSsoEnabled());\n+        accessStrategy.getRequiredAttributes().putAll(clientApp.getAccessPolicyConf().getRequiredAttributes());\n+\n+        RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n+        if (clientApp.getAttrReleasePolicyConf() != null\n+                && clientApp.getAttrReleasePolicyConf() instanceof AllowedAttrReleasePolicyConf\n+                && !((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).\n+                        getAllowedAttributes().isEmpty()) {\n+\n+            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n+            ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes();\n+            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).getAllowedAttributes().addAll(\n+                    ((AllowedAttrReleasePolicyConf) clientApp.getAttrReleasePolicyConf()).getAllowedAttributes());\n+        } else {\n+            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n+        }\n+\n+        if (clientApp.getClientAppTO() instanceof OIDCRPTO) {\n+            OIDCRPTO rp = OIDCRPTO.class.cast(clientApp.getClientAppTO());\n+            OidcRegisteredService service = new OidcRegisteredService();\n+\n+            String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n+            service.setServiceId(redirectURIs);\n+            service.setName(rp.getName());\n+            service.setDescription(rp.getDescription());\n+            service.setAccessStrategy(accessStrategy);\n+            service.setAuthenticationPolicy(authPolicy);\n+            service.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+            service.setClientId(rp.getClientId());\n+            service.setClientSecret(rp.getClientSecret());\n+            service.setSignIdToken(rp.isSignIdToken());\n+            service.setJwks(rp.getJwks());\n+            service.setSubjectType(rp.getSubjectType().name());\n+            service.setRedirectUrl(redirectURIs);\n+            service.setSupportedGrantTypes((HashSet<String>) rp.getSupportedGrantTypes());\n+            service.setSupportedResponseTypes((HashSet<String>) rp.getSupportedResponseTypes());\n+\n+            return service;\n+        } else if (clientApp.getClientAppTO() instanceof SAML2SPTO) {\n+            SAML2SPTO sp = SAML2SPTO.class.cast(clientApp.getClientAppTO());\n+            SamlRegisteredService service = new SamlRegisteredService();\n+\n+            service.setServiceId(sp.getEntityId());\n+            service.setName(sp.getName());\n+            service.setDescription(sp.getDescription());\n+            service.setAccessStrategy(accessStrategy);\n+            service.setAuthenticationPolicy(authPolicy);\n+            service.setAttributeReleasePolicy(attributeReleasePolicy);\n+\n+            service.setMetadataLocation(sp.getMetadataLocation());\n+            service.setMetadataSignatureLocation(sp.getMetadataSignatureLocation());\n+            service.setSignAssertions(sp.isSignAssertions());\n+            service.setSignResponses(sp.isSignResponses());\n+            service.setEncryptionOptional(sp.isEncryptionOptional());\n+            service.setEncryptAssertions(sp.isEncryptAssertions());\n+            service.setRequiredAuthenticationContextClass(sp.getRequiredAuthenticationContextClass());\n+            service.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n+            service.setSkewAllowance(sp.getSkewAllowance());\n+            service.setNameIdQualifier(sp.getNameIdQualifier());\n+            service.setAssertionAudiences(sp.getAssertionAudiences());\n+            service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n+\n+            return service;\n+        }\n+\n+        return null;\n+    }\n+\n+    public static WAClientApp fromRegisteredService(final RegisteredService service) {\n+        WAClientApp clientApp = new WAClientApp();\n+\n+        if (service.getAuthenticationPolicy() != null) {\n+            DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n+            DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n+            criteria.setAll(((DefaultAuthPolicyCriteriaConf) service.getAuthenticationPolicy().getCriteria()).isAll());\n+            authPolicyConf.setCriteria(criteria);\n+\n+            clientApp.setAuthPolicyConf(authPolicyConf);\n+        }\n+\n+        if (service.getAccessStrategy() != null) {\n+            DefaultAccessPolicyConf accessPolicyConf = new DefaultAccessPolicyConf();\n+            accessPolicyConf.setEnabled(\n+                    ((DefaultRegisteredServiceAccessStrategy) service.getAccessStrategy()).isEnabled());\n+            accessPolicyConf.setSsoEnabled(\n+                    ((DefaultRegisteredServiceAccessStrategy) service.getAccessStrategy()).isSsoEnabled());\n+            accessPolicyConf.getRequiredAttributes().putAll(\n+                    ((DefaultRegisteredServiceAccessStrategy) service.getAccessStrategy()).getRejectedAttributes());\n+\n+            clientApp.setAccessPolicyConf(accessPolicyConf);\n+        }\n+\n+        if (service.getAttributeReleasePolicy() != null) {\n+\n+            if (service.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy) {\n+                ReturnAllowedAttributeReleasePolicy returnAllowedAttributeReleasePolicy =\n+                        ReturnAllowedAttributeReleasePolicy.class.cast(service.getAttributeReleasePolicy());\n+                AllowedAttrReleasePolicyConf allowedAttrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n+                allowedAttrReleasePolicyConf.getAllowedAttributes().addAll(returnAllowedAttributeReleasePolicy.\n+                        getAllowedAttributes());\n+\n+                clientApp.setAttrReleasePolicyConf(allowedAttrReleasePolicyConf);\n+            }\n+        }\n+\n+        if (service instanceof OidcRegisteredService) {\n+            OidcRegisteredService oidc = OidcRegisteredService.class.cast(service);\n+            OIDCRPTO oidcrpto = new OIDCRPTO();\n+\n+            oidcrpto.getRedirectUris().addAll(Arrays.asList(oidc.getServiceId().split(\"|\")));\n+            oidcrpto.setName(oidc.getName());\n+            oidcrpto.setDescription(oidc.getDescription());\n+            oidcrpto.setClientId(oidc.getClientId());\n+            oidcrpto.setClientSecret(oidc.getClientSecret());\n+            oidcrpto.setSignIdToken(oidc.isSignIdToken());\n+            oidcrpto.setJwks(oidc.getJwks());\n+            oidcrpto.setSubjectType(OIDCSubjectType.valueOf(oidc.getSubjectType()));\n+            oidcrpto.getSupportedGrantTypes().addAll(oidc.getSupportedGrantTypes());\n+            oidcrpto.getSupportedResponseTypes().addAll(oidc.getSupportedResponseTypes());\n+\n+            clientApp.setClientAppTO(oidcrpto);\n+        } else if (service instanceof SamlRegisteredService) {\n+            SamlRegisteredService saml = SamlRegisteredService.class.cast(service);\n+            SAML2SPTO saml2spto = new SAML2SPTO();\n+\n+            saml2spto.setEntityId(saml.getServiceId());\n+            saml2spto.setName(saml.getName());\n+            saml2spto.setDescription(saml.getDescription());\n+\n+            saml2spto.setMetadataLocation(saml.getMetadataLocation());\n+            saml2spto.setMetadataSignatureLocation(saml.getMetadataSignatureLocation());\n+            saml2spto.setSignAssertions(saml.isSignAssertions());\n+            saml2spto.setSignResponses(saml.isSignResponses());\n+            saml2spto.setEncryptionOptional(saml.isEncryptionOptional());\n+            saml2spto.setEncryptAssertions(saml.isEncryptAssertions());\n+            saml2spto.setRequiredAuthenticationContextClass(saml.getRequiredAuthenticationContextClass());\n+            saml2spto.setRequiredNameIdFormat(SAML2SPNameId.valueOf(saml.getRequiredNameIdFormat()));\n+            saml2spto.setSkewAllowance(saml.getSkewAllowance());\n+            saml2spto.setNameIdQualifier(saml.getNameIdQualifier());\n+            saml2spto.setAssertionAudiences(saml.getAssertionAudiences());\n+            saml2spto.setServiceProviderNameIdQualifier(saml.getServiceProviderNameIdQualifier());\n+\n+            clientApp.setClientAppTO(saml2spto);\n+        }\n+\n+        return clientApp;\n+    }\n+}"},{"sha":"1eddd9fda0f8658c22b655c0b89f97858d67a5ad","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeServiceRegistry.java","status":"renamed","additions":31,"deletions":51,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeServiceRegistry.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -16,16 +16,13 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.starter.rest;\n+package org.apache.syncope.wa.starter;\n \n import java.util.Collection;\n import java.util.List;\n import java.util.stream.Collectors;\n-import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.types.ClientAppType;\n-import org.apache.syncope.common.rest.api.service.RegisteredClientAppService;\n import org.apache.syncope.wa.WARestClient;\n-import org.apache.syncope.wa.mapper.RegisteredServiceMapper;\n import org.apereo.cas.services.AbstractServiceRegistry;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n@@ -34,56 +31,40 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n \n public class SyncopeServiceRegistry extends AbstractServiceRegistry {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeServiceRegistry.class);\n \n     private final WARestClient restClient;\n \n-    private final RegisteredServiceMapper mapper;\n-\n-    public SyncopeServiceRegistry(final WARestClient restClient,\n+    public SyncopeServiceRegistry(\n+            final WARestClient restClient,\n             final ConfigurableApplicationContext applicationContext,\n             final Collection<ServiceRegistryListener> serviceRegistryListeners) {\n \n         super(applicationContext, serviceRegistryListeners);\n         this.restClient = restClient;\n-        this.mapper = new RegisteredServiceMapper();\n     }\n \n     @Override\n     public RegisteredService save(final RegisteredService registeredService) {\n-        if (WARestClient.isReady()) {\n-            LOG.info(\"Create application definitions\");\n-            Response response =\n-                    restClient.getSyncopeClient().getService(RegisteredClientAppService.class).create(mapper.\n-                            fromRegisteredService(registeredService));\n-            if (response.getStatusInfo().getStatusCode() == Response.Status.CREATED.getStatusCode()) {\n-                return registeredService;\n-            }\n-        }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return null;\n+        throw new UnsupportedOperationException(\"Saving registered services from WA is not supported\");\n     }\n \n     @Override\n     public boolean delete(final RegisteredService registeredService) {\n-        if (WARestClient.isReady()) {\n-            LOG.info(\"Delete application definitions\");\n-            return restClient.getSyncopeClient().getService(RegisteredClientAppService.class).\n-                    delete(registeredService.getName());\n-        }\n-        LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n-        return false;\n+        throw new UnsupportedOperationException(\"Deleting registered services from WA is not supported\");\n     }\n \n     @Override\n     public Collection<RegisteredService> load() {\n         if (WARestClient.isReady()) {\n             LOG.info(\"Loading application definitions\");\n-            return restClient.getSyncopeClient().getService(RegisteredClientAppService.class).list().stream().\n-                    map(clientApp -> mapper.toRegisteredService(clientApp)).collect(Collectors.toList());\n+            return restClient.getSyncopeClient().getService(WAClientAppService.class).list().stream().\n+                    map(clientApp -> RegisteredServiceMapper.toRegisteredService(clientApp)).\n+                    collect(Collectors.toList());\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n         return List.of();\n@@ -93,56 +74,55 @@ public Collection<RegisteredService> load() {\n     public RegisteredService findServiceById(final long id) {\n         if (WARestClient.isReady()) {\n             LOG.info(\"Searching for application definition by id {}\", id);\n-            return mapper.toRegisteredService(restClient.getSyncopeClient().\n-                    getService(RegisteredClientAppService.class).read(id));\n+            return RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                    getService(WAClientAppService.class).read(id, null));\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n         return null;\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends RegisteredService> T findServiceByExactServiceName(final String name, final Class<T> clazz) {\n+    public <T extends RegisteredService> T findServiceById(final long id, final Class<T> clazz) {\n         if (WARestClient.isReady()) {\n-            LOG.info(\"Searching for application definition by name {} and type {}\", name, clazz);\n+            LOG.info(\"Searching for application definition by id {} and type {}\", id, clazz);\n             if (clazz.isInstance(OidcRegisteredService.class)) {\n-                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n-                        getService(RegisteredClientAppService.class).read(name, ClientAppType.OIDCRP));\n+                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(WAClientAppService.class).read(id, ClientAppType.OIDCRP));\n             } else if (clazz.isInstance(SamlRegisteredService.class)) {\n-                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n-                        getService(RegisteredClientAppService.class).read(name, ClientAppType.SAML2SP));\n+                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(WAClientAppService.class).read(id, ClientAppType.SAML2SP));\n             }\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n         return null;\n     }\n \n     @Override\n-    public RegisteredService findServiceByExactServiceName(final String name) {\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends RegisteredService> T findServiceByExactServiceName(final String name, final Class<T> clazz) {\n         if (WARestClient.isReady()) {\n-            LOG.info(\"Searching for application definition by name {}\", name);\n-            return mapper.toRegisteredService(restClient.getSyncopeClient().\n-                    getService(RegisteredClientAppService.class).read(name));\n+            LOG.info(\"Searching for application definition by name {} and type {}\", name, clazz);\n+            if (clazz.isInstance(OidcRegisteredService.class)) {\n+                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(WAClientAppService.class).read(name, ClientAppType.OIDCRP));\n+            } else if (clazz.isInstance(SamlRegisteredService.class)) {\n+                return (T) RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                        getService(WAClientAppService.class).read(name, ClientAppType.SAML2SP));\n+            }\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n         return null;\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends RegisteredService> T findServiceById(final long id, final Class<T> clazz) {\n+    public RegisteredService findServiceByExactServiceName(final String name) {\n         if (WARestClient.isReady()) {\n-            LOG.info(\"Searching for application definition by id {} and type {}\", id, clazz);\n-            if (clazz.isInstance(OidcRegisteredService.class)) {\n-                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n-                        getService(RegisteredClientAppService.class).read(id, ClientAppType.OIDCRP));\n-            } else if (clazz.isInstance(SamlRegisteredService.class)) {\n-                return (T) mapper.toRegisteredService(restClient.getSyncopeClient().\n-                        getService(RegisteredClientAppService.class).read(id, ClientAppType.SAML2SP));\n-            }\n+            LOG.info(\"Searching for application definition by name {}\", name);\n+            return RegisteredServiceMapper.toRegisteredService(restClient.getSyncopeClient().\n+                    getService(WAClientAppService.class).read(name, null));\n         }\n         LOG.debug(\"Syncope client is not yet ready to fetch application definitions\");\n         return null;\n     }\n-\n }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/rest/SyncopeServiceRegistry.java"},{"sha":"1b433860919695990f45ec387525dc1b0b513c38","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -18,12 +18,14 @@\n  */\n package org.apache.syncope.wa.starter;\n \n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import org.apache.commons.lang.StringUtils;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasConfigurationPropertiesValidator;\n import org.apereo.cas.util.AsciiArtUtils;\n import org.apereo.cas.util.DateTimeUtils;\n-\n-import org.apache.commons.lang.StringUtils;\n import org.quartz.Job;\n import org.quartz.JobBuilder;\n import org.quartz.JobDetail;\n@@ -62,10 +64,6 @@\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n-import java.time.LocalDateTime;\n-import java.time.ZoneId;\n-import java.util.Date;\n-\n @PropertySource(\"classpath:wa.properties\")\n @PropertySource(value = \"file:${conf.directory}/wa.properties\", ignoreResourceNotFound = true)\n @SpringBootApplication(exclude = {\n@@ -112,7 +110,7 @@ private static void advertiseReady(final ApplicationReadyEvent event) {\n     private static void validateConfiguration(final ApplicationReadyEvent event) {\n         if (!Boolean.getBoolean(\"SKIP_CONFIG_VALIDATION\")) {\n             CasConfigurationPropertiesValidator validator =\n-                new CasConfigurationPropertiesValidator(event.getApplicationContext());\n+                    new CasConfigurationPropertiesValidator(event.getApplicationContext());\n             validator.validate();\n         }\n     }\n@@ -132,7 +130,7 @@ public void handleApplicationReadyEvent(final ApplicationReadyEvent event) {\n     private void scheduleJobToRefreshContext() {\n         try {\n             Date date = Date.from(LocalDateTime.now().plusSeconds(this.contextRefreshDelay).\n-                atZone(ZoneId.systemDefault()).toInstant());\n+                    atZone(ZoneId.systemDefault()).toInstant());\n             Trigger trigger = TriggerBuilder.newTrigger().startAt(date).build();\n             JobKey jobKey = new JobKey(getClass().getSimpleName());\n \n@@ -144,6 +142,7 @@ private void scheduleJobToRefreshContext() {\n     }\n \n     private class RefreshApplicationContextJob implements Job {\n+\n         @Override\n         public void execute(final JobExecutionContext jobExecutionContext) {\n             try {"},{"sha":"938eb3934d1bc76f75fe6e0a29f424e891afd164","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a1d9e8c131cea6c4276e49e951657326fb2c0eb/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=2a1d9e8c131cea6c4276e49e951657326fb2c0eb","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.wa.WARestClient;\n-import org.apache.syncope.wa.starter.rest.SyncopeServiceRegistry;\n import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n import org.apereo.cas.services.ServiceRegistryListener;\n import org.springframework.beans.factory.annotation.Autowired;"}]}