{"sha":"782cb9c1479bc00a57cb9ef14757b930af4011ff","node_id":"C_kwDOJfYA1toAKDc4MmNiOWMxNDc5YmMwMGE1N2NiOWVmMTQ3NTdiOTMwYWY0MDExZmY","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-10-10T12:15:57Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-10-10T12:15:57Z"},"message":"[SYNCOPE-1697] Command and Macro introduced (#378)","tree":{"sha":"14fccb88b074a100087db9243eb71f04e948d121","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/14fccb88b074a100087db9243eb71f04e948d121"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/782cb9c1479bc00a57cb9ef14757b930af4011ff","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRAz9CRBK7hj4Ov3rIwAAFC8IAKloAXyZRzOfHqzMhO4YGnCC\noqYQSf8izLKnyEOlWkKcdJZv8L3PpOqrhebJmBoJ8WnVlZ2Tg/wp4wYZPvyaun9z\nnYx0Wrzl3M+eW4c8Q1RNqcLkgUTkU+P5VzVqgJ4YCV6nYr39gVrBOMYbt9NrrRq9\nYWCTSJUf8EuvLBpp8GCAUhe+x+jKqg16fXi4qTwPl3NITTQw2zzMJrSAAhrL4Lcb\ncxYTUS4EEcuiJ91e4DZiN6IfXMIIuS5d/RBPOsX4FdDhJZZFCWMZYg9sUIQhhCTq\n2w3Hv2R+LR6Rs0y7NngDoLLHsACPsSMcepdf2vjIfQzZuR33cBZnoKZYKo7Tw9E=\n=RxBW\n-----END PGP SIGNATURE-----\n","payload":"tree 14fccb88b074a100087db9243eb71f04e948d121\nparent 47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1665404157 +0200\ncommitter GitHub <noreply@github.com> 1665404157 +0200\n\n[SYNCOPE-1697] Command and Macro introduced (#378)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/782cb9c1479bc00a57cb9ef14757b930af4011ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/782cb9c1479bc00a57cb9ef14757b930af4011ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/782cb9c1479bc00a57cb9ef14757b930af4011ff/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9"}],"stats":{"total":6940,"additions":5131,"deletions":1809},"files":[{"sha":"1066f1268c74c0fca86ded179b3c16034054cab7","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/authprofiles/AuthProfileDirectoryPanel.java","status":"modified","additions":182,"deletions":162,"changes":344,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -64,7 +64,7 @@\n public class AuthProfileDirectoryPanel\n         extends DirectoryPanel<AuthProfileTO, AuthProfileTO, AuthProfileProvider, AuthProfileRestClient> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 2018518567549153364L;\n \n     private final BaseModal<AuthProfileTO> authProfileModal;\n \n@@ -121,34 +121,44 @@ protected List<IColumn<AuthProfileTO, String>> getColumns() {\n \n         columns.add(new BooleanConditionColumn<>(new StringResourceModel(\"impersonationAccounts\")) {\n \n+            private static final long serialVersionUID = -8236820422411536323L;\n+\n             @Override\n             protected boolean isCondition(final IModel<AuthProfileTO> rowModel) {\n                 return !rowModel.getObject().getImpersonationAccounts().isEmpty();\n             }\n         });\n         columns.add(new BooleanConditionColumn<>(new StringResourceModel(\"googleMfaAuthTokens\")) {\n \n+            private static final long serialVersionUID = -8236820422411536323L;\n+\n             @Override\n             protected boolean isCondition(final IModel<AuthProfileTO> rowModel) {\n                 return !rowModel.getObject().getGoogleMfaAuthTokens().isEmpty();\n             }\n         });\n         columns.add(new BooleanConditionColumn<>(new StringResourceModel(\"googleMfaAuthAccounts\")) {\n \n+            private static final long serialVersionUID = -8236820422411536323L;\n+\n             @Override\n             protected boolean isCondition(final IModel<AuthProfileTO> rowModel) {\n                 return !rowModel.getObject().getGoogleMfaAuthAccounts().isEmpty();\n             }\n         });\n         columns.add(new BooleanConditionColumn<>(new StringResourceModel(\"u2fRegisteredDevices\")) {\n \n+            private static final long serialVersionUID = -8236820422411536323L;\n+\n             @Override\n             protected boolean isCondition(final IModel<AuthProfileTO> rowModel) {\n                 return !rowModel.getObject().getU2FRegisteredDevices().isEmpty();\n             }\n         });\n         columns.add(new BooleanConditionColumn<>(new StringResourceModel(\"webAuthnAccount\")) {\n \n+            private static final long serialVersionUID = -8236820422411536323L;\n+\n             @Override\n             protected boolean isCondition(final IModel<AuthProfileTO> rowModel) {\n                 return !rowModel.getObject().getWebAuthnDeviceCredentials().isEmpty();\n@@ -170,38 +180,40 @@ public ActionsPanel<AuthProfileTO> getActions(final IModel<AuthProfileTO> model)\n             public void onClick(final AjaxRequestTarget target, final AuthProfileTO ignore) {\n                 model.setObject(AuthProfileRestClient.read(model.getObject().getKey()));\n                 target.add(authProfileModal.setContent(new ModalDirectoryPanel<>(\n-                    authProfileModal,\n-                    new AuthProfileItemDirectoryPanel<ImpersonationAccount>(\n-                        \"panel\", authProfileModal, model.getObject(), pageRef) {\n-\n-                        @Override\n-                        protected List<ImpersonationAccount> getItems() {\n-                            return model.getObject().getImpersonationAccounts();\n-                        }\n-\n-                        @Override\n-                        protected ImpersonationAccount defaultItem() {\n-                            return new ImpersonationAccount();\n-                        }\n-\n-                        @Override\n-                        protected String sortProperty() {\n-                            return \"impersonated\";\n-                        }\n-\n-                        @Override\n-                        protected String paginatorRowsKey() {\n-                            return AMConstants.PREF_AUTHPROFILE_IMPERSONATED_PAGINATOR_ROWS;\n-                        }\n-\n-                        @Override\n-                        protected List<IColumn<ImpersonationAccount, String>> getColumns() {\n-                            List<IColumn<ImpersonationAccount, String>> columns = new ArrayList<>();\n-                            columns.add(new PropertyColumn<>(new ResourceModel(\"impersonated\"),\n+                        authProfileModal,\n+                        new AuthProfileItemDirectoryPanel<ImpersonationAccount>(\n+                                \"panel\", authProfileModal, model.getObject(), pageRef) {\n+\n+                    private static final long serialVersionUID = -5380664539000792237L;\n+\n+                    @Override\n+                    protected List<ImpersonationAccount> getItems() {\n+                        return model.getObject().getImpersonationAccounts();\n+                    }\n+\n+                    @Override\n+                    protected ImpersonationAccount defaultItem() {\n+                        return new ImpersonationAccount();\n+                    }\n+\n+                    @Override\n+                    protected String sortProperty() {\n+                        return \"impersonated\";\n+                    }\n+\n+                    @Override\n+                    protected String paginatorRowsKey() {\n+                        return AMConstants.PREF_AUTHPROFILE_IMPERSONATED_PAGINATOR_ROWS;\n+                    }\n+\n+                    @Override\n+                    protected List<IColumn<ImpersonationAccount, String>> getColumns() {\n+                        List<IColumn<ImpersonationAccount, String>> columns = new ArrayList<>();\n+                        columns.add(new PropertyColumn<>(new ResourceModel(\"impersonated\"),\n                                 \"impersonated\", \"impersonated\"));\n-                            return columns;\n-                        }\n-                    }, pageRef)));\n+                        return columns;\n+                    }\n+                }, pageRef)));\n                 authProfileModal.header(new Model<>(getString(\"impersonationAccounts\", model)));\n                 authProfileModal.show(true);\n             }\n@@ -215,40 +227,42 @@ protected List<IColumn<ImpersonationAccount, String>> getColumns() {\n             public void onClick(final AjaxRequestTarget target, final AuthProfileTO ignore) {\n                 model.setObject(AuthProfileRestClient.read(model.getObject().getKey()));\n                 target.add(authProfileModal.setContent(new ModalDirectoryPanel<>(\n-                    authProfileModal,\n-                    new AuthProfileItemDirectoryPanel<GoogleMfaAuthToken>(\n-                        \"panel\", authProfileModal, model.getObject(), pageRef) {\n-\n-                        @Override\n-                        protected List<GoogleMfaAuthToken> getItems() {\n-                            return model.getObject().getGoogleMfaAuthTokens();\n-                        }\n-\n-                        @Override\n-                        protected GoogleMfaAuthToken defaultItem() {\n-                            return new GoogleMfaAuthToken();\n-                        }\n-\n-                        @Override\n-                        protected String sortProperty() {\n-                            return \"issueDate\";\n-                        }\n-\n-                        @Override\n-                        protected String paginatorRowsKey() {\n-                            return AMConstants.PREF_AUTHPROFILE_GOOGLEMFAAUTHTOKENS_PAGINATOR_ROWS;\n-                        }\n-\n-                        @Override\n-                        protected List<IColumn<GoogleMfaAuthToken, String>> getColumns() {\n-                            List<IColumn<GoogleMfaAuthToken, String>> columns = new ArrayList<>();\n-                            columns.add(new DatePropertyColumn<>(\n+                        authProfileModal,\n+                        new AuthProfileItemDirectoryPanel<GoogleMfaAuthToken>(\n+                                \"panel\", authProfileModal, model.getObject(), pageRef) {\n+\n+                    private static final long serialVersionUID = 7332357430197837993L;\n+\n+                    @Override\n+                    protected List<GoogleMfaAuthToken> getItems() {\n+                        return model.getObject().getGoogleMfaAuthTokens();\n+                    }\n+\n+                    @Override\n+                    protected GoogleMfaAuthToken defaultItem() {\n+                        return new GoogleMfaAuthToken();\n+                    }\n+\n+                    @Override\n+                    protected String sortProperty() {\n+                        return \"issueDate\";\n+                    }\n+\n+                    @Override\n+                    protected String paginatorRowsKey() {\n+                        return AMConstants.PREF_AUTHPROFILE_GOOGLEMFAAUTHTOKENS_PAGINATOR_ROWS;\n+                    }\n+\n+                    @Override\n+                    protected List<IColumn<GoogleMfaAuthToken, String>> getColumns() {\n+                        List<IColumn<GoogleMfaAuthToken, String>> columns = new ArrayList<>();\n+                        columns.add(new DatePropertyColumn<>(\n                                 new ResourceModel(\"issueDate\"), \"issueDate\", \"issueDate\"));\n-                            columns.add(new PropertyColumn<>(\n+                        columns.add(new PropertyColumn<>(\n                                 new ResourceModel(\"otp\"), \"otp\", \"otp\"));\n-                            return columns;\n-                        }\n-                    }, pageRef)));\n+                        return columns;\n+                    }\n+                }, pageRef)));\n                 authProfileModal.header(new Model<>(getString(\"googleMfaAuthTokens\", model)));\n                 authProfileModal.show(true);\n             }\n@@ -262,40 +276,42 @@ protected List<IColumn<GoogleMfaAuthToken, String>> getColumns() {\n             public void onClick(final AjaxRequestTarget target, final AuthProfileTO ignore) {\n                 model.setObject(AuthProfileRestClient.read(model.getObject().getKey()));\n                 target.add(authProfileModal.setContent(new ModalDirectoryPanel<>(\n-                    authProfileModal,\n-                    new AuthProfileItemDirectoryPanel<GoogleMfaAuthAccount>(\n-                        \"panel\", authProfileModal, model.getObject(), pageRef) {\n-\n-                        @Override\n-                        protected List<GoogleMfaAuthAccount> getItems() {\n-                            return model.getObject().getGoogleMfaAuthAccounts();\n-                        }\n-\n-                        @Override\n-                        protected GoogleMfaAuthAccount defaultItem() {\n-                            return new GoogleMfaAuthAccount();\n-                        }\n-\n-                        @Override\n-                        protected String sortProperty() {\n-                            return \"id\";\n-                        }\n-\n-                        @Override\n-                        protected String paginatorRowsKey() {\n-                            return AMConstants.PREF_AUTHPROFILE_GOOGLEMFAAUTHACCOUNTS_PAGINATOR_ROWS;\n-                        }\n-\n-                        @Override\n-                        protected List<IColumn<GoogleMfaAuthAccount, String>> getColumns() {\n-                            List<IColumn<GoogleMfaAuthAccount, String>> columns = new ArrayList<>();\n-                            columns.add(new PropertyColumn<>(new ResourceModel(\"id\"), \"id\", \"id\"));\n-                            columns.add(new DatePropertyColumn<>(\n+                        authProfileModal,\n+                        new AuthProfileItemDirectoryPanel<GoogleMfaAuthAccount>(\n+                                \"panel\", authProfileModal, model.getObject(), pageRef) {\n+\n+                    private static final long serialVersionUID = -670769282358547044L;\n+\n+                    @Override\n+                    protected List<GoogleMfaAuthAccount> getItems() {\n+                        return model.getObject().getGoogleMfaAuthAccounts();\n+                    }\n+\n+                    @Override\n+                    protected GoogleMfaAuthAccount defaultItem() {\n+                        return new GoogleMfaAuthAccount();\n+                    }\n+\n+                    @Override\n+                    protected String sortProperty() {\n+                        return \"id\";\n+                    }\n+\n+                    @Override\n+                    protected String paginatorRowsKey() {\n+                        return AMConstants.PREF_AUTHPROFILE_GOOGLEMFAAUTHACCOUNTS_PAGINATOR_ROWS;\n+                    }\n+\n+                    @Override\n+                    protected List<IColumn<GoogleMfaAuthAccount, String>> getColumns() {\n+                        List<IColumn<GoogleMfaAuthAccount, String>> columns = new ArrayList<>();\n+                        columns.add(new PropertyColumn<>(new ResourceModel(\"id\"), \"id\", \"id\"));\n+                        columns.add(new DatePropertyColumn<>(\n                                 new ResourceModel(\"registrationDate\"), \"registrationDate\", \"registrationDate\"));\n-                            columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n-                            return columns;\n-                        }\n-                    }, pageRef)));\n+                        columns.add(new PropertyColumn<>(new ResourceModel(\"name\"), \"name\", \"name\"));\n+                        return columns;\n+                    }\n+                }, pageRef)));\n                 authProfileModal.header(new Model<>(getString(\"googleMfaAuthAccounts\", model)));\n                 authProfileModal.show(true);\n             }\n@@ -309,40 +325,42 @@ protected List<IColumn<GoogleMfaAuthAccount, String>> getColumns() {\n             public void onClick(final AjaxRequestTarget target, final AuthProfileTO ignore) {\n                 model.setObject(AuthProfileRestClient.read(model.getObject().getKey()));\n                 target.add(authProfileModal.setContent(new ModalDirectoryPanel<>(\n-                    authProfileModal,\n-                    new AuthProfileItemDirectoryPanel<U2FDevice>(\n-                        \"panel\", authProfileModal, model.getObject(), pageRef) {\n-\n-                        @Override\n-                        protected List<U2FDevice> getItems() {\n-                            return model.getObject().getU2FRegisteredDevices();\n-                        }\n-\n-                        @Override\n-                        protected U2FDevice defaultItem() {\n-                            return new U2FDevice();\n-                        }\n-\n-                        @Override\n-                        protected String sortProperty() {\n-                            return \"id\";\n-                        }\n-\n-                        @Override\n-                        protected String paginatorRowsKey() {\n-                            return AMConstants.PREF_AUTHPROFILE_U2FDEVICES_PAGINATOR_ROWS;\n-                        }\n-\n-                        @Override\n-                        protected List<IColumn<U2FDevice, String>> getColumns() {\n-                            List<IColumn<U2FDevice, String>> columns = new ArrayList<>();\n-                            columns.add(new PropertyColumn<>(new ResourceModel(\"id\"), \"id\", \"id\"));\n-                            columns.add(new DatePropertyColumn<>(\n+                        authProfileModal,\n+                        new AuthProfileItemDirectoryPanel<U2FDevice>(\n+                                \"panel\", authProfileModal, model.getObject(), pageRef) {\n+\n+                    private static final long serialVersionUID = 5788448799796630011L;\n+\n+                    @Override\n+                    protected List<U2FDevice> getItems() {\n+                        return model.getObject().getU2FRegisteredDevices();\n+                    }\n+\n+                    @Override\n+                    protected U2FDevice defaultItem() {\n+                        return new U2FDevice();\n+                    }\n+\n+                    @Override\n+                    protected String sortProperty() {\n+                        return \"id\";\n+                    }\n+\n+                    @Override\n+                    protected String paginatorRowsKey() {\n+                        return AMConstants.PREF_AUTHPROFILE_U2FDEVICES_PAGINATOR_ROWS;\n+                    }\n+\n+                    @Override\n+                    protected List<IColumn<U2FDevice, String>> getColumns() {\n+                        List<IColumn<U2FDevice, String>> columns = new ArrayList<>();\n+                        columns.add(new PropertyColumn<>(new ResourceModel(\"id\"), \"id\", \"id\"));\n+                        columns.add(new DatePropertyColumn<>(\n                                 new ResourceModel(\"issueDate\"), \"issueDate\", \"issueDate\"));\n-                            columns.add(new PropertyColumn<>(new ResourceModel(\"record\"), \"record\", \"record\"));\n-                            return columns;\n-                        }\n-                    }, pageRef)));\n+                        columns.add(new PropertyColumn<>(new ResourceModel(\"record\"), \"record\", \"record\"));\n+                        return columns;\n+                    }\n+                }, pageRef)));\n                 authProfileModal.header(new Model<>(getString(\"u2fRegisteredDevices\", model)));\n                 authProfileModal.show(true);\n             }\n@@ -356,40 +374,42 @@ protected List<IColumn<U2FDevice, String>> getColumns() {\n             public void onClick(final AjaxRequestTarget target, final AuthProfileTO ignore) {\n                 model.setObject(AuthProfileRestClient.read(model.getObject().getKey()));\n                 target.add(authProfileModal.setContent(new ModalDirectoryPanel<>(\n-                    authProfileModal,\n-                    new AuthProfileItemDirectoryPanel<WebAuthnDeviceCredential>(\n-                        \"panel\", authProfileModal, model.getObject(), pageRef) {\n-\n-                        @Override\n-                        protected List<WebAuthnDeviceCredential> getItems() {\n-                            return model.getObject().getWebAuthnDeviceCredentials();\n-                        }\n-\n-                        @Override\n-                        protected WebAuthnDeviceCredential defaultItem() {\n-                            return new WebAuthnDeviceCredential();\n-                        }\n-\n-                        @Override\n-                        protected String sortProperty() {\n-                            return \"identifier\";\n-                        }\n-\n-                        @Override\n-                        protected String paginatorRowsKey() {\n-                            return AMConstants.PREF_AUTHPROFILE_WEBAUTHNDEVICECREDENTIALS_PAGINATOR_ROWS;\n-                        }\n-\n-                        @Override\n-                        protected List<IColumn<WebAuthnDeviceCredential, String>> getColumns() {\n-                            List<IColumn<WebAuthnDeviceCredential, String>> columns = new ArrayList<>();\n-                            columns.add(new PropertyColumn<>(\n+                        authProfileModal,\n+                        new AuthProfileItemDirectoryPanel<WebAuthnDeviceCredential>(\n+                                \"panel\", authProfileModal, model.getObject(), pageRef) {\n+\n+                    private static final long serialVersionUID = 6820212423488933184L;\n+\n+                    @Override\n+                    protected List<WebAuthnDeviceCredential> getItems() {\n+                        return model.getObject().getWebAuthnDeviceCredentials();\n+                    }\n+\n+                    @Override\n+                    protected WebAuthnDeviceCredential defaultItem() {\n+                        return new WebAuthnDeviceCredential();\n+                    }\n+\n+                    @Override\n+                    protected String sortProperty() {\n+                        return \"identifier\";\n+                    }\n+\n+                    @Override\n+                    protected String paginatorRowsKey() {\n+                        return AMConstants.PREF_AUTHPROFILE_WEBAUTHNDEVICECREDENTIALS_PAGINATOR_ROWS;\n+                    }\n+\n+                    @Override\n+                    protected List<IColumn<WebAuthnDeviceCredential, String>> getColumns() {\n+                        List<IColumn<WebAuthnDeviceCredential, String>> columns = new ArrayList<>();\n+                        columns.add(new PropertyColumn<>(\n                                 new ResourceModel(\"identifier\"), \"identifier\", \"identifier\"));\n-                            columns.add(new PropertyColumn<>(\n+                        columns.add(new PropertyColumn<>(\n                                 new ResourceModel(\"json\"), \"json\", \"json\"));\n-                            return columns;\n-                        }\n-                    }, pageRef)));\n+                        return columns;\n+                    }\n+                }, pageRef)));\n                 authProfileModal.header(new Model<>(getString(\"webAuthnDeviceCredentials\", model)));\n                 authProfileModal.show(true);\n             }"},{"sha":"a125278ef7b4cb1fdb29590c89f32156859bf2b9","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/authprofiles/AuthProfileItemDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileItemDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileItemDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileItemDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -120,7 +120,7 @@ public ActionsPanel<I> getActions(final IModel<I> model) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final I ignore) {\n                 send(AuthProfileItemDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n         }, ActionLink.ActionType.EDIT, AMEntitlement.AUTH_PROFILE_UPDATE);\n \n@@ -178,11 +178,11 @@ public IModel<I> model(final I object) {\n         }\n     }\n \n-    private class AuthProfileItemWizardBuilder extends AuthProfileWizardBuilder<I> {\n+    protected class AuthProfileItemWizardBuilder extends AuthProfileWizardBuilder<I> {\n \n-        private static final long serialVersionUID = 1L;\n+        private static final long serialVersionUID = -7174537333960225216L;\n \n-        AuthProfileItemWizardBuilder(final PageReference pageRef) {\n+        protected AuthProfileItemWizardBuilder(final PageReference pageRef) {\n             super(defaultItem(), new StepModel<>(), pageRef);\n         }\n "},{"sha":"68ea7862192f6c3136eaea624d2a3be3d1c55529","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -57,7 +57,7 @@\n public abstract class ClientAppDirectoryPanel<T extends ClientAppTO>\n         extends DirectoryPanel<T, T, DirectoryDataProvider<T>, ClientAppRestClient> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 4100100988730985059L;\n \n     private final ClientAppType type;\n \n@@ -123,8 +123,8 @@ public ActionsPanel<T> getActions(final IModel<T> model) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n                 send(ClientAppDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(\n-                        ClientAppRestClient.read(type, model.getObject().getKey()), target));\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                ClientAppRestClient.read(type, model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, AMEntitlement.CLIENTAPP_UPDATE);\n \n@@ -136,9 +136,9 @@ public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n                 model.setObject(ClientAppRestClient.read(type, model.getObject().getKey()));\n                 target.add(propertiesModal.setContent(new ModalDirectoryPanel<>(\n-                    propertiesModal,\n-                    new ClientAppPropertiesDirectoryPanel<>(\"panel\", propertiesModal, type, model, pageRef),\n-                    pageRef)));\n+                        propertiesModal,\n+                        new ClientAppPropertiesDirectoryPanel<>(\"panel\", propertiesModal, type, model, pageRef),\n+                        pageRef)));\n                 propertiesModal.header(new Model<>(getString(\"properties.title\", model)));\n                 propertiesModal.show(true);\n             }\n@@ -154,7 +154,7 @@ public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n                 clone.setKey(null);\n                 clone.setClientAppId(null);\n                 send(ClientAppDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(clone, target));\n+                        new AjaxWizard.EditItemActionEvent<>(clone, target));\n             }\n         }, ActionLink.ActionType.CLONE, AMEntitlement.CLIENTAPP_CREATE);\n "},{"sha":"6a17806fe35e0451f36483660ac0d5ae27881e54","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMAnyDirectoryPanelAdditionalActionLinksProvider.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionLinksProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionLinksProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMAnyDirectoryPanelAdditionalActionLinksProvider.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -68,15 +68,14 @@ public List<Action<UserTO>> get(\n             @Override\n             public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 IModel<AnyWrapper<UserTO>> formModel = new CompoundPropertyModel<>(\n-                    new AnyWrapper<>(model.getObject()));\n+                        new AnyWrapper<>(model.getObject()));\n                 modal.setFormModel(formModel);\n \n                 target.add(modal.setContent(new AnyStatusModal<>(\n-                    modal,\n-                    pageRef,\n-                    formModel.getObject().getInnerObject(),\n-                    \"resource\",\n-                    true)));\n+                        pageRef,\n+                        formModel.getObject().getInnerObject(),\n+                        \"resource\",\n+                        true)));\n \n                 modal.header(new Model<>(header));\n \n@@ -96,15 +95,14 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 model.setObject(new UserRestClient().read(model.getObject().getKey()));\n                 IModel<AnyWrapper<UserTO>> formModel = new CompoundPropertyModel<>(\n-                    new AnyWrapper<>(model.getObject()));\n+                        new AnyWrapper<>(model.getObject()));\n                 modal.setFormModel(formModel);\n \n                 target.add(modal.setContent(new AnyStatusModal<>(\n-                    modal,\n-                    pageRef,\n-                    formModel.getObject().getInnerObject(),\n-                    \"resource\",\n-                    false)));\n+                        pageRef,\n+                        formModel.getObject().getInnerObject(),\n+                        \"resource\",\n+                        false)));\n \n                 modal.header(new Model<>(header));\n \n@@ -146,7 +144,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                 model.setObject(new UserRestClient().read(model.getObject().getKey()));\n                 MergeLinkedAccountsWizardBuilder builder =\n-                    new MergeLinkedAccountsWizardBuilder(model, pageRef, parentPanel, modal);\n+                        new MergeLinkedAccountsWizardBuilder(model, pageRef, parentPanel, modal);\n                 builder.setEventSink(builder);\n                 target.add(modal.setContent(builder.build(BaseModal.CONTENT_ID, AjaxWizard.Mode.CREATE)));\n                 modal.header(new StringResourceModel(\"mergeLinkedAccounts.title\", model));\n@@ -179,15 +177,14 @@ public List<Action<GroupTO>> get(\n             @Override\n             public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 IModel<AnyWrapper<GroupTO>> formModel = new CompoundPropertyModel<>(\n-                    new AnyWrapper<>(modelObject));\n+                        new AnyWrapper<>(modelObject));\n                 modal.setFormModel(formModel);\n \n                 target.add(modal.setContent(new AnyStatusModal<>(\n-                    modal,\n-                    pageRef,\n-                    formModel.getObject().getInnerObject(),\n-                    \"resource\",\n-                    false)));\n+                        pageRef,\n+                        formModel.getObject().getInnerObject(),\n+                        \"resource\",\n+                        false)));\n \n                 modal.header(new Model<>(header));\n \n@@ -222,15 +219,14 @@ public List<Action<AnyObjectTO>> get(\n             @Override\n             public void onClick(final AjaxRequestTarget target, final AnyObjectTO ignore) {\n                 final IModel<AnyWrapper<AnyObjectTO>> formModel = new CompoundPropertyModel<>(\n-                    new AnyWrapper<>(modelObject));\n+                        new AnyWrapper<>(modelObject));\n                 modal.setFormModel(formModel);\n \n                 target.add(modal.setContent(new AnyStatusModal<>(\n-                    modal,\n-                    pageRef,\n-                    formModel.getObject().getInnerObject(),\n-                    \"resource\",\n-                    false)));\n+                        pageRef,\n+                        formModel.getObject().getInnerObject(),\n+                        \"resource\",\n+                        false)));\n \n                 modal.header(new Model<>(header));\n "},{"sha":"6432ce3122f824d781c1f243e119713e3660ba32","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ResourceDirectoryPanel.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -257,10 +257,10 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                target.add(schedTaskModal.setContent(new PullTasks(schedTaskModal, pageRef,\n-                        ((ResourceTO) model.getObject()).getKey())));\n-                schedTaskModal.header(new Model<>(MessageFormat.format(getString(\"task.pull.list\"),\n-                        ((ResourceTO) model.getObject()).getKey())));\n+                target.add(schedTaskModal.setContent(new PullTasks(\n+                        schedTaskModal, ((ResourceTO) model.getObject()).getKey(), pageRef)));\n+                schedTaskModal.header(new Model<>(\n+                        MessageFormat.format(getString(\"task.pull.list\"), ((ResourceTO) model.getObject()).getKey())));\n                 schedTaskModal.show(true);\n             }\n         }, ActionLink.ActionType.PULL_TASKS, IdRepoEntitlement.TASK_LIST);\n@@ -271,10 +271,10 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                target.add(schedTaskModal.setContent(new PushTasks(schedTaskModal, pageRef,\n-                        ((ResourceTO) model.getObject()).getKey())));\n-                schedTaskModal.header(new Model<>(MessageFormat.format(getString(\"task.push.list\"),\n-                        ((ResourceTO) model.getObject()).getKey())));\n+                target.add(schedTaskModal.setContent(new PushTasks(\n+                        schedTaskModal, ((ResourceTO) model.getObject()).getKey(), pageRef)));\n+                schedTaskModal.header(new Model<>(\n+                        MessageFormat.format(getString(\"task.push.list\"), ((ResourceTO) model.getObject()).getKey())));\n                 schedTaskModal.show(true);\n             }\n         }, ActionLink.ActionType.PUSH_TASKS, IdRepoEntitlement.TASK_LIST);\n@@ -286,8 +286,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 ResourceTO modelObject = ResourceRestClient.read(((ResourceTO) model.getObject()).getKey());\n-                target.add(propTaskModal.setContent(\n-                        new ResourceStatusModal(propTaskModal, pageRef, modelObject)));\n+                target.add(propTaskModal.setContent(new ResourceStatusModal(pageRef, modelObject)));\n                 propTaskModal.header(new Model<>(MessageFormat.format(getString(\"resource.reconciliation\"),\n                         ((ResourceTO) model.getObject()).getKey())));\n                 propTaskModal.show(true);"},{"sha":"0b8007c45b83b302dabdcc5adf764683215504b9","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":41,"deletions":46,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.rest.UserRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -73,8 +72,6 @@\n \n     private static final long serialVersionUID = -9148734710505211261L;\n \n-    private final BaseModal<?> baseModal;\n-\n     private final MultilevelPanel multiLevelPanelRef;\n \n     private final AnyTO anyTO;\n@@ -86,15 +83,13 @@\n     private final List<String> resources;\n \n     public AnyStatusDirectoryPanel(\n-            final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n             final PageReference pageRef,\n             final AnyTO anyTO,\n             final String itemKeyFieldName,\n             final boolean statusOnly) {\n \n         super(MultilevelPanel.FIRST_LEVEL_ID, pageRef);\n-        this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         this.statusOnly = statusOnly;\n         this.anyTO = anyTO;\n@@ -120,23 +115,23 @@ public AnyStatusDirectoryPanel(\n \n     @Override\n     protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<StatusBean, String> resultTableBuilder) {\n-        resultTableBuilder.setMultiLevelPanel(baseModal, multiLevelPanelRef);\n+        resultTableBuilder.setMultiLevelPanel(multiLevelPanelRef);\n     }\n \n     @Override\n     protected List<IColumn<StatusBean, String>> getColumns() {\n-        final List<IColumn<StatusBean, String>> columns = new ArrayList<>();\n+        List<IColumn<StatusBean, String>> columns = new ArrayList<>();\n \n         columns.add(new AbstractColumn<>(\n-            new StringResourceModel(\"resource\", this), \"resource\") {\n+                new StringResourceModel(\"resource\", this), \"resource\") {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<StatusBean>> cellItem,\n-                final String componentId,\n-                final IModel<StatusBean> model) {\n+                    final Item<ICellPopulator<StatusBean>> cellItem,\n+                    final String componentId,\n+                    final IModel<StatusBean> model) {\n \n                 cellItem.add(new Label(componentId, model.getObject().getResource()) {\n \n@@ -145,7 +140,7 @@ public void populateItem(\n                     @Override\n                     protected void onComponentTag(final ComponentTag tag) {\n                         if (anyTO.getResources().contains(model.getObject().getResource())\n-                            || Constants.SYNCOPE.equalsIgnoreCase(model.getObject().getResource())) {\n+                                || Constants.SYNCOPE.equalsIgnoreCase(model.getObject().getResource())) {\n \n                             super.onComponentTag(tag);\n                         } else {\n@@ -166,9 +161,9 @@ protected void onComponentTag(final ComponentTag tag) {\n \n                 @Override\n                 public void populateItem(\n-                    final Item<ICellPopulator<StatusBean>> cellItem,\n-                    final String componentId,\n-                    final IModel<StatusBean> model) {\n+                        final Item<ICellPopulator<StatusBean>> cellItem,\n+                        final String componentId,\n+                        final IModel<StatusBean> model) {\n \n                     if (model.getObject().isLinked()) {\n                         cellItem.add(StatusUtils.getStatusImage(componentId, model.getObject().getStatus()));\n@@ -194,8 +189,8 @@ public ActionsPanel<StatusBean> getActions(final IModel<StatusBean> model) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                     multiLevelPanelRef.next(bean.getResource(),\n-                        new ReconStatusPanel(bean.getResource(), anyTO.getType(), anyTO.getKey()),\n-                        target);\n+                            new ReconStatusPanel(bean.getResource(), anyTO.getType(), anyTO.getKey()),\n+                            target);\n                     target.add(multiLevelPanelRef);\n                     AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n                 }\n@@ -210,15 +205,15 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                     multiLevelPanelRef.next(\"PUSH \" + bean.getResource(),\n-                        new ReconTaskPanel(\n-                            bean.getResource(),\n-                            new PushTaskTO(),\n-                            anyTO.getType(),\n-                            anyTO.getKey(),\n-                            true,\n-                            multiLevelPanelRef,\n-                            pageRef),\n-                        target);\n+                            new ReconTaskPanel(\n+                                    bean.getResource(),\n+                                    new PushTaskTO(),\n+                                    anyTO.getType(),\n+                                    anyTO.getKey(),\n+                                    true,\n+                                    multiLevelPanelRef,\n+                                    pageRef),\n+                            target);\n                     target.add(multiLevelPanelRef);\n                     AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n                 }\n@@ -231,15 +226,15 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                     multiLevelPanelRef.next(\"PULL \" + bean.getResource(),\n-                        new ReconTaskPanel(\n-                            bean.getResource(),\n-                            new PullTaskTO(),\n-                            anyTO.getType(),\n-                            anyTO.getKey(),\n-                            true,\n-                            multiLevelPanelRef,\n-                            pageRef),\n-                        target);\n+                            new ReconTaskPanel(\n+                                    bean.getResource(),\n+                                    new PullTaskTO(),\n+                                    anyTO.getType(),\n+                                    anyTO.getKey(),\n+                                    true,\n+                                    multiLevelPanelRef,\n+                                    pageRef),\n+                            target);\n                     target.add(multiLevelPanelRef);\n                     AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n                 }\n@@ -256,17 +251,17 @@ public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n \n                 panel.add(new ActionLink<>() {\n \n-                              private static final long serialVersionUID = 5168094747477174155L;\n-\n-                              @Override\n-                              public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n-                                  multiLevelPanelRef.next(\"ACCOUNTS\",\n-                                      new LinkedAccountsStatusModalPanel(Model.of(UserTO.class.cast(anyTO)), pageRef),\n-                                      target);\n-                                  target.add(multiLevelPanelRef);\n-                                  AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n-                              }\n-                          }, ActionLink.ActionType.MANAGE_ACCOUNTS,\n+                    private static final long serialVersionUID = 5168094747477174155L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n+                        multiLevelPanelRef.next(\"ACCOUNTS\",\n+                                new LinkedAccountsStatusModalPanel(Model.of(UserTO.class.cast(anyTO)), pageRef),\n+                                target);\n+                        target.add(multiLevelPanelRef);\n+                        AnyStatusDirectoryPanel.this.getTogglePanel().close(target);\n+                    }\n+                }, ActionLink.ActionType.MANAGE_ACCOUNTS,\n                         String.format(\"%s,%s,%s\", IdRepoEntitlement.USER_READ, IdRepoEntitlement.USER_UPDATE,\n                                 IdMEntitlement.RESOURCE_GET_CONNOBJECT));\n             }"},{"sha":"166996da5b3c5dec2a572dfdc81563d19aa0a964","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusModal.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusModal.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.status.StatusBean;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -32,25 +31,23 @@\n     private static final long serialVersionUID = 1066124171682570080L;\n \n     public AnyStatusModal(\n-            final BaseModal<?> baseModal,\n             final PageReference pageReference,\n             final T anyTO,\n             final String itemKeyFieldName,\n             final boolean statusOnly) {\n \n-        super(baseModal, pageReference, anyTO, itemKeyFieldName, statusOnly);\n+        super(pageReference, anyTO, itemKeyFieldName, statusOnly);\n     }\n \n     @Override\n     protected DirectoryPanel<\n         StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>> getStatusDirectoryPanel(\n             final MultilevelPanel mlp,\n-            final BaseModal<?> baseModal,\n             final PageReference pageReference,\n             final T entity,\n             final String itemKeyFieldName,\n             final boolean statusOnly) {\n \n-        return new AnyStatusDirectoryPanel(baseModal, mlp, pageReference, entity, itemKeyFieldName, statusOnly);\n+        return new AnyStatusDirectoryPanel(mlp, pageReference, entity, itemKeyFieldName, statusOnly);\n     }\n }"},{"sha":"bff2bbba54421cccff0c63482b9e66ae4a2ebd09","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusDirectoryPanel.java","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.rest.UserRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -65,23 +64,19 @@\n \n     private static final long serialVersionUID = -9148734710505211261L;\n \n-    private final BaseModal<?> baseModal;\n-\n     private final MultilevelPanel multiLevelPanelRef;\n \n     private String type;\n \n     private final ResourceTO resource;\n \n     public ResourceStatusDirectoryPanel(\n-            final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n             final PageReference pageRef,\n             final String type,\n             final ResourceTO resource) {\n \n         super(MultilevelPanel.FIRST_LEVEL_ID, pageRef);\n-        this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         this.type = type;\n         this.resource = resource;\n@@ -92,7 +87,7 @@ public ResourceStatusDirectoryPanel(\n \n     @Override\n     protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<StatusBean, String> resultTableBuilder) {\n-        resultTableBuilder.setMultiLevelPanel(baseModal, multiLevelPanelRef);\n+        resultTableBuilder.setMultiLevelPanel(multiLevelPanelRef);\n     }\n \n     @Override\n@@ -121,8 +116,8 @@ protected boolean statusCondition(final StatusBean bean) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 multiLevelPanelRef.next(bean.getResource(),\n-                    new ReconStatusPanel(bean.getResource(), type, bean.getKey()),\n-                    target);\n+                        new ReconStatusPanel(bean.getResource(), type, bean.getKey()),\n+                        target);\n                 target.add(multiLevelPanelRef);\n                 getTogglePanel().close(target);\n             }\n@@ -140,15 +135,15 @@ protected boolean statusCondition(final StatusBean bean) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 multiLevelPanelRef.next(\"PUSH \" + bean.getResource(),\n-                    new ReconTaskPanel(\n-                        bean.getResource(),\n-                        new PushTaskTO(),\n-                        type,\n-                        bean.getKey(),\n-                        true,\n-                        multiLevelPanelRef,\n-                        pageRef),\n-                    target);\n+                        new ReconTaskPanel(\n+                                bean.getResource(),\n+                                new PushTaskTO(),\n+                                type,\n+                                bean.getKey(),\n+                                true,\n+                                multiLevelPanelRef,\n+                                pageRef),\n+                        target);\n                 target.add(multiLevelPanelRef);\n                 getTogglePanel().close(target);\n             }\n@@ -166,15 +161,15 @@ protected boolean statusCondition(final StatusBean bean) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final StatusBean bean) {\n                 multiLevelPanelRef.next(\"PULL \" + bean.getResource(),\n-                    new ReconTaskPanel(\n-                        bean.getResource(),\n-                        new PullTaskTO(),\n-                        type,\n-                        bean.getKey(),\n-                        true,\n-                        multiLevelPanelRef,\n-                        pageRef),\n-                    target);\n+                        new ReconTaskPanel(\n+                                bean.getResource(),\n+                                new PullTaskTO(),\n+                                type,\n+                                bean.getKey(),\n+                                true,\n+                                multiLevelPanelRef,\n+                                pageRef),\n+                        target);\n                 target.add(multiLevelPanelRef);\n                 getTogglePanel().close(target);\n             }"},{"sha":"3ab581b962b3d7990a10b4bdfeba2d4dee598f26","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ResourceStatusModal.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FResourceStatusModal.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n@@ -43,11 +42,10 @@ public class ResourceStatusModal extends StatusModal<ResourceTO> {\n     private Model<String> typeModel = new Model<>();\n \n     public ResourceStatusModal(\n-            final BaseModal<?> baseModal,\n-            final PageReference pageReference,\n+            final PageReference pageRef,\n             final ResourceTO resource) {\n \n-        super(baseModal, pageReference, resource, null, false);\n+        super(pageRef, resource, null, false);\n \n         List<String> availableAnyTypes = resource.getProvisions().stream().\n                 map(Provision::getAnyType).\n@@ -76,12 +74,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n     protected DirectoryPanel<\n         StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>> getStatusDirectoryPanel(\n             final MultilevelPanel mlp,\n-            final BaseModal<?> baseModal,\n             final PageReference pageReference,\n             final ResourceTO entity,\n             final String itemKeyFieldName,\n             final boolean statusOnly) {\n \n-        return new ResourceStatusDirectoryPanel(baseModal, mlp, pageReference, null, entity);\n+        return new ResourceStatusDirectoryPanel(mlp, pageReference, null, entity);\n     }\n }"},{"sha":"a723ffaea317aa287072e9597a3224694a2757ed","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/StatusModal.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FStatusModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FStatusModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FStatusModal.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -36,25 +36,22 @@\n     protected final DirectoryPanel<StatusBean, StatusBean, ?, ?> directoryPanel;\n \n     public StatusModal(\n-            final BaseModal<?> baseModal,\n             final PageReference pageReference,\n             final T entity,\n             final String itemKeyFieldName,\n             final boolean statusOnly) {\n \n         super(BaseModal.CONTENT_ID);\n \n-        final MultilevelPanel mlp = new MultilevelPanel(\"status\");\n+        MultilevelPanel mlp = new MultilevelPanel(\"status\");\n         mlp.setOutputMarkupId(true);\n-        this.directoryPanel = getStatusDirectoryPanel(\n-                mlp, baseModal, pageReference, entity, itemKeyFieldName, statusOnly);\n-        add(mlp.setFirstLevel(this.directoryPanel));\n+        directoryPanel = getStatusDirectoryPanel(mlp, pageReference, entity, itemKeyFieldName, statusOnly);\n+        add(mlp.setFirstLevel(directoryPanel));\n     }\n \n     protected abstract DirectoryPanel<\n         StatusBean, StatusBean, DirectoryDataProvider<StatusBean>, AbstractAnyRestClient<?>> getStatusDirectoryPanel(\n             MultilevelPanel mlp,\n-            BaseModal<?> baseModal,\n             PageReference pageReference,\n             T entity,\n             String itemKeyFieldName,"},{"sha":"02ae460c80ea648656d52e5436fb44ca62d85119","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TabularTopology.java","status":"modified","additions":1,"deletions":27,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTabularTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTabularTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTabularTopology.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,19 +18,14 @@\n  */\n package org.apache.syncope.client.console.topology;\n \n-import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.client.console.annotations.IdMPage;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.pages.Connectors;\n import org.apache.syncope.client.console.pages.Resources;\n import org.apache.syncope.client.console.panels.ConnidLocations;\n-import org.apache.syncope.client.console.tasks.SchedTasks;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n@@ -54,28 +49,7 @@ public TabularTopology() {\n     }\n \n     protected List<ITab> buildTabList() {\n-        final List<ITab> tabs = new ArrayList<>();\n-\n-        tabs.add(new AbstractTab(new Model<>(\"CustomTasks\")) {\n-\n-            private static final long serialVersionUID = -6815067322125799251L;\n-\n-            @Override\n-            public Panel getPanel(final String panelId) {\n-                BaseModal<Serializable> schedTaskModal = new BaseModal<>(Constants.OUTER) {\n-\n-                    private static final long serialVersionUID = -1673561782333149836L;\n-\n-                    @Override\n-                    protected void onConfigure() {\n-                        super.onConfigure();\n-                        setFooterVisible(false);\n-                    }\n-                };\n-                schedTaskModal.size(Modal.Size.Large);\n-                return new SchedTasks(schedTaskModal, getPageReference(), true, panelId);\n-            }\n-        });\n+        List<ITab> tabs = new ArrayList<>();\n \n         tabs.add(new AbstractTab(new Model<>(\"Resources\")) {\n "},{"sha":"aeb8ec3e6416bbc289fd7bce4c952f70cb90ef97","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":7,"deletions":29,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.client.console.tasks.PropagationTasks;\n import org.apache.syncope.client.console.tasks.PullTasks;\n import org.apache.syncope.client.console.tasks.PushTasks;\n-import org.apache.syncope.client.console.tasks.SchedTasks;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.IndicatingOnConfirmAjaxLink;\n import org.apache.syncope.client.console.wizards.resources.ConnectorWizardBuilder;\n@@ -62,7 +61,6 @@\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.model.StringResourceModel;\n \n public class TopologyTogglePanel extends TogglePanel<Serializable> {\n@@ -190,25 +188,6 @@ public void onClick(final AjaxRequestTarget target) {\n         fragment.add(reload);\n         MetaDataRoleAuthorizationStrategy.authorize(reload, RENDER, IdMEntitlement.CONNECTOR_RELOAD);\n \n-        AjaxLink<String> tasks = new IndicatingAjaxLink<>(\"tasks\") {\n-\n-            private static final long serialVersionUID = 3776750333491622263L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target) {\n-                target.add(schedTaskModal.setContent(new SchedTasks(schedTaskModal, pageRef)));\n-                schedTaskModal.header(new ResourceModel(\"task.custom.list\"));\n-                schedTaskModal.show(true);\n-            }\n-\n-            @Override\n-            public String getAjaxIndicatorMarkupId() {\n-                return Constants.VEIL_INDICATOR_MARKUP_ID;\n-            }\n-        };\n-        fragment.add(tasks);\n-        MetaDataRoleAuthorizationStrategy.authorize(tasks, RENDER, IdRepoEntitlement.TASK_LIST);\n-\n         return fragment;\n     }\n \n@@ -313,8 +292,8 @@ public void onClick(final AjaxRequestTarget target) {\n                         build(BaseModal.CONTENT_ID,\n                                 SyncopeConsoleSession.get().\n                                         owns(IdMEntitlement.CONNECTOR_UPDATE, connInstance.getAdminRealm())\n-                                        ? AjaxWizard.Mode.EDIT\n-                                        : AjaxWizard.Mode.READONLY)));\n+                                ? AjaxWizard.Mode.EDIT\n+                                : AjaxWizard.Mode.READONLY)));\n \n                 modal.header(\n                         new Model<>(MessageFormat.format(getString(\"connector.edit\"), connInstance.getDisplayName())));\n@@ -419,8 +398,8 @@ public void onClick(final AjaxRequestTarget target) {\n                         build(BaseModal.CONTENT_ID,\n                                 SyncopeConsoleSession.get().\n                                         owns(IdMEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())\n-                                        ? AjaxWizard.Mode.EDIT\n-                                        : AjaxWizard.Mode.READONLY)));\n+                                ? AjaxWizard.Mode.EDIT\n+                                : AjaxWizard.Mode.READONLY)));\n \n                 modal.header(new Model<>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n                 modal.show(true);\n@@ -441,8 +420,7 @@ public String getAjaxIndicatorMarkupId() {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 ResourceTO modelObject = ResourceRestClient.read(node.getKey());\n-                target.add(propTaskModal.setContent(\n-                        new ResourceStatusModal(propTaskModal, pageRef, modelObject)));\n+                target.add(propTaskModal.setContent(new ResourceStatusModal(pageRef, modelObject)));\n                 propTaskModal.header(\n                         new Model<>(MessageFormat.format(getString(\"resource.reconciliation\"), node.getKey())));\n                 propTaskModal.show(true);\n@@ -540,7 +518,7 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                target.add(schedTaskModal.setContent(new PullTasks(schedTaskModal, pageRef, node.getKey())));\n+                target.add(schedTaskModal.setContent(new PullTasks(schedTaskModal, node.getKey(), pageRef)));\n                 schedTaskModal.header(new Model<>(MessageFormat.format(getString(\"task.pull.list\"), node.getKey())));\n                 schedTaskModal.show(true);\n             }\n@@ -559,7 +537,7 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                target.add(schedTaskModal.setContent(new PushTasks(schedTaskModal, pageRef, node.getKey())));\n+                target.add(schedTaskModal.setContent(new PushTasks(schedTaskModal, node.getKey(), pageRef)));\n                 schedTaskModal.header(new Model<>(MessageFormat.format(getString(\"task.push.list\"), node.getKey())));\n                 schedTaskModal.show(true);\n             }"},{"sha":"64be1d7e3bd055884751d92e677ea9f158518f74","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel.html","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -94,9 +94,6 @@\n         <wicket:enclosure child=\"reload\">\n           <li><a href=\"#\" wicket:id=\"reload\"><i class=\"fa fa-sync\"></i><wicket:message key=\"connectors.reload\"/></a></li>\n         </wicket:enclosure>\n-        <wicket:enclosure child=\"tasks\">\n-          <li><a href=\"#\" wicket:id=\"tasks\"><i class=\"fa fa-tasks\"></i><wicket:message key=\"task.custom.list\"/></a></li>\n-        </wicket:enclosure>\n       </ul>\n     </wicket:fragment>\n "},{"sha":"6ade698bec6c767c992bd4f223e91de98fd39ca3","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -31,8 +31,6 @@ resource.menu.provision=Edit provision rules\n resource.menu.explore=Explore resource\n resource.menu.history=Configuration history\n resource.menu.clone=Clone resource\n-\n-task.custom.list=Custom tasks\n task.propagation.list=Propagation tasks {0}\n task.pull.list=Pull tasks {0}\n task.push.list=Push tasks {0}"},{"sha":"fde8651859d8392fd4630fced57c958238fc2a5e","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel_fr_CA.properties","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -26,18 +26,17 @@ resource.clone=Cloner la ressource {0}\n resource.menu.add=Ajouter une nouvelle ressource\n resource.menu.remove=Supprimer une ressource\n resource.menu.edit=Modifier la ressource\n-resource.menu.provision=Modifier les r�gles de provision\n+resource.menu.provision=Modifier les r\\u00e8gles de provision\n resource.menu.explore=Explorer la ressource\n resource.menu.history=Historique de configuration\n resource.menu.clone=Cloner la ressource\n-task.custom.list=T�ches personnalis�es\n-task.propagation.list=T�ches de propagation {0}\n-task.pull.list=T�ches de traction {0}\n-task.push.list=T�ches de pouss�e {0}\n+task.propagation.list=T\\u00e2ches de propagation {0}\n+task.pull.list=T\\u00e2ches de traction {0}\n+task.push.list=T\\u00e2ches de pouss\\u00e9e {0}\n resource.explore.list=Explorer ${key}\n connectors.reload=Recharger tous les connecteurs\n-resource.reconciliation=R�conciliation {0}\n+resource.reconciliation=R\\u00e9conciliation {0}\n resource.menu.reconciliation=Rapprochement\n-resource.menu.push.list=T�ches de pouss�e\n-resource.menu.pull.list=T�ches d'extraction\n-resource.menu.propagation.list=T�ches de propagation\n+resource.menu.push.list=T\\u00e2ches de pouss\\u00e9e\n+resource.menu.pull.list=T\\u00e2ches d'extraction\n+resource.menu.propagation.list=T\\u00e2ches de propagation"},{"sha":"618ad09663a638885c660b79d910cfb933491e83","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel_it.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -31,8 +31,6 @@ resource.menu.provision=Modifica regole di provisioning\n resource.menu.explore=Esplora risorsa\n resource.menu.history=Storico delle configurazioni\n resource.menu.clone=Duplica risorsa\n-\n-task.custom.list=Task personalizzati\n task.propagation.list=Task di propagazione {0}\n task.pull.list=Pull task {0}\n task.push.list=Push task {0}"},{"sha":"befad7fc37121c9261f7eae0055107c2e66dcfd6","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel_ja.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -31,8 +31,6 @@ resource.menu.provision=\\u30d7\\u30ed\\u30d3\\u30b8\\u30e7\\u30f3\\u30eb\\u30fc\\u30eb\\u\n resource.menu.explore=\\u30ea\\u30bd\\u30fc\\u30b9\\u3092\\u63a2\\u7d22\n resource.menu.history=\\u8a2d\\u5b9a\\u5c65\\u6b74\n resource.menu.clone=\\u30ea\\u30bd\\u30fc\\u30b9\\u3092\\u8907\\u88fd\n-\n-task.custom.list=\\u30ab\\u30b9\\u30bf\\u30e0\\u30bf\\u30b9\\u30af\n task.propagation.list=\\u4f1d\\u64ad\\u30bf\\u30b9\\u30af {0}\n task.pull.list=\\u30d7\\u30eb\\u30bf\\u30b9\\u30af {0}\n task.push.list=\\u30d7\\u30c3\\u30b7\\u30e5\\u30bf\\u30b9\\u30af {0}"},{"sha":"7bf53cd4e62b086f7ff3d174da35cac1a7e47278","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel_pt_BR.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -31,8 +31,6 @@ resource.menu.provision=Alterar regras de provision\n resource.menu.explore=Explorar recurso\n resource.menu.history=Hist\\u00f3rico de configura\\u00e7\\u00e3o\n resource.menu.clone=Clone recurso\n-\n-task.custom.list=Custom tasks\n task.propagation.list=Propagation tasks {0}\n task.pull.list=Pull tasks {0}\n task.push.list=Push tasks {0}"},{"sha":"b017f0ecf3689449f5ade4b13ca21ab293cb0c1b","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/topology/TopologyTogglePanel_ru.properties","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,8 +32,6 @@ resource.menu.provision=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u043f\\\n resource.menu.explore=\\u041f\\u0440\\u043e\\u0441\\u043c\\u043e\\u0442\\u0440 \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\\u0430\n resource.menu.history=\\u0418\\u0441\\u0442\\u043e\\u0440\\u0438\\u044f \\u043a\\u043e\\u043d\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u0438\n resource.menu.clone=\\u0414\\u0443\\u0431\\u043b\\u0438\\u0440\\u043e\\u0432\\u0430\\u0442\\u044c \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\n-\n-task.custom.list=\\u041f\\u043e\\u043b\\u044c\\u0437\\u043e\\u0432\\u0430\\u0442\\u0435\\u043b\\u044c\\u0441\\u043a\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\n task.propagation.list=\\u0417\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u044f \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0439 {0}\n task.pull.list=\\u0417\\u0430\\u0434\\u0430\\u0447\\u0438 \\u043f\\u043e\\u043b\\u0443\\u0447\\u0435\\u043d\\u0438\\u044f \\u0434\\u0430\\u043d\\u043d\\u044b\\u0445 {0}\n task.push.list=\\u0417\\u0430\\u0434\\u0430\\u0447\\u0438 \\u043f\\u0435\\u0440\\u0435\\u0434\\u0430\\u0447\\u0438 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0445 {0}"},{"sha":"cf538151ace80c35201d3e80efe22a01adc97100","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDetails.java","status":"modified","additions":20,"deletions":18,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -74,6 +74,7 @@\n     private static final SortParam<String> REST_SORT = new SortParam<>(\"event_date\", false);\n \n     private EntityTO currentEntity;\n+\n     private AuditElements.EventCategoryType type;\n \n     private String category;\n@@ -90,7 +91,7 @@\n \n     private AjaxDropDownChoicePanel<AuditEntry> afterVersionsPanel;\n \n-    private AjaxLink<Void> restore;\n+    private final AjaxLink<Void> restore;\n \n     private static class SortingNodeFactory extends JsonNodeFactory {\n \n@@ -156,6 +157,7 @@ private static <T> Class<T> cast(final Class<?> aClass) {\n             registerModule(new SimpleModule().addSerializer(new SortedSetJsonSerializer(cast(Set.class)))).\n             registerModule(new JavaTimeModule());\n \n+    @SuppressWarnings(\"unchecked\")\n     public AuditHistoryDetails(\n             final String id,\n             final EntityTO currentEntity,\n@@ -187,10 +189,10 @@ public String getIdValue(final AuditEntry value, final int i) {\n \n             @Override\n             public AuditEntry getObject(final String id, final IModel<? extends List<? extends AuditEntry>> choices) {\n-                return choices.getObject().stream()\n-                        .filter(c -> StringUtils.isNotBlank(id)\n-                                && Long.valueOf(id) == c.getDate().toInstant().toEpochMilli()).findFirst()\n-                        .orElse(null);\n+                return choices.getObject().stream().\n+                        filter(c -> StringUtils.isNotBlank(id)\n+                        && Long.parseLong(id) == c.getDate().toInstant().toEpochMilli()).\n+                        findFirst().orElse(null);\n             }\n         };\n         // add also select to choose with which version compare\n@@ -213,10 +215,10 @@ protected void onEvent(final AjaxRequestTarget target) {\n                 AuditHistoryDetails.this.addOrReplace(new JsonDiffPanel(toJSON(beforeEntry, reference),\n                         toJSON(afterEntry, reference)));\n                 // change after audit entries in order to match only the ones newer than the current after one\n-                afterVersionsPanel.setChoices(auditEntries.stream().filter(ae ->\n-                                ae.getDate().isAfter(beforeEntry.getDate())\n-                                        || ae.getDate().isEqual(beforeEntry.getDate()))\n-                        .collect(Collectors.toList()));\n+                afterVersionsPanel.setChoices(auditEntries.stream().\n+                        filter(ae -> ae.getDate().isAfter(beforeEntry.getDate())\n+                        || ae.getDate().isEqual(beforeEntry.getDate())).\n+                        collect(Collectors.toList()));\n                 // set the new after entry\n                 afterVersionsPanel.setModelObject(afterEntry);\n                 target.add(AuditHistoryDetails.this);\n@@ -232,13 +234,13 @@ protected void onEvent(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onEvent(final AjaxRequestTarget target) {\n-                AuditHistoryDetails.this.addOrReplace(\n-                        new JsonDiffPanel(toJSON(beforeVersionsPanel.getModelObject() == null\n+                AuditHistoryDetails.this.addOrReplace(new JsonDiffPanel(\n+                        toJSON(beforeVersionsPanel.getModelObject() == null\n                                 ? latestAuditEntry\n                                 : beforeVersionsPanel.getModelObject(), reference),\n-                                toJSON(afterVersionsPanel.getModelObject() == null\n-                                        ? after\n-                                        : buildAfterAuditEntry(afterVersionsPanel.getModelObject()), reference)));\n+                        toJSON(afterVersionsPanel.getModelObject() == null\n+                                ? after\n+                                : buildAfterAuditEntry(afterVersionsPanel.getModelObject()), reference)));\n                 target.add(AuditHistoryDetails.this);\n             }\n         });\n@@ -268,7 +270,7 @@ public void onClick(final AjaxRequestTarget target) {\n         };\n         MetaDataRoleAuthorizationStrategy.authorize(restore, ENABLE, auditRestoreEntitlement);\n         add(restore);\n-        \n+\n         initDiff();\n     }\n \n@@ -294,9 +296,9 @@ protected void initDiff() {\n         addOrReplace(new JsonDiffPanel(toJSON(latestAuditEntry, reference), toJSON(after, reference)));\n \n         beforeVersionsPanel.setChoices(auditEntries);\n-        afterVersionsPanel.setChoices(auditEntries.stream().filter(ae ->\n-                ae.getDate().isAfter(after.getDate()) || ae.getDate().isEqual(after.getDate())).collect(\n-                Collectors.toList()));\n+        afterVersionsPanel.setChoices(auditEntries.stream().\n+                filter(ae -> ae.getDate().isAfter(after.getDate()) || ae.getDate().isEqual(after.getDate())).\n+                collect(Collectors.toList()));\n \n         beforeVersionsPanel.setModelObject(latestAuditEntry);\n         afterVersionsPanel.setModelObject(after);"},{"sha":"5f6c181315466271904b178ee3eb801ec939b718","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryModal.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -37,7 +37,7 @@ public AuditHistoryModal(\n \n         super(BaseModal.CONTENT_ID);\n \n-        add(new AuditHistoryDetails(\n+        add(new AuditHistoryDetails<>(\n                 \"history\",\n                 entity,\n                 type,"},{"sha":"6af40b7ff1b63e73af5d1013bf111a3b9c5f2849","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoConstants.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -66,6 +66,8 @@ public final class IdRepoConstants {\n \n     public static final String PREF_ACCESS_TOKEN_PAGINATOR_ROWS = \"accessToken.paginator.rows\";\n \n+    public static final String PREF_COMMAND_PAGINATOR_ROWS = \"command.paginator.rows\";\n+\n     public static final String PREF_AUDIT_HISTORY_PAGINATOR_ROWS = \"audit.history.paginator.rows\";\n \n     public static final String PREF_NOTIFICATION_PAGINATOR_ROWS = \"notification.paginator.rows\";"},{"sha":"121c9fd2c2025fb4b072ea031c8e40469e8b776d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -123,6 +123,10 @@ public String getGroovyTemplateClassName(final String implementationType) {\n                 templateClassName = \"MyItemTransformer\";\n                 break;\n \n+            case IdRepoImplementationType.COMMAND:\n+                templateClassName = \"MyCommand\";\n+                break;\n+\n             default:\n         }\n \n@@ -163,7 +167,7 @@ public IModel<List<String>> getTaskJobDelegates() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n-                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n+                        map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"e35627bd8354689650f40b74e33234904b057d46","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/KeywordSearchEvent.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FKeywordSearchEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FKeywordSearchEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FKeywordSearchEvent.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+\n+public class KeywordSearchEvent implements Serializable {\n+\n+    private static final long serialVersionUID = 203866008113326777L;\n+\n+    private final AjaxRequestTarget target;\n+\n+    private final String keyword;\n+\n+    public KeywordSearchEvent(final AjaxRequestTarget target, final String keyword) {\n+        this.target = target;\n+        this.keyword = keyword;\n+    }\n+\n+    public AjaxRequestTarget getTarget() {\n+        return target;\n+    }\n+\n+    public String getKeyword() {\n+        return keyword;\n+    }\n+}"},{"sha":"6ce77c97fc50ae3ba12e4f8d526f7948fdedd016","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/LinkedAccountPlainAttrProperty.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FLinkedAccountPlainAttrProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FLinkedAccountPlainAttrProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FLinkedAccountPlainAttrProperty.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,20 +18,15 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-@XmlRootElement\n-@XmlType\n public class LinkedAccountPlainAttrProperty implements Serializable, Comparable<LinkedAccountPlainAttrProperty> {\n \n     private static final long serialVersionUID = -5309050337675968950L;\n@@ -50,9 +45,8 @@ public void setSchema(final String schema) {\n         this.schema = schema;\n     }\n \n-    @XmlElementWrapper(name = \"values\")\n-    @XmlElement(name = \"value\")\n-    @JsonProperty(\"values\")\n+    @JacksonXmlElementWrapper(localName = \"values\")\n+    @JacksonXmlProperty(localName = \"value\")\n     public List<String> getValues() {\n         return values;\n     }"},{"sha":"0af41223fa8755eccd1e3650b219b918263f21ed","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationTasks.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationTasks.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -68,10 +68,10 @@ private NotificationTasks(\n             private static final long serialVersionUID = -2195387360323687302L;\n \n             @Override\n-            protected void viewTask(final NotificationTaskTO taskTO, final AjaxRequestTarget target) {\n+            protected void viewTaskExecs(final NotificationTaskTO taskTO, final AjaxRequestTarget target) {\n                 mlp.next(\n                         new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                        new TaskExecutionDetails<>(null, taskTO, pageReference), target);\n+                        new TaskExecutionDetails<>(taskTO, pageReference), target);\n             }\n \n             @Override\n@@ -82,7 +82,6 @@ protected void viewMailBody(\n                         new StringResourceModel(\"content\", this).setParameters(format.name()).getObject(),\n                         new NotificationMailBodyDetails(content), target);\n             }\n-\n         });\n     }\n }"},{"sha":"b60d9c7aa560e4e7c0fbc0fa798fa3aabcc9aa3f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":49,"deletions":40,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -122,12 +122,12 @@ public BasePage(final PageParameters parameters) {\n             public void onClick() {\n                 try {\n                     HttpResourceStream stream = new HttpResourceStream(\n-                        new ResponseHolder(SyncopeRestClient.exportInternalStorageContent()));\n+                            new ResponseHolder(SyncopeRestClient.exportInternalStorageContent()));\n \n                     ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n                     rsrh.setFileName(stream.getFilename() == null\n-                        ? SyncopeConsoleSession.get().getDomain() + \"Content.xml\"\n-                        : stream.getFilename());\n+                            ? SyncopeConsoleSession.get().getDomain() + \"Content.xml\"\n+                            : stream.getFilename());\n                     rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);\n                     rsrh.setCacheDuration(Duration.ZERO);\n \n@@ -153,15 +153,21 @@ public void onClick() {\n \n         liContainer.add(link);\n \n+        liContainer = new WebMarkupContainer(getLIContainerId(\"engagements\"));\n+        body.add(liContainer);\n+        link = BookmarkablePageLinkBuilder.build(\"engagements\", Engagements.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER,\n+                String.format(\"%s,%s\", IdRepoEntitlement.TASK_LIST, IdRepoEntitlement.IMPLEMENTATION_LIST));\n+        liContainer.add(link);\n+\n         liContainer = new WebMarkupContainer(getLIContainerId(\"reports\"));\n         body.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"reports\", Reports.class);\n         MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.REPORT_LIST);\n         liContainer.add(link);\n \n         List<Class<? extends BasePage>> idmPageClasses = SyncopeWebApplication.get().getLookup().getIdMPageClasses();\n-        ListView<Class<? extends BasePage>> idmPages = new ListView<>(\n-            \"idmPages\", idmPageClasses) {\n+        ListView<Class<? extends BasePage>> idmPages = new ListView<>(\"idmPages\", idmPageClasses) {\n \n             private static final long serialVersionUID = 4949588177564901031L;\n \n@@ -200,8 +206,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         body.add(idmPages);\n \n         List<Class<? extends BasePage>> amPageClasses = SyncopeWebApplication.get().getLookup().getAMPageClasses();\n-        ListView<Class<? extends BasePage>> amPages = new ListView<>(\n-            \"amPages\", amPageClasses) {\n+        ListView<Class<? extends BasePage>> amPages = new ListView<>(\"amPages\", amPageClasses) {\n \n             private static final long serialVersionUID = -9112553137618363167L;\n \n@@ -337,6 +342,8 @@ public void onClick(final AjaxRequestTarget target) {\n         delegationsContainer.add(new Label(\"delegationsHeader\", new ResourceModel(\"delegations\")));\n         delegationsContainer.add(new ListView<>(\"delegations\", SyncopeConsoleSession.get().getDelegations()) {\n \n+            private static final long serialVersionUID = -9112553137618363167L;\n+\n             @Override\n             protected void populateItem(final ListItem<String> item) {\n                 item.add(new DelegationSelectionPanel(\"delegation\", item.getModelObject()));\n@@ -345,6 +352,8 @@ protected void populateItem(final ListItem<String> item) {\n \n         body.add(new IndicatingOnConfirmAjaxLink<String>(\"endDelegation\", \"confirmDelegation\", true) {\n \n+            private static final long serialVersionUID = 1632838687547839512L;\n+\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 SyncopeConsoleSession.get().setDelegatedBy(null);\n@@ -467,15 +476,15 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         List<Class<? extends ExtAlertWidget<?>>> extAlertWidgetClasses =\n                 SyncopeWebApplication.get().getLookup().getExtAlertWidgetClasses();\n         ListView<Class<? extends ExtAlertWidget<?>>> extAlertWidgets = new ListView<>(\n-            \"extAlertWidgets\", extAlertWidgetClasses) {\n+                \"extAlertWidgets\", extAlertWidgetClasses) {\n \n             private static final long serialVersionUID = -9112553137618363167L;\n \n             @Override\n             protected void populateItem(final ListItem<Class<? extends ExtAlertWidget<?>>> item) {\n                 try {\n                     Constructor<? extends ExtAlertWidget<?>> constructor =\n-                        item.getModelObject().getDeclaredConstructor(String.class, PageReference.class);\n+                            item.getModelObject().getDeclaredConstructor(String.class, PageReference.class);\n                     ExtAlertWidget<?> widget = constructor.newInstance(\"extAlertWidget\", getPageReference());\n \n                     SyncopeConsoleSession.get().setAttribute(widget.getClass().getName(), widget);\n@@ -497,46 +506,46 @@ protected void populateItem(final ListItem<Class<? extends ExtAlertWidget<?>>> i\n         body.add(extensionsLI);\n \n         ListView<Class<? extends BaseExtPage>> extPages =\n-            new ListView<>(\"extPages\", extPageClasses) {\n+                new ListView<>(\"extPages\", extPageClasses) {\n \n-                private static final long serialVersionUID = 4949588177564901031L;\n+            private static final long serialVersionUID = 4949588177564901031L;\n \n-                @Override\n-                protected void populateItem(final ListItem<Class<? extends BaseExtPage>> item) {\n-                    WebMarkupContainer containingLI = new WebMarkupContainer(\"extPageLI\");\n-                    item.add(containingLI);\n+            @Override\n+            protected void populateItem(final ListItem<Class<? extends BaseExtPage>> item) {\n+                WebMarkupContainer containingLI = new WebMarkupContainer(\"extPageLI\");\n+                item.add(containingLI);\n \n-                    ExtPage ann = item.getModelObject().getAnnotation(ExtPage.class);\n+                ExtPage ann = item.getModelObject().getAnnotation(ExtPage.class);\n \n-                    BookmarkablePageLink<Page> link = new BookmarkablePageLink<>(\"extPage\", item.getModelObject());\n-                    link.add(new Label(\"extPageLabel\", ann.label()));\n-                    if (StringUtils.isNotBlank(ann.listEntitlement())) {\n-                        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, ann.listEntitlement());\n-                    }\n-                    if (item.getModelObject().equals(BasePage.this.getClass())) {\n-                        link.add(new Behavior() {\n+                BookmarkablePageLink<Page> link = new BookmarkablePageLink<>(\"extPage\", item.getModelObject());\n+                link.add(new Label(\"extPageLabel\", ann.label()));\n+                if (StringUtils.isNotBlank(ann.listEntitlement())) {\n+                    MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, ann.listEntitlement());\n+                }\n+                if (item.getModelObject().equals(BasePage.this.getClass())) {\n+                    link.add(new Behavior() {\n \n-                            private static final long serialVersionUID = 1469628524240283489L;\n+                        private static final long serialVersionUID = 1469628524240283489L;\n \n-                            @Override\n-                            public void renderHead(final Component component, final IHeaderResponse response) {\n-                                response.render(OnDomReadyHeaderItem.forScript(\n+                        @Override\n+                        public void renderHead(final Component component, final IHeaderResponse response) {\n+                            response.render(OnDomReadyHeaderItem.forScript(\n                                     \"$('#extensionsLink').addClass('active')\"));\n-                            }\n-\n-                            @Override\n-                            public void onComponentTag(final Component component, final ComponentTag tag) {\n-                                tag.append(\"class\", \"active\", \" \");\n-                            }\n-                        });\n-                    }\n-                    containingLI.add(link);\n+                        }\n \n-                    Label extPageIcon = new Label(\"extPageIcon\");\n-                    extPageIcon.add(new AttributeModifier(\"class\", \"nav-icon \" + ann.icon()));\n-                    link.add(extPageIcon);\n+                        @Override\n+                        public void onComponentTag(final Component component, final ComponentTag tag) {\n+                            tag.append(\"class\", \"active\", \" \");\n+                        }\n+                    });\n                 }\n-            };\n+                containingLI.add(link);\n+\n+                Label extPageIcon = new Label(\"extPageIcon\");\n+                extPageIcon.add(new AttributeModifier(\"class\", \"nav-icon \" + ann.icon()));\n+                link.add(extPageIcon);\n+            }\n+        };\n         extPages.setRenderBodyOnly(true);\n         extPages.setOutputMarkupId(true);\n         extensionsLI.add(extPages);"},{"sha":"249e5fc1393d6b4b7f59d4eccc074e5d80d8bd85","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Engagements.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n+import org.apache.syncope.client.console.panels.CommandsPanel;\n+import org.apache.syncope.client.console.panels.MultilevelPanel;\n+import org.apache.syncope.client.console.tasks.MacroTaskDirectoryPanel;\n+import org.apache.syncope.client.console.tasks.SchedTaskDirectoryPanel;\n+import org.apache.syncope.client.console.tasks.TaskExecutionDetails;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+public class Engagements extends BasePage {\n+\n+    private static final long serialVersionUID = -1100228004207271271L;\n+\n+    public Engagements(final PageParameters parameters) {\n+        super(parameters);\n+\n+        body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n+\n+        WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+        content.setOutputMarkupId(true);\n+        content.setMarkupId(\"engagements\");\n+        content.add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList()));\n+        body.add(content);\n+    }\n+\n+    private List<ITab> buildTabList() {\n+        List<ITab> tabs = new ArrayList<>();\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"schedTasks\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                MultilevelPanel mlp = new MultilevelPanel(panelId);\n+                mlp.setFirstLevel(new SchedTaskDirectoryPanel<>(MultilevelPanel.FIRST_LEVEL_ID,\n+                        null, null, TaskType.SCHEDULED, new SchedTaskTO(), getPageReference(), true) {\n+\n+                    private static final long serialVersionUID = -2195387360323687302L;\n+\n+                    @Override\n+                    protected void viewTaskExecs(final SchedTaskTO taskTO, final AjaxRequestTarget target) {\n+                        mlp.next(\n+                                new StringResourceModel(\n+                                        \"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n+                                new TaskExecutionDetails<>(taskTO, pageRef),\n+                                target);\n+                    }\n+                });\n+                return mlp;\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"commands\")) {\n+\n+            private static final long serialVersionUID = -6815067322125799251L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new CommandsPanel(panelId, getPageReference());\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(new ResourceModel(\"macroTasks\")) {\n+\n+            private static final long serialVersionUID = 5211692813425391144L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                MultilevelPanel mlp = new MultilevelPanel(panelId);\n+                mlp.setFirstLevel(new MacroTaskDirectoryPanel(mlp, getPageReference()));\n+                return mlp;\n+            }\n+        });\n+\n+        return tabs;\n+    }\n+}"},{"sha":"d886d61a2d33a6383b2435772936e33ecfe0f50f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Reports.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -54,7 +54,7 @@ public Reports(final PageParameters parameters) {\n     }\n \n     private List<ITab> buildTabList() {\n-        final List<ITab> tabs = new ArrayList<>();\n+        List<ITab> tabs = new ArrayList<>();\n \n         tabs.add(new AbstractTab(new ResourceModel(\"reports\")) {\n \n@@ -68,7 +68,7 @@ public Panel getPanel(final String panelId) {\n                     private static final long serialVersionUID = -2195387360323687302L;\n \n                     @Override\n-                    protected void viewReport(final ReportTO reportTO, final AjaxRequestTarget target) {\n+                    protected void viewReportExecs(final ReportTO reportTO, final AjaxRequestTarget target) {\n                         mlp.next(\n                                 new StringResourceModel(\"report.view\", this, new Model<>(reportTO)).getObject(),\n                                 new ReportExecutionDetails(reportTO, getPageReference()),\n@@ -88,6 +88,7 @@ public Panel getPanel(final String panelId) {\n                 return new ReportTemplateDirectoryPanel(panelId, getPageReference());\n             }\n         });\n+\n         return tabs;\n     }\n }"},{"sha":"2164a5fce95194ca56bc4e7b0e355ed3eaa141cb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -82,6 +82,7 @@ protected String paginatorRowsKey() {\n     @Override\n     protected List<IColumn<AccessTokenTO, String>> getColumns() {\n         List<IColumn<AccessTokenTO, String>> columns = new ArrayList<>();\n+\n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n                 Constants.KEY_FIELD_NAME,\n@@ -118,7 +119,7 @@ public void populateItem(\n \n     @Override\n     public ActionsPanel<AccessTokenTO> getActions(final IModel<AccessTokenTO> model) {\n-        final ActionsPanel<AccessTokenTO> panel = super.getActions(model);\n+        ActionsPanel<AccessTokenTO> panel = super.getActions(model);\n \n         panel.add(new ActionLink<>() {\n \n@@ -146,7 +147,7 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         return List.of();\n     }\n \n-    public abstract static class Builder\n+    public static class Builder\n             extends DirectoryPanel.Builder<AccessTokenTO, AccessTokenTO, AccessTokenRestClient> {\n \n         private static final long serialVersionUID = 5088962796986706805L;\n@@ -165,8 +166,6 @@ protected static class AccessTokenDataProvider extends DirectoryDataProvider<Acc\n \n         private static final long serialVersionUID = 6267494272884913376L;\n \n-        private final AccessTokenRestClient restClient = new AccessTokenRestClient();\n-\n         public AccessTokenDataProvider(final int paginatorRows) {\n             super(paginatorRows);\n "},{"sha":"343710b916912b8b419de08815204e6898118a31","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AjaxDataTablePanel.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -80,8 +80,6 @@\n \n         private MultilevelPanel multiLevelPanel;\n \n-        private BaseModal<?> baseModal;\n-\n         public Builder(final ISortableDataProvider<T, S> provider, final PageReference pageRef) {\n             this.dataProvider = provider;\n             this.pageRef = pageRef;\n@@ -152,9 +150,8 @@ private boolean isBatchEnabled() {\n             return checkBoxEnabled && batchExecutor != null && !batches.isEmpty();\n         }\n \n-        public void setMultiLevelPanel(final BaseModal<?> baseModal, final MultilevelPanel multiLevelPanel) {\n+        public void setMultiLevelPanel(final MultilevelPanel multiLevelPanel) {\n             this.multiLevelPanel = multiLevelPanel;\n-            this.baseModal = baseModal;\n         }\n \n         protected ActionsPanel<T> getActions(final IModel<T> model) {\n@@ -213,7 +210,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         }\n \n         dataTable = new AjaxFallbackDataTable<>(\n-            \"dataTable\", builder.columns, builder.dataProvider, builder.rowsPerPage, builder.container) {\n+                \"dataTable\", builder.columns, builder.dataProvider, builder.rowsPerPage, builder.container) {\n \n             private static final long serialVersionUID = -7370603907251344224L;\n "},{"sha":"85322a8423e138bb2af233ea789c18013cb93d7e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/CommandDirectoryPanel.java","status":"added","additions":190,"deletions":0,"changes":190,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.commons.KeywordSearchEvent;\n+import org.apache.syncope.client.console.panels.CommandDirectoryPanel.CommandDataProvider;\n+import org.apache.syncope.client.console.rest.CommandRestClient;\n+import org.apache.syncope.client.console.tasks.ExecMessage;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.console.wizards.CommandWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class CommandDirectoryPanel\n+        extends DirectoryPanel<CommandTO, CommandTO, CommandDataProvider, CommandRestClient> {\n+\n+    private static final long serialVersionUID = -8723262033772725592L;\n+\n+    private String keyword;\n+\n+    public CommandDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, pageRef);\n+        disableCheckBoxes();\n+\n+        modal.size(Modal.Size.Large);\n+\n+        modal.setWindowClosedCallback(target -> {\n+            updateResultTable(target);\n+            modal.show(false);\n+        });\n+\n+        addNewItemPanelBuilder(new CommandWizardBuilder(new CommandTO(), pageRef), false);\n+\n+        setShowResultPanel(true);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected CommandDataProvider dataProvider() {\n+        return new CommandDataProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return IdRepoConstants.PREF_COMMAND_PAGINATOR_ROWS;\n+    }\n+\n+    @Override\n+    protected List<IColumn<CommandTO, String>> getColumns() {\n+        List<IColumn<CommandTO, String>> columns = new ArrayList<>();\n+\n+        columns.add(new PropertyColumn<>(\n+                new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME, Constants.KEY_FIELD_NAME));\n+\n+        columns.add(new AbstractColumn<>(new ResourceModel(\"arguments\"), \"arguments\") {\n+\n+            private static final long serialVersionUID = -4008579357070833846L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<CommandTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<CommandTO> rowModel) {\n+\n+                cellItem.add(new Label(componentId, rowModel.getObject().getArgs().getClass().getName()));\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected ActionsPanel<CommandTO> getActions(final IModel<CommandTO> model) {\n+        ActionsPanel<CommandTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final CommandTO ignore) {\n+                send(CommandDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+            }\n+        }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.COMMAND_RUN);\n+\n+        return panel;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    protected Panel customResultBody(final String panelId, final CommandTO item, final Serializable result) {\n+        return new ExecMessage(panelId, (String) result);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof KeywordSearchEvent) {\n+            KeywordSearchEvent payload = KeywordSearchEvent.class.cast(event.getPayload());\n+\n+            keyword = payload.getKeyword();\n+            if (StringUtils.isNotBlank(keyword)) {\n+                if (!StringUtils.startsWith(keyword, \"*\")) {\n+                    keyword = \"*\" + keyword;\n+                }\n+                if (!StringUtils.endsWith(keyword, \"*\")) {\n+                    keyword += \"*\";\n+                }\n+            }\n+\n+            updateResultTable(payload.getTarget());\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n+    protected final class CommandDataProvider extends DirectoryDataProvider<CommandTO> {\n+\n+        private static final long serialVersionUID = 6267494272884913376L;\n+\n+        public CommandDataProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+        }\n+\n+        @Override\n+        public Iterator<CommandTO> iterator(final long first, final long count) {\n+            int page = ((int) first / paginatorRows);\n+            return CommandRestClient.search(\n+                    (page < 0 ? 0 : page) + 1, paginatorRows, keyword).\n+                    iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return CommandRestClient.count(keyword);\n+        }\n+\n+        @Override\n+        public IModel<CommandTO> model(final CommandTO object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+}"},{"sha":"f3e1f94eed41603a874d8c61ee09c9432447d21e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/CommandsPanel.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandsPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.KeywordSearchEvent;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class CommandsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -4716856239434102405L;\n+\n+    public CommandsPanel(final String id, final PageReference pageRef) {\n+        super(id);\n+\n+        Model<String> keywordModel = new Model<>(StringUtils.EMPTY);\n+\n+        WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n+        add(searchBoxContainer);\n+\n+        Form<?> form = new Form<>(\"form\");\n+        searchBoxContainer.add(form);\n+\n+        AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\"filter\", \"filter\", keywordModel, true);\n+        form.add(filter.hideLabel().setOutputMarkupId(true).setRenderBodyOnly(true));\n+\n+        AjaxButton search = new AjaxButton(\"search\") {\n+\n+            private static final long serialVersionUID = 8390605330558248736L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target) {\n+                send(CommandsPanel.this, Broadcast.DEPTH, new KeywordSearchEvent(target, keywordModel.getObject()));\n+            }\n+        };\n+        search.setOutputMarkupId(true);\n+        form.add(search);\n+        form.setDefaultButton(search);\n+\n+        add(new CommandDirectoryPanel(\"commands\", pageRef).setOutputMarkupId(true));\n+    }\n+}"},{"sha":"9cecc659851fbf1289a1eb6ccfa24f77597bb11f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DashboardAccessTokensPanel.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardAccessTokensPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardAccessTokensPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDashboardAccessTokensPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,14 +33,10 @@ public class DashboardAccessTokensPanel extends Panel {\n     public DashboardAccessTokensPanel(final String id, final PageReference pageRef) {\n         super(id);\n \n-        WizardMgtPanel<AccessTokenTO> accessTokens = new AccessTokenDirectoryPanel.Builder(pageRef) {\n-\n-            private static final long serialVersionUID = -5960765294082359003L;\n-\n-        }.disableCheckBoxes().build(\"accessTokens\");\n+        WizardMgtPanel<AccessTokenTO> accessTokens = new AccessTokenDirectoryPanel.Builder(pageRef).\n+                disableCheckBoxes().build(\"accessTokens\");\n         MetaDataRoleAuthorizationStrategy.authorize(\n                 accessTokens, Component.RENDER, IdRepoEntitlement.ACCESS_TOKEN_LIST);\n         add(accessTokens);\n     }\n-\n }"},{"sha":"589ae3e254f483966c8d20f17a12eaca37eaf1db","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ExecMessageModal.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FExecMessageModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FExecMessageModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FExecMessageModal.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -35,5 +35,4 @@ public ExecMessageModal(final String id, final String executionMessage) {\n         super(id);\n         add(new Label(\"executionMessage\", executionMessage).setOutputMarkupId(true));\n     }\n-\n }"},{"sha":"bcd0f29284e0367df2e5f6566ed28a42c0ede5b4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ImplementationModalPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImplementationModalPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -95,8 +95,8 @@ public ImplementationModalPanel(\n         if (viewMode == ViewMode.JSON_BODY && StringUtils.isNotBlank(implementation.getBody())) {\n             try {\n                 JsonNode node = MAPPER.readTree(implementation.getBody());\n-                if (node.has(\"@class\")) {\n-                    jsonClass.setModelObject(node.get(\"@class\").asText());\n+                if (node.has(\"_class\")) {\n+                    jsonClass.setModelObject(node.get(\"_class\").asText());\n                 }\n             } catch (IOException e) {\n                 LOG.error(\"Could not parse as JSON payload: {}\", implementation.getBody(), e);"},{"sha":"bddd1bf79041f64496573f7a767babfa1d914f59","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ModalDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FModalDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -24,7 +24,7 @@\n \n public class ModalDirectoryPanel<T extends Serializable> extends AbstractModalPanel<T> {\n \n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -2882969833580638049L;\n \n     public ModalDirectoryPanel(\n             final BaseModal<T> modal, final DirectoryPanel<?, ?, ?, ?> directoryPanel, final PageReference pageRef) {"},{"sha":"4e839eef26bcbdf8301b06e052f275a4ed997c97","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":22,"deletions":45,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.io.Serializable;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -28,6 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.commons.KeywordSearchEvent;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.SchemaTypePanel.SchemaProvider;\n@@ -184,6 +184,27 @@ public void onClick(final AjaxRequestTarget target, final SchemaTO ignore) {\n         return panel;\n     }\n \n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof KeywordSearchEvent) {\n+            KeywordSearchEvent payload = KeywordSearchEvent.class.cast(event.getPayload());\n+\n+            keyword = payload.getKeyword();\n+            if (StringUtils.isNotBlank(keyword)) {\n+                if (!StringUtils.startsWith(keyword, \"*\")) {\n+                    keyword = \"*\" + keyword;\n+                }\n+                if (!StringUtils.endsWith(keyword, \"*\")) {\n+                    keyword += \"*\";\n+                }\n+            }\n+\n+            updateResultTable(payload.getTarget());\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n     protected final class SchemaProvider extends DirectoryDataProvider<SchemaTO> {\n \n         private static final long serialVersionUID = -185944053385660794L;\n@@ -218,48 +239,4 @@ public IModel<SchemaTO> model(final SchemaTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }\n-\n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        if (event.getPayload() instanceof SchemaSearchEvent) {\n-            SchemaSearchEvent payload = SchemaSearchEvent.class.cast(event.getPayload());\n-            AjaxRequestTarget target = payload.getTarget();\n-\n-            keyword = payload.getKeyword();\n-            if (StringUtils.isNotBlank(keyword)) {\n-                if (!StringUtils.startsWith(keyword, \"*\")) {\n-                    keyword = \"*\" + keyword;\n-                }\n-                if (!StringUtils.endsWith(keyword, \"*\")) {\n-                    keyword += \"*\";\n-                }\n-            }\n-\n-            updateResultTable(target);\n-        } else {\n-            super.onEvent(event);\n-        }\n-    }\n-\n-    public static class SchemaSearchEvent implements Serializable {\n-\n-        private static final long serialVersionUID = -282052400565266028L;\n-\n-        private final AjaxRequestTarget target;\n-\n-        private final String keyword;\n-\n-        SchemaSearchEvent(final AjaxRequestTarget target, final String keyword) {\n-            this.target = target;\n-            this.keyword = keyword;\n-        }\n-\n-        public AjaxRequestTarget getTarget() {\n-            return target;\n-        }\n-\n-        public String getKeyword() {\n-            return keyword;\n-        }\n-    }\n }"},{"sha":"1bbd5229b8916b7db2a3237609c8671b7d5f76e4","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemasPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemasPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.KeywordSearchEvent;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -63,8 +64,7 @@ public SchemasPanel(final String id, final PageReference pageRef) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target) {\n-                send(SchemasPanel.this, Broadcast.DEPTH, \n-                        new SchemaTypePanel.SchemaSearchEvent(target, keywordModel.getObject()));\n+                send(SchemasPanel.this, Broadcast.DEPTH, new KeywordSearchEvent(target, keywordModel.getObject()));\n             }\n         };\n         search.setOutputMarkupId(true);"},{"sha":"0692cb4a71ec8d7c984e2f3e76db9a3c793ee837","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":12,"deletions":9,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -108,21 +108,21 @@ protected PolicyRuleDirectoryPanel(\n \n     @Override\n     protected List<IColumn<PolicyRuleWrapper, String>> getColumns() {\n-        final List<IColumn<PolicyRuleWrapper, String>> columns = new ArrayList<>();\n+        List<IColumn<PolicyRuleWrapper, String>> columns = new ArrayList<>();\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"rule\", this), \"implementationKey\", \"implementationKey\"));\n \n         columns.add(new AbstractColumn<>(\n-            new StringResourceModel(\"configuration\", this)) {\n+                new StringResourceModel(\"configuration\", this)) {\n \n             private static final long serialVersionUID = -4008579357070833846L;\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<PolicyRuleWrapper>> cellItem,\n-                final String componentId,\n-                final IModel<PolicyRuleWrapper> rowModel) {\n+                    final Item<ICellPopulator<PolicyRuleWrapper>> cellItem,\n+                    final String componentId,\n+                    final IModel<PolicyRuleWrapper> rowModel) {\n \n                 if (rowModel.getObject().getConf() == null) {\n                     cellItem.add(new Label(componentId, \"\"));\n@@ -131,6 +131,7 @@ public void populateItem(\n                 }\n             }\n         });\n+\n         return columns;\n     }\n \n@@ -150,10 +151,11 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n                     ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n                 } else {\n                     send(PolicyRuleDirectoryPanel.this, Broadcast.EXACT,\n-                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+                            new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n                 }\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.POLICY_UPDATE);\n+\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -183,7 +185,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n \n     @Override\n     public ActionsPanel<Serializable> getHeader(final String componentId) {\n-        final ActionsPanel<Serializable> panel = new ActionsPanel<>(componentId, null);\n+        ActionsPanel<Serializable> panel = new ActionsPanel<>(componentId, null);\n \n         panel.add(new ActionLink<>() {\n \n@@ -196,6 +198,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 }\n             }\n         }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.POLICY_LIST).hideLabel();\n+\n         return panel;\n     }\n \n@@ -251,7 +254,7 @@ private List<PolicyRuleWrapper> getPolicyRuleWrappers(final ComposablePolicy pol\n \n         @Override\n         public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n-            final T actual = PolicyRestClient.read(type, policy);\n+            T actual = PolicyRestClient.read(type, policy);\n \n             List<PolicyRuleWrapper> rules = actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual)\n@@ -263,7 +266,7 @@ public Iterator<PolicyRuleWrapper> iterator(final long first, final long count)\n \n         @Override\n         public long size() {\n-            final T actual = PolicyRestClient.read(type, policy);\n+            T actual = PolicyRestClient.read(type, policy);\n             return actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual).size()\n                     : 0;"},{"sha":"b4fa3e11c52c1d6ad27243f5f5297389b4d79ff7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -118,7 +118,7 @@ public class Profile extends WizardStep {\n         public Profile(final PolicyRuleWrapper rule) {\n             this.rule = rule;\n \n-            final AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n+            AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n                     \"rule\", \"rule\", new PropertyModel<>(rule, \"implementationKey\"));\n \n             List<String> choices;\n@@ -151,8 +151,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n                     rule.setImplementationEngine(impl.getEngine());\n                     if (impl.getEngine() == ImplementationEngine.JAVA) {\n                         try {\n-                            RuleConf ruleConf = MAPPER.readValue(impl.getBody(), RuleConf.class);\n-                            rule.setConf(ruleConf);\n+                            rule.setConf(MAPPER.readValue(impl.getBody(), RuleConf.class));\n                         } catch (Exception e) {\n                             LOG.error(\"During deserialization\", e);\n                         }"},{"sha":"4bd232851d9f5a756332630c0aa5dbdaacac6ca3","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -79,9 +79,9 @@\n \n     protected ReportDirectoryPanel(final PageReference pageRef) {\n         super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, true);\n-        this.restClient = new ReportRestClient();\n+        restClient = new ReportRestClient();\n \n-        this.addNewItemPanelBuilder(new ReportWizardBuilder(new ReportTO(), pageRef), true);\n+        addNewItemPanelBuilder(new ReportWizardBuilder(new ReportTO(), pageRef), true);\n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.REPORT_CREATE);\n \n         modal.size(Modal.Size.Large);\n@@ -104,7 +104,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n \n     @Override\n     protected List<IColumn<ReportTO, String>> getColumns() {\n-        final List<IColumn<ReportTO, String>> columns = new ArrayList<>();\n+        List<IColumn<ReportTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n@@ -135,18 +135,18 @@ protected List<IColumn<ReportTO, String>> getColumns() {\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<ReportTO>> cellItem,\n-                final String componentId,\n-                final IModel<ReportTO> rowModel) {\n+                    final Item<ICellPopulator<ReportTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<ReportTO> rowModel) {\n \n                 Component panel;\n                 try {\n                     JobTO jobTO = ReportRestClient.getJob(rowModel.getObject().getKey());\n                     panel = new JobActionPanel(componentId, jobTO, false, ReportDirectoryPanel.this);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n-                        String.format(\"%s,%s\",\n-                            IdRepoEntitlement.REPORT_EXECUTE,\n-                            IdRepoEntitlement.REPORT_UPDATE));\n+                            String.format(\"%s,%s\",\n+                                    IdRepoEntitlement.REPORT_EXECUTE,\n+                                    IdRepoEntitlement.REPORT_UPDATE));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not get job for report {}\", rowModel.getObject().getKey(), e);\n                     panel = new Label(componentId, Model.of());\n@@ -156,7 +156,7 @@ public void populateItem(\n \n             @Override\n             public String getCssClass() {\n-                return \"col-xs-1\";\n+                return \"running-col\";\n             }\n         });\n \n@@ -175,7 +175,17 @@ public void onEvent(final IEvent<?> event) {\n \n     @Override\n     public ActionsPanel<ReportTO> getActions(final IModel<ReportTO> model) {\n-        final ActionsPanel<ReportTO> panel = super.getActions(model);\n+        ActionsPanel<ReportTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n+                viewReportExecs(model.getObject(), target);\n+            }\n+        }, ActionLink.ActionType.VIEW_EXECUTIONS, IdRepoEntitlement.REPORT_READ);\n \n         panel.add(new ActionLink<>() {\n \n@@ -184,8 +194,8 @@ public ActionsPanel<ReportTO> getActions(final IModel<ReportTO> model) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 send(ReportDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(\n-                        ReportRestClient.read(model.getObject().getKey()), target));\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                ReportRestClient.read(model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REPORT_UPDATE);\n \n@@ -198,7 +208,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 final ReportTO clone = SerializationUtils.clone(model.getObject());\n                 clone.setKey(null);\n                 send(ReportDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(clone, target));\n+                        new AjaxWizard.EditItemActionEvent<>(clone, target));\n             }\n         }, ActionLink.ActionType.CLONE, IdRepoEntitlement.REPORT_CREATE);\n \n@@ -208,33 +218,22 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n-                target.add(modal.setContent(new ReportletDirectoryPanel(\n-                    modal, model.getObject().getKey(), pageRef)));\n+                target.add(modal.setContent(new ReportletDirectoryPanel(modal, model.getObject().getKey(), pageRef)));\n \n                 modal.header(new StringResourceModel(\n-                    \"reportlet.conf\", ReportDirectoryPanel.this, Model.of(model.getObject())));\n+                        \"reportlet.conf\", ReportDirectoryPanel.this, Model.of(model.getObject())));\n                 modal.show(true);\n             }\n         }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.REPORT_UPDATE);\n \n-        panel.add(new ActionLink<>() {\n-\n-            private static final long serialVersionUID = -3722207913631435501L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n-                viewReport(model.getObject(), target);\n-            }\n-        }, ActionLink.ActionType.VIEW_EXECUTIONS, IdRepoEntitlement.REPORT_READ);\n-\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 startAt.setExecutionDetail(\n-                    model.getObject().getKey(), model.getObject().getName(), target);\n+                        model.getObject().getKey(), model.getObject().getName(), target);\n                 startAt.toggle(target, true);\n             }\n         }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.REPORT_EXECUTE);\n@@ -257,6 +256,7 @@ public void onClick(final AjaxRequestTarget target, final ReportTO ignore) {\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n         }, ActionLink.ActionType.DELETE, IdRepoEntitlement.REPORT_DELETE, true);\n+\n         return panel;\n     }\n \n@@ -278,7 +278,7 @@ protected String paginatorRowsKey() {\n         return IdRepoConstants.PREF_REPORT_PAGINATOR_ROWS;\n     }\n \n-    protected abstract void viewReport(ReportTO reportTO, AjaxRequestTarget target);\n+    protected abstract void viewReportExecs(ReportTO reportTO, AjaxRequestTarget target);\n \n     protected static class ReportDataProvider extends DirectoryDataProvider<ReportTO> {\n "},{"sha":"66cad1a0139121a2740d8ee1622d55434d90298a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportExecutionDetails.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportExecutionDetails.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -44,7 +44,7 @@ public class ReportExecutionDetails extends MultilevelPanel.SecondLevel {\n     public ReportExecutionDetails(final ReportTO reportTO, final PageReference pageRef) {\n         super();\n \n-        final MultilevelPanel mlp = new MultilevelPanel(\"executions\");\n+        MultilevelPanel mlp = new MultilevelPanel(\"executions\");\n         add(mlp);\n \n         mlp.setFirstLevel(new ReportExecutionDirectoryPanel(mlp, reportTO.getKey(), new ReportRestClient(), pageRef));\n@@ -54,17 +54,15 @@ private static class ReportExecutionDirectoryPanel extends ExecutionsDirectoryPa\n \n         private static final long serialVersionUID = 5691719817252887541L;\n \n-        private final MultilevelPanel mlp;\n-\n         private final AjaxDownloadBehavior downloadBehavior;\n \n         ReportExecutionDirectoryPanel(\n                 final MultilevelPanel multiLevelPanelRef,\n                 final String key,\n                 final ExecutionRestClient executionRestClient,\n                 final PageReference pageRef) {\n+\n             super(multiLevelPanelRef, key, executionRestClient, pageRef);\n-            this.mlp = multiLevelPanelRef;\n \n             this.downloadBehavior = new AjaxDownloadBehavior();\n             this.add(downloadBehavior);\n@@ -75,7 +73,8 @@ protected void next(\n                 final String title,\n                 final MultilevelPanel.SecondLevel slevel,\n                 final AjaxRequestTarget target) {\n-            mlp.next(title, slevel, target);\n+\n+            multiLevelPanelRef.next(title, slevel, target);\n         }\n \n         @Override\n@@ -87,7 +86,7 @@ protected void addFurtherActions(final ActionsPanel<ExecTO> panel, final IModel<\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setResponse(new ResponseHolder(ReportRestClient.exportExecutionResult(\n-                        model.getObject().getKey(), ReportExecExportFormat.CSV)));\n+                            model.getObject().getKey(), ReportExecExportFormat.CSV)));\n                     downloadBehavior.initiate(target);\n                 }\n             }, ActionLink.ActionType.EXPORT_CSV, IdRepoEntitlement.REPORT_READ);\n@@ -99,7 +98,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setResponse(new ResponseHolder(ReportRestClient.exportExecutionResult(\n-                        model.getObject().getKey(), ReportExecExportFormat.HTML)));\n+                            model.getObject().getKey(), ReportExecExportFormat.HTML)));\n                     downloadBehavior.initiate(target);\n                 }\n             }, ActionLink.ActionType.EXPORT_HTML, IdRepoEntitlement.REPORT_READ);\n@@ -111,7 +110,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setResponse(new ResponseHolder(ReportRestClient.exportExecutionResult(\n-                        model.getObject().getKey(), ReportExecExportFormat.PDF)));\n+                            model.getObject().getKey(), ReportExecExportFormat.PDF)));\n                     downloadBehavior.initiate(target);\n                 }\n             }, ActionLink.ActionType.EXPORT_PDF, IdRepoEntitlement.REPORT_READ);\n@@ -123,7 +122,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setResponse(new ResponseHolder(ReportRestClient.exportExecutionResult(\n-                        model.getObject().getKey(), ReportExecExportFormat.RTF)));\n+                            model.getObject().getKey(), ReportExecExportFormat.RTF)));\n                     downloadBehavior.initiate(target);\n                 }\n             }, ActionLink.ActionType.EXPORT_RTF, IdRepoEntitlement.REPORT_READ);\n@@ -135,7 +134,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 @Override\n                 public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     downloadBehavior.setResponse(new ResponseHolder(ReportRestClient.exportExecutionResult(\n-                        model.getObject().getKey(), ReportExecExportFormat.XML)));\n+                            model.getObject().getKey(), ReportExecExportFormat.XML)));\n                     downloadBehavior.initiate(target);\n                 }\n             }, ActionLink.ActionType.EXPORT_XML, IdRepoEntitlement.REPORT_READ);"},{"sha":"921061bc7eb86ac151b1233f59af6732664aa1a2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -78,6 +78,7 @@ public class ReportletDirectoryPanel extends DirectoryPanel<\n \n     public ReportletDirectoryPanel(\n             final BaseModal<ReportTO> baseModal, final String report, final PageReference pageRef) {\n+\n         super(BaseModal.CONTENT_ID, pageRef, false);\n \n         disableCheckBoxes();\n@@ -88,8 +89,7 @@ public ReportletDirectoryPanel(\n \n         enableUtilityButton();\n \n-        this.addNewItemPanelBuilder(\n-                new ReportletWizardBuilder(report, new ReportletWrapper(true), pageRef), true);\n+        addNewItemPanelBuilder(new ReportletWizardBuilder(report, new ReportletWrapper(true), pageRef), true);\n \n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.REPORT_UPDATE);\n         initResultTable();\n@@ -103,15 +103,15 @@ protected List<IColumn<ReportletWrapper, String>> getColumns() {\n                 new StringResourceModel(\"reportlet\", this), \"implementationKey\", \"implementationKey\"));\n \n         columns.add(new AbstractColumn<>(\n-            new StringResourceModel(\"configuration\", this)) {\n+                new StringResourceModel(\"configuration\", this)) {\n \n             private static final long serialVersionUID = -4008579357070833846L;\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<ReportletWrapper>> cellItem,\n-                final String componentId,\n-                final IModel<ReportletWrapper> rowModel) {\n+                    final Item<ICellPopulator<ReportletWrapper>> cellItem,\n+                    final String componentId,\n+                    final IModel<ReportletWrapper> rowModel) {\n \n                 if (rowModel.getObject().getConf() == null) {\n                     cellItem.add(new Label(componentId, \"\"));\n@@ -139,17 +139,18 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n                     SyncopeConsoleSession.get().info(getString(\"noConf\"));\n                 } else {\n                     send(ReportletDirectoryPanel.this, Broadcast.EXACT,\n-                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+                            new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n                 }\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.REPORT_UPDATE);\n+\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignore) {\n-                final ReportletConf reportlet = model.getObject().getConf();\n+                ReportletConf reportlet = model.getObject().getConf();\n                 try {\n                     ReportTO actual = ReportRestClient.read(report);\n                     actual.getReportlets().remove(model.getObject().getImplementationKey());\n@@ -170,7 +171,7 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n \n     @Override\n     public ActionsPanel<Serializable> getHeader(final String componentId) {\n-        final ActionsPanel<Serializable> panel = new ActionsPanel<>(componentId, null);\n+        ActionsPanel<Serializable> panel = new ActionsPanel<>(componentId, null);\n \n         panel.add(new ActionLink<>() {\n \n@@ -182,7 +183,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                     customActionOnFinishCallback(target);\n                 }\n             }\n-        }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.TASK_LIST).hideLabel();\n+        }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.REPORT_READ).hideLabel();\n         return panel;\n     }\n \n@@ -201,6 +202,16 @@ protected String paginatorRowsKey() {\n         return IdRepoConstants.PREF_REPORTLET_PAGINATOR_ROWS;\n     }\n \n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+        if (event.getPayload() instanceof ExitEvent) {\n+            AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n+            baseModal.show(false);\n+            baseModal.close(target);\n+        }\n+    }\n+\n     protected class ReportDataProvider extends DirectoryDataProvider<ReportletWrapper> {\n \n         private static final long serialVersionUID = 4725679400450513556L;\n@@ -247,7 +258,7 @@ public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n \n         @Override\n         public long size() {\n-            final ReportTO actual = ReportRestClient.read(report);\n+            ReportTO actual = ReportRestClient.read(report);\n             return getReportletWrappers(actual).size();\n         }\n \n@@ -256,14 +267,4 @@ public IModel<ReportletWrapper> model(final ReportletWrapper object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }\n-\n-    @Override\n-    public void onEvent(final IEvent<?> event) {\n-        super.onEvent(event);\n-        if (event.getPayload() instanceof ExitEvent) {\n-            AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n-            baseModal.show(false);\n-            baseModal.close(target);\n-        }\n-    }\n }"},{"sha":"0339e88557916f36569168ef1df7b80828aaa328","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":48,"deletions":21,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.databind.json.JsonMapper;\n import java.io.Serializable;\n+import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.panels.BeanPanel;\n import org.apache.syncope.client.console.panels.search.SearchUtils;\n@@ -50,6 +51,16 @@ public class ReportletWizardBuilder extends BaseAjaxWizardBuilder<ReportletWrapp\n \n     private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n+    private final LoadableDetachableModel<List<ImplementationTO>> reportlets = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = 4659376149825914247L;\n+\n+        @Override\n+        protected List<ImplementationTO> load() {\n+            return ImplementationRestClient.list(IdRepoImplementationType.REPORTLET);\n+        }\n+    };\n+\n     private final String report;\n \n     public ReportletWizardBuilder(final String report, final ReportletWrapper reportlet, final PageReference pageRef) {\n@@ -63,14 +74,17 @@ protected Serializable onApplyInternal(final ReportletWrapper modelObject) {\n             BeanWrapper confWrapper = PropertyAccessorFactory.forBeanPropertyAccess(modelObject.getConf());\n             modelObject.getSCondWrapper().forEach((fieldName, pair) -> confWrapper.setPropertyValue(\n                     fieldName, SearchUtils.buildFIQL(pair.getRight(), pair.getLeft())));\n-            ImplementationTO reportlet = ImplementationRestClient.read(\n-                    IdRepoImplementationType.REPORTLET, modelObject.getImplementationKey());\n-            try {\n-                reportlet.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n-                ImplementationRestClient.update(reportlet);\n-            } catch (Exception e) {\n-                throw new WicketRuntimeException(e);\n-            }\n+            reportlets.getObject().stream().\n+                    filter(r -> r.getKey().equals(modelObject.getImplementationKey())).\n+                    findFirst().\n+                    ifPresent(reportlet -> {\n+                        try {\n+                            reportlet.setBody(MAPPER.writeValueAsString(modelObject.getConf()));\n+                            ImplementationRestClient.update(reportlet);\n+                        } catch (Exception e) {\n+                            throw new WicketRuntimeException(e);\n+                        }\n+                    });\n         }\n \n         ReportTO reportTO = ReportRestClient.read(report);\n@@ -89,15 +103,19 @@ protected WizardModel buildModelSteps(final ReportletWrapper modelObject, final\n         return wizardModel;\n     }\n \n-    public static class Profile extends WizardStep {\n+    public class Profile extends WizardStep {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n \n+        private final ReportletWrapper reportlet;\n+\n         public Profile(final ReportletWrapper reportlet) {\n+            this.reportlet = reportlet;\n+\n             AjaxDropDownChoicePanel<String> conf = new AjaxDropDownChoicePanel<>(\n                     \"reportlet\", getString(\"reportlet\"), new PropertyModel<>(reportlet, \"implementationKey\"));\n \n-            conf.setChoices(ImplementationRestClient.list(IdRepoImplementationType.REPORTLET).stream().\n+            conf.setChoices(reportlets.getObject().stream().\n                     map(ImplementationTO::getKey).sorted().collect(Collectors.toList()));\n             conf.addRequiredLabel();\n             conf.setNullValid(false);\n@@ -108,21 +126,30 @@ public Profile(final ReportletWrapper reportlet) {\n \n                 @Override\n                 protected void onEvent(final AjaxRequestTarget target) {\n-                    ImplementationTO impl = ImplementationRestClient.read(\n-                            IdRepoImplementationType.REPORTLET, conf.getModelObject());\n-                    reportlet.setImplementationEngine(impl.getEngine());\n-                    if (impl.getEngine() == ImplementationEngine.JAVA) {\n-                        try {\n-                            ReportletConf conf = MAPPER.readValue(impl.getBody(), ReportletConf.class);\n-                            reportlet.setConf(conf);\n-                        } catch (Exception e) {\n-                            LOG.error(\"During deserialization\", e);\n-                        }\n-                    }\n+                    reportlets.getObject().stream().\n+                            filter(r -> r.getKey().equals(conf.getModelObject())).\n+                            findFirst().\n+                            ifPresent(impl -> {\n+                                reportlet.setImplementationEngine(impl.getEngine());\n+                                if (impl.getEngine() == ImplementationEngine.JAVA) {\n+                                    try {\n+                                        reportlet.setConf(MAPPER.readValue(impl.getBody(), ReportletConf.class));\n+                                    } catch (Exception e) {\n+                                        LOG.error(\"During deserialization\", e);\n+                                    }\n+                                }\n+                            });\n                 }\n             });\n             add(conf);\n         }\n+\n+        @Override\n+        public void applyState() {\n+            if (reportlet.getImplementationEngine() == ImplementationEngine.GROOVY) {\n+                getWizardModel().finish();\n+            }\n+        }\n     }\n \n     public class Configuration extends WizardStep {"},{"sha":"df311a4f3ca490b66a5ee2eecbb4ed40476745aa","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AccessTokenRestClient.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAccessTokenRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAccessTokenRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAccessTokenRestClient.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -46,5 +46,4 @@ public static List<AccessTokenTO> list(final int page, final int size, final Sor\n                 new AccessTokenQuery.Builder().page(page).size(size).orderBy(toOrderBy(sort)).build()).\n                 getResult();\n     }\n-\n }"},{"sha":"d11aa166bec13ba49347885a6b82db84eaa80a54","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/CommandRestClient.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCommandRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCommandRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FCommandRestClient.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.command.CommandOutput;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.rest.api.beans.CommandQuery;\n+import org.apache.syncope.common.rest.api.service.CommandService;\n+\n+public class CommandRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -3582864276979370967L;\n+\n+    public static int count(final String keyword) {\n+        return getService(CommandService.class).\n+                search(new CommandQuery.Builder().page(1).size(0).keyword(keyword).build()).\n+                getTotalCount();\n+    }\n+\n+    public static List<CommandTO> search(final int page, final int size, final String keyword) {\n+        return getService(CommandService.class).\n+                search(new CommandQuery.Builder().page(page).size(size).keyword(keyword).build()).\n+                getResult();\n+    }\n+\n+    public static CommandTO read(final String key) {\n+        return getService(CommandService.class).read(key);\n+    }\n+\n+    public static CommandOutput run(final CommandTO command) {\n+        return getService(CommandService.class).run(command);\n+    }\n+}"},{"sha":"604954da7edcd63e414c05df05a178624201e4ca","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":18,"deletions":29,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,8 +32,6 @@\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n-import org.apache.syncope.common.lib.to.PullTaskTO;\n-import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -144,26 +142,33 @@ public static List<NotificationTaskTO> listNotificationTasks(\n         return list.getResult();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public static <T extends TaskTO> List<T> list(\n-            final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n-\n-        return (List<T>) getService(TaskService.class).\n-                search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).\n-                        orderBy(toOrderBy(sort)).build()).getResult();\n+            final TaskType taskType, final int page, final int size, final SortParam<String> sort) {\n+\n+        return getService(TaskService.class).<T>search(\n+                new TaskQuery.Builder(taskType).\n+                        page(page).\n+                        size(size).\n+                        orderBy(toOrderBy(sort)).\n+                        build()).\n+                getResult();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public static <T extends TaskTO> List<T> list(\n             final String resource,\n-            final Class<T> reference,\n+            final TaskType taskType,\n             final int page,\n             final int size,\n             final SortParam<String> sort) {\n \n-        return (List<T>) getService(TaskService.class).\n-                search(new TaskQuery.Builder(getTaskType(reference)).page(page).size(size).resource(resource).\n-                        orderBy(toOrderBy(sort)).build()).getResult();\n+        return getService(TaskService.class).<T>search(\n+                new TaskQuery.Builder(taskType).\n+                        page(page).\n+                        size(size).\n+                        resource(resource).\n+                        orderBy(toOrderBy(sort)).\n+                        build()).\n+                getResult();\n     }\n \n     @Override\n@@ -175,22 +180,6 @@ public List<ExecTO> listExecutions(\n                         orderBy(toOrderBy(sort)).build()).getResult();\n     }\n \n-    private static TaskType getTaskType(final Class<?> reference) {\n-        TaskType result = null;\n-        if (PropagationTaskTO.class.equals(reference)) {\n-            result = TaskType.PROPAGATION;\n-        } else if (NotificationTaskTO.class.equals(reference)) {\n-            result = TaskType.NOTIFICATION;\n-        } else if (SchedTaskTO.class.equals(reference)) {\n-            result = TaskType.SCHEDULED;\n-        } else if (PullTaskTO.class.equals(reference)) {\n-            result = TaskType.PULL;\n-        } else if (PushTaskTO.class.equals(reference)) {\n-            result = TaskType.PUSH;\n-        }\n-        return result;\n-    }\n-\n     public static PropagationTaskTO readPropagationTask(final String taskKey) {\n         return getService(TaskService.class).read(TaskType.PROPAGATION, taskKey, false);\n     }"},{"sha":"de56660737d8654d127a21fae930d5402e421fbb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/AnyPropagationTasks.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -47,10 +47,10 @@ public <T extends AnyTO> AnyPropagationTasks(\n             private static final long serialVersionUID = -2195387360323687302L;\n \n             @Override\n-            protected void viewTask(final PropagationTaskTO taskTO, final AjaxRequestTarget target) {\n+            protected void viewTaskExecs(final PropagationTaskTO taskTO, final AjaxRequestTarget target) {\n                 mlp.next(\n                         new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                        new TaskExecutionDetails<>(baseModal, taskTO, pageRef),\n+                        new TaskExecutionDetails<>(taskTO, pageRef),\n                         target);\n             }\n "},{"sha":"82dc29bb3cf4b9f679c0f260f921816833e6e353","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/CommandComposeDirectoryPanel.java","status":"added","additions":234,"deletions":0,"changes":234,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,234 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.tasks;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.panels.DirectoryPanel;\n+import org.apache.syncope.client.console.rest.CommandRestClient;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class CommandComposeDirectoryPanel extends DirectoryPanel<\n+        CommandWrapper, CommandWrapper, DirectoryDataProvider<CommandWrapper>, CommandRestClient>\n+        implements ModalPanel {\n+\n+    private static final long serialVersionUID = 8899580817658145305L;\n+\n+    private final BaseModal<MacroTaskTO> baseModal;\n+\n+    private final String task;\n+\n+    public CommandComposeDirectoryPanel(\n+            final BaseModal<MacroTaskTO> baseModal, final String task, final PageReference pageRef) {\n+\n+        super(BaseModal.CONTENT_ID, pageRef, false);\n+\n+        disableCheckBoxes();\n+\n+        this.baseModal = baseModal;\n+        this.task = task;\n+\n+        enableUtilityButton();\n+\n+        addNewItemPanelBuilder(new CommandComposeWizardBuilder(task, new CommandWrapper(true), pageRef), true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.TASK_UPDATE);\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected List<IColumn<CommandWrapper, String>> getColumns() {\n+        List<IColumn<CommandWrapper, String>> columns = new ArrayList<>();\n+\n+        columns.add(new AbstractColumn<>(new ResourceModel(Constants.KEY_FIELD_NAME), Constants.KEY_FIELD_NAME) {\n+\n+            private static final long serialVersionUID = -4008579357070833846L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<CommandWrapper>> cellItem,\n+                    final String componentId,\n+                    final IModel<CommandWrapper> rowModel) {\n+\n+                cellItem.add(new Label(componentId, rowModel.getObject().getCommand().getKey()));\n+            }\n+        });\n+\n+        columns.add(new AbstractColumn<>(new ResourceModel(\"arguments\"), \"arguments\") {\n+\n+            private static final long serialVersionUID = -4008579357070833846L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<CommandWrapper>> cellItem,\n+                    final String componentId,\n+                    final IModel<CommandWrapper> rowModel) {\n+\n+                cellItem.add(new Label(componentId, rowModel.getObject().getCommand().getArgs().getClass().getName()));\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    public ActionsPanel<CommandWrapper> getActions(final IModel<CommandWrapper> model) {\n+        ActionsPanel<CommandWrapper> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final CommandWrapper ignore) {\n+                CommandComposeDirectoryPanel.this.getTogglePanel().close(target);\n+                send(CommandComposeDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+            }\n+        }, ActionLink.ActionType.EDIT, IdRepoEntitlement.TASK_UPDATE);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final CommandWrapper ignore) {\n+                try {\n+                    MacroTaskTO actual = TaskRestClient.readTask(TaskType.MACRO, task);\n+                    actual.getCommands().remove(model.getObject().getCommand());\n+                    TaskRestClient.update(TaskType.MACRO, actual);\n+\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    customActionOnFinishCallback(target);\n+                } catch (SyncopeClientException e) {\n+                    LOG.error(\"While deleting {}\", model.getObject(), e);\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_UPDATE);\n+\n+        return panel;\n+    }\n+\n+    @Override\n+    public ActionsPanel<Serializable> getHeader(final String componentId) {\n+        ActionsPanel<Serializable> panel = new ActionsPanel<>(componentId, null);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n+                if (target != null) {\n+                    customActionOnFinishCallback(target);\n+                }\n+            }\n+        }, ActionLink.ActionType.RELOAD, IdRepoEntitlement.TASK_READ).hideLabel();\n+        return panel;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    protected CommandComposeDataProvider dataProvider() {\n+        return new CommandComposeDataProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return IdRepoConstants.PREF_COMMAND_PAGINATOR_ROWS;\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+        if (event.getPayload() instanceof ExitEvent) {\n+            AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n+            baseModal.show(false);\n+            baseModal.close(target);\n+        }\n+    }\n+\n+    protected class CommandComposeDataProvider extends DirectoryDataProvider<CommandWrapper> {\n+\n+        private static final long serialVersionUID = 4725679400450513556L;\n+\n+        public CommandComposeDataProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+        }\n+\n+        @Override\n+        public Iterator<CommandWrapper> iterator(final long first, final long count) {\n+            MacroTaskTO actual = TaskRestClient.readTask(TaskType.MACRO, task);\n+\n+            List<CommandTO> commands = actual.getCommands();\n+\n+            return commands.subList((int) first, (int) (first + count)).stream().\n+                    map(command -> new CommandWrapper(false).setCommand(command)).\n+                    iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            MacroTaskTO actual = TaskRestClient.readTask(TaskType.MACRO, task);\n+            return actual.getCommands().size();\n+        }\n+\n+        @Override\n+        public IModel<CommandWrapper> model(final CommandWrapper object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+}"},{"sha":"93a24e40f9b74ee913c726eb53f691e58d18e379","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder.java","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.tasks;\n+\n+import java.io.Serializable;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n+import org.apache.syncope.client.console.rest.CommandRestClient;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n+import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteSettings;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class CommandComposeWizardBuilder extends BaseAjaxWizardBuilder<CommandWrapper> {\n+\n+    private static final long serialVersionUID = -2300926041782845851L;\n+\n+    private final LoadableDetachableModel<List<ImplementationTO>> commands = new LoadableDetachableModel<>() {\n+\n+        private static final long serialVersionUID = 4659376149825914247L;\n+\n+        @Override\n+        protected List<ImplementationTO> load() {\n+            return ImplementationRestClient.list(IdRepoImplementationType.COMMAND);\n+        }\n+    };\n+\n+    private final String task;\n+\n+    public CommandComposeWizardBuilder(\n+            final String task, final CommandWrapper defaultItem, final PageReference pageRef) {\n+\n+        super(defaultItem, pageRef);\n+        this.task = task;\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final CommandWrapper modelObject) {\n+        MacroTaskTO taskTO = TaskRestClient.readTask(TaskType.MACRO, task);\n+        if (modelObject.isNew()) {\n+            taskTO.getCommands().add(modelObject.getCommand());\n+        } else {\n+            taskTO.getCommands().stream().\n+                    filter(cmd -> cmd.getKey().equals(modelObject.getCommand().getKey())).\n+                    findFirst().\n+                    ifPresent(cmd -> cmd.setArgs(modelObject.getCommand().getArgs()));\n+        }\n+\n+        TaskRestClient.update(TaskType.MACRO, taskTO);\n+        return modelObject;\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final CommandWrapper modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new Profile(modelObject));\n+        wizardModel.add(new CommandArgs(modelObject));\n+        return wizardModel;\n+    }\n+\n+    public class Profile extends WizardStep {\n+\n+        private static final long serialVersionUID = -3043839139187792810L;\n+\n+        private final CommandWrapper command;\n+\n+        public Profile(final CommandWrapper command) {\n+            this.command = command;\n+            MacroTaskTO taskTO = TaskRestClient.readTask(TaskType.MACRO, task);\n+\n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(false);\n+            settings.setShowListOnEmptyInput(false);\n+\n+            AutoCompleteTextField<String> args = new AutoCompleteTextField<>(\n+                    \"command\", new PropertyModel<>(command, \"command.key\"), settings) {\n+\n+                private static final long serialVersionUID = -6556576139048844857L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return commands.getObject().stream().\n+                            map(ImplementationTO::getKey).\n+                            filter(cmd -> cmd.contains(input)\n+                            && taskTO.getCommands().stream().noneMatch(c -> c.getKey().equals(cmd))).\n+                            sorted().iterator();\n+                }\n+            };\n+            args.setRequired(true);\n+            args.setEnabled(command.isNew());\n+            args.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -6139318907146065915L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    CommandTO cmd = CommandRestClient.read(command.getCommand().getKey());\n+                    command.getCommand().setArgs(cmd.getArgs());\n+                }\n+            });\n+            add(args);\n+        }\n+\n+        @Override\n+        public void applyState() {\n+            commands.getObject().stream().\n+                    filter(cmd -> cmd.getKey().equals(command.getCommand().getKey())\n+                    && cmd.getEngine() == ImplementationEngine.GROOVY).\n+                    findFirst().ifPresent(cmd -> getWizardModel().finish());\n+        }\n+    }\n+\n+    public class CommandArgs extends WizardStep {\n+\n+        private static final long serialVersionUID = -785981096328637758L;\n+\n+        public CommandArgs(final CommandWrapper command) {\n+            LoadableDetachableModel<Serializable> bean = new LoadableDetachableModel<>() {\n+\n+                private static final long serialVersionUID = 2092144708018739371L;\n+\n+                @Override\n+                protected Serializable load() {\n+                    return command.getCommand().getArgs();\n+                }\n+            };\n+            add(new BeanPanel<>(\"bean\", bean, pageRef).setRenderBodyOnly(true));\n+        }\n+    }\n+}"},{"sha":"d8dab2d5c6c1557caa0e4fd99203b53432811475","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/CommandWrapper.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandWrapper.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.tasks;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+\n+public class CommandWrapper implements Serializable {\n+\n+    private static final long serialVersionUID = -2423427579112218652L;\n+\n+    private final boolean isNew;\n+\n+    private CommandTO command;\n+\n+    public CommandWrapper(final boolean isNew) {\n+        this.isNew = isNew;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public CommandTO getCommand() {\n+        return command;\n+    }\n+\n+    public CommandWrapper setCommand(final CommandTO command) {\n+        this.command = command;\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CommandWrapper{\" + \"isNew=\" + isNew + \", command=\" + command + '}';\n+    }\n+}"},{"sha":"f09179d056721e14b51d4306c1a493868e0a2b43","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ExecMessage.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecMessage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecMessage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecMessage.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -28,6 +28,15 @@ public class ExecMessage extends MultilevelPanel.SecondLevel {\n \n     public ExecMessage(final String message) {\n         super();\n+        init(message);\n+    }\n+\n+    public ExecMessage(final String id, final String message) {\n+        super(id);\n+        init(message);\n+    }\n+\n+    protected void init(final String message) {\n         add(new Label(\"message\", Model.of(message)).setOutputMarkupId(true));\n     }\n }"},{"sha":"658eabcddc1b43c23e61d8f91f12feda30b113e2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ExecutionsDirectoryPanel.java","status":"modified","additions":8,"deletions":20,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FExecutionsDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.client.console.tasks.ExecutionsDirectoryPanel.ExecProvider;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -54,29 +53,18 @@\n \n     private static final long serialVersionUID = 2039393934721149162L;\n \n-    private final BaseModal<?> baseModal;\n+    protected final MultilevelPanel multiLevelPanelRef;\n \n-    private final MultilevelPanel multiLevelPanelRef;\n-\n-    private final String key;\n+    protected final String key;\n \n     public ExecutionsDirectoryPanel(\n             final MultilevelPanel multiLevelPanelRef,\n             final String key,\n             final ExecutionRestClient executionRestClient,\n             final PageReference pageRef) {\n-        this(null, multiLevelPanelRef, key, executionRestClient, pageRef);\n-    }\n \n-    public ExecutionsDirectoryPanel(\n-            final BaseModal<?> baseModal,\n-            final MultilevelPanel multiLevelPanelRef,\n-            final String key,\n-            final ExecutionRestClient executionRestClient,\n-            final PageReference pageRef) {\n         super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, false);\n \n-        this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         restClient = executionRestClient;\n         setOutputMarkupId(true);\n@@ -86,14 +74,14 @@ public ExecutionsDirectoryPanel(\n \n     @Override\n     protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<ExecTO, String> resultTableBuilder) {\n-        resultTableBuilder.setMultiLevelPanel(baseModal, multiLevelPanelRef);\n+        resultTableBuilder.setMultiLevelPanel(multiLevelPanelRef);\n     }\n \n     protected abstract void next(String title, SecondLevel secondLevel, AjaxRequestTarget target);\n \n     @Override\n     protected List<IColumn<ExecTO, String>> getColumns() {\n-        final List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n+        List<IColumn<ExecTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this),\n@@ -112,8 +100,7 @@ protected List<IColumn<ExecTO, String>> getColumns() {\n \n     @Override\n     public ActionsPanel<ExecTO> getActions(final IModel<ExecTO> model) {\n-        final ActionsPanel<ExecTO> panel = super.getActions(model);\n-        final ExecTO taskExecutionTO = model.getObject();\n+        ActionsPanel<ExecTO> panel = super.getActions(model);\n \n         panel.add(new ActionLink<>() {\n \n@@ -123,9 +110,10 @@ public ActionsPanel<ExecTO> getActions(final IModel<ExecTO> model) {\n             public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 ExecutionsDirectoryPanel.this.getTogglePanel().close(target);\n                 next(new StringResourceModel(\"execution.view\", ExecutionsDirectoryPanel.this, model).\n-                    getObject(), new ExecMessage(model.getObject().getMessage()), target);\n+                        getObject(), new ExecMessage(model.getObject().getMessage()), target);\n             }\n         }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n+\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -134,7 +122,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n             public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                 ExecutionsDirectoryPanel.this.getTogglePanel().close(target);\n                 try {\n-                    restClient.deleteExecution(taskExecutionTO.getKey());\n+                    restClient.deleteExecution(model.getObject().getKey());\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {"},{"sha":"92d2e094cc590731d590a9da1da0568de83278a1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.tasks;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.panels.MultilevelPanel;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class MacroTaskDirectoryPanel extends SchedTaskDirectoryPanel<MacroTaskTO> {\n+\n+    private static final long serialVersionUID = -6247673131495530094L;\n+\n+    public MacroTaskDirectoryPanel(final MultilevelPanel mlp, final PageReference pageRef) {\n+        super(MultilevelPanel.FIRST_LEVEL_ID, null, mlp, TaskType.MACRO, new MacroTaskTO(), pageRef, true);\n+    }\n+\n+    @Override\n+    protected List<IColumn<MacroTaskTO, String>> getFieldColumns() {\n+        List<IColumn<MacroTaskTO, String>> columns = new ArrayList<>();\n+\n+        columns.addAll(getHeadingFieldColumns());\n+\n+        columns.add(new BooleanPropertyColumn<>(\n+                new ResourceModel(\"continueOnError\"), \"continueOnError\", \"continueOnError\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new ResourceModel(\"saveExecs\"), \"saveExecs\", \"saveExecs\"));\n+\n+        columns.addAll(getTrailingFieldColumns());\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected void viewTaskExecs(final MacroTaskTO taskTO, final AjaxRequestTarget target) {\n+        multiLevelPanelRef.next(\n+                new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n+                new TaskExecutionDetails<>(taskTO, pageRef),\n+                target);\n+    }\n+\n+    @Override\n+    protected void addFurtherActions(final ActionsPanel<MacroTaskTO> panel, final IModel<MacroTaskTO> model) {\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final MacroTaskTO ignore) {\n+                target.add(modal.setContent(\n+                        new CommandComposeDirectoryPanel(modal, model.getObject().getKey(), pageRef)));\n+\n+                modal.header(new StringResourceModel(\n+                        \"command.conf\", MacroTaskDirectoryPanel.this, Model.of(model.getObject())));\n+                modal.show(true);\n+            }\n+        }, ActionLink.ActionType.COMPOSE, IdRepoEntitlement.TASK_UPDATE);\n+    }\n+}"},{"sha":"5e2da313092c240a6be1a3e6204994f5a87ca12d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/NotificationTaskDirectoryPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FNotificationTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -67,7 +67,7 @@ protected NotificationTaskDirectoryPanel(\n             final MultilevelPanel multiLevelPanelRef,\n             final PageReference pageRef) {\n \n-        super(null, multiLevelPanelRef, pageRef);\n+        super(null, multiLevelPanelRef, pageRef, false);\n         this.notification = notification;\n         this.anyTypeKind = anyTypeKind;\n         this.entityKey = entityKey;\n@@ -78,7 +78,7 @@ protected NotificationTaskDirectoryPanel(\n \n     @Override\n     protected List<IColumn<NotificationTaskTO, String>> getColumns() {\n-        final List<IColumn<NotificationTaskTO, String>> columns = new ArrayList<>();\n+        List<IColumn<NotificationTaskTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n@@ -100,6 +100,7 @@ protected List<IColumn<NotificationTaskTO, String>> getColumns() {\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n+\n         return columns;\n     }\n \n@@ -114,7 +115,7 @@ public ActionsPanel<NotificationTaskTO> getActions(final IModel<NotificationTask\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final NotificationTaskTO modelObject) {\n-                viewTask(taskTO, target);\n+                viewTaskExecs(taskTO, target);\n             }\n         }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n         panel.add(new ActionLink<>() {"},{"sha":"579903b1d39461a2ecd89c3cf9c4da81f21dd89e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTaskDirectoryPanel.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -61,14 +61,15 @@ protected PropagationTaskDirectoryPanel(\n             final MultilevelPanel multiLevelPanelRef,\n             final String resource,\n             final PageReference pageRef) {\n-        super(baseModal, multiLevelPanelRef, pageRef);\n+\n+        super(baseModal, multiLevelPanelRef, pageRef, false);\n         this.resource = resource;\n         initResultTable();\n     }\n \n     @Override\n     protected List<IColumn<PropagationTaskTO, String>> getColumns() {\n-        final List<IColumn<PropagationTaskTO, String>> columns = new ArrayList<>();\n+        List<IColumn<PropagationTaskTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n                 new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n@@ -81,7 +82,7 @@ protected List<IColumn<PropagationTaskTO, String>> getColumns() {\n                     new StringResourceModel(\"resource\", this), \"resource\", \"resource\"));\n         } else {\n             columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"anyTypeKind\", this), \"anyTypeKind\", \"anyTypeKind\") {\n+                    new StringResourceModel(\"anyTypeKind\", this), \"anyTypeKind\", \"anyTypeKind\") {\n \n                 private static final long serialVersionUID = 3344577098912281394L;\n \n@@ -110,6 +111,7 @@ public IModel<?> getDataModel(final IModel<PropagationTaskTO> rowModel) {\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n+\n         return columns;\n     }\n \n@@ -125,7 +127,7 @@ public ActionsPanel<PropagationTaskTO> getActions(final IModel<PropagationTaskTO\n             @Override\n             public void onClick(final AjaxRequestTarget target, final PropagationTaskTO modelObject) {\n                 PropagationTaskDirectoryPanel.this.getTogglePanel().close(target);\n-                viewTask(taskTO, target);\n+                viewTaskExecs(taskTO, target);\n             }\n         }, ActionLink.ActionType.VIEW_EXECUTIONS, IdRepoEntitlement.TASK_READ);\n "},{"sha":"b4beae3674a15387a6f656484531800b5fcc3dcf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTasks.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTasks.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -39,29 +39,29 @@ public <T extends AnyTO> PropagationTasks(\n \n         super(BaseModal.CONTENT_ID);\n \n-        final MultilevelPanel tasks = new MultilevelPanel(\"tasks\");\n-        \n-        tasks.setFirstLevel(new PropagationTaskDirectoryPanel(baseModal, tasks, resource, pageRef) {\n+        MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n+        add(mlp);\n+\n+        mlp.setFirstLevel(new PropagationTaskDirectoryPanel(baseModal, mlp, resource, pageRef) {\n \n             private static final long serialVersionUID = -2195387360323687302L;\n \n             @Override\n-            protected void viewTask(final PropagationTaskTO taskTO, final AjaxRequestTarget target) {\n-                tasks.next(\n+            protected void viewTaskExecs(final PropagationTaskTO taskTO, final AjaxRequestTarget target) {\n+                mlp.next(\n                         new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                        new TaskExecutionDetails<>(baseModal, taskTO, pageRef),\n+                        new TaskExecutionDetails<>(taskTO, pageRef),\n                         target);\n             }\n \n             @Override\n             protected void viewTaskDetails(final PropagationTaskTO taskTO, final AjaxRequestTarget target) {\n-                tasks.next(\n-                        new StringResourceModel(\"task.view.details\", this, new Model<>(Pair.of(null, taskTO))).\n-                                getObject(),\n+                mlp.next(\n+                        new StringResourceModel(\n+                                \"task.view.details\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n                         new PropagationDataView(taskTO),\n                         target);\n             }\n         });\n-        add(tasks);\n     }\n }"},{"sha":"33efcc8f46c9e7774274b3b9e5f538fed5a3745d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":11,"deletions":77,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -25,32 +25,17 @@\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.ajax.IndicatorAjaxTimerBehavior;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n-import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.widgets.JobActionPanel;\n-import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.event.IEvent;\n-import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n-import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n-import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.repeater.Item;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.model.StringResourceModel;\n \n /**\n@@ -69,16 +54,17 @@ protected ProvisioningTaskDirectoryPanel(\n             final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n             final TaskType taskType,\n-            final Class<T> reference,\n+            final T newTaskTO,\n             final String resource,\n             final PageReference pageRef) {\n \n-        super(baseModal, multiLevelPanelRef, taskType, reference, pageRef);\n+        super(MultilevelPanel.FIRST_LEVEL_ID, baseModal, multiLevelPanelRef, taskType, newTaskTO, pageRef, false);\n         this.resource = resource;\n \n         this.schedTaskTO.setResource(resource);\n \n         // super in order to call the parent implementation\n+        enableUtilityButton();\n         super.initResultTable();\n \n         container.add(new IndicatorAjaxTimerBehavior(java.time.Duration.of(10, ChronoUnit.SECONDS)) {\n@@ -102,66 +88,17 @@ protected void initResultTable() {\n     protected List<IColumn<T, String>> getFieldColumns() {\n         List<IColumn<T, String>> columns = new ArrayList<>();\n \n-        columns.add(new KeyPropertyColumn<>(\n-                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n+        columns.addAll(getHeadingFieldColumns());\n \n-        columns.add(new PropertyColumn<>(\n-                new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n-                Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n-\n-        columns.add(new PropertyColumn<>(\n-                new StringResourceModel(Constants.DESCRIPTION_FIELD_NAME, this),\n-                Constants.DESCRIPTION_FIELD_NAME, Constants.DESCRIPTION_FIELD_NAME));\n-\n-        if (reference == PullTaskTO.class) {\n+        if (schedTaskTO instanceof PullTaskTO) {\n             columns.add(new PropertyColumn<>(\n                     new StringResourceModel(\"destinationRealm\", this), \"destinationRealm\", \"destinationRealm\"));\n-        } else if (reference == PushTaskTO.class) {\n+        } else if (schedTaskTO instanceof PushTaskTO) {\n             columns.add(new PropertyColumn<>(\n                     new StringResourceModel(\"sourceRealm\", this), \"sourceRealm\", \"sourceRealm\"));\n         }\n \n-        columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"lastExec\", this), null, \"lastExec\"));\n-\n-        columns.add(new DatePropertyColumn<>(\n-                new StringResourceModel(\"nextExec\", this), null, \"nextExec\"));\n-\n-        columns.add(new PropertyColumn<>(\n-                new StringResourceModel(\"latestExecStatus\", this), \"latestExecStatus\", \"latestExecStatus\"));\n-\n-        columns.add(new BooleanPropertyColumn<>(\n-                new StringResourceModel(\"active\", this), \"active\", \"active\"));\n-\n-        columns.add(new AbstractColumn<>(new Model<>(\"\"), \"running\") {\n-\n-            private static final long serialVersionUID = -4008579357070833846L;\n-\n-            @Override\n-            public void populateItem(\n-                final Item<ICellPopulator<T>> cellItem,\n-                final String componentId,\n-                final IModel<T> rowModel) {\n-\n-                Component panel;\n-                try {\n-                    JobTO jobTO = TaskRestClient.getJob(rowModel.getObject().getKey());\n-                    panel = new JobActionPanel(componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this);\n-                    MetaDataRoleAuthorizationStrategy.authorize(\n-                        panel, WebPage.ENABLE,\n-                        String.format(\"%s,%s\", IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE));\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not get job for task {}\", rowModel.getObject().getKey(), e);\n-                    panel = new Label(componentId, Model.of());\n-                }\n-                cellItem.add(panel);\n-            }\n-\n-            @Override\n-            public String getCssClass() {\n-                return \"col-xs-1\";\n-            }\n-        });\n+        columns.addAll(getTrailingFieldColumns());\n \n         return columns;\n     }\n@@ -180,11 +117,8 @@ public void onEvent(final IEvent<?> event) {\n \n         private static final long serialVersionUID = 4725679400450513556L;\n \n-        private final Class<T> reference;\n-\n-        public ProvisioningTasksProvider(final Class<T> reference, final TaskType id, final int paginatorRows) {\n-            super(reference, id, paginatorRows);\n-            this.reference = reference;\n+        public ProvisioningTasksProvider(final TaskType taskType, final int paginatorRows) {\n+            super(taskType, paginatorRows);\n         }\n \n         @Override\n@@ -195,8 +129,8 @@ public long size() {\n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return TaskRestClient.list(\n-                    resource, reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n+            return TaskRestClient.<T>list(\n+                    resource, taskType, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }\n     }"},{"sha":"b61580c2222f678f96df2ee2af30a6564ce752c6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PullTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -40,7 +40,7 @@ protected PullTaskDirectoryPanel(\n             final String resource,\n             final PageReference pageRef) {\n \n-        super(baseModal, multiLevelPanelRef, TaskType.PULL, PullTaskTO.class, resource, pageRef);\n+        super(baseModal, multiLevelPanelRef, TaskType.PULL, new PullTaskTO(), resource, pageRef);\n     }\n \n     @Override\n@@ -50,7 +50,7 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected ProvisioningTasksProvider<PullTaskTO> dataProvider() {\n-        return new ProvisioningTasksProvider<>(reference, TaskType.PULL, rows);\n+        return new ProvisioningTasksProvider<>(TaskType.PULL, rows);\n     }\n \n     @Override"},{"sha":"6faf4181ca4126268463580cf9ff6f16fdbb0d3a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PullTasks.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPullTasks.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,21 +33,23 @@ public class PullTasks extends AbstractTasks {\n     private static final long serialVersionUID = -4013796607157549641L;\n \n     public <T extends AnyTO> PullTasks(\n-            final BaseModal<?> baseModal, final PageReference pageRef, final String resource) {\n+            final BaseModal<?> baseModal, final String resource, final PageReference pageRef) {\n+\n         super(BaseModal.CONTENT_ID);\n \n-        final MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n+        MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n         add(mlp);\n \n         mlp.setFirstLevel(new PullTaskDirectoryPanel(baseModal, mlp, resource, pageRef) {\n \n             private static final long serialVersionUID = -2195387360323687302L;\n \n             @Override\n-            protected void viewTask(final PullTaskTO taskTO, final AjaxRequestTarget target) {\n+            protected void viewTaskExecs(final PullTaskTO taskTO, final AjaxRequestTarget target) {\n                 mlp.next(\n                         new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                        new TaskExecutionDetails<>(baseModal, taskTO, pageRef), target);\n+                        new TaskExecutionDetails<>(taskTO, pageRef),\n+                        target);\n             }\n         });\n     }"},{"sha":"0a6eab078ecbb063ca064fb0c8a4b2ad2b09262f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -37,7 +37,7 @@ protected PushTaskDirectoryPanel(\n             final MultilevelPanel multiLevelPanelRef,\n             final String resource,\n             final PageReference pageRef) {\n-        super(baseModal, multiLevelPanelRef, TaskType.PUSH, PushTaskTO.class, resource, pageRef);\n+        super(baseModal, multiLevelPanelRef, TaskType.PUSH, new PushTaskTO(), resource, pageRef);\n     }\n \n     @Override\n@@ -47,6 +47,6 @@ protected String paginatorRowsKey() {\n \n     @Override\n     protected ProvisioningTasksProvider<PushTaskTO> dataProvider() {\n-        return new ProvisioningTasksProvider<>(reference, TaskType.PUSH, rows);\n+        return new ProvisioningTasksProvider<>(TaskType.PUSH, rows);\n     }\n }"},{"sha":"47828c52eded78475d8582a5fade3c002a2d877c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PushTasks.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTasks.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,21 +33,23 @@ public class PushTasks extends AbstractTasks {\n     private static final long serialVersionUID = -4013796607157549641L;\n \n     public <T extends AnyTO> PushTasks(\n-            final BaseModal<?> baseModal, final PageReference pageReference, final String resource) {\n+            final BaseModal<?> baseModal, final String resource, final PageReference pageRef) {\n+\n         super(BaseModal.CONTENT_ID);\n \n-        final MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n+        MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n         add(mlp);\n \n-        mlp.setFirstLevel(new PushTaskDirectoryPanel(baseModal, mlp, resource, pageReference) {\n+        mlp.setFirstLevel(new PushTaskDirectoryPanel(baseModal, mlp, resource, pageRef) {\n \n             private static final long serialVersionUID = -2195387360323687302L;\n \n             @Override\n-            protected void viewTask(final PushTaskTO taskTO, final AjaxRequestTarget target) {\n+            protected void viewTaskExecs(final PushTaskTO taskTO, final AjaxRequestTarget target) {\n                 mlp.next(\n                         new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                        new TaskExecutionDetails<>(baseModal, taskTO, pageReference), target);\n+                        new TaskExecutionDetails<>(taskTO, pageRef), \n+                        target);\n             }\n         });\n     }"},{"sha":"7a0e48abba01b5f1c7c8fc11a446207d2c43583a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":76,"deletions":124,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.tasks;\n \n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n import java.io.Serializable;\n import java.time.Duration;\n import java.time.temporal.ChronoUnit;\n@@ -79,95 +80,33 @@\n \n     private static final long serialVersionUID = 4984337552918213290L;\n \n-    protected TaskType taskType;\n+    protected final TaskType taskType;\n \n-    protected final Class<T> reference;\n+    protected final T schedTaskTO;\n \n-    protected T schedTaskTO;\n-\n-    private final TaskStartAtTogglePanel startAt;\n+    protected final TaskStartAtTogglePanel startAt;\n \n     protected final TemplatesTogglePanel templates;\n \n     protected SchedTaskDirectoryPanel(\n+            final String id,\n             final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n             final TaskType taskType,\n-            final Class<T> reference,\n-            final PageReference pageRef) {\n-\n-        super(baseModal, multiLevelPanelRef, pageRef);\n-        this.taskType = taskType;\n-        this.reference = reference;\n-\n-        try {\n-            schedTaskTO = reference.getDeclaredConstructor().newInstance();\n-        } catch (Exception e) {\n-            LOG.error(\"Failure instantiating task\", e);\n-        }\n-\n-        this.addNewItemPanelBuilder(new SchedTaskWizardBuilder<>(taskType, schedTaskTO, pageRef), true);\n-\n-        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.TASK_CREATE);\n-\n-        enableUtilityButton();\n-        setFooterVisibility(false);\n-\n-        initResultTable();\n-\n-        container.add(new IndicatorAjaxTimerBehavior(Duration.of(10, ChronoUnit.SECONDS)) {\n-\n-            private static final long serialVersionUID = -4661303265651934868L;\n-\n-            @Override\n-            protected void onTimer(final AjaxRequestTarget target) {\n-                container.modelChanged();\n-                target.add(container);\n-            }\n-        });\n-\n-        startAt = new TaskStartAtTogglePanel(container, pageRef);\n-        addInnerObject(startAt);\n-\n-        templates = new TemplatesTogglePanel(getActualId(), this, pageRef) {\n-\n-            private static final long serialVersionUID = -8765794727538618705L;\n-\n-            @Override\n-            protected Serializable onApplyInternal(\n-                    final TemplatableTO targetObject, final String type, final AnyTO anyTO) {\n-\n-                targetObject.getTemplates().put(type, anyTO);\n-                TaskRestClient.update(taskType, SchedTaskTO.class.cast(targetObject));\n-                return targetObject;\n-            }\n-        };\n-        addInnerObject(templates);\n-    }\n-\n-    protected SchedTaskDirectoryPanel(\n-            final BaseModal<?> baseModal,\n-            final MultilevelPanel multiLevelPanelRef,\n-            final TaskType taskType,\n-            final Class<T> reference,\n+            final T newTaskTO,\n             final PageReference pageRef,\n             final boolean wizardInModal) {\n \n-        super(baseModal, multiLevelPanelRef, pageRef, wizardInModal);\n+        super(id, baseModal, multiLevelPanelRef, pageRef, wizardInModal);\n         this.taskType = taskType;\n-        this.reference = reference;\n+        this.schedTaskTO = newTaskTO;\n \n-        try {\n-            schedTaskTO = reference.getDeclaredConstructor().newInstance();\n-        } catch (Exception e) {\n-            LOG.error(\"Failure instantiating task\", e);\n-        }\n+        modal.size(Modal.Size.Large);\n \n-        this.addNewItemPanelBuilder(new SchedTaskWizardBuilder<>(taskType, schedTaskTO, pageRef), true);\n+        addNewItemPanelBuilder(new SchedTaskWizardBuilder<>(taskType, schedTaskTO, pageRef), true);\n \n         MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, IdRepoEntitlement.TASK_CREATE);\n \n-        enableUtilityButton();\n         setFooterVisibility(false);\n \n         initResultTable();\n@@ -202,7 +141,7 @@ protected Serializable onApplyInternal(\n         addInnerObject(templates);\n     }\n \n-    protected List<IColumn<T, String>> getFieldColumns() {\n+    protected List<IColumn<T, String>> getHeadingFieldColumns() {\n         List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(\n@@ -212,30 +151,11 @@ protected List<IColumn<T, String>> getFieldColumns() {\n                 new StringResourceModel(Constants.NAME_FIELD_NAME, this),\n                 Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n \n-        columns.add(new PropertyColumn<>(\n-            new StringResourceModel(\"jobDelegate\", this), \"jobDelegate\", \"jobDelegate\") {\n-\n-            private static final long serialVersionUID = -3223917055078733093L;\n-\n-            @Override\n-            public void populateItem(\n-                final Item<ICellPopulator<T>> item,\n-                final String componentId,\n-                final IModel<T> rowModel) {\n+        return columns;\n+    }\n \n-                IModel<?> model = getDataModel(rowModel);\n-                if (model != null && model.getObject() instanceof String) {\n-                    String value = String.class.cast(model.getObject());\n-                    if (value.length() > 20) {\n-                        item.add(new Label(componentId, new Model<>(\"...\" + value.substring(value.length() - 17))));\n-                    } else {\n-                        item.add(new Label(componentId, getDataModel(rowModel)));\n-                    }\n-                } else {\n-                    super.populateItem(item, componentId, rowModel);\n-                }\n-            }\n-        });\n+    protected List<IColumn<T, String>> getTrailingFieldColumns() {\n+        List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.add(new DatePropertyColumn<>(\n                 new StringResourceModel(\"lastExec\", this), null, \"lastExec\"));\n@@ -255,17 +175,17 @@ public void populateItem(\n \n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<T>> cellItem,\n-                final String componentId,\n-                final IModel<T> rowModel) {\n+                    final Item<ICellPopulator<T>> cellItem,\n+                    final String componentId,\n+                    final IModel<T> rowModel) {\n \n                 Component panel;\n                 try {\n                     JobTO jobTO = TaskRestClient.getJob(rowModel.getObject().getKey());\n                     panel = new JobActionPanel(componentId, jobTO, false, SchedTaskDirectoryPanel.this);\n                     MetaDataRoleAuthorizationStrategy.authorize(\n-                        panel, WebPage.ENABLE,\n-                        String.format(\"%s,%s\", IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE));\n+                            panel, WebPage.ENABLE,\n+                            String.format(\"%s,%s\", IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE));\n                 } catch (Exception e) {\n                     LOG.error(\"Could not get job for task {}\", rowModel.getObject().getKey(), e);\n                     panel = new Label(componentId, Model.of());\n@@ -275,25 +195,60 @@ public void populateItem(\n \n             @Override\n             public String getCssClass() {\n-                return \"col-xs-1\";\n+                return \"running-col\";\n             }\n         });\n \n         return columns;\n     }\n \n+    protected List<IColumn<T, String>> getFieldColumns() {\n+        List<IColumn<T, String>> columns = new ArrayList<>();\n+\n+        columns.addAll(getHeadingFieldColumns());\n+\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"jobDelegate\", this), \"jobDelegate\", \"jobDelegate\") {\n+\n+            private static final long serialVersionUID = -3223917055078733093L;\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<T>> item,\n+                    final String componentId,\n+                    final IModel<T> rowModel) {\n+\n+                IModel<?> model = getDataModel(rowModel);\n+                if (model != null && model.getObject() instanceof String) {\n+                    String value = String.class.cast(model.getObject());\n+                    if (value.length() > 20) {\n+                        item.add(new Label(componentId, new Model<>(\"...\" + value.substring(value.length() - 17))));\n+                    } else {\n+                        item.add(new Label(componentId, getDataModel(rowModel)));\n+                    }\n+                } else {\n+                    super.populateItem(item, componentId, rowModel);\n+                }\n+            }\n+        });\n+\n+        columns.addAll(getTrailingFieldColumns());\n+\n+        return columns;\n+    }\n+\n     @Override\n     protected final List<IColumn<T, String>> getColumns() {\n-        final List<IColumn<T, String>> columns = new ArrayList<>();\n+        List<IColumn<T, String>> columns = new ArrayList<>();\n \n         columns.addAll(getFieldColumns());\n+\n         return columns;\n     }\n \n     @Override\n     public ActionsPanel<T> getActions(final IModel<T> model) {\n-        final ActionsPanel<T> panel = super.getActions(model);\n-        final T taskTO = model.getObject();\n+        ActionsPanel<T> panel = super.getActions(model);\n+        T taskTO = model.getObject();\n \n         panel.add(new ActionLink<>() {\n \n@@ -302,7 +257,7 @@ public ActionsPanel<T> getActions(final IModel<T> model) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n-                viewTask(taskTO, target);\n+                viewTaskExecs(taskTO, target);\n             }\n         }, ActionLink.ActionType.VIEW_EXECUTIONS, IdRepoEntitlement.TASK_READ);\n \n@@ -314,12 +269,12 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n             public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 SchedTaskDirectoryPanel.this.getTogglePanel().close(target);\n                 send(SchedTaskDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(\n-                        TaskRestClient.readTask(taskType, model.getObject().getKey()),\n-                        target).setResourceModel(\n-                        new StringResourceModel(\"inner.task.edit\",\n-                            SchedTaskDirectoryPanel.this,\n-                            Model.of(Pair.of(ActionLink.ActionType.EDIT, model.getObject())))));\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                TaskRestClient.readTask(taskType, model.getObject().getKey()),\n+                                target).setResourceModel(\n+                                new StringResourceModel(\"inner.task.edit\",\n+                                        SchedTaskDirectoryPanel.this,\n+                                        Model.of(Pair.of(ActionLink.ActionType.EDIT, model.getObject())))));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.TASK_UPDATE);\n \n@@ -333,13 +288,15 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n                 final T clone = SerializationUtils.clone(model.getObject());\n                 clone.setKey(null);\n                 send(SchedTaskDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(clone, target).setResourceModel(\n-                        new StringResourceModel(\"inner.task.clone\",\n-                            SchedTaskDirectoryPanel.this,\n-                            Model.of(Pair.of(ActionLink.ActionType.CLONE, model.getObject())))));\n+                        new AjaxWizard.EditItemActionEvent<>(clone, target).setResourceModel(\n+                                new StringResourceModel(\"inner.task.clone\",\n+                                        SchedTaskDirectoryPanel.this,\n+                                        Model.of(Pair.of(ActionLink.ActionType.CLONE, model.getObject())))));\n             }\n         }, ActionLink.ActionType.CLONE, IdRepoEntitlement.TASK_CREATE);\n \n+        addFurtherActions(panel, model);\n+\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -352,8 +309,6 @@ public void onClick(final AjaxRequestTarget target, final T ignore) {\n             }\n         }, ActionLink.ActionType.EXECUTE, IdRepoEntitlement.TASK_EXECUTE);\n \n-        addFurtherActions(panel, model);\n-\n         panel.add(new ActionLink<>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -395,19 +350,16 @@ protected Collection<ActionType> getBatches() {\n \n     @Override\n     protected SchedTasksProvider<T> dataProvider() {\n-        return new SchedTasksProvider<>(reference, taskType, rows);\n+        return new SchedTasksProvider<>(taskType, rows);\n     }\n \n     protected static class SchedTasksProvider<T extends SchedTaskTO> extends TaskDataProvider<T> {\n \n         private static final long serialVersionUID = 4725679400450513556L;\n \n-        private final Class<T> reference;\n-\n-        public SchedTasksProvider(final Class<T> reference, final TaskType taskType, final int paginatorRows) {\n+        public SchedTasksProvider(final TaskType taskType, final int paginatorRows) {\n             super(paginatorRows, taskType);\n             setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n-            this.reference = reference;\n         }\n \n         @Override\n@@ -418,8 +370,8 @@ public long size() {\n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n             int page = ((int) first / paginatorRows);\n-            return TaskRestClient.list(\n-                    reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n+            return TaskRestClient.<T>list(\n+                    taskType, (page < 0 ? 0 : page) + 1, paginatorRows, getSort()).\n                     iterator();\n         }\n     }"},{"sha":"2c4c0ce16e2520cd863736b92bf981fe75464634","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":55,"deletions":12,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -136,8 +137,8 @@ public Profile(final SchedTaskTO taskTO) {\n             description.setEnabled(true);\n             add(description);\n \n-            AjaxCheckBoxPanel active = new AjaxCheckBoxPanel(\"active\", \"active\", new PropertyModel<>(taskTO, \"active\"),\n-                    false);\n+            AjaxCheckBoxPanel active = new AjaxCheckBoxPanel(\n+                    \"active\", \"active\", new PropertyModel<>(taskTO, \"active\"), false);\n             add(active);\n \n             AjaxDropDownChoicePanel<String> jobDelegate = new AjaxDropDownChoicePanel<>(\n@@ -147,6 +148,47 @@ public Profile(final SchedTaskTO taskTO) {\n             jobDelegate.setEnabled(taskTO.getKey() == null);\n             add(jobDelegate);\n \n+            AutoCompleteSettings settings = new AutoCompleteSettings();\n+            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n+            settings.setShowListOnEmptyInput(!isSearchEnabled);\n+\n+            // ------------------------------\n+            // Only for macro tasks\n+            // ------------------------------            \n+            WebMarkupContainer macroTaskSpecifics = new WebMarkupContainer(\"macroTaskSpecifics\");\n+            add(macroTaskSpecifics.setRenderBodyOnly(true));\n+\n+            AjaxSearchFieldPanel realm =\n+                    new AjaxSearchFieldPanel(\"realm\", \"realm\",\n+                            new PropertyModel<>(taskTO, \"realm\"), settings) {\n+\n+                private static final long serialVersionUID = -6390474600233486704L;\n+\n+                @Override\n+                protected Iterator<String> getChoices(final String input) {\n+                    return (RealmsUtils.checkInput(input)\n+                            ? searchRealms(input).stream().map(RealmTO::getFullPath).collect(Collectors.toList())\n+                            : List.<String>of()).iterator();\n+                }\n+            };\n+\n+            if (taskTO instanceof MacroTaskTO) {\n+                realm.addRequiredLabel();\n+                if (StringUtils.isBlank(MacroTaskTO.class.cast(taskTO).getRealm())) {\n+                    // add a default destination realm if missing in the task\n+                    realm.setModelObject(SyncopeConstants.ROOT_REALM);\n+                }\n+            }\n+            macroTaskSpecifics.add(realm);\n+\n+            AjaxCheckBoxPanel continueOnError = new AjaxCheckBoxPanel(\n+                    \"continueOnError\", \"continueOnError\", new PropertyModel<>(taskTO, \"continueOnError\"), false);\n+            macroTaskSpecifics.add(continueOnError);\n+\n+            AjaxCheckBoxPanel saveExecs = new AjaxCheckBoxPanel(\n+                    \"saveExecs\", \"saveExecs\", new PropertyModel<>(taskTO, \"saveExecs\"), false);\n+            macroTaskSpecifics.add(saveExecs);\n+\n             // ------------------------------\n             // Only for pull tasks\n             // ------------------------------            \n@@ -160,7 +202,7 @@ public Profile(final SchedTaskTO taskTO) {\n                 pullTaskSpecifics.setEnabled(false).setVisible(false);\n             }\n \n-            final AjaxDropDownChoicePanel<PullMode> pullMode = new AjaxDropDownChoicePanel<>(\n+            AjaxDropDownChoicePanel<PullMode> pullMode = new AjaxDropDownChoicePanel<>(\n                     \"pullMode\", \"pullMode\", new PropertyModel<>(taskTO, \"pullMode\"), false);\n             pullMode.setChoices(List.of(PullMode.values()));\n             if (taskTO instanceof PullTaskTO) {\n@@ -169,7 +211,7 @@ public Profile(final SchedTaskTO taskTO) {\n             pullMode.setNullValid(!(taskTO instanceof PullTaskTO));\n             pullTaskSpecifics.add(pullMode);\n \n-            final AjaxDropDownChoicePanel<String> reconFilterBuilder = new AjaxDropDownChoicePanel<>(\n+            AjaxDropDownChoicePanel<String> reconFilterBuilder = new AjaxDropDownChoicePanel<>(\n                     \"reconFilterBuilder\", \"reconFilterBuilder\",\n                     new PropertyModel<>(taskTO, \"reconFilterBuilder\"), false);\n             reconFilterBuilder.setChoices(reconFilterBuilders.getObject());\n@@ -191,11 +233,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 }\n             });\n \n-            final AutoCompleteSettings settings = new AutoCompleteSettings();\n-            settings.setShowCompleteListOnFocusGain(!isSearchEnabled);\n-            settings.setShowListOnEmptyInput(!isSearchEnabled);\n-\n-            final AjaxSearchFieldPanel destinationRealm =\n+            AjaxSearchFieldPanel destinationRealm =\n                     new AjaxSearchFieldPanel(\"destinationRealm\", \"destinationRealm\",\n                             new PropertyModel<>(taskTO, \"destinationRealm\"), settings) {\n \n@@ -224,16 +262,16 @@ protected Iterator<String> getChoices(final String input) {\n \n             // ------------------------------\n             // Only for push tasks\n-            // ------------------------------  \n+            // ------------------------------\n             WebMarkupContainer pushTaskSpecifics = new WebMarkupContainer(\"pushTaskSpecifics\");\n             add(pushTaskSpecifics.setRenderBodyOnly(true));\n \n             if (!(taskTO instanceof PushTaskTO)) {\n                 pushTaskSpecifics.setEnabled(false).setVisible(false);\n             }\n \n-            final AjaxSearchFieldPanel sourceRealm = new AjaxSearchFieldPanel(\"sourceRealm\", \"sourceRealm\",\n-                    new PropertyModel<>(taskTO, \"sourceRealm\"), settings) {\n+            AjaxSearchFieldPanel sourceRealm = new AjaxSearchFieldPanel(\n+                    \"sourceRealm\", \"sourceRealm\", new PropertyModel<>(taskTO, \"sourceRealm\"), settings) {\n \n                 private static final long serialVersionUID = -6390474600233486704L;\n \n@@ -258,8 +296,13 @@ protected Iterator<String> getChoices(final String input) {\n \n             if (taskTO instanceof ProvisioningTaskTO) {\n                 jobDelegate.setEnabled(false).setVisible(false);\n+                macroTaskSpecifics.setEnabled(false).setVisible(false);\n+            } else if (taskTO instanceof MacroTaskTO) {\n+                jobDelegate.setEnabled(false).setVisible(false);\n+                provisioningTaskSpecifics.setEnabled(false).setVisible(false);\n             } else {\n                 provisioningTaskSpecifics.setEnabled(false).setVisible(false);\n+                macroTaskSpecifics.setEnabled(false).setVisible(false);\n             }\n \n             AjaxPalettePanel<String> actions = new AjaxPalettePanel.Builder<String>()."},{"sha":"b19b0effaa100f3ef56d6eec4ba2a8b44b94858a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTasks.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTasks.java?ref=47cf15904a4686dbda2c2c5dfbc6ffcdb7c57fd9","patch":"@@ -1,76 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.tasks;\n-\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.client.console.panels.MultilevelPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n-import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.StringResourceModel;\n-\n-public class SchedTasks extends AbstractTasks {\n-\n-    private static final long serialVersionUID = -4013796607157549641L;\n-\n-    public <T extends AnyTO> SchedTasks(final BaseModal<?> baseModal, final PageReference pageReference) {\n-        super(BaseModal.CONTENT_ID);\n-\n-        final MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n-        add(mlp);\n-\n-        mlp.setFirstLevel(new SchedTaskDirectoryPanel<>(\n-            baseModal, mlp, TaskType.SCHEDULED, SchedTaskTO.class, pageReference) {\n-\n-            private static final long serialVersionUID = -2195387360323687302L;\n-\n-            @Override\n-            protected void viewTask(final SchedTaskTO taskTO, final AjaxRequestTarget target) {\n-                mlp.next(\n-                    new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                    new TaskExecutionDetails<>(baseModal, taskTO, pageReference), target);\n-            }\n-        });\n-    }\n-\n-    public <T extends AnyTO> SchedTasks(final BaseModal<?> baseModal, final PageReference pageReference,\n-                                        final boolean wizardInModal, final String id) {\n-        super(id);\n-\n-        final MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n-        add(mlp);\n-\n-        mlp.setFirstLevel(new SchedTaskDirectoryPanel<>(\n-                baseModal, mlp, TaskType.SCHEDULED, SchedTaskTO.class, pageReference, wizardInModal) {\n-\n-            private static final long serialVersionUID = -2195387360323687302L;\n-\n-            @Override\n-            protected void viewTask(final SchedTaskTO taskTO, final AjaxRequestTarget target) {\n-                mlp.next(\n-                        new StringResourceModel(\"task.view\", this, new Model<>(Pair.of(null, taskTO))).getObject(),\n-                        new TaskExecutionDetails<>(baseModal, taskTO, pageReference), target);\n-            }\n-        });\n-    }\n-}"},{"sha":"17cd66e533d38c8c5f745422ebec678312a0ee0f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskDirectoryPanel.java","status":"modified","additions":19,"deletions":21,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -48,31 +48,29 @@\n \n     protected final BaseModal<?> baseModal;\n \n-    private final MultilevelPanel multiLevelPanelRef;\n+    protected final MultilevelPanel multiLevelPanelRef;\n \n     protected TaskDirectoryPanel(\n-            final BaseModal<?> baseModal, final MultilevelPanel multiLevelPanelRef, final PageReference pageRef) {\n-        super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, false);\n-        this.baseModal = baseModal;\n-        this.multiLevelPanelRef = multiLevelPanelRef;\n-        restClient = new TaskRestClient();\n-        setShowResultPanel(false);\n+            final BaseModal<?> baseModal,\n+            final MultilevelPanel multiLevelPanelRef,\n+            final PageReference pageRef,\n+            final boolean wizardInModal) {\n+\n+        this(MultilevelPanel.FIRST_LEVEL_ID, baseModal, multiLevelPanelRef, pageRef, wizardInModal);\n     }\n \n-    protected TaskDirectoryPanel(\n-            final BaseModal<?> baseModal, final MultilevelPanel multiLevelPanelRef, final PageReference pageRef,\n-            final boolean wizardInModal) {\n-        super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, wizardInModal);\n-        this.baseModal = baseModal;\n-        this.multiLevelPanelRef = multiLevelPanelRef;\n-        restClient = new TaskRestClient();\n-        setShowResultPanel(false);\n+    protected TaskDirectoryPanel(final String id, final PageReference pageRef) {\n+        this(id, null, null, pageRef, false);\n     }\n \n     protected TaskDirectoryPanel(\n-            final BaseModal<?> baseModal, final MultilevelPanel multiLevelPanelRef, final PageReference pageRef,\n-            final String id) {\n-        super(id, pageRef, false);\n+            final String id,\n+            final BaseModal<?> baseModal,\n+            final MultilevelPanel multiLevelPanelRef,\n+            final PageReference pageRef,\n+            final boolean wizardInModal) {\n+\n+        super(id, pageRef, wizardInModal);\n         this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         restClient = new TaskRestClient();\n@@ -81,10 +79,10 @@ protected TaskDirectoryPanel(\n \n     @Override\n     protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<T, String> resultTableBuilder) {\n-        resultTableBuilder.setMultiLevelPanel(baseModal, multiLevelPanelRef);\n+        resultTableBuilder.setMultiLevelPanel(multiLevelPanelRef);\n     }\n \n-    protected abstract void viewTask(T taskTO, AjaxRequestTarget target);\n+    protected abstract void viewTaskExecs(T taskTO, AjaxRequestTarget target);\n \n     protected abstract static class TasksProvider<T extends TaskTO> extends DirectoryDataProvider<T> {\n \n@@ -114,7 +112,7 @@ public IModel<T> model(final T object) {\n     public void onEvent(final IEvent<?> event) {\n         super.onEvent(event);\n         if (event.getPayload() instanceof ExitEvent) {\n-            final AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n+            AjaxRequestTarget target = ExitEvent.class.cast(event.getPayload()).getTarget();\n             baseModal.show(false);\n             baseModal.close(target);\n         }"},{"sha":"1b0cf18c0d753a63fd6cb0748d38957051589d68","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskExecutionDetails.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutionDetails.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -20,7 +20,6 @@\n \n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -34,13 +33,13 @@\n \n     private static final long serialVersionUID = -4110576026663173545L;\n \n-    public TaskExecutionDetails(final BaseModal<?> baseModal, final T taskTO, final PageReference pageRef) {\n+    public TaskExecutionDetails(final T taskTO, final PageReference pageRef) {\n         super();\n \n-        final MultilevelPanel mlp = new MultilevelPanel(\"executions\");\n+        MultilevelPanel mlp = new MultilevelPanel(\"executions\");\n         add(mlp);\n \n-        mlp.setFirstLevel(new ExecutionsDirectoryPanel(baseModal, mlp, taskTO.getKey(), new TaskRestClient(), pageRef) {\n+        mlp.setFirstLevel(new ExecutionsDirectoryPanel(mlp, taskTO.getKey(), new TaskRestClient(), pageRef) {\n \n             private static final long serialVersionUID = 5691719817252887541L;\n \n@@ -49,6 +48,7 @@ protected void next(\n                     final String title,\n                     final MultilevelPanel.SecondLevel slevel,\n                     final AjaxRequestTarget target) {\n+\n                 mlp.next(title, slevel, target);\n             }\n         });"},{"sha":"caf67cb5aea37cd3d452e36d0b8251eabd306653","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -27,12 +27,14 @@\n import org.apache.syncope.client.console.panels.ToggleableTarget;\n import org.apache.syncope.client.console.policies.PolicyRuleWrapper;\n import org.apache.syncope.client.console.reports.ReportletWrapper;\n+import org.apache.syncope.client.console.tasks.CommandWrapper;\n import org.apache.syncope.client.console.wizards.any.GroupWrapper;\n import org.apache.syncope.client.ui.commons.status.StatusBean;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.client.ui.commons.wizards.any.UserWrapper;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.command.CommandTO;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -104,13 +106,17 @@ public void updateHeader(final AjaxRequestTarget target, final Serializable mode\n             header = ((PolicyRuleWrapper) modelObject).getImplementationKey();\n         } else if (modelObject instanceof ReportletWrapper) {\n             header = ((ReportletWrapper) modelObject).getImplementationKey();\n+        } else if (modelObject instanceof CommandWrapper) {\n+            header = ((CommandWrapper) modelObject).getCommand().getKey();\n         } else if (modelObject instanceof JobTO) {\n             header = ((JobTO) modelObject).getRefKey() == null\n                     ? ((JobTO) modelObject).getRefDesc() : ((JobTO) modelObject).getRefKey();\n         } else if (modelObject instanceof ToggleableTarget) {\n             header = ((ToggleableTarget) modelObject).getAnyType();\n         } else if (modelObject instanceof Domain) {\n             header = ((Domain) modelObject).getKey();\n+        } else if (modelObject instanceof CommandTO) {\n+            header = ((CommandTO) modelObject).getKey();\n         } else if (modelObject instanceof NamedEntityTO) {\n             header = ((NamedEntityTO) modelObject).getName();\n         } else if (modelObject instanceof EntityTO) {"},{"sha":"c4f0218a57b9ac42dee027a7f334e21707e78965","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ConfirmBehavior.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FConfirmBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FConfirmBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FConfirmBehavior.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -55,6 +55,14 @@ public void renderHead(final Component component, final IHeaderResponse response\n                         + \"  evt.stopImmediatePropagation();\"\n                         + \"  bootbox.confirm({\"\n                         + \"message:'\" + new ResourceModel(msg).getObject() + \"', \"\n+                        + \"buttons: {\"\n+                        + \"    confirm: {\"\n+                        + \"        className: 'btn-success'\"\n+                        + \"    },\"\n+                        + \"    cancel: {\"\n+                        + \"        className: 'btn-danger'\"\n+                        + \"    }\"\n+                        + \"},\"\n                         + \"locale: '\" + SyncopeConsoleSession.get().getLocale().getLanguage() + \"',\"\n                         + \"callback: function(result) {\"\n                         + \"    if (result == true) {\""},{"sha":"8bdbfbc660236be3587a7b15ab92e03bb410e534","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":26,"deletions":25,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -225,7 +225,7 @@ private List<ExecTO> getUpdatedRecent() {\n     }\n \n     private List<ITab> buildTabList(final PageReference pageRef) {\n-        final List<ITab> tabs = new ArrayList<>();\n+        List<ITab> tabs = new ArrayList<>();\n \n         tabs.add(new AbstractTab(new ResourceModel(\"available\")) {\n \n@@ -324,9 +324,9 @@ protected List<IColumn<JobTO, String>> getColumns() {\n \n                 @Override\n                 public void populateItem(\n-                    final Item<ICellPopulator<JobTO>> cellItem,\n-                    final String componentId,\n-                    final IModel<JobTO> rowModel) {\n+                        final Item<ICellPopulator<JobTO>> cellItem,\n+                        final String componentId,\n+                        final IModel<JobTO> rowModel) {\n \n                     JobTO jobTO = rowModel.getObject();\n                     JobActionPanel panel = new JobActionPanel(componentId, jobTO, true, JobWidget.this);\n@@ -335,17 +335,17 @@ public void populateItem(\n                     switch (jobTO.getType()) {\n                         case TASK:\n                             roles = String.format(\"%s,%s\",\n-                                IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE);\n+                                    IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE);\n                             break;\n \n                         case REPORT:\n                             roles = String.format(\"%s,%s\",\n-                                IdRepoEntitlement.REPORT_EXECUTE, IdRepoEntitlement.REPORT_UPDATE);\n+                                    IdRepoEntitlement.REPORT_EXECUTE, IdRepoEntitlement.REPORT_UPDATE);\n                             break;\n \n                         case NOTIFICATION:\n                             roles = String.format(\"%s,%s\",\n-                                IdRepoEntitlement.NOTIFICATION_EXECUTE, IdRepoEntitlement.NOTIFICATION_UPDATE);\n+                                    IdRepoEntitlement.NOTIFICATION_EXECUTE, IdRepoEntitlement.NOTIFICATION_UPDATE);\n                             break;\n \n                         default:\n@@ -358,7 +358,7 @@ public void populateItem(\n \n                 @Override\n                 public String getCssClass() {\n-                    return \"col-xs-1\";\n+                    return \"running-col\";\n                 }\n             });\n \n@@ -390,9 +390,9 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                             target.add(jobModal.setContent(rwb.build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n \n                             jobModal.header(new StringResourceModel(\n-                                \"any.edit\",\n-                                AvailableJobsPanel.this,\n-                                new Model<>(reportTO)));\n+                                    \"any.edit\",\n+                                    AvailableJobsPanel.this,\n+                                    new Model<>(reportTO)));\n \n                             jobModal.show(true);\n                             break;\n@@ -403,21 +403,21 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                                 schedTaskTO = TaskRestClient.readTask(TaskType.PULL, jobTO.getRefKey());\n                             } catch (Exception e) {\n                                 LOG.debug(\"Failed to read {} as {}, attempting {}\",\n-                                    jobTO.getRefKey(), TaskType.PULL, TaskType.PUSH, e);\n+                                        jobTO.getRefKey(), TaskType.PULL, TaskType.PUSH, e);\n                                 schedTaskTO = TaskRestClient.readTask(TaskType.PUSH, jobTO.getRefKey());\n                             }\n \n                             SchedTaskWizardBuilder<ProvisioningTaskTO> swb =\n-                                new SchedTaskWizardBuilder<>(schedTaskTO instanceof PullTaskTO\n-                                    ? TaskType.PULL : TaskType.PUSH, schedTaskTO, pageRef);\n+                                    new SchedTaskWizardBuilder<>(schedTaskTO instanceof PullTaskTO\n+                                            ? TaskType.PULL : TaskType.PUSH, schedTaskTO, pageRef);\n                             swb.setEventSink(AvailableJobsPanel.this);\n \n                             target.add(jobModal.setContent(swb.build(BaseModal.CONTENT_ID, AjaxWizard.Mode.EDIT)));\n \n                             jobModal.header(new StringResourceModel(\n-                                \"any.edit\",\n-                                AvailableJobsPanel.this,\n-                                new Model<>(schedTaskTO)));\n+                                    \"any.edit\",\n+                                    AvailableJobsPanel.this,\n+                                    new Model<>(schedTaskTO)));\n \n                             jobModal.show(true);\n                             break;\n@@ -451,14 +451,14 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                                 final ReportTO reportTO = ReportRestClient.read(jobTO.getRefKey());\n \n                                 target.add(AvailableJobsPanel.this.reportModal.setContent(\n-                                    new ReportletDirectoryPanel(reportModal, jobTO.getRefKey(), pageRef)));\n+                                        new ReportletDirectoryPanel(reportModal, jobTO.getRefKey(), pageRef)));\n \n                                 MetaDataRoleAuthorizationStrategy.authorize(\n-                                    reportModal.getForm(),\n-                                    ENABLE, IdRepoEntitlement.REPORT_UPDATE);\n+                                        reportModal.getForm(),\n+                                        ENABLE, IdRepoEntitlement.REPORT_UPDATE);\n \n                                 reportModal.header(new StringResourceModel(\n-                                    \"reportlet.conf\", AvailableJobsPanel.this, new Model<>(reportTO)));\n+                                        \"reportlet.conf\", AvailableJobsPanel.this, new Model<>(reportTO)));\n \n                                 reportModal.show(true);\n \n@@ -476,7 +476,7 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                 @Override\n                 protected boolean statusCondition(final JobTO modelObject) {\n                     return !(null != jobTO.getType() && (JobType.TASK.equals(jobTO.getType())\n-                        || JobType.NOTIFICATION.equals(jobTO.getType())));\n+                            || JobType.NOTIFICATION.equals(jobTO.getType())));\n                 }\n \n             }, ActionType.COMPOSE, IdRepoEntitlement.TASK_UPDATE);\n@@ -518,8 +518,8 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                 @Override\n                 protected boolean statusCondition(final JobTO modelObject) {\n                     return (null != jobTO.getType()\n-                        && !JobType.NOTIFICATION.equals(jobTO.getType())\n-                        && (jobTO.isScheduled() && !jobTO.isRunning()));\n+                            && !JobType.NOTIFICATION.equals(jobTO.getType())\n+                            && (jobTO.isScheduled() && !jobTO.isRunning()));\n                 }\n             }, ActionLink.ActionType.DELETE, IdRepoEntitlement.TASK_DELETE, true);\n \n@@ -625,7 +625,7 @@ protected List<IColumn<ExecTO, String>> getColumns() {\n \n         @Override\n         public ActionsPanel<ExecTO> getActions(final IModel<ExecTO> model) {\n-            final ActionsPanel<ExecTO> panel = super.getActions(model);\n+            ActionsPanel<ExecTO> panel = super.getActions(model);\n \n             panel.add(new ActionLink<>() {\n \n@@ -639,6 +639,7 @@ public void onClick(final AjaxRequestTarget target, final ExecTO ignore) {\n                     target.add(detailModal);\n                 }\n             }, ActionLink.ActionType.VIEW, IdRepoEntitlement.TASK_READ);\n+\n             return panel;\n         }\n "},{"sha":"cd27db62e608ea6270231c82499fef13a802b894","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/CommandWizardBuilder.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCommandWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCommandWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCommandWizardBuilder.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.wizards;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.panels.BeanPanel;\n+import org.apache.syncope.client.console.rest.CommandRestClient;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.wizard.WizardModel;\n+import org.apache.wicket.extensions.wizard.WizardStep;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+\n+public class CommandWizardBuilder extends BaseAjaxWizardBuilder<CommandTO> {\n+\n+    private static final long serialVersionUID = 5288806466136582164L;\n+\n+    public CommandWizardBuilder(final CommandTO defaultItem, final PageReference pageRef) {\n+        super(defaultItem, pageRef);\n+    }\n+\n+    @Override\n+    protected Serializable onApplyInternal(final CommandTO modelObject) {\n+        return CommandRestClient.run(modelObject).getOutput();\n+    }\n+\n+    @Override\n+    protected WizardModel buildModelSteps(final CommandTO modelObject, final WizardModel wizardModel) {\n+        wizardModel.add(new CommandArgs(modelObject));\n+        return wizardModel;\n+    }\n+\n+    public class CommandArgs extends WizardStep {\n+\n+        private static final long serialVersionUID = -785981096328637758L;\n+\n+        public CommandArgs(final CommandTO command) {\n+            LoadableDetachableModel<Serializable> bean = new LoadableDetachableModel<>() {\n+\n+                private static final long serialVersionUID = -1096114645494621802L;\n+\n+                @Override\n+                protected Serializable load() {\n+                    return command.getArgs();\n+                }\n+            };\n+            add(new BeanPanel<>(\"bean\", bean, pageRef).setRenderBodyOnly(true));\n+        }\n+    }\n+}"},{"sha":"c79f0bde58de3fbdef05760ae6ea6bf1d73272c9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/WizardMgtPanel.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -227,13 +227,12 @@ public void onEvent(final IEvent<?> event) {\n                 target.ifPresent(this::customActionOnCancelCallback);\n             } else if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n                 SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                target.ifPresent(ajaxRequestTarget ->\n-                    ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(ajaxRequestTarget));\n+                target.ifPresent(t -> ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(t));\n \n                 if (wizardInModal && showResultPanel) {\n                     modal.setContent(new ResultPanel<>(\n-                        item,\n-                        AjaxWizard.NewItemFinishEvent.class.cast(newItemEvent).getResult()) {\n+                            item,\n+                            AjaxWizard.NewItemFinishEvent.class.cast(newItemEvent).getResult()) {\n \n                         private static final long serialVersionUID = -2630573849050255233L;\n \n@@ -243,8 +242,11 @@ protected void closeAction(final AjaxRequestTarget target) {\n                         }\n \n                         @Override\n-                        protected Panel customResultBody(final String panelId, final T item, \n+                        protected Panel customResultBody(\n+                                final String panelId,\n+                                final T item,\n                                 final Serializable result) {\n+\n                             return WizardMgtPanel.this.customResultBody(panelId, item, result);\n                         }\n                     });"},{"sha":"1deeea07abefbad7117d1de50c8fdbe901ae7d9c","filename":"client/idrepo/console/src/main/resources/META-INF/resources/css/syncopeConsole.scss","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.scss","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.scss","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2FsyncopeConsole.scss?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -96,9 +96,12 @@ body {\n   }\n }\n \n+/* JSON diff\n+============================================================================= */\n+\n .json-diff-header {\n   text-align: center;\n-  \n+\n   display: table;\n   width: 100%;\n   table-layout: fixed;\n@@ -109,3 +112,7 @@ body {\n   display: table-cell;\n   vertical-align: middle;\n }\n+\n+.running-col {\n+  width: 65px;\n+}"},{"sha":"e0134275004f986f35b2206e5f09e717c92682fe","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/SyncopeWebApplication.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -80,3 +80,5 @@ domains=Domains\n nomatch=No matches found\n tooLargeFile=File is too large, max upload file size is ${maxUploadSizeB} bytes (${maxUploadSizeMB} MB). \n confirmDelegation=Do you really want to switch user?\n+topology=Topology\n+engagements=Engagements"},{"sha":"90301999a4c01e161ec49f50293a69f5cbf8f7eb","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/SyncopeWebApplication_fr_CA.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -79,3 +79,4 @@ domains=Domaines\n nomatch=Aucune correspondance trouv\\u00e9e\n tooLargeFile=Fichier trop volumineux, la taille maximale autoris\\u00e9e est de $ {maxUploadSizeB} octets ($ {maxUploadSizeMB} Mo).\n confirmDelegation=Do you really want to switch user?\n+engagements=Engagements"},{"sha":"3200a9be9dc322579269a4142879b045ef79f024","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/SyncopeWebApplication_it.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -80,3 +80,5 @@ domains=Domini\n nomatch=Nessun risultato trovato\n tooLargeFile=File troppo grande, la dimensione massima ammessa \\u00e8 ${maxUploadSizeB} bytes (${maxUploadSizeMB} MB). \n confirmDelegation=Vuoi davvero cambiare utenza?\n+topology=Topologia\n+engagements=Impegni"},{"sha":"a4ed95c701afc80ef6d6cc6291e8b867259a0624","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/SyncopeWebApplication_ja.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -78,3 +78,5 @@ domains=\\u30c9\\u30e1\\u30a4\\u30f3\n nomatch=No matches found\n tooLargeFile=File is too large, max upload file size is ${maxUploadSizeB} bytes (${maxUploadSizeMB} MB). \n confirmDelegation=Do you really want to switch user?\n+topology=Topology\n+engagements=Engagements"},{"sha":"cd5fe7769e2231b094ed585fa4db72a762a80467","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/SyncopeWebApplication_pt_BR.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -80,3 +80,5 @@ domains=Dom\\u00ednios\n nomatch=Nenhuma correspond\\u00eancia encontrada\n tooLargeFile=File is too large, max upload file size is ${maxUploadSizeB} bytes (${maxUploadSizeMB} MB). \n confirmDelegation=Do you really want to switch user?\n+topology=Topology\n+engagements=Engagements"},{"sha":"dd5cd0fbc29f42316e62d50e9a93222e28024fb2","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/SyncopeWebApplication_ru.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -79,3 +79,5 @@ domains=Domains\n nomatch=No matches found\n tooLargeFile=File is too large, max upload file size is ${maxUploadSizeB} bytes (${maxUploadSizeMB} MB). \n confirmDelegation=Do you really want to switch user?\n+topology=Topology\n+engagements=Engagements"},{"sha":"3b59310f2a4b2fd4614bd2ee7d1b30f857fed091","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyCommand.groovy","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyCommand.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyCommand.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyCommand.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,30 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.command.CommandArgs\n+import org.apache.syncope.core.logic.api.Command\n+\n+@CompileStatic\n+class MyCommand implements Command<CommandArgs> {\n+\n+  String run(CommandArgs args) {\n+    return \"SUCCESS\"\n+  }\n+}"},{"sha":"b176acd1d1ab1cb933f78b993030546b21a69856","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyLogicActions.groovy","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -21,7 +21,7 @@ import org.apache.syncope.common.lib.request.AnyCR\n import org.apache.syncope.common.lib.request.AnyUR\n import org.apache.syncope.common.lib.to.AnyTO\n import org.apache.syncope.common.lib.to.PropagationStatus\n-import org.apache.syncope.core.provisioning.api.LogicActions\n+import org.apache.syncope.core.logic.api.LogicActions\n \n @CompileStatic\n class MyLogicActions implements LogicActions {"},{"sha":"1fe53ff7137d3f1e24ac7d12721de4ff1a2f3b48","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyRecipientsProvider.groovy","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyRecipientsProvider.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyRecipientsProvider.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyRecipientsProvider.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -17,7 +17,7 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator\n+import java.util.Set\n import org.apache.syncope.core.persistence.api.entity.Notification\n import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider\n \n@@ -26,6 +26,6 @@ class MyRecipientsProvider implements RecipientsProvider {\n   \n   @Override\n   Set<String> provideRecipients(Notification notification) {\n-    return List.of();\n+    return Set.of();\n   }\n }"},{"sha":"7ca271e928ba5173aab836fa04cb925c35d5cfaa","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/BasePage.html","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -127,6 +127,7 @@ <h3 class=\"box-title\" wicket:id=\"delegationsHeader\"/>\n             <ul class=\"nav nav-pills nav-sidebar flex-column nav-child-indent nav-compact\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\n               <li class=\"nav-item\" wicket:id=\"dashboardLI\"><a href=\"#\" class=\"nav-link\" wicket:id=\"dashboard\"><i class=\"nav-icon fa fa-tachometer-alt\"></i><p><wicket:message key=\"dashboard\"/></p></a></li>\n               <li class=\"nav-item\" wicket:id=\"realmsLI\"><a href=\"#\" class=\"nav-link\" wicket:id=\"realms\"><i class=\"nav-icon fa fa-folder-open\"></i><p><wicket:message key=\"realms\"/></p></a></li>\n+              <li class=\"nav-item\" wicket:id=\"engagementsLI\"><a href=\"#\" class=\"nav-link\" wicket:id=\"engagements\"><i class=\"nav-icon fas fa-tasks\"></i><p><wicket:message key=\"engagements\"/></p></a></li>\n               <li class=\"nav-item\" wicket:id=\"reportsLI\"><a href=\"#\" class=\"nav-link\" wicket:id=\"reports\"><i class=\"nav-icon fa fa-chart-pie\"></i><p><wicket:message key=\"reports\"/></p></a></li>\n               <wicket:container wicket:id=\"idmPages\">\n                 <li class=\"nav-item\" wicket:id=\"idmPageLI\">"},{"sha":"0a67f877c9600cdc1ce2b47ffee7051e4d73e1bc","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements.html","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,47 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <section class=\"content-header\">\n+      <div class=\"container-fluid\">\n+        <div class=\"row mb-2\">\n+          <div class=\"col-sm-6\">\n+            <h1>&nbsp;</h1>\n+          </div>\n+          <div class=\"col-sm-6\">\n+            <ol class=\"breadcrumb float-sm-right\">\n+              <li class=\"breadcrumb-item\">\n+                <a wicket:id=\"dashboardBr\"><i class=\"fa fa-tachometer-alt\"></i> <wicket:message key=\"dashboard\"></wicket:message></a>\n+              </li>\n+              <li class=\"breadcrumb-item active\"><wicket:message key=\"engagements\"/></li>\n+            </ol>\n+          </div>\n+        </div>\n+      </div><!-- /.container-fluid -->\n+    </section>\n+\n+    <section class=\"content\" wicket:id=\"content\">\n+      <div class=\"container-fluid\">\n+        <div class=\"card card-outline\">\n+          <div class=\"card-body\" wicket:id=\"tabbedPanel\"/>\n+        </div>\n+      </div>\n+    </section>\n+  </wicket:extend>\n+</html>"},{"sha":"f46483841fd95e715e8cab1a0c16a171d9f4979b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+schedTasks=Scheduled Tasks\n+macroTasks=Macro\n+commands=Commands\n+arguments=Arguments\n+any.edit=Run ${key}"},{"sha":"f46483841fd95e715e8cab1a0c16a171d9f4979b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements_fr_CA.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+schedTasks=Scheduled Tasks\n+macroTasks=Macro\n+commands=Commands\n+arguments=Arguments\n+any.edit=Run ${key}"},{"sha":"da0fafe64589fa0d31b7c9c07fb9799f0a76d125","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements_it.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+schedTasks=Task Programmati\n+macroTasks=Macro\n+commands=Comandi\n+arguments=Argomenti\n+any.edit=Esegui ${key}"},{"sha":"f46483841fd95e715e8cab1a0c16a171d9f4979b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements_ja.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+schedTasks=Scheduled Tasks\n+macroTasks=Macro\n+commands=Commands\n+arguments=Arguments\n+any.edit=Run ${key}"},{"sha":"39b6776c98841da426e302050a252f5868211c61","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements_pt_BR.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+schedTasks=ScheduledScheduled Tasks\n+macroTasks=Macro\n+commands=Commands\n+arguments=Arguments\n+any.edit=Run ${key}"},{"sha":"f46483841fd95e715e8cab1a0c16a171d9f4979b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Engagements_ru.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEngagements_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+schedTasks=Scheduled Tasks\n+macroTasks=Macro\n+commands=Commands\n+arguments=Arguments\n+any.edit=Run ${key}"},{"sha":"a13d5041680209069a984ebd2a0114f0cc7f8816","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Reports.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -14,5 +14,5 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reports=Reports\n+\n report.templates=Templates"},{"sha":"7a2a58b8ac52c92edac9ff315cc7062551ae31af","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Reports_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -14,5 +14,5 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reports=Report\n+\n report.templates=Template"},{"sha":"2c4b891886298604c448d14b908d38f88dae2e65","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Reports_ja.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -14,5 +14,5 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reports=\\u30ec\\u30dd\\u30fc\\u30c8\n+\n report.templates=\\u30c6\\u30f3\\u30d7\\u30ec\\u30fc\\u30c8"},{"sha":"7a2a58b8ac52c92edac9ff315cc7062551ae31af","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Reports_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -14,5 +14,5 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-reports=Reports\n+\n report.templates=Template"},{"sha":"bd7b28186717d3dd5927ded33d7e00e609615211","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/Reports_ru.properties","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -14,6 +14,5 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-#\n-reports=\\u041e\\u0442\\u0447\\u0435\\u0442\\u044b\n+\n report.templates=\\u0428\\u0430\\u0431\\u043b\\u043e\\u043d\\u044b"},{"sha":"9375b3de50112eb27ad48fda9803c424a170f253","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CommandsPanel.html","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCommandsPanel.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,36 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"searchBox\">\n+      <form wicket:id=\"form\">\n+        <div class=\"input-group mb-3\">\n+          <span wicket:id=\"filter\">[FILTER]</span>\n+          <span class=\"input-group-btn\">\n+            <button type=\"button\" class=\"btn btn-default btn-flat\" wicket:id=\"search\">\n+              <span class=\"fas fa-search\" aria-hidden=\"true\"></span>\n+            </button>\n+          </span>\n+        </div>\n+      </form>\n+    </div>\n+\n+    <div wicket:id=\"commands\"></div>\n+  </wicket:panel>\n+</html>"},{"sha":"7772c93b7b0f9ede0879d65b1ee4014cc4497248","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$CommandArgs.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24CommandArgs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24CommandArgs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24CommandArgs.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"bean\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"8f5d94de16710ef83061ea244bbf633b02d84959","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile.html","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,26 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div class=\"form-group\">\n+      <label for=\"command\"><wicket:message key=\"command\"/></label>\n+      <input type=\"text\" class=\"form-control col-xs-4\"  wicket:id=\"command\"/>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"8b0724c04b1b5ed408eaecef7887b3dc13ad4daf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command=Command"},{"sha":"8b0724c04b1b5ed408eaecef7887b3dc13ad4daf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile_fr_CA.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command=Command"},{"sha":"91b2647095c983b3faba1ac1696797d759fc8c9e","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile_it.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command=Comando"},{"sha":"8b0724c04b1b5ed408eaecef7887b3dc13ad4daf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile_ja.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command=Command"},{"sha":"8b0724c04b1b5ed408eaecef7887b3dc13ad4daf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile_pt_BR.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command=Command"},{"sha":"8b0724c04b1b5ed408eaecef7887b3dc13ad4daf","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/CommandComposeWizardBuilder$Profile_ru.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FCommandComposeWizardBuilder%24Profile_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command=Command"},{"sha":"2c072ba2df9024710a297238177291dd7dc8d290","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command.conf=Command configuration for ${name}\n+continueOnError=Continue on error\n+saveExecs=Save executions"},{"sha":"2c072ba2df9024710a297238177291dd7dc8d290","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel_fr_CA.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command.conf=Command configuration for ${name}\n+continueOnError=Continue on error\n+saveExecs=Save executions"},{"sha":"91e32ecf6e391f4cd7aa8b6772c65cd79b7576b0","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel_it.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command.conf=Configurazione dei comandi per ${name}\n+continueOnError=Continuare in caso di errore\n+saveExecs=Salvare esecuzioni"},{"sha":"2c072ba2df9024710a297238177291dd7dc8d290","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel_ja.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command.conf=Command configuration for ${name}\n+continueOnError=Continue on error\n+saveExecs=Save executions"},{"sha":"2c072ba2df9024710a297238177291dd7dc8d290","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel_pt_BR.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command.conf=Command configuration for ${name}\n+continueOnError=Continue on error\n+saveExecs=Save executions"},{"sha":"2c072ba2df9024710a297238177291dd7dc8d290","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/MacroTaskDirectoryPanel_ru.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FMacroTaskDirectoryPanel_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+command.conf=Command configuration for ${name}\n+continueOnError=Continue on error\n+saveExecs=Save executions"},{"sha":"70dbbd8e89dddca9a76d5acbd9cb603685d68e55","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -30,3 +30,4 @@ pullMode=Pull Mode\n reconFilterBuilder=Reconciliation Filter Builder\n actions=Actions\n sourceRealm=Source Realm\n+realm=Realm"},{"sha":"cc45c5c4fa559f573d63ce62b37f7771e500c9d4","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_fr_CA.properties","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -17,15 +17,16 @@\n name=Nom\n description=Description\n destinationRealm=Domaine de destination\n-jobDelegate=D�l�gu� � la t�che\n-lastExec=Derni�re ex�cution\n-nextExec=Prochaine ex�cution\n+jobDelegate=D\\u00e9l\\u00e9gu\\u00e9 \\u00e0 la t\\u00e2che\n+lastExec=Derni\\u00e8re ex\\u00e9cution\n+nextExec=Prochaine ex\\u00e9cution\n active=Actif\n any.edit=Modifier ${name}\n-any.new=Nouvelle t�che\n+any.new=Nouvelle t\\u00e2che\n any.finish=Soumettre ${name}\n any.cancel=Annuler ${name}\n pullMode=Mode Extraction\n-reconFilterBuilder=G�n�rateur de filtre de rapprochement\n+reconFilterBuilder=G\\u00e9n\\u00e9rateur de filtre de rapprochement\n actions=Actions\n sourceRealm=Domaine source\n+realm=Realm"},{"sha":"0444fd6dc5f9bef95943e62b272de66c0483efe1","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_it.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -30,3 +30,4 @@ pullMode=Pull Mode\n reconFilterBuilder=Reconciliation Filter Builder\n actions=Actions\n sourceRealm=Realm sorgente\n+realm=Realm"},{"sha":"8d8cf9bfb9386c0ce7575dc23ee4a1b1fbd40ea9","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ja.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_ja.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -30,3 +30,4 @@ pullMode=\\u30d7\\u30eb\\u30e2\\u30fc\\u30c9\n reconFilterBuilder=\\u30d5\\u30a3\\u30eb\\u30bf\\u30fc\\u30d3\\u30eb\\u30c0\\u30fc\\u306e\\u7167\\u5408\n actions=\\u30a2\\u30af\\u30b7\\u30e7\\u30f3\n sourceRealm=\\u30bd\\u30fc\\u30b9\\u30ec\\u30eb\\u30e0\n+realm=Realm"},{"sha":"70dbbd8e89dddca9a76d5acbd9cb603685d68e55","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_pt_BR.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -30,3 +30,4 @@ pullMode=Pull Mode\n reconFilterBuilder=Reconciliation Filter Builder\n actions=Actions\n sourceRealm=Source Realm\n+realm=Realm"},{"sha":"99490c04cddcb493850d5a493686bec05fdc6e57","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel_ru.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -41,3 +41,4 @@ pullMode=\\u0420\\u0435\\u0436\\u0438\\u043c \\u043f\\u043e\\u043b\\u0443\\u0447\\u0435\\u04\n reconFilterBuilder=\\u0424\\u0438\\u043b\\u044c\\u0442\\u0440 \\u0440\\u0435\\u043a\\u043e\\u043d\\u0441\\u0438\\u043b\\u0438\\u0430\\u0446\\u0438\\u0438\n actions=\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044f\n sourceRealm=Source Realm\n+realm=Realm"},{"sha":"a4b56158470a34a3d2ca8899eb440ff338296964","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile.html","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -24,6 +24,12 @@\n \n     <div class=\"form-group\"><span wicket:id=\"jobDelegate\">[jobDelegate]</span></div>\n \n+    <span wicket:id=\"macroTaskSpecifics\">\n+      <div class=\"form-group\"><span wicket:id=\"realm\">[realm]</span></div>\n+      <div class=\"form-group\"><span wicket:id=\"continueOnError\">[continueOnError]</span></div>\n+      <div class=\"form-group\"><span wicket:id=\"saveExecs\">[saveExecs]</span></div>\n+    </span>      \n+\n     <span wicket:id=\"pullTaskSpecifics\">\n       <div class=\"form-group\"><span wicket:id=\"destinationRealm\">[destinationRealm]</span></div>\n       <div class=\"form-group\"><span wicket:id=\"pullMode\">[pullMode]</span></div>"},{"sha":"4c3c876a235cc9fad2b92badce048986b412e713","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder$Profile_fr_CA.properties","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder%24Profile_fr_CA.properties?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -17,18 +17,18 @@\n name=Nom\n description=Description\n jobDelegate=Classe\n-matchingRule=R�gle correspondante\n-unmatchingRule=R�gle non correspondante\n-performCreate=Permettre cr�ation\n-performUpdate=Permettre mise � jour\n+matchingRule=R\\u00e8gle correspondante\n+unmatchingRule=R\\u00e8gle non correspondante\n+performCreate=Permettre cr\\u00e9ation\n+performUpdate=Permettre mise \\u00e0 jour\n performDelete=Permettre suppression\n syncStatus=Statut sync\n-lastExec=Derni�re ex�cution\n-nextExec=Prochaine ex�cution\n-detail=D�tails\n+lastExec=Derni\\u00e8re ex\\u00e9cution\n+nextExec=Prochaine ex\\u00e9cution\n+detail=D\\u00e9tails\n delete=Supprimer\n edit=Modifier\n-execute=Ex�cuter\n-executeDryRun=Test � blanc\n+execute=Ex\\u00e9cuter\n+executeDryRun=Test \\u00e0 blanc\n latestExecStatus=Dernier statut\n-remediation=Remise en �tat\n+remediation=Remise en \\u00e9tat"},{"sha":"7772c93b7b0f9ede0879d65b1ee4014cc4497248","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/CommandWizardBuilder$CommandArgs.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCommandWizardBuilder%24CommandArgs.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCommandWizardBuilder%24CommandArgs.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCommandWizardBuilder%24CommandArgs.html?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <span wicket:id=\"bean\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"5a66bae16d075cfb7ecaefebf3916deab71b3b0a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/command/CommandArgs.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandArgs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandArgs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandArgs.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.command;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n+public class CommandArgs implements BaseBean {\n+\n+    private static final long serialVersionUID = -85050010490462751L;\n+\n+}"},{"sha":"896833a0c3ae36f6ae7101aace26b56cd1c23eed","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/command/CommandOutput.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandOutput.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandOutput.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandOutput.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.command;\n+\n+public class CommandOutput extends CommandTO {\n+\n+    private static final long serialVersionUID = 7711356516501958110L;\n+\n+    public static class Builder extends CommandTO.Builder {\n+\n+        public Builder(final String key) {\n+            super(key);\n+        }\n+\n+        public Builder(final CommandTO commandTO) {\n+            super(commandTO.getKey());\n+            args(commandTO.getArgs());\n+        }\n+\n+        @Override\n+        protected CommandOutput newInstance() {\n+            return new CommandOutput();\n+        }\n+\n+        @Override\n+        public Builder args(final CommandArgs args) {\n+            return (Builder) super.args(args);\n+        }\n+\n+        public Builder output(final String output) {\n+            ((CommandOutput) getInstance()).setOutput(output);\n+            return this;\n+        }\n+\n+        @Override\n+        public CommandOutput build() {\n+            return (CommandOutput) super.build();\n+        }\n+    }\n+\n+    private String output;\n+\n+    public String getOutput() {\n+        return output;\n+    }\n+\n+    public void setOutput(final String output) {\n+        this.output = output;\n+    }\n+}"},{"sha":"c9bd8d120660217a5be83cea28f009ddd818761c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/command/CommandTO.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcommand%2FCommandTO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.command;\n+\n+import javax.ws.rs.PathParam;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+public class CommandTO implements BaseBean {\n+\n+    private static final long serialVersionUID = 7711356516501958110L;\n+\n+    public static class Builder {\n+\n+        protected CommandTO instance;\n+\n+        public Builder(final String key) {\n+            getInstance().setKey(key);\n+        }\n+\n+        protected CommandTO newInstance() {\n+            return new CommandTO();\n+        }\n+\n+        protected final CommandTO getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        public Builder args(final CommandArgs args) {\n+            getInstance().setArgs(args);\n+            return this;\n+        }\n+\n+        public CommandTO build() {\n+            return getInstance();\n+        }\n+    }\n+\n+    private String key;\n+\n+    private CommandArgs args;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public CommandArgs getArgs() {\n+        return args;\n+    }\n+\n+    public void setArgs(final CommandArgs args) {\n+        this.args = args;\n+    }\n+}"},{"sha":"01bf44eb6ff14383ef77887a4357d07c646ba901","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/MacroTaskTO.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMacroTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMacroTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMacroTaskTO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+\n+@Schema(allOf = { SchedTaskTO.class }, discriminatorProperty = \"_class\")\n+public class MacroTaskTO extends SchedTaskTO {\n+\n+    private static final long serialVersionUID = -2387363212408909094L;\n+\n+    private String realm;\n+\n+    private final List<CommandTO> commands = new ArrayList<>();\n+\n+    private boolean continueOnError;\n+\n+    private boolean saveExecs = true;\n+\n+    @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n+    @JsonProperty(\"_class\")\n+    @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.MacroTaskTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final String realm) {\n+        this.realm = realm;\n+    }\n+\n+    @JacksonXmlElementWrapper(localName = \"commands\")\n+    @JacksonXmlProperty(localName = \"command\")\n+    public List<CommandTO> getCommands() {\n+        return commands;\n+    }\n+\n+    public boolean isContinueOnError() {\n+        return continueOnError;\n+    }\n+\n+    public void setContinueOnError(final boolean continueOnError) {\n+        this.continueOnError = continueOnError;\n+    }\n+\n+    public boolean isSaveExecs() {\n+        return saveExecs;\n+    }\n+\n+    public void setSaveExecs(final boolean saveExecs) {\n+        this.saveExecs = saveExecs;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(realm).\n+                append(commands).\n+                append(continueOnError).\n+                append(saveExecs).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final MacroTaskTO other = (MacroTaskTO) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(realm, other.realm).\n+                append(commands, other.commands).\n+                append(continueOnError, other.continueOnError).\n+                append(saveExecs, other.saveExecs).\n+                build();\n+    }\n+}"},{"sha":"054d6531dddd7e3ea329032ec03c230b2cae756f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -25,7 +25,9 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-@Schema(allOf = { TaskTO.class }, subTypes = { ProvisioningTaskTO.class }, discriminatorProperty = \"_class\")\n+@Schema(allOf = { TaskTO.class },\n+        subTypes = { ProvisioningTaskTO.class, MacroTaskTO.class },\n+        discriminatorProperty = \"_class\")\n public class SchedTaskTO extends TaskTO implements NamedEntityTO {\n \n     private static final long serialVersionUID = -5722284116974636425L;"},{"sha":"555488be6f5a39f03d5587a29b7436032f51f994","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -22,7 +22,6 @@\n \n public enum ClientExceptionType {\n \n-    AssociatedAnys(Response.Status.BAD_REQUEST),\n     AssociatedResources(Response.Status.BAD_REQUEST),\n     Composite(Response.Status.BAD_REQUEST),\n     ConcurrentModification(Response.Status.PRECONDITION_FAILED),\n@@ -70,13 +69,15 @@ public enum ClientExceptionType {\n     InvalidRequest(Response.Status.BAD_REQUEST),\n     InvalidValues(Response.Status.BAD_REQUEST),\n     NotFound(Response.Status.NOT_FOUND),\n+    RealmContains(Response.Status.BAD_REQUEST),\n     RequiredValuesMissing(Response.Status.BAD_REQUEST),\n     RESTValidation(Response.Status.BAD_REQUEST),\n     GroupOwnership(Response.Status.BAD_REQUEST),\n     InUse(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n     DelegatedAdministration(Response.Status.FORBIDDEN),\n     Reconciliation(Response.Status.BAD_REQUEST),\n+    RunError(Response.Status.INTERNAL_SERVER_ERROR),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);\n "},{"sha":"ed84d42e6df521b03b7ac585a0c0a20ae825e111","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoEntitlement.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -240,6 +240,8 @@ public final class IdRepoEntitlement {\n \n     public static final String DELEGATION_DELETE = \"DELEGATION_DELETE\";\n \n+    public static final String COMMAND_RUN = \"COMMAND_RUN\";\n+\n     public static final String LOGGER_LIST = \"LOGGER_LIST\";\n \n     public static final String LOGGER_UPDATE = \"LOGGER_UPDATE\";"},{"sha":"21df4a1b7e07459fafb566f004ae948d6690e7a5","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoImplementationType.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -37,6 +37,8 @@ public final class IdRepoImplementationType {\n \n     public static final String VALIDATOR = \"VALIDATOR\";\n \n+    public static final String COMMAND = \"COMMAND\";\n+\n     public static final String RECIPIENTS_PROVIDER = \"RECIPIENTS_PROVIDER\";\n \n     public static final String AUDIT_APPENDER = \"AUDIT_APPENDER\";\n@@ -49,8 +51,9 @@ public final class IdRepoImplementationType {\n             Pair.of(ACCOUNT_RULE, \"org.apache.syncope.core.persistence.api.dao.AccountRule\"),\n             Pair.of(PASSWORD_RULE, \"org.apache.syncope.core.persistence.api.dao.PasswordRule\"),\n             Pair.of(TASKJOB_DELEGATE, \"org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate\"),\n-            Pair.of(LOGIC_ACTIONS, \"org.apache.syncope.core.provisioning.api.LogicActions\"),\n+            Pair.of(LOGIC_ACTIONS, \"org.apache.syncope.core.logic.api.LogicActions\"),\n             Pair.of(VALIDATOR, \"org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator\"),\n+            Pair.of(COMMAND, \"org.apache.syncope.core.logic.api.Command\"),\n             Pair.of(RECIPIENTS_PROVIDER, \"org.apache.syncope.core.provisioning.api.notification.RecipientsProvider\"),\n             Pair.of(AUDIT_APPENDER, \"org.apache.syncope.core.logic.audit.AuditAppender\"),\n             Pair.of(ITEM_TRANSFORMER, \"org.apache.syncope.core.provisioning.api.data.ItemTransformer\"));"},{"sha":"2fc7efd8b521aa35e0ff7e1648178c21b87fe9e3","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/TaskType.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n@@ -31,7 +32,8 @@ public enum TaskType {\n     NOTIFICATION(NotificationTaskTO.class),\n     SCHEDULED(SchedTaskTO.class),\n     PULL(PullTaskTO.class),\n-    PUSH(PushTaskTO.class);\n+    PUSH(PushTaskTO.class),\n+    MACRO(MacroTaskTO.class);\n \n     private final Class<? extends TaskTO> toClass;\n \n@@ -52,6 +54,8 @@ public static TaskType fromTOClass(final Class<? extends TaskTO> clazz) {\n                 ? TaskType.NOTIFICATION\n                 : PropagationTaskTO.class.isAssignableFrom(clazz)\n                 ? TaskType.PROPAGATION\n+                : MacroTaskTO.class.isAssignableFrom(clazz)\n+                ? TaskType.MACRO\n                 : TaskType.SCHEDULED;\n     }\n }"},{"sha":"a588b3d2a0b499ed05ecf35d458ace1f2818491c","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/CommandQuery.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCommandQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCommandQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCommandQuery.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+public class CommandQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -8792519310029596796L;\n+\n+    public static class Builder extends AbstractQuery.Builder<CommandQuery, Builder> {\n+\n+        @Override\n+        protected CommandQuery newInstance() {\n+            return new CommandQuery();\n+        }\n+\n+        public Builder keyword(final String keyword) {\n+            getInstance().setKeyword(keyword);\n+            return this;\n+        }\n+    }\n+\n+    private String keyword;\n+\n+    @Parameter(name = JAXRSService.PARAM_KEYWORD, description = \"keyword to match\", schema =\n+            @Schema(implementation = String.class))\n+    public String getKeyword() {\n+        return keyword;\n+    }\n+\n+    @QueryParam(JAXRSService.PARAM_KEYWORD)\n+    public void setKeyword(final String keyword) {\n+        this.keyword = keyword;\n+    }\n+}"},{"sha":"6fbef8a7b769b25d7438a4aa6875daa3b69288c4","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CommandService.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCommandService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCommandService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCommandService.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.ws.rs.BeanParam;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.command.CommandOutput;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.CommandQuery;\n+\n+/**\n+ * REST operations for commands.\n+ */\n+@Tag(name = \"Commands\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"commands\")\n+public interface CommandService extends JAXRSService {\n+\n+    /**\n+     * Returns a paged list of all commands.\n+     *\n+     * @param query query conditions\n+     * @return list of all commands.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    PagedResult<CommandTO> search(@BeanParam CommandQuery query);\n+\n+    /**\n+     * Returns the command for the given key, if found.\n+     *\n+     * @param key command key\n+     * @return the command for the given key, if found\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    CommandTO read(@PathParam(\"key\") String key);\n+\n+    /**\n+     * Runs the given command with the given arguments and returns the resulting output.\n+     *\n+     * @param command command to run, with arguments\n+     * @return command output\n+     */\n+    @POST\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    CommandOutput run(CommandTO command);\n+}"},{"sha":"a947ddbe714a88c0cffb2fa9f0e5834dcbcf8f51","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -28,6 +28,8 @@ public interface JAXRSService {\n \n     String PARAM_ORDERBY = \"orderby\";\n \n+    String PARAM_KEYWORD = \"keyword\";\n+\n     String PARAM_RESOURCE = \"resource\";\n \n     String PARAM_NOTIFICATION = \"notification\";"},{"sha":"d0776080a323ddebe0d3e3cbde266e512979907a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,13 +33,13 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.logic.api.LogicActions;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.implementation.ImplementationManager;\n "},{"sha":"cfcae26dd86ef5a18234adb5658a11c466b8f405","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.logic.api.LogicActions;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -51,7 +52,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;"},{"sha":"907a343e1289901d230e8c9e0f520931ceb3c18e","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/CommandLogic.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCommandLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCommandLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCommandLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.core.logic.api.Command;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.spring.implementation.ImplementationManager;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class CommandLogic extends AbstractLogic<EntityTO> {\n+\n+    protected final ImplementationDAO implementationDAO;\n+\n+    protected final Map<String, Command<?>> perContextCommands = new ConcurrentHashMap<>();\n+\n+    public CommandLogic(final ImplementationDAO implementationDAO) {\n+        this.implementationDAO = implementationDAO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    public Pair<Integer, List<CommandTO>> search(final int page, final int size, final String keyword) {\n+        List<Implementation> result = implementationDAO.findByTypeAndKeyword(IdRepoImplementationType.COMMAND, keyword);\n+\n+        int count = result.size();\n+\n+        List<CommandTO> commands = result.stream().\n+                skip((page - 1) * size).\n+                limit(size).\n+                map(command -> {\n+                    try {\n+                        return new CommandTO.Builder(command.getKey()).\n+                                args(ImplementationManager.emptyArgs(command)).build();\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not get arg class for {}\", command, e);\n+                        return null;\n+                    }\n+                }).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n+\n+        return Pair.of(count, commands);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.IMPLEMENTATION_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public CommandTO read(final String key) {\n+        Implementation impl = Optional.ofNullable(implementationDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"Implementation \" + key));\n+\n+        try {\n+            return new CommandTO.Builder(impl.getKey()).\n+                    args(ImplementationManager.emptyArgs(impl)).build();\n+        } catch (Exception e) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementation);\n+            sce.getElements().add(\"Could not build \" + impl.getKey());\n+            throw sce;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.COMMAND_RUN + \"')\")\n+    @SuppressWarnings(\"unchecked\")\n+    public String run(final CommandTO command) {\n+        Implementation impl = Optional.ofNullable(implementationDAO.find(command.getKey())).\n+                orElseThrow(() -> new NotFoundException(\"Implementation \" + command.getKey()));\n+\n+        Command<CommandArgs> runnable;\n+        try {\n+            runnable = (Command<CommandArgs>) ImplementationManager.build(\n+                    impl,\n+                    () -> perContextCommands.get(impl.getKey()),\n+                    instance -> perContextCommands.put(impl.getKey(), instance));\n+        } catch (Exception e) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementation);\n+            sce.getElements().add(\"Could not build \" + impl.getKey());\n+            throw sce;\n+        }\n+\n+        try {\n+            return runnable.run(command.getArgs());\n+        } catch (Exception e) {\n+            LOG.error(\"While running {} on {}\", command.getKey(), command.getArgs(), e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RunError);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+    }\n+\n+    @Override\n+    protected EntityTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"52410edd51c72aba1a7f7ca3b8bd13d786772449","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ProvisionAction;\n+import org.apache.syncope.core.logic.api.LogicActions;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -61,7 +62,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobManager;"},{"sha":"9a4e62889a34bd091375eb2d797e385a327928b7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n@@ -43,6 +44,7 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -51,6 +53,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n@@ -233,6 +236,12 @@ public AuditLogic auditLogic(\n                 auditManager);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public CommandLogic commandLogic(final ImplementationDAO implementationDAO) {\n+        return new CommandLogic(implementationDAO);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public FIQLQueryLogic fiqlQueryLogic(\n@@ -363,10 +372,23 @@ public RealmLogic realmLogic(\n             final RealmDataBinder binder,\n             final RealmDAO realmDAO,\n             final AnySearchDAO anySearchDAO,\n+            final TaskDAO taskDAO,\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO,\n             final PropagationManager propagationManager,\n             final PropagationTaskExecutor taskExecutor) {\n \n-        return new RealmLogic(realmDAO, anySearchDAO, binder, propagationManager, taskExecutor);\n+        return new RealmLogic(\n+                realmDAO,\n+                anySearchDAO,\n+                taskDAO,\n+                casSPClientAppDAO,\n+                oidcRPClientAppDAO,\n+                saml2SPClientAppDAO,\n+                binder,\n+                propagationManager,\n+                taskExecutor);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"09853e398f79db147f005783636aa710e0987cc7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -197,6 +197,10 @@ public void delete(final String type, final String key) {\n                 inUse = !taskDAO.findByDelegate(implementation).isEmpty();\n                 break;\n \n+            case IdRepoImplementationType.COMMAND:\n+                inUse = !taskDAO.findByCommand(implementation).isEmpty();\n+                break;\n+\n             case IdMImplementationType.RECON_FILTER_BUILDER:\n                 inUse = !taskDAO.findByReconFilterBuilder(implementation).isEmpty();\n                 break;"},{"sha":"cce7a068fc6cf74d7113fac159af8134f8209096","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":34,"deletions":7,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -36,9 +36,13 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -60,6 +64,14 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n \n     protected final AnySearchDAO searchDAO;\n \n+    protected final TaskDAO taskDAO;\n+\n+    protected final CASSPClientAppDAO casSPClientAppDAO;\n+\n+    protected final OIDCRPClientAppDAO oidcRPClientAppDAO;\n+\n+    protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n+\n     protected final RealmDataBinder binder;\n \n     protected final PropagationManager propagationManager;\n@@ -69,12 +81,20 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n     public RealmLogic(\n             final RealmDAO realmDAO,\n             final AnySearchDAO searchDAO,\n+            final TaskDAO taskDAO,\n+            final CASSPClientAppDAO casSPClientAppDAO,\n+            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n+            final SAML2SPClientAppDAO saml2SPClientAppDAO,\n             final RealmDataBinder binder,\n             final PropagationManager propagationManager,\n             final PropagationTaskExecutor taskExecutor) {\n \n         this.realmDAO = realmDAO;\n         this.searchDAO = searchDAO;\n+        this.taskDAO = taskDAO;\n+        this.casSPClientAppDAO = casSPClientAppDAO;\n+        this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n+        this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n         this.binder = binder;\n         this.propagationManager = propagationManager;\n         this.taskExecutor = taskExecutor;\n@@ -212,14 +232,21 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n         int users = searchDAO.count(realm, true, adminRealms, allMatchingCond, AnyTypeKind.USER);\n         int groups = searchDAO.count(realm, true, adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n         int anyObjects = searchDAO.count(realm, true, adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n-\n-        if (users + groups + anyObjects > 0) {\n-            SyncopeClientException containedAnys = SyncopeClientException.build(ClientExceptionType.AssociatedAnys);\n-            containedAnys.getElements().add(users + \" user(s)\");\n-            containedAnys.getElements().add(groups + \" group(s)\");\n-            containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n-            throw containedAnys;\n+        int macroTasks = taskDAO.findByRealm(realm).size();\n+        int clientApps = casSPClientAppDAO.findByRealm(realm).size()\n+                + saml2SPClientAppDAO.findByRealm(realm).size()\n+                + oidcRPClientAppDAO.findByRealm(realm).size();\n+\n+        if (users + groups + anyObjects + macroTasks + clientApps > 0) {\n+            SyncopeClientException realmContains = SyncopeClientException.build(ClientExceptionType.RealmContains);\n+            realmContains.getElements().add(users + \" user(s)\");\n+            realmContains.getElements().add(groups + \" group(s)\");\n+            realmContains.getElements().add(anyObjects + \" anyObject(s)\");\n+            realmContains.getElements().add(macroTasks + \" command task(s)\");\n+            realmContains.getElements().add(clientApps + \" client app(s)\");\n+            throw realmContains;\n         }\n+\n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);"},{"sha":"9eb7051e5f332017199e26bfe14b8619ce1a2d57","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":102,"deletions":12,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -25,6 +25,7 @@\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -34,6 +35,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskTO;\n@@ -52,6 +54,9 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Notification;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n@@ -69,6 +74,7 @@\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n@@ -124,6 +130,13 @@ public TaskLogic(\n         this.taskUtilsFactory = taskUtilsFactory;\n     }\n \n+    protected void securityChecks(final String entitlement, final String realm) {\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().get(entitlement);\n+        if (authRealms.stream().noneMatch(r -> realm.startsWith(r))) {\n+            throw new DelegatedAdministrationException(realm, MacroTask.class.getSimpleName(), null);\n+        }\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_CREATE + \"')\")\n     public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T taskTO) {\n         TaskUtils taskUtils = taskUtilsFactory.getInstance(taskTO);\n@@ -132,6 +145,11 @@ public <T extends SchedTaskTO> T createSchedTask(final TaskType type, final T ta\n             sce.getElements().add(\"Found \" + type + \", expected \" + taskUtils.getType());\n             throw sce;\n         }\n+\n+        if (taskUtils.getType() == TaskType.MACRO) {\n+            securityChecks(IdRepoEntitlement.TASK_CREATE, ((MacroTaskTO) taskTO).getRealm());\n+        }\n+\n         SchedTask task = binder.createSchedTask(taskTO, taskUtils);\n         task = taskDAO.save(task);\n \n@@ -166,6 +184,11 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n             throw sce;\n         }\n \n+        if (taskUtils.getType() == TaskType.MACRO) {\n+            securityChecks(IdRepoEntitlement.TASK_UPDATE, ((MacroTask) task).getRealm().getFullPath());\n+            securityChecks(IdRepoEntitlement.TASK_UPDATE, ((MacroTaskTO) taskTO).getRealm());\n+        }\n+\n         binder.updateSchedTask(task, taskTO, taskUtils);\n         task = taskDAO.save(task);\n         try {\n@@ -187,7 +210,6 @@ public <T extends SchedTaskTO> T updateSchedTask(final TaskType type, final Sche\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    @SuppressWarnings(\"unchecked\")\n     public <T extends TaskTO> Pair<Integer, List<T>> search(\n             final TaskType type,\n             final String resource,\n@@ -204,12 +226,32 @@ public <T extends TaskTO> Pair<Integer, List<T>> search(\n                 throw new IllegalArgumentException(\"type is required\");\n             }\n \n+            ExternalResource resourceObj = resourceDAO.find(resource);\n+            if (resource != null && resourceObj == null) {\n+                throw new IllegalArgumentException(\"Missing External Resource: \" + resource);\n+            }\n+\n+            Notification notificationObj = notificationDAO.find(notification);\n+            if (notification != null && notificationObj == null) {\n+                throw new IllegalArgumentException(\"Missing Notification: \" + notification);\n+            }\n+\n             int count = taskDAO.count(\n-                    type, resourceDAO.find(resource), notificationDAO.find(notification), anyTypeKind, entityKey);\n+                    type,\n+                    resourceObj,\n+                    notificationObj,\n+                    anyTypeKind,\n+                    entityKey);\n \n             List<T> result = taskDAO.findAll(\n-                    type, resourceDAO.find(resource), notificationDAO.find(notification), anyTypeKind, entityKey,\n-                    page, size, orderByClauses).stream().\n+                    type,\n+                    resourceObj,\n+                    notificationObj,\n+                    anyTypeKind,\n+                    entityKey,\n+                    page,\n+                    size,\n+                    orderByClauses).stream().\n                     <T>map(task -> binder.getTaskTO(task, taskUtilsFactory.getInstance(type), details)).\n                     collect(Collectors.toList());\n \n@@ -236,6 +278,10 @@ public <T extends TaskTO> T read(final TaskType type, final String key, final bo\n             throw sce;\n         }\n \n+        if (taskUtils.getType() == TaskType.MACRO) {\n+            securityChecks(IdRepoEntitlement.TASK_READ, ((MacroTask) task).getRealm().getFullPath());\n+        }\n+\n         return binder.getTaskTO(task, taskUtilsFactory.getInstance(task), details);\n     }\n \n@@ -249,11 +295,11 @@ public ExecTO execute(final String key, final OffsetDateTime startAt, final bool\n             throw sce;\n         }\n \n-        TaskUtils taskUtil = taskUtilsFactory.getInstance(task);\n+        TaskUtils taskUtils = taskUtilsFactory.getInstance(task);\n         String executor = AuthContextUtils.getUsername();\n \n         ExecTO result = null;\n-        switch (taskUtil.getType()) {\n+        switch (taskUtils.getType()) {\n             case PROPAGATION:\n                 PropagationTask propagationTask = (PropagationTask) task;\n                 PropagationTaskInfo taskInfo = new PropagationTaskInfo(\n@@ -281,6 +327,11 @@ public ExecTO execute(final String key, final OffsetDateTime startAt, final bool\n             case SCHEDULED:\n             case PULL:\n             case PUSH:\n+            case MACRO:\n+                if (taskUtils.getType() == TaskType.MACRO) {\n+                    securityChecks(IdRepoEntitlement.TASK_EXECUTE, ((MacroTask) task).getRealm().getFullPath());\n+                }\n+\n                 if (!((SchedTask) task).isActive()) {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n                     sce.getElements().add(\"Task \" + key + \" is not active\");\n@@ -337,6 +388,10 @@ public <T extends TaskTO> T delete(final TaskType type, final String key) {\n             throw sce;\n         }\n \n+        if (taskUtils.getType() == TaskType.MACRO) {\n+            securityChecks(IdRepoEntitlement.TASK_DELETE, ((MacroTask) task).getRealm().getFullPath());\n+        }\n+\n         T taskToDelete = binder.getTaskTO(task, taskUtils, true);\n \n         if (TaskType.SCHEDULED == taskUtils.getType()\n@@ -357,10 +412,14 @@ public Pair<Integer, List<ExecTO>> listExecutions(\n \n         Task<?> task = taskDAO.find(key).orElseThrow(() -> new NotFoundException(\"Task \" + key));\n \n+        if (task instanceof MacroTask) {\n+            securityChecks(IdRepoEntitlement.TASK_READ, ((MacroTask) task).getRealm().getFullPath());\n+        }\n+\n         Integer count = taskExecDAO.count(task);\n \n         List<ExecTO> result = taskExecDAO.findAll(task, page, size, orderByClauses).stream().\n-                map(taskExec -> binder.getExecTO(taskExec)).collect(Collectors.toList());\n+                map(exec -> binder.getExecTO(exec)).collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }\n@@ -369,18 +428,36 @@ public Pair<Integer, List<ExecTO>> listExecutions(\n     @Override\n     public List<ExecTO> listRecentExecutions(final int max) {\n         return taskExecDAO.findRecent(max).stream().\n-                map(taskExec -> binder.getExecTO(taskExec)).collect(Collectors.toList());\n+                map(exec -> {\n+                    try {\n+                        if (exec.getTask() instanceof MacroTask) {\n+                            securityChecks(IdRepoEntitlement.TASK_DELETE,\n+                                    ((MacroTask) exec.getTask()).getRealm().getFullPath());\n+                        }\n+\n+                        return binder.getExecTO(exec);\n+                    } catch (DelegatedAdministrationException e) {\n+                        LOG.error(\"Skip executions for command task\", e);\n+                        return null;\n+                    }\n+                }).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n     @Override\n     public ExecTO deleteExecution(final String execKey) {\n-        TaskExec<?> taskExec = taskExecDAO.find(execKey).\n+        TaskExec<?> exec = taskExecDAO.find(execKey).\n                 orElseThrow(() -> new NotFoundException(\"Task execution \" + execKey));\n \n-        ExecTO taskExecutionToDelete = binder.getExecTO(taskExec);\n-        taskExecDAO.delete(taskExec);\n-        return taskExecutionToDelete;\n+        if (exec.getTask() instanceof MacroTask) {\n+            securityChecks(IdRepoEntitlement.TASK_DELETE, ((MacroTask) exec.getTask()).getRealm().getFullPath());\n+        }\n+\n+        ExecTO executionToDelete = binder.getExecTO(exec);\n+        taskExecDAO.delete(exec);\n+        return executionToDelete;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n@@ -402,6 +479,11 @@ public List<BatchResponseItem> deleteExecutions(\n             batchResponseItems.add(item);\n \n             try {\n+                if (exec.getTask() instanceof MacroTask) {\n+                    securityChecks(IdRepoEntitlement.TASK_DELETE,\n+                            ((MacroTask) exec.getTask()).getRealm().getFullPath());\n+                }\n+\n                 taskExecDAO.delete(exec);\n                 item.setStatus(Response.Status.OK.getStatusCode());\n             } catch (Exception e) {\n@@ -435,6 +517,10 @@ public List<JobTO> listJobs() {\n     public JobTO getJob(final String key) {\n         Task<?> task = taskDAO.find(key).orElseThrow(() -> new NotFoundException(\"Task \" + key));\n \n+        if (task instanceof MacroTask) {\n+            securityChecks(IdRepoEntitlement.TASK_READ, ((MacroTask) task).getRealm().getFullPath());\n+        }\n+\n         JobTO jobTO = null;\n         try {\n             jobTO = getJobTO(JobNamer.getJobKey(task), false);\n@@ -456,6 +542,10 @@ public JobTO getJob(final String key) {\n     public void actionJob(final String key, final JobAction action) {\n         Task<?> task = taskDAO.find(key).orElseThrow(() -> new NotFoundException(\"Task \" + key));\n \n+        if (task instanceof MacroTask) {\n+            securityChecks(IdRepoEntitlement.TASK_EXECUTE, ((MacroTask) task).getRealm().getFullPath());\n+        }\n+\n         doActionJob(JobNamer.getJobKey(task), action);\n     }\n "},{"sha":"023d5e21fc0305e4257a6e7f11c7213437e58865","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.logic.api.LogicActions;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -59,7 +60,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;"},{"sha":"88047c89f5d613c70a347661519366676c59b7f8","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/api/Command.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fapi%2FCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fapi%2FCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fapi%2FCommand.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.api;\n+\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+\n+@FunctionalInterface\n+public interface Command<A extends CommandArgs> {\n+\n+    String run(A args);\n+}"},{"sha":"7ace5cef63db5fdab6591d62b78cf050d45a6ea9","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/api/LogicActions.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fapi%2FLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fapi%2FLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fapi%2FLogicActions.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api;\n+package org.apache.syncope.core.logic.api;\n \n import java.util.List;\n import org.apache.syncope.common.lib.request.AnyCR;","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java"},{"sha":"b1aa633cf8d27ecb360b6dcc8fcc4c158d776b37","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,6 +33,8 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n+import org.apache.syncope.core.logic.api.Command;\n+import org.apache.syncope.core.logic.api.LogicActions;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n@@ -47,7 +49,6 @@\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.ProvisionSorter;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n@@ -243,6 +244,10 @@ public void load() {\n                 if (ProvisionSorter.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n                     classNames.get(IdMImplementationType.PROVISION_SORTER).add(bd.getBeanClassName());\n                 }\n+\n+                if (Command.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    classNames.get(IdRepoImplementationType.COMMAND).add(bd.getBeanClassName());\n+                }\n             } catch (Throwable t) {\n                 LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n             }"},{"sha":"9dab5397aab6c637654e2b8a8c009466b32590d3","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/job/MacroRunJobDelegate.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fjob%2FMacroRunJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fjob%2FMacroRunJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fjob%2FMacroRunJobDelegate.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.job;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+import org.apache.syncope.core.logic.api.Command;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n+import org.apache.syncope.core.spring.implementation.ImplementationManager;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class MacroRunJobDelegate extends AbstractSchedTaskJobDelegate<MacroTask> {\n+\n+    @Autowired\n+    protected ImplementationDAO implementationDAO;\n+\n+    protected final Map<String, Command<?>> perContextCommands = new ConcurrentHashMap<>();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected String doExecute(final boolean dryRun, final String executor, final JobExecutionContext context)\n+            throws JobExecutionException {\n+\n+        StringBuilder output = new StringBuilder();\n+        for (int i = 0; i < task.getCommands().size(); i++) {\n+            Implementation command = task.getCommands().get(i);\n+\n+            Command<CommandArgs> runnable;\n+            try {\n+                runnable = (Command<CommandArgs>) ImplementationManager.build(\n+                        command,\n+                        () -> perContextCommands.get(command.getKey()),\n+                        instance -> perContextCommands.put(command.getKey(), instance));\n+            } catch (Exception e) {\n+                throw new JobExecutionException(\"Could not build \" + command.getKey(), e);\n+            }\n+\n+            String args = POJOHelper.serialize(task.getCommandArgs().get(i));\n+\n+            output.append(\"Command[\").append(i).append(\"]: \").\n+                    append(command.getKey()).append(\" \").append(args).append(\"\\n\");\n+            if (dryRun) {\n+                output.append(command).append(' ').append(args);\n+            } else {\n+                try {\n+                    output.append(runnable.run(task.getCommandArgs().get(i)));\n+                } catch (Exception e) {\n+                    if (task.isContinueOnError()) {\n+                        output.append(\"Continuing on error: <\").append(e.getMessage()).append('>');\n+                        LOG.error(\"While running {} with args {}, continuing on error\",\n+                                command.getKey(), args, e);\n+                    } else {\n+                        throw new RuntimeException(\"While running \" + command.getKey(), e);\n+                    }\n+                }\n+            }\n+            output.append(\"\\n\\n\");\n+        }\n+\n+        output.append(\"COMPLETED\");\n+        return output.toString();\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec<?> execution) {\n+        return task.isSaveExecs();\n+    }\n+}"},{"sha":"aebfacf73789a9d1c848f9c7ef5e5b34af72574f","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n import org.apache.syncope.common.rest.api.service.ApplicationService;\n import org.apache.syncope.common.rest.api.service.AuditService;\n+import org.apache.syncope.common.rest.api.service.CommandService;\n import org.apache.syncope.common.rest.api.service.DelegationService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.FIQLQueryService;\n@@ -77,6 +78,7 @@\n import org.apache.syncope.core.logic.AnyTypeLogic;\n import org.apache.syncope.core.logic.ApplicationLogic;\n import org.apache.syncope.core.logic.AuditLogic;\n+import org.apache.syncope.core.logic.CommandLogic;\n import org.apache.syncope.core.logic.DelegationLogic;\n import org.apache.syncope.core.logic.DynRealmLogic;\n import org.apache.syncope.core.logic.FIQLQueryLogic;\n@@ -108,6 +110,7 @@\n import org.apache.syncope.core.rest.cxf.service.AnyTypeServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.ApplicationServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.AuditServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.CommandServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.DelegationServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.DynRealmServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.FIQLQueryServiceImpl;\n@@ -375,6 +378,12 @@ public AuditService auditService(final AuditLogic auditLogic) {\n         return new AuditServiceImpl(auditLogic);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public CommandService commandService(final CommandLogic commandLogic) {\n+        return new CommandServiceImpl(commandLogic);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public FIQLQueryService fiqlQueryService(final FIQLQueryLogic fiqlQueryLogic) {"},{"sha":"62c997671f77b4e28ed21983aab551f7ae7bd505","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/CommandServiceImpl.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCommandServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCommandServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FCommandServiceImpl.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.command.CommandOutput;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.rest.api.beans.CommandQuery;\n+import org.apache.syncope.common.rest.api.service.CommandService;\n+import org.apache.syncope.core.logic.CommandLogic;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CommandServiceImpl extends AbstractService implements CommandService {\n+\n+    protected final CommandLogic logic;\n+\n+    public CommandServiceImpl(final CommandLogic logic) {\n+        this.logic = logic;\n+    }\n+\n+    @Override\n+    public PagedResult<CommandTO> search(final CommandQuery query) {\n+        String keyword = query.getKeyword() == null ? null : query.getKeyword().replace('*', '%');\n+        Pair<Integer, List<CommandTO>> result = logic.search(query.getPage(), query.getSize(), keyword);\n+        return buildPagedResult(result.getRight(), query.getPage(), query.getSize(), result.getLeft());\n+    }\n+\n+    @Override\n+    public CommandTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public CommandOutput run(final CommandTO command) {\n+        return new CommandOutput.Builder(command).output(logic.run(command)).build();\n+    }\n+}"},{"sha":"919dffafa134cb48953e725dcb76b79b5755ea7f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FImplementationDAO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -27,6 +27,8 @@ public interface ImplementationDAO extends DAO<Implementation> {\n \n     List<Implementation> findByType(String type);\n \n+    List<Implementation> findByTypeAndKeyword(String type, String keyword);\n+\n     List<Implementation> findAll();\n \n     Implementation save(Implementation implementation);"},{"sha":"58dd858e96cffd22719a3fd4009def7e73fd9e01","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -29,6 +29,8 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n@@ -50,6 +52,10 @@ public interface TaskDAO extends DAO<Task<?>> {\n \n     List<PushTask> findByPushActions(Implementation pushActions);\n \n+    List<MacroTask> findByCommand(Implementation delegate);\n+\n+    List<MacroTask> findByRealm(Realm realm);\n+\n     <T extends Task<T>> List<T> findToExec(TaskType type);\n \n     <T extends Task<T>> List<T> findAll(TaskType type);"},{"sha":"a74c4900b4001283b330a144c6950ae66a3c8829","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/EntityFactory.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntityFactory.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,19 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n public interface EntityFactory {\n \n     <E extends Entity> E newEntity(Class<E> reference);\n \n-    <E extends TaskExec<?>> E newTaskExec(TaskType taskType);\n-\n     ConnPoolConf newConnPoolConf();\n \n     Class<? extends User> userClass();"},{"sha":"29c68e044e3117f5da3c7b7326c943de6e1dd7e5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/MacroTask.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FMacroTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FMacroTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FMacroTask.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.task;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+\n+public interface MacroTask extends SchedTask {\n+\n+    Realm getRealm();\n+\n+    void setRealm(Realm realm);\n+\n+    void add(Implementation command, CommandArgs args);\n+\n+    List<? extends Implementation> getCommands();\n+\n+    List<CommandArgs> getCommandArgs();\n+\n+    boolean isContinueOnError();\n+\n+    void setContinueOnError(boolean continueOnError);\n+\n+    boolean isSaveExecs();\n+\n+    void setSaveExecs(boolean saveExecs);\n+}"},{"sha":"c5c83365594ae7f757663cedae6195e1f1756fa7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtils.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -27,9 +27,19 @@ public interface TaskUtils {\n \n     <T extends Task<T>> T newTask();\n \n+    <E extends TaskExec<?>> E newTaskExec();\n+\n     <T extends TaskTO> T newTaskTO();\n \n     <T extends Task<T>> Class<T> taskClass();\n \n     <T extends TaskTO> Class<T> taskTOClass();\n+\n+    String getTaskTable();\n+\n+    Class<? extends Task<?>> getTaskEntity();\n+\n+    String getTaskExecTable();\n+\n+    Class<? extends TaskExec<?>> getTaskExecEntity();\n }"},{"sha":"0d4fdeeacd8e89354fc71ce407f9e2e2a53f5b68","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAJSONAnyObjectListener.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObjectListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObjectListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObjectListener.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,10 +32,13 @@\n \n public class JPAJSONAnyObjectListener extends JPAJSONEntityListener<AnyObject> {\n \n+    protected static final TypeReference<List<JPAJSONAPlainAttr>> TYPEREF =\n+            new TypeReference<List<JPAJSONAPlainAttr>>() {\n+    };\n+\n     @Override\n     protected List<? extends JSONPlainAttr<AnyObject>> getAttrs(final String plainAttrsJSON) {\n-        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONAPlainAttr>>() {\n-        });\n+        return POJOHelper.deserialize(plainAttrsJSON, TYPEREF);\n     }\n \n     @PostLoad"},{"sha":"ff071bb4f3384049e34eeda7bc53884bd4549150","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAJSONGroupListener.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroupListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroupListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroupListener.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,10 +32,13 @@\n \n public class JPAJSONGroupListener extends JPAJSONEntityListener<Group> {\n \n+    protected static final TypeReference<List<JPAJSONGPlainAttr>> TYPEREF =\n+            new TypeReference<List<JPAJSONGPlainAttr>>() {\n+    };\n+\n     @Override\n     protected List<? extends JSONPlainAttr<Group>> getAttrs(final String plainAttrsJSON) {\n-        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONGPlainAttr>>() {\n-        });\n+        return POJOHelper.deserialize(plainAttrsJSON, TYPEREF);\n     }\n \n     @PostLoad"},{"sha":"8b54e0ffb4de1b6aa2bbd81650983761b949baf5","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLinkedAccountListener.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,10 +32,13 @@\n \n public class JPAJSONLinkedAccountListener extends JPAJSONEntityListener<User> {\n \n+    protected static final TypeReference<List<JPAJSONLAPlainAttr>> TYPEREF =\n+            new TypeReference<List<JPAJSONLAPlainAttr>>() {\n+    };\n+\n     @Override\n     protected List<? extends JSONLAPlainAttr> getAttrs(final String plainAttrsJSON) {\n-        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONLAPlainAttr>>() {\n-        });\n+        return POJOHelper.deserialize(plainAttrsJSON, TYPEREF);\n     }\n \n     @PostLoad"},{"sha":"0ea44a238e28d0d7f701c4ed14d09e7660207c07","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONUserListener.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUserListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUserListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUserListener.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,10 +32,13 @@\n \n public class JPAJSONUserListener extends JPAJSONEntityListener<User> {\n \n+    protected static final TypeReference<List<JPAJSONUPlainAttr>> TYPEREF =\n+            new TypeReference<List<JPAJSONUPlainAttr>>() {\n+    };\n+\n     @Override\n     protected List<? extends JSONPlainAttr<User>> getAttrs(final String plainAttrsJSON) {\n-        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONUPlainAttr>>() {\n-        });\n+        return POJOHelper.deserialize(plainAttrsJSON, TYPEREF);\n     }\n \n     @PostLoad"},{"sha":"fc6c0f4c16da0629528ecdaa3859123bed7d6a29","filename":"core/persistence-jpa-json/src/main/resources/domains/jpa-json/MasterContent.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2Fjpa-json%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2Fjpa-json%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2Fjpa-json%2FMasterContent.xml?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -39,6 +39,9 @@ under the License.\n   <Implementation id=\"BinaryValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.BinaryValidator\"/>\n \n+  <Implementation id=\"MacroRunJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.logic.job.MacroRunJobDelegate\"/>\n+\n   <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n   <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\""},{"sha":"bed2f381a23d394c979797b9b3dc16673e5bb14a","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -680,10 +680,14 @@ under the License.\n   <VirSchema id=\"virtualdata\" READONLY=\"0\" anyTypeClass_id=\"minimal user\"\n              resource_id=\"resource-db-virattr\" anyType_id=\"USER\" extAttrName=\"USERNAME\"/>\n \n+  <Implementation id=\"MacroRunJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.logic.job.MacroRunJobDelegate\"/>\n+\n   <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n   <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n+\n   <PropagationTask id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n                    objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n                    propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>"},{"sha":"97822c456eb184ac38a642dc22d6b667a5df9515","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -299,8 +299,8 @@ public PolicyUtilsFactory policyUtilsFactory() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public TaskUtilsFactory taskUtilsFactory(final @Lazy EntityFactory entityFactory) {\n-        return new JPATaskUtilsFactory(entityFactory);\n+    public TaskUtilsFactory taskUtilsFactory() {\n+        return new JPATaskUtilsFactory();\n     }\n \n     @ConditionalOnMissingBean\n@@ -581,13 +581,8 @@ public PolicyDAO policyDAO(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RealmDAO realmDAO(\n-            final @Lazy RoleDAO roleDAO,\n-            final @Lazy CASSPClientAppDAO casSPClientAppDAO,\n-            final @Lazy OIDCRPClientAppDAO oidcRPClientAppDAO,\n-            final @Lazy SAML2SPClientAppDAO saml2SPClientAppDAO) {\n-\n-        return new JPARealmDAO(roleDAO, casSPClientAppDAO, oidcRPClientAppDAO, saml2SPClientAppDAO);\n+    public RealmDAO realmDAO(final @Lazy RoleDAO roleDAO) {\n+        return new JPARealmDAO(roleDAO);\n     }\n \n     @ConditionalOnMissingBean\n@@ -678,14 +673,19 @@ public SRARouteDAO sraRouteDAO() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public TaskDAO taskDAO(final RemediationDAO remediationDAO) {\n-        return new JPATaskDAO(remediationDAO);\n+    public TaskDAO taskDAO(\n+            final RealmDAO realmDAO,\n+            final RemediationDAO remediationDAO,\n+            final TaskUtilsFactory taskUtilsFactory,\n+            final SecurityProperties securityProperties) {\n+\n+        return new JPATaskDAO(realmDAO, remediationDAO, taskUtilsFactory, securityProperties);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public TaskExecDAO taskExecDAO(final TaskDAO taskDAO) {\n-        return new JPATaskExecDAO(taskDAO);\n+    public TaskExecDAO taskExecDAO(final TaskDAO taskDAO, final TaskUtilsFactory taskUtilsFactory) {\n+        return new JPATaskExecDAO(taskDAO, taskUtilsFactory);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"ada4b93904d9085a10b5af0fa4170fa3198be540","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPullCorrelationRule.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPullCorrelationRule.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -60,9 +60,8 @@ public SearchCond getSearchCond(final SyncDelta syncDelta, final Provision provi\n         List<SearchCond> searchConds = new ArrayList<>();\n \n         conf.getSchemas().forEach(schema -> {\n-            Item item = mappingItems.get(schema);\n-            Attribute attr = Optional.ofNullable(item).\n-                    map(item1 -> syncDelta.getObject().getAttributeByName(item1.getExtAttrName())).orElse(null);\n+            Attribute attr = Optional.ofNullable(mappingItems.get(schema)).\n+                    map(item -> syncDelta.getObject().getAttributeByName(item.getExtAttrName())).orElse(null);\n             if (attr == null) {\n                 throw new IllegalArgumentException(\n                         \"Connector object does not contains the attributes to perform the search: \" + schema);"},{"sha":"b063cf39fabb83e09667e0f925ae33b8dbfcfb82","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAImplementationDAO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n@@ -37,12 +38,29 @@ public Implementation find(final String key) {\n     @Override\n     public List<Implementation> findByType(final String type) {\n         TypedQuery<Implementation> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAImplementation.class.getSimpleName() + \" e WHERE e.type=:type\",\n+                \"SELECT e FROM \" + JPAImplementation.class.getSimpleName() + \" e WHERE e.type=:type ORDER BY e.id ASC\",\n                 Implementation.class);\n         query.setParameter(\"type\", type);\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<Implementation> findByTypeAndKeyword(final String type, final String keyword) {\n+        if (StringUtils.isBlank(keyword)) {\n+            return findByType(type);\n+        }\n+\n+        TypedQuery<Implementation> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAImplementation.class.getSimpleName() + \" e \"\n+                + \"WHERE e.type=:type \"\n+                + \"AND e.id LIKE :keyword \"\n+                + \"ORDER BY e.id ASC\",\n+                Implementation.class);\n+        query.setParameter(\"type\", type);\n+        query.setParameter(\"keyword\", keyword);\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<Implementation> findAll() {\n         TypedQuery<Implementation> query = entityManager().createQuery("},{"sha":"000824a7004edb755b2574beb645dac01fb31e04","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":22,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -25,12 +25,9 @@\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n-import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -49,22 +46,8 @@ public class JPARealmDAO extends AbstractDAO<Realm> implements RealmDAO {\n \n     protected final RoleDAO roleDAO;\n \n-    protected final CASSPClientAppDAO casSPClientAppDAO;\n-\n-    protected final OIDCRPClientAppDAO oidcRPClientAppDAO;\n-\n-    protected final SAML2SPClientAppDAO saml2SPClientAppDAO;\n-\n-    public JPARealmDAO(\n-            final RoleDAO roleDAO,\n-            final CASSPClientAppDAO casSPClientAppDAO,\n-            final OIDCRPClientAppDAO oidcRPClientAppDAO,\n-            final SAML2SPClientAppDAO saml2SPClientAppDAO) {\n-\n+    public JPARealmDAO(final RoleDAO roleDAO) {\n         this.roleDAO = roleDAO;\n-        this.casSPClientAppDAO = casSPClientAppDAO;\n-        this.oidcRPClientAppDAO = oidcRPClientAppDAO;\n-        this.saml2SPClientAppDAO = saml2SPClientAppDAO;\n     }\n \n     @Override\n@@ -258,10 +241,6 @@ public void delete(final Realm realm) {\n         findDescendants(realm).forEach(toBeDeleted -> {\n             roleDAO.findByRealm(toBeDeleted).forEach(role -> role.getRealms().remove(toBeDeleted));\n \n-            casSPClientAppDAO.findByRealm(toBeDeleted).forEach(clientApp -> clientApp.setRealm(null));\n-            oidcRPClientAppDAO.findByRealm(toBeDeleted).forEach(clientApp -> clientApp.setRealm(null));\n-            saml2SPClientAppDAO.findByRealm(toBeDeleted).forEach(clientApp -> clientApp.setRealm(null));\n-\n             toBeDeleted.setParent(null);\n \n             entityManager().remove(toBeDeleted);"},{"sha":"844d825bf739dd960ac3f8e74e08223cb01c6763","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":106,"deletions":131,"changes":237,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -22,6 +22,7 @@\n import java.time.OffsetDateTime;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import javax.persistence.ManyToOne;\n@@ -33,125 +34,64 @@\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAMacroTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.ReflectionUtils;\n \n public class JPATaskDAO extends AbstractDAO<Task<?>> implements TaskDAO {\n \n-    public static TaskType getTaskType(final Task<?> task) {\n-        if (task instanceof NotificationTask) {\n-            return TaskType.NOTIFICATION;\n-        }\n-\n-        if (task instanceof PropagationTask) {\n-            return TaskType.PROPAGATION;\n-        }\n-\n-        if (task instanceof PushTask) {\n-            return TaskType.PUSH;\n-        }\n-\n-        if (task instanceof PullTask) {\n-            return TaskType.PULL;\n-        }\n-\n-        if (task instanceof SchedTask) {\n-            return TaskType.SCHEDULED;\n-        }\n-\n-        return null;\n-    }\n-\n-    public static String getEntityTableName(final TaskType type) {\n-        String result = null;\n-\n-        switch (type) {\n-            case NOTIFICATION:\n-                result = JPANotificationTask.TABLE;\n-                break;\n-\n-            case PROPAGATION:\n-                result = JPAPropagationTask.TABLE;\n-                break;\n+    protected final RealmDAO realmDAO;\n \n-            case PUSH:\n-                result = JPAPushTask.TABLE;\n-                break;\n-\n-            case SCHEDULED:\n-                result = JPASchedTask.TABLE;\n-                break;\n-\n-            case PULL:\n-                result = JPAPullTask.TABLE;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    public static Class<? extends Task<?>> getEntityReference(final TaskType type) {\n-        Class<? extends Task<?>> result = null;\n-\n-        switch (type) {\n-            case NOTIFICATION:\n-                result = JPANotificationTask.class;\n-                break;\n-\n-            case PROPAGATION:\n-                result = JPAPropagationTask.class;\n-                break;\n-\n-            case PUSH:\n-                result = JPAPushTask.class;\n-                break;\n+    protected final RemediationDAO remediationDAO;\n \n-            case SCHEDULED:\n-                result = JPASchedTask.class;\n-                break;\n+    protected final TaskUtilsFactory taskUtilsFactory;\n \n-            case PULL:\n-                result = JPAPullTask.class;\n-                break;\n+    protected final SecurityProperties securityProperties;\n \n-            default:\n-        }\n+    public JPATaskDAO(\n+            final RealmDAO realmDAO,\n+            final RemediationDAO remediationDAO,\n+            final TaskUtilsFactory taskUtilsFactory,\n+            final SecurityProperties securityProperties) {\n \n-        return result;\n-    }\n-\n-    protected final RemediationDAO remediationDAO;\n-\n-    public JPATaskDAO(final RemediationDAO remediationDAO) {\n+        this.realmDAO = realmDAO;\n         this.remediationDAO = remediationDAO;\n+        this.taskUtilsFactory = taskUtilsFactory;\n+        this.securityProperties = securityProperties;\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n     public boolean exists(final TaskType type, final String key) {\n-        Query query = entityManager().createNativeQuery(\"SELECT id FROM \" + getEntityTableName(type) + \" WHERE id=?\");\n+        Query query = entityManager().createNativeQuery(\"SELECT id FROM \"\n+                + taskUtilsFactory.getInstance(type).getTaskTable()\n+                + \" WHERE id=?\");\n         query.setParameter(1, key);\n \n         return !query.getResultList().isEmpty();\n@@ -161,7 +101,7 @@ public boolean exists(final TaskType type, final String key) {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Task<T>> T find(final TaskType type, final String key) {\n-        return (T) entityManager().find(getEntityReference(type), key);\n+        return (T) entityManager().find(taskUtilsFactory.getInstance(type).getTaskEntity(), key);\n     }\n \n     @Override\n@@ -173,6 +113,9 @@ public Optional<Task<?>> find(final String key) {\n         if (task == null) {\n             task = find(TaskType.PUSH, key);\n         }\n+        if (task == null) {\n+            task = find(TaskType.MACRO, key);\n+        }\n         if (task == null) {\n             task = find(TaskType.PROPAGATION, key);\n         }\n@@ -223,9 +166,28 @@ public List<PushTask> findByPushActions(final Implementation pushActions) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<MacroTask> findByRealm(final Realm realm) {\n+        TypedQuery<MacroTask> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAMacroTask.class.getSimpleName() + \" e \"\n+                + \"WHERE e.realm=:realm\", MacroTask.class);\n+        query.setParameter(\"realm\", realm);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<MacroTask> findByCommand(final Implementation command) {\n+        TypedQuery<MacroTask> query = entityManager().createQuery(\"SELECT e FROM \" + JPAMacroTask.class.getSimpleName()\n+                + \" e WHERE :command MEMBER OF e.commands\", MacroTask.class);\n+        query.setParameter(\"command\", command);\n+\n+        return query.getResultList();\n+    }\n+\n     protected final <T extends Task<T>> StringBuilder buildFindAllQueryJPA(final TaskType type) {\n         StringBuilder builder = new StringBuilder(\"SELECT t FROM \").\n-                append(getEntityReference(type).getSimpleName()).\n+                append(taskUtilsFactory.getInstance(type).getTaskEntity().getSimpleName()).\n                 append(\" t WHERE \");\n         if (type == TaskType.SCHEDULED) {\n             builder.append(\"t.id NOT IN (SELECT t.id FROM \").\n@@ -262,14 +224,19 @@ public <T extends Task<T>> List<T> findAll(final TaskType type) {\n         return findAll(type, null, null, null, null, -1, -1, List.of());\n     }\n \n+    protected int setParameter(final List<Object> parameters, final Object parameter) {\n+        parameters.add(parameter);\n+        return parameters.size();\n+    }\n+\n     protected StringBuilder buildFindAllQuery(\n             final TaskType type,\n             final ExternalResource resource,\n             final Notification notification,\n             final AnyTypeKind anyTypeKind,\n             final String entityKey,\n             final boolean orderByTaskExecInfo,\n-            final List<Object> queryParameters) {\n+            final List<Object> parameters) {\n \n         if (resource != null\n                 && type != TaskType.PROPAGATION && type != TaskType.PUSH && type != TaskType.PULL) {\n@@ -287,55 +254,60 @@ protected StringBuilder buildFindAllQuery(\n             throw new IllegalArgumentException(type + \" is not related to notifications\");\n         }\n \n-        String table = getEntityTableName(type);\n-        StringBuilder queryString = new StringBuilder(\"SELECT \").append(table).append(\".*\");\n+        String taskTable = taskUtilsFactory.getInstance(type).getTaskTable();\n+        StringBuilder queryString = new StringBuilder(\"SELECT \").append(taskTable).append(\".*\");\n \n         if (orderByTaskExecInfo) {\n-            queryString.append(',').append(JPATaskExecDAO.getEntityTableName(type)).append(\".startDate AS startDate\").\n-                    append(',').append(JPATaskExecDAO.getEntityTableName(type)).append(\".endDate AS endDate\").\n-                    append(',').append(JPATaskExecDAO.getEntityTableName(type)).append(\".status AS status\").\n-                    append(\" FROM \").append(table).\n-                    append(',').append(JPATaskExecDAO.getEntityTableName(type)).append(',').append(\"(SELECT \").\n-                    append(JPATaskExecDAO.getEntityTableName(type)).append(\".task_id, \").\n-                    append(\"MAX(\").append(JPATaskExecDAO.getEntityTableName(type)).append(\".startDate) AS startDate\").\n-                    append(\" FROM \").append(JPATaskExecDAO.getEntityTableName(type)).\n-                    append(\" GROUP BY \").append(JPATaskExecDAO.getEntityTableName(type)).append(\".task_id) GRP\").\n+            String taskExecTable = taskUtilsFactory.getInstance(type).getTaskExecTable();\n+            queryString.append(',').append(taskExecTable).append(\".startDate AS startDate\").\n+                    append(',').append(taskExecTable).append(\".endDate AS endDate\").\n+                    append(',').append(taskExecTable).append(\".status AS status\").\n+                    append(\" FROM \").append(taskTable).\n+                    append(',').append(taskExecTable).append(',').append(\"(SELECT \").\n+                    append(taskExecTable).append(\".task_id, \").\n+                    append(\"MAX(\").append(taskExecTable).append(\".startDate) AS startDate\").\n+                    append(\" FROM \").append(taskExecTable).\n+                    append(\" GROUP BY \").append(taskExecTable).append(\".task_id) GRP\").\n                     append(\" WHERE \").\n-                    append(table).append(\".id=\").append(JPATaskExecDAO.getEntityTableName(type)).append(\".task_id\").\n-                    append(\" AND \").append(table).append(\".id=\").append(\"GRP.task_id\").\n+                    append(taskTable).append(\".id=\").append(taskExecTable).append(\".task_id\").\n+                    append(\" AND \").append(taskTable).append(\".id=\").append(\"GRP.task_id\").\n                     append(\" AND \").\n-                    append(JPATaskExecDAO.getEntityTableName(type)).append(\".startDate=\").append(\"GRP.startDate\");\n+                    append(taskExecTable).append(\".startDate=\").append(\"GRP.startDate\");\n         } else {\n-            queryString.append(\", null AS startDate, null AS endDate, null AS status FROM \").append(table).\n-                    append(\" WHERE 1=1 \");\n+            queryString.append(\", null AS startDate, null AS endDate, null AS status FROM \").append(taskTable).\n+                    append(\" WHERE 1=1\");\n         }\n \n         queryString.append(' ');\n \n         if (resource != null) {\n-            queryParameters.add(resource.getKey());\n-\n             queryString.append(\" AND \").\n-                    append(table).\n-                    append(\".resource_id=?\").append(queryParameters.size());\n+                    append(taskTable).append(\".resource_id=?\").append(setParameter(parameters, resource.getKey()));\n         }\n         if (notification != null) {\n-            queryParameters.add(notification.getKey());\n-\n             queryString.append(\" AND \").\n-                    append(table).\n-                    append(\".notification_id=?\").append(queryParameters.size());\n+                    append(taskTable).\n+                    append(\".notification_id=?\").append(setParameter(parameters, notification.getKey()));\n         }\n         if (anyTypeKind != null && entityKey != null) {\n-            queryParameters.add(anyTypeKind.name());\n-            queryParameters.add(entityKey);\n-\n             queryString.append(\" AND \").\n-                    append(table).\n-                    append(\".anyTypeKind=?\").append(queryParameters.size() - 1).\n+                    append(taskTable).append(\".anyTypeKind=?\").append(setParameter(parameters, anyTypeKind.name())).\n                     append(\" AND \").\n-                    append(table).\n-                    append(\".entityKey=?\").append(queryParameters.size());\n+                    append(taskTable).append(\".entityKey=?\").append(setParameter(parameters, entityKey));\n+        }\n+        if (type == TaskType.MACRO\n+                && !AuthContextUtils.getUsername().equals(securityProperties.getAdminUser())) {\n+\n+            String realmKeysArg = AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.TASK_LIST).stream().\n+                    map(realmDAO::findByFullPath).\n+                    filter(Objects::nonNull).\n+                    flatMap(r -> realmDAO.findDescendants(r).stream()).\n+                    map(Realm::getKey).\n+                    distinct().\n+                    map(realmKey -> \"?\" + setParameter(parameters, realmKey)).\n+                    collect(Collectors.joining(\",\"));\n+            queryString.append(\" AND \").\n+                    append(taskTable).append(\".realm_id IN (\").append(realmKeysArg).append(\")\");\n         }\n \n         return queryString;\n@@ -400,7 +372,7 @@ public <T extends Task<T>> List<T> findAll(\n             final int itemsPerPage,\n             final List<OrderByClause> orderByClauses) {\n \n-        List<Object> queryParameters = new ArrayList<>();\n+        List<Object> parameters = new ArrayList<>();\n \n         boolean orderByTaskExecInfo = orderByClauses.stream().\n                 anyMatch(clause -> clause.getField().equals(\"start\")\n@@ -415,7 +387,7 @@ public <T extends Task<T>> List<T> findAll(\n                 anyTypeKind,\n                 entityKey,\n                 orderByTaskExecInfo,\n-                queryParameters);\n+                parameters);\n \n         if (orderByTaskExecInfo) {\n             // UNION with tasks without executions...\n@@ -427,20 +399,22 @@ public <T extends Task<T>> List<T> findAll(\n                             anyTypeKind,\n                             entityKey,\n                             false,\n-                            queryParameters)).\n+                            parameters)).\n                     append(\" AND id NOT IN \").\n-                    append(\"(SELECT task_id AS id FROM \").append(JPATaskExecDAO.getEntityTableName(type)).append(')').\n+                    append(\"(SELECT task_id AS id FROM \").\n+                    append(taskUtilsFactory.getInstance(type).getTaskExecTable()).\n+                    append(')').\n                     append(\")) T\");\n         } else {\n             queryString.insert(0, \"SELECT T.id FROM (\").append(\") T\");\n         }\n \n-        queryString.append(toOrderByStatement(getEntityReference(type), orderByClauses));\n+        queryString.append(toOrderByStatement(taskUtilsFactory.getInstance(type).getTaskEntity(), orderByClauses));\n \n         Query query = entityManager().createNativeQuery(queryString.toString());\n \n-        for (int i = 1; i <= queryParameters.size(); i++) {\n-            query.setParameter(i, queryParameters.get(i - 1));\n+        for (int i = 1; i <= parameters.size(); i++) {\n+            query.setParameter(i, parameters.get(i - 1));\n         }\n \n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n@@ -476,18 +450,19 @@ public int count(\n             final AnyTypeKind anyTypeKind,\n             final String entityKey) {\n \n-        List<Object> queryParameters = new ArrayList<>();\n+        List<Object> parameters = new ArrayList<>();\n \n         StringBuilder queryString =\n-                buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey, false, queryParameters);\n+                buildFindAllQuery(type, resource, notification, anyTypeKind, entityKey, false, parameters);\n \n+        String table = taskUtilsFactory.getInstance(type).getTaskTable();\n         Query query = entityManager().createNativeQuery(StringUtils.replaceOnce(\n                 queryString.toString(),\n-                \"SELECT \" + getEntityTableName(type) + \".*, null AS startDate, null AS endDate, null AS status\",\n-                \"SELECT COUNT(\" + getEntityTableName(type) + \".id)\"));\n+                \"SELECT \" + table + \".*, null AS startDate, null AS endDate, null AS status\",\n+                \"SELECT COUNT(\" + table + \".id)\"));\n \n-        for (int i = 1; i <= queryParameters.size(); i++) {\n-            query.setParameter(i, queryParameters.get(i - 1));\n+        for (int i = 1; i <= parameters.size(); i++) {\n+            query.setParameter(i, parameters.get(i - 1));\n         }\n \n         return ((Number) query.getSingleResult()).intValue();"},{"sha":"e6f08ab7867113689f4268e55f1a367926747eab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":14,"deletions":72,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -31,87 +31,26 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.task.AbstractTaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTaskExec;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n public class JPATaskExecDAO extends AbstractDAO<TaskExec<?>> implements TaskExecDAO {\n \n-    public static String getEntityTableName(final TaskType type) {\n-        String result = null;\n-\n-        switch (type) {\n-            case NOTIFICATION:\n-                result = JPANotificationTaskExec.TABLE;\n-                break;\n-\n-            case PROPAGATION:\n-                result = JPAPropagationTaskExec.TABLE;\n-                break;\n-\n-            case PUSH:\n-                result = JPAPushTaskExec.TABLE;\n-                break;\n-\n-            case SCHEDULED:\n-                result = JPASchedTaskExec.TABLE;\n-                break;\n-\n-            case PULL:\n-                result = JPAPullTaskExec.TABLE;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    protected static Class<? extends TaskExec<?>> getEntityReference(final TaskType type) {\n-        Class<? extends TaskExec<?>> result = null;\n-\n-        switch (type) {\n-            case NOTIFICATION:\n-                result = JPANotificationTaskExec.class;\n-                break;\n-\n-            case PROPAGATION:\n-                result = JPAPropagationTaskExec.class;\n-                break;\n-\n-            case PUSH:\n-                result = JPAPushTaskExec.class;\n-                break;\n-\n-            case SCHEDULED:\n-                result = JPASchedTaskExec.class;\n-                break;\n-\n-            case PULL:\n-                result = JPAPullTaskExec.class;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     protected final TaskDAO taskDAO;\n \n-    public JPATaskExecDAO(final TaskDAO taskDAO) {\n+    protected final TaskUtilsFactory taskUtilsFactory;\n+\n+    public JPATaskExecDAO(final TaskDAO taskDAO, final TaskUtilsFactory taskUtilsFactory) {\n         this.taskDAO = taskDAO;\n+        this.taskUtilsFactory = taskUtilsFactory;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends Task<T>> TaskExec<T> find(final TaskType type, final String key) {\n-        return (TaskExec<T>) entityManager().find(getEntityReference(type), key);\n+        return (TaskExec<T>) entityManager().find(taskUtilsFactory.getInstance(type).getTaskExecEntity(), key);\n     }\n \n     @Override\n@@ -123,6 +62,9 @@ public Optional<TaskExec<?>> find(final String key) {\n         if (task == null) {\n             task = find(TaskType.PUSH, key);\n         }\n+        if (task == null) {\n+            task = find(TaskType.MACRO, key);\n+        }\n         if (task == null) {\n             task = find(TaskType.PROPAGATION, key);\n         }\n@@ -136,7 +78,7 @@ public Optional<TaskExec<?>> find(final String key) {\n     @SuppressWarnings(\"unchecked\")\n     protected <T extends Task<T>> List<TaskExec<T>> findRecent(final TaskType type, final int max) {\n         Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getEntityReference(type).getSimpleName() + \" e \"\n+                \"SELECT e FROM \" + taskUtilsFactory.getInstance(type).getTaskExecEntity().getSimpleName() + \" e \"\n                 + \"WHERE e.end IS NOT NULL ORDER BY e.end DESC\");\n         query.setMaxResults(max);\n \n@@ -161,7 +103,7 @@ public List<TaskExec<?>> findRecent(final int max) {\n     @SuppressWarnings(\"unchecked\")\n     protected TaskExec<?> findLatest(final TaskType type, final Task<?> task, final String field) {\n         Query query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getEntityReference(type).getSimpleName() + \" e \"\n+                \"SELECT e FROM \" + taskUtilsFactory.getInstance(type).getTaskExecEntity().getSimpleName() + \" e \"\n                 + \"WHERE e.task=:task ORDER BY e.\" + field + \" DESC\");\n         query.setParameter(\"task\", task);\n         query.setMaxResults(1);\n@@ -192,7 +134,7 @@ public List<TaskExec<?>> findAll(\n             final OffsetDateTime endedAfter) {\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(getEntityReference(JPATaskDAO.getTaskType(task)).getSimpleName()).\n+                append(taskUtilsFactory.getInstance(task).getTaskExecEntity().getSimpleName()).\n                 append(\" e WHERE e.task=:task \");\n \n         if (startedBefore != null) {\n@@ -230,7 +172,7 @@ public List<TaskExec<?>> findAll(\n     @Override\n     public int count(final Task<?> task) {\n         Query countQuery = entityManager().createNativeQuery(\n-                \"SELECT COUNT(e.id) FROM \" + getEntityTableName(JPATaskDAO.getTaskType(task)) + \" e \"\n+                \"SELECT COUNT(e.id) FROM \" + taskUtilsFactory.getInstance(task).getTaskExecTable() + \" e \"\n                 + \"WHERE e.task_id=?1\");\n         countQuery.setParameter(1, task.getKey());\n \n@@ -261,7 +203,7 @@ public List<TaskExec<?>> findAll(\n             final Task<?> task, final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n \n         String queryString = \"SELECT e \"\n-                + \"FROM \" + getEntityReference(JPATaskDAO.getTaskType(task)).getSimpleName() + \" e \"\n+                + \"FROM \" + taskUtilsFactory.getInstance(task).getTaskExecEntity().getSimpleName() + \" e \"\n                 + \"WHERE e.task=:task \"\n                 + toOrderByStatement(orderByClauses);\n "},{"sha":"253e6b272e3fd1e5bf323c9f04704ae19d81517b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -58,6 +58,10 @@ public class JPAConnInstance extends AbstractGeneratedKeyEntity implements ConnI\n \n     public static final String TABLE = \"ConnInstance\";\n \n+    protected static final TypeReference<Set<ConnectorCapability>> TYPEREF =\n+            new TypeReference<Set<ConnectorCapability>>() {\n+    };\n+\n     private static final int DEFAULT_TIMEOUT = 10;\n \n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n@@ -246,9 +250,7 @@ protected void json2list(final boolean clearFirst) {\n             getCapabilities().clear();\n         }\n         if (capabilities != null) {\n-            getCapabilities().addAll(\n-                    POJOHelper.deserialize(capabilities, new TypeReference<Set<ConnectorCapability>>() {\n-                    }));\n+            getCapabilities().addAll(POJOHelper.deserialize(capabilities, TYPEREF));\n         }\n     }\n "},{"sha":"0b9ee7c7df93df5f4492c0308fc401b1c3ddc46a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":44,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n@@ -86,13 +85,13 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushPolicy;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTaskAnyFilter;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n-import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n@@ -140,17 +139,13 @@\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplatePullTask;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAMacroTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPullTaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTaskAnyFilter;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrUniqueValue;\n@@ -281,6 +276,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAPushTask();\n         } else if (reference.equals(PullTask.class)) {\n             result = (E) new JPAPullTask();\n+        } else if (reference.equals(MacroTask.class)) {\n+            result = (E) new JPAMacroTask();\n         } else if (reference.equals(SchedTask.class)) {\n             result = (E) new JPASchedTask();\n         } else if (reference.equals(PushTaskAnyFilter.class)) {\n@@ -348,43 +345,6 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n         return result;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <E extends TaskExec<?>> E newTaskExec(final TaskType taskType) {\n-        E result;\n-\n-        switch (taskType) {\n-            case NOTIFICATION:\n-                result = (E) new JPANotificationTaskExec();\n-                break;\n-\n-            case PROPAGATION:\n-                result = (E) new JPAPropagationTaskExec();\n-                break;\n-\n-            case PULL:\n-                result = (E) new JPAPullTaskExec();\n-                break;\n-\n-            case PUSH:\n-                result = (E) new JPAPushTaskExec();\n-                break;\n-\n-            case SCHEDULED:\n-                result = (E) new JPASchedTaskExec();\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        if (result instanceof AbstractGeneratedKeyEntity) {\n-            ((AbstractGeneratedKeyEntity) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public ConnPoolConf newConnPoolConf() {\n         return new JPAConnPoolConf();"},{"sha":"5a5b1602a173ad37014ba09aaf42a50d5a90192f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAExternalResource.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAExternalResource.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -81,6 +81,14 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n \n     public static final String TABLE = \"ExternalResource\";\n \n+    protected static final TypeReference<Set<ConnectorCapability>> CAPABILITY_TYPEREF =\n+            new TypeReference<Set<ConnectorCapability>>() {\n+    };\n+\n+    protected static final TypeReference<List<Provision>> PROVISION_TYPEREF =\n+            new TypeReference<List<Provision>>() {\n+    };\n+\n     /**\n      * Should this resource enforce the mandatory constraints?\n      */\n@@ -397,14 +405,10 @@ protected void json2list(final boolean clearFirst) {\n             getProvisions().clear();\n         }\n         if (capabilitiesOverride != null) {\n-            getCapabilitiesOverride().addAll(\n-                    POJOHelper.deserialize(capabilitiesOverride, new TypeReference<Set<ConnectorCapability>>() {\n-                    }));\n+            getCapabilitiesOverride().addAll(POJOHelper.deserialize(capabilitiesOverride, CAPABILITY_TYPEREF));\n         }\n         if (provisions != null) {\n-            getProvisions().addAll(\n-                    POJOHelper.deserialize(provisions, new TypeReference<List<Provision>>() {\n-                    }));\n+            getProvisions().addAll(POJOHelper.deserialize(provisions, PROVISION_TYPEREF));\n         }\n     }\n "},{"sha":"a3e7a82ce45da224899924452c3f628ae464e7f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -56,6 +56,9 @@ public class JPANotification extends AbstractGeneratedKeyEntity implements Notif\n \n     public static final String TABLE = \"Notification\";\n \n+    protected static final TypeReference<List<String>> TYPEREF = new TypeReference<List<String>>() {\n+    };\n+\n     @Lob\n     private String events;\n \n@@ -225,14 +228,10 @@ protected void json2list(final boolean clearFirst) {\n             getStaticRecipients().clear();\n         }\n         if (events != null) {\n-            getEvents().addAll(\n-                    POJOHelper.deserialize(events, new TypeReference<List<String>>() {\n-                    }));\n+            getEvents().addAll(POJOHelper.deserialize(events, TYPEREF));\n         }\n         if (staticRecipients != null) {\n-            getStaticRecipients().addAll(\n-                    POJOHelper.deserialize(staticRecipients, new TypeReference<List<String>>() {\n-                    }));\n+            getStaticRecipients().addAll(POJOHelper.deserialize(staticRecipients, TYPEREF));\n         }\n     }\n "},{"sha":"6834b15cb4586860cb2c0af4a47e0e022f6820f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -62,6 +62,9 @@ public class JPARole extends AbstractProvidedKeyEntity implements Role {\n \n     public static final String TABLE = \"SyncopeRole\";\n \n+    protected static final TypeReference<Set<String>> TYPEREF = new TypeReference<Set<String>>() {\n+    };\n+\n     @Lob\n     private String entitlements;\n \n@@ -177,8 +180,7 @@ protected void json2list(final boolean clearFirst) {\n         }\n         if (entitlements != null) {\n             getEntitlements().addAll(\n-                    POJOHelper.deserialize(entitlements, new TypeReference<Set<String>>() {\n-                    }));\n+                    POJOHelper.deserialize(entitlements, TYPEREF));\n         }\n     }\n "},{"sha":"2241f7bc29fed1c3c02043aa71df4f95006c9a65","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/AbstractClientApp.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FAbstractClientApp.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -44,6 +44,9 @@ public class AbstractClientApp extends AbstractGeneratedKeyEntity implements Cli\n \n     private static final long serialVersionUID = 7422422526695279794L;\n \n+    protected static final TypeReference<List<Attr>> ATTR_TYPEREF = new TypeReference<List<Attr>>() {\n+    };\n+\n     @Column(unique = true, nullable = false)\n     private String name;\n \n@@ -159,8 +162,7 @@ public void setTheme(final String theme) {\n     public List<Attr> getProperties() {\n         return properties == null\n                 ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(properties, new TypeReference<>() {\n-                });\n+                : POJOHelper.deserialize(properties, ATTR_TYPEREF);\n     }\n \n     @Override"},{"sha":"b9b8adb137ce67b60eeb8e18d6513f2ee97ad75a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAttrRepo.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAttrRepo.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -46,9 +46,12 @@\n @Table(name = JPAAttrRepo.TABLE)\n public class JPAAttrRepo extends AbstractProvidedKeyEntity implements AttrRepo {\n \n+    private static final long serialVersionUID = 7337970107878689617L;\n+\n     public static final String TABLE = \"AttrRepo\";\n \n-    private static final long serialVersionUID = 7337970107878689617L;\n+    protected static final TypeReference<List<Item>> TYPEREF = new TypeReference<List<Item>>() {\n+    };\n \n     private String description;\n \n@@ -123,9 +126,7 @@ protected void json2list(final boolean clearFirst) {\n             getItems().clear();\n         }\n         if (items != null) {\n-            getItems().addAll(\n-                    POJOHelper.deserialize(items, new TypeReference<List<Item>>() {\n-                    }));\n+            getItems().addAll(POJOHelper.deserialize(items, TYPEREF));\n         }\n     }\n "},{"sha":"3bbaf9d8b081ff21075d3d0614228ce2162b6f66","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthModule.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthModule.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -46,9 +46,12 @@\n @Table(name = JPAAuthModule.TABLE)\n public class JPAAuthModule extends AbstractProvidedKeyEntity implements AuthModule {\n \n+    private static final long serialVersionUID = 5681033638234853077L;\n+\n     public static final String TABLE = \"AuthModule\";\n \n-    private static final long serialVersionUID = 5681033638234853077L;\n+    protected static final TypeReference<List<Item>> TYPEREF = new TypeReference<List<Item>>() {\n+    };\n \n     private String description;\n \n@@ -123,9 +126,7 @@ protected void json2list(final boolean clearFirst) {\n             getItems().clear();\n         }\n         if (items != null) {\n-            getItems().addAll(\n-                    POJOHelper.deserialize(items, new TypeReference<List<Item>>() {\n-                    }));\n+            getItems().addAll(POJOHelper.deserialize(items, TYPEREF));\n         }\n     }\n "},{"sha":"e8349e11ace306af92aa55a26818476f379146d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAAuthProfile.java","status":"modified","additions":25,"deletions":11,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAAuthProfile.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -41,9 +41,28 @@\n         @UniqueConstraint(columnNames = { \"owner\" }))\n public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthProfile {\n \n+    private static final long serialVersionUID = 57352617217394093L;\n+\n     public static final String TABLE = \"AuthProfile\";\n \n-    private static final long serialVersionUID = 57352617217394093L;\n+    protected static final TypeReference<List<GoogleMfaAuthToken>> GOOGLE_MFA_TOKENS_TYPEREF =\n+            new TypeReference<List<GoogleMfaAuthToken>>() {\n+    };\n+\n+    protected static final TypeReference<List<GoogleMfaAuthAccount>> GOOGLE_MFA_ACCOUNTS_TYPEREF =\n+            new TypeReference<List<GoogleMfaAuthAccount>>() {\n+    };\n+\n+    protected static final TypeReference<List<U2FDevice>> U2F_TYPEREF = new TypeReference<List<U2FDevice>>() {\n+    };\n+\n+    protected static final TypeReference<List<ImpersonationAccount>> IMPERSONATION_TYPEREF =\n+            new TypeReference<List<ImpersonationAccount>>() {\n+    };\n+\n+    protected static final TypeReference<List<WebAuthnDeviceCredential>> WEBAUTHN_TYPEREF =\n+            new TypeReference<List<WebAuthnDeviceCredential>>() {\n+    };\n \n     @Column(nullable = false)\n     private String owner;\n@@ -76,8 +95,7 @@ public void setOwner(final String owner) {\n     @Override\n     public List<GoogleMfaAuthToken> getGoogleMfaAuthTokens() {\n         return Optional.ofNullable(googleMfaAuthTokens).\n-                map(v -> POJOHelper.deserialize(v, new TypeReference<List<GoogleMfaAuthToken>>() {\n-        })).orElseGet(() -> new ArrayList<>(0));\n+                map(v -> POJOHelper.deserialize(v, GOOGLE_MFA_TOKENS_TYPEREF)).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n@@ -88,8 +106,7 @@ public void setGoogleMfaAuthTokens(final List<GoogleMfaAuthToken> tokens) {\n     @Override\n     public List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts() {\n         return Optional.ofNullable(googleMfaAuthAccounts).\n-                map(v -> POJOHelper.deserialize(v, new TypeReference<List<GoogleMfaAuthAccount>>() {\n-        })).orElseGet(() -> new ArrayList<>(0));\n+                map(v -> POJOHelper.deserialize(v, GOOGLE_MFA_ACCOUNTS_TYPEREF)).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n@@ -100,8 +117,7 @@ public void setGoogleMfaAuthAccounts(final List<GoogleMfaAuthAccount> accounts)\n     @Override\n     public List<U2FDevice> getU2FRegisteredDevices() {\n         return Optional.ofNullable(u2fRegisteredDevices).\n-                map(v -> POJOHelper.deserialize(v, new TypeReference<List<U2FDevice>>() {\n-        })).orElseGet(() -> new ArrayList<>(0));\n+                map(v -> POJOHelper.deserialize(v, U2F_TYPEREF)).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n@@ -112,8 +128,7 @@ public void setU2FRegisteredDevices(final List<U2FDevice> records) {\n     @Override\n     public List<ImpersonationAccount> getImpersonationAccounts() {\n         return Optional.ofNullable(impersonationAccounts).\n-                map(v -> POJOHelper.deserialize(v, new TypeReference<List<ImpersonationAccount>>() {\n-        })).orElseGet(() -> new ArrayList<>(0));\n+                map(v -> POJOHelper.deserialize(v, IMPERSONATION_TYPEREF)).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override\n@@ -124,8 +139,7 @@ public void setImpersonationAccounts(final List<ImpersonationAccount> accounts)\n     @Override\n     public List<WebAuthnDeviceCredential> getWebAuthnDeviceCredentials() {\n         return Optional.ofNullable(webAuthnDeviceCredentials).\n-                map(v -> POJOHelper.deserialize(v, new TypeReference<List<WebAuthnDeviceCredential>>() {\n-        })).orElseGet(() -> new ArrayList<>(0));\n+                map(v -> POJOHelper.deserialize(v, WEBAUTHN_TYPEREF)).orElseGet(() -> new ArrayList<>(0));\n     }\n \n     @Override"},{"sha":"fbd172e5124ce69abc72a7892f59977c5f1360f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAOIDCRPClientApp.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCRPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCRPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAOIDCRPClientApp.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -47,6 +47,17 @@ public class JPAOIDCRPClientApp extends AbstractClientApp implements OIDCRPClien\n \n     public static final String TABLE = \"OIDCRPClientApp\";\n \n+    protected static final TypeReference<Set<String>> STRING_TYPEREF = new TypeReference<Set<String>>() {\n+    };\n+\n+    protected static final TypeReference<Set<OIDCGrantType>> GRANT_TYPE_TYPEREF =\n+            new TypeReference<Set<OIDCGrantType>>() {\n+    };\n+\n+    protected static final TypeReference<Set<OIDCResponseType>> RESPONSE_TYPE_TYPEREF =\n+            new TypeReference<Set<OIDCResponseType>>() {\n+    };\n+\n     @Column(unique = true, nullable = false)\n     private String clientId;\n \n@@ -173,19 +184,13 @@ protected void json2list(final boolean clearFirst) {\n             getSupportedResponseTypes().clear();\n         }\n         if (redirectUris != null) {\n-            getRedirectUris().addAll(\n-                    POJOHelper.deserialize(redirectUris, new TypeReference<Set<String>>() {\n-                    }));\n+            getRedirectUris().addAll(POJOHelper.deserialize(redirectUris, STRING_TYPEREF));\n         }\n         if (supportedGrantTypes != null) {\n-            getSupportedGrantTypes().addAll(\n-                    POJOHelper.deserialize(supportedGrantTypes, new TypeReference<Set<OIDCGrantType>>() {\n-                    }));\n+            getSupportedGrantTypes().addAll(POJOHelper.deserialize(supportedGrantTypes, GRANT_TYPE_TYPEREF));\n         }\n         if (supportedResponseTypes != null) {\n-            getSupportedResponseTypes().addAll(\n-                    POJOHelper.deserialize(supportedResponseTypes, new TypeReference<Set<OIDCResponseType>>() {\n-                    }));\n+            getSupportedResponseTypes().addAll(POJOHelper.deserialize(supportedResponseTypes, RESPONSE_TYPE_TYPEREF));\n         }\n     }\n "},{"sha":"7b9c05e9f24f4456004852bf5ba4c2382b9e822b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPASAML2SPClientApp.java","status":"modified","additions":15,"deletions":22,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPASAML2SPClientApp.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -42,9 +42,16 @@\n @Table(name = JPASAML2SPClientApp.TABLE)\n public class JPASAML2SPClientApp extends AbstractClientApp implements SAML2SPClientApp {\n \n+    private static final long serialVersionUID = 6422422526695279794L;\n+\n     public static final String TABLE = \"SAML2SPClientApp\";\n \n-    private static final long serialVersionUID = 6422422526695279794L;\n+    protected static final TypeReference<Set<String>> STRING_TYPEREF = new TypeReference<Set<String>>() {\n+    };\n+\n+    protected static final TypeReference<List<XmlSecAlgorithm>> XMLSECAGO_TYPEREF =\n+            new TypeReference<List<XmlSecAlgorithm>>() {\n+    };\n \n     @Column(unique = true, nullable = false)\n     private String entityId;\n@@ -289,45 +296,31 @@ protected void json2list(final boolean clearFirst) {\n         }\n         if (assertionAudiences != null) {\n             getAssertionAudiences().addAll(\n-                    POJOHelper.deserialize(assertionAudiences,\n-                            new TypeReference<Set<String>>() {\n-                    }));\n+                    POJOHelper.deserialize(assertionAudiences, STRING_TYPEREF));\n         }\n         if (signingSignatureAlgorithms != null) {\n             getSigningSignatureAlgorithms().addAll(\n-                    POJOHelper.deserialize(signingSignatureAlgorithms,\n-                            new TypeReference<List<XmlSecAlgorithm>>() {\n-                    }));\n+                    POJOHelper.deserialize(signingSignatureAlgorithms, XMLSECAGO_TYPEREF));\n         }\n         if (signingSignatureReferenceDigestMethods != null) {\n             getSigningSignatureReferenceDigestMethods().addAll(\n-                    POJOHelper.deserialize(signingSignatureReferenceDigestMethods,\n-                            new TypeReference<List<XmlSecAlgorithm>>() {\n-                    }));\n+                    POJOHelper.deserialize(signingSignatureReferenceDigestMethods, XMLSECAGO_TYPEREF));\n         }\n         if (encryptionDataAlgorithms != null) {\n             getEncryptionDataAlgorithms().addAll(\n-                    POJOHelper.deserialize(encryptionDataAlgorithms,\n-                            new TypeReference<List<XmlSecAlgorithm>>() {\n-                    }));\n+                    POJOHelper.deserialize(encryptionDataAlgorithms, XMLSECAGO_TYPEREF));\n         }\n         if (encryptionKeyAlgorithms != null) {\n             getEncryptionKeyAlgorithms().addAll(\n-                    POJOHelper.deserialize(encryptionKeyAlgorithms,\n-                            new TypeReference<List<XmlSecAlgorithm>>() {\n-                    }));\n+                    POJOHelper.deserialize(encryptionKeyAlgorithms, XMLSECAGO_TYPEREF));\n         }\n         if (signingSignatureBlackListedAlgorithms != null) {\n             getSigningSignatureBlackListedAlgorithms().addAll(\n-                    POJOHelper.deserialize(signingSignatureBlackListedAlgorithms,\n-                            new TypeReference<List<XmlSecAlgorithm>>() {\n-                    }));\n+                    POJOHelper.deserialize(signingSignatureBlackListedAlgorithms, XMLSECAGO_TYPEREF));\n         }\n         if (encryptionBlackListedAlgorithms != null) {\n             getEncryptionBlackListedAlgorithms().addAll(\n-                    POJOHelper.deserialize(encryptionBlackListedAlgorithms,\n-                            new TypeReference<List<XmlSecAlgorithm>>() {\n-                    }));\n+                    POJOHelper.deserialize(encryptionBlackListedAlgorithms, XMLSECAGO_TYPEREF));\n         }\n     }\n "},{"sha":"eea214c74dfd8718fd69aff69a0e6ce98dd0c79e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/am/JPAWAConfigEntry.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAWAConfigEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAWAConfigEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fam%2FJPAWAConfigEntry.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -31,9 +31,12 @@\n @Table(name = JPAWAConfigEntry.TABLE)\n public class JPAWAConfigEntry extends AbstractProvidedKeyEntity implements WAConfigEntry {\n \n+    private static final long serialVersionUID = 6422422526695279794L;\n+\n     public static final String TABLE = \"WAConfigEntry\";\n \n-    private static final long serialVersionUID = 6422422526695279794L;\n+    protected static TypeReference<List<String>> TYPEREF = new TypeReference<List<String>>() {\n+    };\n \n     @Lob\n     private String waConfigValues;\n@@ -42,8 +45,7 @@ public class JPAWAConfigEntry extends AbstractProvidedKeyEntity implements WACon\n     public List<String> getValues() {\n         return waConfigValues == null\n                 ? List.of()\n-                : POJOHelper.deserialize(waConfigValues, new TypeReference<>() {\n-        });\n+                : POJOHelper.deserialize(waConfigValues, TYPEREF);\n     }\n \n     @Override"},{"sha":"20fdcc5269512603b373fdc788a5e076e14e9e0d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAMacroTask.java","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAMacroTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAMacroTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAMacroTask.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,178 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.task;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.Lob;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import javax.persistence.UniqueConstraint;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAImplementation;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+@Entity\n+@Table(name = JPAMacroTask.TABLE)\n+public class JPAMacroTask extends JPASchedTask implements MacroTask {\n+\n+    private static final long serialVersionUID = 8261850094316787406L;\n+\n+    public static final String TABLE = \"MacroTask\";\n+\n+    protected static final TypeReference<List<CommandArgs>> TYPEREF = new TypeReference<List<CommandArgs>>() {\n+    };\n+\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    private JPARealm realm;\n+\n+    @NotNull\n+    private Boolean continueOnError = false;\n+\n+    @NotNull\n+    private Boolean saveExecs = true;\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = TABLE + \"Commands\",\n+            joinColumns =\n+            @JoinColumn(name = \"task_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"task_id\", \"implementation_id\" }))\n+    private List<JPAImplementation> commands = new ArrayList<>();\n+\n+    @Lob\n+    private String commandArgs;\n+\n+    @Transient\n+    private final List<CommandArgs> commandArgsList = new ArrayList<>();\n+\n+    @OneToMany(targetEntity = JPAMacroTaskExec.class,\n+            cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n+    private List<TaskExec<SchedTask>> executions = new ArrayList<>();\n+\n+    @Override\n+    public Realm getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        this.realm = (JPARealm) realm;\n+    }\n+\n+    @Override\n+    public void add(final Implementation command, final CommandArgs args) {\n+        checkType(command, JPAImplementation.class);\n+        checkImplementationType(command, IdRepoImplementationType.COMMAND);\n+        commands.add((JPAImplementation) command);\n+\n+        getCommandArgs().add(args);\n+    }\n+\n+    @Override\n+    public List<JPAImplementation> getCommands() {\n+        return commands;\n+    }\n+\n+    @Override\n+    public List<CommandArgs> getCommandArgs() {\n+        return commandArgsList;\n+    }\n+\n+    @Override\n+    public boolean isContinueOnError() {\n+        return continueOnError == null ? false : continueOnError;\n+    }\n+\n+    @Override\n+    public void setContinueOnError(final boolean continueOnError) {\n+        this.continueOnError = continueOnError;\n+    }\n+\n+    @Override\n+    public boolean isSaveExecs() {\n+        return saveExecs == null ? true : saveExecs;\n+    }\n+\n+    @Override\n+    public void setSaveExecs(final boolean saveExecs) {\n+        this.saveExecs = saveExecs;\n+    }\n+\n+    @Override\n+    protected Class<? extends TaskExec<SchedTask>> executionClass() {\n+        return JPAMacroTaskExec.class;\n+    }\n+\n+    @Override\n+    protected List<TaskExec<SchedTask>> executions() {\n+        return executions;\n+    }\n+\n+    protected void json2list(final boolean clearFirst) {\n+        if (clearFirst) {\n+            getCommandArgs().clear();\n+        }\n+        if (commandArgs != null) {\n+            getCommandArgs().addAll(POJOHelper.deserialize(commandArgs, TYPEREF));\n+        }\n+    }\n+\n+    @PostLoad\n+    public void postLoad() {\n+        json2list(false);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void postSave() {\n+        json2list(true);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void list2json() {\n+        commandArgs = POJOHelper.serialize(getCommandArgs(), TYPEREF);\n+    }\n+}"},{"sha":"a0e877a08a0f087aabf641f2699e3f0783281960","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAMacroTaskExec.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAMacroTaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAMacroTaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAMacroTaskExec.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.task;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+\n+@Entity\n+@Table(name = JPAMacroTaskExec.TABLE)\n+public class JPAMacroTaskExec extends AbstractTaskExec<SchedTask> implements TaskExec<SchedTask> {\n+\n+    private static final long serialVersionUID = 1909033231464074554L;\n+\n+    public static final String TABLE = \"MacroTaskExec\";\n+\n+    @ManyToOne(optional = false)\n+    private JPAMacroTask task;\n+\n+    @Override\n+    public MacroTask getTask() {\n+        return task;\n+    }\n+\n+    @Override\n+    public void setTask(final SchedTask task) {\n+        checkType(task, MacroTask.class);\n+        this.task = (JPAMacroTask) task;\n+    }\n+}"},{"sha":"995b98bb517c2808a834b8de281ddfa738cfb3f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPANotificationTask.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPANotificationTask.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -54,6 +54,9 @@ public class JPANotificationTask extends AbstractTask<NotificationTask> implemen\n \n     public static final String TABLE = \"NotificationTask\";\n \n+    protected static final TypeReference<List<String>> TYPEREF = new TypeReference<List<String>>() {\n+    };\n+\n     @NotNull\n     @ManyToOne\n     private JPANotification notification;\n@@ -205,9 +208,7 @@ protected void json2list(final boolean clearFirst) {\n             getRecipients().clear();\n         }\n         if (recipients != null) {\n-            getRecipients().addAll(\n-                    POJOHelper.deserialize(recipients, new TypeReference<List<String>>() {\n-                    }));\n+            getRecipients().addAll(POJOHelper.deserialize(recipients, TYPEREF));\n         }\n     }\n "},{"sha":"cd680aedae3279cbb3a709826773d0d8a7167984","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -65,16 +65,6 @@ public class JPASchedTask extends AbstractTask<SchedTask> implements SchedTask {\n             cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"task\")\n     private List<TaskExec<SchedTask>> executions = new ArrayList<>();\n \n-    @Override\n-    protected Class<? extends TaskExec<SchedTask>> executionClass() {\n-        return JPASchedTaskExec.class;\n-    }\n-\n-    @Override\n-    protected List<TaskExec<SchedTask>> executions() {\n-        return executions;\n-    }\n-\n     @Override\n     public Implementation getJobDelegate() {\n         return jobDelegate;\n@@ -136,4 +126,14 @@ public boolean isActive() {\n     public void setActive(final boolean active) {\n         this.active = active;\n     }\n+\n+    @Override\n+    protected Class<? extends TaskExec<SchedTask>> executionClass() {\n+        return JPASchedTaskExec.class;\n+    }\n+\n+    @Override\n+    protected List<TaskExec<SchedTask>> executions() {\n+        return executions;\n+    }\n }"},{"sha":"42276473fa5db1d72ef52e2fe5689095448352bb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java","status":"modified","additions":206,"deletions":10,"changes":216,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,31 +18,31 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n @SuppressWarnings(\"unchecked\")\n public final class JPATaskUtils implements TaskUtils {\n \n-    protected final EntityFactory entityFactory;\n-\n     protected final TaskType type;\n \n-    protected JPATaskUtils(final EntityFactory entityFactory, final TaskType type) {\n-        this.entityFactory = entityFactory;\n+    protected JPATaskUtils(final TaskType type) {\n         this.type = type;\n     }\n \n@@ -72,6 +72,10 @@ public <T extends Task<T>> Class<T> taskClass() {\n                 result = (Class<T>) PushTask.class;\n                 break;\n \n+            case MACRO:\n+                result = (Class<T>) MacroTask.class;\n+                break;\n+\n             case NOTIFICATION:\n                 result = (Class<T>) NotificationTask.class;\n                 break;\n@@ -88,26 +92,74 @@ public <T extends Task<T>> T newTask() {\n \n         switch (type) {\n             case PROPAGATION:\n-                result = (T) entityFactory.newEntity(PropagationTask.class);\n+                result = (T) new JPAPropagationTask();\n                 break;\n \n             case SCHEDULED:\n-                result = (T) entityFactory.newEntity(SchedTask.class);\n+                result = (T) new JPASchedTask();\n                 break;\n \n             case PULL:\n-                result = (T) entityFactory.newEntity(PullTask.class);\n+                result = (T) new JPAPullTask();\n                 break;\n \n             case PUSH:\n-                result = (T) entityFactory.newEntity(PushTask.class);\n+                result = (T) new JPAPushTask();\n+                break;\n+\n+            case MACRO:\n+                result = (T) new JPAMacroTask();\n                 break;\n \n             case NOTIFICATION:\n-                result = (T) entityFactory.newEntity(NotificationTask.class);\n+                result = (T) new JPANotificationTask();\n+                break;\n+\n+            default:\n+        }\n+\n+        if (result != null) {\n+            ((AbstractTask<?>) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public <E extends TaskExec<?>> E newTaskExec() {\n+        E result;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = (E) new JPANotificationTaskExec();\n+                break;\n+\n+            case PROPAGATION:\n+                result = (E) new JPAPropagationTaskExec();\n+                break;\n+\n+            case PULL:\n+                result = (E) new JPAPullTaskExec();\n+                break;\n+\n+            case PUSH:\n+                result = (E) new JPAPushTaskExec();\n+                break;\n+\n+            case MACRO:\n+                result = (E) new JPAMacroTaskExec();\n+                break;\n+\n+            case SCHEDULED:\n+                result = (E) new JPASchedTaskExec();\n                 break;\n \n             default:\n+                result = null;\n+        }\n+\n+        if (result != null) {\n+            ((AbstractTaskExec<?>) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n         }\n \n         return result;\n@@ -134,6 +186,10 @@ public <T extends TaskTO> Class<T> taskTOClass() {\n                 result = (Class<T>) PushTaskTO.class;\n                 break;\n \n+            case MACRO:\n+                result = (Class<T>) MacroTaskTO.class;\n+                break;\n+\n             case NOTIFICATION:\n                 result = (Class<T>) NotificationTaskTO.class;\n                 break;\n@@ -153,4 +209,144 @@ public <T extends TaskTO> T newTaskTO() {\n             return null;\n         }\n     }\n+\n+    @Override\n+    public String getTaskTable() {\n+        String result = null;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = JPANotificationTask.TABLE;\n+                break;\n+\n+            case PROPAGATION:\n+                result = JPAPropagationTask.TABLE;\n+                break;\n+\n+            case PUSH:\n+                result = JPAPushTask.TABLE;\n+                break;\n+\n+            case PULL:\n+                result = JPAPullTask.TABLE;\n+                break;\n+\n+            case MACRO:\n+                result = JPAMacroTask.TABLE;\n+                break;\n+\n+            case SCHEDULED:\n+                result = JPASchedTask.TABLE;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Class<? extends Task<?>> getTaskEntity() {\n+        Class<? extends Task<?>> result = null;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = JPANotificationTask.class;\n+                break;\n+\n+            case PROPAGATION:\n+                result = JPAPropagationTask.class;\n+                break;\n+\n+            case PUSH:\n+                result = JPAPushTask.class;\n+                break;\n+\n+            case PULL:\n+                result = JPAPullTask.class;\n+                break;\n+\n+            case MACRO:\n+                result = JPAMacroTask.class;\n+                break;\n+\n+            case SCHEDULED:\n+                result = JPASchedTask.class;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public String getTaskExecTable() {\n+        String result = null;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = JPANotificationTaskExec.TABLE;\n+                break;\n+\n+            case PROPAGATION:\n+                result = JPAPropagationTaskExec.TABLE;\n+                break;\n+\n+            case SCHEDULED:\n+                result = JPASchedTaskExec.TABLE;\n+                break;\n+\n+            case PUSH:\n+                result = JPAPushTaskExec.TABLE;\n+                break;\n+\n+            case PULL:\n+                result = JPAPullTaskExec.TABLE;\n+                break;\n+\n+            case MACRO:\n+                result = JPAMacroTaskExec.TABLE;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Class<? extends TaskExec<?>> getTaskExecEntity() {\n+        Class<? extends TaskExec<?>> result = null;\n+\n+        switch (type) {\n+            case NOTIFICATION:\n+                result = JPANotificationTaskExec.class;\n+                break;\n+\n+            case PROPAGATION:\n+                result = JPAPropagationTaskExec.class;\n+                break;\n+\n+            case SCHEDULED:\n+                result = JPASchedTaskExec.class;\n+                break;\n+\n+            case PUSH:\n+                result = JPAPushTaskExec.class;\n+                break;\n+\n+            case PULL:\n+                result = JPAPullTaskExec.class;\n+                break;\n+\n+            case MACRO:\n+                result = JPAMacroTaskExec.class;\n+                break;\n+\n+            default:\n+        }\n+\n+        return result;\n+    }\n }"},{"sha":"35cce33c29a0b84cb26d8d9762db17c8593820a4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -20,14 +20,15 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -40,21 +41,15 @@\n \n public class JPATaskUtilsFactory implements TaskUtilsFactory {\n \n-    protected final EntityFactory entityFactory;\n-\n     protected final Map<TaskType, TaskUtils> instances = new HashMap<>(5);\n \n-    public JPATaskUtilsFactory(final EntityFactory entityFactory) {\n-        this.entityFactory = entityFactory;\n-    }\n-\n     @Override\n     public TaskUtils getInstance(final TaskType type) {\n         TaskUtils instance;\n         synchronized (instances) {\n             instance = instances.get(type);\n             if (instance == null) {\n-                instance = new JPATaskUtils(entityFactory, type);\n+                instance = new JPATaskUtils(type);\n                 ApplicationContextProvider.getBeanFactory().autowireBean(instance);\n                 instances.put(type, instance);\n             }\n@@ -70,6 +65,8 @@ public TaskUtils getInstance(final Task<?> task) {\n             type = TaskType.PULL;\n         } else if (task instanceof PushTask) {\n             type = TaskType.PUSH;\n+        } else if (task instanceof MacroTask) {\n+            type = TaskType.MACRO;\n         } else if (task instanceof SchedTask) {\n             type = TaskType.SCHEDULED;\n         } else if (task instanceof PropagationTask) {\n@@ -96,6 +93,8 @@ public TaskUtils getInstance(final Class<? extends TaskTO> taskClass) {\n             type = TaskType.PULL;\n         } else if (taskClass == PushTaskTO.class) {\n             type = TaskType.PUSH;\n+        } else if (taskClass == MacroTaskTO.class) {\n+            type = TaskType.MACRO;\n         } else {\n             throw new IllegalArgumentException(\"Invalid TaskTO class: \" + taskClass.getName());\n         }"},{"sha":"abd9b71e6f2b8a2c29bc56b20dfce421357692a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -78,13 +78,16 @@\n \n     public static final String TABLE = \"SyncopeUser\";\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    protected static final TypeReference<List<String>> TYPEREF = new TypeReference<List<String>>() {\n+    };\n \n     @Column(nullable = true)\n-    private String password;\n+    protected String password;\n \n     @Transient\n-    private String clearPassword;\n+    protected String clearPassword;\n \n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n@@ -93,53 +96,53 @@\n             @JoinColumn(name = \"role_id\"),\n             uniqueConstraints =\n             @UniqueConstraint(columnNames = { \"user_id\", \"role_id\" }))\n-    private List<JPARole> roles = new ArrayList<>();\n+    protected List<JPARole> roles = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n-    private List<JPAUPlainAttr> plainAttrs = new ArrayList<>();\n+    protected List<JPAUPlainAttr> plainAttrs = new ArrayList<>();\n \n     @Column(nullable = true)\n-    private String status;\n+    protected String status;\n \n     @Lob\n-    private String token;\n+    protected String token;\n \n-    private OffsetDateTime tokenExpireTime;\n+    protected OffsetDateTime tokenExpireTime;\n \n     @Column(nullable = true)\n     @Enumerated(EnumType.STRING)\n-    private CipherAlgorithm cipherAlgorithm;\n+    protected CipherAlgorithm cipherAlgorithm;\n \n     @Lob\n-    private String passwordHistory;\n+    protected String passwordHistory;\n \n     /**\n      * Subsequent failed logins.\n      */\n     @Column(nullable = true)\n-    private Integer failedLogins;\n+    protected Integer failedLogins;\n \n     /**\n      * Username/Login.\n      */\n     @Column(unique = true)\n     @NotNull(message = \"Blank username\")\n-    private String username;\n+    protected String username;\n \n     /**\n      * Last successful login date.\n      */\n-    private OffsetDateTime lastLoginDate;\n+    protected OffsetDateTime lastLoginDate;\n \n     /**\n      * Change password date.\n      */\n-    private OffsetDateTime changePwdDate;\n+    protected OffsetDateTime changePwdDate;\n \n-    private Boolean suspended = false;\n+    protected Boolean suspended = false;\n \n-    private Boolean mustChangePassword = false;\n+    protected Boolean mustChangePassword = false;\n \n     /**\n      * Provisioning external resources.\n@@ -151,7 +154,7 @@\n             @JoinColumn(name = \"resource_id\"),\n             uniqueConstraints =\n             @UniqueConstraint(columnNames = { \"user_id\", \"resource_id\" }))\n-    private List<JPAExternalResource> resources = new ArrayList<>();\n+    protected List<JPAExternalResource> resources = new ArrayList<>();\n \n     @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n@@ -160,28 +163,28 @@\n             @JoinColumn(name = \"anyTypeClass_id\"),\n             uniqueConstraints =\n             @UniqueConstraint(columnNames = { \"user_id\", \"anyTypeClass_id\" }))\n-    private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n+    protected List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n     @Valid\n-    private List<JPAURelationship> relationships = new ArrayList<>();\n+    protected List<JPAURelationship> relationships = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n     @Valid\n-    private List<JPAUMembership> memberships = new ArrayList<>();\n+    protected List<JPAUMembership> memberships = new ArrayList<>();\n \n     @ManyToOne(fetch = FetchType.EAGER)\n-    private JPASecurityQuestion securityQuestion;\n+    protected JPASecurityQuestion securityQuestion;\n \n     @Column(nullable = true)\n-    private String securityAnswer;\n+    protected String securityAnswer;\n \n     @Transient\n-    private String clearSecurityAnswer;\n+    protected String clearSecurityAnswer;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n     @Valid\n-    private List<JPALinkedAccount> linkedAccounts = new ArrayList<>();\n+    protected List<JPALinkedAccount> linkedAccounts = new ArrayList<>();\n \n     @Override\n     public AnyType getType() {\n@@ -354,8 +357,7 @@ public void removeOldestEntriesFromPasswordHistory(final int n) {\n     public List<String> getPasswordHistory() {\n         return passwordHistory == null\n                 ? new ArrayList<>(0)\n-                : POJOHelper.deserialize(passwordHistory, new TypeReference<List<String>>() {\n-                });\n+                : POJOHelper.deserialize(passwordHistory, TYPEREF);\n     }\n \n     @Override"},{"sha":"6bc79a5168387744ac2cce9ffd83ba071e164796","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -39,6 +39,9 @@ under the License.\n   <Implementation id=\"BinaryValidator\" type=\"VALIDATOR\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.BinaryValidator\"/>\n \n+  <Implementation id=\"MacroRunJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.logic.job.MacroRunJobDelegate\"/>\n+\n   <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n   <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\""},{"sha":"1a8d0194dc2f50f343911942f2c93f6025c10979","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FImplementationTest.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -44,7 +44,7 @@ public void findAll() {\n         List<Implementation> implementations = implementationDAO.findAll();\n         assertFalse(implementations.isEmpty());\n \n-        assertEquals(18, implementations.size());\n+        assertEquals(19, implementations.size());\n \n         implementations = implementationDAO.findByType(IdMImplementationType.PULL_ACTIONS);\n         assertEquals(1, implementations.size());\n@@ -53,7 +53,7 @@ public void findAll() {\n         assertEquals(1, implementations.size());\n \n         implementations = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE);\n-        assertEquals(5, implementations.size());\n+        assertEquals(6, implementations.size());\n \n         implementations = implementationDAO.findByType(IdRepoImplementationType.REPORTLET);\n         assertEquals(2, implementations.size());"},{"sha":"2474fd01cee0a3d33fc1d4e27bd179c4a64aac08","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.junit.jupiter.api.Test;\n@@ -44,6 +45,9 @@ public class TaskExecTest extends AbstractTest {\n     @Autowired\n     private TaskDAO taskDAO;\n \n+    @Autowired\n+    private TaskUtilsFactory taskUtilsFactory;\n+\n     @Test\n     public void findAll() {\n         PropagationTask task = taskDAO.find(TaskType.PROPAGATION, \"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n@@ -74,7 +78,7 @@ public void issueSYNCOPE214() {\n         String faultyMessage = \"A faulty message\";\n         faultyMessage = faultyMessage.replace('a', '\\0');\n \n-        TaskExec<PropagationTask> exec = entityFactory.newTaskExec(TaskType.PROPAGATION);\n+        TaskExec<PropagationTask> exec = taskUtilsFactory.getInstance(TaskType.PROPAGATION).newTaskExec();\n         exec.setStart(OffsetDateTime.now());\n         exec.setEnd(OffsetDateTime.now());\n         exec.setStatus(ExecStatus.SUCCESS.name());"},{"sha":"3730127b4daf3839645d035de0e993d94edaeec6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -27,7 +27,10 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -38,10 +41,15 @@\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -95,6 +103,20 @@ public void findAll() {\n         assertEquals(3, taskDAO.findAll(TaskType.SCHEDULED).size());\n         assertEquals(10, taskDAO.findAll(TaskType.PULL).size());\n         assertEquals(11, taskDAO.findAll(TaskType.PUSH).size());\n+\n+        List<GrantedAuthority> authorities = IdRepoEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(SyncopeConstants.MASTER_DOMAIN, null));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        try {\n+            assertEquals(0, taskDAO.findAll(TaskType.MACRO).size());\n+        } finally {\n+            SecurityContextHolder.getContext().setAuthentication(null);\n+        }\n     }\n \n     @Test"},{"sha":"d5546a067b45d3b82bf3c281a40c40dad49080c8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n@@ -82,6 +83,9 @@ public class TaskTest extends AbstractTest {\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n+    @Autowired\n+    private TaskUtilsFactory taskUtilsFactory;\n+\n     @Test\n     public void read() {\n         PropagationTask task = taskDAO.find(TaskType.PROPAGATION, \"1e697572-b896-484c-ae7f-0c8f63fcbc6c\");\n@@ -148,7 +152,7 @@ public void addPropagationTaskExecution() {\n \n         int executionNumber = task.getExecs().size();\n \n-        TaskExec<PropagationTask> execution = entityFactory.newTaskExec(TaskType.PROPAGATION);\n+        TaskExec<PropagationTask> execution = taskUtilsFactory.getInstance(TaskType.PROPAGATION).newTaskExec();\n         execution.setTask(task);\n         execution.setStatus(ExecStatus.CREATED.name());\n         execution.setStart(OffsetDateTime.now());\n@@ -171,7 +175,7 @@ public void addPullTaskExecution() {\n \n         int executionNumber = task.getExecs().size();\n \n-        TaskExec<SchedTask> execution = entityFactory.newTaskExec(TaskType.PULL);\n+        TaskExec<SchedTask> execution = taskUtilsFactory.getInstance(TaskType.PULL).newTaskExec();\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n         execution.setStart(OffsetDateTime.now());\n@@ -195,7 +199,7 @@ public void addPushTaskExecution() {\n \n         int executionNumber = task.getExecs().size();\n \n-        TaskExec<SchedTask> execution = entityFactory.newTaskExec(TaskType.PUSH);\n+        TaskExec<SchedTask> execution = taskUtilsFactory.getInstance(TaskType.PUSH).newTaskExec();\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n         execution.setStart(OffsetDateTime.now());"},{"sha":"eede6391c07b30152522f50358c40535b41e9299","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -767,10 +767,14 @@ under the License.\n   <VirSchema id=\"virtualdata\" READONLY=\"0\" anyTypeClass_id=\"minimal user\"\n              resource_id=\"resource-db-virattr\" anyType_id=\"USER\" extAttrName=\"USERNAME\"/>\n   \n+  <Implementation id=\"MacroRunJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n+                  body=\"org.apache.syncope.core.logic.job.MacroRunJobDelegate\"/>\n+\n   <Implementation id=\"PullJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate\"/>\n   <Implementation id=\"PushJobDelegate\" type=\"TASKJOB_DELEGATE\" engine=\"JAVA\"\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n+\n   <PropagationTask id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n                    objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n                    propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>"},{"sha":"963ee27de5a11c6e602461147e2e751d181a3ba0","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelper.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -72,6 +72,18 @@ public static String serialize(final Object object) {\n         return result;\n     }\n \n+    public static <T extends Object> String serialize(final T object, final TypeReference<T> reference) {\n+        String result = null;\n+\n+        try {\n+            result = MAPPER.writerFor(reference).writeValueAsString(object);\n+        } catch (Exception e) {\n+            LOG.error(\"During serialization\", e);\n+        }\n+\n+        return result;\n+    }\n+\n     public static <T extends Object> T deserialize(final String serialized, final Class<T> reference) {\n         T result = null;\n "},{"sha":"80e4ba6098f8cab0acaf07574169bbafc894898a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.api.utils;\n \n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n \n public final class RealmUtils {\n \n@@ -88,31 +88,32 @@ public boolean test(final String realm) {\n         }\n     }\n \n-    public static class DynRealmsPredicate implements Predicate<String> {\n+    private static final Predicate<String> DYN_REALMS_PREDICATE = new Predicate<String>() {\n \n         @Override\n         public boolean test(final String realm) {\n-            return !realm.startsWith(\"/\");\n+            return !realm.startsWith(SyncopeConstants.ROOT_REALM);\n         }\n-    }\n+    };\n \n     public static Set<String> getEffective(final Set<String> allowedRealms, final String requestedRealm) {\n         Pair<Set<String>, Set<String>> normalized = normalize(allowedRealms);\n \n-        Collection<String> requested = Arrays.asList(requestedRealm);\n+        Set<String> requested = Set.of(requestedRealm);\n+\n+        StartsWithPredicate normalizedFilter = new StartsWithPredicate(normalized.getLeft());\n+        StartsWithPredicate requestedFilter = new StartsWithPredicate(requested);\n \n         Set<String> effective = new HashSet<>();\n-        effective.addAll(requested.stream().\n-                filter(new StartsWithPredicate(normalized.getLeft())).collect(Collectors.toSet()));\n-        effective.addAll(normalized.getLeft().stream().\n-                filter(new StartsWithPredicate(requested)).collect(Collectors.toSet()));\n+        effective.addAll(requested.stream().filter(normalizedFilter).collect(Collectors.toSet()));\n+        effective.addAll(normalized.getLeft().stream().filter(requestedFilter).collect(Collectors.toSet()));\n \n         // includes group ownership\n         effective.addAll(normalized.getRight());\n \n         // includes dynamic realms\n         if (allowedRealms != null) {\n-            effective.addAll(allowedRealms.stream().filter(new DynRealmsPredicate()).collect(Collectors.toSet()));\n+            effective.addAll(allowedRealms.stream().filter(DYN_REALMS_PREDICATE).collect(Collectors.toSet()));\n         }\n \n         return effective;"},{"sha":"16db1fbab8a8e4fbddbfe20982eace2b17dd8cf3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -341,6 +341,7 @@ public JobManager jobManager(\n             final TaskDAO taskDAO,\n             final ReportDAO reportDAO,\n             final ImplementationDAO implementationDAO,\n+            final TaskUtilsFactory taskUtilsFactory,\n             final ConfParamOps confParamOps) {\n \n         DefaultJobManager jobManager = new DefaultJobManager(\n@@ -349,6 +350,7 @@ public JobManager jobManager(\n                 taskDAO,\n                 reportDAO,\n                 implementationDAO,\n+                taskUtilsFactory,\n                 confParamOps,\n                 securityProperties);\n         jobManager.setDisableQuartzInstance(provisioningProperties.getQuartz().isDisableInstance());\n@@ -611,7 +613,6 @@ public IntAttrNameParser intAttrNameParser(\n     public PropagationTaskExecutor propagationTaskExecutor(\n             @Qualifier(\"propagationTaskExecutorAsyncExecutor\")\n             final ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor,\n-            final EntityFactory entityFactory,\n             final TaskUtilsFactory taskUtilsFactory,\n             final AnyUtilsFactory anyUtilsFactory,\n             final ConnectorManager connectorManager,\n@@ -642,7 +643,6 @@ public PropagationTaskExecutor propagationTaskExecutor(\n                 taskDataBinder,\n                 anyUtilsFactory,\n                 taskUtilsFactory,\n-                entityFactory,\n                 outboundMatcher,\n                 validator,\n                 propagationTaskExecutorAsyncExecutor);\n@@ -767,7 +767,7 @@ public SystemLoadReporterJob systemLoadReporterJob(final ApplicationContext ctx)\n     @ConditionalOnMissingBean\n     @Bean\n     public NotificationJobDelegate notificationJobDelegate(\n-            final EntityFactory entityFactory,\n+            final TaskUtilsFactory taskUtilsFactory,\n             final TaskDAO taskDAO,\n             final JavaMailSender mailSender,\n             final AuditManager auditManager,\n@@ -776,7 +776,7 @@ public NotificationJobDelegate notificationJobDelegate(\n         return new DefaultNotificationJobDelegate(\n                 taskDAO,\n                 mailSender,\n-                entityFactory,\n+                taskUtilsFactory,\n                 auditManager,\n                 notificationManager);\n     }"},{"sha":"d26b493a54cedbf44d584a23d236e6679a6cd39c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":18,"deletions":83,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.lang.reflect.Modifier;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.RuleConf;\n@@ -28,24 +29,10 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValueValidator;\n-import org.apache.syncope.core.persistence.api.dao.AccountRule;\n-import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n-import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n-import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n-import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n-import org.apache.syncope.core.provisioning.api.ProvisionSorter;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n-import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n-import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -87,72 +74,20 @@ public void update(final Implementation implementation, final ImplementationTO i\n         implementation.setBody(implementationTO.getBody());\n \n         if (implementation.getEngine() == ImplementationEngine.JAVA) {\n-            Class<?> base = null;\n-            switch (implementation.getType()) {\n-                case IdRepoImplementationType.REPORTLET:\n-                    base = Reportlet.class;\n-                    break;\n-\n-                case IdRepoImplementationType.ACCOUNT_RULE:\n-                    base = AccountRule.class;\n-                    break;\n-\n-                case IdRepoImplementationType.PASSWORD_RULE:\n-                    base = PasswordRule.class;\n-                    break;\n-\n-                case IdRepoImplementationType.ITEM_TRANSFORMER:\n-                    base = ItemTransformer.class;\n-                    break;\n-\n-                case IdRepoImplementationType.TASKJOB_DELEGATE:\n-                    base = SchedTaskJobDelegate.class;\n-                    break;\n-\n-                case IdMImplementationType.RECON_FILTER_BUILDER:\n-                    base = ReconFilterBuilder.class;\n-                    break;\n-\n-                case IdRepoImplementationType.LOGIC_ACTIONS:\n-                    base = LogicActions.class;\n-                    break;\n-\n-                case IdMImplementationType.PROPAGATION_ACTIONS:\n-                    base = PropagationActions.class;\n-                    break;\n-\n-                case IdMImplementationType.PULL_ACTIONS:\n-                    base = PullActions.class;\n-                    break;\n-\n-                case IdMImplementationType.PUSH_ACTIONS:\n-                    base = PushActions.class;\n-                    break;\n-\n-                case IdMImplementationType.PULL_CORRELATION_RULE:\n-                    base = PullCorrelationRule.class;\n-                    break;\n-\n-                case IdMImplementationType.PUSH_CORRELATION_RULE:\n-                    base = PushCorrelationRule.class;\n-                    break;\n-\n-                case IdRepoImplementationType.VALIDATOR:\n-                    base = PlainAttrValueValidator.class;\n-                    break;\n-\n-                case IdRepoImplementationType.RECIPIENTS_PROVIDER:\n-                    base = RecipientsProvider.class;\n-                    break;\n-\n-                case IdMImplementationType.PROVISION_SORTER:\n-                    base = ProvisionSorter.class;\n-                    break;\n-\n-                default:\n-            }\n-\n-            if (base == null) {\n+            Class<?> baseClazz = Optional.ofNullable(\n+                    ImplementationTypesHolder.getInstance().getValues().get(implementation.getType())).\n+                    map(intf -> {\n+                        try {\n+                            return Class.forName(intf);\n+                        } catch (ClassNotFoundException e) {\n+                            LOG.error(\"While resolving interface {} for implementation type {}\",\n+                                    intf, implementation.getType());\n+                            return null;\n+                        }\n+                    }).\n+                    orElse(null);\n+\n+            if (baseClazz == null) {\n                 sce.getElements().add(\"No Java interface found for \" + implementation.getType());\n                 throw sce;\n             }\n@@ -187,9 +122,9 @@ public void update(final Implementation implementation, final ImplementationTO i\n                         sce.getElements().add(\"No Java class found: \" + implementation.getBody());\n                         throw sce;\n                     }\n-                    if (!base.isAssignableFrom(clazz)) {\n+                    if (!baseClazz.isAssignableFrom(clazz)) {\n                         sce.getElements().add(\n-                                \"Java class \" + implementation.getBody() + \" must comply with \" + base.getName());\n+                                \"Java class \" + implementation.getBody() + \" must comply with \" + baseClazz.getName());\n                         throw sce;\n                     }\n                     if (Modifier.isAbstract(clazz.getModifiers())) {"},{"sha":"0d76a4b79abf83e4d66bc08d3419509de8de6fa0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -167,8 +167,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                 for (String name : provisionTO.getAuxClasses()) {\n                     AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n                     if (anyTypeClass == null || provision.getAuxClasses().contains(name)) {\n-                        LOG.warn(\"Ignoring invalid or already present {}: {}\", AnyTypeClass.class.getSimpleName(),\n-                                name);\n+                        LOG.warn(\"Ignoring invalid or already present {}: {}\",\n+                                AnyTypeClass.class.getSimpleName(), name);\n                     } else {\n                         provision.getAuxClasses().add(anyTypeClass.getKey());\n                     }"},{"sha":"cc24e422a0c0501319d17b975f685bc28d5943b9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":107,"deletions":38,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -19,10 +19,14 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Objects;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+import org.apache.syncope.common.lib.command.CommandTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n@@ -45,9 +49,9 @@\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n+import org.apache.syncope.core.persistence.api.entity.task.MacroTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n@@ -64,6 +68,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n+import org.apache.syncope.core.spring.implementation.ImplementationManager;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.Trigger;\n@@ -76,6 +81,8 @@ public class TaskDataBinderImpl extends AbstractExecutableDatabinder implements\n \n     protected static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n+    protected static final String MACRO_RUN_JOB_DELEGATE = \"org.apache.syncope.core.logic.job.MacroRunJobDelegate\";\n+\n     protected final RealmDAO realmDAO;\n \n     protected final ExternalResourceDAO resourceDAO;\n@@ -181,13 +188,9 @@ protected void fill(final ProvisioningTask<?> provisioningTask, final Provisioni\n             if (pullTaskTO.getReconFilterBuilder() == null) {\n                 pullTask.setReconFilterBuilder(null);\n             } else {\n-                Implementation reconFilterBuilder = implementationDAO.find(pullTaskTO.getReconFilterBuilder());\n-                if (reconFilterBuilder == null) {\n-                    LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\",\n-                            pullTaskTO.getReconFilterBuilder());\n-                } else {\n-                    pullTask.setReconFilterBuilder(reconFilterBuilder);\n-                }\n+                Optional.ofNullable(implementationDAO.find(pullTaskTO.getReconFilterBuilder())).ifPresentOrElse(\n+                        pullTask::setReconFilterBuilder,\n+                        () -> LOG.debug(\"Invalid Implementation {}, ignoring...\", pullTaskTO.getReconFilterBuilder()));\n             }\n \n             pullTask.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n@@ -228,18 +231,43 @@ protected void fill(final ProvisioningTask<?> provisioningTask, final Provisioni\n         provisioningTask.setPerformDelete(provisioningTaskTO.isPerformDelete());\n         provisioningTask.setSyncStatus(provisioningTaskTO.isSyncStatus());\n \n-        provisioningTaskTO.getActions().forEach(action -> {\n-            Implementation implementation = implementationDAO.find(action);\n-            if (implementation == null) {\n-                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", action);\n-            } else {\n-                provisioningTask.add(implementation);\n-            }\n-        });\n+        provisioningTaskTO.getActions().forEach(\n+                action -> Optional.ofNullable(implementationDAO.find(action)).ifPresentOrElse(\n+                        provisioningTask::add,\n+                        () -> LOG.debug(\"Invalid Implementation {}, ignoring...\", action)));\n         // remove all implementations not contained in the TO\n         provisioningTask.getActions().removeIf(impl -> !provisioningTaskTO.getActions().contains(impl.getKey()));\n     }\n \n+    protected void fill(final MacroTask macroTask, final MacroTaskTO macroTaskTO) {\n+        macroTask.setRealm(Optional.ofNullable(realmDAO.findByFullPath(macroTaskTO.getRealm())).\n+                orElseThrow(() -> new NotFoundException(\"Realm \" + macroTaskTO.getRealm())));\n+\n+        macroTaskTO.getCommands().\n+                forEach(command -> Optional.ofNullable(implementationDAO.find(command.getKey())).ifPresentOrElse(\n+                impl -> {\n+                    try {\n+                        CommandArgs args = command.getArgs();\n+                        if (args == null) {\n+                            args = ImplementationManager.emptyArgs(impl);\n+                        }\n+\n+                        macroTask.add(impl, args);\n+                    } catch (Exception e) {\n+                        LOG.error(\"While adding Command {} to Macro\", impl.getKey(), e);\n+\n+                        SyncopeClientException sce = SyncopeClientException.build(\n+                                ClientExceptionType.InvalidImplementationType);\n+                        sce.getElements().add(\"While adding Command \" + impl.getKey() + \": \" + e.getMessage());\n+                        throw sce;\n+                    }\n+                },\n+                () -> LOG.error(\"Could not find Command {}\", command.getKey())));\n+\n+        macroTask.setContinueOnError(macroTaskTO.isContinueOnError());\n+        macroTask.setSaveExecs(macroTaskTO.isSaveExecs());\n+    }\n+\n     @Override\n     public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n         Class<? extends TaskTO> taskTOClass = taskUtils.taskTOClass();\n@@ -255,21 +283,39 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n         task.setActive(taskTO.isActive());\n \n         if (taskUtils.getType() == TaskType.SCHEDULED) {\n-            Implementation implementation = implementationDAO.find(taskTO.getJobDelegate());\n-            if (implementation == null) {\n-                throw new NotFoundException(\"Implementation \" + taskTO.getJobDelegate());\n+            task.setJobDelegate(Optional.ofNullable(implementationDAO.find(taskTO.getJobDelegate())).\n+                    orElseThrow(() -> new NotFoundException(\"JobDelegate \" + taskTO.getJobDelegate())));\n+        } else if (taskTO instanceof MacroTaskTO) {\n+            MacroTaskTO macroTaskTO = (MacroTaskTO) taskTO;\n+            MacroTask macroTask = (MacroTask) task;\n+\n+            Implementation jobDelegate = macroTaskTO.getJobDelegate() == null\n+                    ? implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n+                            filter(impl -> MACRO_RUN_JOB_DELEGATE.equals(impl.getBody())).\n+                            findFirst().orElse(null)\n+                    : implementationDAO.find(macroTaskTO.getJobDelegate());\n+            if (jobDelegate == null) {\n+                jobDelegate = entityFactory.newEntity(Implementation.class);\n+                jobDelegate.setKey(StringUtils.substringAfterLast(MACRO_RUN_JOB_DELEGATE, \".\"));\n+                jobDelegate.setEngine(ImplementationEngine.JAVA);\n+                jobDelegate.setType(IdRepoImplementationType.TASKJOB_DELEGATE);\n+                jobDelegate.setBody(MACRO_RUN_JOB_DELEGATE);\n+                jobDelegate = implementationDAO.save(jobDelegate);\n             }\n-            task.setJobDelegate(implementation);\n+            macroTask.setJobDelegate(jobDelegate);\n+\n+            macroTask.setRealm(Optional.ofNullable(realmDAO.findByFullPath(macroTaskTO.getRealm())).\n+                    orElseThrow(() -> new NotFoundException(\"Realm \" + macroTaskTO.getRealm())));\n+\n+            fill(macroTask, macroTaskTO);\n         } else if (taskTO instanceof ProvisioningTaskTO) {\n             ProvisioningTaskTO provisioningTaskTO = (ProvisioningTaskTO) taskTO;\n+            ProvisioningTask<?> provisioningTask = (ProvisioningTask<?>) task;\n \n-            ExternalResource resource = resourceDAO.find(provisioningTaskTO.getResource());\n-            if (resource == null) {\n-                throw new NotFoundException(\"Resource \" + provisioningTaskTO.getResource());\n-            }\n-            ((ProvisioningTask) task).setResource(resource);\n+            provisioningTask.setResource(Optional.ofNullable(resourceDAO.find(provisioningTaskTO.getResource())).\n+                    orElseThrow(() -> new NotFoundException(\"Resource \" + provisioningTaskTO.getResource())));\n \n-            fill((ProvisioningTask) task, provisioningTaskTO);\n+            fill(provisioningTask, provisioningTaskTO);\n         }\n \n         return task;\n@@ -287,12 +333,21 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n             sce.getElements().add(\"name\");\n             throw sce;\n         }\n+\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());\n         task.setCronExpression(taskTO.getCronExpression());\n         task.setActive(taskTO.isActive());\n \n-        if (task instanceof ProvisioningTask) {\n+        if (task instanceof MacroTask) {\n+            MacroTaskTO macroTaskTO = (MacroTaskTO) taskTO;\n+            MacroTask macroTask = (MacroTask) task;\n+\n+            macroTask.getCommands().clear();\n+            macroTask.getCommandArgs().clear();\n+\n+            fill(macroTask, macroTaskTO);\n+        } else if (task instanceof ProvisioningTask) {\n             fill((ProvisioningTask) task, (ProvisioningTaskTO) taskTO);\n         }\n     }\n@@ -368,15 +423,14 @@ public <T extends TaskTO> T getTaskTO(final Task<?> task, final TaskUtils taskUt\n         T taskTO = taskUtils.newTaskTO();\n         taskTO.setKey(task.getKey());\n \n-        TaskExec<?> latestExec = taskExecDAO.findLatestStarted(taskUtils.getType(), task);\n-        if (latestExec == null) {\n-            taskTO.setLatestExecStatus(StringUtils.EMPTY);\n-        } else {\n-            taskTO.setLatestExecStatus(latestExec.getStatus());\n-            taskTO.setStart(latestExec.getStart());\n-            taskTO.setEnd(latestExec.getEnd());\n-            taskTO.setLastExecutor(latestExec.getExecutor());\n-        }\n+        Optional.ofNullable(taskExecDAO.findLatestStarted(taskUtils.getType(), task)).ifPresentOrElse(\n+                latestExec -> {\n+                    taskTO.setLatestExecStatus(latestExec.getStatus());\n+                    taskTO.setStart(latestExec.getStart());\n+                    taskTO.setEnd(latestExec.getEnd());\n+                    taskTO.setLastExecutor(latestExec.getExecutor());\n+                },\n+                () -> taskTO.setLatestExecStatus(StringUtils.EMPTY));\n \n         if (details) {\n             task.getExecs().stream().\n@@ -404,11 +458,26 @@ public <T extends TaskTO> T getTaskTO(final Task<?> task, final TaskUtils taskUt\n                 SchedTask schedTask = (SchedTask) task;\n                 SchedTaskTO schedTaskTO = (SchedTaskTO) taskTO;\n \n+                schedTaskTO.setJobDelegate(schedTask.getJobDelegate().getKey());\n+\n                 fill(schedTaskTO, schedTask);\n+                break;\n+\n+            case MACRO:\n+                MacroTask macroTask = (MacroTask) task;\n+                MacroTaskTO macroTaskTO = (MacroTaskTO) taskTO;\n \n-                if (schedTask.getJobDelegate() != null) {\n-                    schedTaskTO.setJobDelegate(schedTask.getJobDelegate().getKey());\n+                macroTaskTO.setJobDelegate(macroTask.getJobDelegate().getKey());\n+                macroTaskTO.setRealm(macroTask.getRealm().getFullPath());\n+                for (int i = 0; i < macroTask.getCommands().size(); i++) {\n+                    macroTaskTO.getCommands().add(\n+                            new CommandTO.Builder(macroTask.getCommands().get(i).getKey()).\n+                                    args(macroTask.getCommandArgs().get(i)).build());\n                 }\n+                macroTaskTO.setContinueOnError(macroTask.isContinueOnError());\n+                macroTaskTO.setSaveExecs(macroTask.isSaveExecs());\n+\n+                fill(macroTaskTO, macroTask);\n                 break;\n \n             case PULL:"},{"sha":"6b6f50f6f5bbc92fc1b7bfcd7cf61f510ec87225","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -25,9 +25,9 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n@@ -68,7 +68,7 @@\n     protected TaskDAO taskDAO;\n \n     @Autowired\n-    protected EntityFactory entityFactory;\n+    protected TaskUtilsFactory taskUtilsFactory;\n \n     /**\n      * Notification manager.\n@@ -126,7 +126,7 @@ public void execute(\n \n         String executor = Optional.ofNullable(context.getMergedJobDataMap().getString(JobManager.EXECUTOR_KEY)).\n                 orElse(securityProperties.getAdminUser());\n-        TaskExec<SchedTask> execution = entityFactory.newTaskExec(taskType);\n+        TaskExec<SchedTask> execution = taskUtilsFactory.getInstance(taskType).newTaskExec();\n         execution.setStart(OffsetDateTime.now());\n         execution.setTask(task);\n         execution.setExecutor(executor);"},{"sha":"719de888b39e06eda5826802f467c0ca10ee3808","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/DefaultJobManager.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n@@ -89,6 +90,8 @@ public class DefaultJobManager implements JobManager, SyncopeCoreLoader {\n \n     protected final ImplementationDAO implementationDAO;\n \n+    protected final TaskUtilsFactory taskUtilsFactory;\n+\n     protected final ConfParamOps confParamOps;\n \n     protected final SecurityProperties securityProperties;\n@@ -101,6 +104,7 @@ public DefaultJobManager(\n             final TaskDAO taskDAO,\n             final ReportDAO reportDAO,\n             final ImplementationDAO implementationDAO,\n+            final TaskUtilsFactory taskUtilsFactory,\n             final ConfParamOps confParamOps,\n             final SecurityProperties securityProperties) {\n \n@@ -109,6 +113,7 @@ public DefaultJobManager(\n         this.taskDAO = taskDAO;\n         this.reportDAO = reportDAO;\n         this.implementationDAO = implementationDAO;\n+        this.taskUtilsFactory = taskUtilsFactory;\n         this.confParamOps = confParamOps;\n         this.securityProperties = securityProperties;\n     }\n@@ -224,11 +229,7 @@ public Map<String, Object> register(\n         }\n \n         Map<String, Object> jobMap = createJobMapForExecutionContext(executor);\n-        jobMap.put(JobManager.TASK_TYPE, task instanceof PullTask\n-                ? TaskType.PULL\n-                : task instanceof PushTask\n-                        ? TaskType.PUSH\n-                        : TaskType.SCHEDULED);\n+        jobMap.put(JobManager.TASK_TYPE, taskUtilsFactory.getInstance(task).getType());\n         jobMap.put(JobManager.TASK_KEY, task.getKey());\n         jobMap.put(TaskJob.DELEGATE_IMPLEMENTATION, jobDelegate.getKey());\n "},{"sha":"684cdab474c6c96aa70b291020dbf282f58b1fe8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -65,9 +65,10 @@ public enum Status {\n     private SchedTaskJobDelegate delegate;\n \n     /**\n-     * Task key setter.\n+     * Task info setter.\n      *\n-     * @param taskKey to be set\n+     * @param taskType task type\n+     * @param taskKey task key\n      */\n     public void setTaskInfo(final TaskType taskType, final String taskKey) {\n         this.taskType = taskType;"},{"sha":"4a0afe5dcd286e715197be91dcc67c6025ee6f3d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -27,9 +27,9 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n@@ -50,7 +50,7 @@ public class DefaultNotificationJobDelegate implements NotificationJobDelegate {\n \n     protected final JavaMailSender mailSender;\n \n-    protected final EntityFactory entityFactory;\n+    protected final TaskUtilsFactory taskUtilsFactory;\n \n     protected final AuditManager auditManager;\n \n@@ -65,13 +65,13 @@ public class DefaultNotificationJobDelegate implements NotificationJobDelegate {\n     public DefaultNotificationJobDelegate(\n             final TaskDAO taskDAO,\n             final JavaMailSender mailSender,\n-            final EntityFactory entityFactory,\n+            final TaskUtilsFactory taskUtilsFactory,\n             final AuditManager auditManager,\n             final NotificationManager notificationManager) {\n \n         this.taskDAO = taskDAO;\n         this.mailSender = mailSender;\n-        this.entityFactory = entityFactory;\n+        this.taskUtilsFactory = taskUtilsFactory;\n         this.auditManager = auditManager;\n         this.notificationManager = notificationManager;\n     }\n@@ -94,7 +94,7 @@ public boolean isInterrupted() {\n     @Transactional\n     @Override\n     public TaskExec<NotificationTask> executeSingle(final NotificationTask task, final String executor) {\n-        TaskExec<NotificationTask> execution = entityFactory.newTaskExec(TaskType.NOTIFICATION);\n+        TaskExec<NotificationTask> execution = taskUtilsFactory.getInstance(TaskType.NOTIFICATION).newTaskExec();\n         execution.setTask(task);\n         execution.setStart(OffsetDateTime.now());\n         execution.setExecutor(executor);"},{"sha":"bd753588976faa0f01631d3bc8413434d92d36cd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -49,7 +49,6 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n@@ -126,8 +125,6 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n \n     protected final TaskUtilsFactory taskUtilsFactory;\n \n-    protected final EntityFactory entityFactory;\n-\n     protected final OutboundMatcher outboundMatcher;\n \n     protected final PlainAttrValidationManager validator;\n@@ -148,7 +145,6 @@ public AbstractPropagationTaskExecutor(\n             final TaskDataBinder taskDataBinder,\n             final AnyUtilsFactory anyUtilsFactory,\n             final TaskUtilsFactory taskUtilsFactory,\n-            final EntityFactory entityFactory,\n             final OutboundMatcher outboundMatcher,\n             final PlainAttrValidationManager validator) {\n \n@@ -165,7 +161,6 @@ public AbstractPropagationTaskExecutor(\n         this.taskDataBinder = taskDataBinder;\n         this.anyUtilsFactory = anyUtilsFactory;\n         this.taskUtilsFactory = taskUtilsFactory;\n-        this.entityFactory = entityFactory;\n         this.outboundMatcher = outboundMatcher;\n         this.validator = validator;\n     }\n@@ -496,7 +491,7 @@ protected TaskExec<PropagationTask> doExecute(\n \n         OffsetDateTime start = OffsetDateTime.now();\n \n-        TaskExec<PropagationTask> exec = entityFactory.newTaskExec(TaskType.PROPAGATION);\n+        TaskExec<PropagationTask> exec = taskUtilsFactory.getInstance(TaskType.PROPAGATION).newTaskExec();\n         exec.setStatus(ExecStatus.CREATED.name());\n         exec.setExecutor(executor);\n \n@@ -696,7 +691,7 @@ protected TaskExec<PropagationTask> rejected(\n             final PropagationReporter reporter,\n             final String executor) {\n \n-        TaskExec<PropagationTask> execution = entityFactory.newTaskExec(TaskType.PROPAGATION);\n+        TaskExec<PropagationTask> execution = taskUtilsFactory.getInstance(TaskType.PROPAGATION).newTaskExec();\n         execution.setStatus(ExecStatus.NOT_ATTEMPTED.name());\n         execution.setExecutor(executor);\n         execution.setStart(OffsetDateTime.now());\n@@ -764,7 +759,7 @@ protected Optional<PropagationTask> hasToBeregistered(\n             return Optional.empty();\n         }\n \n-        PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n+        PropagationTask task = taskUtilsFactory.getInstance(TaskType.PROPAGATION).newTask();\n         task.setResource(resourceDAO.find(resource.getKey()));\n         task.setObjectClassName(taskInfo.getObjectClass().getObjectClassValue());\n         task.setAnyTypeKind(taskInfo.getAnyTypeKind());"},{"sha":"049385689c5da40382cbf69428141391985dd436","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Exec;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -102,7 +101,6 @@ public PriorityPropagationTaskExecutor(\n             final TaskDataBinder taskDataBinder,\n             final AnyUtilsFactory anyUtilsFactory,\n             final TaskUtilsFactory taskUtilsFactory,\n-            final EntityFactory entityFactory,\n             final OutboundMatcher outboundMatcher,\n             final PlainAttrValidationManager validator,\n             final ThreadPoolTaskExecutor taskExecutor) {\n@@ -120,7 +118,6 @@ public PriorityPropagationTaskExecutor(\n                 taskDataBinder,\n                 anyUtilsFactory,\n                 taskUtilsFactory,\n-                entityFactory,\n                 outboundMatcher,\n                 validator);\n         this.taskExecutor = taskExecutor;"},{"sha":"5b654a0c6acb736ce9dcbfd0c6fb2cacc63fdc45","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":35,"deletions":31,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -54,37 +55,6 @@\n \n     private static final String LINKED_ACCOUNT = \"LINKED_ACCOUNT\";\n \n-    /**\n-     * Helper method to invoke logging per provisioning result, for the given trace level.\n-     *\n-     * @param results provisioning results\n-     * @param level trace level\n-     * @return report as string\n-     */\n-    public static String generate(final Collection<ProvisioningReport> results, final TraceLevel level) {\n-        StringBuilder sb = new StringBuilder();\n-\n-        results.stream().map(result -> {\n-            if (level == TraceLevel.SUMMARY) {\n-                // No per entry log in this case.\n-                return null;\n-            } else if (level == TraceLevel.FAILURES && result.getStatus() == ProvisioningReport.Status.FAILURE) {\n-                // only report failures\n-                return String.format(\"Failed %s (key/name): %s/%s with message: %s\",\n-                        result.getOperation(), result.getKey(), result.getName(), result.getMessage());\n-            } else {\n-                // All\n-                return String.format(\"%s %s (key/name): %s/%s %s\",\n-                        result.getOperation(), result.getStatus(), result.getKey(), result.getName(),\n-                        StringUtils.isBlank(result.getMessage())\n-                        ? StringUtils.EMPTY\n-                        : \"with message: \" + result.getMessage());\n-            }\n-        }).filter(Objects::nonNull).forEach(report -> sb.append(report).append('\\n'));\n-\n-        return sb.toString();\n-    }\n-\n     /**\n      * ConnInstance loader.\n      */\n@@ -103,6 +73,9 @@ public static String generate(final Collection<ProvisioningReport> results, fina\n     @Autowired\n     protected ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    protected EntityFactory entityFactory;\n+\n     /**\n      * Policy DAO.\n      */\n@@ -129,6 +102,37 @@ protected ProvisionSorter getProvisionSorter(final T task) {\n         return perContextProvisionSorter.get();\n     }\n \n+    /**\n+     * Helper method to invoke logging per provisioning result, for the given trace level.\n+     *\n+     * @param results provisioning results\n+     * @param level trace level\n+     * @return report as string\n+     */\n+    protected String generate(final Collection<ProvisioningReport> results, final TraceLevel level) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        results.stream().map(result -> {\n+            if (level == TraceLevel.SUMMARY) {\n+                // No per entry log in this case.\n+                return null;\n+            } else if (level == TraceLevel.FAILURES && result.getStatus() == ProvisioningReport.Status.FAILURE) {\n+                // only report failures\n+                return String.format(\"Failed %s (key/name): %s/%s with message: %s\",\n+                        result.getOperation(), result.getKey(), result.getName(), result.getMessage());\n+            } else {\n+                // All\n+                return String.format(\"%s %s (key/name): %s/%s %s\",\n+                        result.getOperation(), result.getStatus(), result.getKey(), result.getName(),\n+                        StringUtils.isBlank(result.getMessage())\n+                        ? StringUtils.EMPTY\n+                        : \"with message: \" + result.getMessage());\n+            }\n+        }).filter(Objects::nonNull).forEach(report -> sb.append(report).append('\\n'));\n+\n+        return sb.toString();\n+    }\n+\n     /**\n      * Create a textual report of the provisioning operation, based on the trace level.\n      *"},{"sha":"815fd934ea3f3e7d1bb4dd1bd3d59f37fed382c7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":30,"deletions":8,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -38,6 +38,10 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.CASSPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2SPClientAppDAO;\n+import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -73,6 +77,18 @@\n     @Autowired\n     private AnySearchDAO searchDAO;\n \n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private CASSPClientAppDAO casSPClientAppDAO;\n+\n+    @Autowired\n+    private OIDCRPClientAppDAO oidcRPClientAppDAO;\n+\n+    @Autowired\n+    private SAML2SPClientAppDAO saml2SPClientAppDAO;\n+\n     private SyncopePullExecutor executor;\n \n     private Result latestResult;\n@@ -573,14 +589,20 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<Realm>\n                                 realmDAO.getRoot(), true, adminRealms, allMatchingCond, AnyTypeKind.GROUP);\n                         int anyObjects = searchDAO.count(\n                                 realmDAO.getRoot(), true, adminRealms, allMatchingCond, AnyTypeKind.ANY_OBJECT);\n-\n-                        if (users + groups + anyObjects > 0) {\n-                            SyncopeClientException containedAnys = SyncopeClientException.build(\n-                                    ClientExceptionType.AssociatedAnys);\n-                            containedAnys.getElements().add(users + \" user(s)\");\n-                            containedAnys.getElements().add(groups + \" group(s)\");\n-                            containedAnys.getElements().add(anyObjects + \" anyObject(s)\");\n-                            throw containedAnys;\n+                        int macroTasks = taskDAO.findByRealm(realm).size();\n+                        int clientApps = casSPClientAppDAO.findByRealm(realm).size()\n+                                + saml2SPClientAppDAO.findByRealm(realm).size()\n+                                + oidcRPClientAppDAO.findByRealm(realm).size();\n+\n+                        if (users + groups + anyObjects + macroTasks + clientApps > 0) {\n+                            SyncopeClientException realmContains =\n+                                    SyncopeClientException.build(ClientExceptionType.RealmContains);\n+                            realmContains.getElements().add(users + \" user(s)\");\n+                            realmContains.getElements().add(groups + \" group(s)\");\n+                            realmContains.getElements().add(anyObjects + \" anyObject(s)\");\n+                            realmContains.getElements().add(macroTasks + \" command task(s)\");\n+                            realmContains.getElements().add(clientApps + \" client app(s)\");\n+                            throw realmContains;\n                         }\n \n                         PropagationByResource<String> propByRes = new PropagationByResource<>();"},{"sha":"ef93c05cf13de4e56d9d0b3870a9f28138ced93f","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/implementation/ImplementationManager.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fimplementation%2FImplementationManager.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -19,18 +19,22 @@\n package org.apache.syncope.core.spring.implementation;\n \n import groovy.lang.GroovyClassLoader;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.ParameterizedType;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.command.CommandArgs;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n@@ -180,6 +184,26 @@ public static Optional<PushCorrelationRule> buildPushCorrelationRule(\n         }\n     }\n \n+    public static CommandArgs emptyArgs(final Implementation impl) throws Exception {\n+        if (!IdRepoImplementationType.COMMAND.equals(impl.getType())) {\n+            throw new IllegalArgumentException(\"This method can be only called on implementations\");\n+        }\n+\n+        Class<Object> commandClass = getClass(impl).getLeft();\n+\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends CommandArgs> commandArgsClass =\n+                (Class<? extends CommandArgs>) (((ParameterizedType) commandClass.getGenericInterfaces()[0]).\n+                        getActualTypeArguments()[0]);\n+\n+        if (commandArgsClass.getEnclosingClass() == null || Modifier.isStatic(commandArgsClass.getModifiers())) {\n+            return commandArgsClass.getDeclaredConstructor().newInstance();\n+        }\n+\n+        throw new IllegalArgumentException(\n+                CommandArgs.class.getName() + \" shall be either declared as independent or nested static\");\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     private static <T> Pair<Class<T>, Boolean> getClass(final Implementation impl) throws ClassNotFoundException {\n         if (CLASS_CACHE.containsKey(impl.getKey())) {"},{"sha":"779f89e2f4220f2e98b75b293842441bf6d0bfd5","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DelegatedAdministrationException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -27,7 +27,7 @@ public class DelegatedAdministrationException extends RuntimeException {\n \n     public DelegatedAdministrationException(final String realm, final String type, final String key) {\n         super(\"Missing entitlement or realm administration under \" + realm + \" for \"\n-                + (Optional.ofNullable(key).map(s -> type + ' ' + s).orElseGet(() -> \"new \" + type)));\n+                + Optional.ofNullable(key).map(s -> type + ' ' + s).orElseGet(() -> \"new \" + type));\n     }\n \n     public DelegatedAdministrationException(final AnyTypeKind type, final String key) {"},{"sha":"3e09473641aaead9dac1042f31f482ce1a167959","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -126,6 +126,9 @@ public class ITImplementationLookup implements ImplementationLookup {\n     private static final Set<Class<?>> PROVISION_SORTER_CLASSES =\n             Set.of(DefaultProvisionSorter.class);\n \n+    private static final Set<Class<?>> COMMAND_CLASSES =\n+            Set.of(TestCommand.class);\n+\n     private static final Map<String, Set<String>> CLASS_NAMES = new HashMap<>() {\n \n         private static final long serialVersionUID = 3109256773218160485L;\n@@ -210,6 +213,10 @@ public class ITImplementationLookup implements ImplementationLookup {\n             classNames = ITImplementationLookup.PROVISION_SORTER_CLASSES.stream().\n                     map(Class::getName).collect(Collectors.toSet());\n             put(IdMImplementationType.PROVISION_SORTER, classNames);\n+\n+            classNames = ITImplementationLookup.COMMAND_CLASSES.stream().\n+                    map(Class::getName).collect(Collectors.toSet());\n+            put(IdRepoImplementationType.COMMAND, classNames);\n         }\n     };\n "},{"sha":"e72f7bf63a545c853968a25b6a67c18664e56ea2","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRuleConf.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRuleConf.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,12 +18,8 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.policy.AbstractAccountRuleConf;\n \n-@XmlRootElement(name = \"testAccountRuleConf\")\n-@XmlType\n public class TestAccountRuleConf extends AbstractAccountRuleConf {\n \n     private static final long serialVersionUID = -1803947511928491978L;\n@@ -33,5 +29,4 @@ public class TestAccountRuleConf extends AbstractAccountRuleConf {\n     public String getMustContainSubstring() {\n         return mustContainSubstring;\n     }\n-\n }"},{"sha":"8ad73db82fee785c9cbaa95f1e752dadd8869a5e","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestCommand.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommand.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.util.Optional;\n+import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.core.logic.AnyObjectLogic;\n+import org.apache.syncope.core.logic.RealmLogic;\n+import org.apache.syncope.core.logic.api.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class TestCommand implements Command<TestCommandArgs> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TestCommand.class);\n+\n+    @Autowired\n+    private RealmLogic realmLogic;\n+\n+    @Autowired\n+    private AnyObjectLogic anyObjectLogic;\n+\n+    private Optional<RealmTO> getRealm(final String fullPath) {\n+        return realmLogic.list(fullPath).stream().filter(realm -> fullPath.equals(realm.getFullPath())).findFirst();\n+    }\n+\n+    @Transactional(propagation = Propagation.NOT_SUPPORTED)\n+    @Override\n+    public String run(final TestCommandArgs args) {\n+        // 1. create new Realm\n+        RealmTO realm = new RealmTO();\n+        realm.setName(args.getRealmName());\n+        realm.setParent(getRealm(args.getParentRealm()).map(RealmTO::getKey).orElse(null));\n+        realm = realmLogic.create(args.getParentRealm(), realm).getEntity();\n+        LOG.info(\"Realm created: {}\", realm.getFullPath());\n+\n+        // 2. create new PRINTER\n+        AnyObjectTO anyObject = anyObjectLogic.create(\n+                new AnyObjectCR.Builder(realm.getFullPath(), \"PRINTER\", args.getPrinterName()).\n+                        plainAttr(new Attr.Builder(\"location\").value(\"location\").build()).\n+                        build(),\n+                false).getEntity();\n+        LOG.info(\"PRINTER created: {}\", anyObject.getName());\n+\n+        return \"Realm created: \" + realm.getFullPath() + \"; PRINTER created: \" + anyObject.getName();\n+    }\n+}"},{"sha":"0aa7fe4e5e8f8afb846889310f3d7371a676e28d","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestCommandArgs.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommandArgs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommandArgs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestCommandArgs.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import org.apache.syncope.common.lib.command.CommandArgs;\n+\n+public class TestCommandArgs extends CommandArgs {\n+\n+    private static final long serialVersionUID = 1408260716514938521L;\n+\n+    private String parentRealm = \"/even/two\";\n+\n+    private String realmName = \"realm123\";\n+\n+    private String printerName = \"printer123\";\n+\n+    public String getParentRealm() {\n+        return parentRealm;\n+    }\n+\n+    public String getRealmName() {\n+        return realmName;\n+    }\n+\n+    public String getPrinterName() {\n+        return printerName;\n+    }\n+\n+    public void setParentRealm(final String parentRealm) {\n+        this.parentRealm = parentRealm;\n+    }\n+\n+    public void setRealmName(final String realmName) {\n+        this.realmName = realmName;\n+    }\n+\n+    public void setPrinterName(final String printerName) {\n+        this.printerName = printerName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TestCommandArgs{\"\n+                + \"parentRealm=\" + parentRealm\n+                + \", realmName=\" + realmName\n+                + \", printerName=\" + printerName\n+                + '}';\n+    }\n+}"},{"sha":"7f4c3a7620b1584298c52c57c11a600bf7c32abf","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRuleConf.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRuleConf.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -18,12 +18,8 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.policy.AbstractPasswordRuleConf;\n \n-@XmlRootElement(name = \"testPasswordRuleConf\")\n-@XmlType\n public class TestPasswordRuleConf extends AbstractPasswordRuleConf {\n \n     private static final long serialVersionUID = -1803947511928491978L;\n@@ -33,5 +29,4 @@ public class TestPasswordRuleConf extends AbstractPasswordRuleConf {\n     public String getMustEndWith() {\n         return mustEndWith;\n     }\n-\n }"},{"sha":"c47aee07f0df9588b44c66d8e6992752863dd69f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -116,6 +116,7 @@\n import org.apache.syncope.common.rest.api.service.AuthProfileService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n+import org.apache.syncope.common.rest.api.service.CommandService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DelegationService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n@@ -348,6 +349,8 @@ public void initialize(final ConfigurableApplicationContext ctx) {\n \n     protected static DelegationService DELEGATION_SERVICE;\n \n+    protected static CommandService COMMAND_SERVICE;\n+\n     protected static SRARouteService SRA_ROUTE_SERVICE;\n \n     protected static SAML2SP4UIService SAML2SP4UI_SERVICE;\n@@ -453,6 +456,7 @@ public static void restSetup() {\n         IMPLEMENTATION_SERVICE = ADMIN_CLIENT.getService(ImplementationService.class);\n         REMEDIATION_SERVICE = ADMIN_CLIENT.getService(RemediationService.class);\n         DELEGATION_SERVICE = ADMIN_CLIENT.getService(DelegationService.class);\n+        COMMAND_SERVICE = ADMIN_CLIENT.getService(CommandService.class);\n         SRA_ROUTE_SERVICE = ADMIN_CLIENT.getService(SRARouteService.class);\n         SAML2SP4UI_SERVICE = ADMIN_CLIENT.getService(SAML2SP4UIService.class);\n         SAML2SP4UI_IDP_SERVICE = ADMIN_CLIENT.getService(SAML2SP4UIIdPService.class);"},{"sha":"0b5d67dbc3bcda2301ddcc95502ae59bf2ae43be","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AjaxBrowseITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxBrowseITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxBrowseITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAjaxBrowseITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.fit.console;\n \n import org.apache.syncope.client.console.pages.Dashboard;\n+import org.apache.syncope.client.console.pages.Engagements;\n import org.apache.syncope.client.console.pages.Login;\n import org.apache.syncope.client.console.pages.Logs;\n import org.apache.syncope.client.console.pages.Notifications;\n@@ -64,6 +65,9 @@ public void browsingBookmarkablePageLink() {\n         TESTER.clickLink(\"body:idmPages:0:idmPageLI:idmPage\", false);\n         TESTER.assertRenderedPage(Topology.class);\n \n+        TESTER.clickLink(\"body:engagementsLI:engagements\", false);\n+        TESTER.assertRenderedPage(Engagements.class);\n+\n         TESTER.clickLink(\"body:reportsLI:reports\", false);\n         TESTER.assertRenderedPage(Reports.class);\n "},{"sha":"5e73c8bfc42420954957d1f8f9cb61bc6d1543f1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/EngagementsITCase.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FEngagementsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FEngagementsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FEngagementsITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console;\n+\n+import org.apache.syncope.client.console.pages.Engagements;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.util.tester.FormTester;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class EngagementsITCase extends AbstractConsoleITCase {\n+\n+    private static final String SCHED_TASK_FORM =\n+            \"body:content:tabbedPanel:panel:firstLevelContainer:first:outerObjectsRepeater:0:outer:form:content:form\";\n+\n+    @BeforeEach\n+    public void login() {\n+        doLogin(ADMIN_UNAME, ADMIN_PWD);\n+        TESTER.clickLink(\"body:engagementsLI:engagements\", false);\n+        TESTER.assertRenderedPage(Engagements.class);\n+    }\n+\n+    @Test\n+    public void createSchedTask() {\n+        TESTER.clickLink(\"body:content:tabbedPanel:panel:firstLevelContainer:first:container:content:add\");\n+\n+        FormTester formTester = TESTER.newFormTester(SCHED_TASK_FORM);\n+        formTester.setValue(\"view:name:textField\", \"test\");\n+        formTester.select(\"view:jobDelegate:dropDownChoiceField\", 0);\n+\n+        formTester.submit(\"buttons:next\");\n+        TESTER.cleanupFeedbackMessages();\n+\n+        formTester = TESTER.newFormTester(SCHED_TASK_FORM);\n+\n+        TESTER.assertComponent(SCHED_TASK_FORM + \":view:schedule:seconds:textField\", TextField.class);\n+\n+        formTester.submit(\"buttons:finish\");\n+        TESTER.cleanupFeedbackMessages();\n+    }\n+}"},{"sha":"13c18bc8d6a6f2346f8cb985744da52a0270c62c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/PoliciesITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FPoliciesITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -493,8 +493,7 @@ private static void composeDefaultAccountPolicy(final String policyDescription)\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:1:outer:container:content:\"\n                 + \"togglePanelContainer:container:actions:actions:actionRepeater:2:action:action\");\n \n-        TESTER.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\",\n-                Modal.class);\n+        TESTER.assertComponent(\"body:content:tabbedPanel:panel:outerObjectsRepeater:0:outer\", Modal.class);\n \n         Component modal = TESTER.getComponentFromLastRenderedPage(\n                 \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:outer\");\n@@ -508,10 +507,11 @@ private static void composeDefaultAccountPolicy(final String policyDescription)\n         formTester.setValue(\"view:rule:dropDownChoiceField\", \"0\");\n         formTester.submit(\"buttons:next\");\n \n-        formTester = TESTER.newFormTester(\"body:content:tabbedPanel:panel:outerObjectsRepeater:4:\"\n+        formTester = TESTER.newFormTester(\n+                \"body:content:tabbedPanel:panel:outerObjectsRepeater:4:\"\n                 + \"outer:form:content:container:content:wizard:form\");\n         formTester.submit(\"buttons:finish\");\n-\n+        \n         assertSuccessMessage();\n         TESTER.cleanupFeedbackMessages();\n "},{"sha":"4a3ef063ccccbe8e887882c66763b914598de4fc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/ReportsITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FReportsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FReportsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FReportsITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -105,7 +105,7 @@ public void read() {\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:firstLevelContainer:first:outerObjectsRepeater:1:outer:\"\n-                + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:3:action:action\");\n+                + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n \n         TESTER.assertModelValue(\n                 \"body:content:tabbedPanel:panel:secondLevelContainer:title\", \"Executions of report 'test'\");\n@@ -144,7 +144,7 @@ public void update() {\n         TESTER.executeAjaxEvent(result.getPageRelativePath(), Constants.ON_CLICK);\n         TESTER.clickLink(\n                 \"body:content:tabbedPanel:panel:firstLevelContainer:first:outerObjectsRepeater:1:outer:\"\n-                + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:0:action:action\");\n+                + \"container:content:togglePanelContainer:container:actions:actions:actionRepeater:1:action:action\");\n \n         TESTER.assertModelValue(\n                 \"body:content:tabbedPanel:panel:firstLevelContainer:first:outerObjectsRepeater:\""},{"sha":"0d77c28b8854fb2de89e56552e7e34ef5287ac1c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":2,"deletions":35,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -33,7 +33,6 @@\n import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -73,9 +72,6 @@ public void showTopologyToggleMenu() {\n                 \"body:toggle:container:content:togglePanelContainer:container:actions:push\",\n                 AjaxLink.class);\n         TESTER.executeAjaxEvent(\"body:syncope\", Constants.ON_CLICK);\n-        TESTER.assertComponent(\n-                \"body:toggle:container:content:togglePanelContainer:container:actions:tasks\",\n-                AjaxLink.class);\n         TESTER.executeAjaxEvent(\"body:conns:0:conns:3:conn\", Constants.ON_CLICK);\n         TESTER.assertComponent(\n                 \"body:toggle:container:content:togglePanelContainer:container:actions:create\",\n@@ -310,7 +306,7 @@ public void executePullTask() {\n         TESTER.clickLink(\n                 \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:first:\"\n                 + \"outerObjectsRepeater:1:outer:container:content:togglePanelContainer:container:\"\n-                + \"actions:actions:actionRepeater:3:action:action\");\n+                + \"actions:actions:actionRepeater:4:action:action\");\n \n         TESTER.clickLink(\n                 \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:first:\"\n@@ -473,35 +469,6 @@ public void editPushTask() {\n         TESTER.cleanupFeedbackMessages();\n     }\n \n-    @Test\n-    public void createSchedTask() {\n-        TESTER.executeAjaxEvent(\"body:syncope\", Constants.ON_CLICK);\n-        TESTER.clickLink(\"body:toggle:container:content:togglePanelContainer:container:actions:tasks\");\n-        TESTER.clickLink(\n-                \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:first:\"\n-                + \"container:content:add\");\n-\n-        FormTester formTester = TESTER.newFormTester(\n-                \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:first:\"\n-                + \"container:content:wizard:form\");\n-        formTester.setValue(\"view:name:textField\", \"test\");\n-        formTester.select(\"view:jobDelegate:dropDownChoiceField\", 0);\n-\n-        formTester.submit(\"buttons:next\");\n-        TESTER.cleanupFeedbackMessages();\n-\n-        formTester = TESTER.newFormTester(\n-                \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:first:\"\n-                + \"container:content:wizard:form\");\n-\n-        TESTER.assertComponent(\n-                \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:\"\n-                + \"first:container:content:wizard:form:view:schedule:seconds:textField\", TextField.class);\n-\n-        formTester.submit(\"buttons:finish\");\n-        TESTER.cleanupFeedbackMessages();\n-    }\n-\n     @Test\n     public void addGroupTemplate() {\n         Component component = findComponentByProp(\"key\", \"body:resources\", \"resource-testdb\");\n@@ -516,7 +483,7 @@ public void addGroupTemplate() {\n         TESTER.clickLink(\n                 \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:first:\"\n                 + \"outerObjectsRepeater:1:outer:container:content:togglePanelContainer:container:\"\n-                + \"actions:actions:actionRepeater:4:action:action\");\n+                + \"actions:actions:actionRepeater:3:action:action\");\n \n         TESTER.assertComponent(\n                 \"body:toggle:outerObjectsRepeater:2:outer:form:content:tasks:firstLevelContainer:\""},{"sha":"cc3d1dd7e84f962397354b1e55057b1ebd2c2d85","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/CommandITCase.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FCommandITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.command.CommandOutput;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.CommandQuery;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.core.reference.TestCommand;\n+import org.apache.syncope.fit.core.reference.TestCommandArgs;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class CommandITCase extends AbstractITCase {\n+\n+    @BeforeAll\n+    public static void testCommandSetup() {\n+        ImplementationTO command = null;\n+        try {\n+            command = IMPLEMENTATION_SERVICE.read(\n+                    IdRepoImplementationType.COMMAND, TestCommand.class.getSimpleName());\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                command = new ImplementationTO();\n+                command.setKey(TestCommand.class.getSimpleName());\n+                command.setEngine(ImplementationEngine.JAVA);\n+                command.setType(IdRepoImplementationType.COMMAND);\n+                command.setBody(TestCommand.class.getName());\n+                Response response = IMPLEMENTATION_SERVICE.create(command);\n+                command = IMPLEMENTATION_SERVICE.read(\n+                        command.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(command);\n+            }\n+        }\n+        assertNotNull(command);\n+    }\n+\n+    @Test\n+    public void listCommands() {\n+        PagedResult<CommandTO> commands = COMMAND_SERVICE.search(new CommandQuery.Builder().page(1).size(100).build());\n+        assertEquals(1, commands.getTotalCount());\n+        assertEquals(1, commands.getResult().size());\n+\n+        CommandTO command = commands.getResult().get(0);\n+        assertNotNull(command);\n+        assertEquals(TestCommand.class.getSimpleName(), command.getKey());\n+        assertTrue(command.getArgs() instanceof TestCommandArgs);\n+    }\n+\n+    @Test\n+    public void runCommand() {\n+        CommandTO command = COMMAND_SERVICE.search(\n+                new CommandQuery.Builder().page(1).size(1).build()).getResult().get(0);\n+        TestCommandArgs args = ((TestCommandArgs) command.getArgs());\n+        args.setPrinterName(\"printer124\");\n+\n+        CommandOutput output = COMMAND_SERVICE.run(command);\n+        assertNotNull(output);\n+\n+        try {\n+            AnyObjectTO printer = ANY_OBJECT_SERVICE.read(args.getPrinterName());\n+            assertNotNull(printer);\n+            assertEquals(args.getParentRealm() + \"/\" + args.getRealmName(), printer.getRealm());\n+            assertFalse(REALM_SERVICE.list(printer.getRealm()).isEmpty());\n+        } finally {\n+            ANY_OBJECT_SERVICE.delete(args.getPrinterName());\n+            REALM_SERVICE.delete(args.getParentRealm() + \"/\" + args.getRealmName());\n+        }\n+    }\n+}"},{"sha":"9f11b30fd49bf977a17be17b2c1079a7954be48d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DelegationITCase.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -239,17 +239,11 @@ public void operations() {\n         }\n \n         // 3b. search users as rossini with delegation -> SUCCESS\n-        if (ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n-            try {\n-                Thread.sleep(2000);\n-            } catch (InterruptedException ex) {\n-                // ignore\n-            }\n-        }\n-\n         int forRossini = rossini.delegatedBy(\"bellini\").getService(UserService.class).search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).getTotalCount();\n-        assertEquals(forBellini, forRossini);\n+        if (!ElasticsearchDetector.isElasticSearchEnabled(ADMIN_CLIENT.platform())) {\n+            assertEquals(forBellini, forRossini);\n+        }\n \n         // 4. delete delegation: searching users as rossini does not work, even with delegation\n         DELEGATION_SERVICE.delete(delegation.getKey());"},{"sha":"aebedba892c1f6c2fffdbc147bf232563ace3770","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MacroITCase.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMacroITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.command.CommandTO;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.MacroTaskTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.core.reference.TestCommand;\n+import org.apache.syncope.fit.core.reference.TestCommandArgs;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class MacroITCase extends AbstractITCase {\n+\n+    private static String MACRO_TASK_KEY;\n+\n+    @BeforeAll\n+    public static void testCommandsSetup() throws Exception {\n+        CommandITCase.testCommandSetup();\n+\n+        ImplementationTO transformer = null;\n+        try {\n+            transformer = IMPLEMENTATION_SERVICE.read(\n+                    IdRepoImplementationType.COMMAND, \"GroovyCommand\");\n+        } catch (SyncopeClientException e) {\n+            if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n+                transformer = new ImplementationTO();\n+                transformer.setKey(\"GroovyCommand\");\n+                transformer.setEngine(ImplementationEngine.GROOVY);\n+                transformer.setType(IdRepoImplementationType.COMMAND);\n+                transformer.setBody(IOUtils.toString(\n+                        MacroITCase.class.getResourceAsStream(\"/GroovyCommand.groovy\"), StandardCharsets.UTF_8));\n+                Response response = IMPLEMENTATION_SERVICE.create(transformer);\n+                transformer = IMPLEMENTATION_SERVICE.read(\n+                        transformer.getType(), response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                assertNotNull(transformer.getKey());\n+            }\n+        }\n+        assertNotNull(transformer);\n+\n+        if (MACRO_TASK_KEY == null) {\n+            MacroTaskTO task = new MacroTaskTO();\n+            task.setName(\"Test Macro\");\n+            task.setActive(true);\n+            task.setRealm(\"/odd\");\n+            task.getCommands().add(new CommandTO.Builder(\"GroovyCommand\").build());\n+            task.getCommands().add(new CommandTO.Builder(TestCommand.class.getSimpleName()).\n+                    args(new TestCommandArgs()).build());\n+\n+            Response response = TASK_SERVICE.create(TaskType.MACRO, task);\n+            task = getObject(response.getLocation(), TaskService.class, MacroTaskTO.class);\n+            MACRO_TASK_KEY = task.getKey();\n+        }\n+    }\n+\n+    @AfterAll\n+    public static void cleanup() {\n+        TestCommandArgs args = new TestCommandArgs();\n+        try {\n+            ANY_OBJECT_SERVICE.delete(args.getPrinterName());\n+            REALM_SERVICE.delete(args.getParentRealm() + \"/\" + args.getRealmName());\n+        } catch (Exception e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Test\n+    public void execute() {\n+        int preExecs = TASK_SERVICE.read(TaskType.MACRO, MACRO_TASK_KEY, true).getExecutions().size();\n+        ExecTO execution = TASK_SERVICE.execute(new ExecSpecs.Builder().key(MACRO_TASK_KEY).build());\n+        assertNotNull(execution.getExecutor());\n+\n+        await().atMost(MAX_WAIT_SECONDS, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+            try {\n+                return preExecs < TASK_SERVICE.read(TaskType.MACRO, MACRO_TASK_KEY, true).getExecutions().size();\n+            } catch (Exception e) {\n+                return false;\n+            }\n+        });\n+\n+        ExecTO exec = TASK_SERVICE.read(TaskType.MACRO, MACRO_TASK_KEY, true).getExecutions().get(preExecs);\n+        assertEquals(ExecStatus.SUCCESS.name(), exec.getStatus());\n+\n+        TestCommandArgs args = new TestCommandArgs();\n+        AnyObjectTO printer = ANY_OBJECT_SERVICE.read(args.getPrinterName());\n+        assertNotNull(printer);\n+        assertEquals(args.getParentRealm() + \"/\" + args.getRealmName(), printer.getRealm());\n+        assertFalse(REALM_SERVICE.list(printer.getRealm()).isEmpty());\n+    }\n+\n+    @Test\n+    public void cantExecute() {\n+        // 1. create Role for task execution\n+        RoleTO role = new RoleTO();\n+        role.setKey(\"new\" + getUUIDString());\n+        role.getRealms().add(\"/even\");\n+        role.getEntitlements().add(IdRepoEntitlement.TASK_EXECUTE);\n+        role = createRole(role);\n+        assertNotNull(role);\n+\n+        // 2. create User with such a Role granted\n+        UserCR userCR = UserITCase.getUniqueSample(\"cantrunncommand@test.org\");\n+        userCR.getRoles().add(role.getKey());\n+        UserTO userTO = createUser(userCR).getEntity();\n+        assertNotNull(userTO);\n+\n+        // 3. attempt to run the macro task -> fail\n+        TaskService taskService = CLIENT_FACTORY.create(\n+                userTO.getUsername(), \"password123\").getService(TaskService.class);\n+        try {\n+            taskService.execute(new ExecSpecs.Builder().key(MACRO_TASK_KEY).build());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+    }\n+}"},{"sha":"f8f4ab8b878f43bb20db5f90ced156b9a47b94cd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -361,8 +361,8 @@ public void deleteNonEmpty() {\n             REALM_SERVICE.delete(\"/even/two\");\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.AssociatedAnys, e.getType());\n-            assertEquals(3, e.getElements().size());\n+            assertEquals(ClientExceptionType.RealmContains, e.getType());\n+            assertEquals(5, e.getElements().size());\n         }\n     }\n "},{"sha":"bfa30eb202cf210407c189d085e5cfd420f882e3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RoleITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -159,7 +159,7 @@ public void dynMembership() {\n \n     @Test\n     public void issueSYNCOPE1472() {\n-        final DynRealmTO dynRealmTO = new DynRealmTO();\n+        DynRealmTO dynRealmTO = new DynRealmTO();\n         dynRealmTO.setKey(\"dynRealm\");\n         dynRealmTO.getDynMembershipConds().put(AnyTypeKind.USER.name(), \"username=~rossini\");\n         DYN_REALM_SERVICE.create(dynRealmTO);"},{"sha":"2a56c67886356ddda89184acf231d585afd1396d","filename":"fit/core-reference/src/test/resources/DoubleValueLogicActions.groovy","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -1,4 +1,3 @@\n-\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -22,7 +21,7 @@ import org.apache.syncope.common.lib.Attr\n import org.apache.syncope.common.lib.request.AnyCR\n import org.apache.syncope.common.lib.request.AnyUR\n import org.apache.syncope.common.lib.request.AttrPatch\n-import org.apache.syncope.core.provisioning.api.LogicActions\n+import org.apache.syncope.core.logic.api.LogicActions\n \n /**\n  * Class for integration tests: transform (by making it double) any attribute value for defined schema."},{"sha":"92a216aa3263bf8406a68708ab21dc2a19af29af","filename":"fit/core-reference/src/test/resources/GroovyCommand.groovy","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FGroovyCommand.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FGroovyCommand.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FGroovyCommand.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.apache.syncope.common.lib.command.CommandArgs\n+import org.apache.syncope.core.logic.SyncopeLogic\n+import org.apache.syncope.core.logic.api.Command\n+import org.springframework.beans.factory.annotation.Autowired\n+\n+class GroovyCommand implements Command<CommandArgs> {\n+\n+  @Autowired\n+  SyncopeLogic logic;\n+\n+  String run(CommandArgs args) {\n+    return \"\" + logic.isPwdResetAllowed()\n+  }\n+}"},{"sha":"b734f0e43374d749999fe84ca7c9d0a093bcc610","filename":"fit/core-reference/src/test/resources/TestPullRule.groovy","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -1,4 +1,3 @@\n-\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file"},{"sha":"cce78bb5e980acbb2017a490bd809f7b2d48046d","filename":"fit/core-reference/src/test/resources/TestPushRule.groovy","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPushRule.groovy?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -1,4 +1,3 @@\n-\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file"},{"sha":"a60c0e012d86b70503faadfc6675044688e07ed6","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -432,7 +432,7 @@ under the License.\n \n     <slf4j.version>1.7.36</slf4j.version>\n \n-    <elasticsearch.version>8.4.2</elasticsearch.version>\n+    <elasticsearch.version>8.4.3</elasticsearch.version>\n \n     <apacheds.version>2.0.0.AM26</apacheds.version>\n     <apachedirapi.version>2.0.0</apachedirapi.version>\n@@ -503,7 +503,7 @@ under the License.\n     <cargo.log>${log.directory}/cargo.log</cargo.log>\n     <cargo.output>${log.directory}/cargo-output.log</cargo.output>\n \n-    <tomcat.version>9.0.67</tomcat.version>\n+    <tomcat.version>9.0.68</tomcat.version>\n     <wildfly.version>26.1.2.Final</wildfly.version>\n     <payara.version>5.2022.3</payara.version>\n     <javax.faces.version>2.3.14</javax.faces.version>\n@@ -1161,7 +1161,7 @@ under the License.\n       <dependency>\n         <groupId>com.icegreen</groupId>\n         <artifactId>greenmail</artifactId>\n-        <version>1.6.10</version>\n+        <version>1.6.11</version>\n         <exclusions>\n           <exclusion>\n             <groupId>junit</groupId>"},{"sha":"9b9807dc50fe2a92f6665d2a48af3729fbd8e1df","filename":"src/main/asciidoc/images/consoleDashboard.png","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Fimages%2FconsoleDashboard.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Fimages%2FconsoleDashboard.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Fimages%2FconsoleDashboard.png?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff"},{"sha":"75f8dee09e7b81231735f206fbd66000183ace53","filename":"src/main/asciidoc/images/engagements.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Fimages%2Fengagements.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Fimages%2Fengagements.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Fimages%2Fengagements.png?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff"},{"sha":"68f89d44c2d1a241b0fd7cf4791328b66cb5bd36","filename":"src/main/asciidoc/reference-guide/concepts/notifications.adoc","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fnotifications.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fnotifications.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fnotifications.adoc?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -65,7 +65,7 @@ An event is identified by the following five coordinates:\n ** `PUSH`\n ** `CUSTOM`\n . category - the possible values depend on the selected type: for `LOGIC` the <<logic>> components available,\n-for `TASK` the various <<tasks-custom, Custom Tasks>> configured, for `PROPAGATION`, `PULL` and `PUSH` the defined Any Types\n+for `TASK` the various <<tasks-scheduled, Scheduled Tasks>> configured, for `PROPAGATION`, `PULL` and `PUSH` the defined Any Types\n . subcategory - completes category with external resource name, when selecting `PROPAGATION`, `PULL` or `PUSH`\n . event type - the final identification of the event; depends on the other coordinates\n . success or failure - whether the current event shall be considered in case of success or failure"},{"sha":"3da0cddaae3f12b5c6dcad13f31a14a259005062","filename":"src/main/asciidoc/reference-guide/concepts/realms.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Frealms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Frealms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Frealms.adoc?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -78,10 +78,10 @@ with LDAP and Active Directory.\n When Users, Groups or Any Objects get created, updated or deleted in a realm, custom logic can be invoked\n by associating the given Realm with one or more <<implementations,implementations>> of the\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java[LogicActions^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-api/src/main/java/org/apache/syncope/core/logic/api/LogicActions.java[LogicActions^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java[LogicActions^]\n+https://github.com/apache/syncope/blob/master/core/provisioning-api/src/main/java/org/apache/syncope/core/logic/api/LogicActions.java[LogicActions^]\n endif::[]\n interface.\n "},{"sha":"d06ffa23bb31f44af4fe0085b7e5fdbbafbaaa64","filename":"src/main/asciidoc/reference-guide/concepts/tasks.adoc","status":"modified","additions":36,"deletions":5,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftasks.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftasks.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftasks.adoc?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -16,6 +16,22 @@\n // specific language governing permissions and limitations\n // under the License.\n //\n+=== Commands\n+\n+A Command is defined via an <<implementations,Implementation>> of type `COMMAND`, providing a Java or Groovy class\n+for the \n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/api/Command.java[Command^],\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/api/Command.java[Command^],\n+endif::[]\n+interface, designed to optionally take parameters.\n+\n+The typical use case is to encapsulate, in a single logical unit, the equivalent of two or more <<rest,REST>> calls.\n+\n+Once defined, Commands can be executed via dedicated REST endpoints, or via <<engagements,Console UI>>.\n+\n === Tasks\n \n Tasks control the effective operations that are ongoing in the <<core>>.\n@@ -173,12 +189,27 @@ and are permanently saved - for later re-execution or for examining the executio\n  set on the related <<notifications,notification>>.\n ====\n \n-[[tasks-custom]]\n-==== Custom\n+[[tasks-macro]]\n+==== Macros\n+\n+Macro tasks are meant to group one or more <<commands>> into a given execution sequence, alongside with\n+arguments required to run.\n+\n+When defining a macro task, the following information must be provided:\n+\n+* commands to run, with their args\n+* <<realms,Realm>> for <<delegated-administration,delegated administration>> to restrict the set of users entitled to\n+list, update or execute the given macro task\n+* scheduling information:\n+** when to start\n+** http://www.quartz-scheduler.org/documentation/quartz-2.2.x/tutorials/crontrigger.html[cron expression^]\n+\n+[[tasks-scheduled]]\n+==== Scheduled\n \n-Custom tasks allow for the injection of logic into the <<core>> in the area of execution and scheduling.\n+Scheduled tasks allow for the injection of custom logic into the <<core>> in the area of execution and scheduling.\n \n-When defining a custom task, the following information must be provided:\n+When defining a scheduled task, the following information must be provided:\n \n * job delegate class: Java class extending\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n@@ -194,7 +225,7 @@ providing the custom logic to execute\n \n [TIP]\n ====\n-Custom tasks are ideal for implementing periodic checks or clean-up operations, possibly in coordination with other\n+Scheduled tasks are ideal for implementing periodic checks or clean-up operations, possibly in coordination with other\n components; some examples:\n \n * move users from \"pending delete\" to \"deleted\" status 15 days after they reached the \"pending delete\" status (requires"},{"sha":"5974410f11d91d40213a0f4caac7f2739e178429","filename":"src/main/asciidoc/reference-guide/configuration/highavailability.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fhighavailability.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fhighavailability.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconfiguration%2Fhighavailability.adoc?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -59,8 +59,8 @@ persistence.remoteCommitProvider=tcp(Addresses=10.0.1.10;10.0.1.11)\n ===== Quartz\n \n The http://www.quartz-scheduler.org[Quartz^] scheduler is largely used within <<core>> to schedule the execution\n-of jobs, including <<tasks-pull,pull>>, <<tasks-push,push>>, <<tasks-notification,notification>> and \n-<<tasks-custom,custom>> tasks, and <<reportlets,reportlets>>.\n+of jobs, including <<tasks-pull,pull>>, <<tasks-push,push>>, <<tasks-notification,notification>>, <<tasks-macro,macro>> and \n+<<tasks-scheduled,scheduled>> tasks, and <<reportlets,reportlets>>.\n \n By default, Quartz is configured for\n http://www.quartz-scheduler.org/documentation/quartz-2.2.x/configuration/ConfigJDBCJobStoreClustering.html[clustering^],"},{"sha":"e039d5179c1dc18e233360cb672e19c8451e2187","filename":"src/main/asciidoc/reference-guide/usage/adminconsole.adoc","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fadminconsole.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fadminconsole.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fadminconsole.adoc?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -101,6 +101,14 @@ The realms page provides the designated administrators with the power to manage\n \n image::realmsUser.png[console-realms-user]\n \n+[discrete]\n+===== Engagements\n+\n+From the engagements page it is possible to administer <<tasks-scheduled,scheduled tasks>>, <<commands,commands>> and\n+<<tasks-macro,macros>>.\n+\n+image::engagements.png[console-engagements]\n+\n [[console-reports]]\n [discrete]\n ===== Reports"},{"sha":"de73c5de5e7a028a71d89155ed4849f69f739e4a","filename":"src/main/asciidoc/reference-guide/usage/customization.adoc","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/782cb9c1479bc00a57cb9ef14757b930af4011ff/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fusage%2Fcustomization.adoc?ref=782cb9c1479bc00a57cb9ef14757b930af4011ff","patch":"@@ -252,7 +252,9 @@ components:\n * <<propagationactions,propagation>>, <<pushactions,push>>, <<pullactions,pull>> and <<logicactions,logic>> actions\n * <<push-correlation-rules,push>> / <<pull-correlation-rules,pull>> correlation rules\n * <<pull-mode,reconciliation filter builders>>\n-* <<tasks-custom,custom tasks>>\n+* <<commands,commands>>\n+* <<tasks-macro,macros>>\n+* <<tasks-scheduled,scheduled tasks>>\n * <<reportlets,reportlets>>\n * <<account-rules,account>> and <<password-rules,password>> rules for policies\n * <<plain,plain schema validators>>\n@@ -379,10 +381,10 @@ as explained <<extending-configuration,above>>.\n \n It is also required to initialize the Elasticsearch indexes: add a new Java <<implementations,implementation>> for\n `TASKJOB_DELEGATE` and use `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` as class. +\n-Then, create a new <<tasks-custom, custom task>>, select the implementation just created as job delegate and execute it.\n+Then, create a new <<tasks-scheduled, schedyled task>>, select the implementation just created as job delegate and execute it.\n \n [TIP]\n-The `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` custom task created above is not meant for\n+The `org.apache.syncope.core.provisioning.java.job.ElasticsearchReindex` task created above is not meant for\n scheduled execution; rather, it can be run every time you want to blank and re-create the Elasticsearch indexes\n starting from Syncope's users, groups and any objects.\n "}]}