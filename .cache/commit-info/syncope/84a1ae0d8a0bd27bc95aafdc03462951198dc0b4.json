{"sha":"84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg0YTFhZTBkOGEwYmQyN2JjOTVhYWZkYzAzNDYyOTUxMTk4ZGMwYjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-20T12:01:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-20T12:10:41Z"},"message":"Adding GoogleApps support option","tree":{"sha":"995a191f5b84d3f8687e9c4ad45084ee7f5f9a97","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/995a191f5b84d3f8687e9c4ad45084ee7f5f9a97"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f292d86ab845a7d0a50327a4eaf1179352ce2f95","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f292d86ab845a7d0a50327a4eaf1179352ce2f95","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f292d86ab845a7d0a50327a4eaf1179352ce2f95"}],"stats":{"total":356,"additions":356,"deletions":0},"files":[{"sha":"1da3578ce723702eb0604379a2aaa427a2ead7cb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/GoogleAppsPropagationActions.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java?ref=84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","patch":"@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.propagation;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * This class is required during setup of an External Resource based on the ConnId\n+ * <a href=\"https://github.com/Tirasa/ConnIdGoogleAppsBundle\">GoogleApps connector</a>.\n+ *\n+ * It manages:\n+ * <ol>\n+ * <li>the id provided by Google, which will need to be used for all subsequent operations</li>\n+ * <li>the e-mail address</li>\n+ * </ol>\n+ */\n+public class GoogleAppsPropagationActions implements PropagationActions {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPropagationActions.class);\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    protected PlainAttrValueDAO plainAttrValueDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    protected String getEmailSchema() {\n+        return \"email\";\n+    }\n+\n+    protected String getGoogleAppsIdSchema() {\n+        return \"GoogleAppsId\";\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n+        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n+            return;\n+        }\n+        if (AnyTypeKind.USER != task.getAnyTypeKind()) {\n+            return;\n+        }\n+\n+        Set<Attribute> attrs = new HashSet<>(task.getAttributes());\n+\n+        // ensure to set __NAME__ value to user's email (e.g. primary e-mail address)\n+        User user = userDAO.find(task.getEntityKey());\n+        if (user == null) {\n+            LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n+        } else {\n+            Name name = AttributeUtil.getNameFromAttributes(attrs);\n+            if (name != null) {\n+                attrs.remove(name);\n+            }\n+            attrs.add(new Name(user.getPlainAttr(getEmailSchema()).get().getValuesAsStrings().get(0)));\n+        }\n+\n+        task.setAttributes(attrs);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void after(final PropagationTask task, final TaskExec execution, final ConnectorObject afterObj) {\n+        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n+            return;\n+        }\n+        if (AnyTypeKind.USER != task.getAnyTypeKind()) {\n+            return;\n+        }\n+\n+        User user = userDAO.find(task.getEntityKey());\n+        if (user == null) {\n+            LOG.error(\"Could not find user {}, skipping\", task.getEntityKey());\n+        } else {\n+            boolean modified = false;\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n+\n+            PlainSchema googleAppsId = plainSchemaDAO.find(getGoogleAppsIdSchema());\n+            if (googleAppsId == null) {\n+                LOG.error(\"Could not find schema {}, skipping\", getGoogleAppsIdSchema());\n+            } else {\n+                // set back the __UID__ received by Google\n+                UPlainAttr attr = user.getPlainAttr(getGoogleAppsIdSchema()).orElse(null);\n+                if (attr == null) {\n+                    attr = entityFactory.newEntity(UPlainAttr.class);\n+                    attr.setSchema(googleAppsId);\n+                    attr.setOwner(user);\n+                    user.add(attr);\n+\n+                    try {\n+                        attr.add(afterObj.getUid().getUidValue(), anyUtils);\n+                        modified = true;\n+                    } catch (InvalidPlainAttrValueException e) {\n+                        LOG.error(\"Invalid value for attribute {}: {}\",\n+                                googleAppsId.getKey(), afterObj.getUid().getUidValue(), e);\n+                    }\n+                } else {\n+                    LOG.debug(\"User {} has already {} assigned: {}\",\n+                            user, googleAppsId.getKey(), attr.getValuesAsStrings());\n+                }\n+            }\n+\n+            if (modified) {\n+                userDAO.save(user);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"7afbada3a0ef1fb2e1359129ee6be1ba118bdc22","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java","status":"added","additions":173,"deletions":0,"changes":173,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FGoogleAppsPullActions.java?ref=84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","patch":"@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * This class is required during setup of an External Resource based on the ConnId\n+ * <a href=\"https://github.com/Tirasa/ConnIdGoogleAppsBundle\">GoogleApps connector</a>.\n+ *\n+ * It manages:\n+ * <ol>\n+ * <li>the id provided by Google in response to create, which will need to be used for all subsequent operations</li>\n+ * <li>the e-mail address</li>\n+ * </ol>\n+ */\n+public class GoogleAppsPullActions implements PullActions {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPullActions.class);\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private final Map<String, String> googleAppsIds = new HashMap<>();\n+\n+    protected String getEmailSchema() {\n+        return \"email\";\n+    }\n+\n+    protected String getGoogleAppsIdSchema() {\n+        return \"GoogleAppsId\";\n+    }\n+\n+    @Override\n+    public SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity) throws JobExecutionException {\n+\n+        if (!(entity instanceof UserTO)) {\n+            return delta;\n+        }\n+\n+        UserTO userTO = (UserTO) entity;\n+        if (userTO.getUsername() == null) {\n+            userTO.setUsername(delta.getObject().getName().getNameValue());\n+        }\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <P extends AnyPatch> SyncDelta beforeUpdate(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity,\n+            final P anyPatch) throws JobExecutionException {\n+\n+        if (!(anyPatch instanceof UserPatch)) {\n+            return delta;\n+        }\n+\n+        UserPatch userPatch = (UserPatch) anyPatch;\n+        if (userPatch.getUsername() == null) {\n+            userPatch.setUsername(new StringReplacePatchItem.Builder().\n+                    value(delta.getObject().getName().getNameValue()).build());\n+        }\n+\n+        return delta;\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void after(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity,\n+            final ProvisioningReport result) throws JobExecutionException {\n+\n+        if (!(entity instanceof UserTO)) {\n+            return;\n+        }\n+\n+        googleAppsIds.put(entity.getKey(), delta.getUid().getUidValue());\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n+        googleAppsIds.entrySet().forEach((entry) -> {\n+            User user = userDAO.find(entry.getKey());\n+            if (user == null) {\n+                LOG.error(\"Could not find user {}, skipping\", entry.getKey());\n+            } else {\n+                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n+\n+                // 1. stores the __UID__ received by Google\n+                PlainSchema googleAppsId = plainSchemaDAO.find(getGoogleAppsIdSchema());\n+                if (googleAppsId == null) {\n+                    LOG.error(\"Could not find schema googleAppsId, skipping\");\n+                } else {\n+                    UPlainAttr attr = user.getPlainAttr(getGoogleAppsIdSchema()).orElse(null);\n+                    if (attr == null) {\n+                        attr = entityFactory.newEntity(UPlainAttr.class);\n+                        attr.setSchema(googleAppsId);\n+                        attr.setOwner(user);\n+                        user.add(attr);\n+\n+                        try {\n+                            attr.add(entry.getValue(), anyUtils);\n+                            userDAO.save(user);\n+                        } catch (InvalidPlainAttrValueException e) {\n+                            LOG.error(\"Invalid value for attribute {}: {}\",\n+                                    googleAppsId.getKey(), entry.getValue(), e);\n+                        }\n+                    } else {\n+                        LOG.debug(\"User {} has already a googleAppsId assigned: {}\", user, attr.getValuesAsStrings());\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+}"},{"sha":"cbb292d484853ce771c7682601d991c7064e151c","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","patch":"@@ -363,6 +363,7 @@ under the License.\n     <connid.csvdir.version>0.8.6</connid.csvdir.version>\n     <connid.ldap.version>1.5.2</connid.ldap.version>\n     <connid.ad.version>1.3.4</connid.ad.version>\n+    <connid.googleapps.version>1.4.1-SNAPSHOT</connid.googleapps.version>\n \n     <cxf.version>3.2.0</cxf.version>\n \n@@ -1719,6 +1720,11 @@ under the License.\n                 <artifactId>net.tirasa.connid.bundles.ad</artifactId>\n                 <version>${connid.ad.version}</version>\n               </artifactItem>\n+              <artifactItem>\n+                <groupId>net.tirasa.connid.bundles</groupId>\n+                <artifactId>net.tirasa.connid.bundles.googleapps</artifactId>\n+                <version>${connid.googleapps.version}</version>\n+              </artifactItem>\n             </artifactItems>\n           </configuration>\n         </plugin>"},{"sha":"9c066f13de4c43cf997a514b28d01dc66ebaf119","filename":"src/main/asciidoc/reference-guide/concepts/provisioning/propagation.adoc","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpropagation.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpropagation.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpropagation.adoc?ref=84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","patch":"@@ -110,4 +110,13 @@ endif::[]\n the cipher algorithm associated with the password must match the value of `Password cipher algorithm` for the \n https://connid.atlassian.net/wiki/display/BASE/Database+Table#DatabaseTable-ConfigurationProperties[DatabaseTable connector bundle^].\n \n+| \n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/GoogleAppsPropagationActions.java[GoogleAppsPropagationActions^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/tree/master/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/GoogleAppsPropagationActions.java[GoogleAppsPropagationActions^]\n+endif::[]\n+| Required for setup of an External Resource based on the https://connid.atlassian.net/wiki/display/BASE/Google+Apps#GoogleApps-Configuration[ConnId GoogleApps connector bundle^].\n+\n |==="},{"sha":"8f5f9c72fba1164b44468281853e86951b47e401","filename":"src/main/asciidoc/reference-guide/concepts/provisioning/pull.adoc","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpull.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/84a1ae0d8a0bd27bc95aafdc03462951198dc0b4/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpull.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fprovisioning%2Fpull.adoc?ref=84a1ae0d8a0bd27bc95aafdc03462951198dc0b4","patch":"@@ -134,4 +134,13 @@ endif::[]\n the cipher algorithm associated with the password must match the value of `Password cipher algorithm` for the \n https://connid.atlassian.net/wiki/display/BASE/Database+Table#DatabaseTable-ConfigurationProperties[DatabaseTable connector bundle^].\n \n+|\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java[GoogleAppsPullActions^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/tree/master/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/GoogleAppsPullActions.java[GoogleAppsPullActions^]\n+endif::[]\n+| Required for setup of an External Resource based on the https://connid.atlassian.net/wiki/display/BASE/Google+Apps#GoogleApps-Configuration[ConnId GoogleApps connector bundle^].\n+\n |==="}]}