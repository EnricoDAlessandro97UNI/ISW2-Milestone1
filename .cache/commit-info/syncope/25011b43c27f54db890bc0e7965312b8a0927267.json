{"sha":"25011b43c27f54db890bc0e7965312b8a0927267","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1MDExYjQzYzI3ZjU0ZGI4OTBiYzBlNzk2NTMxMmI4YTA5MjcyNjc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-18T14:29:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-18T14:29:54Z"},"message":"User search with native query implemented\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246734 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c5280a4dd44570a67648b59dba5457387b9e9bc2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c5280a4dd44570a67648b59dba5457387b9e9bc2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/25011b43c27f54db890bc0e7965312b8a0927267","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25011b43c27f54db890bc0e7965312b8a0927267","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/25011b43c27f54db890bc0e7965312b8a0927267","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25011b43c27f54db890bc0e7965312b8a0927267/comments","author":null,"committer":null,"parents":[{"sha":"e0ba7481ffd8f438916358147dba284b5b20a7ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e0ba7481ffd8f438916358147dba284b5b20a7ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e0ba7481ffd8f438916358147dba284b5b20a7ad"}],"stats":{"total":967,"additions":769,"deletions":198},"files":[{"sha":"9d8ecf4860f55a65c1881899518877517abc59af","filename":"client/src/main/java/org/syncope/client/search/PaginatedResult.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedResult.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -18,14 +18,11 @@\n import org.syncope.client.AbstractBaseBean;\n import org.syncope.client.to.UserTO;\n \n-/**\n- * Search condition to be applied when comparing attribute values.\n- */\n public class PaginatedResult extends AbstractBaseBean {\n \n     private List<UserTO> records;\n \n-    private Long totalRecords;\n+    private int totalRecords;\n \n     private int recordsInPage;\n \n@@ -65,11 +62,11 @@ public void setRecordsInPage(int recordsInPage) {\n         this.recordsInPage = recordsInPage;\n     }\n \n-    public Long getTotalRecords() {\n+    public int getTotalRecords() {\n         return totalRecords;\n     }\n \n-    public void setTotalRecords(Long totalRecords) {\n+    public void setTotalRecords(int totalRecords) {\n         this.totalRecords = totalRecords;\n     }\n }"},{"sha":"8029e5d080ae4d9b6ba4f0a7f4bec7b223144584","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":20,"deletions":18,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -234,7 +234,7 @@ protected Object load() {\n                 if (incrementUserViewLink != null && decrementUserViewLink != null\n                         && firstPageLink != null && lastPageLink != null) {\n                     int totalPages = (int) Math.ceil(\n-                            paginatedUsers.getTotalRecords().doubleValue()\n+                            paginatedUsers.getTotalRecords()\n                             / new Double(paginatedUsers.getPageSize()));\n \n                     if (currentViewPage == totalPages) {\n@@ -411,8 +411,8 @@ public void onClick(AjaxRequestTarget target) {\n             }\n         };\n \n-        int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords().\n-                doubleValue() / new Double(paginatedUsers.getPageSize()));\n+        int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords()\n+                / new Double(paginatedUsers.getPageSize()));\n \n         firstPageLink = new AjaxLink(\"firstPageLink\") {\n \n@@ -433,9 +433,9 @@ public void onClick(AjaxRequestTarget target) {\n \n             @Override\n             public void onClick(AjaxRequestTarget target) {\n-                int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords().\n-                        doubleValue() / new Double(\n-                        paginatedUsers.getPageSize()));\n+                int totalPages = (int) Math.ceil(\n+                        paginatedUsers.getTotalRecords()\n+                        / new Double(paginatedUsers.getPageSize()));\n                 currentViewPage = totalPages;\n \n                 //Update pageLinks on paginator\n@@ -885,12 +885,15 @@ protected Object load() {\n                             nodeCond, currentSearchPage, paginatorSearchRows);\n \n                     //Refresh links just after the selecting page click\n-                    if (incrementUserLinkSearch != null && decrementUserLinkSearch != null\n-                            && firstPageLinkSearch != null && lastPageLinkSearch != null) {\n+                    if (incrementUserLinkSearch != null\n+                            && decrementUserLinkSearch != null\n+                            && firstPageLinkSearch != null\n+                            && lastPageLinkSearch != null) {\n+\n                         int totalPages = (int) Math.ceil(\n-                                paginatedSearchUsers.getTotalRecords().\n-                                doubleValue()\n-                                / new Double(paginatedSearchUsers.getPageSize()));\n+                                paginatedSearchUsers.getTotalRecords()\n+                                / new Double(\n+                                paginatedSearchUsers.getPageSize()));\n \n                         if (currentSearchPage == totalPages) {\n                             incrementUserLinkSearch.setEnabled(false);\n@@ -1040,7 +1043,7 @@ public void onClick(AjaxRequestTarget target) {\n         int totalSearchPages = 0;\n         if (paginatedSearchUsers != null) {\n             totalSearchPages = (int) Math.ceil(paginatedSearchUsers.\n-                    getTotalRecords().doubleValue() / new Double(paginatedSearchUsers.\n+                    getTotalRecords() / new Double(paginatedSearchUsers.\n                     getPageSize()));\n         }\n \n@@ -1064,7 +1067,7 @@ public void onClick(AjaxRequestTarget target) {\n             @Override\n             public void onClick(AjaxRequestTarget target) {\n                 int totalPages = (int) Math.ceil(paginatedSearchUsers.\n-                        getTotalRecords().doubleValue() / new Double(\n+                        getTotalRecords() / new Double(\n                         paginatedSearchUsers.getPageSize()));\n                 currentSearchPage = totalPages;\n \n@@ -1297,8 +1300,8 @@ public PaginatedResult getPaginatedUsers(int page, int size) {\n      * Refresh paginator after page link click.\n      */\n     public List<Integer> getPaginatorIndexes() {\n-        int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords().\n-                doubleValue() / new Double(paginatedUsers.getPageSize()));\n+        int totalPages = (int) Math.ceil(paginatedUsers.getTotalRecords()\n+                / new Double(paginatedUsers.getPageSize()));\n \n         //Build pages link for paginator\n         List<Integer> pageIdList = new ArrayList<Integer>();\n@@ -1559,9 +1562,8 @@ public List<Integer> getPaginatorSearchIndexes() {\n         int totalPages;\n \n         if (paginatedSearchUsers != null) {\n-            totalPages = (int) Math.ceil(paginatedSearchUsers.getTotalRecords().\n-                    doubleValue() / new Double(\n-                    paginatedSearchUsers.getPageSize()));\n+            totalPages = (int) Math.ceil(paginatedSearchUsers.getTotalRecords()\n+                    / new Double(paginatedSearchUsers.getPageSize()));\n         } else {\n             totalPages = 0;\n         }"},{"sha":"6889ed37427556f384dc60ee8cb1b59458e8662e","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -34,7 +34,7 @@ SyncopeUser findByAttrUniqueValue(String schemaName,\n \n     List<SyncopeUser> findAll(int page, int itemsPerPage);\n \n-    Long count();\n+    Integer count();\n \n     SyncopeUser save(SyncopeUser user)\n             throws InvalidEntityException;"},{"sha":"7a3d90142b4932a8cbcd4b8e8eaafe6357605019","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -21,8 +21,20 @@\n \n public interface UserSearchDAO extends DAO {\n \n+    /**\n+     * @param searchCondition the search condition\n+     * @param searchCondition\n+     * @return the list of users matchin the given search condition\n+     */\n     List<SyncopeUser> search(NodeCond searchCondition);\n \n+    /**\n+     * @param searchCondition the search condition\n+     * @param page position of the first result, start from 1\n+     * @param itemsPerPage number of results per page\n+     * @param paginatedResult result to be sent to the REST caller\n+     * @return the list of users matchin the given search condition\n+     */\n     List<SyncopeUser> search(NodeCond searchCondition,\n             int page, int itemsPerPage, PaginatedResult paginatedResult);\n }"},{"sha":"279c1c495b88e9a1daf9d58667bdc4685ed580d4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractUserSearchDAOImpl.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractUserSearchDAOImpl.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -16,13 +16,11 @@\n \n import java.util.Collections;\n import java.util.List;\n-import org.springframework.stereotype.Repository;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n \n-@Repository\n public abstract class AbstractUserSearchDAOImpl extends AbstractDAOImpl\n         implements UserSearchDAO {\n \n@@ -37,29 +35,29 @@ public List<SyncopeUser> search(final NodeCond searchCondition,\n             final int itemsPerPage,\n             final PaginatedResult paginatedResult) {\n \n+        List<SyncopeUser> result;\n+\n         LOG.debug(\"Search condition:\\n{}\", searchCondition);\n+        if (!searchCondition.checkValidity()) {\n+            LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n+\n+            result = Collections.EMPTY_LIST;\n+        }\n \n-        List<SyncopeUser> result;\n         try {\n-            result = doSearch(searchCondition);\n+            result = doSearch(searchCondition,\n+                    page, itemsPerPage, paginatedResult);\n         } catch (Throwable t) {\n             LOG.error(\"While searching users\", t);\n \n             result = Collections.EMPTY_LIST;\n         }\n \n-        if (paginatedResult != null) {\n-            paginatedResult.setTotalRecords(new Long((long) result.size()));\n-        }\n-\n-        // TODO: temporary solution to the paginated search\n-        int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n-\n-        int to = itemsPerPage <= 0 || from + itemsPerPage > result.size()\n-                ? result.size() : from + itemsPerPage;\n-\n-        return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n+        return result;\n     }\n \n-    protected abstract List<SyncopeUser> doSearch(final NodeCond nodeCond);\n+    protected abstract List<SyncopeUser> doSearch(final NodeCond nodeCond,\n+            final int page,\n+            final int itemsPerPage,\n+            final PaginatedResult paginatedResult);\n }"},{"sha":"e855b3cb1b4e02267e33a0d7d991a6e918f2be54","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -19,6 +19,7 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -98,7 +99,8 @@ public List<SyncopeUser> findByAttrValue(final String schemaName,\n                 attrValue.getBooleanValue() == null\n                 ? null\n                 : attrValue.getBooleanAsInteger(attrValue.getBooleanValue()));\n-        query.setParameter(\"dateValue\", attrValue.getDateValue());\n+        query.setParameter(\"dateValue\", attrValue.getDateValue(),\n+                TemporalType.TIMESTAMP);\n         query.setParameter(\"longValue\", attrValue.getLongValue());\n         query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n \n@@ -157,12 +159,11 @@ public final List<SyncopeUser> findAll(\n     }\n \n     @Override\n-    public final Long count() {\n-\n+    public final Integer count() {\n         final Query query = entityManager.createQuery(\n                 \"SELECT count(e.id) FROM SyncopeUser e\");\n \n-        return (Long) query.getSingleResult();\n+        return ((Long) query.getSingleResult()).intValue();\n     }\n \n     @Override"},{"sha":"cf8972287abc7350508b484e1d824d9003f83a0c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOCriteriaImpl.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOCriteriaImpl.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -28,6 +28,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n@@ -43,7 +44,27 @@ public class UserSearchDAOCriteriaImpl extends AbstractUserSearchDAOImpl\n     private SchemaDAO schemaDAO;\n \n     @Override\n-    protected List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n+    protected List<SyncopeUser> doSearch(final NodeCond nodeCond,\n+            final int page,\n+            final int itemsPerPage,\n+            final PaginatedResult paginatedResult) {\n+\n+        List<SyncopeUser> result = doSearch(nodeCond);\n+\n+        if (paginatedResult != null) {\n+            paginatedResult.setTotalRecords(result.size());\n+        }\n+\n+        // TODO: temporary solution to the paginated search\n+        int from = itemsPerPage * (page <= 0 ? 0 : page - 1);\n+\n+        int to = itemsPerPage <= 0 || from + itemsPerPage > result.size()\n+                ? result.size() : from + itemsPerPage;\n+\n+        return from > to ? Collections.EMPTY_LIST : result.subList(from, to);\n+    }\n+\n+    private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n         List<SyncopeUser> result;\n         List<SyncopeUser> rightResult;\n "},{"sha":"20d08db83df91a75d3ddadc4a6859bccfe30dc7b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAONativeImpl.java","status":"modified","additions":356,"deletions":2,"changes":358,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAONativeImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAONativeImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAONativeImpl.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -14,18 +14,372 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.Set;\n+import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n+import javax.validation.ValidationException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.persistence.beans.user.USchema;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n+import org.syncope.types.SchemaType;\n \n @Repository\n public class UserSearchDAONativeImpl extends AbstractUserSearchDAOImpl\n         implements UserSearchDAO {\n \n+    static final private String EMPTY_ATTR_QUERY =\n+            \"SELECT user_id FROM user_search_attr WHERE 1=2\";\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n+    private final Random random;\n+\n+    public UserSearchDAONativeImpl() {\n+        super();\n+\n+        random = new Random(Calendar.getInstance().getTimeInMillis());\n+    }\n+\n+    private Integer setParameter(final Random random,\n+            final Map<Integer, Object> parameters,\n+            final Object parameter) {\n+\n+        Integer key;\n+        synchronized (parameters) {\n+            do {\n+                key = random.nextInt(Integer.MAX_VALUE);\n+            } while (parameters.containsKey(key));\n+\n+            parameters.put(key, parameter);\n+        }\n+\n+        return key;\n+    }\n+\n+    private void fillWithParameters(final Query query,\n+            final Map<Integer, Object> parameters) {\n+\n+        for (Integer key : parameters.keySet()) {\n+            if (parameters.get(key) instanceof Date) {\n+                query.setParameter(\"param\" + key,\n+                        (Date) parameters.get(key), TemporalType.TIMESTAMP);\n+            } else {\n+                query.setParameter(\"param\" + key, parameters.get(key));\n+            }\n+        }\n+    }\n+\n     @Override\n-    protected List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n-        return null;\n+    protected List<SyncopeUser> doSearch(final NodeCond nodeCond,\n+            final int page,\n+            final int itemsPerPage,\n+            final PaginatedResult paginatedResult) {\n+\n+        Map<Integer, Object> parameters = Collections.synchronizedMap(\n+                new HashMap<Integer, Object>());\n+\n+        StringBuilder queryString = getQuery(nodeCond, parameters);\n+\n+        Query query = entityManager.createNativeQuery(queryString.toString());\n+        // @page starts from 1, while setFirtResult() starts from 0\n+        if (page >= 1) {\n+            query.setFirstResult(page - 1);\n+        }\n+        if (itemsPerPage >= 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+        fillWithParameters(query, parameters);\n+\n+        LOG.debug(\"Native query\\n{}\\nwith parameters\\n{}\",\n+                query, parameters);\n+\n+        // Avoiding duplicates (set)\n+        Set<Number> userIds = new HashSet<Number>();\n+        userIds.addAll(query.getResultList());\n+\n+        List<SyncopeUser> result =\n+                new ArrayList<SyncopeUser>(userIds.size());\n+\n+        SyncopeUser user;\n+        for (Number userId : userIds) {\n+            user = userDAO.find(userId.longValue());\n+            if (user == null) {\n+                LOG.error(\"Could not find user with id {}, \"\n+                        + \"even though returned by the native query\", userId);\n+            } else {\n+                result.add(user);\n+            }\n+        }\n+\n+        if (paginatedResult != null) {\n+            queryString.insert(0, \"SELECT COUNT(user_id) WHERE user_id IN (\");\n+            queryString.append(\")\");\n+\n+            Query countQuery =\n+                    entityManager.createNativeQuery(queryString.toString());\n+            fillWithParameters(countQuery, parameters);\n+\n+            LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\",\n+                    countQuery, parameters);\n+\n+            paginatedResult.setTotalRecords(\n+                    ((Long) countQuery.getSingleResult()).intValue());\n+\n+            LOG.debug(\"Native count query result: {}\",\n+                    paginatedResult.getTotalRecords());\n+        }\n+\n+        return result;\n+    }\n+\n+    private StringBuilder getQuery(final NodeCond nodeCond,\n+            final Map<Integer, Object> parameters) {\n+\n+        StringBuilder query = new StringBuilder();\n+\n+        switch (nodeCond.getType()) {\n+\n+            case LEAF:\n+            case NOT_LEAF:\n+                if (nodeCond.getMembershipCond() != null) {\n+                    query.append(getQuery(nodeCond.getMembershipCond(),\n+                            nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n+                            parameters));\n+                }\n+                if (nodeCond.getAttributeCond() != null) {\n+                    query.append(getQuery(nodeCond.getAttributeCond(),\n+                            nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n+                            parameters));\n+                }\n+                break;\n+\n+            case AND:\n+                query.append(getQuery(nodeCond.getLeftNodeCond(),\n+                        parameters)).\n+                        append(\" INTERSECT \").\n+                        append(getQuery(nodeCond.getRightNodeCond(),\n+                        parameters));\n+                break;\n+\n+            case OR:\n+                query.append(getQuery(nodeCond.getLeftNodeCond(),\n+                        parameters)).\n+                        append(\" UNION \").\n+                        append(getQuery(nodeCond.getRightNodeCond(),\n+                        parameters));\n+                break;\n+\n+            default:\n+        }\n+\n+        return query;\n+    }\n+\n+    private String getQuery(final MembershipCond cond,\n+            final boolean not,\n+            final Map<Integer, Object> parameters) {\n+\n+        StringBuilder query = new StringBuilder(\n+                \"SELECT DISTINCT user_id FROM user_search_membership WHERE \");\n+\n+        if (not) {\n+            query.append(\"user_id NOT IN (\").\n+                    append(\"SELECT DISTINCT user_id \").\n+                    append(\"FROM user_search_membership WHERE \");\n+        }\n+\n+        Integer paramKey;\n+        if (cond.getRoleId() != null) {\n+            paramKey = setParameter(random, parameters, cond.getRoleId());\n+            query.append(\"role_id=:param\").append(paramKey);\n+        } else if (cond.getRoleName() != null) {\n+            paramKey = setParameter(random, parameters, cond.getRoleName());\n+            query.append(\"role_name=:param\").append(paramKey);\n+        }\n+\n+        if (not) {\n+            query.append(\")\");\n+        }\n+\n+\n+        return query.toString();\n+    }\n+\n+    private String getFieldName(final SchemaType type) {\n+        String result;\n+\n+        switch (type) {\n+            case Boolean:\n+                result = \"booleanvalue\";\n+                break;\n+\n+            case Date:\n+                result = \"datevalue\";\n+                break;\n+\n+            case Double:\n+                result = \"doublevalue\";\n+                break;\n+\n+            case Long:\n+                result = \"longvalue\";\n+                break;\n+\n+            case String:\n+                result = \"stringvalue\";\n+                break;\n+\n+            default:\n+                result = null;\n+        }\n+\n+        return result;\n+    }\n+\n+    private String getQuery(final AttributeCond cond,\n+            final boolean not,\n+            final Map<Integer, Object> parameters) {\n+\n+        USchema schema = schemaDAO.find(cond.getSchema(), USchema.class);\n+        if (schema == null) {\n+            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        UAttrValue attrValue = new UAttrValue();\n+        try {\n+            if (cond.getType() != AttributeCond.Type.LIKE) {\n+                attrValue = schema.getValidator().\n+                        getValue(cond.getExpression(), attrValue);\n+            }\n+        } catch (ValidationException e) {\n+            LOG.error(\"Could not validate expression '\"\n+                    + cond.getExpression() + \"'\", e);\n+            return EMPTY_ATTR_QUERY;\n+        }\n+\n+        if (not) {\n+            switch (cond.getType()) {\n+\n+                case ISNULL:\n+                    cond.setType(AttributeCond.Type.ISNOTNULL);\n+                    break;\n+\n+                case ISNOTNULL:\n+                    cond.setType(AttributeCond.Type.ISNULL);\n+                    break;\n+\n+                case GE:\n+                    cond.setType(AttributeCond.Type.LT);\n+                    break;\n+\n+                case GT:\n+                    cond.setType(AttributeCond.Type.LE);\n+                    break;\n+\n+                case LE:\n+                    cond.setType(AttributeCond.Type.GT);\n+                    break;\n+\n+                case LT:\n+                    cond.setType(AttributeCond.Type.GE);\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        StringBuilder query = new StringBuilder(\n+                \"SELECT DISTINCT user_id FROM user_search_attr WHERE \").append(\n+                \"schema_name='\").append(schema.getName());\n+\n+        Integer paramKey;\n+        switch (cond.getType()) {\n+\n+            case ISNULL:\n+                query.append(\"' AND \").append(getFieldName(schema.getType())).\n+                        append(\" IS NULL\");\n+                break;\n+\n+            case ISNOTNULL:\n+                query.append(\"' AND \").append(getFieldName(schema.getType())).\n+                        append(\" IS NOT NULL\");\n+                break;\n+\n+            case LIKE:\n+                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                if (not) {\n+                    query.append(\" NOT \");\n+                }\n+                query.append(\" LIKE '\").append(cond.getExpression()).\n+                        append(\"'\");\n+                break;\n+\n+            case EQ:\n+                paramKey = setParameter(random, parameters,\n+                        attrValue.getValue());\n+                query.append(\"' AND \").append(getFieldName(schema.getType()));\n+                if (not) {\n+                    query.append(\"<>\");\n+                } else {\n+                    query.append(\"=\");\n+                }\n+                query.append(\":param\").append(paramKey);\n+                break;\n+\n+            case GE:\n+                paramKey = setParameter(random, parameters,\n+                        attrValue.getValue());\n+                query.append(\"' AND \").append(getFieldName(schema.getType())).\n+                        append(\">=:param\").append(paramKey);\n+                break;\n+\n+            case GT:\n+                paramKey = setParameter(random, parameters,\n+                        attrValue.getValue());\n+                query.append(\"' AND \").append(getFieldName(schema.getType())).\n+                        append(\">:param\").append(paramKey);\n+                break;\n+\n+            case LE:\n+                paramKey = setParameter(random, parameters,\n+                        attrValue.getValue());\n+                query.append(\"' AND \").append(getFieldName(schema.getType())).\n+                        append(\"<=:param\").append(paramKey);\n+                break;\n+\n+            case LT:\n+                paramKey = setParameter(random, parameters,\n+                        attrValue.getValue());\n+                query.append(\"' AND \").append(getFieldName(schema.getType())).\n+                        append(\"<:param\").append(paramKey);\n+                break;\n+\n+            default:\n+        }\n+\n+        return query.toString();\n     }\n }"},{"sha":"ff2b324a5b047315aa10c0b871337ab46fa251ab","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -287,8 +287,7 @@ public PaginatedResult paginatedList(\n         paginatedResult.setPageNumber(page);\n         paginatedResult.setPageSize(size);\n \n-        Long totalUsers = userDAO.count();\n-        paginatedResult.setTotalRecords(totalUsers);\n+        paginatedResult.setTotalRecords(userDAO.count());\n \n         List<SyncopeUser> users = userDAO.findAll(page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());"},{"sha":"c36ec0d089364a58fa7bcb41316c751b494b8d3d","filename":"core/src/main/resources/views.xml","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -16,13 +16,10 @@\n <properties>\n     <comment>Views</comment>\n     <entry key=\"user_search_attr\">\n-CREATE MATERIALIZED VIEW user_search_attr\n-PARALLEL\n-BUILD IMMEDIATE\n-REFRESH FORCE\n+CREATE VIEW user_search_attr\n AS\n \n-SELECT ua.owner_id AS owner_id,\n+SELECT ua.owner_id AS user_id,\n ua.schema_name AS schema_name,\n uav.booleanvalue AS booleanvalue,\n uav.datevalue AS datevalue,\n@@ -32,9 +29,9 @@ uav.stringvalue AS stringvalue\n FROM uattruniquevalue uav, uattr ua\n WHERE uav.attribute_id = ua.id\n \n-UNION\n+UNION ALL\n \n-SELECT ua.owner_id AS owner_id,\n+SELECT ua.owner_id AS user_id,\n ua.schema_name AS schema_name,\n uav.booleanvalue AS booleanvalue,\n uav.datevalue AS datevalue,\n@@ -44,9 +41,10 @@ uav.stringvalue AS stringvalue\n FROM uattrvalue uav, uattr ua\n WHERE uav.attribute_id = ua.id\n \n-UNION\n+UNION ALL\n \n-SELECT u.id AS owner_id, uschema.name AS schema_name,\n+SELECT u.id AS user_id,\n+uschema.name AS schema_name,\n NULL AS booleanvalue,\n NULL AS datevalue,\n NULL AS doublevalue,\n@@ -57,10 +55,7 @@ LEFT OUTER JOIN uattr ua ON (uschema.name = ua.schema_name AND ua.owner_id = u.i\n WHERE ua.id IS NULL\n     </entry>\n     <entry key=\"user_search_membership\">\n-CREATE MATERIALIZED VIEW user_search_membership\n-PARALLEL\n-BUILD IMMEDIATE\n-REFRESH FORCE\n+CREATE VIEW user_search_membership\n AS\n \n SELECT m.syncopeuser_id AS user_id, r.id AS role_id, r.name AS role_name"},{"sha":"154d63e4df86ae3c874841095cc99ff601ea5c53","filename":"core/src/main/resources/views.xml.oracle","status":"renamed","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fviews.xml.oracle?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -16,10 +16,13 @@\n <properties>\n     <comment>Views</comment>\n     <entry key=\"user_search_attr\">\n-CREATE VIEW user_search_attr\n+CREATE MATERIALIZED VIEW user_search_attr\n+PARALLEL\n+BUILD IMMEDIATE\n+REFRESH FORCE\n AS\n \n-SELECT ua.owner_id AS owner_id,\n+SELECT ua.owner_id AS user_id,\n ua.schema_name AS schema_name,\n uav.booleanvalue AS booleanvalue,\n uav.datevalue AS datevalue,\n@@ -29,9 +32,9 @@ uav.stringvalue AS stringvalue\n FROM uattruniquevalue uav, uattr ua\n WHERE uav.attribute_id = ua.id\n \n-UNION\n+UNION ALL\n \n-SELECT ua.owner_id AS owner_id,\n+SELECT ua.owner_id AS user_id,\n ua.schema_name AS schema_name,\n uav.booleanvalue AS booleanvalue,\n uav.datevalue AS datevalue,\n@@ -41,9 +44,10 @@ uav.stringvalue AS stringvalue\n FROM uattrvalue uav, uattr ua\n WHERE uav.attribute_id = ua.id\n \n-UNION\n+UNION ALL\n \n-SELECT u.id AS owner_id, uschema.name AS schema_name,\n+SELECT u.id AS user_id,\n+uschema.name AS schema_name,\n NULL AS booleanvalue,\n NULL AS datevalue,\n NULL AS doublevalue,\n@@ -54,7 +58,10 @@ LEFT OUTER JOIN uattr ua ON (uschema.name = ua.schema_name AND ua.owner_id = u.i\n WHERE ua.id IS NULL\n     </entry>\n     <entry key=\"user_search_membership\">\n-CREATE VIEW user_search_membership\n+CREATE MATERIALIZED VIEW user_search_membership\n+PARALLEL\n+BUILD IMMEDIATE\n+REFRESH FORCE\n AS\n \n SELECT m.syncopeuser_id AS user_id, r.id AS role_id, r.name AS role_name","previous_filename":"core/src/test/resources/views.xml"},{"sha":"2773714e65a2cc40c2afc6659c47a2c01f04aa35","filename":"core/src/test/java/org/syncope/core/persistence/AbstractTest.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -67,9 +67,7 @@ private void logTableContent(final Connection conn,\n             final String tableName)\n             throws SQLException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Table: \" + tableName);\n-        }\n+        LOG.debug(\"Table: \" + tableName);\n \n         Statement stmt = null;\n         ResultSet rs = null;\n@@ -86,9 +84,7 @@ private void logTableContent(final Connection conn,\n                             append(\" \");\n                 }\n \n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(row.toString());\n-                }\n+                LOG.debug(row.toString());\n \n                 row.delete(0, row.length());\n             }\n@@ -103,6 +99,7 @@ private void logTableContent(final Connection conn,\n     @Before\n     public void setUpTestDataWithinTransaction()\n             throws Exception {\n+\n         Connection conn = DataSourceUtils.getConnection(dataSource);\n         IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n \n@@ -126,7 +123,7 @@ public void setUpTestDataWithinTransaction()\n             conn = DataSourceUtils.getConnection(dataSource);\n \n             DatabaseMetaData dbm = conn.getMetaData();\n-            String[] types = {\"TABLE\"};\n+            String[] types = {\"TABLE\", \"VIEW\"};\n             ResultSet rs = dbm.getTables(null, null, \"%\", types);\n             while (rs.next()) {\n                 logTableContent(conn, rs.getString(\"TABLE_NAME\"));\n@@ -145,8 +142,7 @@ public void setUpIdentityConnectorsBundles() {\n         Properties props = new java.util.Properties();\n         try {\n             InputStream propStream =\n-                    getClass().getResourceAsStream(\n-                    \"/bundles.properties\");\n+                    getClass().getResourceAsStream(\"/bundles.properties\");\n             props.load(propStream);\n             bundlesVersion = props.getProperty(\"bundles.version\");\n             bundlesDirectory = props.getProperty(\"bundles.directory\");"},{"sha":"d7be4c49799802ca3edfd1efefcbfed922c05b97","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"added","additions":304,"deletions":0,"changes":304,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -0,0 +1,304 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.InputStream;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import javax.sql.DataSource;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.Resource;\n+import org.dbunit.database.DatabaseConfig;\n+import org.dbunit.database.DatabaseConnection;\n+import org.dbunit.database.IDatabaseConnection;\n+import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n+import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n+import org.dbunit.operation.DatabaseOperation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+    \"classpath:syncopeContext.xml\",\n+    \"classpath:persistenceContext.xml\"\n+})\n+@Transactional\n+public class UserSearchTest {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            UserSearchTest.class);\n+\n+    @Resource(name = \"userSearchDAOCriteriaImpl\")\n+    private UserSearchDAO userSearchCriteriaDAO;\n+\n+    @Resource(name = \"userSearchDAONativeImpl\")\n+    private UserSearchDAO userSearchNativeDAO;\n+\n+    @Autowired\n+    private DataSource dataSource;\n+\n+    @Autowired\n+    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n+\n+    @Before\n+    public void createDataAndSearchViews()\n+            throws Exception {\n+\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n+\n+        try {\n+            conn = dataSource.getConnection();\n+\n+            Statement statement = conn.createStatement();\n+            statement.executeUpdate(\"DROP VIEW user_search_attr\");\n+            statement.executeUpdate(\"DROP VIEW user_search_membership\");\n+            statement.close();\n+        } catch (SQLException e) {\n+        }\n+\n+        DatabaseConfig config = dbUnitConn.getConfig();\n+        config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n+                dbUnitDataTypeFactory);\n+\n+        FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n+        dataSetBuilder.setColumnSensing(true);\n+        IDataSet dataSet = dataSetBuilder.build(getClass().getResourceAsStream(\n+                \"/content.xml\"));\n+        try {\n+            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n+        } catch (Throwable t) {\n+            LOG.error(\"While executing tests\", t);\n+        }\n+\n+        InputStream viewsStream = UserSearchTest.class.getResourceAsStream(\n+                \"/views.xml\");\n+        Properties views = new Properties();\n+        views.loadFromXML(viewsStream);\n+\n+        Statement statement = null;\n+        for (String idx : views.stringPropertyNames()) {\n+            LOG.debug(\"Creating view {}\", views.get(idx).toString());\n+\n+            try {\n+                statement = conn.createStatement();\n+                statement.executeUpdate(views.get(idx).toString().\n+                        replaceAll(\"\\\\n\", \" \"));\n+                statement.close();\n+            } catch (SQLException e) {\n+                LOG.error(\"Could not create view \", e);\n+            } finally {\n+                if (statement != null) {\n+                    statement.close();\n+                }\n+            }\n+        }\n+\n+        DataSourceUtils.releaseConnection(conn, dataSource);\n+    }\n+\n+    @Test\n+    public final void searchWithLikeCondition() {\n+        searchWithLikeCondition(userSearchCriteriaDAO);\n+        searchWithLikeCondition(userSearchNativeDAO);\n+    }\n+\n+    private void searchWithLikeCondition(UserSearchDAO searchDAO) {\n+        AttributeCond usernameLeafCond =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"%o%\");\n+\n+        MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(1L);\n+\n+        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        loginDateCond.setSchema(\"loginDate\");\n+        loginDateCond.setExpression(\"2009-05-26\");\n+\n+        NodeCond subCond = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(membershipCond));\n+\n+        assertTrue(subCond.checkValidity());\n+\n+        NodeCond cond = NodeCond.getAndCond(subCond,\n+                NodeCond.getLeafCond(loginDateCond));\n+\n+        assertTrue(cond.checkValidity());\n+\n+        List<SyncopeUser> users = searchDAO.search(cond);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+    }\n+\n+    @Test\n+    public final void searchWithNotCondition() {\n+        searchWithNotCondition(userSearchCriteriaDAO);\n+        searchWithNotCondition(userSearchNativeDAO);\n+    }\n+\n+    private void searchWithNotCondition(UserSearchDAO searchDAO) {\n+        final AttributeCond usernameLeafCond =\n+                new AttributeCond(AttributeCond.Type.EQ);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"fabio.martelli\");\n+\n+        final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n+        assertTrue(cond.checkValidity());\n+\n+        final List<SyncopeUser> users = searchDAO.search(cond);\n+        assertNotNull(users);\n+        assertEquals(2, users.size());\n+\n+        Set<Long> ids = new HashSet<Long>(2);\n+        ids.add(users.get(0).getId());\n+        ids.add(users.get(1).getId());\n+        assertTrue(ids.contains(1L));\n+        assertTrue(ids.contains(4L));\n+    }\n+\n+    @Test\n+    public final void searchByBoolean() {\n+        searchByBoolean(userSearchCriteriaDAO);\n+        searchByBoolean(userSearchNativeDAO);\n+    }\n+\n+    private void searchByBoolean(UserSearchDAO searchDAO) {\n+        final AttributeCond coolLeafCond =\n+                new AttributeCond(AttributeCond.Type.EQ);\n+        coolLeafCond.setSchema(\"cool\");\n+        coolLeafCond.setExpression(\"true\");\n+\n+        final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n+        assertTrue(cond.checkValidity());\n+\n+        final List<SyncopeUser> users = searchDAO.search(cond);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        assertEquals(Long.valueOf(4L), users.get(0).getId());\n+    }\n+\n+    @Test\n+    public final void searchByPageAndSize() {\n+        searchByPageAndSize(userSearchCriteriaDAO);\n+        searchByPageAndSize(userSearchNativeDAO);\n+    }\n+\n+    private void searchByPageAndSize(UserSearchDAO searchDAO) {\n+        AttributeCond usernameLeafCond =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        usernameLeafCond.setSchema(\"username\");\n+        usernameLeafCond.setExpression(\"%o%\");\n+\n+        MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(1L);\n+\n+        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n+        loginDateCond.setSchema(\"loginDate\");\n+        loginDateCond.setExpression(\"2009-05-26\");\n+\n+        NodeCond subCond = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(membershipCond));\n+\n+        assertTrue(subCond.checkValidity());\n+\n+        NodeCond cond = NodeCond.getAndCond(subCond,\n+                NodeCond.getLeafCond(loginDateCond));\n+\n+        assertTrue(cond.checkValidity());\n+\n+        List<SyncopeUser> users = searchDAO.search(cond, 1, 2, null);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        users = searchDAO.search(cond, 2, 2, null);\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+    }\n+\n+    @Test\n+    public final void searchByMembership() {\n+        searchByMembership(userSearchCriteriaDAO);\n+        searchByMembership(userSearchNativeDAO);\n+    }\n+\n+    private void searchByMembership(UserSearchDAO searchDAO) {\n+        MembershipCond membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(1L);\n+\n+        List<SyncopeUser> users =\n+                searchDAO.search(NodeCond.getLeafCond(membershipCond));\n+        assertNotNull(users);\n+        assertEquals(2, users.size());\n+\n+        membershipCond = new MembershipCond();\n+        membershipCond.setRoleId(5L);\n+\n+        users = searchDAO.search(NodeCond.getNotLeafCond(membershipCond));\n+        assertNotNull(users);\n+        assertEquals(3, users.size());\n+    }\n+\n+    @Test\n+    public void searchByIsNull() {\n+        searchByIsNull(userSearchCriteriaDAO);\n+        searchByIsNull(userSearchNativeDAO);\n+    }\n+\n+    private void searchByIsNull(UserSearchDAO searchDAO) {\n+        AttributeCond coolLeafCond =\n+                new AttributeCond(AttributeCond.Type.ISNULL);\n+        coolLeafCond.setSchema(\"cool\");\n+\n+        List<SyncopeUser> users =\n+                searchDAO.search(NodeCond.getLeafCond(coolLeafCond));\n+        assertNotNull(users);\n+        assertEquals(3, users.size());\n+\n+        coolLeafCond =\n+                new AttributeCond(AttributeCond.Type.ISNOTNULL);\n+        coolLeafCond.setSchema(\"cool\");\n+\n+        users =\n+                searchDAO.search(NodeCond.getLeafCond(coolLeafCond));\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+    }\n+}"},{"sha":"72d76decd15041d4c58ab7d13ae17581783cb135","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":2,"deletions":117,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25011b43c27f54db890bc0e7965312b8a0927267/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=25011b43c27f54db890bc0e7965312b8a0927267","patch":"@@ -14,18 +14,12 @@\n  */\n package org.syncope.core.persistence.dao;\n \n-import java.util.HashSet;\n import static org.junit.Assert.*;\n \n import java.util.List;\n-import java.util.Set;\n-import javax.annotation.Resource;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.client.search.AttributeCond;\n-import org.syncope.client.search.MembershipCond;\n-import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n@@ -36,12 +30,6 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private UserDAO userDAO;\n \n-    @Resource(name = \"userSearchDAOCriteriaImpl\")\n-    private UserSearchDAO userSearchCriteriaDAO;\n-\n-    @Resource(name = \"userSearchDAONativeImpl\")\n-    private UserSearchDAO userSearchNativeDAO;\n-\n     @Test\n     public final void findAll() {\n         List<SyncopeUser> list = userDAO.findAll();\n@@ -50,9 +38,9 @@ public final void findAll() {\n \n     @Test\n     public final void count() {\n-        Long count = userDAO.count();\n+        Integer count = userDAO.count();\n         assertNotNull(count);\n-        assertEquals(4L, count.longValue());\n+        assertEquals(4, count.intValue());\n     }\n \n     @Test\n@@ -115,109 +103,6 @@ public final void save() {\n         assertNotNull(\"expected save to work\", actual);\n     }\n \n-    @Test\n-    public final void searchWithLikeCondition() {\n-        AttributeCond usernameLeafCond =\n-                new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"%o%\");\n-\n-        MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setRoleId(1L);\n-\n-        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n-        loginDateCond.setSchema(\"loginDate\");\n-        loginDateCond.setExpression(\"2009-05-26\");\n-\n-        NodeCond subCond = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond),\n-                NodeCond.getLeafCond(membershipCond));\n-\n-        assertTrue(subCond.checkValidity());\n-\n-        NodeCond cond = NodeCond.getAndCond(subCond,\n-                NodeCond.getLeafCond(loginDateCond));\n-\n-        assertTrue(cond.checkValidity());\n-\n-        List<SyncopeUser> users = userSearchCriteriaDAO.search(cond);\n-        assertNotNull(users);\n-        assertEquals(1, users.size());\n-    }\n-\n-    @Test\n-    public final void searchWithNotCondition() {\n-        final AttributeCond usernameLeafCond =\n-                new AttributeCond(AttributeCond.Type.EQ);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"fabio.martelli\");\n-\n-        final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n-        assertTrue(cond.checkValidity());\n-\n-        final List<SyncopeUser> users = userSearchCriteriaDAO.search(cond);\n-        assertNotNull(users);\n-        assertEquals(2, users.size());\n-\n-        Set<Long> ids = new HashSet<Long>(2);\n-        ids.add(users.get(0).getId());\n-        ids.add(users.get(1).getId());\n-        assertTrue(ids.contains(1L));\n-        assertTrue(ids.contains(4L));\n-    }\n-\n-    @Test\n-    public final void searchByBoolean() {\n-        final AttributeCond coolLeafCond =\n-                new AttributeCond(AttributeCond.Type.EQ);\n-        coolLeafCond.setSchema(\"cool\");\n-        coolLeafCond.setExpression(\"true\");\n-\n-        final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n-        assertTrue(cond.checkValidity());\n-\n-        final List<SyncopeUser> users = userSearchCriteriaDAO.search(cond);\n-        assertNotNull(users);\n-        assertEquals(1, users.size());\n-\n-        assertEquals(Long.valueOf(4L), users.get(0).getId());\n-    }\n-\n-    @Test\n-    public final void searchByPageAndSize() {\n-        AttributeCond usernameLeafCond =\n-                new AttributeCond(AttributeCond.Type.LIKE);\n-        usernameLeafCond.setSchema(\"username\");\n-        usernameLeafCond.setExpression(\"%o%\");\n-\n-        MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setRoleId(1L);\n-\n-        AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n-        loginDateCond.setSchema(\"loginDate\");\n-        loginDateCond.setExpression(\"2009-05-26\");\n-\n-        NodeCond subCond = NodeCond.getAndCond(\n-                NodeCond.getLeafCond(usernameLeafCond),\n-                NodeCond.getLeafCond(membershipCond));\n-\n-        assertTrue(subCond.checkValidity());\n-\n-        NodeCond cond = NodeCond.getAndCond(subCond,\n-                NodeCond.getLeafCond(loginDateCond));\n-\n-        assertTrue(cond.checkValidity());\n-\n-        List<SyncopeUser> users =\n-                userSearchCriteriaDAO.search(cond, 1, 2, null);\n-        assertNotNull(users);\n-        assertEquals(1, users.size());\n-\n-        users = userSearchCriteriaDAO.search(cond, 2, 2, null);\n-        assertNotNull(users);\n-        assertTrue(users.isEmpty());\n-    }\n-\n     @Test\n     public final void delete() {\n         SyncopeUser user = userDAO.find(3L);"}]}