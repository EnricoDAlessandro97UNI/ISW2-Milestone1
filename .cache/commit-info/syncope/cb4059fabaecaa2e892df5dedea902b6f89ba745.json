{"sha":"cb4059fabaecaa2e892df5dedea902b6f89ba745","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiNDA1OWZhYmFlY2FhMmU4OTJkZjVkZWRlYTkwMmI2Zjg5YmE3NDU=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2016-01-28T14:39:21Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2016-01-28T14:39:21Z"},"message":"[SYNCOPE-752] Added console tests for Logs","tree":{"sha":"b3690f97f6e9cfcce944d7e374e5977386e4689a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b3690f97f6e9cfcce944d7e374e5977386e4689a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cb4059fabaecaa2e892df5dedea902b6f89ba745","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb4059fabaecaa2e892df5dedea902b6f89ba745","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb4059fabaecaa2e892df5dedea902b6f89ba745","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb4059fabaecaa2e892df5dedea902b6f89ba745/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"b66273e7f1b5de874bb2f31fb0afa361556a2690","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b66273e7f1b5de874bb2f31fb0afa361556a2690","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b66273e7f1b5de874bb2f31fb0afa361556a2690"}],"stats":{"total":121,"additions":121,"deletions":0},"files":[{"sha":"4236c1093ea3bc54a954703a793c98ccfb78462c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/LogsITCase.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb4059fabaecaa2e892df5dedea902b6f89ba745/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb4059fabaecaa2e892df5dedea902b6f89ba745/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java?ref=cb4059fabaecaa2e892df5dedea902b6f89ba745","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.console;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import org.apache.syncope.client.console.pages.Logs;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;\n+import org.apache.wicket.core.util.lang.PropertyResolver;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.util.visit.IVisit;\n+import org.apache.wicket.util.visit.IVisitor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class LogsITCase extends AbstractConsoleITCase {\n+\n+    private final static String CONTAINER_PATH = \"content:tabbedPanel:panel:loggerContainer\";\n+\n+    @Before\n+    public void login() {\n+        doLogin(ADMIN_UNAME, ADMIN_PWD);\n+        browsingToLogs();\n+    }\n+\n+    @Test\n+    public void readCoreLogs() {\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:0:link\");\n+        wicketTester.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n+\n+        assertNotNull(searchLog(KEY, CONTAINER_PATH, \"org.apache.camel\"));\n+    }\n+\n+    @Test\n+    public void updateCoreLogs() {\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:0:link\");\n+        wicketTester.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n+\n+        Component result = searchLog(KEY, CONTAINER_PATH, \"org.apache.camel\");\n+        assertNotNull(result);\n+\n+        wicketTester.getRequest().addParameter(\n+                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", \"6\");\n+        wicketTester.assertComponent(\n+                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", DropDownChoice.class);\n+        wicketTester.executeAjaxEvent(result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", \"onchange\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+    }\n+\n+    @Test\n+    public void readConsoleLogs() {\n+        wicketTester.assertComponent(\"content:tabbedPanel:tabs-container:tabs:1:link\", AjaxFallbackLink.class);\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:1:link\");\n+        wicketTester.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n+\n+        assertNotNull(searchLog(KEY, CONTAINER_PATH, \"org.apache.syncope.fit\"));\n+    }\n+\n+    @Test\n+    public void updateConsoleLogs() {\n+        wicketTester.clickLink(\"content:tabbedPanel:tabs-container:tabs:1:link\");\n+        wicketTester.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n+\n+        Component result = searchLog(KEY, CONTAINER_PATH, \"org.apache.syncope.fit\");\n+        assertNotNull(result);\n+\n+        wicketTester.getRequest().addParameter(\n+                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", \"6\");\n+        wicketTester.executeAjaxEvent(result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", \"onchange\");\n+\n+        wicketTester.assertInfoMessages(\"Operation executed successfully\");\n+    }\n+\n+    private Component searchLog(final String property, final String searchPath, final String key) {\n+        Component component = wicketTester.getComponentFromLastRenderedPage(searchPath);\n+\n+        Component result = component.getPage().\n+                visitChildren(ListItem.class, new IVisitor<ListItem<LoggerTO>, Component>() {\n+\n+                    @Override\n+                    public void component(final ListItem<LoggerTO> object, final IVisit<Component> visit) {\n+                        try {\n+                            if (object.getModelObject() instanceof LoggerTO && PropertyResolver.getPropertyGetter(\n+                                    property, object.getModelObject()).invoke(object.getModelObject()).equals(key)) {\n+                                visit.stop(object);\n+                            }\n+                        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n+                            LOG.error(\"Error invoke method\", ex);\n+                        }\n+                    }\n+                });\n+        return result;\n+    }\n+\n+    private void browsingToLogs() {\n+        wicketTester.clickLink(\"configurationLI:configurationUL:logsLI:logs\");\n+        wicketTester.assertRenderedPage(Logs.class);\n+    }\n+}"}]}