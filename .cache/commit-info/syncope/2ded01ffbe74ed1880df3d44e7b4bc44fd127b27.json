{"sha":"2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJkZWQwMWZmYmU3NGVkMTg4MGRmM2Q0NGU3YjRiYzQ0ZmQxMjdiMjc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-21T16:16:11Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-21T16:16:11Z"},"message":"Fixes issue 165\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247208 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d0a704ba669b08f61e22a250eca039d68e4cb86b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d0a704ba669b08f61e22a250eca039d68e4cb86b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/comments","author":null,"committer":null,"parents":[{"sha":"6a8b4328c2379533a1c2c67348bb0bac4bb8c020","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a8b4328c2379533a1c2c67348bb0bac4bb8c020","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a8b4328c2379533a1c2c67348bb0bac4bb8c020"}],"stats":{"total":813,"additions":563,"deletions":250},"files":[{"sha":"80c4a958542d8fa11e597bd64382c7d9c08215a1","filename":"client/src/main/java/org/syncope/client/to/SyncTaskTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncTaskTO.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -33,6 +33,8 @@ public class SyncTaskTO extends SchedTaskTO {\n \n     private boolean performDelete;\n \n+    private String jobActionsClassName;\n+\n     public SyncTaskTO() {\n         super();\n \n@@ -105,4 +107,12 @@ public boolean isPerformDelete() {\n     public void setPerformDelete(boolean performDelete) {\n         this.performDelete = performDelete;\n     }\n+\n+    public String getJobActionsClassName() {\n+        return jobActionsClassName;\n+    }\n+\n+    public void setJobActionsClassName(String jobActionsClassName) {\n+        this.jobActionsClassName = jobActionsClassName;\n+    }\n }"},{"sha":"b4130cde03d83f199743cee02c352de731395ce1","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -88,9 +88,15 @@ public enum SyncopeClientExceptionType {\n     InvalidNotification(\n     \"Syncope.InvalidNotification\",\n     \"Syncope.InvalidNotification.element\"),\n-    InvalidTask(\n-    \"Syncope.InvalidTask\",\n-    \"Syncope.InvalidTask.element\"),\n+    InvalidPropagationTask(\n+    \"Syncope.InvalidPropagationTask\",\n+    \"Syncope.InvalidPropagationTask.element\"),\n+    InvalidSchedTask(\n+    \"Syncope.InvalidSchedTask\",\n+    \"Syncope.InvalidSchedTask.element\"),\n+    InvalidSyncTask(\n+    \"Syncope.InvalidSyncTask\",\n+    \"Syncope.InvalidSyncTask.element\"),\n     InvalidValues(\n     \"Syncope.InvalidValues\",\n     \"Syncope.InvalidValues.attributeName\"),"},{"sha":"811c7200140c1ae56f96c108aab017e270c7886c","filename":"console/src/main/java/org/syncope/console/pages/SyncTaskModalPage.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -111,6 +111,30 @@ protected Map<Long, String> load() {\n \n         profile.add(resource);\n \n+        final IModel<List<String>> classNames =\n+                new LoadableDetachableModel<List<String>>() {\n+\n+                    private static final long serialVersionUID =\n+                            5275935387613157437L;\n+\n+                    @Override\n+                    protected List<String> load() {\n+                        final List<String> classes = new ArrayList<String>(\n+                                taskRestClient.getJobActionsClasses());\n+\n+                        return classes;\n+                    }\n+                };\n+\n+        final AjaxDropDownChoicePanel<String> actionsClassName =\n+                new AjaxDropDownChoicePanel<String>(\n+                \"jobActionsClassName\", getString(\"actionsClass\"),\n+                new PropertyModel(taskTO, \"jobActionsClassName\"), false);\n+        actionsClassName.setChoices(classNames.getObject());\n+        actionsClassName.setStyleShet(\n+                \"ui-widget-content ui-corner-all long_dynamicsize\");\n+        profile.add(actionsClassName);\n+\n         final AjaxCheckBoxPanel creates = new AjaxCheckBoxPanel(\n                 \"performCreate\", getString(\"creates\"),\n                 new PropertyModel<Boolean>(taskTO, \"performCreate\"), false);"},{"sha":"11889342a28feb032fa1ab895e87cb2924a0f8df","filename":"console/src/main/java/org/syncope/console/rest/TaskRestClient.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -49,6 +49,18 @@ public Set<String> getJobClasses() {\n         return validators;\n     }\n \n+    public Set<String> getJobActionsClasses() {\n+        Set<String> actions = null;\n+\n+        try {\n+            actions = restTemplate.getForObject(\n+                    baseURL + \"task/jobActionsClasses.json\", Set.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            LOG.error(\"While getting all job actions classes\", e);\n+        }\n+        return actions;\n+    }\n+\n     /**\n      * Return the number of tasks.\n      * @param kind of task (propagation, sched, sync)."},{"sha":"75719997cfb843bf184816407bbe56486b682e85","filename":"console/src/main/resources/org/syncope/console/pages/SchedTaskModalPage.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.properties?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -3,7 +3,7 @@ crontab=Schedule\n executions=Executions\n title=Task\n id=Id\n-class=Class Name\n+class=Class\n lastExec=Last Execution\n nextExec=Next Execution\n cron=Schedule (seconds, minutes, hours, days of month, months, days of week)"},{"sha":"e90ced62f5b49340f74c300a6c108823e497280a","filename":"console/src/main/resources/org/syncope/console/pages/SyncTaskModalPage.html","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.html?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -93,6 +93,15 @@\n                                     </div>\n                                 </div>\n \n+                                <div class=\"tablerow\">\n+                                    <div class=\"tablecolumn_label short_dynamicsize\">\n+                                        <label for=\"jobActionsClassName\"><wicket:message key=\"actionsClass\"/></label>\n+                                    </div>\n+                                    <div class=\"tablecolumn_field medium_dynamicsize\">\n+                                        <span wicket:id=\"jobActionsClassName\">[jobActionsClassName]</span>\n+                                    </div>\n+                                </div>\n+\n                                 <div class=\"tablerow\">\n                                     <div class=\"tablecolumn_label short_dynamicsize\">\n                                         <label for=\"performCreate\"><wicket:message key=\"creates\"/></label>"},{"sha":"d27be054eac4371813e030ab6ff8f2b074e06832","filename":"console/src/main/resources/org/syncope/console/pages/SyncTaskModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.properties?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -21,3 +21,4 @@ showMessage=Show\n chooseForTemplate=Use A Template\n creates=Create new identities\n deletes=Delete matching identities\n+actionsClass=Actions class"},{"sha":"877ed8acf8524daa62f3ec4fd95e223447891bbc","filename":"console/src/main/resources/org/syncope/console/pages/SyncTaskModalPage_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage_it.properties?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -21,3 +21,4 @@ showMessage=Mostra\n chooseForTemplate=Usa Un Template\n creates=Crea nuove identit\\u00e0\n deletes=Elimina identit\\u00e0 esistenti\n+actionsClass=Classe azioni"},{"sha":"e7bd458987fcd8ccd354843a5286f92db68584a4","filename":"core/pom.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -386,6 +386,12 @@\n                                         <exclude name=\"**/workflow.properties\" />\n                                     </patternset>\n                                 </unzip>\n+                                <copy file=\"${project.build.directory}/test-classes/org/syncope/core/scheduling/TestSyncJobActions.class\"\n+                                      todir=\"${cargo.run.dir}/WEB-INF/classes/org/syncope/core/scheduling\"/>\n+                                <mkdir dir=\"${project.build.directory}/test-conf\"/>\n+                                <copy todir=\"${project.build.directory}/test-conf\" includeEmptyDirs=\"false\">\n+                                    <fileset dir=\"${project.build.directory}/test-classes\" excludes=\"**/*.class\"/>\n+                                </copy>\n                             </target>\n                         </configuration>\n                         <goals>\n@@ -560,7 +566,7 @@\n                         <output>${cargo.output}</output>\n                         <dependencies>\n                             <dependency>\n-                                <location>${project.build.directory}/test-classes/</location>\n+                                <location>${project.build.directory}/test-conf</location>\n                             </dependency>\n                             <dependency>\n                                 <groupId>com.h2database</groupId>"},{"sha":"d630222f4698b8f647c6ecbe4c2b0e1211a5ac58","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -14,6 +14,7 @@\n package org.syncope.core.init;\n \n import java.util.List;\n+import org.apache.commons.lang.StringUtils;\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n@@ -33,8 +34,10 @@\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.scheduling.AppContextMethodInvokingJobDetailFactoryBean;\n+import org.syncope.core.scheduling.DefaultSyncJobActions;\n import org.syncope.core.scheduling.Job;\n import org.syncope.core.scheduling.NotificationJob;\n+import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.util.ApplicationContextManager;\n \n @Component\n@@ -78,6 +81,24 @@ public void registerJob(final Long taskId, final String jobClassName,\n         if (!NotificationJob.class.getName().equals(jobClassName)) {\n             mpv.add(\"taskId\", taskId);\n         }\n+        if (SyncJob.class.getName().equals(jobClassName)) {\n+            String jobActionsClassName =\n+                    ((SyncTask) taskDAO.find(taskId)).getJobActionsClassName();\n+            Class syncJobActionsClass = DefaultSyncJobActions.class;\n+            if (StringUtils.isNotBlank(jobActionsClassName)) {\n+                try {\n+                    syncJobActionsClass = Class.forName(jobActionsClassName);\n+                } catch (Throwable t) {\n+                    LOG.error(\"Class {} not found, reverting to {}\",\n+                            new Object[]{jobActionsClassName,\n+                                syncJobActionsClass.getName(), t});\n+                }\n+            }\n+            Object syncJobActions = getBeanFactory().autowire(\n+                    syncJobActionsClass,\n+                    AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+            mpv.add(\"actions\", syncJobActions);\n+        }\n         GenericBeanDefinition bd = new GenericBeanDefinition();\n         bd.setBeanClassName(jobClassName);\n         bd.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);"},{"sha":"656b81487427b66ae91e340ee4a9c364e87c426c","filename":"core/src/main/java/org/syncope/core/persistence/beans/SchedTask.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -14,6 +14,7 @@\n package org.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n+import javax.validation.constraints.NotNull;\n import org.syncope.core.persistence.validation.entity.SchedTaskCheck;\n \n @Entity\n@@ -24,6 +25,7 @@ public class SchedTask extends Task {\n \n     protected String cronExpression;\n \n+    @NotNull\n     protected String jobClassName;\n \n     public String getCronExpression() {"},{"sha":"ef2cfd6e183061bebe457f517bf9bb6a4c6a1c09","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -60,6 +60,8 @@ public class SyncTask extends SchedTask {\n     @Max(1)\n     private Integer performDelete;\n \n+    private String jobActionsClassName;\n+\n     /**\n      * Default constructor.\n      */\n@@ -164,4 +166,12 @@ public boolean isPerformDelete() {\n     public void setPerformDelete(boolean performDelete) {\n         this.performDelete = getBooleanAsInteger(performDelete);\n     }\n+\n+    public String getJobActionsClassName() {\n+        return jobActionsClassName;\n+    }\n+\n+    public void setJobActionsClassName(String jobActionsClassName) {\n+        this.jobActionsClassName = jobActionsClassName;\n+    }\n }"},{"sha":"eb0502788a55388a4a71ccb7ccf9e5b63251fcd2","filename":"core/src/main/java/org/syncope/core/persistence/dao/DAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -20,5 +20,7 @@ public interface DAO {\n \n      <T extends AbstractBaseBean> T refresh(T entity);\n \n+    void detach(Object object);\n+\n     void flush();\n }"},{"sha":"28eeeaa69f159e67e1aede84ae409951ae99d75b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -43,6 +43,11 @@ public <T extends AbstractBaseBean> T refresh(final T entity) {\n         return entity;\n     }\n \n+    @Override\n+    public void detach(final Object object) {\n+        entityManager.detach(object);\n+    }\n+\n     @Override\n     public void flush() {\n         entityManager.flush();"},{"sha":"fe539116d83557b42031d33a87c0743adbd290d7","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchedTaskValidator.java","status":"modified","additions":28,"deletions":52,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -20,7 +20,6 @@\n import org.quartz.CronExpression;\n import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.scheduling.AbstractJob;\n-import org.syncope.core.scheduling.Job;\n import org.syncope.types.EntityViolationType;\n \n public class SchedTaskValidator extends AbstractValidator\n@@ -34,64 +33,41 @@ public void initialize(final SchedTaskCheck constraintAnnotation) {\n     public boolean isValid(final SchedTask object,\n             final ConstraintValidatorContext context) {\n \n-        boolean isValid;\n+        boolean isValid = true;\n \n-        if (object == null) {\n-            isValid = true;\n-        } else {\n-            if (object.getJobClassName() == null) {\n+        Class jobClass = null;\n+        try {\n+            jobClass = Class.forName(object.getJobClassName());\n+            isValid = AbstractJob.class.isAssignableFrom(jobClass);\n+        } catch (Throwable t) {\n+            LOG.error(\"Invalid Job class specified\", t);\n+            isValid = false;\n+        }\n+        if (jobClass == null || !isValid) {\n+            isValid = false;\n+\n+            context.disableDefaultConstraintViolation();\n+            context.buildConstraintViolationWithTemplate(\n+                    EntityViolationType.InvalidSchedTask.toString()).\n+                    addNode(object\n+                    + \".jobClassName is not valid\").\n+                    addConstraintViolation();\n+        }\n+\n+        if (isValid && object.getCronExpression() != null) {\n+            try {\n+                new CronExpression(object.getCronExpression());\n+            } catch (ParseException e) {\n+                LOG.error(\"Invalid cron expression '\"\n+                        + object.getCronExpression() + \"'\", e);\n                 isValid = false;\n \n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n                         EntityViolationType.InvalidSchedTask.toString()).\n-                        addNode(object + \".jobClassName is NULL\").\n+                        addNode(object + \".cronExpression==\"\n+                        + object.getCronExpression()).\n                         addConstraintViolation();\n-            } else {\n-                try {\n-                    Class jobClass = Class.forName(object.getJobClassName());\n-                    isValid = AbstractJob.class.isAssignableFrom(jobClass);\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Job class \" + object.getJobClassName()\n-                            + \" not found\", e);\n-                    isValid = false;\n-\n-                    context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(\n-                            EntityViolationType.InvalidSchedTask.toString()).\n-                            addNode(object + \".jobClassName==\"\n-                            + object.getJobClassName()).\n-                            addConstraintViolation();\n-                }\n-                if (!isValid) {\n-                    LOG.error(\"Job class \" + object.getJobClassName()\n-                            + \"does not implement \" + Job.class.getName());\n-\n-                    context.disableDefaultConstraintViolation();\n-                    context.buildConstraintViolationWithTemplate(\n-                            EntityViolationType.InvalidSchedTask.toString()).\n-                            addNode(object + \".jobClassName does not implement \"\n-                            + Job.class.getName()).\n-                            addConstraintViolation();\n-                }\n-\n-                if (isValid && object.getCronExpression() != null) {\n-                    try {\n-                        new CronExpression(object.getCronExpression());\n-                        isValid = true;\n-                    } catch (ParseException e) {\n-                        LOG.error(\"Invalid cron expression '\" + object.\n-                                getCronExpression() + \"'\", e);\n-                        isValid = false;\n-\n-                        context.disableDefaultConstraintViolation();\n-                        context.buildConstraintViolationWithTemplate(\n-                                EntityViolationType.InvalidSchedTask.toString()).\n-                                addNode(object + \".cronExpression==\"\n-                                + object.getCronExpression()).\n-                                addConstraintViolation();\n-                    }\n-                }\n             }\n         }\n "},{"sha":"6edac08630f700e4c416fb539d9d8df31b255376","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncTaskValidator.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncTaskValidator.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -16,7 +16,9 @@\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.lang.StringUtils;\n import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.types.EntityViolationType;\n \n public class SyncTaskValidator extends AbstractValidator\n@@ -57,6 +59,31 @@ public boolean isValid(final SyncTask object,\n                             addNode(object + \".resource is NULL\").\n                             addConstraintViolation();\n                 }\n+\n+                if (StringUtils.isNotBlank(object.getJobActionsClassName())) {\n+                    Class syncJobActionsClass = null;\n+                    boolean isAssignable = false;\n+                    try {\n+                        syncJobActionsClass =\n+                                Class.forName(object.getJobActionsClassName());\n+                        isAssignable = SyncJobActions.class.isAssignableFrom(\n+                                syncJobActionsClass);\n+                    } catch (Throwable t) {\n+                        LOG.error(\"Invalid SyncJobActions specified\", t);\n+                        isValid = false;\n+                    }\n+\n+                    if (syncJobActionsClass == null || !isAssignable) {\n+                        isValid = false;\n+\n+                        context.disableDefaultConstraintViolation();\n+                        context.buildConstraintViolationWithTemplate(\n+                                EntityViolationType.InvalidSyncTask.toString()).\n+                                addNode(object\n+                                + \".syncJobActionsClassName is not valid\").\n+                                addConstraintViolation();\n+                    }\n+                }\n             }\n         }\n "},{"sha":"d80a77b8ceb06730b40bd14f1d926150130da86d","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":25,"deletions":41,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -19,7 +19,6 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n@@ -55,16 +54,15 @@\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.propagation.PropagationManager;\n-import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.rest.data.TaskDataBinder;\n import org.syncope.core.scheduling.Job;\n import org.syncope.core.scheduling.NotificationJob;\n import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.core.util.TaskUtil;\n-import org.syncope.types.EntityViolationType;\n import org.syncope.types.PropagationMode;\n import org.syncope.core.propagation.PropagationTaskExecStatus;\n+import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -118,24 +116,7 @@ public TaskTO createSchedTask(final HttpServletResponse response,\n         TaskUtil taskUtil = getTaskUtil(taskTO);\n \n         SchedTask task = binder.createSchedTask(taskTO, taskUtil);\n-        try {\n-            task = taskDAO.save(task);\n-        } catch (InvalidEntityException e) {\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidTask);\n-\n-            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n-                    e.getViolations().entrySet()) {\n-\n-                for (EntityViolationType violationType : violation.getValue()) {\n-                    sce.addElement(violation.getClass().getSimpleName() + \": \"\n-                            + violationType);\n-                }\n-            }\n-\n-            scce.addException(sce);\n-            throw scce;\n-        }\n+        task = taskDAO.save(task);\n \n         try {\n             jobInstanceLoader.registerJob(task.getId(), task.getJobClassName(),\n@@ -185,24 +166,7 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO)\n                 HttpStatus.BAD_REQUEST);\n \n         binder.updateSchedTask(task, taskTO, taskUtil);\n-        try {\n-            task = taskDAO.save(task);\n-        } catch (InvalidEntityException e) {\n-            SyncopeClientException sce = new SyncopeClientException(\n-                    SyncopeClientExceptionType.InvalidTask);\n-\n-            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n-                    e.getViolations().entrySet()) {\n-\n-                for (EntityViolationType violationType : violation.getValue()) {\n-                    sce.addElement(violation.getClass().getSimpleName() + \": \"\n-                            + violationType);\n-                }\n-            }\n-\n-            scce.addException(sce);\n-            throw scce;\n-        }\n+        task = taskDAO.save(task);\n \n         try {\n             jobInstanceLoader.registerJob(task.getId(), task.getJobClassName(),\n@@ -284,8 +248,7 @@ public List<TaskExecTO> listExecutions(\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/jobClasses\")\n     public ModelAndView getJobClasses() {\n-        Reflections reflections = new Reflections(\n-                \"org.syncope.core.scheduling\");\n+        Reflections reflections = new Reflections(\"\");\n \n         Set<Class<? extends Job>> subTypes =\n                 reflections.getSubTypesOf(Job.class);\n@@ -305,6 +268,27 @@ public ModelAndView getJobClasses() {\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/jobActionsClasses\")\n+    public ModelAndView getJobActionClasses() {\n+        Reflections reflections = new Reflections(\"\");\n+\n+        Set<Class<? extends SyncJobActions>> subTypes =\n+                reflections.getSubTypesOf(SyncJobActions.class);\n+\n+        Set<String> jobActionsClasses = new HashSet<String>();\n+        for (Class jobClass : subTypes) {\n+            if (!Modifier.isAbstract(jobClass.getModifiers())) {\n+                jobActionsClasses.add(jobClass.getName());\n+            }\n+        }\n+\n+        ModelAndView result = new ModelAndView();\n+        result.addObject(jobActionsClasses);\n+        return result;\n+    }\n+\n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{taskId}\")"},{"sha":"b9d37420458e8c0fbae0114c426a6d5405f7bacc","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -32,11 +32,11 @@\n import org.syncope.client.to.TaskExecTO;\n import org.syncope.client.to.TaskTO;\n import org.syncope.core.init.JobInstanceLoader;\n-import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.NotificationTask;\n+import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n@@ -91,6 +91,8 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         task.setPerformCreate(taskTO.isPerformCreate());\n         task.setPerformUpdate(taskTO.isPerformUpdate());\n         task.setPerformDelete(taskTO.isPerformDelete());\n+\n+        task.setJobActionsClassName(taskTO.getJobActionsClassName());\n     }\n \n     public SchedTask createSchedTask(final SchedTaskTO taskTO,\n@@ -126,16 +128,10 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO,\n     public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO,\n             final TaskUtil taskUtil) {\n \n-        switch (taskUtil) {\n-            case SCHED:\n-                task.setCronExpression(taskTO.getCronExpression());\n-                break;\n-\n-            case SYNC:\n-                task.setCronExpression(taskTO.getCronExpression());\n+        task.setCronExpression(taskTO.getCronExpression());\n \n-                fill((SyncTask) task, (SyncTaskTO) taskTO);\n-                break;\n+        if (taskUtil == TaskUtil.SYNC) {\n+            fill((SyncTask) task, (SyncTaskTO) taskTO);\n         }\n     }\n \n@@ -211,6 +207,9 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n                         ((SyncTask) task).isPerformUpdate());\n                 ((SyncTaskTO) taskTO).setPerformDelete(\n                         ((SyncTask) task).isPerformDelete());\n+\n+                ((SyncTaskTO) taskTO).setJobActionsClassName(\n+                        ((SyncTask) task).getJobActionsClassName());\n                 break;\n \n             case NOTIFICATION:"},{"sha":"b9be42c1d3d2e3278add68cb7976083f05067361","filename":"core/src/main/java/org/syncope/core/scheduling/DefaultSyncJobActions.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FDefaultSyncJobActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FDefaultSyncJobActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FDefaultSyncJobActions.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import java.util.List;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserTO;\n+\n+/**\n+ * Default (empty) implementation of SyncJobActions.\n+ * @see SyncJobActions\n+ */\n+public class DefaultSyncJobActions implements SyncJobActions {\n+\n+    @Override\n+    public void beforeAll(final List<SyncDelta> deltas)\n+            throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public void beforeCreate(final SyncDelta delta, final UserTO user)\n+            throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public void beforeUpdate(SyncDelta delta, UserTO user, UserMod userMod)\n+            throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public void beforeDelete(SyncDelta delta, UserTO user)\n+            throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public void after(final SyncDelta delta, final UserTO user,\n+            final SyncResult result)\n+            throws JobExecutionException {\n+    }\n+\n+    @Override\n+    public void afterAll(final List<SyncDelta> deltas,\n+            final List<SyncResult> results)\n+            throws JobExecutionException {\n+    }\n+}"},{"sha":"df15576bd0014a36c49e9a3489f85263a4e9b343","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":154,"deletions":139,"changes":293,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -61,6 +61,7 @@\n import org.syncope.core.propagation.PropagationException;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n+import org.syncope.core.rest.data.UserDataBinder;\n import org.syncope.core.scheduling.SyncResult.Operation;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n@@ -71,7 +72,7 @@\n \n /**\n  * Job for executing synchronization tasks.\n- * @see Job\n+ * @see org.syncope.core.scheduling.Job\n  * @see SyncTask\n  */\n public class SyncJob extends AbstractJob {\n@@ -104,7 +105,7 @@ public class SyncJob extends AbstractJob {\n      * Entitlement DAO.\n      */\n     @Autowired\n-    EntitlementDAO entitlementDAO;\n+    private EntitlementDAO entitlementDAO;\n \n     /**\n      * User workflow adapter.\n@@ -118,6 +119,21 @@ public class SyncJob extends AbstractJob {\n     @Autowired\n     private PropagationManager propagationManager;\n \n+    /**\n+     * User data binder.\n+     */\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    /**\n+     * SyncJob actions.\n+     */\n+    private SyncJobActions actions;\n+\n+    public void setActions(final SyncJobActions actions) {\n+        this.actions = actions;\n+    }\n+\n     /**\n      * Extract password value from passed values (if instance of GuardedString\n      * or GuardedByteArray).\n@@ -178,11 +194,8 @@ private UserTO getUserTO(final ConnectorObject obj) {\n             userTO.addMembership(membershipTO);\n         }\n \n-        Attribute attribute;\n-        List<Object> values;\n-        AttributeTO attributeTO;\n-\n         for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n+            Attribute attribute;\n             if (mapping.isAccountid()) {\n                 attribute = obj.getAttributeByName(Name.NAME);\n             } else if (mapping.isPassword()) {\n@@ -192,9 +205,10 @@ private UserTO getUserTO(final ConnectorObject obj) {\n                 attribute = obj.getAttributeByName(mapping.getExtAttrName());\n             }\n \n-            values = attribute == null\n+            List<Object> values = attribute == null\n                     ? Collections.EMPTY_LIST : attribute.getValue();\n \n+            AttributeTO attributeTO;\n             switch (mapping.getIntMappingType()) {\n                 case SyncopeUserId:\n                     break;\n@@ -241,11 +255,13 @@ private UserTO getUserTO(final ConnectorObject obj) {\n     /**\n      * Build an UserMod out of connector object attributes and schema mapping.\n      *\n-     * @param userId user to be updated\n+     * @param user user to be updated\n      * @param obj connector object\n      * @return UserMod for the user to be updated\n      */\n-    private UserMod getUserMod(final SyncopeUser user, final ConnectorObject obj) {\n+    private UserMod getUserMod(final SyncopeUser user,\n+            final ConnectorObject obj) {\n+\n         final SyncTask syncTask = (SyncTask) this.task;\n \n         final UserMod userMod = new UserMod();\n@@ -258,13 +274,13 @@ private UserMod getUserMod(final SyncopeUser user, final ConnectorObject obj) {\n             userMod.addMembershipToBeAdded(membershipMod);\n         }\n \n-        Attribute attribute;\n-        List<Object> values;\n-        AttributeMod attributeMod;\n         for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-            attribute = obj.getAttributeByName(mapping.getExtAttrName());\n-            values = attribute == null\n+            Attribute attribute = obj.getAttributeByName(\n+                    mapping.getExtAttrName());\n+            List<Object> values = attribute == null\n                     ? Collections.EMPTY_LIST : attribute.getValue();\n+\n+            AttributeMod attributeMod;\n             switch (mapping.getIntMappingType()) {\n                 case SyncopeUserId:\n                     break;\n@@ -281,7 +297,9 @@ private UserMod getUserMod(final SyncopeUser user, final ConnectorObject obj) {\n                             password, user.getCipherAlgoritm(), 0);\n \n                     // update password if and only if password is really changed\n-                    if (!user.getPassword().equals(passwordUser.getPassword())) {\n+                    if (!user.getPassword().equals(\n+                            passwordUser.getPassword())) {\n+\n                         userMod.setPassword(password);\n                     }\n                     break;\n@@ -331,13 +349,10 @@ private UserMod getUserMod(final SyncopeUser user, final ConnectorObject obj) {\n     /**\n      * Find users based on mapped uid value (or previous uid value, if updated).\n      *\n-     * @param schemaName schema name mapped as accountId\n-     * @param uidValue Uid value\n-     * @param previousUidValue Uid value before last update (if available)\n+     * @param delta sync delta\n      * @return list of matching users\n      */\n     private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n-\n         final String uid = delta.getPreviousUid() == null\n                 ? delta.getUid().getUidValue()\n                 : delta.getPreviousUid().getUidValue();\n@@ -362,7 +377,8 @@ private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n                     && policySpec.getAlternativeSearchAttrs() != null\n                     && !policySpec.getAlternativeSearchAttrs().isEmpty()) {\n \n-                // search external attribute name/value about each specified name\n+                // search external attribute name/value \n+                // about each specified name\n                 final ConnectorObject object = delta.getObject();\n \n                 final Map<String, Attribute> extValues =\n@@ -441,7 +457,6 @@ private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n                         EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                         searchCondition));\n             } else {\n-\n                 final SyncopeUser user;\n \n                 switch (accountIdMap.getIntMappingType()) {\n@@ -479,70 +494,91 @@ private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n         return result;\n     }\n \n-    private SyncResult createUser(final SyncDelta delta, final boolean dryRun) {\n+    private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n+            throws JobExecutionException {\n+\n         final SyncResult result = new SyncResult();\n         result.setOperation(Operation.CREATE);\n \n-        final UserTO userTO = getUserTO(delta.getObject());\n+        UserTO userTO = getUserTO(delta.getObject());\n+        actions.beforeCreate(delta, userTO);\n \n-        // shortcut in case of dry run.\n         if (dryRun) {\n             result.setUserId(0L);\n             result.setUsername(userTO.getUsername());\n             result.setStatus(SyncResult.Status.SUCCESS);\n-            return result;\n+        } else {\n+            try {\n+                WorkflowResult<Map.Entry<Long, Boolean>> created =\n+                        wfAdapter.create(userTO);\n+                List<PropagationTask> tasks =\n+                        propagationManager.getCreateTaskIds(\n+                        created.getResult().getKey(), userTO.getPassword(),\n+                        null, created.getResult().getValue(),\n+                        ((SyncTask) this.task).getResource().getName());\n+                propagationManager.execute(tasks);\n+\n+                userTO = userDataBinder.getUserTO(\n+                        created.getResult().getKey());\n+\n+                result.setUserId(created.getResult().getKey());\n+                result.setUsername(userTO.getUsername());\n+                result.setStatus(SyncResult.Status.SUCCESS);\n+            } catch (PropagationException e) {\n+                LOG.error(\"Could not propagate user \"\n+                        + delta.getUid().getUidValue(), e);\n+            } catch (Throwable t) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(t.getMessage());\n+                LOG.error(\"Could not create user \"\n+                        + delta.getUid().getUidValue(), t);\n+            }\n         }\n \n-        try {\n-            WorkflowResult<Map.Entry<Long, Boolean>> created =\n-                    wfAdapter.create(userTO);\n-            List<PropagationTask> tasks =\n-                    propagationManager.getCreateTaskIds(\n-                    created.getResult().getKey(), userTO.getPassword(),\n-                    null, created.getResult().getValue(),\n-                    ((SyncTask) this.task).getResource().getName());\n-            propagationManager.execute(tasks);\n-            result.setUserId(created.getResult().getKey());\n-            result.setUsername(userTO.getUsername());\n-            result.setStatus(SyncResult.Status.SUCCESS);\n-        } catch (PropagationException e) {\n-            LOG.error(\"Could not propagate user \"\n-                    + delta.getUid().getUidValue(), e);\n-        } catch (Throwable t) {\n-            result.setStatus(SyncResult.Status.FAILURE);\n-            result.setMessage(t.getMessage());\n-            LOG.error(\"Could not create user \"\n-                    + delta.getUid().getUidValue(), t);\n-        }\n+        actions.after(delta, userTO, result);\n+\n         return result;\n     }\n \n-    private List<SyncResult> updateUsers(final SyncDelta delta,\n-            final List<SyncopeUser> users, final boolean dryRun) {\n+    private void updateUsers(final SyncDelta delta,\n+            final List<SyncopeUser> users, final boolean dryRun,\n+            final List<SyncResult> results)\n+            throws JobExecutionException {\n+\n+        if (!((SyncTask) task).isPerformUpdate()) {\n+            LOG.debug(\"SyncTask not configured for update\");\n+            return;\n+        }\n \n         LOG.debug(\"About to update {}\", users);\n-        final List<SyncResult> results = new ArrayList<SyncResult>();\n \n         for (SyncopeUser user : users) {\n             final SyncResult result = new SyncResult();\n             result.setOperation(Operation.UPDATE);\n \n+            UserTO userTO = userDataBinder.getUserTO(user.getId());\n+\n+\n             try {\n                 final UserMod userMod = getUserMod(user, delta.getObject());\n+                actions.beforeUpdate(delta, userTO, userMod);\n \n                 result.setStatus(SyncResult.Status.SUCCESS);\n                 result.setUserId(userMod.getId());\n                 result.setUsername(userMod.getUsername());\n \n                 if (!dryRun) {\n-                    WorkflowResult<Map.Entry<Long, PropagationByResource>> updated =\n+                    WorkflowResult<Map.Entry<Long, PropagationByResource>> upd =\n                             wfAdapter.update(userMod);\n                     List<PropagationTask> tasks =\n                             propagationManager.getUpdateTaskIds(\n-                            updated.getResult().getKey(), userMod.getPassword(),\n-                            null, null, null, updated.getResult().getValue(),\n+                            upd.getResult().getKey(), userMod.getPassword(),\n+                            null, null, null, upd.getResult().getValue(),\n                             ((SyncTask) this.task).getResource().getName());\n                     propagationManager.execute(tasks);\n+\n+                    userTO = userDataBinder.getUserTO(\n+                            upd.getResult().getKey());\n                 }\n             } catch (PropagationException e) {\n                 LOG.error(\"Could not propagate user \"\n@@ -554,20 +590,29 @@ private List<SyncResult> updateUsers(final SyncDelta delta,\n                         + delta.getUid().getUidValue(), t);\n             }\n \n+            actions.after(delta, userTO, result);\n             results.add(result);\n         }\n-        return results;\n     }\n \n-    private List<SyncResult> deleteUsers(\n-            final List<SyncopeUser> users, final boolean dryRun) {\n+    private void deleteUsers(final SyncDelta delta,\n+            final List<SyncopeUser> users, final boolean dryRun,\n+            final List<SyncResult> results)\n+            throws JobExecutionException {\n+\n+        if (!((SyncTask) task).isPerformDelete()) {\n+            LOG.debug(\"SyncTask not configured for delete\");\n+            return;\n+        }\n \n         LOG.debug(\"About to delete {}\", users);\n-        final List<SyncResult> results = new ArrayList<SyncResult>();\n \n         for (SyncopeUser user : users) {\n             Long userId = user.getId();\n \n+            UserTO userTO = userDataBinder.getUserTO(userId);\n+            actions.beforeDelete(delta, userTO);\n+\n             final SyncResult result = new SyncResult();\n             result.setUserId(userId);\n             result.setUsername(user.getUsername());\n@@ -592,9 +637,11 @@ private List<SyncResult> deleteUsers(\n                     LOG.error(\"Could not delete user \" + userId, t);\n                 }\n             }\n+\n+            actions.after(delta, userTO, result);\n             results.add(result);\n+\n         }\n-        return results;\n     }\n \n     /**\n@@ -715,6 +762,26 @@ private String createReport(final List<SyncResult> syncResults,\n         return report.toString();\n     }\n \n+    /**\n+     * Used to simulate authentication in order to perform updates through\n+     * AbstractUserWorkflowAdapter.\n+     */\n+    private void setupSecurity() {\n+        final List<GrantedAuthority> authorities =\n+                new ArrayList<GrantedAuthority>();\n+\n+        for (Entitlement entitlement : entitlementDAO.findAll()) {\n+            authorities.add(new GrantedAuthorityImpl(entitlement.getName()));\n+        }\n+\n+        final UserDetails userDetails = new User(\n+                \"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+\n+        SecurityContextHolder.getContext().setAuthentication(\n+                new UsernamePasswordAuthenticationToken(\n+                userDetails, \"FAKE_PASSWORD\", authorities));\n+    }\n+\n     @Override\n     protected String doExecute(final boolean dryRun)\n             throws JobExecutionException {\n@@ -731,8 +798,6 @@ protected String doExecute(final boolean dryRun)\n \n         final SyncTask syncTask = (SyncTask) this.task;\n \n-        final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n-\n         ConnectorFacadeProxy connector;\n         try {\n             connector = connInstanceLoader.getConnector(syncTask.getResource());\n@@ -762,14 +827,17 @@ protected String doExecute(final boolean dryRun)\n                     + syncTask.getResource());\n         }\n \n-        final List<SyncResult> results = new ArrayList<SyncResult>();\n-\n+        final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n         final ConflictResolutionAction conflictResolutionAction =\n                 syncPolicy != null && syncPolicy.getSpecification() != null\n                 ? ((SyncPolicySpec) syncPolicy.getSpecification()).\n                 getConflictResolutionAction()\n                 : ConflictResolutionAction.IGNORE;\n \n+        final List<SyncResult> results = new ArrayList<SyncResult>();\n+\n+        actions.beforeAll(deltas);\n+\n         for (SyncDelta delta : deltas) {\n             List<SyncopeUser> users = findExistingUsers(delta);\n \n@@ -782,33 +850,29 @@ protected String doExecute(final boolean dryRun)\n                             LOG.debug(\"SyncTask not configured for create\");\n                         }\n                     } else if (users.size() == 1) {\n-                        performUpdate(\n-                                syncTask, delta,\n-                                users.subList(0, 1),\n+                        updateUsers(delta, users.subList(0, 1),\n                                 dryRun, results);\n                     } else {\n                         switch (conflictResolutionAction) {\n                             case IGNORE:\n                                 LOG.error(\"More than one match {}\", users);\n                                 break;\n+\n                             case FIRSTMATCH:\n-                                performUpdate(\n-                                        syncTask, delta,\n-                                        users.subList(0, 1),\n+                                updateUsers(delta, users.subList(0, 1),\n                                         dryRun, results);\n                                 break;\n+\n                             case LASTMATCH:\n-                                performUpdate(\n-                                        syncTask, delta,\n-                                        users.subList(\n-                                        users.size() - 1, users.size()),\n-                                        dryRun, results);\n+                                updateUsers(delta, users.subList(users.size()\n+                                        - 1, users.size()), dryRun, results);\n                                 break;\n+\n                             case ALL:\n-                                performUpdate(\n-                                        syncTask, delta,\n-                                        users,\n-                                        dryRun, results);\n+                                updateUsers(delta, users, dryRun, results);\n+                                break;\n+\n+                            default:\n                         }\n                     }\n                     break;\n@@ -817,33 +881,29 @@ protected String doExecute(final boolean dryRun)\n                     if (users.isEmpty()) {\n                         LOG.debug(\"No match found for deletion\");\n                     } else if (users.size() == 1) {\n-                        performDelete(syncTask, users, dryRun, results);\n+                        deleteUsers(delta, users, dryRun, results);\n                     } else {\n                         switch (conflictResolutionAction) {\n                             case IGNORE:\n                                 LOG.error(\"More than one match {}\", users);\n                                 break;\n+\n                             case FIRSTMATCH:\n-                                performDelete(\n-                                        syncTask,\n-                                        users.subList(0, 1),\n-                                        dryRun,\n-                                        results);\n+                                deleteUsers(delta, users.subList(0, 1),\n+                                        dryRun, results);\n                                 break;\n+\n                             case LASTMATCH:\n-                                performDelete(\n-                                        syncTask,\n-                                        users.subList(\n+                                deleteUsers(delta, users.subList(\n                                         users.size() - 1, users.size()),\n-                                        dryRun,\n-                                        results);\n+                                        dryRun, results);\n                                 break;\n+\n                             case ALL:\n-                                performDelete(\n-                                        syncTask,\n-                                        users,\n-                                        dryRun,\n-                                        results);\n+                                deleteUsers(delta, users, dryRun, results);\n+                                break;\n+\n+                            default:\n                         }\n                     }\n \n@@ -853,6 +913,8 @@ protected String doExecute(final boolean dryRun)\n             }\n         }\n \n+        actions.afterAll(deltas, results);\n+\n         final String result = createReport(results, syncTask.getResource().\n                 getSyncTraceLevel(), dryRun);\n         LOG.debug(\"Sync result: {}\", result);\n@@ -869,33 +931,6 @@ protected String doExecute(final boolean dryRun)\n         return result.toString();\n     }\n \n-    private void performUpdate(\n-            final SyncTask task,\n-            final SyncDelta delta,\n-            final List<SyncopeUser> users,\n-            final boolean dryRun,\n-            final List<SyncResult> results) {\n-\n-        if (task.isPerformUpdate()) {\n-            results.addAll(updateUsers(delta, users, dryRun));\n-        } else {\n-            LOG.debug(\"SyncTask not configured for update\");\n-        }\n-    }\n-\n-    private void performDelete(\n-            final SyncTask task,\n-            final List<SyncopeUser> users,\n-            final boolean dryRun,\n-            final List<SyncResult> results) {\n-\n-        if (task.isPerformDelete()) {\n-            results.addAll(deleteUsers(users, dryRun));\n-        } else {\n-            LOG.debug(\"SyncTask not configured for delete\");\n-        }\n-    }\n-\n     /**\n      * {@inheritDoc}\n      */\n@@ -910,24 +945,4 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n                 >= TraceLevel.FAILURES.ordinal())\n                 || syncTask.getResource().getSyncTraceLevel() == TraceLevel.ALL;\n     }\n-\n-    /**\n-     * Used to simulate authentication in order to perform updates through \n-     * AbstractUserWorkflowAdapter.\n-     */\n-    public void setupSecurity() {\n-        final List<GrantedAuthority> authorities =\n-                new ArrayList<GrantedAuthority>();\n-\n-        for (Entitlement entitlement : entitlementDAO.findAll()) {\n-            authorities.add(new GrantedAuthorityImpl(entitlement.getName()));\n-        }\n-\n-        final UserDetails userDetails = new User(\n-                \"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n-\n-        SecurityContextHolder.getContext().setAuthentication(\n-                new UsernamePasswordAuthenticationToken(\n-                userDetails, \"FAKE_PASSWORD\", authorities));\n-    }\n }"},{"sha":"8c0c6c81f103ac4795cd53768da23292bbe59bd2","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJobActions.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJobActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJobActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJobActions.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import java.util.List;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.UserTO;\n+\n+/**\n+ * Interface for actions to be performed during SyncJob execution.\n+ */\n+public interface SyncJobActions {\n+\n+    void beforeAll(List<SyncDelta> deltas)\n+            throws JobExecutionException;\n+\n+    void beforeCreate(SyncDelta delta, UserTO user)\n+            throws JobExecutionException;\n+\n+    void beforeUpdate(SyncDelta delta, UserTO user, UserMod userMod)\n+            throws JobExecutionException;\n+\n+    void beforeDelete(SyncDelta delta, UserTO user)\n+            throws JobExecutionException;\n+\n+    void after(SyncDelta delta, UserTO user, SyncResult result)\n+            throws JobExecutionException;\n+\n+    void afterAll(List<SyncDelta> deltas, List<SyncResult> results)\n+            throws JobExecutionException;\n+}"},{"sha":"92bd78408d054fc0b96383bc25f654ffb81ce8a6","filename":"core/src/main/java/org/syncope/core/scheduling/SyncResult.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -21,7 +21,7 @@\n import org.apache.commons.lang.builder.ToStringStyle;\n import org.syncope.types.TraceLevel;\n \n-class SyncResult {\n+public class SyncResult {\n \n     static enum Operation {\n \n@@ -111,7 +111,8 @@ public String getReportString(final TraceLevel level) {\n                     operation, userId, username, message);\n         } else {\n             // All\n-            return String.format(\"%s %s (id/ name): %d/ %s %s\", operation, status,\n+            return String.format(\"%s %s (id/ name): %d/ %s %s\", operation,\n+                    status,\n                     userId, username,\n                     StringUtils.isEmpty(message) ? \"\" : \"with message: \"\n                     + message);"},{"sha":"3f547bc73a6a8cb5e2158901a4feb1b7c1c52c6e","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -30,6 +30,7 @@\n import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.core.scheduling.TestSyncJobActions;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationOperation;\n \n@@ -116,6 +117,19 @@ public final void saveSyncTask() {\n         assertNotNull(exception);\n \n         task.setResource(resource);\n+        task.setJobActionsClassName(getClass().getName());\n+\n+        // this save() fails because jobActionsClassName does not implement \n+        // the right interface\n+        exception = null;\n+        try {\n+            taskDAO.save(task);\n+        } catch (InvalidEntityException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+\n+        task.setJobActionsClassName(TestSyncJobActions.class.getName());\n         // this save() finally works\n         task = taskDAO.save(task);\n         assertNotNull(task);"},{"sha":"47038214ce70e4feaa509c773fa140e88844d714","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -29,6 +29,7 @@\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.propagation.PropagationTaskExecStatus;\n+import org.syncope.core.scheduling.TestSyncJobActions;\n \n public class TaskTestITCase extends AbstractTest {\n \n@@ -243,6 +244,22 @@ public void sync() {\n                 BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPre);\n \n+        // Update sync task by adding custom SyncJob actions\n+        SyncTaskTO task = restTemplate.getForObject(\n+                BASE_URL + \"task/read/{taskId}\", SyncTaskTO.class, 4);\n+        assertNotNull(task);\n+\n+        task.setJobActionsClassName(TestSyncJobActions.class.getName());\n+\n+        SyncTaskTO actual = restTemplate.postForObject(\n+                BASE_URL + \"task/update/sync\",\n+                task, SyncTaskTO.class);\n+        assertNotNull(actual);\n+\n+        assertEquals(task.getId(), actual.getId());\n+        assertEquals(TestSyncJobActions.class.getName(),\n+                actual.getJobActionsClassName());\n+\n         TaskExecTO execution = restTemplate.postForObject(\n                 BASE_URL + \"task/execute/{taskId}\", null,\n                 TaskExecTO.class, 4);\n@@ -264,7 +281,7 @@ public void sync() {\n                 userTO.getAttributeMap().get(\"email\").getValues().get(0));\n         assertEquals(\"test9@syncope.org\",\n                 userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n-        assertEquals(\"test9\",\n+        assertEquals(\"9\",\n                 userTO.getAttributeMap().get(\"fullname\").getValues().get(0));\n \n         Integer usersPost = restTemplate.getForObject("},{"sha":"439725b913cd5a543d267d28bc2951c6984a2291","filename":"core/src/test/java/org/syncope/core/scheduling/TestSyncJobActions.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FTestSyncJobActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ded01ffbe74ed1880df3d44e7b4bc44fd127b27/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FTestSyncJobActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FTestSyncJobActions.java?ref=2ded01ffbe74ed1880df3d44e7b4bc44fd127b27","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import java.util.Collections;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.syncope.client.mod.AttributeMod;\n+import org.syncope.client.mod.UserMod;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.UserTO;\n+\n+public class TestSyncJobActions extends DefaultSyncJobActions {\n+\n+    private int counter = 0;\n+\n+    @Override\n+    public void beforeCreate(final SyncDelta delta, final UserTO user)\n+            throws JobExecutionException {\n+\n+        AttributeTO attrTO = null;\n+        for (int i = 0; i < user.getAttributes().size(); i++) {\n+            if (\"fullname\".equals(user.getAttributes().get(i).getSchema())) {\n+                attrTO = user.getAttributes().get(i);\n+            }\n+        }\n+        if (attrTO == null) {\n+            attrTO = new AttributeTO();\n+            attrTO.setSchema(\"fullname\");\n+            user.addAttribute(attrTO);\n+        }\n+        attrTO.setValues(Collections.singletonList(String.valueOf(counter++)));\n+    }\n+\n+    @Override\n+    public void beforeUpdate(final SyncDelta delta, final UserTO user,\n+            final UserMod userMod)\n+            throws JobExecutionException {\n+\n+        userMod.addAttributeToBeRemoved(\"fullname\");\n+\n+        AttributeMod fullnameMod = null;\n+        for (AttributeMod attrMod : userMod.getAttributesToBeUpdated()) {\n+            if (\"fullname\".equals(attrMod.getSchema())) {\n+                fullnameMod = attrMod;\n+            }\n+        }\n+        if (fullnameMod == null) {\n+            fullnameMod = new AttributeMod();\n+            fullnameMod.setSchema(\"fullname\");\n+            userMod.addAttributeToBeUpdated(fullnameMod);\n+        }\n+\n+        fullnameMod.setValuesToBeAdded(\n+                Collections.singletonList(String.valueOf(counter++)));\n+    }\n+}"}]}