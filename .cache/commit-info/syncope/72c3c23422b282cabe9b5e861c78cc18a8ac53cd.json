{"sha":"72c3c23422b282cabe9b5e861c78cc18a8ac53cd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcyYzNjMjM0MjJiMjgyY2FiZTliNWU4NjFjNzhjYzE4YThhYzUzY2Q=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-26T10:51:14Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-26T10:51:14Z"},"message":"Some clean ups + using DBCP for speeding up test execution\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247378 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0eadfbe6bac505de39ab399eb24aa5e958f54088","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0eadfbe6bac505de39ab399eb24aa5e958f54088"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/72c3c23422b282cabe9b5e861c78cc18a8ac53cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72c3c23422b282cabe9b5e861c78cc18a8ac53cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72c3c23422b282cabe9b5e861c78cc18a8ac53cd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/comments","author":null,"committer":null,"parents":[{"sha":"1a1aec5a6271846d1103529c0dc8764686169777","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1a1aec5a6271846d1103529c0dc8764686169777","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1a1aec5a6271846d1103529c0dc8764686169777"}],"stats":{"total":217,"additions":108,"deletions":109},"files":[{"sha":"d5a7b93c0a8c00de2f793316923ba2322bae8042","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -47,12 +47,12 @@\n         <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeDataSource\"/>\n         <property name=\"defaultObject\" ref=\"localDataSource\"/>\n     </bean>\n-    <bean id=\"localDataSource\"\n-          class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+    <bean id=\"localDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\">\n         <property name=\"driverClassName\" value=\"${jpa.driverClassName}\"/>\n         <property name=\"url\" value=\"${jpa.url}\"/>\n         <property name=\"username\" value=\"${jpa.username}\"/>\n         <property name=\"password\" value=\"${jpa.password}\"/>\n+        <property name=\"initialSize\" value=\"10\"/>\n     </bean>\n \n     <bean id=\"entityManager\" class=\"org.springframework.orm.jpa.support.SharedEntityManagerBean\">"},{"sha":"854c54973fbfca113fb82f0760cf24411f97c4bd","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -43,14 +43,14 @@ public class AttrTest extends AbstractTest {\n     private SchemaDAO userSchemaDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<UAttr> list = attrDAO.findAll(UAttr.class);\n         assertEquals(\"did not get expected number of attributes \",\n                 9, list.size());\n     }\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         UAttr attribute = attrDAO.find(100L, UAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n@@ -60,7 +60,7 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void read() {\n+    public void read() {\n         UAttr attribute = attrDAO.find(100L, UAttr.class);\n         assertNotNull(attribute);\n \n@@ -69,7 +69,7 @@ public final void read() {\n     }\n \n     @Test\n-    public final void save()\n+    public void save()\n             throws ClassNotFoundException {\n \n         SyncopeUser user = userDAO.find(1L);\n@@ -113,7 +113,7 @@ public final void save()\n     }\n \n     @Test\n-    public final void checkForEnumType()\n+    public void checkForEnumType()\n             throws ClassNotFoundException {\n \n         SyncopeUser user = userDAO.find(1L);\n@@ -155,7 +155,7 @@ public final void checkForEnumType()\n     }\n \n     @Test\n-    public final void validateAndSave() {\n+    public void validateAndSave() {\n         final USchema emailSchema =\n                 userSchemaDAO.find(\"email\", USchema.class);\n         assertNotNull(emailSchema);\n@@ -188,7 +188,7 @@ public final void validateAndSave() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         UAttr attribute = attrDAO.find(200L, UAttr.class);\n         String attrSchemaName = attribute.getSchema().getName();\n "},{"sha":"c557007c817463c0d84cf092878022ad6817d99a","filename":"core/src/test/java/org/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -36,14 +36,14 @@ public class ConnInstanceTest extends AbstractTest {\n     private ConnInstanceDAO connInstanceDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<ConnInstance> connectors = connInstanceDAO.findAll();\n         assertNotNull(connectors);\n         assertFalse(connectors.isEmpty());\n     }\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         ConnInstance connectorInstance = connInstanceDAO.find(100L);\n \n         assertNotNull(\"findById did not work\", connectorInstance);\n@@ -60,7 +60,7 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void save()\n+    public void save()\n             throws ClassNotFoundException {\n \n         ConnInstance connectorInstance = new ConnInstance();\n@@ -131,7 +131,7 @@ public final void save()\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         ConnInstance connectorInstance = connInstanceDAO.find(100L);\n         assertNotNull(\"find to delete did not work\", connectorInstance);\n "},{"sha":"14f8065ae0a075638747013fb6f5cdf970224e67","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerAttrTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerAttrTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -53,23 +53,23 @@ public class DerAttrTest extends AbstractTest {\n     private DerSchemaDAO derSchemaDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<UDerAttr> list = derAttrDAO.findAll(\n                 UDerAttr.class);\n         assertEquals(\"did not get expected number of derived attributes \",\n                 1, list.size());\n     }\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         UDerAttr attribute = derAttrDAO.find(100L,\n                 UDerAttr.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attribute);\n     }\n \n     @Test\n-    public final void saveUDerAttribute()\n+    public void saveUDerAttribute()\n             throws ClassNotFoundException {\n         UDerSchema cnSchema =\n                 derSchemaDAO.find(\"cn\", UDerSchema.class);\n@@ -102,7 +102,7 @@ public final void saveUDerAttribute()\n     }\n \n     @Test\n-    public final void saveMDerAttribute()\n+    public void saveMDerAttribute()\n             throws ClassNotFoundException {\n         MDerSchema deriveddata =\n                 derSchemaDAO.find(\"mderiveddata\", MDerSchema.class);\n@@ -134,7 +134,7 @@ public final void saveMDerAttribute()\n     }\n \n     @Test\n-    public final void saveRDerAttribute()\n+    public void saveRDerAttribute()\n             throws ClassNotFoundException {\n         RDerSchema deriveddata =\n                 derSchemaDAO.find(\"rderiveddata\", RDerSchema.class);\n@@ -166,7 +166,7 @@ public final void saveRDerAttribute()\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         UDerAttr attribute = derAttrDAO.find(100L,\n                 UDerAttr.class);\n         String attributeSchemaName ="},{"sha":"4b8a2ce8b4ebfbca97e96726ec0b8d0fb97fd8c8","filename":"core/src/test/java/org/syncope/core/persistence/dao/DerSchemaTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerSchemaTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -34,22 +34,22 @@ public class DerSchemaTest extends AbstractTest {\n     private SchemaDAO schemaDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<UDerSchema> list =\n                 derSchemaDAO.findAll(UDerSchema.class);\n         assertEquals(3, list.size());\n     }\n \n     @Test\n-    public final void findByName() {\n+    public void findByName() {\n         UDerSchema attributeSchema =\n                 derSchemaDAO.find(\"cn\", UDerSchema.class);\n         assertNotNull(\"did not find expected derived attribute schema\",\n                 attributeSchema);\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         UDerSchema derivedAttributeSchema =\n                 new UDerSchema();\n         derivedAttributeSchema.setName(\"cn2\");\n@@ -64,7 +64,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         UDerSchema attributeSchema =\n                 derSchemaDAO.find(\"cn\", UDerSchema.class);\n "},{"sha":"886a638b792ee596a0de781a4b5ba319cc9e44fe","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -32,22 +32,22 @@ public class EntitlementTest extends AbstractTest {\n     private EntitlementDAO entitlementDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         // 59 real entitlements + 9 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n                 69, list.size());\n     }\n \n     @Test\n-    public final void findByName() {\n+    public void findByName() {\n         Entitlement entitlement = entitlementDAO.find(\"base\");\n         assertNotNull(\"did not find expected entitlement\",\n                 entitlement);\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         Entitlement entitlement = new Entitlement();\n         entitlement.setName(\"another\");\n \n@@ -59,7 +59,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         Entitlement entitlement = entitlementDAO.find(\"base\");\n         assertNotNull(\"did not find expected entitlement\",\n                 entitlement);"},{"sha":"9c1372b0675c349fc0a353a5e67dece7236a9f86","filename":"core/src/test/java/org/syncope/core/persistence/dao/MembershipTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -38,19 +38,19 @@ public class MembershipTest extends AbstractTest {\n     private RoleDAO roleDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<Membership> list = membershipDAO.findAll();\n         assertEquals(6, list.size());\n     }\n \n     @Test\n-    public final void find() {\n+    public void find() {\n         Membership membership = membershipDAO.find(1L);\n         assertNotNull(\"did not find expected membership\", membership);\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         SyncopeUser user = userDAO.find(4L);\n         SyncopeRole role = roleDAO.find(1L);\n \n@@ -65,7 +65,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         Membership membership = membershipDAO.find(4L);\n         membershipDAO.delete(membership.getId());\n "},{"sha":"7ee66b24529e0eec93c075c71e7dd04c41ace455","filename":"core/src/test/java/org/syncope/core/persistence/dao/NotificationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -48,7 +48,7 @@ public void find() {\n     }\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<Notification> notifications = notificationDAO.findAll();\n         assertNotNull(notifications);\n         assertFalse(notifications.isEmpty());"},{"sha":"ee032d6ae9e4f9279f8956c4762c3c8c5d480206","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -35,55 +35,55 @@ public class RoleTest extends AbstractTest {\n     private PolicyDAO policyDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<SyncopeRole> list = roleDAO.findAll();\n         assertEquals(\"did not get expected number of roles \", 9, list.size());\n     }\n \n     @Test\n-    public final void findChildren() {\n+    public void findChildren() {\n         assertEquals(2, roleDAO.findChildren(4L).size());\n     }\n \n     @Test\n-    public final void find() {\n+    public void find() {\n         SyncopeRole role = roleDAO.find(\"root\", null);\n         assertNotNull(\"did not find expected role\", role);\n         role = roleDAO.find(null, null);\n         assertNull(\"found role but did not expect it\", role);\n     }\n \n     @Test\n-    public final void inheritedAttributes() {\n+    public void inheritedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n         assertEquals(1, director.findInheritedAttributes().size());\n     }\n \n     @Test\n-    public final void inheritedDerivedAttributes() {\n+    public void inheritedDerivedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n         assertEquals(1, director.findInheritedDerivedAttributes().size());\n     }\n \n     @Test\n-    public final void inheritedVirtualAttributes() {\n+    public void inheritedVirtualAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n         assertEquals(1, director.findInheritedVirtualAttributes().size());\n     }\n \n     @Test\n-    public final void inheritedPolicy() {\n+    public void inheritedPolicy() {\n         SyncopeRole role = roleDAO.find(7L);\n \n         assertNotNull(role);\n \n         assertNotNull(role.getAccountPolicy());\n         assertNotNull(role.getPasswordPolicy());\n \n-        assertEquals(4L, (long) role.getPasswordPolicy().getId());\n+        assertEquals(Long.valueOf(4), role.getPasswordPolicy().getId());\n \n         role = roleDAO.find(5L);\n \n@@ -94,7 +94,7 @@ public final void inheritedPolicy() {\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         SyncopeRole role = new SyncopeRole();\n         role.setName(\"secondChild\");\n \n@@ -117,11 +117,11 @@ public final void save() {\n \n         assertNull(role.getPasswordPolicy());\n         assertNotNull(role.getAccountPolicy());\n-        assertEquals(6L, (long) role.getAccountPolicy().getId());\n+        assertEquals(Long.valueOf(6), role.getAccountPolicy().getId());\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         SyncopeRole role = roleDAO.find(4L);\n         roleDAO.delete(role.getId());\n \n@@ -130,6 +130,5 @@ public final void delete() {\n \n         SyncopeRole children = roleDAO.find(7L);\n         assertNull(\"delete of successors did not work\", children);\n-\n     }\n }"},{"sha":"ece7bbb0f2cd9ce109c15ac66723a09f5ae3e014","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskExecTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskExecTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -37,7 +37,7 @@ public class TaskExecTest extends AbstractTest {\n     private TaskDAO taskDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<TaskExec> list = taskExecDAO.findAll(PropagationTask.class);\n         assertEquals(1, list.size());\n \n@@ -52,7 +52,7 @@ public final void findAll() {\n     }\n \n     @Test\n-    public final void findLatestStarted() {\n+    public void findLatestStarted() {\n         PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n "},{"sha":"5dcca15bfade6179aaa33e541fbfec0e69075072","filename":"core/src/test/java/org/syncope/core/persistence/dao/TaskTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -49,15 +49,15 @@ public class TaskTest extends AbstractTest {\n     private UserDAO userDAO;\n \n     @Test\n-    public final void findWithoutExecs() {\n+    public void findWithoutExecs() {\n         List<PropagationTask> tasks =\n                 taskDAO.findWithoutExecs(PropagationTask.class);\n         assertNotNull(tasks);\n         assertEquals(3, tasks.size());\n     }\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<PropagationTask> plist = taskDAO.findAll(PropagationTask.class);\n         assertEquals(4, plist.size());\n \n@@ -78,7 +78,7 @@ public final void findAll() {\n     }\n \n     @Test\n-    public final void savePropagationTask() {\n+    public void savePropagationTask() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n@@ -107,7 +107,7 @@ public final void savePropagationTask() {\n     }\n \n     @Test\n-    public final void saveSyncTask() {\n+    public void saveSyncTask() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n@@ -157,7 +157,7 @@ public final void saveSyncTask() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n "},{"sha":"375767b5965015b01b16c33a5db09c9896eefb5b","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -53,7 +53,7 @@ public class UserSearchTest {\n     private EntitlementDAO entitlementDAO;\n \n     @Test\n-    public final void matches() {\n+    public void matches() {\n         SyncopeUser user = userDAO.find(1L);\n         assertNotNull(user);\n \n@@ -70,7 +70,7 @@ public final void matches() {\n     }\n \n     @Test\n-    public final void searchWithLikeCondition() {\n+    public void searchWithLikeCondition() {\n         AttributeCond fullnameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond.setSchema(\"fullname\");\n@@ -101,7 +101,7 @@ public final void searchWithLikeCondition() {\n     }\n \n     @Test\n-    public final void searchWithNotCondition() {\n+    public void searchWithNotCondition() {\n         final AttributeCond fullnameLeafCond =\n                 new AttributeCond(AttributeCond.Type.EQ);\n         fullnameLeafCond.setSchema(\"fullname\");\n@@ -123,7 +123,7 @@ public final void searchWithNotCondition() {\n     }\n \n     @Test\n-    public final void searchByBoolean() {\n+    public void searchByBoolean() {\n         final AttributeCond coolLeafCond =\n                 new AttributeCond(AttributeCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n@@ -141,7 +141,7 @@ public final void searchByBoolean() {\n     }\n \n     @Test\n-    public final void searchByPageAndSize() {\n+    public void searchByPageAndSize() {\n         AttributeCond fullnameLeafCond =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond.setSchema(\"fullname\");\n@@ -179,7 +179,7 @@ public final void searchByPageAndSize() {\n     }\n \n     @Test\n-    public final void searchByMembership() {\n+    public void searchByMembership() {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n \n@@ -330,7 +330,7 @@ public void searchById() {\n     }\n \n     @Test\n-    public final void issue202() {\n+    public void issue202() {\n         final ResourceCond ws2 = new ResourceCond();\n         ws2.setResourceName(\"ws-target-resource-2\");\n \n@@ -351,7 +351,7 @@ public final void issue202() {\n     }\n \n     @Test\n-    public final void issue242() {\n+    public void issue242() {\n         final SyncopeUserCond cond =\n                 new SyncopeUserCond(AttributeCond.Type.LIKE);\n         cond.setSchema(\"id\");"},{"sha":"624321cdc054fdc20ceaea2204e233210bd3d0f9","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirAttrTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirAttrTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -50,23 +50,23 @@ public class VirAttrTest extends AbstractTest {\n     private VirSchemaDAO virSchemaDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<UVirAttr> list = virAttrDAO.findAll(UVirAttr.class);\n         assertEquals(\n                 \"did not get expected number of derived attributes \",\n                 1, list.size());\n     }\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n         assertNotNull(\n                 \"did not find expected attribute schema\",\n                 attribute);\n     }\n \n     @Test\n-    public final void saveUVirAttribute()\n+    public void saveUVirAttribute()\n             throws ClassNotFoundException {\n         UVirSchema virtualSchema =\n                 virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n@@ -88,7 +88,7 @@ public final void saveUVirAttribute()\n     }\n \n     @Test\n-    public final void saveMVirAttribute()\n+    public void saveMVirAttribute()\n             throws ClassNotFoundException {\n \n         MVirSchema virtualSchema = new MVirSchema();\n@@ -110,7 +110,7 @@ public final void saveMVirAttribute()\n     }\n \n     @Test\n-    public final void saveRVirAttribute()\n+    public void saveRVirAttribute()\n             throws ClassNotFoundException {\n \n         RVirSchema virtualSchema = new RVirSchema();\n@@ -132,7 +132,7 @@ public final void saveRVirAttribute()\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n         String attributeSchemaName = attribute.getVirtualSchema().getName();\n "},{"sha":"0937945696c7c5e5ab1deae749f2d36067fdc932","filename":"core/src/test/java/org/syncope/core/persistence/dao/VirSchemaTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -34,22 +34,22 @@ public class VirSchemaTest extends AbstractTest {\n     private SchemaDAO schemaDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<UVirSchema> list =\n                 virSchemaDAO.findAll(UVirSchema.class);\n         assertEquals(1, list.size());\n     }\n \n     @Test\n-    public final void findByName() {\n+    public void findByName() {\n         UVirSchema attributeSchema =\n                 virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n         assertNotNull(\"did not find expected virtual attribute schema\",\n                 attributeSchema);\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         UVirSchema virtualAttributeSchema =\n                 new UVirSchema();\n         virtualAttributeSchema.setName(\"virtual\");\n@@ -63,7 +63,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         UVirSchema attributeSchema =\n                 virSchemaDAO.find(\"virtualdata\", UVirSchema.class);\n "},{"sha":"f7e08e6251462679fdde7892f3fe621407c178ef","filename":"core/src/test/java/org/syncope/core/persistence/relationships/AttrTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttrTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -64,7 +64,7 @@ public class AttrTest extends AbstractTest {\n     private UserDAO userDAO;\n \n     @Test\n-    public final void deleteAttribute() {\n+    public void deleteAttribute() {\n         attrDAO.delete(550L, UAttr.class);\n \n         attrDAO.flush();\n@@ -74,7 +74,7 @@ public final void deleteAttribute() {\n     }\n \n     @Test\n-    public final void deleteAttributeValue() {\n+    public void deleteAttributeValue() {\n         UAttrValue value =\n                 attrValueDAO.find(20L, UAttrValue.class);\n         int attributeValueNumber =\n@@ -92,7 +92,7 @@ public final void deleteAttributeValue() {\n     }\n \n     @Test\n-    public final void checkForEnumType() {\n+    public void checkForEnumType() {\n         MSchema schema = new MSchema();\n         schema.setType(SchemaType.Enum);\n         schema.setName(\"color\");"},{"sha":"4a6927c7843aa3afc6b4622df12688f1bca8e183","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FConnInstanceTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -37,7 +37,7 @@ public class ConnInstanceTest extends AbstractTest {\n     private ConnInstanceDAO connInstanceDAO;\n \n     @Test\n-    public final void deleteCascade() {\n+    public void deleteCascade() {\n         ConnInstance connInstance = connInstanceDAO.find(103L);\n         assertNotNull(connInstance);\n "},{"sha":"7b57150fc8205fdee3e52994e64c877cec5d1cc0","filename":"core/src/test/java/org/syncope/core/persistence/relationships/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FDerSchemaTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -40,7 +40,7 @@ public class DerSchemaTest extends AbstractTest {\n     private DerAttrDAO derAttrDAO;\n \n     @Test\n-    public final void test() {\n+    public void test() {\n         UDerSchema schema = derSchemaDAO.find(\"cn\", UDerSchema.class);\n \n         derSchemaDAO.delete(schema.getName(), AttributableUtil.USER);"},{"sha":"887ab931fc56b2484943ffc762ceb9d52bc60afe","filename":"core/src/test/java/org/syncope/core/persistence/relationships/MembershipTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -36,7 +36,7 @@ public class MembershipTest extends AbstractTest {\n     private RoleDAO syncopeRoleDAO;\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         Membership membership = membershipDAO.find(4L);\n         SyncopeUser user = membership.getSyncopeUser();\n         SyncopeRole role = membership.getSyncopeRole();\n@@ -54,7 +54,7 @@ public final void delete() {\n     }\n \n     @Test\n-    public final void deleteAndCreate() {\n+    public void deleteAndCreate() {\n         Membership membership = membershipDAO.find(3L);\n         SyncopeUser user = membership.getSyncopeUser();\n         SyncopeRole role = membership.getSyncopeRole();"},{"sha":"108cdf3c2680fbf55b079082426c77617602034b","filename":"core/src/test/java/org/syncope/core/persistence/relationships/RoleTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FRoleTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -57,7 +57,7 @@ public class RoleTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    public final void createWithPasswordPolicy() {\n+    public void createWithPasswordPolicy() {\n         final String ROLE_NAME = \"roleWithPasswordPolicy\";\n \n         PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n@@ -79,7 +79,7 @@ public final void createWithPasswordPolicy() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         roleDAO.delete(2L);\n \n         roleDAO.flush();"},{"sha":"4ed394feafa5b01634f696f6bc8220d20458392b","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -52,7 +52,7 @@ public class SchemaTest extends AbstractTest {\n     private ResourceDAO resourceDAO;\n \n     @Test\n-    public final void test1() {\n+    public void test1() {\n         // search for user schema fullname\n         USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n "},{"sha":"2b676a9b25e4f6037c48d4b89dc6c0f3151d00ed","filename":"core/src/test/java/org/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -54,7 +54,7 @@ public class TaskTest extends AbstractTest {\n     private UserDAO userDAO;\n \n     @Test\n-    public final void read() {\n+    public void read() {\n         PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n \n@@ -64,7 +64,7 @@ public final void read() {\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n@@ -99,7 +99,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void addPropagationTaskExecution() {\n+    public void addPropagationTaskExecution() {\n         PropagationTask task = taskDAO.find(1L);\n         assertNotNull(task);\n \n@@ -122,7 +122,7 @@ public final void addPropagationTaskExecution() {\n     }\n \n     @Test\n-    public final void addSyncTaskExecution() {\n+    public void addSyncTaskExecution() {\n         SyncTask task = taskDAO.find(4L);\n         assertNotNull(task);\n \n@@ -145,7 +145,7 @@ public final void addSyncTaskExecution() {\n     }\n \n     @Test\n-    public final void deleteTask() {\n+    public void deleteTask() {\n         taskDAO.delete(1L);\n \n         taskDAO.flush();\n@@ -155,7 +155,7 @@ public final void deleteTask() {\n     }\n \n     @Test\n-    public final void deleteTaskExecution() {\n+    public void deleteTaskExecution() {\n         TaskExec execution = taskExecDAO.find(1L);\n         int executionNumber = execution.getTask().getExecs().size();\n "},{"sha":"6ef18e3d98f8deee64f13be1be159b06d6fe0896","filename":"core/src/test/java/org/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -50,7 +50,7 @@ public class UserTest extends AbstractTest {\n     private AttrValueDAO attrValueDAO;\n \n     @Test\n-    public final void test() {\n+    public void test() {\n         userDAO.delete(4L);\n \n         userDAO.flush();"},{"sha":"1565f3828efab3f9ecdd20b02ac5ec6980e5f855","filename":"core/src/test/java/org/syncope/core/rest/LogTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLogTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLogTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FLogTestITCase.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -25,7 +25,7 @@\n public class LogTestITCase extends AbstractTest {\n \n     @Test\n-    public final void list() {\n+    public void list() {\n         List<LoggerTO> loggers = Arrays.asList(\n                 restTemplate.getForObject(\n                 BASE_URL + \"log/controller/list\", LoggerTO[].class));\n@@ -36,7 +36,7 @@ public final void list() {\n         }\n     }\n \n-    public final void setLoggerLevel() {\n+    public void setLoggerLevel() {\n         LoggerTO logger = restTemplate.postForObject(\n                 BASE_URL + \"log/controller/{name}/{level}\",\n                 null, LoggerTO.class, \"org.syncope.core.monitor\", \"INFO\");"},{"sha":"b74b6acf8a62a4cd19724db167cddae6bcb04b7d","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -32,7 +32,7 @@\n public class PolicyTestITCase extends AbstractTest {\n \n     @Test\n-    public final void listByType() {\n+    public void listByType() {\n         List<SyncPolicyTO> policyTOs = Arrays.asList(restTemplate.getForObject(\n                 BASE_URL + \"policy/{kind}/list\",\n                 SyncPolicyTO[].class, PolicyType.SYNC.toString()));\n@@ -42,15 +42,15 @@ public final void listByType() {\n     }\n \n     @Test\n-    public final void read() {\n+    public void read() {\n         SyncPolicyTO policyTO = restTemplate.getForObject(\n                 BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 1L);\n \n         assertNotNull(policyTO);\n     }\n \n     @Test\n-    public final void getGlobalPasswordPolicy() {\n+    public void getGlobalPasswordPolicy() {\n         PasswordPolicyTO policyTO = restTemplate.getForObject(\n                 BASE_URL + \"policy/password/global/read\",\n                 PasswordPolicyTO.class);\n@@ -62,7 +62,7 @@ public final void getGlobalPasswordPolicy() {\n     }\n \n     @Test\n-    public final void getGlobalAccountPolicy() {\n+    public void getGlobalAccountPolicy() {\n         AccountPolicyTO policyTO = restTemplate.getForObject(\n                 BASE_URL + \"policy/account/global/read\", AccountPolicyTO.class);\n \n@@ -71,7 +71,7 @@ public final void getGlobalAccountPolicy() {\n     }\n \n     @Test\n-    public final void createWithException() {\n+    public void createWithException() {\n         PasswordPolicyTO policy = new PasswordPolicyTO(true);\n         policy.setSpecification(new PasswordPolicySpec());\n         policy.setDescription(\"global password policy\");\n@@ -90,7 +90,7 @@ public final void createWithException() {\n     }\n \n     @Test\n-    public final void createMissingDescription() {\n+    public void createMissingDescription() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n \n@@ -108,7 +108,7 @@ public final void createMissingDescription() {\n     }\n \n     @Test\n-    public final void create() {\n+    public void create() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n         policy.setDescription(\"Sync policy\");\n@@ -121,7 +121,7 @@ public final void create() {\n     }\n \n     @Test\n-    public final void update() {\n+    public void update() {\n         // get global password\n         PasswordPolicyTO globalPolicy = restTemplate.getForObject(\n                 BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, 2L);\n@@ -160,7 +160,7 @@ public final void update() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         final PolicyTO policyTO = restTemplate.getForObject(\n                 BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 7L);\n "},{"sha":"275b8e22b1ed115fe974fd954ee24147f3f02003","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -51,7 +51,7 @@ public void create() {\n     }\n \n     @Test\n-    public final void createWithNotPermittedName() {\n+    public void createWithNotPermittedName() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"failedLogins\");\n         schemaTO.setType(SchemaType.String);\n@@ -72,7 +72,7 @@ public final void createWithNotPermittedName() {\n     }\n \n     @Test\n-    public final void createREnumWithoutEnumeration() {\n+    public void createREnumWithoutEnumeration() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"enumcheck\");\n         schemaTO.setType(SchemaType.Enum);\n@@ -94,7 +94,7 @@ public final void createREnumWithoutEnumeration() {\n     }\n \n     @Test\n-    public final void createUEnumWithoutEnumeration() {\n+    public void createUEnumWithoutEnumeration() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"enumcheck\");\n         schemaTO.setType(SchemaType.Enum);"},{"sha":"4124ce9a06371833ba2705d0b388bd7d83226efa","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c3c23422b282cabe9b5e861c78cc18a8ac53cd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=72c3c23422b282cabe9b5e861c78cc18a8ac53cd","patch":"@@ -35,7 +35,7 @@\n public class TaskTestITCase extends AbstractTest {\n \n     @Test\n-    public final void create() {\n+    public void create() {\n         SyncTaskTO task = new SyncTaskTO();\n         task.setResource(\"ws-target-resource-2\");\n \n@@ -60,7 +60,7 @@ public final void create() {\n     }\n \n     @Test\n-    public final void update() {\n+    public void update() {\n         SchedTaskTO task = restTemplate.getForObject(\n                 BASE_URL + \"task/read/{taskId}\", SchedTaskTO.class,\n                 5);\n@@ -79,15 +79,15 @@ public final void update() {\n     }\n \n     @Test\n-    public final void count() {\n+    public void count() {\n         Integer count = restTemplate.getForObject(\n                 BASE_URL + \"task/propagation/count.json\", Integer.class);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n-    public final void list() {\n+    public void list() {\n         List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n                 BASE_URL + \"task/propagation/list\", PropagationTaskTO[].class));\n@@ -99,7 +99,7 @@ public final void list() {\n     }\n \n     @Test\n-    public final void paginatedList() {\n+    public void paginatedList() {\n         List<PropagationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(\n                 BASE_URL + \"task/propagation/list/{page}/{size}.json\",\n                 PropagationTaskTO[].class, 1, 2));\n@@ -132,7 +132,7 @@ public final void paginatedList() {\n     }\n \n     @Test\n-    public final void listExecutions() {\n+    public void listExecutions() {\n         List<TaskExecTO> executions = Arrays.asList(\n                 restTemplate.getForObject(\n                 BASE_URL + \"task/propagation/execution/list\",\n@@ -145,7 +145,7 @@ public final void listExecutions() {\n     }\n \n     @Test\n-    public final void read() {\n+    public void read() {\n         PropagationTaskTO taskTO = restTemplate.getForObject(\n                 BASE_URL + \"task/read/{taskId}\", PropagationTaskTO.class, 3);\n \n@@ -155,15 +155,15 @@ public final void read() {\n     }\n \n     @Test\n-    public final void readExecution() {\n+    public void readExecution() {\n         TaskExecTO taskTO = restTemplate.getForObject(\n                 BASE_URL + \"task/execution/read/{taskId}\",\n                 TaskExecTO.class, 1);\n         assertNotNull(taskTO);\n     }\n \n     @Test\n-    public final void deal() {\n+    public void deal() {\n         try {\n             restTemplate.delete(BASE_URL + \"task/delete/{taskId}\", 0);\n         } catch (HttpStatusCodeException e) {"}]}