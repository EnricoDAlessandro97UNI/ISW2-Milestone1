{"sha":"b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI0Y2IxY2RjODVkNGE3YTUwODE5MjRhYWEwYzNkM2Q2ZTdhODZiYzM=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-29T09:25:43Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-29T09:43:33Z"},"message":"[SYNCOPE-1316] Added PullActions to handle the id provided by ServiceNow in response, also during Pull Tasks","tree":{"sha":"a34f9430645774a2a9b38a15f17ad6c412199b8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a34f9430645774a2a9b38a15f17ad6c412199b8a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"057d13fb694c3e2178f2d960e9f33d3eb4ef2196","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/057d13fb694c3e2178f2d960e9f33d3eb4ef2196","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/057d13fb694c3e2178f2d960e9f33d3eb4ef2196"}],"stats":{"total":164,"additions":163,"deletions":1},"files":[{"sha":"a477aa53ddc876f86933a83729b606b35d7d79db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SCIMv11PullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSCIMv11PullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSCIMv11PullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSCIMv11PullActions.java?ref=b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3","patch":"@@ -130,7 +130,7 @@ public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutio\n             } else {\n                 AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n \n-                // 1. stores the __UID__ received by SCIM\n+                // stores the __UID__ received by SCIM\n                 PlainSchema scimId = plainSchemaDAO.find(getSCIMIdSchema());\n                 if (scimId == null) {\n                     LOG.error(\"Could not find schema {}, skipping\", getSCIMIdSchema());"},{"sha":"1d805e28fb4d3b4242eb1265a3febedc13566007","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/ServiceNowPullActions.java","status":"added","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FServiceNowPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FServiceNowPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FServiceNowPullActions.java?ref=b4cb1cdc85d4a7a5081924aaa0c3d3d6e7a86bc3","patch":"@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * This class is required during setup of an External Resource based on the ConnId\n+ * <a href=\"https://github.com/Tirasa/ConnIdServiceNowBundle\">ServiceNow connector</a>.\n+ *\n+ * It manages:\n+ * <ol>\n+ * <li>the id provided by ServiceNow in response to create, which will need to be used for all subsequent\n+ * operations</li>\n+ * </ol>\n+ */\n+public class ServiceNowPullActions implements PullActions {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ServiceNowPullActions.class);\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private final Map<String, String> serviceNowRefs = new HashMap<>();\n+\n+    protected String getServiceNowIdSchema() {\n+        return \"ServiceNowUserId\";\n+    }\n+\n+    @Override\n+    public void beforeProvision(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity) throws JobExecutionException {\n+\n+        if (entity instanceof UserTO) {\n+            UserTO userTO = (UserTO) entity;\n+            if (userTO.getUsername() == null) {\n+                userTO.setUsername(delta.getObject().getName().getNameValue());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public <P extends AnyPatch> void beforeUpdate(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity,\n+            final P anyPatch) throws JobExecutionException {\n+\n+        if (anyPatch instanceof UserPatch) {\n+            UserPatch userPatch = (UserPatch) anyPatch;\n+            if (userPatch.getUsername() == null) {\n+                userPatch.setUsername(new StringReplacePatchItem.Builder().\n+                        value(delta.getObject().getName().getNameValue()).build());\n+            }\n+        }\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void after(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity,\n+            final ProvisioningReport result) throws JobExecutionException {\n+\n+        if (!(entity instanceof UserTO)) {\n+            return;\n+        }\n+\n+        serviceNowRefs.put(entity.getKey(), delta.getUid().getUidValue());\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n+        for (Map.Entry<String, String> entry : serviceNowRefs.entrySet()) {\n+            User user = userDAO.find(entry.getKey());\n+            if (user == null) {\n+                LOG.error(\"Could not find user {}, skipping\", entry.getKey());\n+            } else {\n+                AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n+\n+                // stores the __UID__ received by ServiceNow\n+                PlainSchema serviceNowId = plainSchemaDAO.find(getServiceNowIdSchema());\n+                if (serviceNowId == null) {\n+                    LOG.error(\"Could not find schema {}, skipping\", getServiceNowIdSchema());\n+                } else {\n+                    UPlainAttr attr = user.getPlainAttr(getServiceNowIdSchema()).orElse(null);\n+                    if (attr == null) {\n+                        attr = entityFactory.newEntity(UPlainAttr.class);\n+                        attr.setSchema(serviceNowId);\n+                        attr.setOwner(user);\n+                        user.add(attr);\n+\n+                        try {\n+                            attr.add(entry.getValue(), anyUtils);\n+                            userDAO.save(user);\n+                        } catch (InvalidPlainAttrValueException e) {\n+                            LOG.error(\"Invalid value for attribute {}: {}\",\n+                                    serviceNowId.getKey(), entry.getValue(), e);\n+                        }\n+                    } else {\n+                        LOG.debug(\"User {} has already a {} assigned: {}\", user, getServiceNowIdSchema(),\n+                                attr.getValuesAsStrings());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+}"}]}