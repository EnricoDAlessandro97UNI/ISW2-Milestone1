{"sha":"5af121463d1f29cf2fc4d0b38510492099f70fd8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVhZjEyMTQ2M2QxZjI5Y2YyZmM0ZDBiMzg1MTA0OTIwOTlmNzBmZDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-06-12T14:02:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-06-12T14:02:38Z"},"message":"[SYNCOPE-394] Adding new AbstractTransactionalTaskJob class for jobs needing to execute in transaction\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1492210 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"82130a29602da204c1f9ec091129339d41791f69","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/82130a29602da204c1f9ec091129339d41791f69"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5af121463d1f29cf2fc4d0b38510492099f70fd8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5af121463d1f29cf2fc4d0b38510492099f70fd8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5af121463d1f29cf2fc4d0b38510492099f70fd8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5af121463d1f29cf2fc4d0b38510492099f70fd8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f2490e7050b59abbdc9613668d49837fa84927c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7f2490e7050b59abbdc9613668d49837fa84927c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7f2490e7050b59abbdc9613668d49837fa84927c"}],"stats":{"total":117,"additions":96,"deletions":21},"files":[{"sha":"5a4c0272152055e75f8ec94f06dc834e8ca19b5e","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -25,15 +25,13 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.syncope.core.notification.NotificationJob;\n import org.apache.syncope.core.persistence.validation.attrvalue.Validator;\n import org.apache.syncope.core.propagation.PropagationActions;\n-import org.apache.syncope.core.report.ReportJob;\n+import org.apache.syncope.core.quartz.TaskJob;\n import org.apache.syncope.core.report.Reportlet;\n import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.SyncCorrelationRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n-import org.quartz.Job;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -53,7 +51,7 @@ public class ImplementationClassNamesLoader {\n     public enum Type {\n \n         REPORTLET,\n-        JOB,\n+        TASKJOB,\n         SYNC_ACTIONS,\n         SYNC_CORRELATION_RULES,\n         PROPAGATION_ACTIONS,\n@@ -91,12 +89,10 @@ public void load() {\n                         classNames.get(Type.REPORTLET).add(clazz.getName());\n                     }\n \n-                    if ((interfaces.contains(Job.class))\n-                            && !metadata.isAbstract() && !SyncJob.class.getName().equals(metadata.getClassName())\n-                            && !ReportJob.class.getName().equals(metadata.getClassName())\n-                            && !NotificationJob.class.getName().equals(metadata.getClassName())) {\n+                    if ((interfaces.contains(TaskJob.class))\n+                            && !metadata.isAbstract() && !SyncJob.class.getName().equals(metadata.getClassName())) {\n \n-                        classNames.get(Type.JOB).add(metadata.getClassName());\n+                        classNames.get(Type.TASKJOB).add(metadata.getClassName());\n                     }\n \n                     if (interfaces.contains(SyncActions.class) && !metadata.isAbstract()) {"},{"sha":"8d9b6b4a0ea168382734204c325f23caee567f2c","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.init;\n \n+import static org.apache.syncope.core.init.JobInstanceLoader.getJobName;\n+import static org.apache.syncope.core.init.JobInstanceLoader.getTriggerName;\n+\n+import java.lang.reflect.InvocationTargetException;\n import java.text.ParseException;\n import java.util.HashSet;\n import java.util.Set;\n@@ -33,6 +37,7 @@\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.quartz.AbstractTaskJob;\n+import org.apache.syncope.core.quartz.TaskJob;\n import org.apache.syncope.core.report.ReportJob;\n import org.apache.syncope.core.sync.DefaultSyncActions;\n import org.apache.syncope.core.sync.SyncActions;\n@@ -155,14 +160,24 @@ private void registerJob(final String jobName, final Job jobInstance, final Stri\n     }\n \n     public void registerJob(final Task task, final String jobClassName, final String cronExpression)\n-            throws ClassNotFoundException, SchedulerException, ParseException {\n+            throws ClassNotFoundException, SchedulerException, IllegalArgumentException, InvocationTargetException, IllegalAccessException, ParseException, NoSuchMethodException {\n \n         Class jobClass = Class.forName(jobClassName);\n-        Job jobInstance = (Job) ApplicationContextProvider.getBeanFactory().\n+        TaskJob jobInstance = (TaskJob) ApplicationContextProvider.getBeanFactory().\n                 createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        if (jobInstance instanceof AbstractTaskJob) {\n-            ((AbstractTaskJob) jobInstance).setTaskId(task.getId());\n-        }\n+        \n+        LOG.info(\"XXXXXXXXXXXXXXXXx {} {} {}\", jobClassName, jobInstance.getClass().getName(), task.getId());\n+        \n+//        if (AbstractTaskJob.class.isAssignableFrom(jobClass)) {\n+            LOG.info(\"QQQQQQQQ DENTRO\");\n+//            MethodInvoker invoker = new MethodInvoker();\n+//invoker.setTargetMethod(\"setTaskId\");\n+//invoker.setTargetObject(jobInstance);\n+//invoker.setArguments(new Object[]{task.getId()});\n+//invoker.prepare();\n+//invoker.invoke();\n+            jobInstance.setTaskId(task.getId());\n+//        }\n         if (jobInstance instanceof SyncJob && task instanceof SyncTask) {\n             String jobActionsClassName = ((SyncTask) task).getActionsClassName();\n             Class syncActionsClass = DefaultSyncActions.class;"},{"sha":"9455d16874219327d5bd92bb041c4549a247ed1f","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTaskJob.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTaskJob.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -27,19 +27,22 @@\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.Job;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n- * Base job implementation that delegates to concrete implementation the actual job execution and provides some\n- * background settings (like as the corresponding Task, for example).\n+ * Abstract job implementation that delegates to concrete implementation the actual job execution and provides some\n+ * base features.\n+ * <strong>Extending ttis class will not provide support transaction management.</strong><br/>\n+ * Extend <tt>AbstractTransactionalTaskJob</tt> for this purpose.\n+ *\n+ * @see AbstractTransactionalTaskJob\n  */\n @DisallowConcurrentExecution\n-public abstract class AbstractTaskJob implements Job {\n+public abstract class AbstractTaskJob implements TaskJob {\n \n     public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n \n@@ -85,12 +88,13 @@ public enum Status {\n      *\n      * @param taskId to be set\n      */\n+    @Override\n     public void setTaskId(final Long taskId) {\n         this.taskId = taskId;\n     }\n \n     @Override\n-    public final void execute(final JobExecutionContext context) throws JobExecutionException {\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n         task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new JobExecutionException(\"Task \" + taskId + \" not found\");"},{"sha":"ff4ebafe3163fe833b699f859696edf14e8693ff","filename":"core/src/main/java/org/apache/syncope/core/quartz/AbstractTransactionalTaskJob.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTransactionalTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTransactionalTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FAbstractTransactionalTaskJob.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.quartz;\n+\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public abstract class AbstractTransactionalTaskJob extends AbstractTaskJob {\n+\n+    @Transactional\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        super.execute(context);\n+    }\n+}"},{"sha":"d3656b78ff79624955e668255235fd75ad34518b","filename":"core/src/main/java/org/apache/syncope/core/quartz/SampleJob.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FSampleJob.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -31,7 +31,6 @@ public class SampleJob extends AbstractTaskJob {\n \n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n-\n         if (!(task instanceof SchedTask)) {\n             throw new JobExecutionException(\"Task \" + taskId + \" isn't a SchedTask\");\n         }"},{"sha":"74236905a4451f21432a95b1f76dee7c55fb5b1d","filename":"core/src/main/java/org/apache/syncope/core/quartz/TaskJob.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fquartz%2FTaskJob.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.quartz;\n+\n+import org.quartz.Job;\n+\n+/**\n+ * Interface for Quartz jobs bound to a given Task.\n+ */\n+public interface TaskJob extends Job {\n+\n+    void setTaskId(Long taskId);\n+}"},{"sha":"b94cd4c133ad190d954fa044cca26c7919ce871b","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5af121463d1f29cf2fc4d0b38510492099f70fd8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=5af121463d1f29cf2fc4d0b38510492099f70fd8","patch":"@@ -229,7 +229,7 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind, @PathVariable(\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\n     public ModelAndView getJobClasses() {\n-        Set<String> jobClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.JOB);\n+        Set<String> jobClasses = classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOB);\n \n         auditManager.audit(Category.task, TaskSubCategory.getJobClasses, Result.success,\n                 \"Successfully listed all Job classes: \" + jobClasses.size());"}]}