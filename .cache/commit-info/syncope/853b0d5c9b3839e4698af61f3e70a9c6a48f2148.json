{"sha":"853b0d5c9b3839e4698af61f3e70a9c6a48f2148","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1M2IwZDVjOWIzODM5ZTQ2OThhZjYxZjNlNzBhOWM2YTQ4ZjIxNDg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-25T16:04:57Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-25T16:04:57Z"},"message":"Some of the RESTful user related methods implemented (with related test cases)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246248 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fd5f80a9afe0a75ef0e28c85c66287f0b36504cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fd5f80a9afe0a75ef0e28c85c66287f0b36504cd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/853b0d5c9b3839e4698af61f3e70a9c6a48f2148","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/853b0d5c9b3839e4698af61f3e70a9c6a48f2148","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/853b0d5c9b3839e4698af61f3e70a9c6a48f2148","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/comments","author":null,"committer":null,"parents":[{"sha":"9386dc0e1421b46c08278a3fb427365e41729ac5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9386dc0e1421b46c08278a3fb427365e41729ac5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9386dc0e1421b46c08278a3fb427365e41729ac5"}],"stats":{"total":454,"additions":390,"deletions":64},"files":[{"sha":"727f875068f4bd5ef304f20b120b45639f64518b","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":42,"deletions":9,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.client.to;\n \n+import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -22,13 +23,17 @@ public class UserTO extends AbstractBaseTO {\n \n     private long id;\n     private String password;\n-    private Set<String> roles;\n+    private Map<String, String> roles;\n     private Map<String, Set<String>> attributes;\n-    private Map<String, Set<String>> derivedAttributes;\n+    private Map<String, String> derivedAttributes;\n+    private Date creationTime;\n+    private String token;\n+    private Date tokenExpireTime;\n \n     public UserTO() {\n+        roles = new HashMap<String, String>();\n         attributes = new HashMap<String, Set<String>>();\n-        derivedAttributes = new HashMap<String, Set<String>>();\n+        derivedAttributes = new HashMap<String, String>();\n     }\n \n     public long getId() {\n@@ -47,19 +52,19 @@ public void setPassword(String password) {\n         this.password = password;\n     }\n \n-    public boolean addRole(String role) {\n-        return roles.add(role);\n+    public String addRole(String role, String parent) {\n+        return roles.put(role, parent);\n     }\n \n-    public boolean removeRole(String role) {\n+    public String removeRole(String role) {\n         return roles.remove(role);\n     }\n \n-    public Set<String> getRoles() {\n+    public Map<String, String> getRoles() {\n         return roles;\n     }\n \n-    public void setRoles(Set<String> roles) {\n+    public void setRoles(Map<String, String> roles) {\n         this.roles = roles;\n     }\n \n@@ -79,7 +84,35 @@ public void setAttributes(Map<String, Set<String>> attributes) {\n         this.attributes = attributes;\n     }\n \n-    public Map<String, Set<String>> getDerivedAttributes() {\n+    public Map<String, String> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n+\n+    public void setDerivedAttributes(Map<String, String> derivedAttributes) {\n+        this.derivedAttributes = derivedAttributes;\n+    }\n+\n+    public Date getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    public void setCreationTime(Date creationTime) {\n+        this.creationTime = creationTime;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    public void setToken(String token) {\n+        this.token = token;\n+    }\n+\n+    public Date getTokenExpireTime() {\n+        return tokenExpireTime;\n+    }\n+\n+    public void setTokenExpireTime(Date tokenExpireTime) {\n+        this.tokenExpireTime = tokenExpireTime;\n+    }\n }"},{"sha":"f711a1d664b2a3b3509de392ad6bddf72ed2f8c9","filename":"client/src/main/java/org/syncope/types/AttributeType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributeType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributeType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAttributeType.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -42,9 +42,11 @@ public Format getBasicFormatter() {\n             switch (this) {\n                 case Date:\n                     this.formatter = new SimpleDateFormat();\n+                    break;\n                 case Long:\n                 case Double:\n                     this.formatter = new DecimalFormat();\n+                    break;\n             }\n         }\n "},{"sha":"b8db64aeba16aae61acf5497440a8f1c77f585d4","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -29,7 +29,7 @@\n \n     <bean id=\"restClient\" class=\"org.syncope.console.rest.RestClient\">\n         <property name=\"restTemplate\" ref=\"restTemplate\"/>\n-        <property name=\"baseURL\" value=\"<%SYNCOPE_BASE_URL%>\"/>\n+        <property name=\"baseURL\" value=\"http://localhost:8080/syncope/\"/>\n     </bean>\n \n     <bean id=\"schemaRestClient\" class=\"org.syncope.console.rest.SchemaRestClient\">"},{"sha":"5fd8bf63e3d0381722ade8c16417d53991cecc08","filename":"console/src/main/webapp/WEB-INF/sun-web.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/console%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/console%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -16,4 +16,4 @@\n <sun-web-app error-url=\"\">\n     <context-root>/syncope-console</context-root>\n     <class-loader delegate=\"false\"/>\n-</sun-web-app>\n\\ No newline at end of file\n+</sun-web-app>"},{"sha":"ea1684366d5e93a97d74bfaa0e6e2e439fb3624e","filename":"core/pom.xml","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -451,6 +451,11 @@\n             <plugin>\n                 <groupId>org.codehaus.mojo</groupId>\n                 <artifactId>failsafe-maven-plugin</artifactId>\n+                <inherited>true</inherited>\n+                <configuration>\n+                    <redirectTestOutputToFile>true</redirectTestOutputToFile>\n+                    <encoding>utf-8</encoding>\n+                </configuration>\n                 <executions>\n                     <execution>\n                         <id>verify</id>\n@@ -459,9 +464,6 @@\n                         </goals>\n                     </execution>\n                 </executions>\n-                <configuration>\n-                    <encoding>utf-8</encoding>\n-                </configuration>\n             </plugin>\n \n             <plugin>"},{"sha":"bf83d3a8491605d237a5e129ddc0bfdfbd7f12cf","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttribute.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -14,6 +14,9 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n@@ -72,6 +75,44 @@ public <T extends AbstractAttributeValue> void removeValue(\n \n     public abstract Set<? extends AbstractAttributeValue> getAttributeValues();\n \n+    public Set<String> getStringAttributeValues() {\n+        Set<? extends AbstractAttributeValue> values = getAttributeValues();\n+        Set<String> result = new HashSet<String>(values.size());\n+\n+        String stringValue = \"\";\n+        for (AbstractAttributeValue attributeValue : values) {\n+            switch (getSchema().getType()) {\n+\n+                case String:\n+                    stringValue = (String) attributeValue.getValue();\n+                    break;\n+\n+                case Boolean:\n+                    stringValue = ((Boolean) attributeValue.getValue()).toString();\n+                    break;\n+\n+                case Long:\n+                    stringValue = getSchema().getFormatter(\n+                            DecimalFormat.class).format(attributeValue.getValue());\n+                    break;\n+\n+                case Double:\n+                    stringValue = getSchema().getFormatter(\n+                            DecimalFormat.class).format(attributeValue.getValue());\n+                    break;\n+\n+                case Date:\n+                    stringValue = getSchema().getFormatter(\n+                            SimpleDateFormat.class).format(attributeValue.getValue());\n+                    break;\n+            }\n+\n+            result.add(stringValue);\n+        }\n+\n+        return result;\n+    }\n+\n     public abstract void setAttributeValues(\n             Set<? extends AbstractAttributeValue> attributeValues);\n }"},{"sha":"0950c0f68adb255c928b11ddce77178ff439af1e","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncopeConfiguration.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeConfiguration.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -0,0 +1,42 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class SyncopeConfiguration extends AbstractBaseBean {\n+\n+    @Id\n+    private String confKey;\n+    private String confValue;\n+\n+    public String getConfKey() {\n+        return confKey;\n+    }\n+\n+    public void setConfKey(String confKey) {\n+        this.confKey = confKey;\n+    }\n+\n+    public String getConfValue() {\n+        return confValue;\n+    }\n+\n+    public void setConfValue(String confValue) {\n+        this.confValue = confValue;\n+    }\n+}"},{"sha":"03a7818ced627a9371a19bf846b54b85d2d2e1e0","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.CascadeType;\n@@ -24,6 +25,7 @@\n import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n+import javax.persistence.Temporal;\n import javax.persistence.Transient;\n import org.jasypt.util.password.PasswordEncryptor;\n import org.jasypt.util.password.StrongPasswordEncryptor;\n@@ -50,6 +52,11 @@ public class SyncopeUser extends AbstractAttributable {\n     @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n     private Set<UserDerivedAttribute> derivedAttributes;\n+    @Temporal(javax.persistence.TemporalType.TIME)\n+    private Date creationTime;\n+    private String token;\n+    @Temporal(javax.persistence.TemporalType.TIME)\n+    private Date tokenExpireTime;\n \n     public SyncopeUser() {\n         roles = new HashSet<SyncopeRole>();\n@@ -138,4 +145,28 @@ public void setDerivedAttributes(\n \n         this.derivedAttributes = (Set<UserDerivedAttribute>) derivedAttributes;\n     }\n+\n+    public Date getCreationTime() {\n+        return creationTime;\n+    }\n+\n+    public void setCreationTime(Date creationTime) {\n+        this.creationTime = creationTime;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    public void setToken(String token) {\n+        this.token = token;\n+    }\n+\n+    public Date getTokenExpireTime() {\n+        return tokenExpireTime;\n+    }\n+\n+    public void setTokenExpireTime(Date tokenExpireTime) {\n+        this.tokenExpireTime = tokenExpireTime;\n+    }\n }"},{"sha":"9e962bff913ee321c6607d8e31233df46d4dca34","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeConfigurationDAO.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeConfigurationDAO.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -0,0 +1,29 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+\n+public interface SyncopeConfigurationDAO extends DAO {\n+\n+    SyncopeConfiguration find(String name);\n+\n+    List<SyncopeConfiguration> findAll();\n+\n+    SyncopeConfiguration save(SyncopeConfiguration syncopeConfiguration);\n+\n+    void delete(String name);\n+}"},{"sha":"73245f72778f27f723dbc3f9dab4eadf5b0b7a1a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeConfigurationDAOImpl.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeConfigurationDAOImpl.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -0,0 +1,50 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.SyncopeConfiguration;\n+import org.syncope.core.persistence.dao.SyncopeConfigurationDAO;\n+\n+@Repository\n+public class SyncopeConfigurationDAOImpl extends AbstractDAOImpl\n+        implements SyncopeConfigurationDAO {\n+\n+    @Override\n+    public SyncopeConfiguration find(String name) {\n+        return entityManager.find(SyncopeConfiguration.class, name);\n+    }\n+\n+    @Override\n+    public List<SyncopeConfiguration> findAll() {\n+        Query query = entityManager.createQuery(\"SELECT e FROM SyncopeConfiguration e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional\n+    public SyncopeConfiguration save(SyncopeConfiguration syncopeConfiguration) {\n+        return entityManager.merge(syncopeConfiguration);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void delete(String name) {\n+        entityManager.remove(find(name));\n+    }\n+}"},{"sha":"b1692e5b1539809ad52bb8830b03929e740d3397","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -50,7 +50,7 @@ public void delete(Long id) {\n         SyncopeUser user = find(id);\n \n         for (SyncopeRole role : user.getRoles()) {\n-            user.removeRole(role);\n+            role.removeUser(user);\n         }\n         user.setRoles(Collections.EMPTY_SET);\n "},{"sha":"a1465e88ca623fdf4b16e91a8542fb6796600123","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":46,"deletions":37,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -16,32 +16,32 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.servlet.ModelAndView;\n-import org.springframework.web.servlet.support.RequestContextUtils;\n import org.syncope.client.to.SearchParameters;\n import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.rest.data.UserDataBinder;\n \n-/**\n- * TODO: call syncope-core\n- */\n @Controller\n @RequestMapping(\"/user\")\n public class UserController extends AbstractController {\n \n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n     public UserTO create(HttpServletResponse response,\n             @RequestBody UserTO userTO) throws IOException {\n@@ -54,49 +54,58 @@ public UserTO create(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{userId}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"userId\") Long userId) throws IOException {\n+        \n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+        if (user == null) {\n+            log.error(\"Could not find user '\" + userId + \"'\");\n \n-        log.info(\"delete called with parameter \" + userId);\n-\n-        if (userId == 0) {\n             response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+        } else {\n+            try {\n+                syncopeUserDAO.delete(userId);\n+            } catch (Throwable t) {\n+                log.error(\"While deleting \" + userId, t);\n+                response.sendError(\n+                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+            }\n         }\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    public Set<UserTO> list(HttpServletRequest request) throws IOException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/isActive/{userId}\")\n+    public ModelAndView isActive(@PathVariable(\"userId\") Long userId)\n+            throws IOException {\n \n-        WebApplicationContext webApplicationContext =\n-                RequestContextUtils.getWebApplicationContext(request);\n+        // TODO: check workflow\n+        ModelAndView mav = new ModelAndView();\n+        mav.addObject(syncopeUserDAO.find(userId) != null);\n+        return mav;\n+    }\n \n-        SyncopeUserDAO syncopeUserDAO =\n-                (SyncopeUserDAO) webApplicationContext.getBean(\n-                \"syncopeUserDAOImpl\");\n+    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n+    public List<UserTO> list(HttpServletRequest request) throws IOException {\n+        List<SyncopeUser> users = syncopeUserDAO.findAll();\n \n-        return Collections.singleton(new UserTO());\n+        List<UserTO> result = new ArrayList<UserTO>(users.size());\n+        for (SyncopeUser user : users) {\n+            result.add(userDataBinder.getUserTO(user));\n+        }\n+\n+        return result;\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n-    public ModelAndView read(@PathVariable(\"userId\") Long userId)\n-            throws IOException {\n-\n-        log.info(\"read called with parameter \" + userId);\n-\n-        Set<String> usernameValues = new HashSet<String>();\n-        usernameValues.add(\"chicchiricco\");\n-        usernameValues.add(\"fabio.martelli\");\n+    public UserTO read(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId) throws IOException {\n \n-        Set<String> surnameValues = new HashSet<String>();\n-        surnameValues.add(\"Chicchiriccò\");\n-        surnameValues.add(\"Martelli\");\n+        SyncopeUser user = syncopeUserDAO.find(userId);\n+        if (user == null) {\n+            log.error(\"Could not find user '\" + userId + \"'\");\n \n-        UserTO userTO = new UserTO();\n-        userTO.addAttribute(\"username\", usernameValues);\n-        userTO.addAttribute(\"surname\", surnameValues);\n-        //userTO.setAttributes(attributes);\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            return new UserTO();\n+        }\n \n-        ModelAndView mav = new ModelAndView();\n-        mav.addObject(userTO);\n-        return mav;\n+        return userDataBinder.getUserTO(user);\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/passwordReset/{userId}\")"},{"sha":"ee2cf3628502e9d8c451ebdd439cc5409729262e","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -0,0 +1,80 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+\n+@Component\n+public class UserDataBinder {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            UserDataBinder.class);\n+    private static final String[] ignoreSchemaProperties = {\"attributes\",\n+        \"derivedAttributes\", \"roles\"};\n+    private SyncopeUserDAO syncopeUserDAO;\n+\n+    @Autowired\n+    public UserDataBinder(SyncopeUserDAO syncopeUserDAO) {\n+\n+        this.syncopeUserDAO = syncopeUserDAO;\n+    }\n+\n+    public SyncopeUser createSyncopeUser(UserTO userTO) {\n+\n+        SyncopeUser user = new SyncopeUser();\n+        //BeanUtils.copyProperties(userTO, user, ignoreSchemaProperties);\n+\n+        return syncopeUserDAO.save(user);\n+    }\n+\n+    public UserTO getUserTO(SyncopeUser user) {\n+        UserTO userTO = new UserTO();\n+        BeanUtils.copyProperties(user, userTO, ignoreSchemaProperties);\n+\n+        for (AbstractAttribute attribute : user.getAttributes()) {\n+            userTO.addAttribute(attribute.getSchema().getName(),\n+                    attribute.getStringAttributeValues());\n+        }\n+\n+        Map<String, String> stringDerivedAttributes =\n+                new HashMap<String, String>(user.getDerivedAttributes().size());\n+        for (AbstractDerivedAttribute derivedAttribute :\n+                user.getDerivedAttributes()) {\n+\n+            stringDerivedAttributes.put(\n+                    derivedAttribute.getDerivedSchema().getName(),\n+                    derivedAttribute.getValue(user.getAttributes()));\n+        }\n+        userTO.setDerivedAttributes(stringDerivedAttributes);\n+\n+        for (SyncopeRole role : user.getRoles()) {\n+            userTO.addRole(role.getName(), role.getParent());\n+        }\n+\n+        return userTO;\n+    }\n+}"},{"sha":"9c2e4534b6633aaf2168d727dd7d7cbdfb37293d","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -13,6 +13,9 @@\n   limitations under the License.\n -->\n <dataset>\n+    <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n+    <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n+\n     <UserSchema name=\"surname\" type=\"String\"\n                 mandatory=\"true\" multivalue=\"false\"/>\n     <UserSchema name=\"firstname\" type=\"String\""},{"sha":"6a47b19dcd3c17185064358b4f7de8f59f6d75b1","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -46,32 +46,33 @@ public void delete() {\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n+\n+        restTemplate.delete(BASE_URL + \"user/delete/{userId}\", \"2\");\n+        try {\n+            restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, \"2\");\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n     }\n \n     @Test\n     public void list() {\n         Set<UserTO> users = restTemplate.getForObject(BASE_URL\n-                + \"user/list.json\",\n-                Set.class);\n+                + \"user/list.json\", Set.class);\n \n         assertNotNull(users);\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(users.toString());\n-        }\n+        assertEquals(4, users.size());\n     }\n \n     @Test\n     public void read() {\n         UserTO userTO = restTemplate.getForObject(BASE_URL\n-                + \"user/read/{userId}.json\",\n-                UserTO.class, \"0\");\n+                + \"user/read/{userId}.json\", UserTO.class, \"1\");\n \n         assertNotNull(userTO);\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(userTO.toString());\n-        }\n+        assertNotNull(userTO.getAttributes());\n+        assertFalse(userTO.getAttributes().isEmpty());\n     }\n \n     @Test"},{"sha":"7c7ebaae6e242190eebbe13f451b9e702c120ee6","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/853b0d5c9b3839e4698af61f3e70a9c6a48f2148/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=853b0d5c9b3839e4698af61f3e70a9c6a48f2148","patch":"@@ -13,6 +13,9 @@\n   limitations under the License.\n -->\n <dataset>\n+    <SyncopeConfiguration confKey=\"token.length\" confValue=\"256\"/>\n+    <SyncopeConfiguration confKey=\"token.expireTime\" confValue=\"60\"/>\n+    \n     <SyncopeUser id=\"1\" password=\"XXX\"/>\n     <SyncopeUser id=\"2\" password=\"YYY\"/>\n     <SyncopeUser id=\"3\" password=\"ZZZ\"/>"}]}