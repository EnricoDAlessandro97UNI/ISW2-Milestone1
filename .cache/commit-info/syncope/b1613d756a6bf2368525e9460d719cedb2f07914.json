{"sha":"b1613d756a6bf2368525e9460d719cedb2f07914","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIxNjEzZDc1NmE2YmYyMzY4NTI1ZTk0NjBkNzE5Y2VkYjJmMDc5MTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-12-21T11:05:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-12-22T15:48:13Z"},"message":"Re-enabling JDK 16 compatibility and build with dedicated temporary\nprofile","tree":{"sha":"8fa4efafd1327604ad00c638aee020ad36badd9b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8fa4efafd1327604ad00c638aee020ad36badd9b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b1613d756a6bf2368525e9460d719cedb2f07914","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b1613d756a6bf2368525e9460d719cedb2f07914","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b1613d756a6bf2368525e9460d719cedb2f07914","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b1613d756a6bf2368525e9460d719cedb2f07914/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4f52359fd18faccc772aafe12317dda14d6cef94","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f52359fd18faccc772aafe12317dda14d6cef94","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4f52359fd18faccc772aafe12317dda14d6cef94"}],"stats":{"total":183,"additions":94,"deletions":89},"files":[{"sha":"b2359a8a50df143976ef9a4f5603e25cbc65a8df","filename":".travis.yml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -63,13 +63,13 @@ jobs:\n       - export JAVA_HOME=~/openjdk14\n       - export PATH=\"$JAVA_HOME/bin:$PATH\"\n       - eval $TestCommand\n-      #- stage: test\n-      #name: \"Unit Tests via JDK 16\"\n-      #script:\n-      #- ~/install-jdk.sh --target \"/home/travis/openjdk16\" --workspace \"/home/travis/.cache/install-jdk\" --feature \"16\" --license \"GPLv2+CE\" --cacerts\n-      #- export JAVA_HOME=~/openjdk16\n-      #- export PATH=\"$JAVA_HOME/bin:$PATH\"\n-      #- eval $TestCommand\n+    - stage: test\n+      name: \"Unit Tests via JDK 16\"\n+      script:\n+      - ~/install-jdk.sh --target \"/home/travis/openjdk16\" --workspace \"/home/travis/.cache/install-jdk\" --feature \"16\" --license \"GPLv2+CE\" --cacerts\n+      - export JAVA_HOME=~/openjdk16\n+      - export PATH=\"$JAVA_HOME/bin:$PATH\"\n+      - eval $TestCommand\n     - stage: test\n       name: \"Persistence Unit Tests via JDK 11: PostgreSQL (JSONB)\"\n       script: mvn -f core/persistence-jpa-json/pom.xml -P postgres -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Dsass.skip=true"},{"sha":"70b44690829d8a69179451e562e466f826dcc19b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARouteFilterFactory.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -23,7 +23,6 @@ public enum SRARouteFilterFactory {\n     ADD_REQUEST_PARAMETER,\n     ADD_RESPONSE_HEADER,\n     DEDUPE_RESPONSE_HEADER,\n-    HYSTRIX,\n     FALLBACK_HEADERS,\n     MAP_REQUEST_HEADER,\n     PREFIX_PATH,"},{"sha":"538821f60fad50f4c8b2024a141dd4a8047fb22b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -64,11 +64,10 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n-import org.apache.commons.collections4.BidiMap;\n-import org.apache.commons.collections4.bidimap.DualHashBidiMap;\n-import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.openjpa.lib.util.collections.BidiMap;\n+import org.apache.openjpa.lib.util.collections.DualHashBidiMap;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n@@ -109,13 +108,13 @@ public class XMLContentExporter implements ContentExporter {\n \n     private static final Logger LOG = LoggerFactory.getLogger(XMLContentExporter.class);\n \n-    private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = SetUtils.hashSet(\n+    private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = Stream.of(\n             \"QRTZ_\", \"LOGGING\", \"NotificationTask_recipients\", LoggerDAO.AUDIT_TABLE, JPAReportExec.TABLE,\n             JPATaskExec.TABLE, JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE,\n             JPAUPlainAttrUniqueValue.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE,\n             JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n             JPAARelationship.TABLE, JPAAMembership.TABLE, JPAAccessToken.TABLE\n-    );\n+    ).collect(Collectors.toCollection(HashSet::new));\n \n     private static final Map<String, String> TABLES_TO_BE_FILTERED =\n             Map.of(\"TASK\", \"DTYPE <> 'PropagationTask' AND DTYPE <> 'NotificationTask'\");\n@@ -215,32 +214,28 @@ private static String getValues(final ResultSet rs, final String columnName, fin\n                 case Types.BINARY:\n                 case Types.VARBINARY:\n                 case Types.LONGVARBINARY:\n-                    final InputStream is = rs.getBinaryStream(columnName);\n+                    InputStream is = rs.getBinaryStream(columnName);\n                     if (is != null) {\n                         res = DatatypeConverter.printHexBinary(IOUtils.toByteArray(is));\n                     }\n                     break;\n \n                 case Types.BLOB:\n-                    final Blob blob = rs.getBlob(columnName);\n+                    Blob blob = rs.getBlob(columnName);\n                     if (blob != null) {\n                         res = DatatypeConverter.printHexBinary(IOUtils.toByteArray(blob.getBinaryStream()));\n                     }\n                     break;\n \n                 case Types.BIT:\n                 case Types.BOOLEAN:\n-                    if (rs.getBoolean(columnName)) {\n-                        res = \"1\";\n-                    } else {\n-                        res = \"0\";\n-                    }\n+                    res = rs.getBoolean(columnName) ? \"1\" : \"0\";\n                     break;\n \n                 case Types.DATE:\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n-                    final Timestamp timestamp = rs.getTimestamp(columnName);\n+                    Timestamp timestamp = rs.getTimestamp(columnName);\n                     if (timestamp != null) {\n                         res = FormatUtils.format(new Date(timestamp.getTime()));\n                     }"},{"sha":"412c45c18bdfa4660fdde12e8705e2dd2ef0d70a","filename":"pom.xml","status":"modified","additions":51,"deletions":15,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -414,7 +414,7 @@ under the License.\n     <spring-boot.version>2.3.7.RELEASE</spring-boot.version>\n     <spring-cloud-gateway.version>2.2.6.RELEASE</spring-cloud-gateway.version>\n \n-    <openjpa.version>3.1.2</openjpa.version>\n+    <openjpa.version>3.1.3-SNAPSHOT</openjpa.version>\n     <hikaricp.version>3.4.5</hikaricp.version>\n     <bval.version>2.0.5</bval.version>\n \n@@ -972,11 +972,6 @@ under the License.\n         <artifactId>spring-cloud-starter-gateway</artifactId>\n         <version>${spring-cloud-gateway.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.springframework.cloud</groupId>\n-        <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n-        <version>${spring-cloud-gateway.version}</version>\n-      </dependency>\n \n       <dependency>\n         <groupId>org.springframework</groupId>\n@@ -2965,20 +2960,61 @@ under the License.\n       </activation>\n \n       <properties>\n+        <spring.version>5.3.2</spring.version>\n+        <spring-boot.version>2.4.1</spring-boot.version>\n+        <spring-cloud-gateway.version>3.0.0-RC1</spring-cloud-gateway.version>\n+\n         <argLine>-Xms512m -Xmx1024m -Xss256k -Dnet.bytebuddy.experimental=true</argLine>\n       </properties>\n \n       <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-surefire-plugin</artifactId>\n-            <configuration>\n-              <argLine>--add-opens=java.base/java.lang=ALL-UNNAMED</argLine>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n+        <pluginManagement>\n+          <plugins>\n+            <plugin>\n+              <groupId>org.apache.maven.plugins</groupId>\n+              <artifactId>maven-compiler-plugin</artifactId>\n+              <configuration>\n+                <release>16</release>\n+                <fork>true</fork>\n+                <compilerArgs>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>\n+                  <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED</arg>\n+                </compilerArgs>\n+                <annotationProcessorPaths>\n+                  <path>\n+                    <groupId>org.projectlombok</groupId>\n+                    <artifactId>lombok</artifactId>\n+                    <version>1.18.16</version>\n+                  </path>\n+                </annotationProcessorPaths>\n+              </configuration>\n+            </plugin>\n+          </plugins>\n+        </pluginManagement>\n       </build>\n+\n+      <repositories>\n+        <repository>\n+          <id>repository.spring.milestone</id>\n+          <name>Spring Milestone Repository</name>\n+          <url>https://repo.spring.io/milestone</url>\n+        </repository>\n+      </repositories>\n+      <pluginRepositories>\n+        <pluginRepository>\n+          <id>repository.spring.milestone</id>\n+          <name>Spring Milestone Repository</name>\n+          <url>https://repo.spring.io/milestone</url>\n+        </pluginRepository>\n+      </pluginRepositories>\n     </profile>\n   </profiles>\n "},{"sha":"9c788206b50792414f7afe631b77b96d38299748","filename":"sra/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -42,10 +42,6 @@ under the License.\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-gateway</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.springframework.cloud</groupId>\n-      <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n-    </dependency>\n \n     <dependency>\n       <groupId>org.springframework.boot</groupId>"},{"sha":"4fe80f58cee66521a45b5dee89024d2e415671ce","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -52,7 +52,6 @@\n import org.springframework.cloud.gateway.filter.factory.AddRequestParameterGatewayFilterFactory;\n import org.springframework.cloud.gateway.filter.factory.AddResponseHeaderGatewayFilterFactory;\n import org.springframework.cloud.gateway.filter.factory.FallbackHeadersGatewayFilterFactory;\n-import org.springframework.cloud.gateway.filter.factory.HystrixGatewayFilterFactory;\n import org.springframework.cloud.gateway.filter.factory.PrefixPathGatewayFilterFactory;\n import org.springframework.cloud.gateway.filter.factory.PreserveHostHeaderGatewayFilterFactory;\n import org.springframework.cloud.gateway.filter.factory.RedirectToGatewayFilterFactory;\n@@ -163,19 +162,6 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                         });\n                 break;\n \n-            case HYSTRIX:\n-                String[] hystrixArgs = gwfilter.getArgs().split(\",\");\n-                filter = ctx.getBean(HystrixGatewayFilterFactory.class).\n-                        apply(route.getKey(), c -> {\n-                            if (StringUtils.isNotBlank(hystrixArgs[0])) {\n-                                c.setName(hystrixArgs[0].trim());\n-                            }\n-                            if (StringUtils.isNotBlank(hystrixArgs[1])) {\n-                                c.setFallbackUri(hystrixArgs[1].trim());\n-                            }\n-                        });\n-                break;\n-\n             case FALLBACK_HEADERS:\n                 String[] fallbackHeadersArgs = gwfilter.getArgs().split(\",\");\n                 filter = ctx.getBean(FallbackHeadersGatewayFilterFactory.class)."},{"sha":"42f24bdf62a20d686ff6035848896672787ed1fd","filename":"sra/src/test/java/org/apache/syncope/sra/RouteProviderTest.java","status":"modified","additions":6,"deletions":35,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -26,7 +26,6 @@\n import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n-import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.mockito.ArgumentMatchers.anyString;\n@@ -96,7 +95,8 @@ public void addResponseHeader() {\n         route.getPredicates().add(new SRARoutePredicate.Builder().\n                 factory(SRARoutePredicateFactory.METHOD).args(\"GET\").build());\n         route.getPredicates().add(new SRARoutePredicate.Builder().\n-                factory(SRARoutePredicateFactory.PATH).args(\"/addResponseHeader\").cond(SRARoutePredicateCond.AND).build());\n+                factory(SRARoutePredicateFactory.PATH).args(\"/addResponseHeader\").cond(SRARoutePredicateCond.AND).\n+                build());\n         route.getFilters().add(new SRARouteFilter.Builder().\n                 factory(SRARouteFilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n \n@@ -178,37 +178,6 @@ public void addRequestHeader() {\n         webClient.get().uri(\"/requestHeader\").header(\"Hello\", \"Mondo\").exchange().expectStatus().isOk();\n     }\n \n-    @Test\n-    public void hystrix() {\n-        webClient.get().uri(\"/fallback\").exchange().\n-                expectStatus().isOk().\n-                expectBody().\n-                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n-\n-        stubFor(get(urlEqualTo(\"/delay/3\")).\n-                willReturn(aResponse().\n-                        withBody(\"no fallback\").\n-                        withFixedDelay(3000)));\n-\n-        SRARouteTO route = new SRARouteTO();\n-        route.setKey(\"hystrix\");\n-        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new SRARoutePredicate.Builder().\n-                factory(SRARoutePredicateFactory.HOST).args(\"*.hystrix.com\").build());\n-        route.getFilters().add(new SRARouteFilter.Builder().\n-                factory(SRARouteFilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n-\n-        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n-        routeRefresher.refresh();\n-\n-        webClient.get().uri(\"/delay/3\").\n-                header(HttpHeaders.HOST, \"www.hystrix.com\").\n-                exchange().\n-                expectStatus().isOk().\n-                expectBody().\n-                consumeWith(response -> assertThat(response.getResponseBody()).isEqualTo(\"fallback\".getBytes()));\n-    }\n-\n     @Test\n     public void requestHeaderToRequestUri() {\n         webClient.get().uri(\"/requestHeaderToRequestUri\").exchange().expectStatus().isNotFound();\n@@ -391,7 +360,8 @@ public void redirect() {\n         webClient.get().uri(\"/redirect\").exchange().expectStatus().isOk();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new SRARouteFilter.Builder().factory(SRARouteFilterFactory.SET_STATUS).args(\"404\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().factory(SRARouteFilterFactory.SET_STATUS).args(\"404\").\n+                build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -443,7 +413,8 @@ public void datetime() {\n \n         route.getPredicates().clear();\n         route.getPredicates().add(new SRARoutePredicate.Builder().\n-                factory(SRARoutePredicateFactory.BEFORE).negate().args(ZonedDateTime.now().minusYears(1).toString()).build());\n+                factory(SRARoutePredicateFactory.BEFORE).negate().args(ZonedDateTime.now().minusYears(1).toString()).\n+                build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();"},{"sha":"5098891cbac14cf6253698da1b617d3c73ae110c","filename":"wa/starter/pom.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b1613d756a6bf2368525e9460d719cedb2f07914/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b1613d756a6bf2368525e9460d719cedb2f07914/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=b1613d756a6bf2368525e9460d719cedb2f07914","patch":"@@ -418,5 +418,27 @@ under the License.\n         </resources>\n       </build>\n     </profile>\n+\n+    <profile>\n+      <id>jdk16-plus</id>\n+\n+      <activation>\n+        <jdk>[16,)</jdk>\n+      </activation>\n+      \n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <includes>\n+                <include>**/SyncopeWASAML2*.java</include>\n+              </includes>            \n+            </configuration>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+    </profile>\n   </profiles>\n </project>"}]}