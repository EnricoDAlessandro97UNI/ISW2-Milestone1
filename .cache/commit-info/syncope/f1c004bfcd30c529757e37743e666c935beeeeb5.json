{"sha":"f1c004bfcd30c529757e37743e666c935beeeeb5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxYzAwNGJmY2QzMGM1Mjk3NTdlMzc3NDNlNjY2YzkzNWJlZWVlYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-03T15:53:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-03T15:55:29Z"},"message":"[SYNCOPE-1146][SYNCOPE-1147] Now it possible to configure an IdP to create unmatching users / update matching users; the defined mapping, alongside with user template and SAML2IdPActions implementations are taken into account to provide the actual user data","tree":{"sha":"e69f0e5e7c797e1ef54d068ada9410131c03d42a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e69f0e5e7c797e1ef54d068ada9410131c03d42a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f1c004bfcd30c529757e37743e666c935beeeeb5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1c004bfcd30c529757e37743e666c935beeeeb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1c004bfcd30c529757e37743e666c935beeeeb5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1c004bfcd30c529757e37743e666c935beeeeb5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7eb33dcc815e02b456ee06a0516523684832fe11","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7eb33dcc815e02b456ee06a0516523684832fe11","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7eb33dcc815e02b456ee06a0516523684832fe11"}],"stats":{"total":1237,"additions":1026,"deletions":211},"files":[{"sha":"7663235334f11f9f30c84314e4b8112e6ca4bf8b","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -72,8 +72,8 @@\n \n     private static final long serialVersionUID = 4984337552918213290L;\n \n-    private static final String GROUP_MEMBER_PROVISION_TASKJOB\n-            = \"org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate\";\n+    private static final String GROUP_MEMBER_PROVISION_TASKJOB =\n+            \"org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate\";\n \n     protected final Class<T> reference;\n \n@@ -116,6 +116,7 @@ protected SchedTaskDirectoryPanel(\n             @Override\n             protected Serializable onApplyInternal(\n                     final TemplatableTO targetObject, final String type, final AnyTO anyTO) {\n+\n                 targetObject.getTemplates().put(type, anyTO);\n                 new TaskRestClient().update(SchedTaskTO.class.cast(targetObject));\n                 return targetObject;"},{"sha":"1df1e6c2c8e55242ddbb99061eabe02ec1288776","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/bootstrap/dialog/BaseModal.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -164,8 +164,8 @@ public BaseModal<T> changeCloseButtonLabel(final String label, final AjaxRequest\n \n     private BaseModal<T> setInternalContent(final Panel component) {\n         if (!component.getId().equals(getContentId())) {\n-            throw new WicketRuntimeException(\n-                    \"Modal content id is wrong. Component ID:\" + component.getId() + \"; content ID: \" + getContentId());\n+            throw new WicketRuntimeException(\"Modal content id is wrong. \"\n+                    + \"Component ID: \" + component.getId() + \"; content ID: \" + getContentId());\n         }\n \n         content.replaceWith(component);"},{"sha":"3c8111cd27a16de15b8d68d6abcb37fae133f1d4","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserTemplateWizardBuilder.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -33,6 +33,23 @@ public class UserTemplateWizardBuilder extends UserWizardBuilder implements Temp\n \n     private final TemplatableTO templatable;\n \n+    public UserTemplateWizardBuilder(\n+            final UserTO template,\n+            final List<String> anyTypeClasses,\n+            final UserFormLayoutInfo formLayoutInfo,\n+            final PageReference pageRef) {\n+\n+        super(anyTypeClasses, formLayoutInfo, pageRef);\n+        templatable = null;\n+\n+        if (template == null) {\n+            setItem(new UserWrapper(new UserTO()));\n+        } else {\n+            setItem(new UserWrapper(template));\n+        }\n+\n+    }\n+\n     public UserTemplateWizardBuilder(\n             final TemplatableTO templatable,\n             final List<String> anyTypeClasses,"},{"sha":"80a008ae75150250aba4969d3fa89569c40326d8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/RealmDetails_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails_it.properties?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -17,5 +17,5 @@\n fullPath=Percorso\n accountPolicy=Account Policy\n passwordPolicy=Password Policy\n-actionsClassNames=Actions\n+actionsClassNames=Azioni\n resources=Risorse assegnate"},{"sha":"05ecf6b0cd9a3cbc16603914efd54c4315c7f2b9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTemplateRealm.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -31,10 +31,10 @@\n         @UniqueConstraint(columnNames = { \"realm_id\", \"anyType_id\" }))\n public class JPAAnyTemplateRealm extends AbstractAnyTemplate implements AnyTemplateRealm {\n \n-    public static final String TABLE = \"AnyTemplateRealm\";\n-\n     private static final long serialVersionUID = 1863029633568957907L;\n \n+    public static final String TABLE = \"AnyTemplateRealm\";\n+\n     @ManyToOne\n     private JPARealm realm;\n "},{"sha":"ce794af9f356111ff2de020e6722700651a615c1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -189,7 +189,7 @@ public static Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final\n         return evaluateNAME(evalConnObjectLink, connObjectKey);\n     }\n \n-    private static List<ItemTransformer> getMappingItemTransformers(\n+    private static List<ItemTransformer> getItemTransformers(\n             final String propagationJEXLTransformer,\n             final String pullJEXLTransformer,\n             final List<String> mappingItemTransformerClassNames) {\n@@ -224,14 +224,14 @@ private static List<ItemTransformer> getMappingItemTransformers(\n     }\n \n     public static List<ItemTransformer> getItemTransformers(final ItemTO item) {\n-        return getMappingItemTransformers(\n+        return getItemTransformers(\n                 item.getPropagationJEXLTransformer(),\n                 item.getPullJEXLTransformer(),\n                 item.getTransformerClassNames());\n     }\n \n     public static List<ItemTransformer> getItemTransformers(final Item item) {\n-        return getMappingItemTransformers(\n+        return getItemTransformers(\n                 item.getPropagationJEXLTransformer(),\n                 item.getPullJEXLTransformer(),\n                 item.getTransformerClassNames());"},{"sha":"ef47ef17b12a5677265fe740de91414021eb346a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":39,"deletions":35,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -126,48 +126,52 @@ private void fillMemberships(final GroupableRelatableTO any, final GroupableRela\n     @Transactional(readOnly = true)\n     public <T extends AnyTO> void apply(final T anyTO, final AnyTemplate anyTemplate) {\n         if (anyTemplate != null) {\n-            AnyTO template = anyTemplate.get();\n-            fill(anyTO, template);\n-\n-            if (template instanceof AnyObjectTO) {\n-                fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-                fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-            } else if (template instanceof UserTO) {\n-                if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO, new MapContext());\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) anyTO).setUsername(evaluated);\n-                    }\n+            apply(anyTO, anyTemplate.get());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public <T extends AnyTO> void apply(final T anyTO, final AnyTO template) {\n+        fill(anyTO, template);\n+\n+        if (template instanceof AnyObjectTO) {\n+            fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+            fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+        } else if (template instanceof UserTO) {\n+            if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n+                String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO, new MapContext());\n+                if (StringUtils.isNotBlank(evaluated)) {\n+                    ((UserTO) anyTO).setUsername(evaluated);\n                 }\n+            }\n \n-                if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO, new MapContext());\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) anyTO).setPassword(evaluated);\n-                    }\n+            if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n+                String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO, new MapContext());\n+                if (StringUtils.isNotBlank(evaluated)) {\n+                    ((UserTO) anyTO).setPassword(evaluated);\n                 }\n+            }\n \n-                fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-                fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n-            } else if (template instanceof GroupTO) {\n-                if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO, new MapContext());\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((GroupTO) anyTO).setName(evaluated);\n-                    }\n+            fillRelationships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+            fillMemberships((GroupableRelatableTO) anyTO, ((GroupableRelatableTO) template));\n+        } else if (template instanceof GroupTO) {\n+            if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n+                String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO, new MapContext());\n+                if (StringUtils.isNotBlank(evaluated)) {\n+                    ((GroupTO) anyTO).setName(evaluated);\n                 }\n+            }\n \n-                if (((GroupTO) template).getUserOwner() != null) {\n-                    final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n-                    if (userOwner != null) {\n-                        ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n-                    }\n+            if (((GroupTO) template).getUserOwner() != null) {\n+                final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n+                if (userOwner != null) {\n+                    ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n                 }\n-                if (((GroupTO) template).getGroupOwner() != null) {\n-                    final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n-                    if (groupOwner != null) {\n-                        ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n-                    }\n+            }\n+            if (((GroupTO) template).getGroupOwner() != null) {\n+                final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n+                if (groupOwner != null) {\n+                    ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n                 }\n             }\n         }"},{"sha":"f2bbabff42baf3436ed9c1ecf30c2133389cac0d","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AbstractSAML2SPServlet.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAbstractSAML2SPServlet.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -97,7 +97,6 @@ protected SAML2ReceivedResponseTO extract(\n         SAML2ReceivedResponseTO receivedResponseTO = new SAML2ReceivedResponseTO();\n         receivedResponseTO.setSpEntityID(spEntityID);\n         receivedResponseTO.setUrlContext(urlContext);\n-        receivedResponseTO.setClientAddress(clientAddress);\n         receivedResponseTO.setSamlResponse(samlResponse);\n         receivedResponseTO.setRelayState(relayState);\n         return receivedResponseTO;"},{"sha":"2874a840f9b43e5b384ad643239efd215e13666f","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.java","status":"modified","additions":99,"deletions":11,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.console.panels;\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -30,8 +31,10 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.SAML2IdPsDirectoryPanel.SAML2IdPsProvider;\n+import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.SAML2IdPsRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n@@ -42,13 +45,18 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.XMLEditorPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n+import org.apache.syncope.client.console.wizards.any.AnyWrapper;\n+import org.apache.syncope.client.console.wizards.any.UserTemplateWizardBuilder;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n@@ -58,6 +66,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.util.crypt.Base64;\n \n public class SAML2IdPsDirectoryPanel extends DirectoryPanel<\n@@ -69,6 +78,8 @@ public class SAML2IdPsDirectoryPanel extends DirectoryPanel<\n \n     private final BaseModal<String> metadataModal = new BaseModal<>(\"outer\");\n \n+    private final BaseModal<Serializable> templateModal;\n+\n     public SAML2IdPsDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, new Builder<SAML2IdPTO, SAML2IdPTO, SAML2IdPsRestClient>(new SAML2IdPsRestClient(), pageRef) {\n \n@@ -117,6 +128,29 @@ public void toggleWithContent(\n         setWindowClosedReloadCallback(metadataModal);\n         metadataModal.size(Modal.Size.Large);\n \n+        templateModal = new BaseModal<Serializable>(\"outer\") {\n+\n+            private static final long serialVersionUID = 5787433530654262016L;\n+\n+            @Override\n+            protected void onConfigure() {\n+                super.onConfigure();\n+                setFooterVisible(false);\n+            }\n+        };\n+        templateModal.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+//                target.add(content);\n+                templateModal.show(false);\n+            }\n+        });\n+        templateModal.size(Modal.Size.Large);\n+        addOuterObject(templateModal);\n+\n         initResultTable();\n \n         final ImportMetadata importMetadata = new ImportMetadata(\"importMetadata\", container, pageRef);\n@@ -170,17 +204,6 @@ protected List<IColumn<SAML2IdPTO, String>> getColumns() {\n     public ActionsPanel<SAML2IdPTO> getActions(final IModel<SAML2IdPTO> model) {\n         final ActionsPanel<SAML2IdPTO> panel = super.getActions(model);\n \n-        panel.add(new ActionLink<SAML2IdPTO>() {\n-\n-            private static final long serialVersionUID = -3722207913631435501L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n-                SAML2IdPTO object = restClient.read(model.getObject().getKey());\n-                send(SAML2IdPsDirectoryPanel.this, Broadcast.EXACT,\n-                        new AjaxWizard.EditItemActionEvent<>(object, target));\n-            }\n-        }, ActionLink.ActionType.EDIT, SAML2SPEntitlement.IDP_UPDATE);\n         panel.add(new ActionLink<SAML2IdPTO>() {\n \n             private static final long serialVersionUID = -7978723352517770645L;\n@@ -198,6 +221,49 @@ public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n                 target.add(metadataModal);\n             }\n         }, ActionLink.ActionType.HTML, SAML2SPEntitlement.IDP_READ);\n+        panel.add(new ActionLink<SAML2IdPTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n+                SAML2IdPTO object = restClient.read(model.getObject().getKey());\n+                send(SAML2IdPsDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(object, target));\n+            }\n+        }, ActionLink.ActionType.EDIT, SAML2SPEntitlement.IDP_UPDATE);\n+        panel.add(new ActionLink<SAML2IdPTO>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n+                final SAML2IdPTO object = restClient.read(model.getObject().getKey());\n+\n+                UserTemplateWizardBuilder builder = new UserTemplateWizardBuilder(\n+                        object.getUserTemplate(),\n+                        new AnyTypeRestClient().read(AnyTypeKind.USER.name()).getClasses(),\n+                        new UserFormLayoutInfo(),\n+                        pageRef) {\n+\n+                    private static final long serialVersionUID = -7978723352517770634L;\n+\n+                    @Override\n+                    protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n+                        object.setUserTemplate(modelObject.getInnerObject());\n+                        restClient.update(object);\n+\n+                        return modelObject;\n+                    }\n+                };\n+                templateModal.header(Model.of(StringUtils.capitalize(\n+                        new StringResourceModel(\"template.title\", SAML2IdPsDirectoryPanel.this).getString())));\n+                templateModal.setContent(builder.build(BaseModal.CONTENT_ID));\n+                templateModal.show(true);\n+                target.add(templateModal);\n+\n+            }\n+        }, ActionLink.ActionType.TEMPLATE, SAML2SPEntitlement.IDP_UPDATE);\n         panel.add(new ActionLink<SAML2IdPTO>() {\n \n             private static final long serialVersionUID = -5467832321897812767L;\n@@ -220,6 +286,28 @@ public void onClick(final AjaxRequestTarget target, final SAML2IdPTO ignore) {\n         return panel;\n     }\n \n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+\n+        if (event.getPayload() instanceof AjaxWizard.NewItemEvent) {\n+            AjaxWizard.NewItemEvent<?> newItemEvent = AjaxWizard.NewItemEvent.class.cast(event.getPayload());\n+            WizardModalPanel<?> modalPanel = newItemEvent.getModalPanel();\n+\n+            if (event.getPayload() instanceof AjaxWizard.NewItemActionEvent && modalPanel != null) {\n+                final IModel<Serializable> model = new CompoundPropertyModel<>(modalPanel.getItem());\n+                templateModal.setFormModel(model);\n+                templateModal.header(newItemEvent.getResourceModel());\n+                newItemEvent.getTarget().add(templateModal.setContent(modalPanel));\n+                templateModal.show(true);\n+            } else if (event.getPayload() instanceof AjaxWizard.NewItemCancelEvent) {\n+                templateModal.close(newItemEvent.getTarget());\n+            } else if (event.getPayload() instanceof AjaxWizard.NewItemFinishEvent) {\n+                templateModal.close(newItemEvent.getTarget());\n+            }\n+        }\n+    }\n+\n     protected final class SAML2IdPsProvider extends DirectoryDataProvider<SAML2IdPTO> {\n \n         private static final long serialVersionUID = -185944053385660794L;"},{"sha":"c7e6e0cb775ebc591cc4617e4b1e90b59bb47c4d","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/rest/SAML2IdPsRestClient.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPsRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPsRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSAML2IdPsRestClient.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.util.List;\n+import java.util.Set;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n@@ -33,6 +34,10 @@ public List<SAML2IdPTO> list() {\n         return getService(SAML2IdPService.class).list();\n     }\n \n+    public Set<String> getActionsClasses() {\n+        return getService(SAML2IdPService.class).getActionsClasses();\n+    }\n+\n     public void importIdPs(final InputStream input) {\n         SyncopeConsoleSession.get().\n                 getService(MediaType.APPLICATION_XML_TYPE, SAML2IdPService.class).importFromMetadata(input);"},{"sha":"0fc7b22e14fc6a5e279a8ffcf9322ac12bf9520a","filename":"ext/saml2sp/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":33,"deletions":3,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.console.rest.SAML2IdPsRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n@@ -42,9 +43,12 @@\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n \n public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML2IdPTO> {\n \n@@ -54,6 +58,16 @@ public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML2IdPTO> {\n \n     private final SAML2IdPsDirectoryPanel directoryPanel;\n \n+    private final IModel<List<String>> actionsClasses = new LoadableDetachableModel<List<String>>() {\n+\n+        private static final long serialVersionUID = 5275935387613157437L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return new ArrayList<>(restClient.getActionsClasses());\n+        }\n+    };\n+\n     public SAML2IdPWizardBuilder(\n             final SAML2IdPsDirectoryPanel directoryPanel, final SAML2IdPTO idpTO, final PageReference pageRef) {\n \n@@ -68,8 +82,7 @@ protected WizardModel buildModelSteps(final SAML2IdPTO modelObject, final Wizard\n         Mapping mapping = new Mapping(modelObject);\n         mapping.setOutputMarkupId(true);\n \n-        ItemTransformersTogglePanel mapItemTransformers =\n-                new ItemTransformersTogglePanel(mapping, pageRef);\n+        ItemTransformersTogglePanel mapItemTransformers = new ItemTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(mapItemTransformers);\n         JEXLTransformersTogglePanel jexlTransformers = new JEXLTransformersTogglePanel(mapping, pageRef);\n         addOuterObject(jexlTransformers);\n@@ -80,7 +93,7 @@ protected WizardModel buildModelSteps(final SAML2IdPTO modelObject, final Wizard\n         return wizardModel;\n     }\n \n-    private static final class IdP extends WizardStep {\n+    private final class IdP extends WizardStep {\n \n         private static final long serialVersionUID = 854012593185195024L;\n \n@@ -94,6 +107,14 @@ private static final class IdP extends WizardStep {\n             name.setRequired(true);\n             fields.add(name);\n \n+            AjaxCheckBoxPanel createUnmatching = new AjaxCheckBoxPanel(\n+                    \"field\", \"createUnmatching\", new PropertyModel<Boolean>(idpTO, \"createUnmatching\"), false);\n+            fields.add(createUnmatching);\n+\n+            AjaxCheckBoxPanel updateMatching = new AjaxCheckBoxPanel(\n+                    \"field\", \"updateMatching\", new PropertyModel<Boolean>(idpTO, \"updateMatching\"), false);\n+            fields.add(updateMatching);\n+\n             AjaxCheckBoxPanel useDeflateEncoding = new AjaxCheckBoxPanel(\n                     \"field\", \"useDeflateEncoding\", new PropertyModel<Boolean>(idpTO, \"useDeflateEncoding\"), false);\n             fields.add(useDeflateEncoding);\n@@ -104,6 +125,15 @@ private static final class IdP extends WizardStep {\n             bindingType.setChoices(Arrays.asList(SAML2BindingType.values()));\n             fields.add(bindingType);\n \n+            AjaxPalettePanel<String> actionsClassNames = new AjaxPalettePanel.Builder<String>().\n+                    setAllowMoveAll(true).setAllowOrder(true).\n+                    setName(new StringResourceModel(\"actionsClassNames\", directoryPanel).getString()).\n+                    build(\"field\",\n+                            new PropertyModel<List<String>>(idpTO, \"actionsClassNames\"),\n+                            new ListModel<>(actionsClasses.getObject()));\n+            actionsClassNames.setOutputMarkupId(true);\n+            fields.add(actionsClassNames);\n+\n             add(new ListView<Component>(\"fields\", fields) {\n \n                 private static final long serialVersionUID = -9180479401817023838L;"},{"sha":"97d869095db2ab617ebb1cfd5024b76dc3b3b67e","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel.properties?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -21,3 +21,7 @@ any.edit=Edit ${entityID}\n connObjectKeyValidation=There must be exactly one Remote Key\n bindingType=Binding\n html.title=metadata\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+template.title=user template"},{"sha":"76464c0cb65ef439146fb5ae2ababcac9d6b78b7","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_it.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_it.properties?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -21,3 +21,7 @@ any.edit=Modifica ${entityID}\n connObjectKeyValidation=Deve essere definito esattamente una Chiave remota\n bindingType=Binding\n html.title=metadata\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Azioni\n+template.title=template utenti"},{"sha":"d81f0a85a7fd2dba72b6523005e810bf4a17a388","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_pt_BR.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_pt_BR.properties?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -21,3 +21,7 @@ any.edit=Alterar ${entityID}\n connObjectKeyValidation=Precisa ser exatamente um Remote Key\n bindingType=Binding\n html.title=metadata\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=Actions\n+template.title=user template"},{"sha":"8712eeb1057c374ff5d48da9f4c9637153fa924e","filename":"ext/saml2sp/client-console/src/main/resources/org/apache/syncope/client/console/panels/SAML2IdPsDirectoryPanel_ru.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSAML2IdPsDirectoryPanel_ru.properties?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -21,3 +21,7 @@ any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${entityID}\n connObjectKeyValidation=\\u0422\\u0430\\u043c \\u0434\\u043e\\u043b\\u0436\\u043d\\u043e \\u0431\\u044b\\u0442\\u044c \\u0440\\u043e\\u0432\\u043d\\u043e \\u043e\\u0434\\u0438\\u043d \\u0434\\u0438\\u0441\\u0442\\u0430\\u043d\\u0446\\u0438\\u043e\\u043d\\u043d\\u043e\\u0433\\u043e \\u043a\\u043b\\u044e\\u0447\\u0430\n bindingType=Binding\n html.title=metadata\n+createUnmatching=Create unmatching users\n+updateMatching=Update matching users\n+actionsClassNames=\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044f\n+template.title=user template"},{"sha":"022267d6048aa7729b539b26ca753f6345231c3e","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -20,7 +20,9 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -45,14 +47,22 @@ public class SAML2IdPTO extends AbstractBaseBean implements EntityTO, ItemContai\n \n     private String metadata;\n \n+    private boolean createUnmatching;\n+\n+    private boolean updateMatching;\n+\n     private boolean useDeflateEncoding;\n \n     private SAML2BindingType bindingType;\n \n     private boolean logoutSupported;\n \n+    private UserTO userTemplate;\n+\n     private final List<ItemTO> items = new ArrayList<>();\n \n+    private final Set<String> actionsClassNames = new HashSet<>();\n+\n     @Override\n     public String getKey() {\n         return key;\n@@ -88,6 +98,22 @@ public void setMetadata(final String metadata) {\n         this.metadata = metadata;\n     }\n \n+    public boolean isCreateUnmatching() {\n+        return createUnmatching;\n+    }\n+\n+    public void setCreateUnmatching(final boolean createUnmatching) {\n+        this.createUnmatching = createUnmatching;\n+    }\n+\n+    public boolean isUpdateMatching() {\n+        return updateMatching;\n+    }\n+\n+    public void setUpdateMatching(final boolean updateMatching) {\n+        this.updateMatching = updateMatching;\n+    }\n+\n     public boolean isUseDeflateEncoding() {\n         return useDeflateEncoding;\n     }\n@@ -112,6 +138,14 @@ public void setLogoutSupported(final boolean logoutSupported) {\n         this.logoutSupported = logoutSupported;\n     }\n \n+    public UserTO getUserTemplate() {\n+        return userTemplate;\n+    }\n+\n+    public void setUserTemplate(final UserTO userTemplate) {\n+        this.userTemplate = userTemplate;\n+    }\n+\n     @Override\n     public ItemTO getConnObjectKeyItem() {\n         return IterableUtils.find(getItems(), new Predicate<ItemTO>() {\n@@ -154,4 +188,11 @@ public boolean remove(final ItemTO item) {\n         return this.items.remove(item);\n     }\n \n+    @XmlElementWrapper(name = \"actionsClassNames\")\n+    @XmlElement(name = \"actionsClassName\")\n+    @JsonProperty(\"actionsClassNames\")\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n }"},{"sha":"2b02eb43ab8b17130a05f69444c062c59a78ddbd","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2LoginResponseTO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.Date;\n import java.util.HashSet;\n@@ -26,6 +27,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlRootElement(name = \"saml2LoginResponse\")\n@@ -124,6 +127,17 @@ public void setUsername(final String username) {\n         this.username = username;\n     }\n \n+    @JsonIgnore\n+    public AttrTO getAttr(final String schema) {\n+        return IterableUtils.find(attrs, new Predicate<AttrTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AttrTO object) {\n+                return object.getSchema().equals(schema);\n+            }\n+        });\n+    }\n+\n     @XmlElementWrapper(name = \"attrs\")\n     @XmlElement(name = \"attr\")\n     @JsonProperty(\"attrs\")"},{"sha":"556be9b0c90d5dea30e01cd356849769521ca4af","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2ReceivedResponseTO.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2ReceivedResponseTO.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -33,8 +33,6 @@ public class SAML2ReceivedResponseTO extends AbstractBaseBean {\n \n     private String urlContext;\n \n-    private String clientAddress;\n-\n     private String samlResponse;\n \n     private String relayState;\n@@ -55,14 +53,6 @@ public void setUrlContext(final String urlContext) {\n         this.urlContext = urlContext;\n     }\n \n-    public String getClientAddress() {\n-        return clientAddress;\n-    }\n-\n-    public void setClientAddress(final String clientAddress) {\n-        this.clientAddress = clientAddress;\n-    }\n-\n     public String getSamlResponse() {\n         return samlResponse;\n     }"},{"sha":"ae3f0752ed1b0ed0e930fd7709d975d206f4c91f","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -26,6 +26,7 @@\n import java.util.ArrayList;\n import java.util.Base64;\n import java.util.List;\n+import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -35,6 +36,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n+import org.apache.syncope.core.logic.init.SAML2SPClassPathScanImplementationLookup;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n@@ -67,9 +69,17 @@ public class SAML2IdPLogic extends AbstractSAML2Logic<SAML2IdPTO> {\n     @Autowired\n     private SAML2IdPDAO idpDAO;\n \n+    @Autowired\n+    private SAML2SPClassPathScanImplementationLookup implLookup;\n+\n     @Autowired\n     private SAML2ReaderWriter saml2rw;\n \n+    @PreAuthorize(\"isAuthenticated()\")\n+    public Set<String> getActionsClasses() {\n+        return implLookup.getActionsClasses();\n+    }\n+\n     private SAML2IdPTO complete(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         SAML2IdPEntity idpEntity = cache.get(idpTO.getEntityID());\n         if (idpEntity == null) {\n@@ -159,7 +169,7 @@ private List<SAML2IdPTO> importIdPs(final InputStream input) throws Exception {\n             connObjectKeyItem.setExtAttrName(\"NameID\");\n             idpTO.setConnObjectKeyItem(connObjectKeyItem);\n \n-            SAML2IdPEntity idp = cache.put(idpEntityDescriptor, connObjectKeyItem, false, SAML2BindingType.POST);\n+            SAML2IdPEntity idp = cache.put(idpEntityDescriptor, idpTO);\n             if (idp.getSSOLocation(SAML2BindingType.POST) != null) {\n                 idpTO.setBindingType(SAML2BindingType.POST);\n             } else if (idp.getSSOLocation(SAML2BindingType.REDIRECT) != null) {\n@@ -225,9 +235,7 @@ public void update(final SAML2IdPTO saml2IdpTO) {\n \n         saml2Idp = idpDAO.save(binder.update(saml2Idp, saml2IdpTO));\n \n-        idpEntity.setUseDeflateEncoding(saml2Idp.isUseDeflateEncoding());\n-        idpEntity.setBindingType(saml2Idp.getBindingType());\n-        idpEntity.setConnObjectKeyItem(binder.getIdPTO(saml2Idp).getConnObjectKeyItem());\n+        idpEntity.setIdpTO(binder.getIdPTO(saml2Idp));\n     }\n \n     @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_DELETE + \"')\")"},{"sha":"f6953e692dbcc93fd208933ac93ed3bf1a956080","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":39,"deletions":101,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -18,21 +18,20 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import org.apache.syncope.core.logic.saml2.SAML2UserManager;\n import com.fasterxml.uuid.Generators;\n import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.io.OutputStream;\n import java.io.OutputStreamWriter;\n import java.lang.reflect.Method;\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n@@ -43,33 +42,19 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n-import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n-import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n-import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.joda.time.DateTime;\n import org.opensaml.core.xml.XMLObject;\n import org.opensaml.core.xml.schema.XSString;\n@@ -118,8 +103,8 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.core.spring.security.Encryptor;\n \n@@ -149,26 +134,17 @@ public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n     private SAML2IdPCache cache;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    private SAML2UserManager userManager;\n \n     @Autowired\n     private SAML2IdPDAO saml2IdPDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    private IntAttrNameParser intAttrNameParser;\n-\n     @Autowired\n     private AuthDataAccessor authDataAccessor;\n \n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n     @Autowired\n     private SAML2ReaderWriter saml2rw;\n \n@@ -352,73 +328,6 @@ public SAML2RequestTO createLoginRequest(final String spEntityID, final String i\n         return requestTO;\n     }\n \n-    private List<String> findMatchingUser(final String keyValue, final ItemTO connObjectKeyItem) {\n-        List<String> result = new ArrayList<>();\n-\n-        String transformed = keyValue;\n-        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n-            List<Object> output = transformer.beforePull(\n-                    null,\n-                    null,\n-                    Collections.<Object>singletonList(transformed));\n-            if (output != null && !output.isEmpty()) {\n-                transformed = output.get(0).toString();\n-            }\n-        }\n-\n-        IntAttrName intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), AnyTypeKind.USER);\n-\n-        if (intAttrName.getField() != null) {\n-            switch (intAttrName.getField()) {\n-                case \"key\":\n-                    User byKey = userDAO.find(transformed);\n-                    if (byKey != null) {\n-                        result.add(byKey.getKey());\n-                    }\n-                    break;\n-\n-                case \"username\":\n-                    User byUsername = userDAO.findByUsername(transformed);\n-                    if (byUsername != null) {\n-                        result.add(byUsername.getKey());\n-                    }\n-                    break;\n-\n-                default:\n-            }\n-        } else if (intAttrName.getSchemaType() != null) {\n-            switch (intAttrName.getSchemaType()) {\n-                case PLAIN:\n-                    PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n-\n-                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n-                    if (schema == null) {\n-                        value.setStringValue(transformed);\n-                    } else {\n-                        try {\n-                            value.parseValue(schema, transformed);\n-                        } catch (ParsingValidationException e) {\n-                            LOG.error(\"While parsing provided key value {}\", transformed, e);\n-                            value.setStringValue(transformed);\n-                        }\n-                    }\n-\n-                    CollectionUtils.collect(userDAO.findByAttrValue(intAttrName.getSchemaName(), value),\n-                            EntityUtils.keyTransformer(), result);\n-                    break;\n-\n-                case DERIVED:\n-                    CollectionUtils.collect(userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed),\n-                            EntityUtils.keyTransformer(), result);\n-                    break;\n-\n-                default:\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n     public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO response) {\n         check();\n@@ -454,7 +363,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         }\n \n         // 3. validate the SAML response and, if needed, decrypt the provided assertion(s)\n-        SAML2IdPEntity idp = getIdP(samlResponse.getIssuer().getValue());\n+        final SAML2IdPEntity idp = getIdP(samlResponse.getIssuer().getValue());\n         if (idp.getConnObjectKeyItem() == null) {\n             throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + \"'\");\n         }\n@@ -463,7 +372,6 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n                     samlResponse,\n                     idp,\n                     getAssertionConsumerURL(response.getSpEntityID(), response.getUrlContext()),\n-                    response.getClientAddress(),\n                     relayState.getJwtClaims().getSubject(),\n                     response.getSpEntityID());\n         } catch (Exception e) {\n@@ -474,7 +382,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         }\n \n         // 4. prepare the result: find matching user (if any) and return the received attributes\n-        SAML2LoginResponseTO responseTO = new SAML2LoginResponseTO();\n+        final SAML2LoginResponseTO responseTO = new SAML2LoginResponseTO();\n         responseTO.setIdp(idp.getId());\n         responseTO.setSloSupported(idp.getSLOLocation(idp.getBindingType()) != null);\n \n@@ -525,19 +433,49 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         if (nameID == null) {\n             throw new IllegalArgumentException(\"NameID not found\");\n         }\n+        final String nameIDValue = nameID.getValue();\n \n-        List<String> matchingUsers = keyValue == null\n+        final List<String> matchingUsers = keyValue == null\n                 ? Collections.<String>emptyList()\n-                : findMatchingUser(keyValue, idp.getConnObjectKeyItem());\n+                : userManager.findMatchingUser(keyValue, idp.getConnObjectKeyItem());\n         LOG.debug(\"Found {} matching users for NameID {}\", matchingUsers.size(), nameID.getValue());\n \n+        String username;\n         if (matchingUsers.isEmpty()) {\n-            throw new NotFoundException(\"User matching the provided NameID value \" + nameID.getValue());\n+            if (idp.isCreateUnmatching()) {\n+                LOG.debug(\"No user matching NameID {}, about to create\", nameID.getValue());\n+\n+                username = AuthContextUtils.execWithAuthContext(\n+                        AuthContextUtils.getDomain(), new AuthContextUtils.Executable<String>() {\n+\n+                    @Override\n+                    public String exec() {\n+                        return userManager.create(idp, responseTO, nameIDValue);\n+                    }\n+                });\n+            } else {\n+                throw new NotFoundException(\"User matching the provided NameID value \" + nameID.getValue());\n+            }\n         } else if (matchingUsers.size() > 1) {\n             throw new IllegalArgumentException(\"Several users match the provided NameID value \" + nameID.getValue());\n+        } else {\n+            if (idp.isUpdateMatching()) {\n+                LOG.debug(\"About to update {} for NameID {}\", matchingUsers.get(0), nameID.getValue());\n+\n+                username = AuthContextUtils.execWithAuthContext(\n+                        AuthContextUtils.getDomain(), new AuthContextUtils.Executable<String>() {\n+\n+                    @Override\n+                    public String exec() {\n+                        return userManager.update(matchingUsers.get(0), idp, responseTO);\n+                    }\n+                });\n+            } else {\n+                username = matchingUsers.get(0);\n+            }\n         }\n-        responseTO.setUsername(userDAO.find(matchingUsers.get(0)).getUsername());\n \n+        responseTO.setUsername(username);\n         responseTO.setNameID(nameID.getValue());\n \n         // 5. generate JWT for further access"},{"sha":"13b3cab7c735e4d6d4db8d52f8d422eaf47a0f5d","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPClassPathScanImplementationLookup.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPClassPathScanImplementationLookup.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.type.filter.AssignableTypeFilter;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.ClassUtils;\n+import org.apache.syncope.core.provisioning.api.SAML2IdPActions;\n+\n+@Component\n+public class SAML2SPClassPathScanImplementationLookup implements SyncopeLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n+\n+    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n+\n+    private Set<String> actionsClasses;\n+\n+    @Override\n+    public Integer getPriority() {\n+        return Integer.MIN_VALUE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        actionsClasses = new HashSet<>();\n+\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AssignableTypeFilter(SAML2IdPActions.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(DEFAULT_BASE_PACKAGE)) {\n+            try {\n+                Class<?> clazz = ClassUtils.resolveClassName(\n+                        bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n+\n+                if (SAML2IdPActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n+                    actionsClasses.add(clazz.getName());\n+                }\n+            } catch (Throwable t) {\n+                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n+            }\n+        }\n+\n+        actionsClasses = Collections.unmodifiableSet(actionsClasses);\n+    }\n+\n+    public Set<String> getActionsClasses() {\n+        return actionsClasses;\n+    }\n+\n+}"},{"sha":"e56b4f8c1f3e4bbdedc16c13d82470dc95351050","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCache.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -28,8 +28,7 @@\n import java.util.HashMap;\n import java.util.Map;\n import net.shibboleth.utilities.java.support.xml.XMLParserException;\n-import org.apache.syncope.common.lib.to.ItemTO;\n-import org.apache.syncope.common.lib.types.SAML2BindingType;\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.core.logic.init.SAML2SPLoader;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n@@ -66,13 +65,10 @@ public SAML2IdPEntity getFirst() {\n \n     public SAML2IdPEntity put(\n             final EntityDescriptor entityDescriptor,\n-            final ItemTO connObjectKeyItem,\n-            final boolean useDeflateEncoding,\n-            final SAML2BindingType bindingType)\n+            final SAML2IdPTO idpTO)\n             throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n \n-        SAML2IdPEntity idp = new SAML2IdPEntity(\n-                entityDescriptor, connObjectKeyItem, useDeflateEncoding, bindingType, loader.getKeyPass());\n+        SAML2IdPEntity idp = new SAML2IdPEntity(entityDescriptor, idpTO, loader.getKeyPass());\n         cache.put(entityDescriptor.getEntityID(), idp);\n         return idp;\n     }\n@@ -85,11 +81,7 @@ public SAML2IdPEntity put(final SAML2IdP idp)\n         Element element = OpenSAMLUtil.getParserPool().parse(\n                 new InputStreamReader(new ByteArrayInputStream(idp.getMetadata()))).getDocumentElement();\n         EntityDescriptor entityDescriptor = (EntityDescriptor) OpenSAMLUtil.fromDom(element);\n-        return put(\n-                entityDescriptor,\n-                binder.getIdPTO(idp).getConnObjectKeyItem(),\n-                idp.isUseDeflateEncoding(),\n-                idp.getBindingType());\n+        return put(entityDescriptor, binder.getIdPTO(idp));\n     }\n \n     public SAML2IdPEntity remove(final String entityID) {"},{"sha":"58ccfca3bcec3cb7990a15bec50806774b707d91","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"modified","additions":29,"deletions":22,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -31,7 +31,10 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.opensaml.saml.common.xml.SAMLConstants;\n import org.opensaml.saml.saml2.metadata.Endpoint;\n@@ -51,11 +54,7 @@ public class SAML2IdPEntity {\n \n     private final String id;\n \n-    private boolean useDeflateEncoding;\n-\n-    private SAML2BindingType bindingType;\n-\n-    private ItemTO connObjectKeyItem;\n+    private SAML2IdPTO idpTO;\n \n     private final Map<String, Endpoint> ssoBindings = new HashMap<>();\n \n@@ -67,16 +66,12 @@ public class SAML2IdPEntity {\n \n     public SAML2IdPEntity(\n             final EntityDescriptor entityDescriptor,\n-            final ItemTO connObjectKeyItem,\n-            final boolean useDeflateEncoding,\n-            final SAML2BindingType bindingType,\n+            final SAML2IdPTO idpTO,\n             final String keyPass)\n             throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n \n         this.id = entityDescriptor.getEntityID();\n-        this.connObjectKeyItem = connObjectKeyItem;\n-        this.useDeflateEncoding = useDeflateEncoding;\n-        this.bindingType = bindingType;\n+        this.idpTO = idpTO;\n \n         IDPSSODescriptor idpdescriptor = entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS);\n \n@@ -122,32 +117,44 @@ public SAML2IdPEntity(\n         }\n     }\n \n+    public void setIdpTO(final SAML2IdPTO idpTO) {\n+        this.idpTO = idpTO;\n+    }\n+\n     public String getId() {\n         return id;\n     }\n \n-    public boolean isUseDeflateEncoding() {\n-        return useDeflateEncoding;\n+    public boolean isCreateUnmatching() {\n+        return idpTO.isCreateUnmatching();\n     }\n \n-    public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n-        this.useDeflateEncoding = useDeflateEncoding;\n+    public boolean isUpdateMatching() {\n+        return idpTO.isUpdateMatching();\n     }\n \n-    public SAML2BindingType getBindingType() {\n-        return bindingType;\n+    public boolean isUseDeflateEncoding() {\n+        return idpTO.isUseDeflateEncoding();\n     }\n \n-    public void setBindingType(final SAML2BindingType bindingType) {\n-        this.bindingType = bindingType;\n+    public SAML2BindingType getBindingType() {\n+        return idpTO.getBindingType();\n     }\n \n     public ItemTO getConnObjectKeyItem() {\n-        return connObjectKeyItem;\n+        return idpTO.getConnObjectKeyItem();\n+    }\n+\n+    public List<ItemTO> getItems() {\n+        return idpTO.getItems();\n+    }\n+\n+    public UserTO getUserTemplate() {\n+        return idpTO.getUserTemplate();\n     }\n \n-    public void setConnObjectKeyItem(final ItemTO connObjectKeyItem) {\n-        this.connObjectKeyItem = connObjectKeyItem;\n+    public Set<String> getActionsClassNames() {\n+        return idpTO.getActionsClassNames();\n     }\n \n     public Endpoint getSSOLocation(final SAML2BindingType bindingType) {"},{"sha":"3431a869814906d3abe23304a87f4cbc5461ed93","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -214,7 +214,6 @@ public void validate(\n             final Response samlResponse,\n             final SAML2IdPEntity idp,\n             final String assertionConsumerURL,\n-            final String clientAddress,\n             final String requestId,\n             final String spEntityID)\n             throws WSSecurityException {"},{"sha":"a7af5e2649fb1930620f9bc7d26f49d98f1a90ea","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"added","additions":292,"deletions":0,"changes":292,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -0,0 +1,292 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.AnyOperations;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ItemTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.SAML2IdPActions;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class SAML2UserManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2UserManager.class);\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private IntAttrNameParser intAttrNameParser;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    @Autowired\n+    private UserProvisioningManager provisioningManager;\n+\n+    @Autowired\n+    private UserDataBinder binder;\n+\n+    @Transactional(readOnly = true)\n+    public List<String> findMatchingUser(final String keyValue, final ItemTO connObjectKeyItem) {\n+        List<String> result = new ArrayList<>();\n+\n+        String transformed = keyValue;\n+        for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem)) {\n+            List<Object> output = transformer.beforePull(\n+                    null,\n+                    null,\n+                    Collections.<Object>singletonList(transformed));\n+            if (output != null && !output.isEmpty()) {\n+                transformed = output.get(0).toString();\n+            }\n+        }\n+\n+        IntAttrName intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), AnyTypeKind.USER);\n+\n+        if (intAttrName.getField() != null) {\n+            switch (intAttrName.getField()) {\n+                case \"key\":\n+                    User byKey = userDAO.find(transformed);\n+                    if (byKey != null) {\n+                        result.add(byKey.getUsername());\n+                    }\n+                    break;\n+\n+                case \"username\":\n+                    User byUsername = userDAO.findByUsername(transformed);\n+                    if (byUsername != null) {\n+                        result.add(byUsername.getUsername());\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n+\n+                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n+                    if (schema == null) {\n+                        value.setStringValue(transformed);\n+                    } else {\n+                        try {\n+                            value.parseValue(schema, transformed);\n+                        } catch (ParsingValidationException e) {\n+                            LOG.error(\"While parsing provided key value {}\", transformed, e);\n+                            value.setStringValue(transformed);\n+                        }\n+                    }\n+\n+                    CollectionUtils.collect(\n+                            userDAO.findByAttrValue(intAttrName.getSchemaName(), value),\n+                            new Transformer<User, String>() {\n+\n+                        @Override\n+                        public String transform(final User input) {\n+                            return input.getUsername();\n+                        }\n+                    }, result);\n+                    break;\n+\n+                case DERIVED:\n+                    CollectionUtils.collect(\n+                            userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed),\n+                            new Transformer<User, String>() {\n+\n+                        @Override\n+                        public String transform(final User input) {\n+                            return input.getUsername();\n+                        }\n+                    }, result);\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private List<SAML2IdPActions> getActions(final SAML2IdPEntity idp) {\n+        List<SAML2IdPActions> actions = new ArrayList<>();\n+\n+        for (String className : idp.getActionsClassNames()) {\n+            try {\n+                Class<?> actionsClass = Class.forName(className);\n+                SAML2IdPActions idpActions = (SAML2IdPActions) ApplicationContextProvider.getBeanFactory().\n+                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                actions.add(idpActions);\n+            } catch (Exception e) {\n+                LOG.warn(\"Class '{}' not found\", className, e);\n+            }\n+        }\n+\n+        return actions;\n+    }\n+\n+    private void fill(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO, final UserTO userTO) {\n+        for (ItemTO item : idp.getItems()) {\n+            IntAttrName intAttrName = intAttrNameParser.parse(item.getIntAttrName(), AnyTypeKind.USER);\n+\n+            List<String> values = Collections.emptyList();\n+            AttrTO samlAttr = responseTO.getAttr(item.getExtAttrName());\n+            if (samlAttr != null && !samlAttr.getValues().isEmpty()) {\n+                values = samlAttr.getValues();\n+\n+                List<Object> transformed = new ArrayList<Object>(values);\n+                for (ItemTransformer transformer : MappingUtils.getItemTransformers(item)) {\n+                    transformed = transformer.beforePull(null, userTO, transformed);\n+                }\n+                values.clear();\n+                for (Object value : transformed) {\n+                    values.add(value.toString());\n+                }\n+            }\n+\n+            if (intAttrName.getField() != null) {\n+                switch (intAttrName.getField()) {\n+                    case \"username\":\n+                        if (!values.isEmpty()) {\n+                            userTO.setUsername(values.get(0));\n+                        }\n+                        break;\n+\n+                    default:\n+                        LOG.warn(\"Unsupported: {}\", intAttrName.getField());\n+                }\n+            } else if (intAttrName.getSchemaType() != null) {\n+                switch (intAttrName.getSchemaType()) {\n+                    case PLAIN:\n+                        AttrTO attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n+                        if (attr == null) {\n+                            attr = new AttrTO.Builder().schema(intAttrName.getSchemaName()).build();\n+                            userTO.getPlainAttrs().add(attr);\n+                        }\n+                        attr.getValues().clear();\n+                        attr.getValues().addAll(values);\n+                        break;\n+\n+                    default:\n+                        LOG.warn(\"Unsupported: {} {}\", intAttrName.getSchemaType(), intAttrName.getSchemaName());\n+                }\n+            }\n+        }\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n+    public String create(final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO, final String nameID) {\n+        UserTO userTO = new UserTO();\n+\n+        if (idp.getUserTemplate() != null) {\n+            templateUtils.apply(userTO, idp.getUserTemplate());\n+        }\n+\n+        List<SAML2IdPActions> actions = getActions(idp);\n+        for (SAML2IdPActions action : actions) {\n+            userTO = action.beforeCreate(userTO, responseTO);\n+        }\n+\n+        fill(idp, responseTO, userTO);\n+\n+        if (userTO.getRealm() == null) {\n+            userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        }\n+        if (userTO.getUsername() == null) {\n+            userTO.setUsername(nameID);\n+        }\n+\n+        Pair<String, List<PropagationStatus>> created = provisioningManager.create(userTO, false, false);\n+        userTO = binder.getUserTO(created.getKey());\n+\n+        for (SAML2IdPActions action : actions) {\n+            userTO = action.afterCreate(userTO, responseTO);\n+        }\n+\n+        return userTO.getUsername();\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW)\n+    public String update(final String username, final SAML2IdPEntity idp, final SAML2LoginResponseTO responseTO) {\n+        UserTO userTO = binder.getUserTO(username);\n+        UserTO original = SerializationUtils.clone(userTO);\n+\n+        fill(idp, responseTO, userTO);\n+\n+        UserPatch userPatch = AnyOperations.diff(userTO, original, true);\n+\n+        List<SAML2IdPActions> actions = getActions(idp);\n+        for (SAML2IdPActions action : actions) {\n+            userPatch = action.beforeUpdate(userPatch, responseTO);\n+        }\n+\n+        Pair<String, List<PropagationStatus>> updated = provisioningManager.update(userPatch, false);\n+        userTO = binder.getUserTO(updated.getKey());\n+\n+        for (SAML2IdPActions action : actions) {\n+            userTO = action.afterUpdate(userTO, responseTO);\n+        }\n+\n+        return userTO.getUsername();\n+    }\n+}"},{"sha":"5588334986021f1e0afa3fa376f980146f6d2d38","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n \n public interface SAML2IdP extends Entity {\n@@ -35,6 +36,14 @@ public interface SAML2IdP extends Entity {\n \n     void setMetadata(byte[] metadata);\n \n+    boolean isCreateUnmatching();\n+\n+    void setCreateUnmatching(boolean createUnmatching);\n+\n+    boolean isUpdateMatching();\n+\n+    void setUpdateMatching(boolean updateMatching);\n+\n     boolean isUseDeflateEncoding();\n \n     void setUseDeflateEncoding(boolean useDeflateEncoding);\n@@ -43,6 +52,10 @@ public interface SAML2IdP extends Entity {\n \n     void setBindingType(SAML2BindingType bindingType);\n \n+    SAML2UserTemplate getUserTemplate();\n+\n+    void setUserTemplate(SAML2UserTemplate userTemplate);\n+\n     SAML2IdPItem getConnObjectKeyItem();\n \n     void setConnObjectKeyItem(SAML2IdPItem item);\n@@ -51,4 +64,6 @@ public interface SAML2IdP extends Entity {\n \n     List<? extends SAML2IdPItem> getItems();\n \n+    Set<String> getActionsClassNames();\n+\n }"},{"sha":"a26227b3610e56eed6c4149d3e92da516824f8b6","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2UserTemplate.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2UserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2UserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2UserTemplate.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface SAML2UserTemplate extends AnyTemplate {\n+\n+    SAML2IdP getIdP();\n+\n+    void setIdP(SAML2IdP idp);\n+}"},{"sha":"888e87047fa2af1cd3ebd2970a5f8bf535ee2423","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -36,6 +37,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPASAML2IdP();\n         } else if (reference.equals(SAML2IdPItem.class)) {\n             result = (E) new JPASAML2IdPItem();\n+        } else if (reference.equals(SAML2UserTemplate.class)) {\n+            result = (E) new JPASAML2UserTemplate();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"d6df04d3edb8ec99e52eff95a7cc3f3e7d0964b6","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -19,15 +19,21 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n@@ -37,6 +43,7 @@\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2IdPCheck;\n \n @Entity\n@@ -62,6 +69,16 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n     private List<JPASAML2IdPItem> items = new ArrayList<>();\n \n+    @Min(0)\n+    @Max(1)\n+    @Column(nullable = false)\n+    private Integer createUnmatching;\n+\n+    @Min(0)\n+    @Max(1)\n+    @Column(nullable = false)\n+    private Integer updateMatching;\n+\n     @Min(0)\n     @Max(1)\n     @Column(nullable = false)\n@@ -70,6 +87,16 @@ public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP\n     @Column(nullable = false)\n     private SAML2BindingType bindingType;\n \n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"idp\")\n+    private JPASAML2UserTemplate userTemplate;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"actionClassName\")\n+    @CollectionTable(name = TABLE + \"_actionsClassNames\",\n+            joinColumns =\n+            @JoinColumn(name = \"saml2IdP_id\", referencedColumnName = \"id\"))\n+    private Set<String> actionsClassNames = new HashSet<>();\n+\n     @Override\n     public String getEntityID() {\n         return entityID;\n@@ -100,6 +127,26 @@ public void setMetadata(final byte[] metadata) {\n         this.metadata = metadata == null ? null : ArrayUtils.toObject(metadata);\n     }\n \n+    @Override\n+    public boolean isCreateUnmatching() {\n+        return isBooleanAsInteger(createUnmatching);\n+    }\n+\n+    @Override\n+    public void setCreateUnmatching(final boolean createUnmatching) {\n+        this.createUnmatching = getBooleanAsInteger(createUnmatching);\n+    }\n+\n+    @Override\n+    public boolean isUpdateMatching() {\n+        return isBooleanAsInteger(updateMatching);\n+    }\n+\n+    @Override\n+    public void setUpdateMatching(final boolean updateMatching) {\n+        this.updateMatching = getBooleanAsInteger(updateMatching);\n+    }\n+\n     @Override\n     public boolean isUseDeflateEncoding() {\n         return isBooleanAsInteger(useDeflateEncoding);\n@@ -120,6 +167,17 @@ public void setBindingType(final SAML2BindingType bindingType) {\n         this.bindingType = bindingType;\n     }\n \n+    @Override\n+    public SAML2UserTemplate getUserTemplate() {\n+        return userTemplate;\n+    }\n+\n+    @Override\n+    public void setUserTemplate(final SAML2UserTemplate userTemplate) {\n+        checkType(userTemplate, JPASAML2UserTemplate.class);\n+        this.userTemplate = (JPASAML2UserTemplate) userTemplate;\n+    }\n+\n     @Override\n     public boolean add(final SAML2IdPItem item) {\n         checkType(item, JPASAML2IdPItem.class);\n@@ -148,4 +206,8 @@ public void setConnObjectKeyItem(final SAML2IdPItem item) {\n         this.add(item);\n     }\n \n+    @Override\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n }"},{"sha":"538fa9486831a61b2d4025c58e34ee769afc1a5a","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2UserTemplate.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2UserTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2UserTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2UserTemplate.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+\n+@Entity\n+@Table(name = JPASAML2UserTemplate.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"idp_id\" }))\n+public class JPASAML2UserTemplate extends AbstractAnyTemplate implements SAML2UserTemplate {\n+\n+    private static final long serialVersionUID = -4575039890434426856L;\n+\n+    public static final String TABLE = \"SAML2UserTemplate\";\n+\n+    @ManyToOne\n+    private JPASAML2IdP idp;\n+\n+    @Override\n+    public SAML2IdP getIdP() {\n+        return idp;\n+    }\n+\n+    @Override\n+    public void setIdP(final SAML2IdP idp) {\n+        checkType(idp, JPASAML2IdP.class);\n+        this.idp = (JPASAML2IdP) idp;\n+    }\n+\n+}"},{"sha":"6f23804ef7e226a0f6962555f8d38a438885c617","filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/SAML2IdPActions.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+\n+public interface SAML2IdPActions {\n+\n+    UserTO beforeCreate(UserTO input, SAML2LoginResponseTO loginResponse);\n+\n+    UserTO afterCreate(UserTO input, SAML2LoginResponseTO loginResponse);\n+\n+    UserPatch beforeUpdate(UserPatch input, SAML2LoginResponseTO loginResponse);\n+\n+    UserTO afterUpdate(UserTO input, SAML2LoginResponseTO loginResponse);\n+}"},{"sha":"ba5fc4077e8e5d49cda1dc447d14d2e61a032a7f","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultSAML2IdPActions.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultSAML2IdPActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultSAML2IdPActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultSAML2IdPActions.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.core.provisioning.api.SAML2IdPActions;\n+\n+public class DefaultSAML2IdPActions implements SAML2IdPActions {\n+\n+    @Override\n+    public UserTO beforeCreate(final UserTO input, final SAML2LoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+    @Override\n+    public UserTO afterCreate(final UserTO input, final SAML2LoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+    @Override\n+    public UserPatch beforeUpdate(final UserPatch input, final SAML2LoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+    @Override\n+    public UserTO afterUpdate(final UserTO input, final SAML2LoginResponseTO loginResponse) {\n+        return input;\n+    }\n+\n+}"},{"sha":"2f2f9d052aa77f4a726b9d86d0c83ff777b7585b","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ItemTO;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -36,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n+import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n@@ -168,9 +170,24 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.setEntityID(idpTO.getEntityID());\n         idp.setName(idpTO.getName());\n         idp.setMetadata(Base64.decode(idpTO.getMetadata()));\n+        idp.setCreateUnmatching(idpTO.isCreateUnmatching());\n+        idp.setUpdateMatching(idpTO.isUpdateMatching());\n         idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n         idp.setBindingType(idpTO.getBindingType());\n \n+        if (idpTO.getUserTemplate() == null) {\n+            idp.setUserTemplate(null);\n+        } else {\n+            SAML2UserTemplate userTemplate = idp.getUserTemplate();\n+            if (userTemplate == null) {\n+                userTemplate = entityFactory.newEntity(SAML2UserTemplate.class);\n+                userTemplate.setAnyType(anyTypeDAO.findUser());\n+                userTemplate.setIdP(idp);\n+                idp.setUserTemplate(userTemplate);\n+            }\n+            userTemplate.set(idpTO.getUserTemplate());\n+        }\n+\n         idp.getItems().clear();\n         AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n         for (AnyTypeClass anyTypeClass : anyTypeDAO.findUser().getClasses()) {\n@@ -186,6 +203,9 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         }\n         populateItems(idpTO, idp, allowedSchemas);\n \n+        idp.getActionsClassNames().clear();\n+        idp.getActionsClassNames().addAll(idpTO.getActionsClassNames());\n+\n         return saml2IdPDAO.save(idp);\n     }\n \n@@ -213,10 +233,18 @@ public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n         idpTO.setName(idp.getName());\n         idpTO.setUseDeflateEncoding(idp.isUseDeflateEncoding());\n         idpTO.setBindingType(idp.getBindingType());\n+        idpTO.setCreateUnmatching(idp.isCreateUnmatching());\n+        idpTO.setUpdateMatching(idp.isUpdateMatching());\n         idpTO.setMetadata(Base64.encode(idp.getMetadata()));\n \n+        if (idp.getUserTemplate() != null) {\n+            idpTO.setUserTemplate((UserTO) idp.getUserTemplate().get());\n+        }\n+\n         populateItems(idp, idpTO);\n \n+        idpTO.getActionsClassNames().addAll(idp.getActionsClassNames());\n+\n         return idpTO;\n     }\n }"},{"sha":"0d528c39994e05f67a1d1c72fddccd48ee03274d","filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.util.List;\n+import java.util.Set;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -39,6 +40,16 @@\n @Path(\"saml2sp/identityProviders\")\n public interface SAML2IdPService extends JAXRSService {\n \n+    /**\n+     * Returns the list of available SAML2IdPActions implementations.\n+     *\n+     * @return the list of available SAML2IdPActions implementations\n+     */\n+    @GET\n+    @Path(\"actionsClasses\")\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    Set<String> getActionsClasses();\n+\n     /**\n      * Returns a list of all defined SAML 2.0 Identity Providers.\n      *"},{"sha":"ebda30da3e77b29be6a4a97ad8b6519870364e21","filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPServiceImpl.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -20,6 +20,7 @@\n \n import java.io.InputStream;\n import java.util.List;\n+import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2IdPTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -34,6 +35,11 @@ public class SAML2IdPServiceImpl extends AbstractServiceImpl implements SAML2IdP\n     @Autowired\n     private SAML2IdPLogic logic;\n \n+    @Override\n+    public Set<String> getActionsClasses() {\n+        return logic.getActionsClasses();\n+    }\n+\n     @Override\n     public List<SAML2IdPTO> list() {\n         return logic.list();"},{"sha":"b87db1be5edc64eb948d74fdfbb22af4e118576f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1c004bfcd30c529757e37743e666c935beeeeb5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1c004bfcd30c529757e37743e666c935beeeeb5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=f1c004bfcd30c529757e37743e666c935beeeeb5","patch":"@@ -22,6 +22,7 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n@@ -48,6 +49,7 @@\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.SAML2ReceivedResponseTO;\n import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.SAML2SPDetector;\n@@ -171,13 +173,20 @@ public void setIdPMapping() {\n \n         SAML2IdPTO ssoCircle = ssoCircleOpt.get();\n         assertNotNull(ssoCircle);\n+        assertFalse(ssoCircle.isCreateUnmatching());\n+        assertNull(ssoCircle.getUserTemplate());\n         assertFalse(ssoCircle.getItems().isEmpty());\n         assertNotNull(ssoCircle.getConnObjectKeyItem());\n         assertNotEquals(\"email\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n         assertNotEquals(\"EmailAddress\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n \n-        ssoCircle.getItems().clear();\n+        ssoCircle.setCreateUnmatching(true);\n+\n+        UserTO userTemplate = new UserTO();\n+        userTemplate.setRealm(\"'/'\");\n+        ssoCircle.setUserTemplate(userTemplate);\n \n+        ssoCircle.getItems().clear();\n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"email\");\n         keyMapping.setExtAttrName(\"EmailAddress\");\n@@ -186,6 +195,8 @@ public void setIdPMapping() {\n         saml2IdPService.update(ssoCircle);\n \n         ssoCircle = saml2IdPService.read(ssoCircle.getKey());\n+        assertTrue(ssoCircle.isCreateUnmatching());\n+        assertEquals(userTemplate, ssoCircle.getUserTemplate());\n         assertEquals(\"email\", ssoCircle.getConnObjectKeyItem().getIntAttrName());\n         assertEquals(\"EmailAddress\", ssoCircle.getConnObjectKeyItem().getExtAttrName());\n     }"}]}